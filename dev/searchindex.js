Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-numerically", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-numerically.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 34, 35, 38, 39, 40, 41, 48, 49, 50, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 71, 81, 83, 85, 87, 88, 89, 91, 94, 98, 100, 101, 102, 106, 108, 109, 111, 113, 116, 117, 135, 136, 139, 149, 153, 166, 175, 177, 181, 188, 191, 193, 195, 197, 198, 200, 202, 203, 204, 206, 207, 214, 215, 217, 220, 223, 224, 225, 226, 227, 228, 231, 232, 236, 238, 239, 242, 243, 245, 246, 252, 254, 256, 257, 259, 261, 262, 273, 274, 276, 277, 279, 280, 283, 284, 285], "public": [0, 6, 40, 58, 59, 80, 197, 198, 200, 201, 205, 220, 223, 227, 241, 252], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 22, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 139, 140, 141, 144, 145, 147, 149, 151, 152, 153, 156, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 255, 256, 258, 259, 261, 262, 264, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102, 104, 106, 108, 112, 113, 114, 116, 117, 118, 119, 122, 123, 126, 127, 132, 133, 134, 137, 138, 139, 140, 141, 144, 146, 149, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 252, 254, 256, 257, 258, 259, 261, 262, 269, 275, 277, 279, 280, 284], "smith": [0, 10, 95, 196], "cp": [0, 50, 99, 195], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 32, 36, 40, 41, 46, 47, 49, 50, 54, 57, 58, 59, 60, 61, 63, 66, 68, 70, 74, 75, 83, 85, 87, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 104, 108, 110, 111, 113, 116, 117, 118, 119, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 148, 155, 169, 170, 173, 175, 177, 188, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 223, 225, 226, 227, 228, 229, 232, 233, 239, 240, 242, 245, 247, 252, 255, 257, 261, 262, 274, 280, 283, 284, 285], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 31, 39, 40, 49, 50, 56, 58, 59, 64, 66, 68, 69, 71, 72, 74, 80, 83, 98, 102, 113, 117, 119, 121, 122, 134, 135, 136, 137, 139, 140, 162, 172, 183, 186, 188, 190, 192, 200, 201, 203, 204, 207, 209, 214, 217, 223, 227, 232, 238, 245, 248, 249, 255, 258, 274], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 226], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 80, 81, 83, 85, 86, 87, 88, 89, 91, 92, 94, 97, 98, 99, 100, 101, 102, 106, 108, 110, 112, 113, 115, 116, 119, 122, 124, 128, 132, 133, 137, 139, 143, 144, 145, 151, 152, 154, 156, 158, 159, 162, 166, 167, 169, 170, 172, 175, 177, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 227, 233, 238, 239, 240, 241, 242, 243, 245, 246, 248, 252, 254, 258, 259, 261, 264, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 284, 285], "moor": [0, 91, 94], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 32, 35, 36, 38, 40, 41, 42, 49, 50, 51, 52, 54, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 83, 85, 87, 88, 89, 90, 91, 94, 98, 99, 100, 104, 108, 109, 112, 113, 114, 116, 117, 118, 119, 121, 122, 125, 126, 127, 134, 135, 136, 137, 139, 140, 144, 146, 152, 156, 168, 170, 172, 174, 175, 177, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 210, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 233, 236, 238, 241, 245, 246, 252, 255, 257, 261, 273, 274, 278, 279, 280, 283, 284, 285], "vig": 0, "granger": [0, 158], "BE": 0, "muller": 0, "rp": [0, 74, 144], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 24, 25, 26, 38, 39, 40, 41, 48, 49, 50, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 76, 81, 82, 83, 85, 87, 89, 91, 94, 98, 99, 100, 102, 106, 116, 117, 121, 127, 132, 134, 135, 139, 141, 145, 146, 157, 158, 161, 170, 172, 175, 182, 187, 188, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 206, 207, 209, 210, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 232, 233, 238, 239, 240, 241, 242, 245, 246, 248, 258, 259, 262, 273, 274, 279, 283, 284, 285], "gupta": [0, 226], "h": [0, 12, 16, 38, 39, 40, 41, 42, 49, 54, 57, 58, 59, 63, 66, 80, 83, 85, 89, 90, 94, 95, 100, 108, 116, 119, 137, 141, 144, 156, 158, 161, 166, 170, 177, 192, 193, 194, 195, 196, 200, 201, 202, 203, 206, 207, 215, 219, 223, 225, 226, 227, 228, 233, 240, 262, 274, 283], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 158], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 147, 149, 151, 153, 156, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 242, 243, 244, 245, 246, 248, 252, 254, 255, 256, 257, 258, 259, 261, 263, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 277, 279, 280, 282, 283, 284, 285], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 32, 39, 40, 41, 42, 49, 50, 58, 59, 60, 62, 63, 64, 71, 72, 74, 76, 80, 81, 83, 85, 94, 98, 100, 102, 104, 108, 110, 113, 116, 117, 118, 119, 121, 122, 124, 126, 129, 130, 131, 136, 137, 138, 139, 140, 141, 144, 168, 169, 172, 173, 175, 182, 183, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 214, 215, 217, 219, 220, 223, 225, 226, 227, 233, 238, 240, 242, 252, 255, 257, 258, 259, 262, 284], "scopatz": 0, "2017": [0, 192], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 48, 50, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 85, 86, 88, 89, 91, 94, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 112, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 137, 139, 141, 144, 145, 146, 147, 149, 151, 152, 154, 156, 158, 160, 161, 164, 167, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 239, 245, 246, 252, 254, 255, 257, 258, 259, 262, 269, 273, 274, 277, 279, 280, 283, 284, 285], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 30, 32, 38, 40, 41, 42, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 73, 77, 80, 81, 82, 84, 85, 87, 89, 91, 94, 95, 97, 98, 100, 101, 102, 106, 108, 112, 116, 117, 118, 121, 122, 124, 125, 129, 132, 139, 156, 157, 158, 166, 171, 172, 174, 176, 177, 181, 182, 183, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 212, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 229, 239, 242, 245, 246, 252, 254, 255, 256, 257, 258, 259, 261, 264, 273, 274, 276, 277, 280, 284], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 25, 28, 29, 30, 33, 34, 35, 38, 50, 58, 59, 62, 64, 70, 86, 88, 89, 91, 94, 98, 99, 100, 101, 112, 122, 139, 182, 193, 194, 195, 197, 198, 204, 206, 207, 215, 219, 223, 226, 228, 238, 239, 240, 241, 242, 245, 246, 248, 252, 276, 277, 278, 279, 280, 282, 283, 284], "peerj": 0, "scienc": [0, 50, 83, 94, 138, 139, 194, 201, 217, 274], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 28, 30, 32, 33, 35, 36, 37, 38, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 108, 109, 110, 111, 113, 114, 116, 119, 121, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 143, 145, 149, 151, 152, 153, 157, 161, 166, 167, 169, 171, 172, 175, 178, 179, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 238, 239, 241, 242, 243, 245, 246, 248, 250, 252, 254, 255, 256, 257, 259, 261, 262, 269, 273, 274, 276, 278, 279, 280, 283, 284, 285], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 30, 32, 34, 35, 36, 38, 39, 40, 42, 46, 47, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 70, 74, 75, 76, 80, 83, 85, 86, 87, 88, 89, 91, 94, 98, 101, 106, 108, 110, 111, 141, 143, 144, 145, 147, 148, 149, 153, 154, 155, 158, 160, 161, 170, 172, 182, 184, 187, 189, 192, 201, 203, 206, 207, 210, 212, 214, 215, 216, 219, 220, 223, 226, 227, 239, 240, 241, 243, 245, 246, 248, 252, 254, 258, 260, 262, 280, 283], "doi": [0, 6, 38, 50, 94, 201, 216, 219, 227], "org": [0, 3, 6, 7, 12, 18, 20, 32, 34, 35, 36, 38, 39, 40, 46, 47, 49, 50, 57, 58, 59, 60, 61, 63, 64, 66, 68, 70, 74, 75, 76, 85, 86, 87, 88, 89, 91, 94, 98, 106, 108, 110, 111, 141, 143, 144, 145, 147, 148, 149, 153, 154, 155, 158, 160, 161, 170, 172, 182, 184, 187, 189, 201, 203, 207, 210, 214, 215, 216, 220, 223, 226, 227, 239, 240, 241, 243, 245, 252, 254, 258, 260, 262, 280, 283], "10": [0, 3, 6, 12, 20, 26, 28, 30, 32, 38, 40, 47, 49, 50, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 71, 72, 74, 75, 83, 85, 86, 88, 89, 91, 94, 95, 98, 99, 100, 101, 104, 106, 108, 109, 114, 119, 122, 124, 139, 141, 145, 156, 166, 167, 178, 182, 183, 184, 186, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 210, 213, 214, 215, 216, 219, 220, 223, 226, 227, 228, 237, 238, 243, 245, 246, 248, 252, 255, 273, 280, 284], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 22, 24, 31, 32, 38, 39, 42, 43, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 81, 83, 85, 87, 88, 89, 91, 94, 98, 99, 100, 101, 102, 104, 108, 110, 112, 114, 116, 117, 122, 127, 129, 130, 131, 133, 135, 136, 137, 139, 141, 145, 151, 152, 153, 156, 158, 161, 166, 169, 171, 172, 177, 182, 186, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 232, 233, 239, 240, 242, 245, 248, 249, 252, 254, 255, 256, 257, 258, 259, 262, 274, 276, 283, 284, 285], "103": [0, 49], "bibtex": 0, "entri": [0, 10, 36, 41, 48, 50, 56, 59, 70, 83, 87, 89, 90, 91, 97, 117, 122, 124, 137, 144, 196, 200, 202, 203, 217, 227, 246], "latex": [0, 1, 3, 6, 11, 20, 28, 30, 66, 86, 181, 182, 187, 191, 193, 198, 207, 278, 279], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 39, 40, 41, 49, 50, 57, 58, 59, 60, 66, 70, 83, 87, 91, 94, 100, 101, 102, 106, 108, 112, 122, 132, 135, 137, 140, 160, 161, 170, 176, 177, 181, 182, 186, 190, 194, 197, 200, 202, 204, 205, 206, 207, 208, 216, 219, 225, 226, 227, 236, 239, 240, 242, 243, 246, 252, 256, 257, 262, 269, 273, 276, 277, 279, 280, 281], "articl": [0, 58, 59, 91, 94, 199, 201, 202, 207, 252, 270, 278], "titl": [0, 6, 7, 193], "author": [0, 6, 98, 158, 202], "aaron": 0, "christoph": [0, 252], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 22, 24, 32, 34, 35, 36, 40, 41, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 80, 81, 83, 85, 89, 91, 94, 98, 100, 101, 102, 104, 108, 109, 113, 116, 117, 118, 119, 121, 122, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 151, 170, 172, 177, 183, 186, 188, 190, 192, 193, 195, 196, 197, 200, 201, 203, 204, 207, 209, 210, 214, 215, 217, 219, 220, 223, 225, 226, 227, 228, 232, 233, 245, 252, 255, 256, 257, 258, 259, 261, 280, 284], "mateusz": 0, "v": [0, 1, 5, 14, 25, 28, 32, 40, 48, 54, 57, 58, 59, 60, 61, 62, 66, 72, 83, 87, 89, 94, 98, 102, 113, 114, 116, 119, 124, 136, 137, 139, 140, 144, 145, 157, 172, 177, 182, 184, 186, 188, 190, 191, 193, 200, 201, 202, 203, 207, 217, 219, 220, 223, 225, 227, 238, 245, 252, 255, 256, 257, 258, 259, 261], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 24, 32, 38, 39, 40, 41, 42, 44, 48, 49, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 66, 71, 76, 83, 85, 88, 89, 91, 94, 98, 116, 117, 127, 134, 136, 137, 139, 146, 160, 161, 164, 168, 170, 172, 181, 188, 192, 194, 196, 197, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 223, 225, 227, 228, 229, 231, 232, 233, 234, 238, 242, 245, 252, 254, 255, 256, 257, 258, 259, 261, 262, 283, 284], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 22, 24, 32, 39, 40, 41, 42, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 81, 83, 85, 87, 88, 89, 90, 91, 94, 98, 100, 101, 102, 104, 106, 108, 113, 114, 116, 117, 118, 119, 122, 126, 127, 136, 137, 139, 141, 144, 149, 151, 153, 155, 160, 161, 164, 169, 170, 171, 172, 182, 184, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 238, 241, 242, 245, 248, 252, 254, 255, 256, 257, 258, 274, 276, 280, 284, 285], "matthew": 0, "amit": [0, 226], "sergiu": 0, "jason": [0, 207], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 158], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 26, 28, 31, 32, 36, 38, 39, 40, 41, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 70, 71, 72, 73, 74, 75, 80, 81, 83, 85, 87, 88, 89, 94, 98, 100, 101, 102, 104, 108, 109, 113, 116, 117, 119, 121, 122, 135, 136, 139, 140, 141, 144, 151, 152, 156, 161, 162, 164, 167, 169, 171, 172, 177, 178, 182, 187, 188, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 252, 256, 259, 261, 262, 273, 274, 278, 279, 284], "richard": [0, 98], "francesco": 0, "harsh": [0, 226], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 32, 36, 38, 40, 41, 44, 48, 49, 50, 54, 56, 57, 59, 60, 62, 63, 66, 80, 83, 85, 87, 89, 91, 94, 98, 106, 109, 116, 137, 138, 139, 144, 151, 152, 169, 172, 177, 181, 188, 192, 194, 196, 198, 200, 201, 202, 203, 204, 206, 207, 209, 215, 217, 219, 220, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 239, 245, 252, 254, 255, 256, 257, 258, 259, 261, 262], "andi": [0, 138], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 24, 25, 31, 36, 38, 40, 41, 42, 44, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 80, 81, 83, 85, 87, 88, 89, 91, 94, 95, 98, 100, 101, 102, 104, 108, 110, 111, 113, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 143, 145, 146, 148, 152, 157, 158, 161, 166, 168, 169, 170, 172, 173, 175, 177, 179, 181, 182, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 230, 232, 233, 236, 239, 245, 247, 248, 252, 254, 255, 256, 257, 261, 267, 274, 280, 283, 284, 285], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 227], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 59], "keyword": [0, 4, 6, 11, 14, 20, 39, 40, 41, 49, 50, 58, 59, 62, 63, 71, 73, 74, 75, 89, 94, 98, 101, 106, 108, 117, 134, 135, 166, 172, 187, 193, 195, 197, 198, 200, 202, 203, 206, 207, 208, 214, 219, 220, 225, 232, 238, 239, 241, 243, 246, 248, 257, 280], "algebra": [0, 7, 11, 12, 14, 18, 22, 26, 28, 36, 41, 49, 58, 59, 62, 64, 76, 79, 80, 81, 83, 85, 88, 89, 93, 95, 98, 99, 100, 121, 132, 139, 140, 192, 195, 196, 198, 199, 200, 201, 203, 204, 207, 209, 217, 220, 222, 223, 226, 263, 264, 267, 269, 270, 275, 276, 278, 280], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 33, 35, 49, 58, 59, 60, 64, 83, 86, 87, 88, 89, 94, 99, 100, 101, 104, 105, 107, 108, 112, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 139, 150, 151, 166, 169, 170, 172, 175, 179, 182, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 215, 216, 222, 226, 227, 238, 239, 252, 254, 255, 258, 260, 262, 267, 269, 276, 278, 280, 284, 285], "abstract": [0, 10, 38, 39, 47, 58, 60, 64, 66, 71, 76, 91, 116, 122, 156, 158, 167, 170, 171, 172, 194, 202, 226, 227, 229, 233, 240, 261], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 112, 113, 116, 117, 119, 121, 124, 126, 132, 134, 136, 137, 139, 140, 143, 144, 145, 149, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 169, 170, 172, 173, 174, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 222, 223, 224, 225, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 252, 254, 256, 257, 259, 260, 261, 262, 273, 274, 275, 276, 277, 278, 280, 283, 284, 285], "open": [0, 1, 3, 4, 6, 7, 9, 10, 23, 24, 25, 26, 27, 30, 38, 58, 60, 64, 85, 88, 108, 122, 125, 139, 207, 215, 222, 226, 227, 249, 278, 280], "sourc": [0, 1, 5, 6, 7, 11, 20, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 104, 106, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 183, 184, 186, 187, 188, 192, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 259, 271, 278], "written": [0, 3, 6, 7, 11, 18, 20, 36, 40, 46, 49, 50, 54, 58, 63, 66, 70, 76, 81, 83, 87, 88, 97, 98, 126, 132, 139, 172, 188, 189, 190, 191, 194, 195, 203, 207, 210, 214, 217, 220, 223, 240, 259, 261, 277, 278, 279, 284], "pure": [0, 3, 11, 25, 26, 32, 59, 64, 85, 88, 91, 108, 136, 177, 197, 198, 200, 203, 207, 227, 245], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 30, 32, 33, 34, 35, 38, 39, 40, 46, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 70, 71, 74, 75, 81, 83, 85, 87, 88, 94, 98, 99, 100, 101, 102, 104, 106, 108, 110, 112, 113, 114, 116, 117, 122, 124, 130, 132, 133, 134, 135, 137, 139, 141, 145, 146, 156, 161, 162, 167, 168, 169, 170, 171, 172, 174, 177, 180, 182, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 210, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 238, 239, 240, 241, 242, 243, 246, 252, 255, 256, 257, 259, 261, 262, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284], "built": [0, 1, 3, 6, 7, 11, 12, 15, 33, 35, 41, 58, 64, 85, 94, 122, 139, 195, 198, 207, 208, 212, 223, 226, 227, 233, 242, 245, 246, 278, 279, 283], "focu": [0, 10, 18, 68, 225, 278], "extens": [0, 3, 6, 7, 18, 20, 49, 58, 63, 64, 70, 74, 85, 94, 119, 139, 195, 197, 198, 200, 201, 202, 203, 207, 217, 219, 223, 225, 226, 239, 240, 249, 277, 284], "eas": [0, 122, 191, 193, 207, 210], "through": [0, 1, 4, 6, 11, 12, 18, 20, 25, 28, 30, 38, 40, 49, 50, 52, 57, 58, 59, 62, 63, 66, 68, 69, 70, 71, 72, 74, 83, 87, 88, 94, 98, 101, 102, 106, 113, 117, 122, 124, 132, 137, 143, 144, 182, 193, 194, 200, 202, 207, 213, 217, 219, 223, 225, 226, 227, 228, 239, 245, 252, 254, 259, 262, 275, 276, 277, 282], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 24, 25, 31, 32, 38, 39, 40, 50, 53, 54, 56, 57, 58, 59, 63, 64, 66, 73, 82, 83, 85, 88, 89, 94, 98, 100, 101, 102, 108, 113, 116, 117, 124, 126, 127, 133, 136, 144, 145, 156, 162, 169, 172, 177, 182, 186, 190, 191, 193, 194, 195, 197, 198, 200, 202, 203, 205, 206, 207, 209, 214, 215, 216, 217, 219, 220, 223, 225, 226, 228, 232, 238, 240, 245, 246, 252, 254, 274, 277, 278, 279, 284, 285], "interact": [0, 11, 14, 25, 31, 58, 72, 85, 92, 94, 139, 169, 187, 191, 197, 198, 219, 227, 243, 250, 263, 271, 276, 278, 279, 283, 284], "programmat": [0, 11, 14, 15, 27, 28, 226, 257], "applic": [0, 7, 10, 25, 41, 42, 48, 49, 50, 51, 58, 59, 64, 85, 89, 94, 98, 101, 104, 116, 117, 121, 122, 132, 136, 138, 139, 156, 157, 182, 186, 190, 195, 200, 201, 202, 203, 207, 209, 214, 220, 223, 226, 240, 245, 252, 259, 260, 267, 278], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 28, 29, 31, 39, 40, 49, 57, 58, 59, 60, 66, 83, 85, 88, 94, 100, 102, 108, 116, 117, 118, 124, 126, 130, 136, 139, 162, 167, 168, 182, 183, 188, 190, 191, 194, 195, 196, 197, 198, 200, 203, 207, 217, 220, 223, 224, 226, 227, 229, 234, 238, 239, 240, 245, 259, 274, 277, 280, 283, 284], "characterist": [0, 60, 76, 94, 190, 196, 198, 200, 201, 223, 225, 280], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 23, 24, 26, 28, 30, 32, 34, 35, 36, 38, 39, 40, 41, 42, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 69, 73, 74, 76, 81, 82, 83, 85, 87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 102, 106, 108, 109, 111, 112, 116, 117, 119, 122, 123, 124, 130, 132, 136, 139, 156, 158, 161, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 180, 181, 182, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 212, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 228, 231, 233, 234, 236, 237, 238, 240, 241, 242, 245, 246, 248, 252, 254, 256, 257, 258, 259, 262, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 49, 54, 57, 58, 59, 62, 81, 86, 94, 100, 187, 190, 194, 195, 197, 204, 207, 210, 216, 223, 226, 227, 233, 248, 255, 257, 284], "popular": [0, 3, 59, 99, 139, 278], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 26, 29, 30, 40, 58, 59, 63, 83, 85, 86, 94, 99, 112, 122, 139, 193, 197, 198, 227, 238, 239, 240, 245, 246, 273, 276, 277, 278], "scientif": [0, 11, 30, 58, 139], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 149, 151, 152, 153, 155, 156, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285], "paper": [0, 6, 98, 124, 191, 202, 203, 216, 217, 220, 223, 227], "present": [0, 3, 7, 10, 11, 12, 16, 38, 39, 42, 45, 49, 50, 52, 56, 58, 61, 85, 94, 98, 101, 104, 106, 108, 117, 124, 172, 174, 182, 184, 187, 188, 193, 194, 200, 201, 202, 206, 207, 220, 226, 240, 246, 249, 255, 256, 257, 261, 264, 285], "architectur": [0, 139, 197, 238], "descript": [0, 4, 6, 7, 10, 22, 29, 39, 41, 48, 66, 85, 98, 144, 162, 169, 180, 190, 191, 192, 207, 231, 238, 240, 242, 243, 263, 281], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 28, 32, 34, 35, 36, 39, 40, 41, 42, 46, 48, 49, 50, 57, 58, 59, 60, 63, 64, 66, 68, 70, 74, 76, 83, 85, 86, 88, 89, 91, 94, 98, 100, 101, 102, 104, 108, 112, 113, 116, 117, 119, 122, 124, 125, 126, 132, 133, 136, 137, 139, 140, 145, 151, 157, 158, 160, 161, 166, 167, 170, 172, 177, 179, 182, 183, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 219, 222, 223, 225, 226, 227, 231, 232, 233, 238, 241, 242, 245, 246, 249, 252, 255, 256, 257, 259, 262, 278, 279, 280, 283, 284], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 29, 30, 58, 60, 62, 89, 100, 122, 132, 139, 189, 207, 223, 227, 236, 240, 243, 260, 269, 272, 277, 278, 282, 284], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 29, 41, 49, 59, 66, 98, 112, 117, 122, 132, 136, 137, 181, 189, 190, 191, 197, 233, 242, 263, 273, 275, 276, 278, 279, 281, 283, 284], "select": [0, 1, 13, 14, 29, 40, 42, 49, 50, 57, 58, 59, 67, 72, 86, 88, 89, 98, 100, 114, 137, 177, 187, 197, 198, 200, 201, 203, 207, 216, 219, 225], "submodul": [0, 3, 4, 6, 11, 40, 112, 194, 198, 200, 202], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 254, 255, 256, 257, 260, 261, 262, 269, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285], "supplementari": 0, "materi": [0, 101, 143, 282], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 32, 38, 39, 40, 41, 47, 48, 49, 50, 56, 57, 58, 60, 62, 66, 67, 69, 74, 77, 80, 81, 85, 86, 88, 89, 91, 94, 95, 97, 98, 99, 100, 102, 104, 106, 112, 113, 116, 117, 119, 121, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 139, 140, 145, 146, 166, 174, 175, 176, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 212, 215, 216, 217, 219, 223, 224, 225, 226, 227, 228, 232, 233, 238, 239, 240, 242, 243, 245, 246, 248, 252, 255, 256, 257, 259, 260, 262, 274, 278, 279, 280, 284], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 30, 40, 48, 49, 50, 57, 58, 64, 66, 70, 76, 78, 82, 83, 85, 86, 88, 91, 94, 100, 105, 106, 108, 112, 113, 117, 136, 137, 140, 158, 170, 171, 174, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 207, 213, 216, 217, 219, 220, 223, 224, 225, 226, 227, 238, 239, 240, 242, 243, 245, 246, 248, 256, 276, 278, 279, 280, 283, 284], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 25, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 104, 106, 108, 110, 111, 113, 114, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 176, 178, 179, 182, 183, 184, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 212, 213, 215, 216, 219, 220, 222, 223, 224, 225, 226, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 259, 260, 261, 262, 267, 269, 270, 273, 274, 275, 276, 277, 279, 280, 282, 283, 285], "further": [0, 3, 5, 18, 20, 35, 39, 59, 64, 66, 70, 83, 85, 90, 91, 94, 100, 101, 105, 106, 113, 116, 117, 137, 144, 190, 192, 193, 194, 200, 202, 203, 216, 217, 219, 223, 227, 233, 277, 278], "outlin": [0, 3, 4, 18, 20, 56, 85, 194, 223], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 29, 39, 49, 58, 60, 63, 65, 66, 83, 84, 85, 86, 89, 94, 98, 106, 116, 117, 122, 137, 139, 144, 162, 166, 182, 184, 192, 193, 194, 200, 202, 209, 214, 219, 220, 221, 223, 224, 227, 232, 233, 238, 241, 243, 246, 257, 258, 259, 260, 263, 267, 274, 276, 280, 281, 283], "volum": [0, 6, 40, 57, 66, 83, 192, 201, 217, 220, 223, 242, 252], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 24, 25, 26, 27, 29, 40, 41, 57, 63, 83, 98, 99, 116, 117, 139, 177, 193, 196, 197, 198, 201, 207, 217, 220, 243, 261, 284], "journal": [0, 6, 57, 63, 98, 109, 201, 219, 242], "issn": 0, "2376": 0, "5992": 0, "url": [0, 59, 243], "bsd": [0, 1, 3, 278], "licens": [0, 1, 3, 278], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 46, 47, 49, 50, 52, 54, 56, 58, 59, 62, 64, 66, 68, 70, 71, 72, 74, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 94, 95, 98, 100, 101, 102, 108, 112, 116, 117, 122, 124, 126, 132, 133, 134, 136, 139, 140, 145, 156, 158, 166, 168, 169, 170, 172, 174, 176, 177, 181, 182, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 231, 232, 236, 238, 239, 242, 243, 245, 246, 248, 258, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 34, 35, 36, 38, 40, 41, 49, 50, 57, 58, 59, 60, 62, 64, 65, 66, 70, 72, 74, 76, 77, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 98, 99, 100, 108, 110, 111, 112, 116, 117, 118, 119, 122, 123, 133, 134, 136, 137, 139, 161, 166, 167, 170, 172, 181, 182, 184, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 208, 210, 214, 215, 219, 220, 223, 224, 225, 226, 227, 231, 232, 233, 236, 238, 239, 240, 241, 243, 245, 246, 249, 256, 257, 258, 259, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285], "free": [0, 10, 11, 26, 30, 38, 39, 40, 48, 49, 54, 58, 70, 85, 89, 91, 94, 98, 101, 102, 106, 109, 116, 132, 141, 161, 179, 182, 189, 193, 194, 198, 200, 202, 203, 207, 209, 215, 217, 219, 220, 223, 225, 226, 233, 245, 278], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 33, 35, 40, 49, 50, 54, 57, 58, 59, 60, 63, 64, 66, 68, 83, 85, 88, 89, 94, 98, 99, 100, 101, 104, 116, 122, 136, 140, 172, 191, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 214, 215, 216, 217, 219, 223, 224, 225, 226, 238, 239, 246, 256, 257, 261, 273, 276, 278, 280, 284, 285], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 27, 28, 29, 30, 40, 41, 43, 49, 50, 57, 58, 59, 62, 63, 64, 66, 68, 78, 81, 85, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 104, 108, 112, 116, 119, 122, 124, 133, 136, 137, 139, 140, 154, 156, 166, 167, 170, 171, 172, 177, 181, 182, 186, 188, 190, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 210, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 233, 234, 236, 238, 239, 240, 241, 245, 246, 248, 249, 256, 257, 259, 261, 273, 274, 276, 277, 278, 279, 280, 284], "academ": [0, 39, 42, 201], "commerci": [0, 278], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 23, 24, 25, 27, 28, 34, 39, 40, 41, 47, 49, 50, 58, 59, 60, 62, 64, 65, 66, 68, 70, 71, 73, 74, 79, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 104, 108, 113, 116, 117, 119, 122, 125, 126, 127, 129, 131, 133, 135, 136, 137, 139, 140, 149, 151, 153, 157, 160, 161, 162, 166, 167, 169, 170, 172, 175, 178, 181, 182, 184, 186, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 207, 214, 219, 223, 226, 227, 228, 232, 233, 238, 239, 240, 242, 243, 245, 246, 252, 257, 259, 274, 276, 279, 280, 283, 284, 285], "fork": [0, 5, 7, 10, 124], "deriv": [0, 6, 10, 11, 17, 20, 25, 38, 39, 40, 42, 48, 49, 58, 60, 64, 65, 66, 68, 75, 80, 81, 83, 85, 86, 88, 91, 94, 104, 108, 112, 114, 116, 117, 121, 124, 126, 127, 129, 132, 134, 135, 136, 137, 161, 170, 174, 177, 178, 181, 182, 184, 186, 187, 188, 190, 193, 194, 195, 198, 200, 202, 203, 204, 207, 209, 217, 219, 223, 224, 225, 229, 234, 240, 252, 255, 256, 275, 278, 285], "long": [0, 6, 7, 8, 28, 40, 50, 57, 58, 59, 61, 71, 83, 85, 86, 88, 94, 98, 101, 102, 124, 187, 203, 204, 207, 216, 217, 225, 227, 239, 248, 255, 276, 279], "copi": [0, 1, 5, 10, 12, 18, 41, 50, 51, 58, 74, 94, 98, 99, 196, 198, 200, 202, 206, 207, 214, 225, 238, 245, 248, 283], "statement": [0, 6, 18, 19, 20, 30, 39, 40, 58, 66, 83, 88, 91, 122, 151, 207, 227, 236, 240, 245], "redistribut": [0, 203], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 29, 33, 34, 35, 36, 38, 39, 40, 44, 46, 49, 50, 51, 54, 57, 59, 60, 63, 64, 65, 66, 70, 74, 75, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 94, 95, 98, 99, 100, 106, 112, 116, 117, 128, 130, 134, 136, 137, 141, 144, 147, 148, 157, 161, 162, 166, 167, 168, 169, 171, 172, 175, 177, 182, 187, 190, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 209, 210, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 232, 233, 236, 238, 239, 240, 241, 242, 243, 246, 247, 252, 254, 262, 273, 274, 276, 278, 279, 280, 282, 283, 284, 285], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 40, 94, 122, 139, 161, 207, 214, 217, 219, 236, 238, 239, 240, 246, 249], "That": [0, 4, 7, 11, 12, 18, 19, 20, 58, 59, 64, 88, 94, 132, 169, 174, 180, 190, 191, 194, 195, 197, 198, 200, 202, 213, 214, 223, 227, 239, 240, 246, 273, 276, 279, 284], "said": [0, 4, 11, 32, 36, 40, 44, 98, 177, 188, 190, 191, 195, 223, 226, 227, 252, 259], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 24, 50, 58, 59, 64, 70, 82, 83, 86, 88, 89, 91, 94, 98, 101, 112, 124, 139, 194, 197, 198, 200, 202, 203, 215, 216, 219, 220, 225, 239, 245, 246, 276, 279, 284], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 28, 30, 40, 49, 58, 59, 61, 62, 66, 68, 69, 71, 72, 75, 77, 88, 94, 97, 98, 99, 100, 101, 106, 112, 113, 116, 117, 119, 121, 122, 124, 126, 133, 137, 146, 169, 181, 182, 184, 192, 193, 194, 197, 198, 200, 202, 204, 207, 210, 216, 217, 220, 223, 225, 226, 227, 231, 238, 239, 240, 241, 243, 245, 246, 255, 256, 257, 280, 282], "conveni": [0, 1, 10, 11, 12, 23, 25, 28, 31, 38, 40, 50, 58, 59, 63, 66, 85, 88, 100, 122, 139, 181, 184, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 214, 215, 219, 225, 231, 232, 239, 241, 242, 246, 259, 274, 276], "pleas": [0, 4, 6, 7, 9, 10, 23, 24, 25, 26, 27, 30, 36, 38, 58, 66, 70, 83, 98, 112, 117, 122, 132, 136, 137, 144, 145, 166, 181, 191, 192, 193, 194, 200, 201, 215, 219, 220, 225, 226, 246, 252, 257, 281, 285], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 25, 26, 27, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 49, 50, 51, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 82, 85, 86, 88, 89, 90, 94, 98, 99, 100, 104, 106, 108, 109, 112, 116, 122, 124, 130, 132, 133, 134, 135, 136, 137, 140, 145, 146, 151, 156, 157, 161, 164, 166, 174, 175, 176, 181, 187, 190, 191, 193, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 231, 232, 236, 238, 239, 240, 241, 243, 245, 246, 248, 249, 251, 256, 274, 276, 278, 279, 284, 285], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 23, 24, 27, 28, 30, 34, 58, 59, 85, 86, 94, 99, 100, 108, 112, 116, 134, 136, 191, 193, 207, 214, 219, 223, 226, 227, 245, 246, 274, 278, 280, 281, 283, 284], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 26, 30, 33, 35, 38, 39, 40, 49, 50, 51, 58, 59, 62, 66, 83, 85, 87, 88, 89, 91, 94, 95, 98, 100, 112, 116, 122, 124, 133, 137, 139, 152, 156, 161, 165, 166, 167, 168, 171, 174, 184, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 207, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 233, 238, 239, 240, 242, 245, 246, 247, 248, 256, 257, 276, 277, 278, 279, 280, 283, 284], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 47, 49, 50, 57, 59, 60, 62, 63, 64, 65, 66, 70, 74, 76, 78, 80, 81, 83, 85, 87, 88, 89, 92, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 108, 112, 113, 114, 116, 117, 121, 122, 124, 125, 126, 127, 130, 133, 134, 135, 136, 137, 139, 140, 141, 145, 155, 156, 158, 162, 166, 171, 172, 175, 177, 181, 182, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 246, 248, 252, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 25, 28, 36, 39, 40, 47, 50, 53, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 74, 82, 83, 85, 86, 87, 88, 89, 91, 94, 98, 108, 112, 113, 119, 123, 134, 140, 162, 169, 172, 177, 183, 187, 188, 190, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 210, 214, 219, 220, 223, 224, 225, 226, 227, 238, 240, 245, 255, 257, 259, 261, 262, 276, 280, 284], "contribut": [0, 3, 4, 5, 6, 7, 30, 74, 98, 117, 127, 130, 197, 200, 202, 223, 262, 281], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 28, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 83, 85, 87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 113, 114, 116, 117, 119, 121, 122, 124, 125, 127, 132, 134, 136, 139, 140, 146, 151, 152, 156, 166, 168, 169, 170, 172, 174, 175, 176, 177, 179, 180, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 233, 234, 236, 238, 239, 240, 241, 243, 245, 246, 248, 252, 254, 256, 258, 259, 260, 261, 263, 273, 274, 276, 278, 279, 280, 283, 284, 285], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 30, 39, 40, 41, 49, 50, 54, 57, 58, 59, 62, 63, 64, 66, 72, 73, 83, 85, 88, 94, 98, 100, 101, 104, 108, 116, 119, 122, 124, 129, 146, 157, 167, 177, 178, 181, 188, 190, 191, 192, 193, 194, 195, 196, 200, 203, 204, 207, 214, 215, 216, 217, 219, 223, 225, 226, 227, 228, 238, 245, 246, 257, 259, 273, 276, 279, 283], "back": [0, 20, 24, 25, 26, 39, 40, 54, 57, 58, 59, 64, 66, 73, 74, 80, 82, 83, 85, 86, 89, 98, 99, 108, 166, 187, 190, 197, 202, 203, 205, 207, 217, 223, 225, 228, 229], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 23, 24, 27, 28, 33, 34, 35, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 71, 76, 81, 82, 83, 85, 86, 87, 88, 89, 94, 95, 97, 98, 108, 111, 112, 113, 114, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 144, 147, 155, 158, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 181, 182, 184, 186, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 214, 215, 217, 219, 220, 222, 223, 224, 225, 227, 231, 233, 238, 239, 240, 242, 243, 245, 246, 252, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 112, 113, 114, 116, 117, 118, 119, 121, 122, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137, 139, 140, 144, 145, 146, 151, 153, 156, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 242, 243, 245, 246, 248, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 280, 282, 283, 284, 285], "incorpor": [0, 3, 16, 195, 219], "u": [0, 12, 16, 18, 19, 20, 25, 32, 38, 39, 40, 49, 54, 57, 58, 59, 61, 72, 75, 80, 83, 85, 91, 94, 98, 113, 116, 117, 118, 121, 122, 124, 126, 129, 132, 133, 134, 136, 137, 139, 140, 144, 145, 156, 161, 167, 177, 186, 188, 190, 192, 193, 194, 195, 196, 200, 202, 203, 206, 207, 214, 217, 219, 220, 223, 224, 225, 226, 227, 232, 246, 259, 276, 278, 279, 280], "benefit": [0, 3, 20, 23, 40, 112, 136, 187], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 22, 38, 39, 40, 48, 49, 54, 56, 57, 58, 59, 63, 64, 66, 68, 70, 74, 83, 86, 88, 89, 91, 94, 98, 100, 101, 102, 104, 121, 124, 126, 129, 134, 135, 136, 137, 177, 182, 187, 188, 191, 192, 196, 200, 207, 210, 213, 215, 216, 220, 223, 224, 225, 226, 227, 228, 238, 240, 241, 243, 245, 248, 259, 274, 278, 280, 284], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 29, 30, 38, 41, 56, 100, 139, 176, 193, 194, 197, 200, 225, 226, 278, 281], "team": [0, 4], "member": [0, 6, 10, 18, 39, 47, 49, 59, 81, 104, 194, 215, 232], "list": [0, 3, 4, 6, 7, 13, 18, 24, 25, 26, 27, 28, 30, 32, 35, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 83, 85, 86, 87, 88, 89, 91, 94, 97, 98, 99, 100, 101, 108, 113, 116, 117, 121, 124, 126, 129, 133, 134, 135, 139, 140, 145, 156, 158, 161, 162, 166, 167, 169, 170, 172, 174, 182, 186, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 273, 277, 278, 280, 283, 284, 285], "github": [0, 1, 3, 4, 5, 7, 10, 23, 24, 25, 26, 27, 30, 38, 58, 74, 85, 94, 176, 215, 226, 280], "found": [0, 1, 3, 4, 6, 7, 18, 19, 25, 38, 41, 49, 50, 52, 54, 56, 58, 59, 60, 68, 69, 74, 83, 85, 94, 98, 108, 114, 116, 117, 118, 136, 139, 176, 190, 194, 195, 197, 202, 203, 204, 207, 209, 210, 213, 214, 217, 220, 223, 224, 225, 226, 227, 231, 245, 246, 248, 249, 283], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 26, 29, 30, 39, 40, 42, 47, 48, 49, 50, 54, 57, 58, 59, 60, 66, 88, 89, 91, 94, 97, 98, 99, 101, 102, 104, 122, 124, 134, 135, 167, 168, 171, 175, 190, 191, 193, 197, 200, 202, 203, 207, 210, 213, 215, 216, 217, 220, 223, 225, 226, 227, 228, 231, 238, 239, 245, 247, 248, 258, 272, 273, 276, 278], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 24, 25, 26, 27, 32, 36, 38, 39, 42, 50, 57, 58, 59, 62, 63, 64, 66, 73, 75, 81, 83, 85, 86, 88, 89, 94, 98, 108, 113, 116, 117, 118, 121, 122, 135, 137, 139, 156, 162, 169, 172, 174, 187, 191, 193, 195, 196, 197, 198, 200, 202, 203, 207, 209, 214, 215, 216, 217, 220, 223, 224, 225, 226, 227, 228, 231, 232, 239, 245, 246, 252, 261, 276, 279, 280], "machin": [1, 3, 5, 6, 208, 219, 223, 273], "imag": [1, 3, 49, 116, 128, 133, 139, 141, 145, 194, 198, 200, 207, 215, 226], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 23, 24, 25, 27, 28, 31, 33, 34, 38, 39, 40, 41, 49, 50, 54, 56, 57, 60, 61, 62, 64, 66, 67, 69, 71, 72, 73, 74, 75, 84, 85, 87, 88, 89, 91, 94, 97, 98, 99, 100, 101, 103, 106, 107, 109, 113, 117, 118, 119, 121, 124, 126, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 159, 162, 164, 167, 169, 172, 181, 191, 192, 193, 194, 195, 196, 197, 198, 200, 203, 207, 208, 209, 214, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 252, 255, 263, 274, 276, 280, 284], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 24, 25, 28, 31, 34, 36, 39, 40, 47, 49, 50, 57, 58, 59, 60, 62, 63, 66, 69, 74, 76, 78, 80, 81, 83, 87, 88, 91, 94, 97, 98, 99, 112, 117, 119, 122, 124, 126, 127, 132, 134, 136, 137, 139, 145, 149, 165, 166, 172, 174, 177, 180, 182, 188, 190, 191, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 214, 215, 216, 217, 219, 220, 223, 225, 226, 228, 229, 238, 240, 242, 245, 255, 273, 274, 276, 278, 279, 284], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 47, 49, 50, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 83, 85, 86, 87, 88, 89, 91, 94, 95, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 134, 135, 136, 137, 139, 140, 145, 149, 153, 156, 162, 166, 167, 168, 169, 170, 172, 180, 181, 182, 183, 184, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 252, 255, 257, 259, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 25, 27, 28, 31, 33, 35, 39, 40, 49, 51, 54, 58, 60, 61, 62, 63, 66, 85, 86, 88, 89, 91, 92, 94, 98, 106, 109, 111, 121, 122, 124, 126, 136, 139, 170, 174, 176, 182, 187, 188, 190, 191, 194, 197, 198, 200, 202, 203, 205, 207, 209, 217, 219, 223, 225, 226, 227, 231, 232, 233, 236, 241, 242, 243, 245, 246, 250, 259, 262, 273, 274, 276, 278, 279, 280, 284, 285], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 33, 35, 38, 39, 40, 41, 47, 48, 49, 50, 51, 54, 57, 58, 59, 62, 63, 64, 66, 70, 72, 74, 81, 82, 83, 85, 88, 89, 91, 94, 98, 99, 101, 102, 104, 116, 117, 122, 124, 132, 133, 134, 135, 136, 137, 139, 141, 145, 164, 167, 169, 172, 175, 177, 182, 188, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 238, 241, 242, 245, 246, 249, 256, 257, 259, 273, 274, 276, 277, 279, 280, 284, 285], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 24, 29, 49, 50, 58, 59, 60, 66, 70, 85, 87, 89, 94, 113, 116, 117, 121, 122, 132, 139, 141, 177, 191, 193, 194, 198, 200, 202, 203, 206, 207, 208, 213, 219, 220, 223, 224, 225, 227, 233, 238, 239, 240, 245, 280, 284], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 29, 40, 207, 225, 239, 240], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 25, 27, 28, 30, 38, 39, 40, 48, 49, 50, 58, 59, 63, 65, 66, 67, 68, 74, 75, 81, 83, 85, 89, 94, 97, 98, 100, 101, 102, 108, 113, 116, 117, 121, 122, 124, 126, 127, 128, 133, 134, 135, 136, 139, 166, 172, 177, 182, 191, 192, 193, 194, 196, 203, 207, 208, 210, 216, 219, 220, 223, 224, 225, 226, 227, 238, 240, 245, 246, 248, 257, 259, 262, 263, 280, 284], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 36, 38, 39, 40, 41, 49, 50, 51, 57, 58, 59, 60, 62, 63, 64, 66, 68, 70, 71, 73, 74, 75, 83, 85, 86, 88, 89, 90, 94, 95, 97, 98, 100, 104, 114, 117, 118, 122, 126, 132, 136, 158, 167, 172, 173, 174, 179, 182, 186, 188, 190, 193, 194, 195, 196, 200, 202, 206, 207, 208, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 259, 261, 273, 274, 276, 279, 280, 284, 285], "choos": [1, 6, 25, 49, 54, 58, 60, 63, 94, 98, 102, 106, 126, 137, 172, 176, 182, 190, 191, 203, 204, 207, 214, 216, 217, 223, 224, 227, 238, 243, 284], "cd": [1, 5, 6, 226, 245], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 23, 33, 35, 38, 40, 49, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 71, 72, 74, 75, 77, 85, 86, 89, 91, 94, 95, 98, 99, 100, 101, 106, 108, 112, 113, 114, 116, 117, 118, 121, 139, 145, 156, 161, 162, 164, 167, 169, 174, 181, 182, 187, 193, 194, 195, 196, 197, 198, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 232, 233, 238, 239, 240, 243, 245, 246, 252, 277, 283, 284], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 30, 39, 40, 50, 58, 59, 63, 66, 69, 74, 75, 80, 82, 83, 87, 94, 98, 108, 113, 116, 121, 122, 125, 127, 130, 132, 139, 140, 175, 177, 182, 187, 190, 191, 194, 195, 197, 200, 203, 204, 208, 215, 216, 217, 219, 220, 223, 225, 226, 227, 228, 233, 238, 239, 246, 257, 258, 276, 278, 279, 284, 285], "skip": [1, 3, 4, 6, 12, 39, 42, 58, 89, 94, 98, 182, 202, 206, 207, 209, 223, 225, 236, 238, 274, 282, 283], "down": [1, 4, 6, 18, 63, 91, 110, 124, 126, 190, 191, 193, 198, 209, 215, 217, 219, 223, 242, 280, 284], "section": [1, 4, 7, 8, 11, 18, 20, 21, 32, 39, 41, 49, 50, 57, 58, 59, 61, 65, 66, 68, 74, 83, 88, 89, 94, 101, 102, 116, 122, 137, 175, 177, 181, 188, 191, 194, 197, 200, 202, 207, 210, 214, 217, 223, 233, 242, 243, 245, 256, 257, 258, 259, 263, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 54, 57, 58, 59, 60, 61, 62, 63, 64, 66, 70, 72, 73, 76, 79, 81, 82, 83, 87, 88, 89, 94, 98, 99, 100, 101, 102, 108, 110, 114, 116, 117, 118, 122, 126, 132, 133, 134, 135, 136, 137, 139, 141, 155, 156, 161, 165, 167, 169, 170, 171, 172, 174, 177, 178, 182, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 231, 232, 233, 234, 238, 239, 240, 242, 243, 245, 246, 249, 250, 252, 254, 257, 259, 261, 262, 273, 274, 276, 279, 280, 284, 285], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 42, 47, 48, 50, 51, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 71, 81, 83, 85, 87, 91, 94, 98, 100, 101, 106, 108, 111, 117, 122, 125, 126, 134, 135, 136, 139, 144, 145, 152, 156, 161, 166, 167, 168, 169, 174, 177, 191, 195, 197, 198, 200, 202, 203, 204, 205, 206, 207, 209, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 233, 234, 239, 245, 246, 247, 249, 252, 256, 273, 276, 278, 279, 280, 283, 284, 285], "python3": [1, 3, 40, 100, 207, 238], "sphinx": [1, 4, 7, 8, 64, 223, 238, 243], "texliv": [1, 3, 207], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 58, 59, 62, 89, 112, 134, 139, 166, 182, 190, 195, 196, 197, 198, 204, 220, 223, 226, 232, 236, 243, 256, 257, 282, 285], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 86, 207, 238, 245], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 279, 283], "pip": [1, 3, 30, 100], "sudo": 1, "virtual": [1, 4, 8, 30, 58, 74, 191, 277], "environ": [1, 3, 8, 9, 10, 11, 58, 86, 187, 207, 227, 238, 248, 276, 278, 283], "venv": 1, "path": [1, 5, 6, 10, 49, 74, 80, 108, 130, 188, 190, 216, 219, 223, 226, 238, 239, 242, 243, 245, 248, 249, 250, 259], "my": [1, 207, 273], "Then": [1, 5, 11, 16, 18, 49, 54, 57, 58, 83, 87, 94, 98, 114, 117, 119, 129, 131, 132, 137, 141, 169, 177, 190, 194, 195, 197, 200, 202, 204, 207, 214, 217, 219, 220, 223, 225, 246], "activ": [1, 4, 5, 13, 124, 193, 236, 241, 243], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 38, 39, 40, 43, 49, 50, 54, 56, 57, 58, 59, 60, 64, 66, 69, 73, 74, 81, 82, 83, 85, 86, 88, 89, 94, 98, 99, 100, 101, 102, 104, 108, 112, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 152, 156, 164, 170, 175, 181, 182, 187, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 214, 215, 217, 219, 220, 222, 223, 225, 226, 227, 231, 232, 233, 234, 236, 239, 240, 241, 242, 243, 245, 248, 252, 256, 258, 259, 262, 273, 274, 276, 279, 280, 282, 284], "rerun": [1, 203, 238], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 23, 24, 25, 29, 35, 36, 38, 39, 40, 41, 42, 49, 50, 54, 58, 59, 60, 61, 62, 63, 64, 66, 68, 73, 74, 75, 80, 81, 83, 85, 87, 88, 89, 91, 94, 98, 101, 104, 106, 108, 114, 116, 117, 122, 124, 126, 129, 131, 133, 134, 137, 156, 169, 172, 181, 182, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 205, 207, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 236, 238, 240, 242, 245, 246, 248, 252, 254, 255, 257, 259, 261, 274, 277, 279, 284, 285], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 28, 31, 35, 36, 40, 49, 50, 54, 58, 59, 63, 66, 81, 83, 88, 89, 94, 95, 97, 98, 99, 100, 105, 106, 108, 112, 117, 118, 121, 122, 124, 126, 129, 130, 132, 134, 135, 136, 137, 139, 140, 146, 156, 161, 169, 170, 174, 175, 177, 178, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 200, 201, 202, 203, 204, 206, 207, 214, 215, 216, 217, 219, 223, 225, 227, 236, 238, 239, 244, 245, 246, 259, 261, 271, 274, 278, 279, 280], "new": [1, 3, 4, 5, 7, 11, 18, 20, 24, 29, 34, 35, 39, 40, 41, 49, 50, 57, 58, 59, 60, 66, 71, 74, 83, 85, 86, 89, 94, 98, 101, 104, 108, 113, 116, 122, 129, 131, 137, 138, 139, 141, 162, 168, 169, 172, 174, 177, 178, 180, 182, 186, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 207, 214, 217, 219, 220, 223, 225, 226, 227, 228, 238, 239, 243, 246, 252, 254, 256, 272, 273, 276, 279, 280, 282], "termin": [1, 49, 58, 64, 86, 98, 187, 207, 214, 238, 283], "after": [1, 4, 5, 6, 7, 10, 12, 30, 32, 34, 35, 39, 41, 46, 49, 50, 54, 56, 57, 58, 59, 60, 64, 73, 75, 80, 85, 89, 94, 98, 100, 101, 108, 133, 134, 136, 139, 141, 145, 157, 169, 177, 181, 188, 191, 196, 200, 202, 203, 204, 205, 207, 208, 213, 220, 223, 224, 225, 226, 228, 238, 241, 246, 248, 252, 255, 259, 273, 274, 276, 280, 284], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 27, 32, 38, 39, 40, 41, 43, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 83, 85, 87, 88, 89, 91, 94, 98, 99, 101, 102, 104, 105, 108, 109, 112, 113, 116, 117, 125, 130, 132, 133, 134, 136, 137, 144, 145, 146, 151, 152, 156, 158, 161, 162, 167, 168, 169, 170, 171, 172, 174, 177, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 232, 242, 245, 246, 252, 255, 257, 258, 259, 261, 273, 274, 277, 279, 280, 284], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 42, 49, 50, 51, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 74, 77, 80, 82, 83, 85, 87, 89, 90, 91, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 112, 115, 116, 121, 122, 125, 127, 128, 132, 133, 138, 139, 146, 149, 151, 153, 161, 162, 167, 169, 172, 174, 179, 180, 181, 182, 184, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 219, 220, 223, 225, 227, 228, 230, 232, 233, 234, 238, 240, 242, 245, 246, 252, 256, 259, 262, 263, 267, 269, 273, 274, 275, 276, 279, 284], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 23, 32, 34, 35, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 85, 87, 88, 89, 91, 94, 97, 98, 100, 101, 104, 106, 109, 113, 114, 116, 117, 119, 121, 122, 126, 137, 145, 162, 167, 169, 177, 178, 180, 182, 183, 184, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 232, 233, 236, 238, 240, 242, 245, 246, 248, 249, 250, 252, 255, 257, 259, 261, 273, 279, 282, 284, 285], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 23, 26, 28, 38, 39, 40, 41, 42, 48, 49, 50, 54, 57, 58, 62, 63, 66, 68, 71, 74, 75, 83, 85, 88, 89, 94, 98, 99, 100, 102, 108, 112, 116, 117, 119, 121, 122, 124, 125, 126, 127, 132, 133, 135, 136, 137, 140, 167, 169, 172, 182, 188, 190, 191, 193, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 214, 217, 219, 220, 223, 225, 226, 227, 231, 232, 239, 240, 246, 256, 257, 258, 259, 262, 276, 278, 279, 280, 284], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 41, 49, 50, 52, 58, 59, 83, 94, 99, 100, 117, 124, 139, 172, 187, 193, 194, 207, 217, 219, 223, 224, 225, 235, 239, 241, 242, 245, 246, 271, 276, 283], "txt": [1, 207], "mpmath": [1, 3, 5, 11, 20, 26, 40, 63, 66, 94, 99, 139, 197, 198, 207, 215, 225, 241, 246], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 23, 24, 25, 26, 28, 31, 38, 40, 47, 50, 57, 58, 59, 64, 68, 73, 83, 85, 94, 97, 98, 100, 122, 191, 192, 195, 197, 198, 200, 204, 207, 209, 215, 223, 224, 225, 226, 227, 238, 239, 240, 243, 245, 248, 252, 273], "packag": [1, 3, 22, 26, 30, 86, 99, 100, 105, 132, 139, 187, 207, 238, 249, 258, 259, 278], "matplotlib": [1, 3, 6, 7, 10, 30, 81, 86, 106, 139, 152, 187, 193, 283], "mayb": [1, 19, 23], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 23, 24, 25, 27, 28, 32, 36, 39, 40, 41, 49, 50, 51, 54, 55, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 83, 85, 88, 89, 91, 94, 98, 99, 100, 101, 102, 108, 112, 113, 116, 117, 122, 123, 126, 127, 132, 133, 136, 137, 139, 141, 144, 145, 146, 156, 167, 169, 170, 171, 172, 175, 177, 178, 179, 181, 182, 184, 186, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 208, 209, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 233, 234, 236, 239, 240, 241, 242, 245, 246, 252, 255, 256, 259, 261, 263, 270, 273, 274, 276, 278, 279, 280, 284], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 30, 34, 35, 38, 40, 41, 47, 48, 49, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 69, 71, 74, 81, 85, 86, 87, 88, 90, 91, 98, 99, 105, 113, 116, 122, 124, 139, 140, 141, 150, 152, 156, 157, 161, 167, 168, 170, 172, 174, 177, 178, 180, 182, 184, 187, 188, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 207, 209, 214, 215, 216, 217, 219, 220, 223, 225, 227, 231, 232, 233, 238, 239, 240, 241, 242, 243, 245, 246, 247, 252, 255, 256, 259, 279, 284], "distribut": [1, 3, 30, 49, 56, 58, 66, 74, 85, 101, 102, 171, 195, 198, 203, 207, 233], "prerequisit": 1, "dnf": [1, 88], "scheme": [1, 4, 18, 50, 57, 62, 192, 193, 200, 203, 232], "medium": [1, 20, 141, 142, 145, 146, 156, 200, 269], "tool": [1, 7, 11, 20, 49, 86, 93, 94, 99, 108, 139, 191, 194, 199, 200, 207, 239, 245, 251, 260, 267], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 25, 27, 30, 39, 40, 41, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 71, 72, 74, 75, 82, 83, 85, 87, 88, 89, 94, 97, 98, 101, 102, 108, 109, 114, 116, 117, 121, 122, 124, 125, 126, 127, 132, 133, 136, 137, 140, 144, 145, 149, 153, 156, 161, 162, 165, 166, 167, 168, 169, 171, 172, 175, 177, 182, 186, 190, 191, 193, 194, 196, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 213, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 240, 241, 245, 246, 248, 257, 262, 273, 274, 276, 278, 279, 280, 282, 284, 285], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 30, 100], "Or": [1, 7, 10, 12, 19, 23, 25, 49, 58, 59, 60, 66, 83, 88, 98, 119, 194, 204, 206, 207, 219, 226, 227, 238, 246, 259, 279, 282], "forg": [1, 3, 100], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 26, 27, 31, 34, 35, 36, 38, 40, 41, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 66, 70, 74, 85, 86, 88, 94, 97, 98, 99, 100, 101, 102, 104, 117, 121, 122, 124, 125, 129, 130, 134, 136, 137, 139, 152, 169, 174, 187, 190, 193, 196, 197, 198, 200, 202, 203, 204, 206, 207, 210, 215, 216, 217, 219, 223, 224, 225, 226, 231, 233, 236, 238, 239, 240, 241, 243, 245, 246, 256, 261, 262, 276, 277, 278, 279, 280, 284], "success": [1, 7, 39, 49, 58, 66, 83, 85, 98, 116, 124, 182, 194, 200, 202, 215, 216, 223, 226, 227, 245, 252, 254], "tricki": [1, 58, 83], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 25, 26, 27, 28, 30, 31, 36, 40, 50, 57, 58, 59, 64, 70, 74, 75, 83, 85, 88, 92, 94, 98, 100, 116, 122, 126, 152, 160, 172, 174, 177, 190, 193, 194, 196, 197, 198, 200, 202, 203, 204, 206, 207, 210, 214, 217, 219, 220, 223, 224, 225, 226, 236, 238, 239, 241, 245, 246, 248, 256, 274, 276, 278, 279, 280, 283, 284, 285], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 31, 36, 39, 40, 41, 46, 49, 50, 56, 57, 58, 59, 62, 63, 64, 66, 68, 69, 70, 74, 83, 85, 87, 88, 89, 91, 94, 98, 99, 100, 106, 109, 112, 113, 116, 119, 121, 122, 123, 124, 125, 126, 127, 133, 134, 136, 137, 140, 152, 157, 161, 169, 172, 177, 178, 181, 183, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 209, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 227, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 254, 255, 257, 259, 263, 273, 274, 276, 278, 279, 280, 282, 283, 284], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 26, 28, 29, 30, 39, 40, 49, 50, 57, 58, 63, 66, 85, 94, 99, 100, 122, 136, 139, 197, 198, 200, 203, 207, 208, 213, 215, 217, 219, 220, 225, 226, 227, 228, 232, 233, 238, 245, 246, 251, 252, 276, 283], "subsystem": [1, 207], "linux": [1, 30], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 24, 27, 30, 38, 40, 41, 42, 47, 49, 50, 52, 53, 54, 58, 59, 63, 64, 66, 68, 70, 72, 73, 75, 80, 82, 83, 85, 87, 88, 89, 91, 94, 98, 109, 110, 112, 124, 135, 137, 166, 168, 172, 174, 177, 186, 188, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 233, 238, 240, 241, 242, 243, 245, 246, 256, 257, 259, 275, 276, 279, 284], "workaround": [1, 246], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 22, 23, 40, 54, 58, 59, 64, 66, 68, 76, 80, 81, 82, 85, 94, 98, 101, 105, 112, 117, 122, 126, 132, 136, 141, 177, 181, 194, 200, 201, 202, 203, 204, 205, 206, 215, 220, 222, 223, 224, 225, 285], "shell": [1, 12, 86, 139, 206], "tutori": [1, 7, 11, 12, 16, 17, 30, 74, 122, 139, 195, 206, 207, 223, 246, 276, 279, 281, 282, 283, 284, 285], "com": [1, 3, 4, 5, 6, 7, 10, 20, 30, 32, 36, 38, 49, 51, 52, 58, 59, 61, 62, 63, 64, 66, 68, 74, 75, 83, 85, 89, 94, 98, 106, 192, 201, 210, 212, 215, 216, 219, 220, 223, 226, 227, 245, 248, 280], "microsoftdoc": 1, "wsl": 1, "blob": [1, 85], "win10": 1, "md": [1, 4, 7, 236, 243], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 28, 30, 36, 38, 39, 40, 41, 42, 47, 48, 49, 50, 57, 58, 59, 60, 62, 63, 64, 66, 71, 73, 74, 75, 76, 83, 85, 86, 87, 88, 89, 91, 94, 95, 98, 100, 102, 104, 108, 112, 116, 117, 122, 125, 126, 127, 132, 133, 134, 135, 136, 137, 139, 140, 158, 160, 161, 162, 167, 171, 172, 175, 177, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 233, 236, 238, 240, 242, 243, 245, 246, 249, 252, 256, 257, 259, 261, 273, 276, 277, 278, 279, 280, 283, 284, 285], "command": [1, 3, 5, 6, 11, 12, 24, 30, 40, 62, 86, 122, 134, 139, 187, 193, 207, 238, 239, 283], "prompt": [1, 6, 11], "transfer": [1, 105, 106, 108, 141, 226], "html": [1, 3, 4, 6, 7, 36, 40, 42, 50, 51, 52, 58, 59, 61, 63, 64, 66, 68, 74, 75, 85, 86, 94, 98, 106, 201, 207, 210, 212, 215, 216, 220, 223, 227, 239, 241, 243, 245, 246, 280], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 23, 24, 26, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 54, 56, 57, 59, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 83, 85, 86, 88, 89, 91, 94, 98, 100, 108, 109, 113, 114, 116, 117, 118, 121, 122, 124, 126, 129, 137, 139, 145, 148, 156, 166, 167, 169, 171, 172, 173, 175, 181, 182, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 219, 220, 222, 223, 224, 225, 226, 227, 232, 233, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 257, 259, 261, 273, 274, 275, 277, 278, 279, 280, 284], "via": [1, 3, 11, 16, 20, 28, 30, 33, 34, 35, 49, 50, 58, 63, 66, 83, 85, 88, 94, 98, 99, 100, 101, 182, 192, 194, 198, 200, 202, 203, 206, 207, 226, 236, 239, 240, 252, 261, 279], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 26, 28, 30, 36, 38, 40, 41, 42, 50, 58, 59, 65, 70, 72, 74, 77, 83, 85, 89, 91, 94, 95, 98, 99, 106, 108, 111, 118, 122, 139, 155, 165, 166, 169, 172, 175, 177, 184, 186, 190, 191, 193, 195, 196, 197, 200, 202, 203, 204, 206, 207, 208, 214, 215, 217, 219, 220, 223, 224, 225, 226, 227, 233, 236, 238, 240, 242, 245, 246, 257, 259, 262, 273, 274, 276, 278, 279, 280, 281, 283, 284], "directori": [1, 3, 6, 7, 30, 35, 40, 223, 238, 239, 248], "folder": 1, "prepend": [1, 39, 49, 94, 108, 179, 207, 233], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 39, 40, 50, 58, 62, 66, 85, 88, 108, 122, 152, 176, 180, 193, 196, 197, 198, 210, 214, 215, 216, 217, 223, 224, 225, 226, 227, 239, 245, 246, 278, 284], "compat": [1, 3, 4, 15, 40, 58, 66, 86, 89, 94, 99, 112, 174, 179, 187, 193, 196, 198, 202, 203, 207, 227, 231, 234, 238, 240, 246], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 31, 36, 40, 41, 43, 49, 50, 51, 57, 58, 59, 62, 63, 64, 66, 67, 72, 73, 74, 76, 80, 83, 85, 87, 88, 89, 91, 94, 95, 97, 98, 99, 100, 104, 106, 108, 112, 117, 121, 122, 126, 129, 146, 152, 166, 169, 170, 172, 181, 191, 192, 195, 196, 197, 198, 200, 203, 204, 205, 207, 210, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 234, 239, 240, 242, 245, 246, 248, 249, 273, 274, 276, 277, 278, 279, 280, 282, 284], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 35, 36, 38, 39, 40, 41, 44, 48, 49, 50, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 80, 83, 85, 88, 89, 91, 92, 94, 95, 97, 98, 99, 100, 106, 108, 112, 116, 117, 118, 122, 124, 126, 128, 130, 132, 134, 135, 136, 137, 139, 141, 144, 156, 160, 161, 166, 169, 170, 171, 172, 177, 181, 182, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 216, 217, 219, 220, 223, 224, 225, 226, 227, 238, 240, 241, 242, 245, 246, 248, 252, 256, 260, 267, 273, 274, 276, 277, 279, 280, 282, 283, 284, 285], "partial": [1, 11, 38, 49, 56, 57, 58, 60, 62, 63, 64, 98, 100, 139, 166, 182, 186, 188, 198, 201, 204, 207, 209, 216, 219, 223, 224, 228, 234, 252, 259, 274, 284], "workflow": [1, 3, 5, 8, 9, 26, 29, 139, 197, 240, 246, 281], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 71, 72, 74, 75, 76, 81, 83, 85, 86, 87, 88, 89, 94, 95, 98, 99, 100, 104, 106, 108, 114, 116, 122, 124, 125, 126, 128, 129, 131, 133, 134, 136, 137, 140, 145, 147, 166, 167, 171, 172, 174, 176, 177, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 252, 255, 257, 259, 261, 262, 273, 274, 276, 277, 279, 280, 284, 285], "viabl": [1, 59], "64": [1, 43, 49, 98, 138, 192, 206, 216, 225, 227, 238, 245, 248, 283], "bit": [1, 16, 20, 39, 40, 42, 58, 59, 61, 88, 89, 94, 98, 166, 177, 194, 203, 217, 220, 226, 238, 245, 256, 257, 283], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 24, 26, 32, 36, 40, 42, 50, 54, 58, 59, 62, 63, 64, 72, 73, 75, 78, 79, 82, 86, 88, 89, 94, 97, 98, 100, 108, 166, 169, 175, 176, 177, 179, 186, 193, 194, 196, 198, 200, 202, 203, 204, 205, 207, 208, 209, 215, 216, 217, 219, 220, 223, 224, 226, 227, 228, 229, 232, 238, 239, 245, 246, 248, 250, 255, 270, 275, 276, 279, 284], "chose": [1, 59], "rm": [1, 40], "absolut": [1, 10, 36, 37, 40, 57, 58, 64, 66, 73, 83, 85, 89, 94, 110, 170, 198, 202, 203, 217, 219, 222, 227, 238, 261, 262, 263], "Be": [1, 4, 6, 20, 38, 58, 88, 94, 200, 223, 226, 234, 246], "sure": [1, 4, 6, 7, 20, 40, 49, 58, 70, 121, 122, 152, 177, 203, 204, 214, 223, 225, 226, 239, 245, 276, 279, 284], "substitut": [1, 10, 11, 12, 16, 19, 24, 28, 40, 58, 59, 64, 66, 83, 85, 94, 99, 100, 108, 117, 118, 122, 124, 126, 136, 161, 170, 172, 175, 182, 184, 186, 204, 205, 208, 209, 214, 217, 219, 220, 223, 224, 225, 226, 246, 255, 275, 276], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 39, 40, 41, 47, 49, 56, 58, 59, 66, 70, 83, 85, 87, 91, 94, 98, 108, 112, 122, 124, 134, 135, 136, 187, 194, 197, 202, 207, 215, 217, 219, 220, 223, 226, 234, 238, 239, 242, 243, 245, 246, 278], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 23, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 252, 254, 255, 256, 257, 258, 259, 261, 262, 270, 273, 274, 276, 278, 279, 280, 283, 284, 285], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25, 30, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 69, 70, 73, 74, 75, 83, 85, 86, 88, 89, 92, 94, 95, 98, 100, 101, 102, 104, 108, 110, 113, 116, 117, 118, 119, 121, 122, 132, 135, 136, 137, 140, 141, 145, 158, 161, 166, 167, 170, 172, 174, 177, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 208, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 227, 229, 232, 233, 238, 239, 241, 242, 243, 245, 246, 252, 256, 257, 258, 259, 261, 262, 273, 274, 276, 279, 280, 283, 284, 285], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 36, 38, 39, 40, 41, 42, 47, 48, 49, 50, 52, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 70, 71, 73, 74, 75, 81, 83, 85, 87, 88, 89, 91, 94, 95, 97, 98, 99, 101, 102, 104, 108, 109, 113, 116, 117, 122, 124, 126, 132, 137, 139, 145, 146, 156, 157, 166, 169, 174, 177, 181, 182, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 212, 214, 215, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 238, 239, 240, 241, 242, 243, 245, 248, 252, 254, 256, 257, 259, 261, 262, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "collect": [1, 3, 7, 17, 39, 40, 49, 58, 75, 85, 98, 101, 108, 121, 130, 139, 172, 179, 192, 198, 203, 216, 217, 219, 223, 227, 238, 245], "offici": [1, 12, 30, 58, 112, 139, 181, 191, 226, 246, 282], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 73, 74, 77, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 94, 97, 98, 100, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 122, 124, 125, 127, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 145, 146, 158, 161, 167, 168, 169, 170, 172, 176, 177, 178, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 231, 233, 238, 239, 240, 241, 242, 243, 245, 246, 248, 252, 254, 257, 261, 262, 273, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 34, 36, 37, 38, 39, 41, 42, 43, 46, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 72, 74, 76, 81, 83, 85, 86, 87, 88, 91, 94, 98, 99, 100, 108, 112, 113, 116, 117, 118, 121, 122, 124, 125, 126, 127, 129, 131, 132, 133, 135, 136, 137, 139, 140, 144, 155, 156, 157, 158, 161, 166, 167, 170, 171, 172, 177, 179, 181, 182, 183, 186, 187, 188, 190, 192, 193, 194, 195, 196, 198, 200, 203, 204, 205, 206, 207, 208, 209, 213, 216, 217, 219, 220, 222, 223, 224, 225, 227, 232, 233, 239, 240, 242, 243, 244, 245, 246, 252, 256, 257, 259, 260, 261, 267, 274, 276, 277, 278, 279, 280, 284, 285], "svg": [1, 86, 187], "store": [1, 5, 10, 12, 18, 39, 40, 48, 49, 58, 80, 82, 91, 94, 98, 100, 113, 117, 119, 121, 122, 137, 166, 172, 186, 190, 191, 193, 194, 197, 202, 203, 204, 214, 217, 228, 231, 232, 240, 241, 242, 245, 257, 259, 279], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 32, 33, 34, 35, 36, 38, 39, 40, 47, 48, 49, 50, 54, 57, 58, 59, 60, 63, 65, 66, 68, 71, 72, 73, 74, 75, 80, 81, 83, 85, 87, 88, 89, 91, 94, 98, 100, 101, 102, 108, 109, 112, 113, 116, 120, 122, 126, 129, 130, 133, 136, 137, 156, 158, 166, 169, 170, 172, 174, 175, 177, 179, 180, 181, 182, 184, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 232, 233, 234, 236, 238, 240, 241, 242, 243, 245, 246, 248, 252, 254, 256, 257, 261, 274, 276, 279, 280, 283, 284], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 28, 29, 35, 36, 39, 40, 41, 44, 49, 50, 56, 58, 59, 63, 66, 70, 83, 85, 87, 91, 94, 99, 102, 113, 114, 116, 117, 121, 122, 124, 132, 133, 134, 136, 137, 139, 140, 167, 172, 177, 181, 182, 187, 191, 193, 197, 202, 203, 207, 208, 214, 217, 219, 220, 225, 226, 227, 231, 232, 233, 238, 239, 240, 241, 242, 252, 257, 259, 284], "onc": [1, 4, 11, 12, 18, 19, 20, 40, 42, 49, 54, 58, 59, 63, 66, 74, 83, 85, 99, 102, 114, 116, 132, 136, 177, 182, 184, 191, 193, 195, 197, 203, 207, 208, 216, 217, 219, 223, 226, 233, 245, 256, 273, 274, 284, 285], "under": [1, 3, 4, 6, 11, 12, 18, 19, 34, 35, 37, 38, 40, 41, 48, 49, 54, 56, 66, 76, 83, 85, 87, 88, 94, 98, 100, 101, 102, 141, 167, 192, 194, 195, 202, 203, 207, 214, 215, 217, 220, 223, 225, 226, 227, 233, 236, 278, 284], "prefer": [1, 3, 6, 10, 11, 18, 20, 26, 40, 50, 57, 58, 66, 98, 100, 116, 122, 172, 177, 182, 193, 196, 198, 200, 202, 207, 215, 219, 223, 225, 232, 238, 240, 243, 246, 278, 280], "web": [1, 7, 59, 70, 139, 189, 201, 220], "browser": 1, "drop": [1, 64, 85, 99, 129, 198, 200], "menu": 1, "index": [1, 3, 10, 12, 20, 27, 28, 32, 40, 47, 49, 50, 54, 57, 58, 59, 60, 63, 64, 66, 69, 74, 83, 85, 88, 89, 91, 94, 97, 98, 108, 121, 122, 139, 140, 141, 143, 145, 146, 156, 165, 167, 169, 172, 177, 182, 193, 194, 198, 202, 203, 204, 207, 212, 213, 217, 225, 227, 228, 230, 231, 233, 234, 239, 267], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 39, 40, 49, 50, 57, 58, 64, 65, 66, 70, 81, 85, 88, 89, 91, 94, 98, 100, 101, 112, 116, 117, 122, 123, 129, 134, 135, 137, 139, 143, 144, 160, 164, 167, 168, 169, 174, 175, 182, 190, 193, 194, 197, 198, 200, 202, 206, 207, 210, 214, 215, 217, 219, 220, 223, 224, 225, 227, 233, 238, 239, 240, 241, 243, 245, 246, 257, 274, 276, 278, 279, 280, 281, 283, 284], "load": [1, 40, 58, 86, 101, 102, 104, 113, 116, 117, 121, 125, 127, 140, 152, 187], "ll": [1, 39, 56, 94, 126, 190, 191, 236], "manual": [1, 3, 4, 7, 10, 11, 20, 24, 40, 41, 49, 62, 68, 85, 86, 100, 108, 121, 122, 125, 136, 140, 193, 200, 207, 223, 225, 226, 241, 274, 284], "repeat": [1, 11, 12, 49, 52, 57, 58, 64, 66, 85, 87, 89, 94, 98, 100, 156, 158, 172, 193, 194, 195, 200, 202, 203, 207, 213, 223, 227, 231, 232, 239, 241, 245, 284], "step": [1, 4, 5, 20, 21, 29, 38, 40, 49, 53, 54, 57, 58, 59, 66, 82, 83, 85, 94, 98, 99, 117, 129, 132, 134, 139, 140, 174, 186, 191, 192, 193, 197, 198, 200, 203, 207, 208, 209, 212, 215, 216, 217, 219, 220, 223, 225, 227, 232, 239, 245, 246, 274], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 24, 25, 27, 40, 41, 49, 50, 51, 52, 55, 57, 58, 59, 62, 63, 66, 82, 83, 85, 86, 87, 88, 91, 94, 98, 101, 102, 104, 108, 112, 121, 132, 134, 136, 145, 162, 167, 181, 182, 187, 190, 191, 193, 197, 198, 199, 200, 202, 203, 204, 207, 208, 209, 215, 216, 217, 219, 220, 223, 225, 226, 227, 232, 241, 242, 245, 246, 248, 257, 273, 274, 276, 278, 279, 283, 284], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 25, 30, 40, 46, 49, 50, 57, 58, 62, 63, 64, 65, 66, 89, 91, 95, 99, 122, 134, 136, 182, 190, 192, 193, 195, 196, 197, 202, 203, 207, 212, 214, 216, 225, 226, 228, 245, 276, 278, 280], "approach": [1, 16, 24, 25, 27, 28, 39, 57, 58, 85, 108, 126, 132, 197, 200, 201, 204, 215, 224, 225, 227, 239, 242, 245, 274, 280], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 23, 24, 28, 31, 34, 38, 39, 40, 41, 46, 47, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 71, 73, 75, 76, 77, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 108, 112, 116, 117, 121, 122, 124, 125, 126, 131, 133, 134, 135, 136, 139, 140, 156, 162, 167, 172, 174, 177, 179, 180, 181, 182, 184, 186, 187, 188, 190, 193, 194, 195, 196, 197, 200, 202, 203, 206, 207, 208, 209, 214, 216, 217, 219, 220, 222, 223, 224, 225, 227, 231, 232, 233, 236, 238, 239, 240, 241, 245, 246, 252, 255, 257, 263, 266, 273, 275, 284], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 30, 35, 38, 40, 49, 50, 52, 58, 59, 60, 62, 63, 64, 66, 67, 74, 75, 79, 83, 85, 86, 88, 89, 94, 98, 99, 101, 110, 112, 119, 121, 124, 125, 129, 131, 136, 137, 139, 140, 152, 167, 169, 186, 192, 193, 194, 197, 198, 202, 204, 207, 208, 209, 214, 216, 217, 219, 220, 223, 224, 225, 226, 239, 240, 241, 242, 243, 246, 275, 276, 279, 280, 282], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 24, 25, 28, 39, 40, 41, 50, 58, 60, 61, 62, 63, 64, 66, 71, 73, 77, 83, 86, 88, 98, 100, 101, 117, 122, 124, 130, 158, 160, 161, 170, 172, 186, 190, 193, 194, 197, 198, 202, 203, 204, 207, 210, 213, 214, 216, 217, 219, 220, 223, 225, 226, 232, 233, 238, 239, 240, 243, 257, 262, 274, 276, 278, 279, 283, 284, 285], "detect": [1, 3, 31, 38, 91, 94, 98, 193, 197, 207, 223, 224, 226, 228, 245, 283], "procedur": [1, 24, 41, 43, 49, 55, 56, 57, 85, 94, 117, 137, 200, 202, 219, 220, 225, 226, 252, 280], "again": [1, 4, 12, 16, 19, 50, 58, 73, 98, 122, 124, 137, 167, 168, 182, 190, 194, 195, 202, 210, 217, 223, 236, 256, 276, 284], "whether": [1, 4, 10, 11, 18, 19, 20, 27, 28, 38, 39, 40, 44, 49, 57, 58, 59, 65, 66, 70, 73, 85, 86, 88, 89, 94, 98, 104, 112, 117, 118, 121, 122, 160, 179, 184, 191, 193, 196, 197, 198, 202, 203, 207, 210, 214, 215, 219, 220, 223, 225, 226, 227, 228, 238, 240, 245, 246, 252, 255, 276, 280], "8000": [1, 101], "80": [1, 4, 6, 12, 20, 38, 49, 58, 61, 85, 94, 98, 101, 102, 106, 203, 206, 223, 227, 243, 245], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 31, 39, 40, 41, 47, 48, 49, 50, 54, 57, 58, 59, 60, 62, 63, 64, 66, 69, 71, 73, 74, 78, 80, 82, 83, 85, 86, 87, 88, 91, 94, 98, 99, 100, 101, 106, 112, 113, 119, 122, 124, 128, 136, 137, 140, 144, 145, 157, 158, 166, 167, 170, 172, 174, 177, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 231, 233, 236, 238, 239, 240, 241, 242, 243, 245, 246, 252, 255, 259, 261, 275, 276, 278, 279, 280, 283, 284], "port": [1, 100, 124, 144], "finish": [1, 40, 41, 166, 241, 281], "stop": [1, 4, 40, 41, 50, 58, 94, 98, 193, 213, 215, 223, 227], "ctrl": 1, "detach": 1, "mode": [1, 2, 58, 86, 100, 144, 167, 187, 203, 207, 238, 249], "d": [1, 6, 7, 10, 11, 12, 16, 20, 24, 32, 39, 42, 47, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 63, 66, 68, 72, 76, 81, 83, 85, 87, 88, 89, 90, 91, 94, 95, 97, 98, 100, 101, 104, 116, 117, 139, 141, 144, 145, 151, 161, 169, 171, 172, 177, 181, 182, 184, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 209, 213, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 233, 245, 248, 252, 254, 255, 256, 257, 261, 269, 280, 285], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 27, 31, 34, 35, 39, 40, 41, 45, 48, 51, 54, 57, 58, 59, 60, 63, 64, 65, 66, 68, 71, 83, 85, 86, 87, 91, 94, 98, 100, 101, 104, 113, 116, 119, 121, 122, 124, 139, 143, 152, 167, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 191, 193, 194, 195, 197, 198, 200, 202, 204, 207, 213, 217, 219, 220, 223, 224, 226, 227, 232, 233, 236, 238, 239, 240, 241, 246, 248, 249, 250, 252, 256, 259, 264, 273, 276, 279, 280, 284], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 23, 24, 36, 41, 57, 58, 60, 64, 68, 89, 91, 94, 98, 100, 101, 104, 109, 113, 122, 124, 136, 162, 167, 177, 188, 191, 197, 203, 204, 215, 216, 217, 223, 226, 243, 245, 246, 259], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 28, 31, 33, 35, 38, 39, 40, 41, 49, 50, 51, 52, 54, 57, 58, 59, 61, 62, 64, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 94, 98, 100, 101, 106, 108, 112, 117, 122, 124, 126, 134, 136, 137, 139, 140, 141, 152, 156, 160, 162, 164, 166, 167, 170, 172, 174, 175, 177, 178, 182, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 206, 207, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 231, 232, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 252, 256, 273, 274, 276, 277, 280], "tab": [1, 10, 12, 54, 139], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 40, 50, 57, 58, 62, 64, 81, 83, 85, 94, 98, 101, 102, 106, 112, 122, 128, 133, 137, 139, 167, 171, 175, 177, 182, 190, 191, 193, 194, 197, 198, 200, 202, 203, 207, 208, 210, 214, 215, 216, 217, 219, 220, 223, 225, 227, 228, 236, 239, 240, 243, 245, 246, 276, 278, 280, 283], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 29, 38, 39, 49, 50, 58, 68, 83, 85, 88, 94, 98, 117, 124, 132, 193, 195, 197, 202, 203, 207, 210, 216, 219, 223, 224, 225, 226, 227, 228, 233, 238, 240, 245, 246, 252, 277, 282], "major": [1, 3, 4, 7, 10, 28, 68, 112, 232, 278, 284], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 49, 87, 164, 167, 177, 203, 219, 226], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 30, 40, 58, 63, 66, 171, 208, 219, 223, 226, 280, 284], "request": [1, 3, 4, 6, 7, 9, 10, 18, 30, 38, 58, 62, 74, 83, 98, 122, 172, 200, 203, 231, 239], "releas": [1, 7, 10, 58, 85, 89, 100, 136, 193, 232, 243, 246, 279], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 24, 25, 27, 30, 35, 36, 38, 39, 40, 50, 54, 57, 58, 59, 60, 62, 63, 64, 66, 70, 76, 83, 85, 88, 89, 91, 93, 94, 98, 99, 100, 110, 112, 121, 122, 124, 126, 127, 132, 134, 136, 139, 152, 156, 161, 166, 169, 170, 180, 188, 191, 195, 198, 199, 200, 202, 203, 206, 207, 208, 213, 214, 215, 217, 219, 222, 223, 224, 225, 227, 230, 233, 236, 238, 240, 241, 242, 243, 245, 252, 254, 256, 261, 263, 274, 278, 279, 280, 284, 285], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 40, 49, 50, 54, 57, 58, 62, 64, 82, 83, 85, 86, 94, 95, 98, 100, 124, 162, 167, 187, 193, 196, 197, 198, 200, 202, 203, 207, 214, 217, 223, 225, 227, 236, 238, 245, 246, 280], "99": [1, 40, 58, 59, 94, 98, 200, 201], "due": [1, 6, 10, 16, 20, 26, 38, 40, 48, 49, 58, 60, 75, 94, 98, 101, 104, 122, 124, 136, 145, 172, 188, 191, 197, 203, 207, 210, 220, 222, 224, 227, 243, 255, 261, 284], "bad": [1, 10, 57, 98, 174, 207], "math": [1, 3, 6, 20, 28, 32, 36, 39, 41, 49, 58, 63, 66, 68, 85, 94, 98, 99, 122, 132, 188, 193, 198, 201, 206, 207, 223, 224, 227, 239, 240, 246, 257, 258, 259, 260, 261, 273, 274, 278], "format": [1, 4, 8, 11, 14, 16, 25, 27, 39, 50, 59, 80, 81, 85, 88, 94, 97, 98, 101, 121, 140, 145, 156, 166, 193, 196, 197, 202, 203, 205, 207, 217, 223, 226, 238, 248, 252, 256, 277, 280, 283], "doubl": [1, 6, 7, 38, 40, 54, 58, 59, 63, 94, 100, 116, 131, 132, 190, 197, 207, 216, 217, 240, 284], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 24, 28, 34, 35, 38, 39, 40, 44, 47, 49, 50, 51, 56, 57, 58, 59, 63, 66, 70, 81, 83, 87, 88, 89, 91, 94, 95, 98, 108, 113, 114, 122, 136, 139, 152, 160, 172, 174, 175, 180, 188, 193, 194, 196, 197, 198, 200, 202, 203, 209, 215, 217, 219, 223, 224, 225, 226, 227, 231, 232, 236, 238, 240, 243, 245, 255, 259, 276, 284], "ad": [1, 6, 7, 10, 18, 23, 25, 32, 39, 40, 42, 48, 49, 58, 59, 69, 73, 80, 83, 87, 98, 100, 104, 112, 113, 116, 122, 123, 139, 146, 174, 177, 183, 192, 193, 202, 204, 206, 207, 209, 217, 220, 223, 226, 227, 229, 232, 233, 238, 255, 276], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 38, 62, 83, 86, 94, 122, 124, 136, 207, 214, 220, 223], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 24, 26, 27, 28, 30, 31, 41, 45, 49, 52, 53, 58, 59, 60, 62, 66, 70, 83, 85, 86, 94, 98, 99, 100, 113, 116, 122, 124, 130, 132, 133, 137, 139, 140, 166, 172, 181, 187, 190, 192, 193, 194, 195, 197, 200, 206, 217, 219, 223, 225, 226, 227, 232, 235, 236, 238, 239, 240, 243, 244, 245, 246, 256, 264, 271, 276, 278, 281, 283], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 22, 31, 39, 40, 42, 49, 58, 59, 63, 64, 66, 71, 72, 74, 75, 76, 83, 85, 88, 89, 94, 97, 100, 108, 109, 114, 116, 126, 133, 152, 156, 158, 166, 169, 172, 179, 182, 186, 193, 194, 196, 197, 198, 200, 202, 203, 207, 208, 209, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 232, 238, 240, 242, 245, 246, 248, 274, 276, 279, 280, 285], "render": [1, 3, 6, 7, 40, 58, 86, 187, 193, 207, 283], "resourc": [1, 6, 7, 20, 94, 201, 223, 239, 249], "style": [1, 8, 39, 58, 86, 166, 187, 193, 207, 226, 283], "guid": [1, 3, 8, 9, 11, 13, 20, 22, 30, 39, 58, 65, 122, 136, 207, 220, 222, 225, 226, 233, 277, 281, 282, 285], "tip": [1, 6, 58, 136, 223, 224, 284], "few": [1, 3, 4, 10, 11, 18, 24, 28, 36, 48, 50, 58, 59, 85, 86, 98, 99, 124, 132, 175, 181, 187, 190, 191, 194, 202, 207, 215, 216, 217, 223, 226, 227, 240, 245, 284], "extra": [1, 10, 40, 58, 59, 98, 99, 130, 177, 188, 200, 207, 217, 223, 238, 239, 240, 259], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 35, 51, 58, 60, 66, 85, 88, 98, 122, 177, 188, 197, 200, 201, 202, 203, 223, 225, 242, 246, 259, 261], "xetex": 1, "font": [1, 86, 187, 207], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 22, 23, 38, 40, 41, 49, 50, 54, 58, 59, 61, 63, 64, 66, 74, 75, 83, 85, 88, 89, 94, 97, 98, 100, 101, 102, 108, 117, 121, 122, 136, 137, 139, 140, 144, 151, 156, 158, 160, 161, 166, 169, 172, 182, 188, 191, 192, 193, 194, 196, 202, 203, 204, 205, 207, 209, 210, 214, 215, 217, 223, 224, 226, 227, 238, 240, 242, 245, 259, 274, 278, 280, 284], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 28, 32, 33, 34, 35, 36, 38, 39, 40, 48, 49, 50, 54, 57, 58, 59, 60, 62, 64, 66, 70, 75, 76, 80, 82, 83, 85, 87, 88, 89, 91, 94, 97, 98, 99, 100, 101, 108, 109, 112, 113, 114, 118, 122, 126, 132, 136, 139, 157, 164, 166, 167, 169, 171, 172, 174, 175, 177, 181, 182, 191, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 238, 239, 240, 242, 243, 245, 246, 248, 252, 255, 257, 276, 278, 279, 280, 284], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 28, 29, 30, 33, 39, 40, 49, 50, 56, 58, 59, 63, 64, 66, 71, 85, 88, 89, 90, 92, 94, 96, 98, 111, 113, 116, 122, 156, 170, 174, 182, 192, 193, 194, 197, 198, 200, 202, 203, 207, 210, 219, 225, 227, 237, 238, 240, 241, 242, 243, 245, 246, 250, 252, 258, 276, 279, 280], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 28, 31, 32, 36, 38, 39, 40, 41, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 71, 73, 74, 75, 76, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 94, 98, 101, 104, 105, 108, 112, 116, 117, 118, 119, 121, 122, 124, 135, 136, 137, 139, 140, 146, 156, 161, 167, 169, 171, 172, 173, 174, 175, 182, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 227, 228, 231, 233, 238, 239, 240, 241, 245, 246, 248, 252, 259, 261, 274, 276, 278, 280, 284, 285], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 26, 28, 38, 39, 40, 41, 43, 46, 48, 49, 50, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 70, 74, 75, 76, 81, 84, 85, 87, 88, 89, 94, 98, 100, 101, 108, 109, 113, 116, 119, 121, 122, 124, 126, 127, 129, 130, 131, 136, 137, 139, 140, 152, 156, 161, 167, 169, 170, 172, 175, 177, 178, 182, 188, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 238, 239, 240, 241, 243, 245, 246, 247, 248, 261, 264, 274, 279, 283, 284, 285], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 151, 154, 155, 156, 157, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 250, 252, 255, 256, 257, 259, 262, 269, 273, 274, 276, 278, 279, 280, 283, 284, 285], "dev": [1, 3, 4, 5, 243], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 24, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 257, 258, 260, 261, 262, 263, 267, 269, 270, 272, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285], "sympy_debug": [2, 85, 248], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 22, 24, 25, 26, 27, 31, 32, 33, 35, 36, 38, 40, 41, 53, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 75, 77, 83, 85, 86, 88, 89, 94, 100, 101, 102, 104, 106, 108, 121, 122, 129, 131, 139, 140, 146, 161, 166, 170, 172, 175, 181, 182, 184, 188, 195, 197, 198, 200, 202, 203, 204, 207, 208, 213, 214, 219, 220, 222, 223, 224, 225, 226, 234, 238, 240, 241, 242, 246, 252, 255, 256, 258, 259, 261, 274, 276, 278, 280, 285], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 33, 34, 35, 37, 39, 40, 49, 51, 53, 58, 60, 62, 63, 64, 66, 71, 74, 75, 76, 81, 82, 85, 86, 89, 91, 94, 98, 100, 101, 109, 113, 117, 121, 122, 140, 145, 152, 156, 162, 166, 167, 169, 171, 172, 182, 184, 187, 188, 193, 197, 198, 202, 203, 204, 205, 207, 215, 217, 219, 223, 225, 226, 227, 231, 232, 233, 238, 239, 240, 242, 245, 246, 252, 254, 255, 256, 257, 259, 261, 273, 274, 279, 284, 285], "unix": [2, 238, 239], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 30, 39, 40, 41, 47, 49, 50, 57, 58, 59, 63, 64, 70, 74, 83, 85, 89, 94, 98, 100, 101, 108, 109, 110, 112, 114, 116, 122, 126, 136, 139, 167, 169, 172, 177, 181, 182, 188, 190, 193, 196, 197, 198, 200, 203, 204, 206, 207, 208, 210, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 231, 232, 238, 240, 242, 245, 246, 248, 249, 257, 258, 259, 261, 273, 274, 276, 278, 279, 280, 283, 284, 285], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 50, 54, 57, 58, 59, 60, 61, 64, 66, 68, 70, 73, 74, 77, 83, 85, 86, 88, 89, 91, 92, 94, 95, 98, 99, 105, 108, 112, 116, 117, 119, 121, 122, 123, 125, 126, 130, 133, 134, 139, 144, 147, 152, 156, 161, 164, 166, 168, 174, 176, 177, 180, 181, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 210, 214, 215, 216, 217, 219, 220, 223, 224, 225, 229, 232, 233, 236, 238, 239, 241, 243, 245, 246, 248, 255, 257, 258, 259, 261, 273, 274, 276, 277, 278, 279, 280, 282, 284], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 83, 85, 86, 88, 89, 90, 91, 94, 95, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 114, 117, 118, 122, 124, 126, 139, 143, 144, 153, 156, 157, 164, 166, 167, 170, 171, 172, 175, 181, 182, 183, 184, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 238, 239, 240, 241, 243, 245, 246, 248, 252, 255, 256, 257, 258, 259, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "isympi": [2, 3, 11, 12, 86], "window": [2, 248], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 23, 25, 30, 36, 39, 40, 49, 56, 58, 59, 60, 64, 81, 83, 85, 86, 87, 88, 94, 98, 99, 110, 112, 113, 119, 122, 126, 130, 136, 137, 139, 152, 157, 162, 172, 177, 181, 187, 188, 190, 194, 196, 197, 198, 200, 202, 206, 207, 214, 215, 216, 217, 219, 223, 226, 236, 238, 240, 241, 243, 258, 259, 261, 273, 274, 276, 277, 278, 279, 280, 284, 285], "limit": [2, 4, 10, 12, 25, 28, 30, 36, 38, 40, 57, 58, 60, 62, 63, 64, 66, 67, 70, 78, 80, 85, 86, 88, 94, 98, 106, 137, 161, 167, 170, 187, 193, 198, 200, 203, 204, 207, 210, 211, 213, 215, 219, 220, 222, 223, 224, 225, 227, 232, 239, 242, 245, 246, 248, 251, 252, 262, 264, 270, 275, 276, 278, 280], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 22, 24, 25, 27, 29, 33, 34, 35, 37, 38, 39, 41, 49, 50, 53, 54, 56, 59, 60, 61, 62, 63, 67, 68, 69, 70, 75, 78, 79, 82, 84, 85, 86, 87, 89, 91, 93, 97, 99, 101, 103, 105, 106, 108, 109, 110, 114, 116, 119, 120, 121, 122, 125, 126, 127, 128, 132, 134, 135, 139, 144, 145, 146, 147, 151, 156, 157, 158, 161, 166, 167, 168, 169, 170, 171, 172, 175, 181, 182, 185, 186, 187, 189, 191, 192, 194, 199, 200, 201, 202, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 225, 226, 227, 229, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 257, 258, 260, 261, 262, 263, 264, 267, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 282, 285], "nice": [2, 4, 6, 30, 58, 70, 94, 98, 122, 136, 139, 193, 207, 217, 248, 279], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 24, 25, 26, 30, 33, 34, 35, 36, 38, 39, 41, 42, 47, 49, 50, 57, 58, 59, 62, 63, 64, 66, 85, 87, 88, 91, 94, 95, 98, 99, 100, 101, 102, 108, 115, 117, 122, 124, 132, 138, 144, 152, 165, 166, 170, 172, 182, 185, 189, 191, 193, 196, 197, 198, 202, 203, 213, 214, 216, 217, 219, 223, 225, 232, 234, 238, 240, 245, 246, 248, 250, 252, 256, 263, 269, 271, 274, 275, 276, 277, 278, 279, 280, 284], "tree": [2, 10, 11, 15, 49, 52, 58, 100, 114, 122, 164, 167, 182, 203, 214, 216, 219, 226, 229, 231, 242, 245, 248, 275], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 40, 54, 58, 59, 62, 63, 68, 70, 76, 80, 83, 85, 88, 94, 98, 108, 112, 122, 126, 139, 144, 177, 190, 191, 194, 197, 200, 202, 203, 204, 206, 207, 208, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 238, 239, 240, 246, 273, 276, 279, 284], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 25, 30, 40, 43, 49, 50, 57, 58, 62, 63, 65, 66, 70, 83, 85, 98, 114, 133, 177, 179, 193, 195, 197, 200, 202, 206, 207, 208, 214, 215, 223, 227, 238, 240, 250, 263, 276, 280, 283], "instal": [3, 5, 7, 11, 12, 62, 99, 197, 198, 207, 239, 246, 277, 283], "enabl": [3, 7, 11, 20, 30, 58, 85, 86, 98, 102, 122, 124, 172, 182, 187, 207, 223, 227, 238, 243, 246, 280, 283, 284], "certain": [3, 7, 11, 20, 28, 30, 37, 39, 40, 49, 56, 58, 62, 66, 74, 83, 85, 98, 100, 136, 182, 183, 194, 197, 200, 202, 207, 208, 214, 217, 219, 220, 223, 225, 226, 227, 229, 240, 241, 246, 252, 255, 261, 284], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 30, 33, 34, 35, 38, 39, 40, 41, 49, 50, 57, 58, 59, 62, 64, 68, 70, 85, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 108, 112, 116, 117, 122, 130, 133, 136, 137, 140, 174, 181, 182, 186, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 205, 206, 207, 214, 215, 217, 220, 223, 224, 225, 226, 227, 236, 239, 240, 241, 242, 243, 245, 246, 248, 255, 257, 273, 276, 278, 279, 280, 282, 283, 284], "mention": [3, 4, 6, 20, 49, 83, 85, 108, 124, 140, 141, 188, 217, 220, 223, 227, 256, 257, 258, 259, 280], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 28, 38, 40, 49, 50, 58, 59, 62, 63, 64, 66, 83, 85, 98, 130, 178, 192, 194, 197, 198, 202, 203, 204, 205, 207, 216, 219, 220, 223, 224, 226, 231, 236, 238, 240, 241, 244, 245, 246, 256, 259, 271, 273, 276, 279, 280], "unless": [3, 6, 11, 18, 20, 33, 35, 38, 40, 49, 57, 58, 59, 63, 66, 73, 74, 83, 94, 97, 145, 190, 191, 195, 197, 202, 203, 207, 212, 215, 216, 223, 225, 238, 242, 245, 246, 248, 252, 261, 274, 280, 284], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 27, 28, 30, 36, 39, 40, 41, 46, 48, 49, 50, 56, 57, 58, 59, 60, 63, 64, 66, 68, 71, 72, 73, 74, 75, 80, 83, 85, 86, 88, 89, 91, 92, 94, 97, 98, 100, 112, 116, 117, 119, 121, 122, 124, 130, 132, 134, 135, 136, 139, 140, 146, 151, 156, 161, 164, 169, 174, 175, 177, 178, 182, 186, 187, 188, 191, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 205, 207, 208, 213, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 233, 236, 238, 240, 242, 245, 246, 248, 252, 259, 261, 274, 276, 277, 278, 279, 280, 284], "intend": [3, 4, 6, 10, 14, 18, 58, 59, 69, 78, 83, 98, 100, 114, 167, 197, 198, 202, 205, 220, 223, 224, 236, 241, 273], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 32, 37, 49, 50, 57, 58, 59, 63, 64, 66, 74, 81, 83, 85, 88, 89, 91, 98, 108, 112, 113, 116, 117, 121, 122, 124, 130, 132, 133, 137, 139, 156, 168, 172, 181, 191, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 215, 217, 219, 220, 223, 225, 238, 240, 242, 245, 274, 279, 284], "those": [3, 6, 10, 11, 12, 14, 18, 19, 25, 27, 28, 31, 36, 39, 40, 41, 49, 50, 56, 57, 58, 59, 62, 71, 72, 83, 85, 88, 94, 97, 98, 112, 116, 117, 124, 130, 133, 145, 169, 181, 184, 187, 190, 191, 193, 197, 198, 200, 202, 203, 205, 206, 207, 213, 215, 219, 223, 224, 225, 226, 227, 233, 236, 238, 242, 245, 252, 255, 276, 278, 284], "everi": [3, 4, 6, 11, 18, 20, 25, 29, 34, 35, 36, 39, 44, 46, 49, 50, 58, 59, 73, 87, 89, 94, 98, 108, 137, 188, 190, 191, 193, 194, 195, 197, 198, 200, 202, 207, 212, 215, 217, 219, 220, 223, 226, 227, 229, 256, 259, 261, 277, 279, 280, 284], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 27, 28, 29, 30, 31, 34, 35, 38, 39, 40, 41, 49, 50, 54, 56, 57, 58, 59, 60, 62, 64, 66, 68, 69, 71, 72, 74, 83, 85, 88, 89, 94, 97, 98, 100, 110, 112, 114, 122, 124, 129, 133, 152, 156, 162, 166, 168, 171, 181, 190, 191, 193, 195, 196, 197, 198, 200, 202, 203, 204, 207, 214, 215, 216, 217, 219, 220, 222, 223, 225, 232, 233, 236, 238, 240, 242, 245, 246, 248, 252, 254, 257, 273, 274, 276, 279, 280, 283, 284, 285], "themselv": [3, 7, 10, 20, 36, 39, 50, 54, 56, 58, 85, 98, 132, 133, 176, 197, 198, 202, 213, 227, 233, 242, 245, 248, 284], "incomplet": [3, 6, 7, 58, 63, 66, 195, 197, 203, 207, 209, 225, 226], "main": [3, 5, 6, 7, 10, 12, 26, 35, 36, 40, 58, 64, 83, 89, 94, 97, 122, 130, 170, 176, 187, 191, 193, 194, 198, 207, 214, 223, 226, 232, 239, 284, 285], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 25, 35, 40, 58, 59, 60, 62, 64, 65, 66, 74, 83, 85, 94, 98, 112, 117, 118, 126, 132, 139, 158, 161, 162, 191, 200, 203, 204, 208, 214, 219, 220, 223, 226, 227, 238, 240, 248, 278, 279, 284], "io": [3, 7, 86, 207, 246], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 31, 32, 35, 36, 38, 39, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 70, 71, 72, 74, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 112, 113, 116, 117, 122, 123, 126, 136, 137, 139, 141, 144, 145, 146, 152, 157, 166, 170, 172, 174, 175, 177, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 233, 234, 238, 239, 240, 242, 245, 246, 248, 252, 257, 259, 261, 272, 273, 274, 276, 278, 279, 280, 282, 283, 284], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 25, 26, 27, 28, 38, 43, 50, 51, 57, 58, 59, 62, 63, 66, 69, 70, 72, 88, 89, 94, 102, 133, 137, 158, 161, 191, 193, 194, 197, 198, 200, 202, 204, 219, 223, 224, 225, 233, 243, 246, 252, 254, 273, 274, 279, 284, 285], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 25, 40, 49, 58, 61, 62, 63, 66, 74, 85, 94, 98, 106, 137, 192, 194, 197, 198, 202, 203, 204, 207, 214, 219, 220, 225, 226, 239, 240, 248, 273, 284], "arithmet": [3, 40, 58, 59, 62, 89, 94, 98, 161, 168, 192, 193, 194, 196, 197, 198, 200, 201, 205, 208], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 56, 83, 85, 94, 179, 193, 194, 195, 209, 214, 217, 227, 274, 276, 279], "calcul": [3, 12, 16, 18, 26, 32, 38, 41, 50, 56, 58, 59, 60, 61, 62, 64, 66, 68, 70, 71, 72, 74, 75, 85, 89, 91, 94, 98, 101, 102, 110, 112, 113, 116, 117, 121, 124, 125, 126, 141, 144, 145, 148, 151, 167, 168, 169, 170, 172, 173, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 197, 198, 200, 202, 203, 204, 209, 214, 223, 227, 231, 239, 240, 246, 252, 255, 259, 261, 280, 283], "float": [3, 11, 18, 20, 23, 40, 49, 58, 64, 66, 73, 75, 85, 86, 89, 94, 98, 100, 106, 108, 139, 145, 187, 193, 197, 198, 207, 219, 225, 227, 238, 246, 248, 273, 276], "point": [3, 4, 6, 7, 11, 12, 16, 18, 25, 26, 30, 32, 38, 40, 41, 49, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 80, 81, 82, 83, 85, 94, 98, 101, 102, 104, 106, 113, 116, 117, 118, 119, 121, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 152, 174, 177, 183, 186, 188, 191, 193, 194, 197, 198, 200, 202, 203, 207, 209, 213, 214, 215, 223, 225, 226, 227, 239, 242, 245, 246, 248, 252, 255, 257, 258, 259, 261, 262, 270, 273, 274, 276, 279], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 83, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 110, 113, 116, 117, 118, 119, 121, 122, 124, 136, 139, 141, 145, 148, 151, 156, 158, 161, 164, 166, 167, 168, 169, 172, 173, 175, 176, 177, 182, 183, 186, 188, 190, 191, 192, 193, 195, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 213, 214, 215, 216, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 238, 240, 241, 245, 246, 248, 255, 257, 259, 262, 274, 276, 279], "evalf": [3, 6, 11, 12, 18, 26, 28, 40, 57, 62, 63, 64, 66, 77, 80, 81, 89, 94, 100, 122, 124, 139, 154, 198, 203, 207, 214, 215, 219, 227, 239, 246, 275], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 24, 26, 30, 33, 34, 35, 36, 37, 38, 40, 50, 55, 57, 58, 60, 62, 64, 68, 70, 71, 73, 75, 80, 85, 87, 90, 92, 94, 96, 98, 108, 167, 175, 177, 190, 191, 193, 198, 200, 202, 203, 204, 207, 214, 215, 219, 220, 222, 223, 225, 226, 227, 228, 236, 238, 239, 240, 245, 249, 252, 254, 278, 279, 280, 284, 285], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 30, 34, 36, 37, 40, 57, 58, 59, 60, 62, 66, 83, 85, 86, 89, 91, 94, 108, 109, 116, 122, 128, 130, 135, 136, 172, 177, 181, 182, 183, 190, 193, 196, 197, 200, 203, 207, 209, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 229, 232, 233, 236, 238, 239, 240, 243, 245, 246, 248, 255, 258, 280, 284], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 273, 274, 276, 278, 279, 280, 282, 283, 284, 285], "importerror": 3, "extern": [3, 30, 86, 100, 104, 106, 124, 132, 187, 197, 198, 208, 215, 219, 227, 238, 239], "doc": [3, 4, 6, 7, 8, 12, 29, 40, 49, 57, 58, 74, 86, 137, 174, 197, 199, 220, 223, 238, 239, 241, 243, 245, 252, 257, 270], "latest": [3, 5, 30, 39, 241, 243, 246], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 27, 36, 41, 50, 57, 58, 59, 60, 76, 83, 85, 86, 88, 89, 92, 94, 98, 101, 112, 133, 172, 174, 177, 182, 187, 190, 193, 194, 195, 197, 200, 202, 206, 207, 217, 219, 220, 223, 225, 226, 227, 228, 229, 231, 232, 238, 245, 257, 273, 274, 276, 278, 279, 280, 284, 285], "did": [3, 7, 19, 58, 85, 98, 112, 129, 177, 200, 204, 215, 225, 236, 246, 276, 278, 284], "explain": [3, 4, 6, 7, 18, 28, 39, 54, 58, 66, 76, 81, 194, 197, 200, 202, 204, 214], "ones": [3, 4, 10, 20, 30, 40, 49, 54, 58, 83, 85, 88, 89, 91, 94, 97, 98, 122, 145, 166, 172, 196, 200, 210, 220, 223, 228, 234, 240, 248, 252, 257, 280, 283], "typic": [3, 4, 10, 11, 20, 54, 64, 83, 98, 108, 113, 119, 123, 181, 191, 193, 195, 200, 204, 217, 239, 240, 257], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 30, 34, 35, 38, 39, 40, 49, 57, 58, 60, 64, 69, 89, 91, 94, 98, 122, 158, 170, 175, 182, 186, 193, 194, 196, 197, 198, 202, 203, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 238, 239, 240, 241, 242, 243, 274, 285], "git": [3, 8], "repositori": [3, 5, 7, 30], "vast": [3, 28, 85, 199], "wrap": [3, 4, 6, 33, 34, 35, 36, 40, 47, 58, 64, 86, 99, 187, 191, 193, 196, 197, 200, 207, 210, 226, 232, 239, 243, 246, 248, 279], "addition": [3, 6, 10, 58, 134, 170, 191, 200, 207, 227, 236, 243, 256], "ci": [3, 7, 66, 83, 207, 283], "wish": [3, 6, 12, 20, 30, 40, 58, 59, 62, 83, 98, 167, 181, 191, 242, 246, 274, 278, 280, 285], "local": [3, 31, 33, 34, 35, 58, 60, 83, 100, 129, 131, 184, 194, 200, 225, 238], "improv": [3, 4, 10, 19, 20, 58, 83, 193, 197, 200, 201, 203, 204, 206, 208, 223, 226, 232, 274, 280], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 37, 39, 40, 41, 49, 50, 53, 57, 58, 59, 61, 62, 64, 71, 75, 82, 85, 92, 94, 98, 99, 114, 117, 124, 126, 132, 136, 137, 139, 156, 157, 166, 169, 172, 188, 191, 195, 196, 197, 200, 202, 203, 208, 209, 210, 214, 219, 220, 223, 225, 226, 227, 228, 239, 245, 252, 254, 256, 259, 273, 274, 278, 279, 284], "gmpy2": [3, 197, 198], "wrapper": [3, 10, 11, 20, 34, 36, 40, 50, 58, 66, 94, 136, 184, 187, 196, 197, 200, 207, 214, 223, 226, 227, 239, 243, 245], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 23, 25, 27, 28, 34, 35, 36, 38, 39, 40, 41, 47, 49, 50, 54, 57, 58, 59, 63, 64, 66, 68, 73, 76, 78, 83, 85, 87, 88, 89, 91, 94, 95, 98, 100, 105, 108, 112, 124, 132, 139, 140, 156, 157, 158, 162, 169, 171, 174, 177, 178, 179, 182, 186, 190, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 207, 212, 213, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 233, 236, 240, 241, 242, 243, 245, 246, 248, 252, 257, 273, 274, 276, 277, 279, 280, 285], "larg": [3, 4, 6, 12, 18, 49, 50, 58, 59, 68, 83, 85, 97, 98, 112, 118, 136, 139, 152, 177, 181, 192, 197, 198, 200, 203, 206, 207, 208, 214, 217, 219, 227, 232, 239, 246, 248, 255, 273, 278, 284], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 22, 23, 24, 25, 33, 34, 35, 36, 38, 40, 41, 47, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 62, 63, 66, 68, 71, 82, 83, 85, 86, 87, 88, 89, 91, 94, 95, 98, 100, 101, 108, 110, 116, 161, 166, 168, 169, 170, 172, 174, 182, 184, 187, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 209, 212, 213, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 231, 232, 233, 239, 240, 242, 245, 248, 274, 276, 279, 283, 284], "faster": [3, 18, 26, 40, 43, 58, 66, 89, 98, 99, 112, 114, 117, 118, 136, 196, 197, 198, 200, 202, 203, 204, 208, 210, 214, 219, 220, 223, 224, 226, 239, 242], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 32, 38, 40, 50, 58, 59, 60, 63, 64, 66, 67, 74, 83, 85, 86, 88, 89, 94, 95, 98, 100, 106, 108, 116, 152, 156, 157, 166, 182, 184, 186, 187, 192, 193, 197, 198, 202, 203, 204, 207, 209, 210, 212, 223, 224, 227, 239, 243, 245, 248, 276, 278, 279, 283, 284], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 23, 36, 38, 40, 49, 59, 64, 65, 67, 75, 89, 98, 100, 170, 171, 195, 197, 198, 199, 200, 202, 203, 204, 207, 214, 215, 219, 220, 223, 227, 237, 238, 239, 245, 246, 250, 263, 264, 276, 279], "oper": [3, 5, 6, 11, 18, 19, 20, 26, 28, 32, 36, 40, 49, 50, 51, 57, 58, 59, 60, 61, 62, 64, 66, 68, 76, 78, 81, 83, 88, 89, 91, 98, 100, 108, 109, 112, 117, 118, 126, 130, 136, 139, 144, 148, 149, 153, 155, 156, 157, 158, 163, 164, 167, 169, 170, 171, 172, 181, 182, 184, 189, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 210, 212, 215, 216, 219, 222, 223, 225, 226, 229, 230, 231, 232, 238, 239, 242, 245, 246, 252, 263, 267, 269, 270, 275, 276, 277, 279, 284], "poli": [3, 11, 12, 57, 58, 59, 63, 64, 66, 67, 74, 80, 85, 89, 91, 94, 98, 139, 194, 195, 199, 200, 202, 203, 204, 206, 209, 222, 223, 225, 226, 238, 270], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 40, 42, 44, 46, 47, 49, 50, 51, 52, 56, 59, 61, 63, 64, 66, 68, 73, 74, 75, 80, 86, 87, 88, 89, 95, 99, 101, 106, 108, 109, 111, 113, 116, 117, 119, 121, 122, 124, 132, 134, 137, 139, 140, 141, 143, 145, 149, 151, 153, 154, 155, 158, 160, 161, 169, 170, 172, 181, 182, 183, 184, 186, 188, 190, 196, 197, 199, 207, 209, 210, 212, 215, 219, 222, 223, 224, 225, 227, 233, 242, 245, 246, 248, 252, 256, 257, 261, 269, 270, 276, 280, 281, 284, 285], "domain": [3, 6, 10, 11, 16, 20, 38, 39, 58, 59, 61, 63, 64, 66, 77, 79, 80, 83, 85, 91, 94, 95, 98, 105, 108, 122, 139, 194, 196, 199, 200, 202, 204, 205, 222, 223, 225, 227, 270, 280, 285], "No": [3, 6, 7, 12, 28, 39, 58, 66, 73, 88, 98, 101, 109, 122, 167, 193, 203, 209, 210, 219, 220, 225, 226, 227, 232, 236, 242, 243, 245, 273, 285], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 38, 39, 40, 41, 46, 49, 54, 58, 59, 60, 62, 64, 66, 70, 83, 85, 88, 89, 94, 98, 99, 117, 118, 122, 124, 132, 135, 136, 139, 156, 172, 180, 191, 194, 196, 197, 198, 200, 202, 211, 214, 215, 217, 219, 220, 223, 224, 225, 226, 227, 231, 240, 245, 273, 274, 276, 277, 278, 279, 283, 284, 285], "algorithm": [3, 6, 11, 12, 18, 25, 26, 27, 28, 38, 42, 43, 48, 49, 50, 52, 54, 56, 57, 58, 59, 62, 63, 64, 70, 75, 83, 85, 88, 91, 94, 95, 98, 101, 109, 116, 136, 159, 177, 182, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 208, 212, 215, 216, 219, 220, 223, 225, 226, 227, 233, 242, 245, 269, 274, 279, 280, 284], "simplif": [3, 11, 12, 18, 33, 35, 37, 38, 40, 58, 60, 63, 64, 83, 89, 94, 100, 114, 122, 136, 139, 156, 172, 182, 203, 208, 218, 219, 223, 225, 226, 263, 264, 273, 275, 277, 278], "factor": [3, 10, 11, 12, 41, 49, 50, 57, 58, 59, 62, 63, 64, 66, 83, 85, 94, 98, 101, 108, 139, 141, 149, 153, 156, 168, 172, 177, 178, 179, 194, 197, 198, 199, 201, 202, 203, 210, 216, 217, 219, 220, 223, 225, 227, 231, 242, 256, 259, 278, 280], "matric": [3, 6, 11, 17, 18, 36, 40, 58, 59, 85, 95, 97, 108, 116, 117, 118, 122, 126, 136, 139, 141, 144, 145, 147, 155, 156, 166, 171, 182, 191, 192, 196, 202, 207, 208, 215, 217, 219, 220, 223, 225, 226, 228, 240, 241, 269, 275, 277, 278], "thu": [3, 4, 10, 11, 12, 16, 23, 25, 36, 43, 49, 50, 58, 59, 60, 64, 66, 81, 83, 85, 89, 92, 94, 97, 98, 109, 121, 126, 132, 136, 177, 182, 195, 200, 202, 204, 208, 214, 217, 219, 240, 245, 246, 257, 258, 276, 279, 284, 285], "speed": [3, 6, 10, 35, 40, 49, 58, 59, 62, 89, 98, 99, 110, 116, 117, 118, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 139, 140, 143, 146, 181, 182, 186, 191, 192, 204, 207, 208, 214, 219, 223, 239, 242, 245, 279, 280], "non": [3, 4, 11, 12, 18, 20, 26, 28, 31, 36, 38, 41, 48, 51, 57, 58, 59, 63, 64, 65, 66, 67, 68, 71, 72, 73, 85, 87, 88, 89, 90, 91, 94, 95, 97, 112, 117, 119, 124, 126, 130, 134, 135, 139, 156, 161, 171, 172, 174, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 210, 214, 215, 217, 219, 220, 222, 223, 225, 226, 227, 228, 231, 232, 233, 238, 240, 245, 248, 259, 279, 284, 285], "who": [3, 4, 6, 16, 20, 59, 60, 139, 191, 200, 207, 277], "abl": [3, 4, 6, 11, 16, 18, 20, 24, 39, 40, 49, 54, 58, 59, 60, 69, 77, 85, 91, 94, 98, 105, 122, 134, 136, 137, 139, 140, 194, 197, 204, 223, 226, 238, 256, 278, 283, 285], "experi": [3, 124, 226, 227], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 22, 26, 29, 36, 41, 48, 58, 94, 97, 100, 139, 140, 197, 201, 207, 212, 217, 223, 226, 278, 279, 283], "interfac": [3, 7, 11, 25, 38, 58, 86, 116, 141, 167, 187, 191, 197, 200, 205, 226, 239, 240], "ipython": [3, 6, 10, 11, 12, 30, 86, 139, 187, 246, 250, 251, 282, 283], "jupyt": [3, 10, 11, 20, 246, 250], "notebook": [3, 11, 20, 30, 86, 187, 246, 282, 283], "init_sess": [3, 86, 283], "usual": [3, 10, 11, 12, 16, 18, 39, 41, 49, 57, 58, 59, 76, 83, 85, 94, 132, 158, 170, 177, 188, 190, 191, 194, 195, 197, 198, 200, 206, 207, 208, 214, 217, 223, 226, 227, 228, 232, 233, 240, 242, 246, 252, 261, 273, 276, 279, 283, 284], "flag": [3, 4, 14, 20, 38, 40, 49, 50, 54, 56, 58, 71, 73, 85, 88, 89, 90, 94, 98, 116, 122, 156, 193, 198, 200, 203, 204, 207, 208, 209, 215, 219, 220, 223, 225, 226, 233, 238, 239, 245, 248, 273, 284], "auto_symbol": [3, 86, 100], "auto_int_to_integ": [3, 86], "qt": 3, "consol": [3, 4, 12, 58, 86, 187, 193, 283], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 22, 23, 28, 33, 34, 35, 36, 37, 38, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 71, 73, 74, 81, 82, 83, 85, 86, 89, 92, 93, 94, 97, 98, 99, 101, 108, 109, 111, 112, 113, 115, 116, 118, 119, 122, 126, 132, 133, 134, 135, 136, 137, 139, 140, 147, 151, 155, 156, 160, 161, 164, 167, 169, 170, 171, 172, 174, 175, 177, 179, 181, 182, 184, 186, 187, 188, 191, 192, 193, 194, 195, 198, 200, 202, 203, 204, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 239, 240, 241, 242, 243, 246, 248, 252, 254, 255, 256, 258, 259, 261, 267, 269, 274, 275, 276, 277, 278, 280, 283, 284, 285], "mathjax": [3, 7, 86, 187, 283], "preview": [3, 39, 241], "save": [3, 11, 38, 58, 94, 98, 193, 206, 225, 242], "viewer": [3, 7, 39, 207, 241], "parser": [3, 91, 100, 132, 139, 238, 269], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 24, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 48, 50, 58, 59, 61, 63, 64, 66, 70, 74, 78, 81, 84, 85, 86, 88, 91, 92, 93, 94, 99, 100, 101, 103, 104, 106, 109, 112, 122, 123, 128, 132, 134, 135, 139, 141, 144, 146, 147, 159, 162, 175, 176, 177, 178, 188, 191, 193, 198, 199, 201, 204, 205, 207, 211, 214, 217, 221, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 255, 257, 259, 260, 261, 262, 263, 269, 270, 271, 273, 276, 278, 284, 285], "parse_expr": [3, 10, 18, 28, 100], "mathematca": 3, "parse_mathematica": [3, 10, 100], "maxima": [3, 25, 100, 226], "parse_maxima": [3, 100], "antlr": [3, 100, 122], "runtim": [3, 11, 40, 58, 118], "autolev": [3, 124, 132, 269], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 27, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 56, 58, 59, 61, 62, 63, 65, 66, 68, 73, 74, 76, 81, 83, 85, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 100, 101, 102, 108, 112, 116, 122, 124, 126, 133, 136, 137, 162, 164, 167, 172, 177, 182, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 205, 206, 207, 209, 214, 215, 217, 219, 220, 222, 223, 225, 226, 227, 229, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 252, 255, 256, 259, 261, 274, 276, 278, 279, 280, 283, 284, 285], "antlr4": [3, 100], "awar": [3, 4, 6, 11, 12, 19, 38, 58, 62, 88, 94, 217, 227, 246], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 32, 33, 34, 35, 40, 49, 50, 52, 54, 56, 57, 58, 59, 60, 63, 64, 66, 68, 71, 74, 77, 80, 81, 83, 85, 88, 89, 90, 91, 94, 97, 98, 101, 102, 104, 106, 108, 109, 116, 117, 118, 122, 124, 132, 134, 135, 136, 137, 139, 152, 167, 169, 172, 181, 182, 191, 192, 193, 194, 195, 198, 200, 202, 203, 207, 208, 215, 216, 217, 219, 220, 223, 225, 226, 227, 231, 232, 238, 239, 240, 241, 242, 243, 245, 246, 249, 276, 278, 279, 283, 284], "match": [3, 4, 6, 10, 12, 18, 20, 49, 50, 57, 58, 66, 71, 83, 85, 89, 94, 116, 121, 148, 173, 181, 182, 196, 203, 219, 220, 223, 224, 225, 227, 236, 238, 240, 245, 246, 258, 274], "wa": [3, 4, 10, 12, 14, 18, 20, 47, 49, 50, 52, 58, 59, 60, 66, 71, 94, 98, 100, 112, 113, 122, 124, 126, 136, 137, 167, 177, 190, 191, 192, 194, 200, 202, 203, 204, 206, 207, 216, 217, 219, 223, 225, 227, 236, 238, 241, 243, 245, 246, 274, 276, 278, 279, 282], "compil": [3, 40, 86, 99, 112, 139, 187, 207, 219, 232, 238, 239, 240, 263, 278], "4": [3, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 104, 106, 108, 109, 110, 114, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 144, 148, 151, 156, 166, 167, 169, 170, 171, 172, 173, 175, 181, 182, 183, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 238, 239, 242, 245, 246, 252, 255, 256, 257, 259, 261, 262, 273, 274, 276, 278, 279, 280, 284, 285], "clang": [3, 100], "bind": [3, 40, 207, 239], "parse_c": 3, "lfortran": [3, 100], "fortran": [3, 11, 16, 20, 38, 99, 100, 112, 139, 192, 240, 283], "satisfi": [3, 7, 10, 18, 24, 25, 27, 35, 36, 38, 41, 46, 49, 54, 58, 59, 63, 66, 68, 81, 83, 87, 88, 94, 98, 118, 136, 156, 161, 194, 195, 200, 202, 203, 207, 213, 214, 215, 220, 223, 224, 225, 226, 227, 233, 279, 284], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 39, 40, 41, 43, 48, 49, 50, 55, 58, 59, 61, 63, 64, 66, 69, 71, 78, 79, 81, 82, 85, 88, 89, 90, 94, 98, 99, 100, 112, 122, 132, 141, 143, 144, 147, 156, 157, 165, 166, 168, 176, 181, 183, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 211, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 231, 232, 242, 245, 246, 249, 260, 263, 267, 274, 278, 284], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 28, 57, 58, 66, 72, 82, 89, 94, 98, 160, 161, 172, 177, 182, 194, 195, 200, 204, 214, 216, 217, 219, 220, 223, 225, 226, 232, 242, 245, 246, 255, 274, 276, 278, 279, 284], "sat": [3, 34], "solver": [3, 6, 11, 24, 26, 34, 66, 94, 98, 121, 132, 139, 140, 196, 199, 207, 219, 220, 224, 238, 263, 264, 270, 275, 277], "ask": [3, 6, 11, 12, 15, 18, 19, 34, 35, 36, 37, 58, 70, 83, 122, 177, 194, 213, 219, 226, 245, 264, 276], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 58, 62, 64, 68, 74, 83, 85, 88, 101, 102, 104, 113, 116, 117, 121, 124, 126, 127, 128, 129, 132, 134, 135, 136, 139, 160, 161, 175, 188, 191, 193, 195, 197, 216, 219, 220, 225, 238, 259, 261, 269, 283, 284], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 227, 279], "primarili": [3, 11, 18, 40, 58, 64, 98, 101, 171, 203, 205, 239, 242, 248, 256], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 26, 30, 32, 33, 34, 35, 38, 39, 40, 50, 58, 62, 65, 66, 68, 82, 85, 91, 94, 98, 99, 100, 101, 102, 104, 105, 108, 112, 116, 122, 139, 167, 182, 190, 193, 195, 196, 197, 198, 200, 202, 203, 204, 207, 212, 213, 214, 215, 219, 223, 224, 225, 226, 227, 228, 232, 236, 238, 239, 240, 246, 257, 259, 274, 276, 279, 283], "give": [3, 4, 6, 12, 14, 18, 19, 20, 23, 25, 26, 27, 28, 33, 35, 40, 41, 47, 49, 50, 51, 52, 57, 58, 59, 60, 63, 64, 66, 68, 70, 71, 73, 74, 82, 83, 85, 86, 88, 91, 94, 97, 98, 99, 101, 104, 108, 116, 122, 139, 151, 166, 167, 169, 170, 174, 175, 177, 178, 180, 182, 186, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 202, 203, 204, 207, 208, 209, 210, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 238, 239, 240, 245, 256, 261, 276, 277, 279, 284, 285], "rudimentari": [3, 20, 200], "text": [3, 4, 6, 7, 11, 20, 30, 40, 49, 59, 63, 64, 66, 76, 83, 86, 89, 94, 98, 137, 177, 187, 192, 193, 194, 207, 214, 220, 223, 226, 227, 238], "pyglet": [3, 207], "pygletplot": [3, 193], "2d": [3, 10, 71, 72, 74, 101, 102, 104, 150, 182, 193, 207, 220, 232, 278], "3d": [3, 10, 32, 42, 71, 72, 101, 150, 173, 188, 193, 256, 258, 259, 260, 261], "evalu": [3, 6, 11, 16, 18, 19, 22, 28, 33, 34, 35, 38, 40, 58, 60, 63, 64, 66, 69, 73, 74, 83, 85, 88, 91, 94, 98, 99, 100, 108, 112, 114, 122, 136, 137, 147, 149, 151, 153, 158, 161, 169, 172, 192, 193, 197, 198, 200, 201, 203, 207, 208, 213, 214, 215, 217, 219, 220, 223, 225, 226, 227, 229, 239, 240, 241, 246, 259, 264, 273, 274, 275, 276, 278, 280], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 22, 23, 24, 25, 27, 36, 38, 40, 57, 58, 63, 66, 70, 74, 81, 94, 98, 100, 104, 105, 106, 108, 116, 117, 118, 122, 124, 132, 136, 140, 144, 151, 154, 169, 176, 181, 191, 193, 197, 198, 200, 201, 202, 203, 206, 207, 216, 217, 219, 223, 225, 226, 232, 238, 239, 245, 246, 264, 273, 276, 280, 284], "variou": [3, 6, 7, 11, 16, 20, 24, 38, 40, 42, 49, 57, 58, 63, 78, 83, 85, 88, 94, 119, 151, 155, 156, 167, 169, 181, 194, 195, 198, 199, 200, 202, 208, 214, 217, 220, 223, 224, 226, 240, 284], "primari": [3, 4, 6, 7, 18, 20, 58, 70, 88, 191, 194, 240, 246], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 25, 39, 40, 48, 49, 50, 52, 56, 58, 60, 63, 66, 68, 70, 71, 72, 73, 74, 75, 85, 87, 88, 91, 92, 94, 98, 99, 100, 104, 105, 106, 108, 116, 119, 121, 122, 125, 129, 131, 133, 136, 137, 139, 140, 141, 144, 145, 151, 158, 160, 161, 162, 166, 169, 170, 171, 172, 175, 177, 182, 183, 184, 186, 188, 190, 191, 193, 194, 196, 200, 202, 203, 207, 209, 219, 223, 224, 225, 226, 227, 228, 241, 246, 252, 255, 256, 259, 261, 276], "standard": [3, 7, 10, 11, 12, 18, 20, 25, 28, 40, 58, 62, 64, 66, 81, 83, 85, 86, 87, 88, 92, 94, 98, 99, 100, 111, 149, 153, 182, 188, 192, 194, 197, 198, 200, 207, 210, 215, 219, 220, 223, 226, 227, 240, 246, 249, 256, 261, 273, 276, 284], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 23, 25, 31, 39, 41, 42, 47, 49, 50, 51, 54, 58, 60, 63, 66, 74, 78, 82, 83, 85, 87, 91, 94, 97, 98, 100, 101, 104, 112, 117, 119, 121, 122, 126, 128, 129, 132, 136, 152, 166, 169, 170, 175, 177, 180, 181, 182, 184, 186, 188, 190, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 214, 217, 219, 220, 223, 224, 226, 228, 229, 232, 233, 236, 240, 242, 245, 246, 249, 252, 256, 257, 258, 259, 261, 273, 274, 276, 277, 278, 279, 284, 285], "principl": [3, 59, 89, 98, 143, 192, 194, 195, 200, 216, 225], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 23, 24, 26, 28, 31, 32, 35, 38, 39, 40, 49, 50, 58, 59, 60, 62, 64, 65, 66, 68, 71, 72, 74, 85, 86, 88, 89, 91, 94, 95, 98, 100, 101, 106, 108, 113, 121, 122, 126, 139, 140, 144, 161, 162, 166, 167, 169, 170, 182, 187, 193, 194, 196, 197, 198, 200, 202, 203, 205, 207, 208, 214, 215, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 243, 245, 246, 248, 251, 252, 273, 274, 279, 283, 284, 285], "appropri": [3, 6, 7, 12, 16, 25, 27, 49, 58, 64, 73, 94, 112, 124, 161, 162, 172, 182, 190, 196, 197, 203, 204, 207, 213, 214, 219, 220, 225, 227, 232, 240, 257, 283], "namespac": [3, 6, 10, 31, 40, 41, 58, 198, 220, 223, 224, 238, 240, 241, 246], "dictionari": [3, 10, 11, 24, 28, 39, 40, 47, 49, 50, 56, 58, 63, 72, 74, 87, 89, 94, 97, 98, 100, 101, 114, 117, 118, 121, 122, 124, 126, 129, 134, 136, 162, 172, 182, 191, 193, 195, 198, 200, 202, 203, 205, 207, 214, 219, 220, 223, 224, 225, 226, 227, 231, 233, 238, 242, 245, 246, 252, 273, 280], "third": [3, 4, 14, 40, 49, 50, 58, 66, 68, 72, 108, 116, 169, 175, 190, 195, 203, 217, 223, 226, 227, 243, 245, 274, 279], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 23, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 74, 75, 83, 85, 86, 88, 89, 91, 94, 97, 98, 100, 101, 106, 108, 116, 117, 121, 122, 134, 135, 139, 146, 149, 153, 155, 158, 161, 166, 167, 169, 170, 171, 172, 180, 187, 188, 192, 193, 194, 195, 197, 198, 200, 202, 203, 206, 207, 208, 209, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 227, 231, 232, 238, 239, 240, 241, 242, 243, 245, 246, 248, 256, 257, 259, 273, 274, 279, 280, 284], "default": [3, 4, 6, 7, 11, 12, 18, 20, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 48, 49, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 85, 86, 88, 89, 91, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 112, 113, 114, 116, 117, 118, 122, 136, 145, 162, 164, 167, 169, 170, 172, 178, 181, 182, 184, 186, 187, 192, 193, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 232, 233, 238, 239, 240, 242, 243, 245, 246, 248, 252, 273, 274, 278, 280, 283, 284], "translat": [3, 10, 40, 49, 58, 67, 69, 73, 75, 99, 100, 108, 111, 116, 117, 129, 131, 133, 137, 190, 193, 207, 223, 225, 239, 240, 246, 248, 257], "numpi": [3, 6, 10, 11, 20, 26, 30, 40, 58, 81, 86, 99, 106, 122, 139, 156, 166, 196, 207, 227, 232, 239, 240, 246, 273, 276], "By": [3, 12, 18, 20, 25, 33, 35, 40, 48, 57, 58, 60, 62, 63, 66, 72, 73, 77, 81, 83, 88, 89, 94, 97, 98, 99, 100, 101, 102, 106, 113, 167, 172, 193, 195, 197, 198, 200, 202, 203, 204, 206, 207, 209, 214, 216, 219, 220, 223, 225, 226, 227, 231, 233, 234, 238, 241, 245, 246, 259, 273, 278, 279, 284], "produc": [3, 6, 7, 11, 19, 20, 24, 26, 28, 39, 49, 58, 59, 71, 85, 88, 94, 182, 197, 202, 203, 207, 214, 223, 224, 225, 227, 236, 238, 242, 243, 245, 283], "behavior": [3, 4, 10, 11, 12, 20, 49, 58, 63, 66, 85, 100, 111, 112, 132, 136, 167, 194, 195, 202, 203, 207, 208, 212, 214, 216, 219, 236, 239, 241, 245, 246, 276], "backward": [3, 8, 16, 38, 58, 89, 94, 207, 245, 284], "scipi": [3, 11, 23, 40, 58, 66, 112, 139, 166, 207, 227, 239, 246, 273, 282], "special": [3, 6, 11, 13, 18, 20, 28, 31, 32, 50, 58, 59, 61, 62, 63, 65, 73, 76, 83, 85, 89, 94, 139, 156, 161, 188, 194, 197, 200, 201, 202, 207, 216, 217, 219, 222, 223, 224, 225, 227, 238, 239, 240, 243, 245, 246, 256, 259, 261, 264, 274, 275, 279], "cupi": [3, 99], "cuda": [3, 99], "gpu": [3, 99, 139], "jax": [3, 99, 246], "xla": [3, 99], "program": [3, 7, 12, 18, 40, 42, 50, 139, 177, 192, 240, 242, 276, 278, 282, 284], "tpu": [3, 99], "compatibli": 3, "tensorflow": [3, 246], "learn": [3, 5, 7, 22, 28, 94, 137, 191, 216, 226, 273, 276, 277, 278, 282], "numexpr": [3, 246], "fast": [3, 18, 40, 58, 85, 93, 94, 98, 144, 198, 199, 200, 201, 202, 203, 204, 210, 214, 223, 225, 242, 245, 246], "alreadi": [3, 4, 10, 12, 18, 20, 24, 25, 28, 30, 49, 50, 58, 59, 67, 68, 71, 72, 74, 83, 85, 89, 95, 98, 104, 109, 113, 122, 136, 141, 167, 169, 172, 188, 190, 191, 193, 196, 197, 200, 202, 206, 210, 216, 217, 219, 223, 226, 227, 233, 257, 259, 274, 276, 277, 278, 282, 283, 284, 285], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 24, 25, 27, 28, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 63, 64, 66, 68, 71, 72, 73, 74, 75, 77, 85, 86, 87, 88, 89, 91, 94, 95, 97, 99, 100, 102, 104, 106, 108, 109, 110, 112, 117, 118, 121, 122, 126, 136, 137, 139, 145, 148, 151, 152, 155, 156, 157, 158, 160, 161, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 203, 204, 207, 209, 213, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 228, 232, 233, 238, 240, 242, 245, 248, 252, 255, 256, 258, 259, 261, 264, 270, 273, 274, 276, 278, 279, 280, 284], "languag": [3, 7, 11, 12, 16, 20, 40, 64, 94, 100, 112, 122, 139, 207, 212, 227, 239, 240, 276, 278, 280, 282, 284], "valid": [3, 6, 7, 10, 18, 19, 20, 24, 33, 35, 37, 38, 39, 40, 51, 57, 58, 63, 64, 74, 94, 98, 114, 116, 117, 122, 124, 137, 141, 145, 164, 169, 179, 182, 187, 191, 197, 200, 203, 206, 207, 215, 219, 220, 223, 225, 226, 227, 246, 280, 284], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 27, 28, 31, 36, 40, 41, 49, 50, 51, 58, 62, 64, 69, 74, 76, 83, 88, 89, 91, 94, 98, 100, 121, 129, 139, 152, 166, 170, 172, 181, 190, 194, 197, 200, 203, 205, 210, 217, 220, 222, 223, 226, 227, 242, 245, 246, 249, 261, 276, 278, 279], "string": [3, 4, 6, 7, 11, 12, 20, 33, 39, 40, 42, 47, 58, 59, 60, 61, 62, 65, 71, 81, 86, 87, 88, 91, 94, 98, 100, 101, 104, 106, 112, 113, 116, 119, 143, 152, 156, 166, 170, 174, 180, 181, 182, 186, 187, 188, 193, 196, 198, 202, 207, 208, 214, 219, 223, 227, 228, 231, 232, 233, 238, 239, 240, 245, 246, 248, 250, 252, 254, 256, 275, 276, 279, 283], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 24, 32, 34, 36, 39, 40, 41, 42, 47, 48, 49, 50, 51, 53, 54, 57, 58, 59, 60, 63, 64, 66, 68, 69, 71, 73, 74, 75, 80, 81, 85, 87, 88, 89, 91, 94, 98, 100, 101, 102, 105, 106, 108, 113, 116, 117, 119, 121, 122, 124, 125, 126, 127, 130, 132, 134, 135, 136, 137, 139, 141, 143, 144, 146, 158, 159, 161, 165, 166, 169, 170, 172, 174, 177, 178, 179, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 200, 203, 205, 207, 209, 210, 213, 214, 215, 217, 219, 220, 223, 225, 226, 227, 229, 231, 232, 233, 240, 242, 245, 246, 252, 255, 259, 261, 269, 274, 276, 278, 279, 284, 285], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 25, 35, 38, 40, 41, 43, 48, 49, 53, 57, 58, 59, 60, 64, 66, 70, 71, 81, 85, 87, 88, 89, 94, 98, 99, 100, 101, 104, 108, 112, 116, 117, 119, 121, 122, 124, 136, 137, 139, 141, 155, 158, 161, 162, 166, 168, 169, 170, 171, 172, 174, 177, 180, 181, 182, 183, 184, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 203, 204, 207, 210, 213, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 229, 232, 238, 239, 241, 242, 245, 246, 252, 254, 255, 273, 274, 276, 278, 279, 280, 284], "within": [3, 7, 10, 11, 18, 26, 38, 39, 40, 58, 64, 71, 74, 88, 89, 91, 98, 99, 101, 129, 167, 181, 182, 190, 191, 195, 197, 203, 205, 215, 223, 225, 226, 227, 238, 239, 248], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 24, 25, 26, 27, 28, 38, 39, 40, 41, 43, 46, 49, 50, 54, 57, 58, 59, 60, 62, 63, 64, 66, 70, 73, 74, 75, 76, 80, 83, 85, 88, 89, 91, 94, 95, 98, 99, 100, 102, 108, 112, 116, 117, 122, 124, 125, 126, 127, 133, 135, 137, 139, 145, 156, 162, 167, 169, 171, 172, 177, 178, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 212, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 227, 228, 231, 233, 236, 238, 240, 241, 243, 245, 246, 247, 248, 249, 252, 255, 256, 274, 278, 279, 280, 283, 284, 285], "subpackag": [3, 263], "f2py": [3, 40, 99, 239, 240], "ufuncifi": [3, 40, 239], "cython": [3, 40, 99, 139, 239], "codegen": [3, 20, 99, 207, 239, 244, 271], "relat": [3, 4, 6, 7, 11, 19, 33, 35, 36, 38, 41, 42, 48, 49, 56, 60, 63, 64, 74, 80, 83, 85, 89, 94, 98, 104, 111, 117, 126, 129, 132, 133, 139, 141, 146, 154, 156, 182, 186, 190, 192, 193, 194, 200, 202, 203, 204, 206, 207, 211, 213, 214, 217, 219, 220, 222, 223, 225, 226, 227, 245, 284], "reli": [3, 10, 12, 40, 94, 99, 105, 200, 206, 207, 214, 219, 226, 241, 246, 280], "llvm": 3, "gcc": [3, 240], "ifort": 3, "therefor": [3, 4, 6, 20, 25, 41, 49, 54, 58, 62, 66, 74, 87, 98, 108, 116, 188, 191, 192, 193, 197, 200, 203, 207, 223, 226, 227, 228, 233, 252, 254, 256, 257, 259, 261], "aesara": [3, 10, 40, 139], "aesaracod": [3, 10, 40, 99, 207], "aeseara": 3, "previous": [3, 4, 10, 57, 116, 130, 133, 188, 206, 219, 227, 259], "theano": [3, 10, 139, 283], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 83, 85, 87, 88, 89, 90, 91, 94, 95, 97, 98, 100, 101, 104, 106, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 124, 126, 130, 134, 136, 137, 139, 141, 143, 144, 145, 146, 148, 149, 153, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 184, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 222, 223, 224, 225, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 255, 257, 259, 273, 274, 279, 280, 283, 284, 285], "graph": [3, 6, 11, 50, 66, 87, 94, 99, 196, 207, 226, 245, 279, 283], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 73, 74, 75, 83, 85, 88, 89, 91, 92, 94, 99, 100, 101, 102, 106, 108, 109, 112, 113, 116, 117, 118, 119, 121, 122, 126, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 145, 146, 147, 155, 156, 158, 166, 167, 171, 172, 174, 175, 178, 179, 181, 182, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 207, 209, 210, 213, 214, 215, 216, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 238, 239, 240, 241, 242, 245, 246, 249, 250, 255, 256, 257, 262, 263, 267, 273, 274, 276, 278, 279, 280, 283, 284], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 216], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 30, 38, 47, 50, 58, 59, 60, 62, 64, 67, 74, 78, 97, 98, 104, 113, 116, 132, 136, 140, 191, 197, 200, 202, 207, 209, 214, 220, 223, 226, 227, 238, 252, 254, 274, 276, 278], "llvm_callabl": 3, "callabl": [3, 12, 40, 49, 94, 100, 157, 202, 207, 208, 219, 236, 239, 240, 245, 246, 247], "unlik": [3, 6, 11, 12, 18, 19, 37, 59, 85, 94, 98, 100, 122, 190, 200, 207, 220, 223, 226, 242, 243, 276, 278, 279, 280, 283], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 23, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 71, 74, 75, 77, 80, 83, 85, 86, 87, 88, 89, 94, 95, 98, 99, 100, 101, 102, 108, 109, 112, 116, 117, 121, 122, 123, 124, 125, 133, 134, 135, 136, 137, 145, 149, 153, 156, 166, 167, 168, 169, 170, 171, 172, 177, 181, 182, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 204, 206, 207, 208, 209, 210, 213, 215, 219, 220, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 238, 239, 240, 242, 245, 246, 248, 252, 254, 256, 257, 262, 274, 276, 277, 279, 283, 284, 285], "assum": [3, 6, 11, 12, 15, 18, 20, 25, 27, 35, 40, 41, 42, 47, 49, 57, 58, 59, 60, 63, 64, 66, 68, 75, 76, 83, 85, 94, 98, 101, 104, 108, 121, 122, 128, 134, 135, 136, 137, 139, 145, 167, 171, 172, 182, 186, 188, 194, 195, 197, 200, 203, 205, 207, 214, 215, 217, 219, 220, 223, 224, 226, 227, 231, 232, 233, 240, 245, 248, 255, 257, 261, 264, 277, 279, 282, 284, 285], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 36, 39, 40, 41, 42, 49, 51, 54, 57, 58, 59, 62, 64, 66, 68, 69, 70, 83, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 116, 117, 122, 124, 132, 136, 137, 139, 144, 156, 172, 176, 177, 178, 191, 193, 194, 197, 198, 200, 202, 203, 204, 207, 212, 214, 215, 216, 219, 220, 223, 225, 226, 227, 228, 232, 238, 241, 243, 245, 246, 257, 276, 279], "captur": [3, 58, 245], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 25, 28, 39, 40, 58, 59, 66, 82, 85, 86, 88, 89, 91, 94, 98, 99, 100, 105, 108, 117, 121, 122, 130, 136, 139, 140, 144, 145, 156, 168, 172, 181, 182, 186, 187, 188, 191, 197, 200, 203, 207, 208, 217, 219, 220, 222, 223, 225, 227, 232, 238, 239, 240, 242, 245, 246, 252, 276, 278, 279, 280, 283, 284, 285], "suit": [3, 4, 7, 18, 20, 25, 39, 193, 203, 236, 238], "stat": [3, 263, 270], "sampl": [3, 8, 16, 49, 61, 106, 156, 193, 207, 227, 274, 278], "At": [3, 10, 18, 20, 25, 38, 54, 64, 66, 85, 98, 101, 102, 112, 177, 181, 191, 202, 217, 246], "least": [3, 4, 7, 10, 14, 18, 36, 38, 40, 49, 58, 64, 70, 82, 83, 85, 94, 98, 99, 117, 152, 166, 174, 194, 195, 197, 198, 200, 202, 203, 214, 216, 219, 223, 225, 226, 227, 240, 284], "random": [3, 6, 10, 42, 47, 49, 50, 56, 59, 68, 71, 72, 93, 94, 98, 156, 168, 193, 200, 207, 237, 238, 241, 245, 276, 280, 284], "pymc": [3, 227], "manipul": [3, 11, 15, 16, 18, 24, 39, 40, 41, 49, 58, 64, 66, 83, 98, 99, 115, 122, 132, 137, 170, 190, 196, 197, 198, 201, 206, 207, 209, 216, 219, 230, 245, 263, 269, 270, 273, 274, 275, 276, 277, 278, 280, 283, 284], "use_symengin": 3, "physic": [3, 6, 16, 40, 51, 94, 98, 101, 102, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 186, 187, 192, 201, 227, 242, 245, 259, 278, 284], "mechan": [3, 20, 58, 81, 85, 101, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 154, 158, 161, 167, 169, 170, 171, 174, 181, 182, 189, 192, 269], "liealgebra": [3, 87], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 23, 29, 36, 40, 48, 49, 50, 58, 60, 70, 86, 87, 88, 89, 94, 99, 112, 119, 122, 136, 139, 156, 172, 177, 190, 191, 204, 206, 214, 215, 216, 219, 223, 226, 231, 241, 243, 245, 273, 274, 276, 278, 279, 280, 283, 284], "configur": [3, 4, 5, 10, 50, 88, 108, 116, 117, 125, 126, 129, 131, 132, 134, 136, 207], "otherwis": [3, 4, 14, 18, 19, 20, 38, 39, 40, 49, 50, 54, 57, 58, 59, 62, 64, 66, 67, 68, 71, 72, 73, 74, 83, 85, 87, 88, 90, 94, 97, 98, 100, 106, 108, 110, 113, 121, 122, 157, 162, 168, 186, 189, 190, 194, 198, 200, 202, 203, 205, 207, 209, 210, 212, 213, 215, 219, 220, 223, 224, 225, 226, 227, 228, 236, 238, 240, 245, 246, 273, 274, 283], "ordinari": [3, 18, 19, 22, 38, 40, 49, 58, 62, 63, 64, 66, 76, 80, 81, 85, 95, 108, 132, 194, 196, 197, 206, 213, 223, 228, 242, 278, 284], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 47, 49, 50, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 102, 104, 106, 108, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 144, 146, 147, 148, 149, 150, 152, 153, 156, 161, 162, 167, 169, 170, 171, 172, 173, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 238, 239, 240, 241, 243, 245, 246, 248, 252, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 30, 31, 39, 50, 57, 58, 59, 66, 70, 85, 89, 94, 122, 172, 191, 193, 194, 195, 200, 202, 207, 214, 216, 217, 219, 223, 225, 226, 232, 238, 245, 259, 280], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 58, 83, 85, 88, 89, 100, 166, 197, 217, 219, 223, 225, 274, 279], "anywher": [3, 4, 6, 10, 18, 40, 58, 66, 72, 172, 248, 278], "els": [3, 4, 10, 11, 12, 18, 19, 20, 23, 40, 48, 50, 54, 58, 59, 66, 68, 72, 74, 75, 83, 85, 88, 94, 98, 108, 172, 182, 193, 198, 202, 203, 207, 208, 215, 219, 223, 225, 226, 231, 233, 238, 245, 248, 252, 255, 273, 279], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 23, 25, 26, 28, 29, 34, 35, 38, 40, 41, 44, 48, 50, 57, 58, 59, 60, 63, 64, 65, 66, 71, 72, 83, 85, 88, 91, 94, 98, 99, 100, 108, 109, 112, 126, 138, 177, 188, 190, 191, 194, 195, 197, 198, 201, 206, 207, 215, 216, 220, 223, 226, 227, 232, 239, 240, 246, 252, 256, 259, 261, 273, 276, 277, 278, 279, 282, 284], "softwar": [3, 7, 85, 201, 278], "itself": [3, 4, 6, 7, 10, 11, 20, 36, 47, 49, 50, 56, 58, 60, 63, 64, 71, 75, 80, 98, 117, 121, 122, 137, 162, 169, 188, 190, 193, 194, 197, 200, 202, 203, 207, 215, 216, 219, 226, 231, 232, 233, 240, 242, 245, 261, 278], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 28, 32, 34, 39, 40, 41, 46, 49, 53, 56, 57, 61, 64, 74, 76, 81, 82, 83, 88, 89, 92, 95, 108, 116, 122, 134, 135, 137, 139, 140, 146, 156, 170, 177, 180, 185, 188, 189, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 214, 219, 220, 223, 224, 225, 226, 227, 238, 240, 245, 246, 250, 258, 259, 260, 267, 269, 270, 274, 275, 276, 277, 282], "beyond": [3, 18, 23, 52, 74, 98, 136, 194, 197, 216, 219, 280], "control": [3, 5, 10, 12, 14, 18, 20, 39, 41, 58, 59, 62, 83, 88, 89, 136, 139, 152, 156, 167, 168, 172, 176, 203, 204, 208, 215, 220, 226, 245, 269, 273], "pytest": [3, 4, 10, 235, 241, 243, 246, 271], "entir": [3, 4, 18, 49, 58, 59, 62, 63, 66, 72, 74, 83, 97, 114, 133, 137, 182, 194, 196, 202, 215, 232, 241, 243, 278, 284], "import_modul": 3, "own": [3, 5, 6, 12, 20, 34, 42, 49, 50, 58, 74, 102, 116, 122, 139, 202, 207, 214, 219, 223, 242, 245, 246, 278], "runner": [3, 238], "access": [3, 6, 7, 11, 12, 18, 20, 33, 34, 35, 40, 58, 66, 87, 88, 91, 94, 99, 102, 108, 109, 116, 117, 121, 122, 140, 181, 182, 188, 191, 193, 197, 198, 200, 202, 219, 223, 227, 228, 231, 239, 240, 256, 259, 279, 283], "script": [3, 5, 6, 11, 31, 66, 187, 239], "cloudpickl": 3, "effect": [3, 6, 10, 20, 26, 30, 49, 51, 58, 75, 83, 85, 89, 94, 101, 122, 124, 136, 144, 172, 182, 193, 197, 200, 204, 206, 223, 276], "pickl": 3, "util": [3, 4, 5, 6, 7, 23, 25, 38, 45, 47, 49, 50, 63, 64, 69, 70, 71, 74, 88, 89, 98, 99, 142, 176, 179, 196, 200, 204, 207, 219, 220, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 264, 269, 270], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 30, 39, 58, 69, 83, 85, 94, 150, 152, 193, 196, 198, 204, 207, 214, 217, 223, 224, 233, 236, 238, 243, 246], "pdf": [3, 7, 8, 29, 38, 39, 49, 59, 61, 63, 80, 85, 94, 98, 101, 102, 106, 193, 201, 206, 207, 210, 216, 219, 220, 223, 227, 245, 252], "view": [3, 6, 8, 11, 28, 40, 41, 58, 94, 101, 174, 177, 191, 193, 200, 207, 223, 226, 240, 242, 245], "host": [3, 7], "onlin": [3, 6, 117, 220, 245], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 28, 40, 124, 241, 274], "reproduc": [3, 203, 238, 284], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 32, 34, 38, 40, 47, 49, 54, 59, 62, 65, 73, 75, 83, 87, 91, 94, 98, 101, 104, 113, 122, 139, 150, 156, 166, 171, 172, 175, 190, 191, 193, 196, 197, 198, 200, 202, 203, 204, 207, 208, 217, 219, 220, 223, 224, 226, 227, 229, 231, 232, 233, 241, 246, 250, 274, 276, 279, 283, 284], "asv": 3, "airspe": 3, "veloc": [3, 112, 113, 116, 117, 119, 124, 125, 126, 129, 130, 131, 133, 136, 137, 139, 146, 174, 177, 181, 182, 186, 188, 191, 259, 261], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 39, 41, 48, 49, 50, 52, 53, 56, 57, 58, 59, 63, 66, 68, 73, 74, 83, 85, 89, 94, 97, 98, 108, 112, 116, 117, 119, 121, 122, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 151, 172, 176, 177, 181, 182, 188, 190, 191, 194, 197, 200, 202, 208, 214, 217, 219, 220, 223, 226, 227, 231, 240, 245, 246, 252, 254, 259, 274], "properli": [4, 11, 20, 39, 58, 64, 70, 83, 94, 118, 122, 134, 149, 153, 156, 170, 195, 197, 207, 223, 226, 236, 240, 246, 280, 285], "current": [4, 7, 10, 12, 18, 23, 24, 32, 35, 38, 39, 40, 41, 42, 49, 52, 53, 55, 56, 57, 58, 60, 64, 66, 68, 70, 73, 78, 81, 83, 85, 87, 89, 94, 98, 100, 101, 105, 112, 116, 122, 132, 166, 171, 172, 176, 180, 191, 193, 194, 195, 196, 198, 200, 203, 204, 206, 207, 208, 214, 217, 219, 220, 222, 223, 224, 225, 226, 227, 233, 238, 239, 240, 242, 256, 270, 280, 285], "updat": [4, 10, 12, 30, 58, 126, 152, 162, 165, 166, 168, 192, 200, 203, 207, 220, 233, 243], "continu": [4, 6, 7, 10, 16, 19, 20, 38, 40, 48, 50, 52, 58, 63, 64, 66, 83, 86, 89, 98, 105, 106, 167, 170, 187, 198, 200, 203, 220, 222, 223, 231, 275], "someon": [4, 223, 242, 277], "warn": [4, 6, 12, 20, 58, 59, 73, 100, 182, 191, 195, 207, 223, 225, 236, 238, 240, 244, 245, 271, 280], "screen": [4, 11, 86, 187, 191, 238, 283], "indic": [4, 6, 12, 15, 18, 25, 27, 38, 39, 40, 41, 42, 47, 49, 50, 51, 53, 54, 56, 57, 58, 61, 62, 63, 66, 68, 73, 74, 83, 85, 88, 89, 91, 94, 97, 98, 109, 121, 126, 156, 167, 169, 170, 172, 177, 181, 182, 192, 196, 197, 198, 202, 203, 204, 207, 214, 215, 216, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 245, 280], "remov": [4, 10, 18, 23, 33, 34, 49, 52, 56, 58, 62, 64, 73, 74, 83, 88, 89, 94, 98, 101, 104, 113, 116, 129, 131, 136, 156, 172, 198, 200, 203, 205, 206, 207, 219, 220, 223, 225, 226, 228, 229, 239, 240, 241, 243, 245, 246, 273, 284], "futur": [4, 12, 18, 19, 40, 41, 58, 83, 85, 89, 94, 100, 116, 121, 124, 132, 136, 172, 176, 189, 193, 195, 206, 207, 219, 223, 232, 238, 241, 243, 246, 269, 279, 285], "chanc": [4, 12, 19, 58, 86, 217, 227, 279], "break": [4, 6, 10, 20, 39, 40, 50, 58, 59, 98, 190, 204, 207, 215, 245], "opportun": [4, 6, 219], "messag": [4, 10, 59, 86, 241, 243], "wrong": [4, 7, 10, 49, 58, 59, 66, 68, 94, 182, 197, 223, 241, 276, 280], "answer": [4, 18, 20, 49, 58, 62, 80, 83, 85, 88, 94, 98, 177, 200, 204, 216, 217, 219, 225, 227, 242, 248, 278, 280, 284], "made": [4, 7, 10, 11, 12, 18, 20, 27, 52, 54, 58, 59, 64, 67, 68, 71, 74, 75, 85, 88, 94, 98, 100, 122, 133, 136, 139, 191, 194, 198, 200, 202, 203, 207, 208, 214, 215, 216, 219, 223, 225, 226, 227, 240, 245, 248, 261, 279], "lightli": 4, "fix": [4, 6, 9, 10, 40, 49, 51, 54, 56, 59, 63, 66, 70, 87, 101, 102, 104, 113, 116, 119, 124, 133, 139, 156, 161, 165, 168, 172, 177, 182, 186, 190, 191, 193, 197, 200, 202, 203, 204, 207, 213, 217, 225, 227, 245, 252, 254], "worth": [4, 18, 20, 182, 257, 259], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 30, 39, 40, 49, 59, 63, 64, 83, 117, 122, 124, 137, 139, 140, 166, 177, 186, 193, 202, 203, 214, 217, 223, 276, 278, 279, 282, 284], "seek": [4, 225], "stabl": [4, 6, 20, 58, 86, 94, 100, 104, 108, 273], "done": [4, 6, 10, 11, 12, 16, 20, 34, 35, 37, 38, 39, 40, 49, 51, 56, 58, 59, 60, 63, 66, 69, 70, 83, 85, 89, 94, 98, 116, 122, 124, 130, 137, 139, 158, 167, 168, 169, 172, 174, 175, 182, 188, 190, 191, 193, 194, 196, 200, 203, 204, 206, 207, 208, 216, 219, 220, 223, 225, 226, 227, 232, 233, 238, 239, 242, 246, 256, 257, 273, 276, 278, 279, 280], "exist": [4, 10, 11, 16, 18, 20, 26, 28, 38, 39, 42, 49, 58, 62, 68, 70, 73, 74, 75, 76, 85, 88, 94, 98, 104, 162, 188, 191, 193, 194, 195, 196, 200, 202, 207, 214, 215, 217, 220, 223, 225, 226, 238, 246, 257, 278, 280, 285], "necessarili": [4, 6, 18, 36, 58, 59, 60, 83, 85, 88, 117, 194, 195, 202, 203, 205, 219, 223, 225, 226], "supplant": 4, "old": [4, 10, 11, 12, 58, 59, 60, 86, 136, 141, 176, 177, 187, 193, 194, 198, 207, 208, 219, 223, 226, 228, 273], "sometim": [4, 6, 7, 11, 12, 18, 20, 39, 40, 58, 63, 66, 82, 83, 108, 132, 136, 164, 172, 191, 194, 197, 202, 207, 209, 214, 216, 220, 223, 225, 236, 245, 273, 280], "alongsid": [4, 10, 20, 91], "newer": [4, 11, 190, 225], "solveset": [4, 20, 26, 28, 139, 205, 221, 222, 225, 264, 285], "superior": [4, 207], "replac": [4, 6, 10, 11, 12, 18, 38, 40, 49, 57, 58, 59, 62, 63, 64, 66, 68, 72, 85, 88, 89, 94, 98, 99, 100, 112, 114, 116, 139, 161, 167, 182, 194, 200, 203, 204, 208, 214, 216, 217, 219, 223, 225, 226, 233, 234, 245, 246, 248, 273, 282], "older": [4, 7, 11, 81, 122, 197, 207, 225], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 40, 42, 54, 57, 58, 66, 71, 83, 85, 89, 90, 94, 101, 103, 104, 116, 117, 118, 122, 125, 126, 129, 131, 132, 134, 136, 139, 175, 196, 200, 204, 205, 206, 207, 209, 219, 220, 222, 223, 224, 227, 269, 274, 275, 278, 280, 283], "remain": [4, 10, 11, 20, 34, 35, 40, 49, 50, 52, 54, 58, 59, 64, 83, 89, 98, 100, 109, 122, 171, 188, 190, 191, 202, 203, 204, 213, 216, 217, 223, 224, 225, 227, 229, 233, 242, 245, 246, 256, 261, 273, 276, 278, 279, 280], "intact": [4, 10, 40, 239], "cogniz": 4, "properti": [4, 11, 15, 20, 34, 35, 38, 39, 40, 41, 42, 46, 47, 49, 50, 51, 52, 53, 57, 58, 59, 60, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 81, 83, 85, 89, 91, 94, 98, 101, 102, 104, 105, 108, 113, 116, 117, 119, 121, 137, 139, 141, 143, 146, 147, 150, 151, 156, 157, 158, 160, 161, 168, 170, 172, 174, 177, 179, 180, 182, 183, 184, 188, 191, 192, 193, 195, 196, 197, 198, 200, 202, 203, 206, 209, 210, 213, 214, 215, 217, 220, 223, 226, 227, 232, 233, 238, 240, 241, 252, 255, 256, 257, 259, 261, 280], "attr": [4, 40], "imposs": [4, 6, 10, 11, 20, 58, 197, 216, 223, 224, 236, 276, 284], "later": [4, 10, 16, 40, 49, 83, 88, 89, 112, 118, 119, 124, 126, 127, 134, 136, 137, 139, 146, 181, 190, 197, 200, 206, 207, 208, 217, 219, 223, 242, 256, 273, 274, 276, 278, 279, 284], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 28, 29, 30, 32, 33, 35, 36, 39, 40, 49, 50, 51, 52, 58, 62, 64, 66, 68, 69, 70, 72, 73, 74, 78, 80, 84, 85, 87, 94, 98, 101, 102, 108, 112, 113, 114, 116, 117, 118, 119, 121, 122, 126, 136, 137, 167, 169, 170, 172, 176, 181, 182, 190, 191, 192, 194, 196, 197, 202, 204, 207, 209, 214, 219, 220, 221, 223, 227, 231, 232, 238, 239, 240, 241, 242, 243, 252, 254, 256, 259, 260, 267, 270, 273, 275, 276, 278, 279, 280, 284], "mark": [4, 6, 7, 106, 145, 157, 220, 236, 241, 243], "explicitli": [4, 10, 11, 18, 20, 40, 49, 50, 58, 59, 61, 64, 66, 71, 75, 91, 94, 99, 108, 122, 181, 182, 193, 195, 197, 198, 200, 203, 207, 219, 223, 225, 243, 276, 280, 283, 285], "privat": [4, 6, 58, 59, 122, 193, 240], "experiment": [4, 219], "With": [4, 12, 19, 30, 40, 57, 58, 62, 83, 98, 125, 126, 127, 133, 135, 136, 145, 169, 172, 191, 193, 194, 195, 197, 198, 205, 206, 207, 214, 219, 228, 245, 278, 279], "being": [4, 7, 10, 11, 12, 14, 18, 19, 36, 38, 40, 49, 50, 56, 57, 58, 59, 63, 64, 66, 68, 70, 71, 74, 75, 83, 88, 89, 94, 95, 98, 101, 102, 104, 112, 121, 122, 124, 136, 137, 139, 140, 168, 177, 184, 188, 190, 191, 192, 193, 194, 196, 197, 202, 203, 204, 206, 207, 216, 217, 219, 220, 223, 224, 225, 226, 227, 233, 236, 238, 242, 243, 245, 246, 248, 252, 257, 261, 278, 280], "decid": [4, 6, 16, 18, 19, 20, 39, 57, 89, 112, 136, 165, 176, 197, 200, 202, 203, 207, 223, 226, 240, 280], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 26, 40, 50, 56, 58, 62, 66, 83, 86, 92, 94, 117, 118, 122, 124, 129, 132, 136, 143, 177, 187, 191, 197, 200, 201, 204, 207, 215, 217, 219, 223, 226, 236, 242, 243, 245, 246, 273, 274, 278, 279, 280], "confus": [4, 7, 10, 11, 18, 24, 58, 63, 88, 145, 191, 195, 203, 226, 273, 274, 276], "unnecessari": [4, 6, 7, 36, 40, 203, 206, 227, 238, 277], "redund": [4, 18, 49, 56, 88, 94, 223, 240], "usabl": [4, 197, 198, 207, 226, 278], "breakag": 4, "serious": 4, "taken": [4, 11, 40, 41, 46, 49, 56, 57, 58, 63, 64, 66, 75, 89, 98, 108, 110, 112, 113, 136, 139, 169, 175, 182, 186, 192, 193, 197, 202, 203, 207, 210, 214, 216, 217, 226, 227, 232, 240, 245, 252], "commun": [4, 7, 30, 192, 223, 225, 227, 280], "inde": [4, 16, 20, 46, 49, 57, 83, 194, 217, 223, 234, 238, 278], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 28, 31, 35, 38, 40, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 71, 72, 74, 85, 94, 98, 99, 101, 102, 106, 108, 109, 112, 113, 116, 117, 122, 126, 129, 131, 132, 133, 135, 137, 143, 145, 146, 149, 153, 158, 161, 166, 167, 169, 170, 175, 177, 179, 181, 182, 183, 190, 191, 193, 196, 197, 200, 201, 202, 203, 207, 209, 217, 219, 220, 223, 225, 226, 227, 228, 229, 245, 246, 252, 255, 256, 257, 269, 273, 278, 279, 280], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 27, 28, 33, 35, 39, 50, 58, 59, 62, 70, 75, 83, 85, 94, 98, 119, 122, 140, 166, 170, 174, 175, 177, 181, 182, 190, 191, 193, 203, 204, 206, 207, 217, 219, 223, 225, 226, 227, 241, 245, 246, 257, 273, 274, 276, 277, 278, 279, 282, 284], "count": [4, 7, 11, 50, 57, 58, 59, 63, 68, 88, 94, 97, 98, 167, 203, 215, 216, 219, 226, 227, 233, 242, 245], "basi": [4, 58, 60, 87, 91, 94, 113, 129, 131, 157, 166, 167, 169, 172, 174, 177, 180, 181, 182, 188, 190, 192, 194, 196, 198, 203, 206, 217, 219, 225, 226, 228, 233, 255, 256, 259, 282], "exact": [4, 10, 11, 12, 18, 20, 26, 36, 57, 58, 59, 62, 68, 73, 80, 83, 85, 89, 94, 101, 139, 166, 197, 198, 200, 203, 214, 219, 223, 225, 238, 248, 276, 278, 283], "rule": [4, 7, 10, 16, 18, 20, 40, 49, 50, 57, 58, 66, 81, 83, 85, 88, 89, 94, 101, 122, 153, 156, 177, 182, 188, 191, 192, 204, 206, 207, 208, 213, 217, 219, 223, 233, 245, 246, 259, 276, 279], "doesn": [4, 6, 10, 12, 20, 40, 82, 122, 126, 136, 139, 191, 195, 204, 206, 216, 219, 226, 285], "constitut": [4, 7, 11, 85, 98, 207], "yet": [4, 5, 12, 18, 20, 33, 35, 38, 39, 62, 85, 136, 152, 194, 197, 198, 202, 204, 206, 215, 223, 226, 274], "fulli": [4, 6, 10, 18, 49, 58, 75, 85, 88, 100, 101, 102, 116, 122, 139, 172, 190, 197, 198, 204, 214, 227, 233, 249], "codifi": 4, "clean": [4, 238], "distinct": [4, 7, 11, 14, 18, 20, 27, 40, 49, 50, 58, 59, 63, 71, 83, 88, 94, 98, 121, 190, 197, 202, 203, 207, 215, 217, 284], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 30, 36, 38, 39, 40, 41, 42, 50, 57, 58, 63, 64, 66, 85, 89, 92, 94, 104, 109, 112, 116, 122, 124, 126, 127, 136, 162, 171, 174, 175, 181, 190, 192, 193, 194, 196, 197, 198, 200, 202, 207, 214, 215, 216, 217, 219, 223, 225, 226, 238, 239, 256, 257, 261, 276, 278, 279, 284], "categor": [4, 94, 194], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 23, 24, 25, 26, 27, 30, 31, 38, 57, 58, 75, 85, 88, 94, 99, 118, 132, 152, 189, 192, 201, 202, 204, 207, 215, 216, 225, 226, 238, 240, 242, 243, 245, 248, 269, 275, 276, 279, 284], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 23, 24, 25, 26, 29, 30, 34, 35, 40, 41, 42, 47, 48, 49, 50, 56, 57, 58, 59, 60, 62, 63, 64, 66, 74, 75, 76, 80, 81, 83, 85, 88, 89, 94, 97, 98, 99, 100, 101, 104, 108, 112, 117, 122, 123, 124, 129, 130, 131, 134, 136, 137, 139, 140, 162, 167, 172, 181, 187, 188, 190, 191, 193, 194, 197, 198, 200, 202, 203, 204, 207, 208, 214, 216, 217, 219, 220, 223, 225, 226, 227, 231, 232, 239, 240, 242, 243, 245, 246, 257, 259, 261, 272, 273, 274, 276, 278, 279, 280, 282, 283, 284], "guidelin": [4, 8, 28, 223], "exhaust": [4, 18, 217, 245, 277], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 30, 32, 39, 49, 50, 57, 58, 59, 60, 62, 64, 66, 68, 70, 73, 74, 82, 83, 85, 88, 89, 94, 97, 98, 104, 108, 109, 121, 122, 124, 126, 130, 140, 172, 174, 177, 178, 188, 190, 194, 195, 197, 198, 200, 202, 203, 207, 208, 209, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 234, 238, 240, 245, 246, 252, 254, 259, 274, 276, 277, 278, 279, 284], "posit": [4, 10, 11, 12, 18, 19, 20, 25, 33, 34, 35, 36, 37, 39, 40, 41, 42, 47, 49, 50, 51, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 68, 70, 71, 74, 83, 85, 87, 88, 89, 90, 94, 95, 97, 98, 101, 102, 104, 108, 110, 116, 119, 122, 124, 126, 129, 131, 133, 136, 137, 139, 141, 144, 146, 150, 167, 170, 172, 183, 184, 186, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 212, 213, 215, 216, 217, 219, 220, 223, 225, 226, 227, 228, 233, 245, 252, 255, 256, 257, 259, 261, 262, 280, 284, 285], "convent": [4, 6, 7, 9, 20, 49, 50, 54, 57, 58, 59, 63, 64, 66, 68, 73, 83, 85, 88, 100, 101, 102, 104, 108, 111, 124, 139, 141, 145, 166, 167, 169, 174, 175, 188, 193, 207, 223, 224, 226, 227, 233, 261, 276, 284], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 28, 31, 32, 34, 35, 38, 40, 41, 42, 48, 49, 50, 53, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 81, 83, 85, 86, 89, 91, 94, 98, 101, 102, 106, 112, 113, 116, 119, 121, 122, 124, 125, 129, 131, 132, 133, 137, 139, 140, 143, 149, 151, 153, 158, 161, 167, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 209, 210, 213, 214, 215, 217, 219, 220, 223, 225, 226, 227, 228, 232, 233, 239, 240, 241, 246, 247, 248, 252, 254, 255, 256, 257, 258, 259, 261, 262, 276, 278, 284], "And": [4, 10, 12, 19, 20, 22, 23, 34, 49, 50, 57, 58, 59, 66, 83, 88, 89, 94, 97, 116, 144, 191, 193, 195, 203, 204, 207, 215, 219, 220, 225, 226, 227, 245, 246, 257, 284], "aren": [4, 10, 11, 20, 40, 58, 122, 206, 226], "don": [4, 10, 12, 19, 20, 35, 40, 83, 88, 94, 99, 100, 112, 122, 181, 190, 191, 197, 207, 217, 226, 236, 241, 261, 273, 274, 278, 279, 284], "form": [4, 7, 10, 11, 16, 18, 20, 26, 32, 35, 36, 37, 38, 40, 41, 48, 49, 50, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 71, 74, 78, 80, 81, 83, 85, 87, 89, 91, 93, 94, 98, 100, 101, 102, 104, 105, 108, 112, 113, 116, 117, 118, 121, 122, 124, 126, 129, 131, 132, 133, 134, 135, 137, 139, 140, 149, 152, 153, 154, 156, 166, 167, 170, 172, 174, 177, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 232, 233, 238, 239, 245, 252, 255, 256, 258, 259, 261, 267, 274, 278, 279, 280, 283, 284, 285], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 32, 36, 40, 41, 48, 49, 54, 58, 59, 62, 64, 66, 83, 85, 94, 98, 100, 105, 106, 108, 116, 122, 155, 166, 169, 172, 175, 182, 187, 191, 193, 194, 195, 197, 198, 202, 203, 207, 214, 215, 219, 220, 223, 225, 226, 228, 229, 232, 233, 242, 246, 248, 249], "intern": [4, 10, 11, 12, 18, 19, 23, 38, 40, 41, 49, 58, 61, 62, 63, 66, 74, 75, 78, 90, 94, 98, 102, 104, 106, 124, 136, 145, 166, 167, 177, 194, 196, 198, 199, 201, 203, 205, 207, 217, 219, 222, 223, 224, 225, 226, 227, 231, 233, 236, 240, 242, 245, 270, 279, 283], "Such": [4, 6, 18, 40, 58, 74, 126, 194, 195, 202, 208, 216, 217, 219, 273, 279], "prefix": [4, 40, 58, 94, 98, 176, 179, 180, 197, 200, 204, 207, 220, 223, 239, 240, 245, 269], "underscor": [4, 6, 10, 58, 94, 223, 233, 241], "_": [4, 6, 7, 10, 12, 14, 16, 20, 34, 35, 39, 46, 47, 49, 50, 51, 54, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 71, 72, 73, 74, 83, 85, 88, 89, 90, 91, 92, 94, 96, 98, 100, 108, 134, 137, 139, 151, 172, 177, 181, 187, 190, 192, 198, 203, 206, 207, 208, 210, 214, 215, 216, 217, 219, 220, 223, 224, 225, 228, 245, 255, 257, 283], "univers": [4, 11, 40, 192, 201, 215, 220, 225, 226], "adher": [4, 7, 83], "codebas": [4, 10, 18, 197, 236], "anyth": [4, 6, 7, 10, 12, 20, 38, 40, 58, 59, 69, 73, 94, 122, 146, 156, 204, 207, 213, 215, 219, 223, 225, 239, 245, 248, 276], "were": [4, 7, 10, 11, 12, 14, 18, 20, 39, 50, 52, 58, 59, 64, 75, 83, 89, 94, 98, 99, 100, 112, 121, 136, 181, 188, 191, 194, 200, 201, 202, 203, 206, 207, 208, 216, 219, 225, 245, 246, 248, 276, 278, 279, 283, 284], "incorrect": [4, 7, 10, 19, 20, 26, 49, 58, 68, 98, 106, 186, 198, 223, 226, 239, 242, 243], "bug": [4, 6, 18, 20, 25, 27, 30, 38, 59, 197, 215, 223, 226, 276], "despit": [4, 28, 58, 284], "sai": [4, 7, 11, 12, 16, 18, 41, 48, 57, 58, 59, 87, 112, 117, 122, 132, 139, 177, 190, 191, 194, 195, 196, 200, 202, 206, 207, 214, 217, 220, 223, 225, 226, 227, 246, 273, 278, 284], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 28, 30, 40, 49, 50, 52, 54, 58, 59, 60, 66, 86, 89, 94, 98, 100, 101, 102, 112, 118, 122, 124, 125, 126, 129, 130, 136, 139, 141, 172, 181, 187, 191, 195, 197, 202, 203, 207, 208, 214, 215, 219, 220, 223, 225, 226, 227, 234, 238, 241, 245, 246, 256, 277, 278, 279, 284], "recent": [4, 10, 12, 15, 18, 19, 20, 23, 25, 26, 27, 28, 33, 34, 35, 40, 41, 50, 58, 59, 62, 66, 68, 85, 88, 89, 90, 91, 92, 94, 96, 97, 100, 108, 192, 194, 197, 198, 200, 203, 206, 214, 215, 223, 225, 226, 236, 239, 241, 243, 245, 246, 248, 276, 280], "best": [4, 8, 12, 25, 26, 29, 30, 40, 58, 66, 83, 85, 99, 171, 193, 204, 207, 216, 217, 219, 223, 226, 231, 239, 272, 276, 277, 283, 284], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 27, 33, 35, 36, 37, 38, 40, 41, 42, 49, 58, 59, 60, 61, 62, 64, 68, 69, 71, 73, 74, 85, 86, 87, 91, 94, 98, 100, 101, 102, 108, 114, 116, 118, 119, 121, 131, 137, 140, 151, 164, 166, 168, 169, 172, 175, 177, 182, 188, 193, 194, 195, 196, 200, 202, 207, 213, 214, 215, 217, 219, 220, 222, 223, 225, 226, 227, 231, 243, 245, 252, 259, 262, 276, 284], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 28, 38, 40, 58, 59, 62, 68, 83, 88, 89, 94, 98, 112, 122, 123, 139, 165, 178, 181, 193, 197, 198, 206, 214, 215, 219, 223, 226, 238, 240, 246, 273, 276, 278, 279, 282], "re": [4, 12, 20, 37, 38, 40, 49, 50, 58, 59, 62, 64, 66, 83, 85, 94, 182, 184, 188, 194, 200, 207, 208, 209, 215, 216, 217, 223, 225, 238, 255, 257, 274, 276, 279], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 24, 26, 27, 28, 33, 34, 35, 36, 37, 40, 41, 46, 49, 50, 57, 58, 59, 62, 63, 64, 66, 70, 74, 83, 85, 88, 89, 94, 97, 98, 109, 122, 132, 157, 168, 175, 177, 182, 192, 195, 196, 197, 198, 200, 202, 203, 204, 207, 208, 215, 216, 217, 219, 220, 223, 225, 226, 234, 238, 261, 273, 274, 276, 278, 279, 284, 285], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 23, 26, 38, 58, 62, 64, 71, 80, 83, 91, 94, 98, 100, 112, 122, 123, 139, 152, 182, 190, 193, 197, 198, 203, 204, 207, 208, 215, 216, 217, 219, 220, 225, 226, 227, 239, 240, 243, 245, 248, 273, 276, 278, 279, 281, 284], "while": [4, 6, 10, 11, 12, 18, 20, 22, 23, 28, 39, 40, 41, 49, 50, 51, 54, 57, 58, 59, 60, 62, 63, 64, 68, 72, 74, 82, 88, 89, 94, 98, 99, 100, 101, 104, 113, 116, 118, 122, 126, 136, 156, 177, 182, 188, 194, 202, 205, 207, 223, 226, 238, 240, 242, 245, 261, 273, 279, 280], "peopl": [4, 6, 61, 66, 85, 94, 177, 227], "upgrad": [4, 31], "immedi": [4, 18, 49, 58, 83, 88, 172, 194, 197, 239, 246], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 24, 40, 47, 49, 55, 57, 58, 62, 64, 82, 83, 85, 94, 98, 108, 122, 136, 190, 191, 200, 203, 214, 220, 223, 225, 226, 231, 239, 245, 276, 283], "question": [4, 6, 7, 16, 18, 57, 60, 68, 75, 83, 85, 88, 98, 112, 174, 177, 181, 194, 197, 202, 217, 226, 245, 248], "read": [4, 6, 7, 9, 10, 20, 28, 50, 64, 83, 98, 102, 139, 190, 191, 196, 197, 198, 204, 207, 220, 233, 234, 242, 249, 277, 283, 284], "previou": [4, 6, 10, 20, 42, 47, 48, 49, 50, 53, 58, 63, 64, 85, 88, 89, 97, 113, 136, 174, 190, 191, 200, 213, 220, 224, 228, 245, 277, 279, 284], "unchang": [4, 10, 11, 20, 49, 50, 58, 85, 94, 108, 203, 207, 213, 216, 219, 226, 273], "dure": [4, 10, 12, 31, 40, 58, 59, 89, 94, 98, 100, 113, 117, 139, 140, 190, 202, 207, 216, 225, 226, 243, 245], "period": [4, 6, 10, 25, 38, 58, 59, 64, 83, 98, 136, 146, 168, 175, 202, 207, 210, 213, 222, 226, 227, 245], "silenc": [4, 236, 243], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 30, 58, 59, 62, 64, 94, 122, 130, 136, 190, 207, 216, 223, 224, 225, 242, 243, 280], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 26, 27, 36, 39, 40, 50, 55, 57, 58, 59, 60, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 83, 85, 91, 94, 98, 101, 102, 113, 119, 133, 161, 177, 179, 182, 186, 190, 191, 193, 195, 197, 198, 200, 202, 203, 204, 207, 208, 214, 215, 217, 223, 225, 226, 227, 239, 240, 246, 252, 256, 257, 261, 273, 276, 278, 279, 284, 285], "over": [4, 7, 8, 10, 12, 15, 20, 24, 29, 32, 38, 39, 40, 41, 49, 50, 53, 57, 58, 59, 60, 61, 62, 63, 72, 74, 81, 83, 87, 88, 91, 94, 95, 98, 101, 102, 110, 116, 122, 139, 140, 151, 167, 170, 172, 176, 177, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 210, 212, 214, 219, 220, 222, 223, 225, 226, 227, 228, 231, 232, 241, 245, 246, 252, 255, 259, 262, 278, 282, 284], "defeat": [4, 223], "three": [4, 11, 12, 14, 16, 18, 20, 27, 32, 36, 40, 49, 50, 51, 54, 58, 59, 63, 66, 68, 72, 73, 74, 83, 87, 88, 89, 101, 102, 116, 121, 125, 128, 129, 130, 145, 167, 169, 174, 182, 186, 190, 191, 192, 193, 194, 195, 198, 200, 203, 207, 217, 219, 220, 225, 226, 227, 238, 252, 254, 259, 262, 276, 279, 284], "natur": [4, 10, 12, 18, 32, 36, 40, 41, 49, 58, 59, 63, 64, 92, 98, 122, 174, 176, 177, 194, 197, 198, 200, 202, 204, 207, 215, 216, 220, 226, 227, 245, 262, 279, 284], "heavili": [4, 214, 224], "consider": [4, 19, 58, 99, 112, 197, 206, 215, 220, 223, 256], "easi": [4, 11, 46, 50, 58, 66, 83, 99, 119, 126, 132, 190, 194, 197, 202, 207, 214, 217, 220, 223, 226, 231, 232, 233, 273, 274, 276, 277, 278, 279, 280, 283], "account": [4, 11, 64, 94, 210, 219, 223], "nonetheless": [4, 59, 174, 219, 223], "deprecat": 4, "won": [4, 12, 20, 40, 219, 226, 279], "until": [4, 16, 18, 23, 24, 25, 26, 27, 31, 50, 52, 58, 59, 68, 85, 94, 98, 136, 191, 200, 203, 216, 223, 276], "come": [4, 30, 49, 54, 56, 57, 58, 64, 66, 83, 85, 94, 99, 112, 122, 124, 134, 175, 191, 194, 197, 200, 202, 203, 217, 220, 223, 226, 236, 238, 243, 246, 276, 278, 279, 282, 284], "minimum": [4, 10, 25, 38, 40, 49, 50, 52, 54, 58, 59, 62, 64, 94, 112, 117, 124, 156, 181, 193, 195, 200, 226, 227, 241, 274], "longer": [4, 6, 12, 17, 58, 68, 98, 126, 136, 195, 200, 207, 216, 219, 245, 248, 276, 284], "especi": [4, 6, 20, 28, 57, 94, 112, 122, 139, 166, 181, 191, 219, 223, 225, 238, 273, 274], "hard": [4, 8, 11, 18, 50, 59, 94, 98, 122, 172, 197, 207, 214, 223, 226, 276, 278], "migrat": 4, "lengthen": 4, "impos": [4, 102], "signific": [4, 12, 18, 40, 58, 59, 62, 85, 94, 112, 137, 166, 197, 226, 246, 279], "mainten": [4, 35], "burden": [4, 207], "keep": [4, 6, 12, 15, 20, 54, 58, 59, 62, 63, 66, 83, 94, 117, 125, 133, 137, 156, 172, 193, 196, 197, 198, 203, 214, 215, 217, 219, 223, 225, 233, 261, 274, 279], "firstli": [4, 10, 18, 20, 217], "regular": [4, 10, 12, 18, 19, 41, 46, 58, 59, 62, 66, 74, 80, 81, 85, 98, 122, 166, 197, 204, 223, 233, 238, 283, 284], "schedul": 4, "Being": [4, 54, 68, 74, 197], "assur": [4, 98, 203], "suffici": [4, 6, 18, 39, 40, 49, 50, 54, 58, 94, 177, 210, 214, 223, 227, 242, 284], "regardless": [4, 6, 10, 20, 50, 58, 85, 98, 200, 215, 219, 245, 256, 261, 284], "often": [4, 6, 11, 18, 19, 20, 26, 39, 40, 41, 48, 58, 66, 68, 70, 83, 85, 94, 98, 99, 108, 132, 136, 181, 190, 191, 194, 195, 197, 200, 203, 208, 214, 215, 220, 223, 227, 245, 273, 278, 279, 280, 284], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 25, 32, 40, 50, 57, 58, 62, 70, 73, 82, 116, 167, 171, 177, 194, 200, 202, 203, 206, 215, 219, 223, 227, 246, 257, 276, 283, 284], "secondli": [4, 20, 217], "rigor": [4, 66, 191, 240], "semant": [4, 11, 18, 91, 225], "surfac": [4, 64, 66, 72, 83, 102, 116, 141, 145, 172, 193, 219, 252], "enough": [4, 6, 23, 25, 49, 58, 62, 85, 94, 97, 98, 108, 122, 139, 198, 200, 207, 223, 274, 276], "encod": [4, 10, 42, 50, 56, 59, 88, 207, 238, 242, 245], "backport": 4, "prior": [4, 10, 30, 186, 203, 219, 280], "extrem": [4, 49, 62, 68, 74, 85, 91, 104, 136, 191, 219, 227], "accur": [4, 10, 12, 16, 20, 38, 49, 58, 62, 63, 80, 85, 105, 193, 214, 273, 280], "model": [4, 11, 62, 88, 98, 108, 118, 124, 126, 127, 128, 144, 203, 216, 227], "final": [4, 6, 7, 10, 18, 20, 39, 50, 57, 58, 64, 66, 83, 85, 88, 94, 98, 102, 106, 116, 117, 124, 129, 131, 132, 134, 137, 152, 164, 167, 169, 170, 172, 174, 175, 177, 182, 190, 191, 194, 197, 200, 202, 209, 215, 216, 217, 219, 220, 223, 225, 226, 233, 245, 246, 277, 278, 279], "temptat": [4, 216, 284], "fudg": 4, "earli": [4, 58, 98, 161, 220], "acceler": [4, 99, 119, 124, 129, 131, 136, 137, 139, 175, 182, 186, 188, 242, 261], "myst": [4, 7], "checkbox": 4, "tag": [4, 207, 225], "nest": [4, 24, 58, 60, 64, 66, 85, 89, 108, 195, 197, 200, 207, 217, 219, 222, 226, 227, 228, 229, 231, 234, 245, 246, 279], "ensur": [4, 12, 20, 23, 24, 25, 27, 30, 58, 59, 62, 90, 94, 116, 137, 202, 203, 207, 238, 243, 246], "realli": [4, 10, 11, 16, 18, 19, 20, 58, 70, 98, 124, 174, 197, 206, 208, 214, 216, 217, 219, 223, 239, 248, 276, 278], "per": [4, 59, 94, 99, 104, 146, 182, 188, 193, 198, 203, 204, 252, 256, 258, 261], "everywher": [4, 11, 12, 58, 66, 83, 108, 188, 261], "doctest": [4, 6, 7, 12, 20, 51, 66, 94, 98, 124, 161, 172, 197, 203, 223, 238, 241, 243, 283], "sympy_deprecation_warn": [4, 236, 241, 243], "write": [4, 8, 10, 11, 16, 18, 19, 21, 31, 40, 47, 58, 59, 65, 66, 83, 85, 91, 139, 152, 190, 191, 195, 200, 202, 207, 216, 217, 220, 223, 226, 232, 238, 239, 240, 246, 277, 278, 279, 284], "multilin": [4, 207], "deprecated_since_vers": [4, 236, 241, 243], "active_deprecations_target": [4, 236, 241, 243], "target": [4, 6, 11, 38, 39, 40, 58, 98, 114, 152, 156, 157, 216, 219, 222, 225, 226, 236, 239, 240, 243, 284], "stacklevel": [4, 236, 241, 243], "line": [4, 6, 10, 11, 12, 16, 18, 30, 39, 40, 49, 50, 54, 59, 68, 69, 70, 72, 73, 74, 75, 80, 83, 85, 86, 87, 94, 98, 101, 106, 109, 122, 124, 130, 152, 182, 187, 188, 190, 192, 193, 207, 210, 217, 219, 223, 227, 228, 236, 238, 239, 240, 243, 246, 248, 259, 262, 270, 276], "visual": [4, 58, 98, 102, 108, 206, 219], "confirm": [4, 10, 49, 98, 223], "look": [4, 6, 7, 10, 12, 18, 19, 20, 31, 39, 40, 49, 58, 63, 64, 66, 79, 94, 98, 117, 122, 124, 132, 156, 166, 167, 170, 186, 193, 197, 198, 202, 207, 209, 210, 214, 217, 219, 220, 223, 224, 238, 242, 246, 248, 257, 274, 279, 282, 283], "good": [4, 7, 11, 18, 20, 24, 28, 40, 58, 59, 62, 70, 83, 94, 98, 124, 136, 139, 194, 197, 198, 207, 214, 216, 217, 219, 223, 245, 273, 277, 280], "top": [4, 6, 7, 10, 11, 23, 40, 57, 58, 59, 74, 75, 85, 88, 94, 101, 102, 116, 121, 167, 174, 197, 207, 217, 223, 240, 241, 246, 262, 279], "relev": [4, 6, 7, 18, 40, 56, 71, 86, 87, 113, 117, 119, 124, 177, 187, 191, 197, 217, 223, 224, 233, 238, 260], "docstr": [4, 8, 10, 12, 20, 23, 39, 40, 51, 58, 80, 83, 85, 94, 98, 103, 107, 109, 115, 132, 137, 142, 159, 165, 166, 168, 185, 189, 203, 210, 213, 214, 216, 219, 223, 224, 225, 226, 232, 233, 238, 241, 246, 248, 253, 260, 263, 267, 269], "src": [4, 6, 7, 100, 223, 238, 243], "explan": [4, 7, 12, 14, 18, 21, 32, 33, 34, 35, 36, 37, 39, 40, 43, 46, 47, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 64, 66, 70, 80, 81, 83, 85, 89, 94, 98, 108, 111, 113, 114, 116, 117, 119, 130, 141, 143, 146, 149, 151, 153, 155, 167, 172, 192, 193, 194, 196, 198, 202, 203, 205, 209, 210, 212, 213, 214, 215, 217, 219, 220, 223, 225, 227, 228, 232, 233, 238, 241, 243, 246, 281], "cross": [4, 7, 8, 11, 58, 68, 74, 89, 94, 101, 102, 116, 130, 137, 139, 152, 182, 184, 190, 191, 220, 226, 252, 256, 258, 259], "xyz": [4, 70, 100, 101, 182, 191, 252, 254, 257], "header": [4, 40, 239, 240], "why": [4, 10, 12, 18, 40, 58, 191, 198, 204, 214, 217, 246, 277, 279, 280], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 23, 24, 35, 36, 38, 39, 40, 45, 49, 50, 57, 58, 59, 65, 68, 73, 83, 89, 91, 94, 98, 152, 161, 165, 166, 167, 175, 191, 197, 198, 200, 202, 204, 215, 217, 220, 223, 224, 225, 226, 236, 239, 240, 241, 242, 243, 245, 246, 248, 263, 264, 271, 276, 278, 279], "warns_deprecated_sympi": [4, 236, 241, 243], "pr": [4, 10, 57, 198, 200, 201, 203, 226], "merg": [4, 40, 49, 50, 58, 180, 207, 215, 227, 238, 245, 246], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 29, 32, 34, 35, 36, 38, 39, 40, 46, 47, 49, 50, 57, 58, 59, 60, 61, 63, 64, 66, 68, 70, 74, 75, 76, 85, 86, 87, 88, 89, 91, 94, 98, 106, 108, 111, 141, 143, 144, 145, 147, 148, 149, 153, 154, 155, 158, 160, 161, 170, 172, 176, 182, 184, 189, 193, 203, 210, 214, 215, 216, 220, 223, 226, 227, 240, 245, 252, 254, 258, 260, 262, 280, 281], "decor": [4, 20, 49, 58, 66, 236, 238, 243, 244, 247, 248, 271], "sympydeprecationwarn": [4, 10, 236, 238, 241, 243], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 25, 28, 29, 32, 33, 34, 35, 36, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 100, 101, 104, 105, 106, 108, 113, 116, 117, 118, 119, 121, 122, 126, 127, 132, 133, 137, 139, 140, 141, 143, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 185, 186, 187, 189, 194, 196, 197, 198, 200, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 217, 219, 223, 224, 225, 226, 227, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 250, 253, 256, 257, 259, 260, 262, 263, 267, 269, 274, 276, 279, 284], "context": [4, 6, 7, 10, 14, 18, 20, 26, 33, 34, 35, 58, 60, 66, 85, 88, 122, 177, 197, 200, 202, 215, 236, 238, 243, 252], "manag": [4, 10, 30, 34, 35, 100, 152, 200, 219, 233, 236, 238, 243], "filter": [4, 10, 15, 25, 58, 59, 83, 144, 203, 236, 238, 243, 245], "emit": [4, 207, 236, 243], "assert": [4, 39, 47, 48, 49, 50, 58, 68, 70, 100, 136, 207, 215, 223, 224, 236, 243, 245], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 23, 27, 39, 46, 58, 59, 64, 66, 83, 85, 94, 109, 116, 121, 136, 137, 140, 145, 169, 172, 181, 182, 193, 195, 198, 200, 203, 204, 207, 216, 219, 220, 223, 224, 226, 231, 236, 238, 242, 246, 248, 252, 276], "block": [4, 6, 10, 28, 40, 47, 49, 59, 89, 94, 116, 121, 122, 124, 127, 182, 191, 196, 220, 246, 256], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 40, 58, 60, 66, 85, 92, 110, 136, 168, 169, 193, 207, 279, 283], "ignore_warn": [4, 236, 241, 243, 246], "prevent": [4, 12, 25, 28, 40, 58, 64, 95, 98, 112, 196, 198, 203, 207, 219, 227, 236, 243, 275], "trigger": [4, 20, 50, 100, 172, 236], "twice": [4, 12, 40, 58, 60, 72, 98, 182, 184, 190, 203, 207, 242, 243, 252, 254, 274], "similar": [4, 5, 10, 12, 16, 18, 20, 50, 57, 58, 59, 62, 63, 64, 66, 69, 74, 75, 79, 88, 94, 99, 108, 122, 124, 126, 136, 137, 170, 188, 190, 191, 195, 197, 198, 200, 204, 214, 216, 217, 219, 223, 225, 228, 233, 236, 239, 242, 243, 252, 254, 256, 257, 261, 273, 278, 279, 280, 282, 284], "somewher": [4, 6, 7, 11, 40], "sign": [4, 6, 7, 11, 25, 28, 32, 37, 40, 54, 58, 59, 63, 64, 68, 74, 83, 85, 94, 98, 101, 102, 104, 108, 124, 145, 157, 182, 188, 190, 192, 200, 207, 212, 214, 219, 220, 225, 245, 259, 262, 277], "readi": [4, 18, 121, 197, 207, 223], "paragraph": [4, 6, 7, 20, 39], "metadata": [4, 39, 241, 243], "link": [4, 6, 7, 11, 12, 22, 40, 59, 68, 74, 85, 109, 116, 125, 133, 239, 242, 243, 282], "rememb": [4, 6, 12, 20, 88, 94, 109, 112, 139, 190, 191, 207, 219, 225, 228, 246, 279, 284], "shown": [4, 6, 10, 11, 18, 19, 20, 47, 50, 57, 58, 62, 64, 66, 83, 100, 102, 106, 108, 112, 117, 119, 125, 126, 127, 133, 134, 135, 137, 181, 182, 190, 191, 193, 196, 197, 198, 203, 207, 223, 227, 243, 245, 256, 257, 277], "plain": [4, 6, 18, 66, 86, 187, 203, 207], "rst": [4, 6, 7, 11, 41, 223, 238], "markdown": [4, 8, 11], "markup": [4, 207], "clearli": [4, 6, 20, 98, 191, 197, 217, 280], "delin": 4, "newlin": [4, 94, 248], "charact": [4, 6, 7, 58, 59, 83, 86, 100, 152, 182, 187, 207, 223, 238, 240, 243, 248, 276, 278, 283], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 24, 29, 36, 38, 40, 49, 50, 58, 62, 66, 70, 71, 85, 91, 94, 100, 134, 135, 182, 197, 200, 201, 203, 207, 209, 219, 220, 278, 281, 284], "abc": [4, 6, 12, 14, 15, 20, 23, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 47, 49, 51, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 81, 82, 83, 85, 86, 88, 89, 91, 94, 97, 99, 106, 108, 110, 143, 145, 147, 148, 153, 170, 172, 173, 194, 196, 198, 200, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 234, 239, 240, 241, 242, 243, 245, 246, 248, 252, 255, 256, 257, 262, 264, 276, 279, 283], "func": [4, 6, 11, 17, 20, 34, 38, 40, 58, 60, 63, 66, 77, 79, 85, 98, 161, 182, 200, 203, 207, 208, 219, 223, 224, 225, 236, 241, 243, 245, 246, 248, 251], "larger": [4, 7, 11, 20, 40, 49, 50, 57, 58, 59, 66, 83, 91, 94, 98, 126, 130, 198, 204, 208, 214, 219, 225, 240, 242, 276, 284], "easier": [4, 11, 19, 27, 58, 102, 122, 124, 190, 198, 202, 204, 217, 223, 226, 240, 246, 256, 278, 284, 285], "exactli": [4, 6, 7, 10, 11, 12, 20, 28, 36, 42, 49, 58, 61, 62, 94, 100, 137, 192, 217, 219, 223, 226, 228, 242, 245, 246, 274, 276, 278, 283, 284], "direct": [4, 6, 7, 10, 11, 17, 32, 34, 35, 39, 43, 46, 49, 54, 57, 58, 60, 62, 64, 67, 71, 72, 73, 74, 88, 89, 94, 101, 102, 104, 112, 113, 116, 124, 126, 130, 139, 158, 182, 188, 190, 191, 194, 196, 197, 200, 204, 214, 217, 233, 236, 245, 252, 257, 258, 261], "syntax": [4, 6, 7, 10, 11, 12, 20, 33, 35, 50, 58, 85, 100, 122, 139, 169, 193, 197, 206, 207, 219, 225, 229, 248, 274, 276, 278, 283, 285], "paramet": [4, 7, 10, 11, 12, 26, 27, 32, 33, 35, 38, 40, 41, 49, 50, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 81, 83, 85, 86, 88, 89, 91, 94, 95, 97, 98, 100, 101, 104, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 122, 124, 139, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 182, 183, 184, 186, 187, 188, 191, 192, 193, 195, 196, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 222, 223, 224, 225, 227, 228, 229, 232, 233, 236, 238, 239, 240, 242, 243, 245, 246, 252, 254, 255, 256, 257, 262, 274, 279], "short": [4, 7, 12, 31, 41, 48, 50, 54, 58, 59, 60, 61, 64, 92, 98, 112, 158, 177, 181, 191, 194, 201, 228, 238, 248, 279, 283], "renam": [4, 40, 85], "rest": [4, 10, 83, 86, 88, 92, 102, 110, 122, 126, 132, 177, 194, 197, 227, 245, 276, 277, 284], "left": [4, 7, 10, 16, 18, 20, 22, 23, 38, 40, 41, 49, 50, 54, 58, 59, 60, 63, 64, 66, 74, 75, 81, 83, 85, 86, 88, 89, 94, 97, 98, 108, 113, 121, 137, 144, 151, 156, 160, 161, 164, 169, 182, 188, 192, 193, 194, 196, 203, 204, 205, 206, 207, 209, 210, 214, 215, 216, 217, 219, 223, 224, 225, 226, 227, 238, 239, 240, 242, 245, 259, 274, 278, 280, 284], "imaginari": [4, 6, 12, 18, 20, 25, 26, 32, 36, 37, 58, 62, 64, 66, 89, 139, 197, 198, 203, 207, 208, 215, 219, 226], "simplify_thi": [4, 6, 241], "expr": [4, 6, 11, 12, 18, 20, 25, 26, 28, 34, 35, 37, 38, 40, 50, 57, 60, 62, 64, 66, 68, 80, 83, 85, 88, 91, 94, 99, 100, 108, 112, 114, 122, 136, 149, 153, 155, 157, 161, 164, 167, 169, 170, 172, 179, 182, 184, 187, 193, 195, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 216, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 239, 240, 241, 243, 246, 252, 254, 255, 256, 257, 259, 273, 274, 276, 278, 279, 283, 284, 285], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 26, 33, 35, 37, 38, 57, 58, 60, 62, 63, 64, 66, 70, 75, 80, 83, 85, 88, 89, 90, 91, 94, 101, 108, 109, 114, 116, 118, 125, 126, 129, 130, 131, 136, 144, 151, 156, 171, 172, 179, 182, 188, 194, 202, 204, 206, 208, 213, 215, 216, 217, 220, 223, 224, 225, 226, 227, 241, 243, 246, 256, 258, 264, 273, 275, 276, 278, 279, 280], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 34, 35, 39, 58, 63, 70, 88, 94, 98, 100, 130, 167, 197, 203, 207, 216, 219, 226, 241, 243, 245, 246, 249, 273, 276, 279, 280, 284], "ref": [4, 49, 64, 94, 106, 139, 212, 227, 241, 280], "is_this_zero": [4, 243], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 40, 41, 49, 50, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 83, 85, 86, 87, 88, 89, 90, 91, 94, 98, 99, 100, 101, 102, 104, 106, 108, 113, 114, 116, 119, 122, 124, 125, 126, 127, 129, 130, 131, 133, 137, 139, 140, 149, 150, 153, 156, 161, 167, 169, 170, 172, 173, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 239, 240, 243, 245, 246, 248, 252, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 283, 284, 285], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 113, 114, 116, 117, 119, 122, 124, 125, 126, 127, 129, 131, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 148, 151, 156, 157, 158, 161, 166, 167, 168, 169, 170, 171, 172, 173, 177, 179, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 241, 242, 243, 245, 246, 247, 252, 254, 255, 256, 257, 258, 259, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "zero": [4, 11, 12, 14, 18, 19, 20, 26, 32, 36, 37, 40, 48, 49, 50, 54, 57, 58, 61, 62, 63, 64, 66, 68, 72, 73, 74, 83, 85, 87, 88, 89, 91, 93, 94, 97, 98, 100, 101, 108, 116, 119, 122, 124, 127, 130, 133, 134, 135, 139, 144, 166, 170, 172, 174, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 202, 203, 205, 207, 210, 214, 215, 217, 219, 220, 223, 224, 225, 226, 227, 228, 243, 245, 246, 256, 258, 259, 279, 285], "is_zero": [4, 18, 20, 73, 94, 194, 198, 203, 243, 280], "mail": [4, 10, 23, 24, 25, 26, 27, 30, 207, 277], "summar": [4, 238, 284], "idea": [4, 11, 18, 19, 20, 43, 49, 56, 58, 59, 70, 76, 83, 85, 98, 109, 122, 172, 176, 177, 194, 196, 197, 216, 219, 220, 223, 226, 240, 246, 284], "fit": [4, 11, 39, 83, 94, 97, 98, 191, 207, 223, 248, 279], "put": [4, 6, 10, 11, 12, 16, 20, 23, 40, 54, 55, 58, 59, 60, 64, 88, 89, 94, 144, 149, 153, 168, 169, 203, 207, 208, 216, 217, 219, 223, 228, 234, 239, 280, 284], "word": [4, 7, 11, 20, 36, 54, 57, 58, 59, 64, 66, 88, 108, 117, 122, 137, 194, 197, 202, 219, 220, 223, 225, 240, 252, 257, 276], "global": [4, 6, 10, 33, 34, 35, 38, 40, 41, 58, 70, 83, 100, 156, 162, 182, 184, 193, 194, 197, 198, 200, 207, 220, 223, 224, 227, 238, 240, 241, 246, 255], "uniqu": [4, 10, 11, 38, 39, 41, 49, 52, 54, 58, 59, 60, 63, 66, 73, 76, 81, 85, 87, 88, 94, 98, 116, 161, 170, 182, 191, 194, 195, 197, 200, 202, 203, 208, 212, 219, 220, 223, 225, 226, 227, 231, 240, 245, 248, 256, 261, 276, 279], "across": [4, 7, 49, 56, 58, 69, 85, 102, 171, 172, 179, 193, 207, 242, 244, 245, 246, 282], "level": [4, 6, 7, 10, 11, 12, 18, 19, 23, 25, 40, 49, 56, 58, 64, 66, 85, 88, 94, 98, 112, 126, 139, 167, 172, 177, 181, 184, 191, 193, 196, 197, 205, 207, 216, 220, 226, 227, 231, 239, 240, 245, 279, 280, 282], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 24, 38, 39, 40, 41, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 64, 68, 69, 71, 72, 73, 74, 81, 83, 87, 88, 89, 94, 97, 98, 101, 102, 108, 114, 116, 117, 121, 122, 124, 126, 140, 144, 148, 162, 166, 167, 169, 173, 174, 177, 182, 186, 188, 192, 193, 195, 196, 197, 198, 200, 202, 203, 207, 213, 214, 217, 219, 220, 223, 224, 225, 226, 227, 229, 231, 232, 233, 240, 241, 242, 243, 245, 246, 248, 252, 254, 256, 257, 259, 261, 279, 285], "share": [4, 18, 20, 59, 98, 198, 202, 207, 227, 240], "__init__": [4, 6, 20, 58, 117, 202, 252, 254, 279], "func_nam": [4, 40, 64, 89, 248], "help": [4, 5, 6, 7, 18, 25, 31, 40, 48, 58, 66, 83, 85, 94, 98, 99, 101, 106, 122, 139, 147, 157, 191, 193, 202, 204, 207, 216, 217, 220, 223, 224, 227, 238, 239, 240, 246, 269, 277, 280], "rais": [4, 10, 12, 14, 18, 19, 20, 33, 35, 38, 40, 47, 50, 58, 59, 60, 62, 64, 67, 68, 71, 73, 74, 75, 83, 85, 89, 91, 94, 95, 97, 98, 106, 108, 146, 158, 188, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 209, 215, 219, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 240, 243, 245, 246, 248, 249, 259, 280], "been": [4, 12, 18, 20, 38, 40, 41, 49, 50, 51, 54, 57, 58, 59, 64, 70, 83, 85, 94, 98, 99, 100, 117, 122, 124, 132, 136, 137, 145, 157, 167, 169, 177, 181, 188, 189, 190, 191, 194, 197, 198, 202, 204, 205, 207, 209, 214, 217, 219, 224, 225, 226, 228, 237, 238, 240, 241, 243, 245, 248, 256, 259, 276, 277, 279, 280, 284], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 36, 39, 41, 48, 49, 50, 56, 58, 59, 63, 64, 74, 81, 87, 89, 91, 94, 109, 111, 116, 117, 137, 156, 158, 161, 177, 194, 195, 196, 200, 201, 202, 203, 207, 216, 219, 223, 226, 231, 233, 238, 245, 246, 248, 257, 276, 280, 284], "much": [4, 6, 10, 16, 18, 19, 20, 26, 39, 40, 43, 54, 62, 66, 80, 83, 85, 136, 180, 181, 190, 191, 192, 194, 197, 200, 203, 214, 217, 219, 223, 224, 225, 226, 240, 242, 276, 278, 284], "trivial": [4, 41, 49, 54, 57, 58, 59, 64, 73, 88, 91, 94, 98, 134, 172, 194, 195, 200, 203, 217, 220, 223, 226, 231], "furthermor": [4, 10, 20, 36, 58, 59, 88, 202, 216, 276, 278, 279], "particular": [4, 6, 10, 11, 12, 18, 19, 22, 24, 36, 41, 49, 58, 59, 62, 66, 69, 83, 85, 88, 91, 94, 98, 101, 104, 132, 156, 167, 195, 196, 197, 198, 200, 202, 203, 213, 215, 217, 219, 220, 223, 225, 226, 238, 240, 242, 280, 282, 284], "expr1": [4, 18, 108, 193, 225, 279], "expr2": [4, 18, 108, 193, 279], "dozen": [4, 11, 20, 284], "search": [4, 6, 38, 49, 50, 54, 56, 58, 64, 94, 98, 122, 194, 202, 203, 207, 216, 217, 219, 224, 227, 239], "upcom": 4, "bot": 4, "push": [5, 83], "respect": [5, 6, 10, 11, 12, 20, 33, 35, 36, 38, 39, 40, 41, 48, 49, 50, 53, 54, 56, 57, 58, 60, 63, 64, 66, 68, 70, 74, 75, 80, 81, 83, 85, 88, 89, 91, 94, 98, 100, 101, 102, 104, 108, 113, 114, 116, 119, 126, 133, 135, 137, 139, 146, 161, 174, 175, 176, 181, 182, 186, 188, 191, 192, 193, 194, 197, 200, 202, 203, 204, 207, 209, 210, 213, 215, 219, 223, 224, 225, 226, 227, 228, 232, 233, 238, 240, 252, 254, 255, 256, 257, 258, 259, 260, 261, 274, 284], "handbook": [5, 6, 41, 48, 49, 56, 66, 98], "internet": 5, "practic": [5, 8, 16, 18, 24, 26, 28, 47, 49, 59, 68, 133, 136, 139, 193, 194, 195, 197, 202, 204, 231, 276, 277], "project": [5, 7, 10, 40, 71, 72, 73, 87, 94, 138, 239, 240, 252], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 39, 40, 49, 55, 58, 59, 85, 94, 122, 139, 177, 181, 191, 197, 200, 204, 206, 207, 214, 223, 226, 232, 242, 244, 246, 256, 257, 274, 284], "nn": 5, "brows": 5, "clone": [5, 30, 200], "download": [5, 7, 30, 39, 80, 201, 216, 223, 227, 252, 278], "origin": [5, 11, 12, 16, 18, 24, 30, 32, 49, 50, 51, 54, 57, 58, 59, 62, 63, 64, 66, 67, 69, 71, 73, 83, 85, 89, 94, 98, 106, 108, 109, 116, 126, 136, 139, 164, 167, 177, 183, 188, 193, 194, 198, 202, 203, 206, 207, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 233, 238, 245, 246, 252, 255, 256, 257, 258, 259, 261, 262, 284], "77": [5, 47, 66, 94, 98, 206, 207, 240], "mib": 5, "remot": [5, 58], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 38, 58, 63, 64, 65, 66, 204, 217, 226, 279, 284], "checkout": [5, 39], "advantag": [5, 10, 14, 18, 20, 35, 38, 40, 58, 59, 63, 85, 88, 94, 98, 105, 176, 196, 197, 204, 215, 220, 223, 226, 242, 276, 278, 280, 284], "isol": [5, 38, 64, 198, 202, 203, 204, 225, 240], "wide": [5, 18, 86, 94, 139, 187, 197, 203, 207, 227], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 58, 194, 197, 220, 246, 257, 273, 279, 284], "consult": [5, 41], "kwarg": [5, 12, 34, 35, 36, 40, 49, 50, 57, 58, 59, 60, 64, 66, 68, 69, 71, 72, 73, 74, 75, 80, 83, 85, 89, 90, 91, 92, 94, 96, 97, 106, 108, 114, 117, 126, 141, 150, 152, 156, 157, 161, 163, 165, 166, 168, 169, 170, 182, 186, 187, 193, 196, 198, 203, 207, 209, 213, 214, 215, 219, 223, 224, 225, 227, 228, 233, 238, 239, 241, 248, 257], "test_bas": [5, 238], "similari": 5, "qualiti": [5, 99, 207], "code_qu": 5, "liter": [6, 12, 20, 40, 48, 58, 86, 88, 100, 172, 179, 219], "occur": [6, 10, 11, 12, 49, 50, 58, 62, 66, 75, 83, 89, 100, 112, 116, 136, 181, 182, 190, 202, 210, 219, 224, 225, 228, 238, 245, 279], "definit": [6, 10, 11, 12, 19, 32, 36, 40, 41, 49, 50, 55, 57, 58, 60, 61, 63, 64, 66, 71, 74, 81, 83, 85, 89, 90, 91, 94, 98, 100, 116, 124, 129, 130, 137, 174, 177, 180, 182, 190, 191, 194, 195, 198, 203, 204, 207, 214, 227, 228, 239, 240, 241, 245, 246, 252, 256, 257, 258, 259, 274, 284], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 34, 35, 39, 40, 49, 50, 58, 66, 67, 68, 71, 72, 73, 74, 91, 94, 100, 102, 108, 113, 116, 117, 118, 119, 121, 129, 137, 140, 161, 166, 170, 177, 181, 182, 188, 191, 193, 194, 197, 198, 202, 207, 215, 219, 220, 232, 233, 239, 241, 245, 246, 249, 256, 279], "fdiff": [6, 20, 40, 58, 64, 65, 66], "self": [6, 18, 20, 32, 34, 35, 39, 40, 49, 50, 55, 57, 58, 60, 64, 67, 68, 69, 71, 72, 73, 74, 85, 89, 94, 98, 113, 124, 167, 172, 182, 184, 186, 194, 196, 198, 200, 202, 203, 207, 209, 214, 215, 233, 252], "argindex": [6, 20, 40, 58, 64, 65, 66], "heavisid": [6, 66, 83, 85, 207], "diff": [6, 10, 11, 16, 20, 25, 38, 40, 58, 63, 64, 65, 66, 75, 80, 91, 94, 112, 114, 125, 126, 139, 170, 182, 184, 187, 188, 191, 193, 198, 203, 206, 207, 217, 223, 224, 225, 228, 229, 234, 256, 259, 274, 278, 285], "diracdelta": [6, 66, 85, 167, 172, 207], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 29, 38, 40, 50, 52, 57, 58, 59, 60, 64, 65, 68, 69, 73, 83, 85, 87, 94, 98, 100, 113, 116, 117, 119, 122, 126, 133, 139, 171, 172, 175, 177, 182, 190, 191, 198, 200, 203, 206, 207, 208, 214, 216, 217, 219, 220, 223, 225, 232, 236, 238, 240, 241, 246, 256, 257, 262, 274, 276, 277, 279, 283, 284], "scope": [6, 40, 132, 136, 236, 284], "high": [6, 7, 12, 16, 18, 25, 40, 58, 62, 63, 86, 98, 139, 187, 197, 202, 205, 207, 220, 225, 269, 280], "od": [6, 11, 20, 81, 117, 121, 132, 139, 221, 224, 264, 285], "seen": [6, 16, 18, 32, 50, 83, 85, 100, 104, 116, 121, 133, 177, 190, 194, 197, 200, 203, 223, 226, 243, 245, 256, 276, 279, 283], "hand": [6, 10, 16, 18, 20, 23, 39, 40, 50, 51, 58, 64, 66, 85, 88, 89, 94, 98, 101, 117, 121, 122, 136, 140, 144, 161, 164, 182, 188, 191, 192, 194, 197, 198, 200, 202, 205, 217, 226, 238, 240, 242, 246, 249, 259, 261, 278], "less": [6, 7, 10, 11, 16, 24, 36, 40, 41, 49, 50, 57, 58, 59, 62, 63, 64, 66, 72, 73, 74, 89, 94, 98, 106, 108, 122, 124, 172, 197, 200, 202, 203, 216, 217, 219, 220, 223, 225, 226, 227, 238, 240], "understand": [6, 12, 18, 19, 20, 28, 58, 59, 83, 122, 132, 134, 135, 139, 177, 190, 193, 196, 197, 202, 207, 217, 220, 239, 246, 275, 276, 283, 284], "clear": [6, 10, 18, 34, 48, 58, 83, 87, 113, 190, 191, 193, 198, 200, 203, 217, 225, 226, 233, 238, 242, 261, 276], "begin": [6, 10, 12, 18, 20, 22, 58, 59, 63, 64, 66, 83, 89, 91, 94, 98, 126, 134, 135, 136, 137, 168, 177, 182, 191, 192, 196, 207, 217, 220, 223, 224, 226, 227, 238, 248, 276, 278, 280, 284], "convers": [6, 7, 10, 18, 24, 40, 58, 78, 100, 136, 176, 195, 196, 197, 198, 200, 202, 204, 207, 220, 232, 239, 252], "aim": [6, 7, 76, 83, 177, 194, 217, 223, 226, 277, 278], "comment": [6, 7, 40, 49, 122, 124, 204, 207, 240, 245], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 25, 32, 38, 41, 54, 58, 59, 61, 62, 63, 64, 72, 85, 87, 88, 94, 98, 100, 105, 106, 108, 112, 116, 118, 121, 122, 124, 125, 126, 136, 139, 140, 145, 168, 182, 184, 186, 197, 198, 200, 203, 204, 205, 206, 207, 208, 215, 219, 220, 223, 225, 227, 229, 239, 240, 242, 243, 245, 246, 248, 273, 279, 280, 284], "consum": [6, 40, 66, 118, 136], "human": [6, 14, 83, 174, 203, 207], "beings": 6, "english": [6, 59], "likewis": [6, 18, 39, 101, 125, 126], "reader": [6, 7, 20, 39, 41, 137, 194, 207, 242, 277, 282], "machineri": [6, 58, 202, 246], "mind": [6, 12, 15, 18, 25, 58, 94, 137, 193, 214, 215, 261, 279], "platform": [6, 58, 172, 191, 223, 239], "anyon": [6, 7, 10, 29, 203, 207, 272, 282, 283], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 24, 36, 40, 49, 50, 58, 59, 63, 70, 83, 85, 94, 98, 139, 180, 187, 193, 195, 198, 200, 202, 203, 204, 207, 214, 216, 220, 222, 223, 226, 227, 228, 240, 242, 276, 278], "concis": [6, 139], "quick": [6, 7, 20, 58, 94, 98, 219, 225, 246], "depth": [6, 7, 9, 12, 13, 29, 49, 58, 124, 193, 194, 207], "tripl": [6, 24, 75, 94, 191, 192, 194, 202, 248], "quot": [6, 12, 40, 88, 207, 248], "raw": [6, 7, 40, 58, 59, 64, 99, 100, 166, 171, 197, 198, 203, 215, 219, 283], "backslash": [6, 58, 207], "blank": [6, 100, 118, 193], "close": [6, 11, 26, 40, 57, 58, 62, 63, 66, 74, 76, 83, 85, 87, 108, 125, 193, 194, 195, 201, 202, 215, 225, 226, 240, 274, 284], "rare": [6, 20, 58, 223, 227, 236, 276], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 34, 35, 40, 58, 60, 66, 88, 139, 166, 177, 182, 191, 194, 199, 202, 203, 204, 214, 227, 256, 273, 276, 279], "consist": [6, 7, 10, 11, 16, 18, 23, 25, 27, 39, 49, 50, 54, 58, 59, 63, 64, 66, 68, 74, 76, 83, 88, 101, 104, 116, 133, 137, 146, 166, 172, 177, 180, 186, 193, 195, 197, 198, 200, 215, 223, 225, 226, 227, 231, 236, 239, 240, 245, 277, 279], "review": [6, 7, 138], "head": [6, 15, 39, 58, 225, 227, 233, 248, 279], "plural": [6, 7], "length": [6, 10, 40, 42, 48, 49, 50, 52, 56, 58, 59, 61, 63, 64, 66, 67, 71, 73, 74, 75, 88, 89, 94, 97, 98, 101, 102, 112, 117, 121, 125, 126, 127, 137, 141, 145, 169, 174, 175, 177, 182, 186, 191, 202, 203, 207, 213, 217, 219, 223, 227, 238, 239, 245, 248, 252, 254, 262], "equal": [6, 10, 11, 14, 18, 19, 20, 28, 32, 36, 39, 40, 41, 47, 48, 49, 50, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 71, 72, 73, 74, 75, 77, 83, 88, 89, 91, 94, 98, 101, 104, 108, 109, 113, 117, 119, 124, 134, 135, 156, 157, 172, 177, 182, 186, 191, 194, 195, 196, 197, 198, 200, 202, 203, 205, 207, 213, 215, 217, 220, 223, 224, 225, 226, 227, 233, 238, 239, 240, 245, 248, 252, 257, 262, 274, 277, 285], "clutter": 6, "harder": [6, 10, 18, 58, 83, 197, 238], "minim": [6, 18, 20, 38, 49, 50, 54, 57, 58, 59, 83, 85, 88, 98, 113, 126, 141, 196, 197, 198, 200, 203, 206, 216, 219, 220, 225, 245, 249], "amount": [6, 39, 58, 59, 70, 116, 132, 182, 188, 191, 200, 210, 238, 252, 254], "deprec": [6, 8, 13, 23, 33, 50, 58, 71, 85, 89, 111, 116, 136, 203, 207, 227, 233, 236, 237, 241, 243, 246, 250], "notifi": 6, "awai": [6, 39, 41, 59, 101, 102, 104, 124, 202, 207], "encourag": [6, 10, 39, 134, 135, 202], "label": [6, 39, 40, 52, 58, 68, 81, 85, 104, 145, 152, 156, 161, 170, 172, 193, 207, 208, 210, 219, 232, 233, 283], "elabor": [6, 21, 188, 259], "suffic": [6, 195, 225], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 26, 40, 49, 57, 59, 60, 62, 63, 64, 66, 83, 85, 91, 132, 134, 172, 191, 197, 200, 204, 206, 217, 219, 226, 227, 231, 232, 240, 242, 246, 248, 274, 276, 279, 280], "demonstr": [6, 7, 12, 18, 20, 25, 26, 49, 50, 58, 85, 98, 113, 116, 122, 126, 127, 136, 194, 197, 258, 284], "api": [6, 7, 10, 18, 21, 24, 40, 58, 70, 78, 99, 100, 107, 132, 139, 168, 181, 189, 193, 200, 220, 222, 246, 249, 256, 257, 260, 267, 269, 270, 277, 278, 281], "simpl": [6, 11, 12, 16, 18, 20, 26, 30, 39, 40, 49, 57, 58, 62, 66, 70, 74, 76, 83, 85, 87, 94, 98, 99, 101, 102, 108, 109, 112, 116, 117, 119, 121, 124, 126, 127, 129, 131, 132, 136, 140, 146, 160, 161, 169, 170, 171, 182, 190, 191, 197, 198, 199, 203, 204, 207, 209, 214, 216, 217, 219, 220, 223, 226, 233, 239, 240, 245, 249, 251, 252, 254, 255, 259, 273, 276, 279, 280, 284], "too": [6, 12, 20, 28, 49, 50, 58, 64, 66, 68, 71, 73, 83, 88, 97, 98, 99, 134, 141, 214, 215, 219, 220, 223, 225, 226, 227, 238, 239, 255, 256], "thought": [6, 11, 58, 214, 223, 276, 279], "perfect": [6, 20, 49, 58, 98, 220, 226, 278, 279], "tell": [6, 7, 18, 19, 25, 40, 50, 59, 62, 66, 89, 100, 121, 177, 197, 202, 206, 214, 217, 223, 239, 276], "think": [6, 10, 11, 18, 19, 20, 25, 30, 38, 49, 124, 177, 242, 246, 276, 284], "test_": [6, 238], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 223, 224, 225, 274, 278, 285], "co": [6, 10, 12, 20, 22, 23, 25, 26, 27, 28, 32, 38, 40, 57, 58, 60, 62, 63, 64, 66, 67, 68, 71, 72, 74, 76, 80, 81, 82, 83, 85, 89, 94, 98, 100, 113, 114, 116, 122, 124, 125, 127, 129, 130, 131, 136, 139, 144, 146, 182, 184, 186, 188, 190, 191, 192, 193, 197, 200, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 217, 219, 223, 225, 226, 227, 228, 234, 246, 252, 254, 255, 256, 257, 262, 273, 274, 276, 278, 284, 285], "sin": [6, 7, 10, 11, 12, 18, 20, 22, 25, 26, 28, 30, 32, 38, 40, 57, 58, 60, 62, 63, 64, 66, 67, 68, 72, 76, 77, 80, 81, 82, 83, 85, 86, 89, 94, 99, 100, 110, 113, 114, 116, 121, 122, 124, 125, 127, 129, 130, 131, 136, 139, 144, 146, 170, 182, 184, 186, 188, 190, 191, 192, 193, 195, 197, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 217, 219, 222, 223, 225, 226, 228, 234, 240, 246, 252, 254, 255, 256, 257, 262, 273, 274, 276, 278, 279, 284, 285], "hint": [6, 20, 39, 42, 49, 58, 61, 64, 85, 89, 94, 98, 108, 139, 149, 153, 169, 171, 172, 182, 203, 214, 217, 225, 284], "1st_exact": [6, 223], "eq": [6, 11, 12, 14, 18, 20, 23, 24, 28, 36, 38, 40, 58, 63, 64, 66, 68, 71, 75, 83, 88, 175, 193, 194, 198, 203, 205, 207, 209, 213, 215, 216, 219, 220, 222, 223, 224, 225, 226, 227, 239, 240, 246, 252, 276, 278, 285], "c1": [6, 16, 59, 68, 75, 89, 91, 116, 158, 172, 215, 220, 223, 225, 258, 285], "comma": [6, 7, 12, 40, 58, 207, 246, 276], "readabl": [6, 31, 39, 86, 112, 203, 206, 207, 214, 216, 249], "accept": [6, 11, 20, 23, 28, 39, 40, 49, 58, 64, 72, 85, 88, 89, 91, 94, 97, 100, 122, 166, 182, 187, 193, 202, 203, 206, 207, 208, 215, 217, 219, 225, 239, 246, 252, 254, 257, 280], "rang": [6, 10, 11, 16, 20, 24, 25, 38, 40, 47, 48, 49, 50, 52, 54, 58, 59, 63, 64, 66, 72, 89, 94, 98, 102, 106, 110, 141, 172, 193, 197, 198, 199, 200, 202, 203, 204, 209, 210, 213, 215, 216, 219, 223, 226, 227, 228, 232, 238, 245, 273, 284], "30": [6, 32, 38, 40, 44, 58, 59, 61, 62, 63, 66, 72, 74, 85, 89, 94, 95, 98, 101, 102, 122, 145, 196, 198, 202, 203, 207, 213, 216, 219, 227, 228, 284], "7": [6, 12, 18, 20, 24, 32, 34, 35, 38, 40, 42, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 80, 83, 85, 88, 89, 91, 92, 94, 98, 100, 101, 106, 108, 124, 131, 134, 135, 139, 172, 177, 179, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 232, 233, 238, 239, 242, 245, 246, 252, 262, 274, 279, 280, 283], "8": [6, 16, 26, 30, 32, 33, 38, 40, 42, 49, 50, 51, 54, 56, 58, 59, 61, 62, 63, 64, 66, 68, 71, 72, 74, 80, 83, 85, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 106, 108, 110, 124, 139, 144, 145, 156, 192, 193, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 209, 210, 213, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 232, 238, 240, 242, 245, 252, 255, 256, 262, 273, 274, 278, 280, 284], "9": [6, 14, 28, 30, 38, 40, 46, 48, 49, 50, 54, 56, 57, 58, 59, 61, 63, 64, 66, 67, 68, 71, 72, 74, 80, 83, 85, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 106, 108, 109, 110, 111, 113, 122, 124, 127, 133, 139, 141, 145, 177, 192, 193, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 213, 215, 216, 217, 219, 220, 223, 225, 226, 227, 228, 238, 242, 245, 252, 255, 278, 280, 285], "11": [6, 18, 34, 35, 40, 49, 52, 54, 56, 58, 59, 61, 63, 66, 70, 71, 72, 74, 75, 83, 85, 88, 89, 90, 94, 98, 100, 108, 122, 124, 137, 156, 166, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 214, 216, 220, 223, 225, 226, 227, 228, 239, 245, 256], "12": [6, 12, 20, 32, 38, 39, 40, 44, 46, 47, 49, 50, 51, 54, 56, 57, 58, 59, 61, 63, 64, 66, 68, 71, 72, 74, 83, 85, 89, 94, 95, 98, 101, 102, 106, 108, 110, 116, 124, 125, 137, 169, 182, 192, 195, 196, 197, 200, 202, 203, 204, 206, 207, 213, 215, 216, 220, 222, 223, 227, 228, 239, 242, 245, 255, 280, 284], "13": [6, 32, 40, 47, 49, 54, 58, 59, 61, 63, 66, 70, 71, 72, 73, 83, 88, 94, 98, 102, 106, 108, 122, 137, 193, 200, 202, 203, 204, 206, 207, 213, 220, 222, 224, 225, 227, 228, 238, 239, 262], "14": [6, 40, 47, 49, 53, 54, 56, 58, 59, 63, 64, 66, 83, 94, 95, 98, 99, 101, 106, 122, 192, 193, 196, 198, 200, 201, 202, 203, 204, 206, 207, 216, 219, 220, 223, 225, 227, 228, 274], "15": [6, 12, 20, 38, 44, 47, 49, 54, 56, 58, 59, 61, 62, 63, 66, 68, 71, 72, 74, 75, 83, 85, 88, 89, 90, 94, 95, 98, 101, 113, 145, 192, 193, 195, 196, 197, 198, 202, 203, 204, 206, 207, 209, 213, 214, 216, 219, 220, 224, 225, 226, 227, 228, 245, 273, 274, 279, 280], "16": [6, 28, 32, 38, 40, 49, 50, 53, 57, 58, 59, 63, 66, 67, 68, 72, 83, 85, 88, 94, 95, 97, 98, 102, 188, 195, 196, 197, 200, 201, 202, 203, 206, 207, 213, 215, 216, 217, 220, 227, 228, 245, 252, 261, 280], "17": [6, 10, 26, 28, 47, 49, 50, 58, 59, 62, 63, 64, 68, 71, 74, 83, 94, 98, 108, 197, 198, 202, 203, 206, 207, 214, 216, 220, 223, 228, 242, 246, 278], "18": [6, 26, 49, 50, 61, 63, 66, 68, 71, 74, 90, 94, 98, 101, 102, 106, 108, 110, 183, 192, 200, 201, 206, 207, 215, 216, 220, 223, 225, 226, 227, 228, 255], "19": [6, 26, 49, 58, 61, 66, 68, 71, 74, 94, 98, 100, 101, 192, 198, 202, 203, 206, 216, 220, 222, 225, 239, 273], "20": [6, 12, 26, 28, 36, 40, 47, 49, 50, 57, 58, 59, 62, 63, 66, 74, 75, 85, 94, 98, 101, 102, 104, 108, 119, 177, 179, 192, 193, 197, 201, 202, 203, 204, 206, 207, 213, 214, 215, 216, 219, 220, 223, 226, 227, 252, 274], "21": [6, 10, 44, 49, 58, 61, 63, 71, 72, 80, 94, 98, 100, 101, 137, 193, 198, 200, 201, 202, 204, 206, 207, 213, 223, 227, 228, 284], "22": [6, 12, 49, 58, 61, 62, 63, 66, 94, 98, 101, 102, 137, 201, 206, 219, 220, 225, 227], "23": [6, 38, 49, 50, 58, 61, 64, 66, 72, 74, 94, 98, 101, 137, 198, 203, 206, 213, 220, 245], "24": [6, 24, 26, 32, 38, 46, 50, 51, 58, 61, 63, 66, 72, 80, 85, 94, 98, 101, 102, 106, 108, 169, 179, 192, 198, 200, 202, 203, 204, 206, 209, 214, 220, 223, 227, 242, 245, 262, 274, 280], "25": [6, 12, 24, 26, 49, 50, 59, 61, 63, 66, 68, 71, 73, 90, 94, 97, 98, 101, 102, 108, 113, 119, 186, 192, 200, 202, 203, 206, 207, 213, 214, 216, 220, 222, 223, 224, 227, 239], "26": [6, 47, 58, 59, 61, 66, 70, 94, 98, 101, 102, 203, 220, 227], "27": [6, 25, 40, 41, 49, 53, 63, 68, 94, 98, 101, 102, 108, 110, 200, 203, 225], "28": [6, 40, 49, 57, 61, 62, 66, 94, 98, 101, 124, 216, 220, 223, 279], "29": [6, 32, 47, 49, 50, 58, 59, 61, 63, 64, 71, 72, 94, 98, 108, 161, 197, 215, 227], "assumpt": [6, 11, 12, 17, 19, 21, 24, 25, 33, 34, 36, 37, 39, 40, 49, 50, 52, 57, 60, 62, 64, 65, 85, 88, 89, 94, 95, 101, 108, 112, 139, 179, 184, 196, 206, 207, 215, 216, 219, 223, 225, 226, 232, 240, 245, 263, 264, 284], "parenthes": [6, 12, 58, 100, 112, 160, 161, 191, 207, 231, 248], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 24, 25, 28, 34, 35, 38, 49, 50, 54, 57, 58, 59, 60, 61, 62, 64, 68, 69, 70, 71, 72, 73, 76, 83, 85, 86, 87, 88, 89, 90, 91, 94, 98, 99, 100, 101, 102, 104, 106, 108, 112, 116, 117, 122, 133, 139, 144, 158, 166, 167, 168, 170, 182, 186, 187, 191, 193, 194, 197, 198, 201, 202, 203, 204, 205, 207, 208, 209, 215, 216, 217, 219, 220, 222, 223, 225, 231, 232, 233, 236, 238, 239, 240, 245, 246, 248, 256, 259, 262, 274, 276, 278, 279, 280, 283, 284, 285], "enclos": [6, 68, 69, 74, 97, 109, 207, 217, 246], "colon": [6, 58], "preced": [6, 7, 12, 41, 50, 58, 59, 62, 63, 152, 219, 246], "space": [6, 12, 20, 38, 39, 40, 58, 59, 60, 67, 68, 69, 71, 73, 74, 87, 94, 100, 101, 110, 116, 117, 118, 119, 141, 143, 146, 156, 159, 161, 167, 169, 176, 182, 186, 188, 191, 192, 193, 194, 202, 226, 227, 238, 242, 252, 254, 256, 257, 258, 259, 261, 262, 269, 276, 279], "omit": [6, 10, 18, 20, 40, 50, 57, 58, 59, 63, 83, 85, 88, 94, 174, 207, 208, 215, 217, 225, 231, 240, 245, 274], "absent": [6, 42, 225], "specifi": [6, 7, 10, 14, 18, 20, 26, 27, 28, 39, 40, 41, 53, 57, 58, 59, 60, 61, 64, 66, 67, 71, 74, 83, 85, 87, 88, 89, 91, 94, 98, 100, 101, 102, 108, 113, 116, 117, 121, 122, 124, 126, 127, 129, 132, 134, 135, 136, 137, 139, 140, 156, 161, 166, 167, 169, 170, 175, 181, 182, 184, 186, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 209, 210, 213, 214, 215, 217, 219, 223, 224, 225, 226, 227, 228, 232, 233, 234, 238, 239, 240, 245, 246, 252, 254, 255, 258, 261, 280], "displai": [6, 7, 12, 18, 19, 58, 59, 62, 83, 87, 101, 102, 106, 143, 176, 182, 186, 187, 193, 197, 198, 207, 215, 231, 238], "signatur": [6, 20, 34, 35, 50, 58, 94, 240, 241, 245, 246], "brace": [6, 63, 122, 207], "appear": [6, 7, 11, 12, 14, 39, 40, 42, 47, 49, 58, 59, 63, 64, 67, 68, 71, 74, 77, 81, 83, 85, 89, 94, 98, 100, 122, 126, 156, 172, 174, 177, 193, 195, 197, 200, 202, 203, 207, 216, 219, 223, 224, 225, 227, 231, 233, 238, 245, 246, 252, 257], "shape": [6, 10, 40, 74, 89, 91, 94, 96, 97, 106, 108, 116, 121, 122, 182, 193, 194, 196, 207, 210, 217, 227, 228, 229, 231, 232, 233, 246, 283], "combin": [6, 10, 12, 20, 27, 39, 58, 62, 63, 66, 85, 87, 88, 89, 98, 102, 108, 116, 121, 125, 132, 140, 151, 158, 166, 167, 169, 170, 171, 175, 177, 178, 194, 195, 197, 198, 200, 202, 203, 207, 208, 216, 217, 219, 220, 223, 225, 227, 228, 242, 245, 273, 276, 279], "incorrectli": [6, 10, 20, 67, 68, 94, 195], "opt_cs": [6, 219], "canon": [6, 11, 18, 23, 40, 42, 47, 49, 50, 54, 58, 59, 60, 64, 74, 83, 88, 94, 98, 100, 117, 149, 153, 172, 174, 177, 179, 200, 208, 215, 216, 219, 223, 225, 227, 233, 245, 284], "find": [6, 11, 12, 14, 16, 17, 20, 22, 24, 25, 27, 28, 32, 35, 38, 40, 41, 49, 52, 53, 54, 57, 58, 62, 64, 66, 68, 70, 71, 72, 75, 80, 83, 85, 87, 94, 98, 100, 114, 123, 130, 137, 139, 141, 157, 164, 166, 167, 168, 172, 175, 177, 190, 193, 194, 195, 196, 197, 198, 200, 204, 206, 207, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 233, 242, 245, 246, 248, 252, 262, 274, 276, 278, 280, 285], "optim": [6, 11, 26, 40, 42, 49, 62, 88, 98, 112, 139, 152, 156, 203, 207, 208, 216, 219, 227, 239], "mul": [6, 10, 11, 12, 15, 20, 32, 83, 85, 89, 98, 152, 156, 166, 167, 196, 197, 198, 202, 203, 207, 208, 209, 216, 219, 223, 224, 225, 226, 231, 279], "pow": [6, 10, 11, 12, 32, 37, 40, 58, 59, 64, 83, 89, 98, 171, 196, 197, 198, 203, 207, 209, 216, 219, 225, 226, 279, 283], "neg": [6, 11, 12, 18, 19, 25, 36, 37, 40, 41, 53, 57, 58, 63, 64, 66, 68, 70, 71, 74, 83, 85, 87, 88, 89, 94, 97, 98, 101, 102, 104, 105, 106, 108, 172, 182, 192, 195, 196, 198, 200, 202, 203, 204, 207, 213, 215, 216, 217, 219, 220, 223, 225, 226, 227], "coeffici": [6, 14, 16, 18, 24, 35, 38, 40, 57, 58, 60, 62, 63, 66, 71, 76, 77, 80, 81, 83, 87, 88, 91, 94, 95, 98, 109, 117, 122, 145, 159, 169, 177, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 209, 210, 213, 214, 217, 219, 220, 222, 223, 224, 225, 226, 227, 233, 239, 256, 259, 269, 279, 284], "none": [6, 7, 10, 11, 18, 19, 20, 32, 33, 34, 35, 36, 38, 39, 40, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 88, 89, 91, 94, 95, 98, 99, 100, 101, 108, 113, 114, 116, 117, 118, 119, 121, 122, 141, 143, 145, 146, 152, 157, 162, 167, 169, 172, 174, 178, 179, 180, 182, 184, 186, 187, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 245, 246, 248, 251, 252, 255, 280, 284, 285], "process": [6, 7, 10, 11, 12, 18, 37, 40, 49, 50, 56, 58, 59, 64, 66, 74, 83, 85, 94, 98, 108, 118, 122, 124, 130, 133, 134, 136, 139, 193, 194, 200, 207, 208, 215, 219, 223, 225, 238, 242, 284], "concern": [6, 11, 18, 38, 41, 57, 62, 98, 188, 193, 195, 196, 197, 206, 207, 208, 219, 220, 225, 239, 240, 242, 248], "item": [6, 7, 11, 12, 14, 40, 47, 48, 50, 58, 63, 69, 75, 89, 94, 98, 117, 193, 197, 200, 203, 207, 215, 223, 224, 227, 238, 239, 242, 245, 246, 284], "fragment": [6, 59], "desir": [6, 10, 12, 16, 20, 23, 28, 31, 49, 50, 58, 59, 61, 62, 63, 64, 68, 72, 74, 88, 89, 94, 97, 98, 99, 117, 118, 119, 121, 132, 136, 157, 182, 190, 191, 196, 198, 200, 202, 203, 204, 207, 208, 210, 215, 219, 223, 225, 226, 239, 241, 242, 245, 259, 273], "span": [6, 10, 87, 94, 101, 102, 116, 202, 207, 243, 280], "subsequ": [6, 12, 58, 64, 182, 198, 200, 203, 242, 245, 256, 259], "indent": [6, 12, 248], "embed": [6, 7, 38, 50, 58, 86, 202], "hyperlink": 6, "classnam": 6, "erf": [6, 66, 83, 85, 207, 217, 227], "gauss": [6, 66, 85, 94, 141, 195, 202, 205, 225, 226], "erfc": [6, 66, 83, 207, 227], "complementari": [6, 66, 108], "erfi": [6, 66, 83, 207], "erf2": [6, 66, 207], "erfinv": [6, 66, 207, 227], "invers": [6, 32, 49, 50, 58, 59, 60, 66, 85, 91, 94, 98, 116, 117, 161, 165, 166, 169, 174, 177, 194, 195, 196, 198, 200, 203, 204, 207, 209, 217, 219, 223, 225, 226, 227, 245, 280, 284], "erfcinv": [6, 66, 207], "erf2inv": [6, 66, 207], "besselj": [6, 66, 80, 207, 219, 223, 278], "besselbas": [6, 66], "bessel": [6, 7, 64, 76, 85, 203, 219, 223, 227, 278], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 39, 40, 60, 63, 66, 78, 85, 89, 101, 104, 117, 122, 135, 188, 195, 197, 198, 203, 208, 209, 215, 223, 224, 227, 245, 259, 261, 274, 284], "bess": [6, 66, 207, 219, 223, 227], "besselk": [6, 66, 207, 227], "cite": [6, 21], "citat": [6, 57, 201], "meant": [6, 7, 10, 12, 18, 20, 40, 58, 66, 71, 85, 98, 122, 139, 193, 198, 215, 219, 224, 257, 279], "augment": [6, 40, 94, 117, 134, 135, 139, 205, 225, 226, 243, 246, 285], "freeli": [6, 31, 92, 116, 194], "wikipedia": [6, 11, 18, 20, 32, 34, 35, 36, 38, 39, 40, 46, 47, 49, 50, 57, 58, 59, 60, 61, 63, 64, 66, 68, 70, 74, 75, 76, 85, 87, 88, 89, 91, 94, 98, 106, 108, 111, 141, 143, 144, 145, 147, 148, 149, 153, 154, 155, 158, 160, 161, 170, 172, 175, 182, 184, 189, 203, 210, 214, 215, 216, 223, 226, 227, 240, 245, 252, 254, 258, 260, 262, 278, 280, 282], "wolfram": [6, 36, 51, 52, 58, 59, 61, 63, 64, 66, 68, 74, 85, 94, 98, 100, 201, 207, 209, 210, 212, 215, 220, 227, 245, 280], "mathworld": [6, 11, 36, 51, 52, 58, 59, 61, 63, 64, 66, 68, 74, 85, 94, 98, 201, 210, 215, 220, 227, 245], "nist": [6, 64, 66, 177], "digit": [6, 11, 12, 26, 40, 58, 59, 61, 62, 68, 85, 88, 98, 132, 182, 197, 203, 214, 219, 245, 273], "dlmf": [6, 64, 66], "suffer": 6, "rot": [6, 74, 169], "publish": [6, 83, 217], "identifi": [6, 10, 18, 19, 38, 51, 58, 61, 62, 85, 94, 104, 134, 160, 161, 194, 197, 198, 208, 216, 219, 223, 224, 226, 227, 246, 249], "clickabl": 6, "kozen89": [6, 200, 201], "kozen": [6, 201], "landau": [6, 201, 274], "polynomi": [6, 7, 11, 16, 18, 22, 24, 28, 36, 49, 57, 58, 59, 62, 63, 76, 77, 79, 81, 85, 88, 89, 91, 94, 98, 102, 108, 137, 139, 194, 196, 201, 205, 209, 214, 216, 217, 219, 220, 222, 223, 226, 238, 263, 270, 275, 280, 285], "decomposit": [6, 49, 56, 90, 91, 94, 196, 198, 200, 201, 209, 284], "1989": [6, 201, 225], "pp": [6, 49, 50, 56, 57, 58, 59, 63, 64, 85, 89, 94, 126, 136, 192, 195, 200, 201, 223, 224, 227], "445": [6, 201], "456": [6, 58, 201], "abramowitz": [6, 66], "milton": [6, 66], "stegun": [6, 66], "iren": [6, 66], "chapter": [6, 49, 66, 98, 122, 201], "formula": [6, 16, 38, 52, 57, 58, 62, 63, 64, 66, 71, 88, 94, 98, 192, 194, 200, 203, 207, 209, 213, 216, 219, 220, 223, 278, 284], "tabl": [6, 18, 41, 49, 58, 63, 66, 79, 85, 94, 98, 116, 139, 192, 202, 229], "ed": [6, 50, 66, 94, 201, 225, 227], "1965": [6, 66, 89], "luke": [6, 66, 83, 217], "l": [6, 10, 12, 38, 39, 40, 41, 47, 49, 50, 57, 59, 66, 69, 70, 71, 72, 73, 75, 76, 81, 83, 85, 87, 90, 91, 94, 98, 101, 102, 108, 110, 116, 117, 119, 121, 122, 125, 126, 127, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 144, 170, 173, 174, 175, 177, 190, 191, 192, 194, 196, 198, 200, 201, 207, 209, 210, 216, 217, 220, 223, 225, 227, 231, 232, 233, 234, 238, 240, 245, 262, 284], "Their": [6, 58, 66, 83, 192, 193, 197, 200, 217], "approxim": [6, 12, 17, 28, 38, 49, 57, 58, 59, 62, 66, 68, 74, 83, 85, 94, 98, 102, 105, 141, 175, 193, 197, 198, 203, 210, 214, 217, 227, 274, 278], "1969": [6, 59, 66, 83, 201, 217], "en": [6, 7, 18, 20, 32, 34, 35, 36, 38, 39, 40, 46, 47, 49, 50, 57, 58, 59, 60, 61, 63, 64, 66, 68, 70, 74, 75, 76, 85, 86, 87, 88, 89, 91, 94, 98, 106, 108, 111, 141, 143, 144, 145, 147, 148, 149, 153, 154, 155, 158, 160, 161, 170, 172, 182, 184, 189, 203, 204, 210, 214, 215, 216, 223, 226, 227, 240, 245, 246, 252, 254, 258, 260, 262, 280], "bessel_funct": [6, 66], "typefunct": [6, 66], "gamma": [6, 7, 12, 20, 57, 58, 60, 62, 63, 83, 85, 111, 139, 169, 191, 192, 207, 217, 219, 223, 227, 284], "infti": [6, 11, 18, 36, 57, 58, 59, 63, 64, 66, 83, 85, 194, 203, 210, 214, 217, 223, 226, 227, 274, 278, 284], "mathrm": [6, 30, 48, 57, 58, 59, 66, 83, 85, 94, 198, 200, 207, 215, 217, 223, 226, 227, 274, 278], "factori": [6, 16, 20, 57, 58, 62, 63, 66, 94, 98, 100, 192, 198, 200, 202, 203, 207, 209, 219, 225, 227, 240, 241, 245, 246, 284], "z": [6, 10, 11, 12, 14, 18, 20, 24, 26, 27, 36, 37, 40, 41, 49, 50, 57, 58, 59, 60, 61, 63, 64, 66, 70, 71, 72, 73, 74, 83, 85, 88, 89, 91, 94, 100, 101, 102, 110, 113, 114, 116, 119, 122, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 139, 140, 141, 150, 152, 156, 166, 167, 169, 173, 177, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 239, 240, 246, 252, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 283, 284, 285], "whole": [6, 10, 18, 58, 60, 66, 85, 102, 110, 193, 194, 202, 203, 207, 210, 215, 217, 223, 226, 245], "complex": [6, 10, 11, 12, 15, 18, 20, 24, 25, 28, 32, 36, 37, 38, 40, 49, 58, 59, 61, 62, 63, 66, 70, 80, 83, 89, 90, 94, 98, 99, 100, 106, 108, 112, 122, 139, 141, 145, 155, 158, 160, 161, 172, 181, 182, 191, 195, 196, 198, 202, 203, 207, 208, 212, 215, 217, 219, 223, 225, 226, 227, 240, 248, 284, 285], "plane": [6, 32, 58, 66, 68, 70, 71, 73, 74, 85, 106, 116, 124, 144, 145, 190, 191, 215, 226, 262, 270, 284], "pole": [6, 11, 66, 83, 108, 116, 145, 214, 217, 223], "pi": [6, 10, 11, 12, 15, 18, 20, 22, 23, 25, 28, 31, 32, 33, 35, 36, 37, 38, 40, 50, 57, 58, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 77, 83, 85, 94, 98, 110, 124, 139, 141, 143, 144, 145, 146, 148, 156, 167, 169, 170, 173, 175, 182, 192, 193, 195, 197, 198, 203, 207, 210, 214, 215, 216, 217, 219, 222, 223, 225, 226, 227, 245, 252, 255, 262, 273, 278, 284], "oo": [6, 11, 14, 18, 19, 23, 36, 38, 57, 58, 62, 63, 64, 66, 71, 83, 85, 88, 94, 108, 110, 158, 170, 173, 198, 200, 203, 212, 213, 214, 215, 219, 222, 223, 225, 226, 227, 232, 245, 248, 274, 278], "known": [6, 11, 18, 19, 20, 35, 39, 40, 41, 47, 49, 50, 58, 59, 62, 63, 66, 68, 71, 76, 83, 85, 86, 95, 98, 106, 108, 109, 111, 113, 119, 136, 175, 182, 190, 196, 197, 198, 202, 203, 207, 210, 213, 215, 216, 217, 219, 222, 223, 224, 225, 227, 245, 246, 252, 259, 261, 284], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 27, 28, 32, 36, 37, 38, 40, 58, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 82, 83, 85, 86, 89, 90, 94, 98, 100, 101, 104, 108, 110, 124, 141, 143, 145, 146, 151, 156, 166, 167, 169, 170, 172, 173, 175, 182, 188, 191, 192, 195, 197, 198, 200, 202, 203, 206, 207, 208, 213, 216, 217, 219, 220, 222, 223, 225, 226, 227, 245, 246, 248, 252, 261, 262, 273, 278, 283, 284, 285], "obei": [6, 66, 192, 207, 217], "mirror": [6, 66, 85, 145], "symmetri": [6, 10, 46, 51, 54, 66, 89, 151, 192, 223, 231, 233, 273, 284], "conjug": [6, 36, 47, 48, 49, 58, 64, 66, 89, 94, 110, 141, 155, 158, 172, 203, 207, 223, 233], "differenti": [6, 7, 10, 11, 22, 38, 58, 63, 64, 66, 75, 76, 78, 81, 108, 116, 117, 121, 122, 124, 126, 129, 132, 133, 134, 135, 136, 139, 140, 161, 167, 181, 182, 184, 186, 188, 191, 194, 200, 204, 206, 207, 212, 217, 219, 223, 224, 252, 259, 260, 263, 270, 274, 275, 278], "polygamma": [6, 63, 66, 207], "seri": [6, 16, 38, 39, 40, 41, 48, 49, 57, 58, 60, 62, 63, 64, 66, 81, 82, 83, 87, 98, 105, 108, 122, 129, 131, 139, 186, 190, 199, 200, 207, 212, 213, 217, 223, 226, 264, 270, 275], "expans": [6, 16, 20, 40, 58, 60, 63, 64, 66, 85, 94, 98, 136, 151, 153, 203, 204, 209, 210, 211, 216, 218, 219, 223, 225, 226, 264, 275, 284], "eulergamma": [6, 58, 62, 63, 66], "zeta": [6, 11, 12, 57, 58, 62, 63, 198, 202, 207, 214, 227], "40": [6, 28, 40, 61, 63, 66, 68, 75, 89, 94, 98, 101, 193, 204, 206, 207, 227, 248, 273], "288037795340032417959588909060233922890": [6, 66], "49801566811835604271": [6, 66], "15494982830181068512": [6, 66], "lowergamma": [6, 66, 227], "lower": [6, 10, 11, 18, 23, 36, 38, 40, 49, 50, 57, 58, 60, 66, 67, 69, 74, 75, 85, 89, 90, 91, 94, 106, 111, 116, 172, 186, 192, 194, 196, 198, 200, 203, 207, 216, 217, 219, 223, 232, 233, 242, 252, 274, 282], "uppergamma": [6, 63, 66, 207, 227], "upper": [6, 36, 57, 59, 62, 66, 67, 74, 75, 89, 90, 91, 94, 97, 98, 106, 116, 165, 172, 192, 196, 198, 200, 202, 203, 207, 217, 225, 232, 252], "loggamma": [6, 7, 66, 207], "log": [6, 7, 12, 20, 30, 32, 38, 40, 49, 57, 58, 62, 63, 64, 66, 76, 80, 82, 83, 85, 89, 94, 98, 193, 198, 207, 209, 214, 217, 219, 223, 226, 227, 234, 274, 284, 285], "digamma": [6, 63, 66, 207], "trigamma": [6, 66, 207], "beta": [6, 12, 40, 49, 58, 85, 169, 182, 192, 202, 204, 207, 223, 227], "euler": [6, 38, 39, 57, 58, 59, 62, 63, 66, 74, 80, 86, 98, 116, 169, 182, 187, 191, 192, 203, 207, 223, 227, 252, 254], "gamma_funct": [6, 66], "gov": [6, 64, 66], "gammafunct": [6, 66], "gammabetaerf": [6, 63, 66], "unusu": [6, 18, 124, 238], "inlin": [6, 86, 187, 207, 240], "pretti": [6, 11, 20, 39, 40, 66, 85, 86, 94, 98, 102, 108, 124, 187, 217, 219, 226, 261, 275, 278, 280, 284], "As": [6, 10, 15, 16, 19, 20, 26, 31, 40, 49, 50, 58, 59, 62, 63, 64, 66, 82, 83, 88, 94, 97, 98, 100, 116, 121, 122, 124, 126, 133, 136, 137, 172, 177, 190, 194, 195, 197, 198, 200, 203, 204, 206, 207, 214, 215, 217, 223, 226, 227, 245, 246, 256, 257, 273, 274, 276, 278, 279, 280, 283, 284], "literatur": [6, 11, 83, 199, 270], "fact": [6, 10, 11, 18, 19, 20, 25, 35, 36, 58, 63, 66, 76, 83, 98, 104, 124, 136, 177, 194, 195, 197, 200, 202, 204, 206, 217, 219, 223, 226, 238, 246, 261, 273, 276, 277, 278, 279, 284], "eval": [6, 10, 18, 34, 35, 40, 58, 64, 66, 158, 172, 198, 203, 207, 240, 273], "illumin": 6, "tone": 6, "narr": [6, 8, 277], "excerpt": 6, "geometri": [6, 67, 68, 69, 71, 72, 73, 74, 75, 85, 132, 145, 199, 255, 262, 263, 270, 278], "autofunct": 6, "intersect": [6, 18, 25, 38, 39, 49, 68, 69, 71, 72, 73, 74, 75, 145, 194, 203, 207, 213, 214, 215, 226], "convex_hul": [6, 70, 74, 75], "are_similar": [6, 69, 70, 75], "autoclass": 6, "linearent": [6, 68, 71, 72, 73, 74], "rai": [6, 68, 70, 71, 72, 74, 75, 141, 145], "segment": [6, 10, 49, 68, 70, 71, 72, 73, 74, 75, 190, 193, 223, 238], "curv": [6, 39, 60, 70, 85, 98, 101, 141, 193, 194, 223, 252, 262, 270, 274], "ellips": [6, 69, 70, 74, 144, 193, 207, 270, 283], "circl": [6, 20, 58, 68, 69, 70, 72, 73, 74, 75, 83, 145, 152, 193, 226, 252, 255, 262], "polygon": [6, 68, 69, 70, 75, 193, 262, 270], "regularpolygon": [6, 69, 70, 74, 193], "triangl": [6, 20, 39, 63, 69, 70, 74, 75, 85, 89, 98, 192, 193, 255, 262], "rel": [6, 7, 10, 24, 39, 40, 48, 49, 50, 51, 55, 56, 57, 58, 59, 62, 69, 83, 98, 113, 116, 119, 127, 136, 137, 144, 171, 182, 186, 190, 191, 194, 196, 197, 200, 202, 215, 217, 222, 225, 227, 238, 245, 256, 257, 261, 278], "cumbersom": [6, 28], "viewcod": 6, "aco": [6, 12, 32, 64, 71, 74, 124, 139, 145, 182, 207, 223, 252, 284], "obj": [6, 10, 18, 58, 198, 203, 207, 241], "qualifi": [6, 249], "elementari": [6, 18, 19, 20, 49, 58, 59, 62, 65, 66, 80, 83, 85, 89, 94, 98, 137, 165, 168, 203, 204, 245, 246, 256, 264], "trigonometr": [6, 20, 23, 28, 58, 85, 204, 210, 218, 219, 222, 223, 226, 246, 264, 275, 285], "trail": [6, 50, 98, 198, 200, 203, 243, 248], "pair": [6, 12, 16, 24, 39, 40, 49, 50, 58, 59, 64, 70, 75, 82, 94, 98, 122, 126, 162, 164, 166, 167, 172, 181, 192, 194, 197, 200, 202, 203, 208, 213, 214, 216, 217, 219, 220, 223, 226, 227, 240, 245, 256, 273, 280], "www": [6, 7, 32, 38, 49, 50, 59, 61, 63, 66, 80, 85, 86, 98, 106, 187, 201, 206, 207, 216, 219, 220, 223, 227, 245, 280, 283], "master": [6, 7, 30, 85, 238], "usag": [6, 7, 11, 12, 18, 19, 20, 31, 34, 60, 64, 85, 169, 188, 193, 194, 200, 207, 215, 217, 220, 223, 224, 228, 242, 246, 247, 259, 260, 267, 279], "expect": [6, 7, 12, 18, 20, 39, 41, 43, 58, 64, 66, 70, 88, 98, 99, 108, 122, 166, 197, 200, 202, 204, 205, 214, 219, 222, 225, 226, 227, 236, 238, 239, 242, 245, 246, 278, 279], "vector": [6, 16, 32, 36, 40, 42, 49, 50, 58, 60, 66, 71, 72, 73, 80, 81, 87, 89, 94, 99, 101, 104, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 126, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 144, 145, 158, 167, 169, 174, 177, 182, 184, 186, 187, 194, 202, 207, 217, 223, 225, 227, 232, 233, 238, 239, 254, 258, 263, 267, 269, 280], "dynamicsymbol": [6, 112, 113, 114, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 182, 184, 186, 187, 188, 190, 191], "custom": [6, 10, 21, 40, 50, 58, 62, 65, 86, 89, 94, 114, 116, 181, 187, 188, 209, 213, 220, 227, 233, 239, 246, 252, 261, 278, 280], "sine": [6, 20, 58, 64, 66, 83, 85, 146, 204, 210, 216, 273], "expand": [6, 10, 11, 12, 16, 18, 40, 58, 60, 62, 63, 64, 66, 83, 85, 89, 108, 122, 124, 139, 153, 161, 164, 171, 172, 195, 197, 200, 202, 203, 204, 207, 210, 214, 216, 217, 219, 223, 226, 227, 231, 239, 246, 258, 273, 278], "troubleshoot": [6, 136], "spell": [6, 10, 11, 223], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 23, 24, 26, 28, 50, 57, 58, 62, 66, 68, 73, 83, 85, 88, 91, 94, 97, 98, 162, 164, 171, 172, 193, 197, 202, 207, 212, 214, 215, 216, 217, 219, 220, 223, 225, 246, 248, 273, 276, 279, 280, 284], "referencefram": [6, 10, 113, 114, 116, 117, 119, 122, 124, 125, 126, 129, 130, 131, 134, 135, 136, 137, 139, 140, 182, 183, 184, 186, 187, 188, 189, 190, 269], "though": [6, 11, 12, 18, 19, 20, 26, 27, 28, 31, 41, 58, 59, 60, 70, 74, 83, 85, 89, 94, 98, 112, 117, 124, 134, 136, 167, 181, 182, 190, 191, 195, 197, 198, 203, 204, 216, 217, 219, 223, 224, 225, 226, 238, 259, 274, 279, 284], "frame": [6, 112, 113, 114, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 131, 133, 134, 135, 136, 137, 139, 140, 181, 182, 183, 184, 186, 188, 190, 242, 252, 259], "notimplementederror": [6, 23, 25, 27, 28, 38, 57, 68, 71, 75, 85, 94, 106, 196, 202, 206, 215, 222, 223, 224, 225, 226], "outsid": [6, 25, 36, 49, 58, 66, 69, 74, 89, 98, 112, 177, 191, 203, 219, 274, 279], "plot": [6, 20, 30, 67, 68, 70, 71, 74, 81, 86, 94, 101, 102, 107, 139, 156, 159, 165, 210, 263, 269, 270, 278, 283], "ahead": [6, 98], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 24, 25, 26, 40, 57, 58, 64, 66, 67, 68, 69, 70, 71, 72, 74, 85, 88, 89, 91, 94, 98, 100, 101, 102, 108, 112, 114, 122, 124, 125, 126, 129, 130, 136, 139, 169, 170, 175, 182, 192, 194, 196, 197, 198, 203, 207, 214, 215, 219, 220, 223, 224, 225, 227, 238, 239, 241, 273, 274, 276], "common": [6, 7, 10, 11, 12, 18, 19, 20, 22, 23, 24, 25, 38, 40, 49, 50, 58, 59, 64, 69, 72, 75, 85, 91, 93, 94, 98, 99, 106, 108, 113, 116, 118, 125, 132, 137, 139, 144, 177, 182, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 209, 215, 216, 217, 219, 220, 223, 225, 226, 227, 239, 240, 243, 245, 246, 259, 261, 267, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285], "matrixcommon": [6, 89, 91, 94], "dyadic": [6, 61, 113, 119, 122, 124, 129, 131, 139, 182, 184, 187, 189, 252, 255, 260], "shorten": 6, "highli": [7, 58, 62, 105, 197, 203, 212, 240], "aspect": [7, 18, 94, 197], "teach": [7, 50, 59, 227], "conduct": 7, "accord": [7, 12, 40, 46, 49, 50, 54, 57, 58, 59, 66, 88, 91, 94, 98, 100, 116, 123, 132, 166, 172, 193, 198, 200, 202, 204, 220, 225, 226, 233, 238, 240, 245, 261], "survei": 7, "commonli": [7, 11, 50, 63, 66, 85, 94, 112, 190, 195, 223, 259], "encount": [7, 12, 16, 23, 58, 85, 94, 164, 195, 200, 203, 225, 226, 240, 252, 280], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 28, 42, 52, 54, 58, 59, 70, 83, 85, 89, 94, 98, 101, 103, 104, 109, 112, 122, 126, 127, 130, 132, 134, 181, 190, 191, 194, 195, 200, 217, 219, 220, 223, 226, 242, 245, 269, 274, 276, 280], "offer": [7, 39, 40, 49, 58, 99, 112, 139, 181, 191, 197, 202, 242, 260], "bring": [7, 83, 117, 130, 196, 210, 219, 280], "greater": [7, 36, 50, 58, 63, 64, 66, 83, 87, 98, 108, 200, 203, 206, 214, 219, 223, 225, 227, 242, 245, 259, 274], "clariti": [7, 49, 186], "mission": [7, 39, 92], "ca": [7, 30, 59, 66, 85, 206, 207, 245], "dedic": [7, 40, 199, 222, 240, 257, 259], "essenti": [7, 42, 53, 58, 62, 64, 65, 66, 83, 119, 124, 185, 188, 189, 191, 194, 195, 198, 202, 214, 217, 253, 256, 259, 260, 261, 267, 269], "element": [7, 10, 11, 12, 15, 18, 24, 32, 36, 39, 40, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 74, 81, 83, 85, 87, 88, 89, 90, 91, 94, 97, 98, 99, 101, 102, 108, 109, 119, 139, 141, 144, 158, 169, 177, 186, 189, 191, 193, 194, 195, 196, 198, 200, 203, 205, 206, 207, 213, 214, 215, 217, 219, 220, 223, 225, 226, 227, 228, 232, 239, 241, 242, 245, 246, 247, 255, 274, 279, 280, 283, 284], "deviat": [7, 145, 227], "advanc": [7, 15, 17, 20, 34, 49, 58, 62, 63, 94, 95, 132, 137, 189, 193, 196, 197, 199, 201, 202, 209, 216, 223, 238, 239, 240, 245, 269, 273, 275, 277, 281, 282, 283, 284], "docutil": 7, "sourceforg": [7, 39], "net": [7, 39, 74, 201, 223, 227, 245], "ext": [7, 194, 198], "autodoc": 7, "associ": [7, 10, 11, 18, 24, 39, 41, 56, 58, 59, 65, 66, 80, 81, 83, 87, 137, 139, 162, 170, 181, 182, 190, 191, 195, 196, 197, 198, 200, 202, 207, 215, 217, 220, 233, 247], "graphic": [7, 106], "info": [7, 12, 108, 207, 223, 224], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 86, 246], "subset": [7, 16, 18, 20, 38, 39, 42, 45, 49, 50, 56, 63, 64, 70, 81, 83, 85, 87, 98, 194, 196, 200, 202, 207, 215, 245, 264], "modifi": [7, 11, 12, 39, 40, 49, 58, 64, 66, 98, 100, 135, 144, 193, 200, 202, 203, 204, 207, 219, 225, 226, 227, 238, 241, 242, 245, 246, 273, 278, 280], "sphinx_math_dollar": 7, "delimit": [7, 58, 207], "dollar": [7, 278], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 104, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 121, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 246, 248, 252, 254, 255, 256, 257, 258, 259, 261, 262, 273, 274, 276, 278, 279, 280, 283, 284, 285], "sphinxext": 7, "plot_direct": 7, "figur": [7, 58, 59, 68, 69, 71, 73, 74, 85, 102, 122, 167, 190, 191, 192, 193, 204, 207, 262, 284], "devel": [7, 192], "supersed": [7, 122, 139], "pep": [7, 40, 58, 88], "257": [7, 98, 225], "our": [7, 9, 10, 16, 20, 30, 40, 58, 66, 83, 94, 98, 125, 177, 190, 191, 193, 194, 196, 202, 203, 204, 207, 214, 217, 220, 223, 226, 238, 273, 276, 277, 279, 284], "introduct": [7, 10, 17, 49, 50, 63, 66, 198, 200, 201, 203, 207, 220, 223, 226, 260, 267, 277, 283], "four": [7, 40, 50, 58, 62, 66, 88, 91, 98, 104, 109, 123, 132, 137, 145, 182, 193, 194, 200, 203, 207, 215, 220, 223, 225, 227, 228, 252, 254, 257, 269], "locat": [7, 10, 50, 58, 72, 94, 98, 101, 102, 104, 116, 126, 133, 136, 140, 186, 188, 202, 203, 207, 219, 227, 241, 250, 252, 256, 258, 261], "websit": [7, 282], "advertis": 7, "serv": [7, 11, 16, 20, 34, 35, 40, 55, 58, 65, 81, 202, 223, 224, 248, 277], "initi": [7, 11, 18, 26, 34, 49, 53, 58, 59, 60, 63, 66, 74, 76, 77, 80, 81, 82, 83, 86, 98, 100, 102, 104, 106, 108, 113, 117, 119, 121, 122, 124, 126, 131, 134, 135, 136, 139, 140, 144, 152, 161, 183, 184, 187, 191, 192, 200, 202, 203, 207, 213, 217, 219, 223, 225, 226, 232, 240, 247, 248, 252, 254, 255, 256, 257], "obtain": [7, 11, 12, 14, 16, 24, 25, 28, 34, 35, 39, 41, 42, 49, 50, 51, 54, 58, 59, 61, 62, 63, 64, 66, 68, 69, 71, 72, 74, 80, 83, 85, 87, 89, 94, 97, 98, 105, 108, 132, 135, 137, 145, 167, 172, 177, 194, 195, 198, 200, 202, 203, 206, 208, 215, 216, 217, 219, 220, 223, 224, 225, 226, 245, 248, 256, 257], "technic": [7, 10, 13, 20, 29, 39, 58, 139, 158, 194, 223, 240, 245, 259, 276, 279], "place": [7, 8, 10, 11, 12, 18, 20, 25, 29, 39, 50, 51, 58, 59, 64, 74, 90, 94, 97, 98, 100, 108, 139, 140, 201, 202, 207, 208, 214, 216, 219, 223, 242, 245, 272, 273, 280, 284], "site": [7, 98, 241], "upload": [7, 98], "belong": [7, 18, 36, 39, 49, 54, 58, 81, 94, 172, 182, 190, 193, 194, 196, 197, 200, 202, 203, 214, 215, 219, 220, 226, 233], "insid": [7, 10, 11, 12, 20, 49, 50, 55, 58, 68, 69, 74, 101, 112, 114, 126, 136, 171, 172, 177, 187, 191, 203, 207, 215, 217, 220, 225, 226, 227, 229, 231, 242, 279, 280], "spars": [7, 11, 91, 93, 94, 166, 196, 202, 203, 204, 227, 228, 267, 279], "substanti": [7, 99], "edit": [7, 85, 94, 98, 200, 201, 203], "arg": [7, 11, 18, 20, 23, 25, 32, 34, 35, 36, 37, 38, 39, 40, 42, 49, 50, 52, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 80, 83, 85, 88, 89, 90, 91, 92, 94, 96, 98, 100, 108, 141, 147, 150, 152, 155, 156, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 182, 187, 191, 193, 196, 198, 200, 202, 203, 204, 207, 209, 210, 213, 214, 215, 216, 219, 223, 225, 226, 227, 228, 232, 233, 238, 239, 240, 241, 245, 246, 248, 252, 254], "invari": [7, 10, 20, 49, 54, 105, 108, 192, 198, 202, 203, 217, 223], "polici": [7, 8, 10, 241, 243], "5": [7, 12, 14, 18, 20, 23, 25, 26, 28, 32, 34, 35, 36, 38, 40, 41, 42, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 104, 106, 108, 110, 111, 113, 119, 122, 124, 125, 129, 130, 131, 132, 134, 141, 145, 166, 167, 170, 172, 179, 181, 183, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 232, 233, 238, 239, 245, 246, 252, 255, 257, 259, 261, 262, 273, 274, 276, 279, 280, 283, 284], "center": [7, 10, 16, 38, 49, 57, 58, 68, 72, 74, 75, 85, 94, 113, 116, 119, 122, 124, 129, 131, 133, 137, 139, 145, 190, 193, 202, 207, 215, 262], "resid": 7, "standalon": [7, 139], "restructur": 7, "appli": [7, 10, 11, 19, 20, 28, 32, 33, 34, 35, 36, 40, 49, 50, 51, 56, 57, 58, 59, 60, 61, 64, 65, 68, 73, 74, 76, 85, 88, 89, 90, 94, 98, 100, 101, 102, 104, 108, 109, 113, 114, 124, 127, 134, 136, 138, 149, 153, 156, 157, 161, 164, 165, 169, 172, 182, 191, 193, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 213, 214, 215, 216, 219, 223, 224, 225, 226, 227, 228, 231, 238, 241, 245, 252, 254, 257, 280, 283, 284], "surround": [7, 58, 75, 145, 215, 248], "nu": [7, 12, 66, 85, 98, 173, 195, 207, 219, 227, 233, 278], "equat": [7, 11, 12, 14, 16, 21, 23, 38, 40, 54, 57, 58, 60, 64, 66, 68, 71, 72, 76, 80, 81, 82, 83, 86, 89, 94, 101, 104, 108, 110, 112, 116, 117, 118, 121, 122, 124, 125, 126, 127, 129, 131, 132, 133, 138, 139, 140, 141, 145, 181, 186, 187, 190, 191, 192, 193, 194, 200, 201, 202, 205, 206, 207, 213, 217, 219, 222, 223, 224, 232, 252, 257, 258, 262, 274, 275, 278], "strip": [7, 59, 85, 98, 200, 243, 248], "out": [7, 12, 18, 19, 20, 24, 39, 40, 49, 50, 58, 59, 60, 63, 66, 74, 83, 85, 91, 94, 98, 101, 108, 109, 122, 124, 126, 129, 139, 149, 153, 164, 167, 169, 171, 172, 194, 195, 197, 198, 202, 203, 204, 205, 207, 208, 214, 217, 219, 223, 228, 238, 240, 245, 246, 276, 278, 279, 283, 284], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 24, 40, 41, 58, 59, 64, 83, 85, 88, 94, 97, 100, 126, 136, 166, 190, 191, 195, 197, 203, 207, 208, 215, 219, 223, 225, 227, 231, 240, 243, 246, 276, 277], "whitespac": [7, 58, 243], "invalid": [7, 12, 28, 58, 59, 100, 124, 197, 200, 215], "dx": [7, 10, 11, 16, 20, 24, 38, 40, 54, 58, 60, 62, 66, 75, 77, 80, 81, 82, 83, 85, 94, 101, 111, 117, 118, 161, 191, 203, 204, 210, 220, 223, 224, 228, 274, 278, 283, 285], "meta": [7, 58, 223, 224], "stackexchang": [7, 68], "5020": 7, "wikibook": [7, 85, 86], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 207], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 28, 58, 94, 122, 204, 217, 223, 224, 226, 239, 262, 278, 284], "sentenc": [7, 88], "thumb": [7, 88, 245], "greek": [7, 11, 31, 58, 98, 100, 194, 207], "letter": [7, 11, 12, 31, 51, 58, 59, 98, 172, 207, 245, 274, 276], "\u03b1": [7, 192, 206], "alpha": [7, 12, 49, 58, 66, 85, 87, 144, 148, 151, 169, 186, 190, 191, 192, 198, 200, 202, 203, 206, 207, 219, 223, 227], "logarithm": [7, 12, 32, 38, 40, 58, 59, 64, 83, 85, 94, 98, 198, 200, 204, 207, 217, 219, 226, 227, 275], "italic": 7, "emphasi": [7, 197], "asterisk": 7, "stirl": [7, 50, 63, 245], "fals": [7, 11, 12, 18, 19, 20, 23, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 83, 85, 86, 88, 89, 90, 91, 94, 95, 98, 100, 101, 102, 106, 108, 110, 111, 114, 117, 118, 119, 122, 124, 125, 129, 130, 131, 133, 134, 135, 136, 137, 140, 144, 156, 157, 161, 164, 169, 170, 171, 172, 175, 179, 182, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 219, 220, 222, 223, 224, 225, 226, 227, 232, 233, 236, 238, 239, 240, 241, 245, 246, 248, 252, 255, 276, 279, 280, 283], "permut": [7, 41, 43, 45, 46, 48, 51, 54, 55, 56, 59, 63, 66, 89, 91, 94, 118, 172, 192, 196, 198, 203, 220, 228, 229, 233, 245, 264, 284], "cycl": [7, 10, 40, 46, 49, 50, 56, 58, 61, 63, 89, 98, 146, 215, 245], "partit": [7, 45, 49, 63, 98, 126, 136, 138, 220, 227, 242, 264], "reduc": [7, 12, 19, 22, 27, 33, 35, 37, 41, 54, 58, 59, 61, 63, 64, 66, 73, 74, 83, 85, 94, 98, 108, 109, 136, 154, 172, 194, 196, 197, 198, 200, 201, 202, 203, 204, 208, 213, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 245, 280], "ge": [7, 18, 58, 63, 64, 66, 83, 89, 94, 98, 192, 195, 200, 203, 217, 245], "consecut": [7, 40, 49, 54, 57, 59, 63, 74, 219, 225], "group": [7, 39, 44, 45, 50, 51, 54, 55, 56, 58, 61, 63, 87, 88, 98, 151, 160, 161, 172, 192, 193, 194, 202, 203, 219, 223, 225, 226, 233, 245, 264], "pairwis": [7, 36, 39, 58, 63, 75, 94, 98, 220, 225], "ital": [7, 207], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 33, 34, 35, 39, 40, 41, 48, 49, 50, 54, 57, 58, 59, 62, 68, 85, 88, 89, 90, 91, 92, 94, 96, 97, 98, 100, 108, 121, 144, 177, 192, 193, 194, 195, 197, 198, 200, 203, 206, 207, 214, 215, 220, 223, 225, 226, 227, 228, 233, 236, 238, 239, 240, 241, 243, 245, 246, 248, 274, 276, 279, 280], "talk": [7, 13, 29, 59, 194, 202, 256], "handl": [7, 16, 18, 19, 20, 38, 46, 50, 58, 64, 85, 86, 88, 93, 98, 99, 100, 101, 109, 112, 122, 136, 152, 155, 161, 162, 167, 197, 203, 204, 213, 219, 223, 225, 228, 231, 239, 245, 246, 248, 279, 284], "referenc": [7, 8, 42, 47, 98, 121, 124, 169, 202], "overlin": [7, 18, 66], "normal": [7, 10, 12, 18, 19, 20, 28, 32, 36, 40, 49, 57, 58, 62, 64, 68, 71, 72, 73, 85, 86, 88, 92, 93, 94, 98, 100, 110, 112, 116, 122, 124, 130, 139, 145, 156, 166, 169, 170, 171, 172, 173, 177, 180, 182, 191, 194, 196, 197, 198, 200, 202, 203, 207, 208, 210, 215, 216, 220, 223, 227, 232, 238, 243, 245, 252, 267], "assign": [7, 18, 39, 40, 41, 54, 58, 63, 74, 85, 87, 88, 94, 100, 117, 122, 129, 139, 177, 188, 191, 193, 195, 200, 207, 225, 226, 233, 240, 256, 259, 276], "structur": [7, 10, 11, 15, 18, 20, 37, 39, 40, 46, 49, 50, 56, 58, 83, 85, 88, 89, 94, 101, 102, 104, 121, 170, 172, 193, 194, 197, 200, 202, 203, 204, 219, 223, 225, 226, 227, 231, 232, 240, 242, 245, 246, 276, 284], "suggest": [7, 10, 22, 41, 49, 85, 94, 98, 122, 205, 280], "american": [7, 44, 59], "color": [7, 86, 106, 187, 207, 238, 245, 283], "colour": 7, "quotat": 7, "line_color": [7, 193, 210], "aesthet": [7, 11, 193], "ariti": [7, 193], "term": [7, 10, 11, 12, 16, 18, 20, 24, 28, 40, 49, 58, 59, 60, 62, 63, 64, 66, 77, 81, 82, 83, 85, 88, 89, 94, 98, 102, 106, 108, 114, 117, 124, 126, 129, 132, 134, 136, 137, 151, 156, 168, 169, 172, 174, 177, 182, 184, 188, 190, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 209, 210, 212, 213, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 231, 232, 245, 252, 255, 259, 264, 274, 276, 278, 279, 284], "unrestrict": [7, 47, 245], "necklac": [7, 245], "bracelet": [7, 245], "impli": [7, 11, 12, 18, 32, 36, 40, 49, 88, 104, 172, 193, 198, 200, 207, 215, 217, 223, 225, 228, 231, 232, 245, 259], "turn": [7, 10, 11, 18, 28, 40, 58, 64, 66, 73, 83, 92, 130, 134, 188, 194, 202, 204, 207, 214, 215, 217, 219, 220, 223, 238, 245, 261, 276, 278], "sequenc": [7, 12, 38, 40, 42, 45, 48, 49, 50, 54, 56, 57, 58, 59, 61, 63, 66, 68, 71, 72, 73, 74, 75, 82, 88, 89, 91, 94, 97, 98, 139, 145, 171, 172, 198, 201, 207, 209, 211, 214, 216, 217, 219, 220, 223, 224, 226, 233, 236, 239, 240, 245, 247, 248, 264], "revers": [7, 42, 47, 50, 57, 58, 59, 64, 85, 86, 88, 94, 98, 108, 171, 182, 187, 194, 196, 200, 203, 204, 207, 208, 215, 219, 223, 245, 284], "ambigu": [7, 10, 12, 14, 58, 160, 166, 219, 231, 236], "person": [7, 11], "chebyshev": [7, 38, 58, 85, 200, 203], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 39, 41, 42, 47, 50, 57, 58, 59, 64, 68, 72, 74, 75, 81, 85, 88, 94, 98, 119, 134, 144, 167, 177, 183, 184, 188, 191, 195, 196, 198, 202, 203, 214, 215, 219, 223, 224, 225, 227, 233, 238, 242, 245, 246, 252, 255, 257, 259], "transliter": 7, "russian": 7, "chebyshevt": [7, 66, 207], "orthogonalpolynomi": 7, "t_n": [7, 63, 66, 85, 200, 203, 257], "tens": 7, "inclus": [7, 57, 104, 165, 194, 213, 214, 215, 226], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 63, 83, 200], "she": [7, 226], "extran": [7, 223], "belittl": 7, "obvious": [7, 41, 49, 175, 190, 197, 217], "easili": [7, 10, 18, 20, 30, 58, 59, 81, 83, 94, 98, 99, 116, 134, 170, 190, 203, 206, 207, 212, 219, 220, 223, 225, 226, 239, 278], "straightforward": [7, 20, 49, 59, 94, 217], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 59], "friendli": [7, 40, 83, 220, 222, 225, 226, 240, 285], "mistak": [7, 12, 24, 49, 246], "goe": [8, 20, 29, 94, 214, 217, 226, 276, 279], "content": [8, 13, 40, 58, 59, 93, 195, 198, 200, 203, 206, 207, 235, 240, 243, 244, 264, 265, 266, 267, 268, 269, 270, 271, 275, 277], "setup": [8, 10, 40, 58, 125, 126, 127, 141, 182, 200, 203, 205, 206, 217, 238, 239, 241, 251, 283], "depend": [8, 10, 11, 12, 14, 18, 20, 26, 30, 38, 40, 41, 49, 50, 57, 58, 59, 60, 63, 64, 66, 70, 75, 82, 83, 85, 86, 87, 94, 98, 99, 100, 106, 110, 113, 117, 118, 121, 122, 124, 126, 132, 134, 144, 145, 146, 161, 170, 172, 174, 177, 187, 188, 193, 195, 198, 200, 202, 203, 204, 206, 207, 208, 213, 217, 219, 220, 223, 224, 225, 226, 227, 238, 239, 240, 241, 245, 246, 259, 261, 262, 276, 278], "document": [8, 10, 11, 17, 20, 34, 35, 36, 49, 54, 58, 59, 64, 65, 66, 70, 80, 83, 84, 86, 91, 94, 99, 102, 112, 117, 132, 134, 135, 137, 139, 147, 161, 167, 181, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 200, 203, 207, 217, 221, 223, 225, 226, 236, 238, 240, 241, 243, 245, 252, 259, 260, 263, 274, 276, 277, 283, 284], "auto": [8, 10, 12, 24, 38, 58, 59, 86, 193, 200, 203, 207, 219, 223, 227], "rebuild": [8, 11, 20, 58, 203, 279], "live": [8, 31, 41, 139, 202, 220], "server": 8, "debug": [8, 40, 58, 85, 124, 161, 238, 239, 248], "incompat": [8, 23], "pick": [9, 18, 59, 63, 136, 166, 168, 284], "ignor": [10, 12, 14, 20, 40, 49, 58, 59, 63, 64, 68, 73, 83, 88, 94, 98, 108, 114, 124, 169, 172, 182, 193, 203, 207, 208, 219, 225, 226, 239, 284], "regex": 10, "categori": [10, 194, 263, 270], "lead": [10, 11, 18, 19, 20, 28, 57, 58, 64, 68, 85, 88, 94, 98, 110, 118, 156, 182, 191, 195, 198, 200, 202, 203, 204, 207, 214, 216, 219, 223, 226, 240, 243, 248, 277, 284], "against": [10, 18, 20, 28, 59, 101, 122, 239], "unrel": [10, 58, 65, 195, 276], "capabl": [10, 11, 18, 26, 38, 40, 58, 62, 70, 83, 98, 101, 102, 132, 139, 193, 204, 207, 226, 277, 278, 284, 285], "w": [10, 12, 28, 40, 42, 48, 57, 58, 59, 60, 61, 64, 66, 83, 85, 88, 94, 95, 116, 119, 130, 137, 138, 141, 146, 157, 161, 170, 186, 188, 189, 192, 193, 195, 196, 200, 201, 202, 203, 204, 208, 214, 215, 217, 219, 220, 223, 224, 226, 227, 238, 246, 248, 259, 285], "pythonwarn": 10, "NOT": [10, 88, 108, 152, 156, 171, 174, 236, 239], "blog": [10, 20, 40, 63, 89, 220, 226], "post": [10, 18, 23, 24, 25, 26, 27, 40, 52, 58, 207, 208, 219, 238, 279], "ned": 10, "batcheld": 10, "kanesmethod": [10, 116, 117, 122, 124, 125, 126, 127, 129, 130, 133, 134, 136, 139], "pinjoint": [10, 116, 125, 127, 133], "prismaticjoint": [10, 116, 127, 133], "q_": [10, 58, 116, 187, 220, 223], "u_": [10, 94, 116], "had": [10, 20, 25, 50, 58, 59, 94, 98, 122, 136, 202, 203, 204, 207, 215, 217, 223, 225, 226, 241, 246, 273, 276, 279, 280], "templat": [10, 245], "axi": [10, 32, 51, 63, 64, 68, 69, 71, 72, 74, 80, 83, 85, 91, 94, 101, 106, 111, 116, 122, 124, 126, 129, 130, 131, 133, 136, 139, 140, 141, 144, 145, 169, 182, 184, 186, 188, 190, 191, 193, 198, 226, 252, 254, 257, 259, 262], "parent_axi": [10, 116], "child_axi": [10, 116], "parent": [10, 49, 58, 81, 116, 133, 182, 186, 193, 197, 198, 202, 238, 242, 252, 256, 257], "child": [10, 11, 116, 133, 182, 197, 242], "bodi": [10, 12, 40, 83, 100, 111, 112, 115, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 132, 133, 134, 139, 140, 175, 181, 182, 186, 190, 191, 252, 254, 269], "parent_interfram": [10, 116, 133], "child_interfram": [10, 116, 133], "rotat": [10, 32, 46, 49, 51, 58, 67, 68, 69, 71, 73, 74, 89, 94, 101, 102, 116, 124, 127, 129, 131, 133, 137, 140, 156, 169, 182, 186, 188, 190, 191, 192, 193, 245, 252, 254, 257, 259, 261], "joint_axi": [10, 116, 125, 127, 133], "transform": [10, 11, 28, 32, 37, 40, 54, 57, 58, 59, 60, 62, 63, 66, 73, 91, 94, 106, 108, 116, 124, 133, 144, 165, 167, 169, 174, 192, 195, 198, 200, 202, 203, 209, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 232, 240, 246, 252, 259, 278], "suppos": [10, 19, 20, 50, 57, 58, 59, 83, 194, 196, 200, 202, 203, 207, 214, 217, 223, 225, 236, 245, 257, 262, 276, 278, 284], "pin": [10, 32, 101, 102, 104, 116], "dcm": [10, 113, 116, 122, 124, 139, 182, 190, 191, 252], "q_pin": 10, "inspect": [10, 18, 94, 202, 213, 244, 246, 271], "notic": [10, 12, 20, 49, 50, 56, 58, 94, 160, 181, 197, 217, 233, 234, 245, 246, 276, 278, 279, 284], "theta_pin": 10, "rad": [10, 59, 106, 122, 202], "int_fram": 10, "orient_axi": [10, 113, 116, 182, 184], "align": [10, 40, 68, 94, 116, 191, 192, 207, 225, 238], "orient": [10, 32, 70, 74, 89, 116, 122, 124, 126, 129, 133, 137, 139, 182, 186, 188, 190, 191, 200, 245, 252, 253, 260, 261, 267], "parent_joint_po": [10, 116], "child_joint_po": [10, 116], "parent_point": [10, 116, 125, 127, 133], "child_point": [10, 116, 125, 127, 133], "mass": [10, 75, 110, 111, 112, 113, 115, 116, 117, 121, 122, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 139, 140, 148, 173, 175, 176, 177, 188, 190, 238, 261, 269], "pos_from": [10, 116, 122, 124, 125, 126, 133, 139, 186, 190], "masscent": [10, 113, 116, 119, 125, 133, 137, 139], "parent_fram": [10, 133], "child_fram": [10, 133], "locatenew": [10, 113, 119, 124, 126, 129, 130, 131, 136, 137, 139, 140, 183, 186, 188, 190], "pars": [10, 50, 58, 91, 122, 133, 204, 206, 263, 271], "comprehens": [10, 18, 25, 201, 215, 227, 273], "additional_transl": 10, "recogn": [10, 12, 58, 59, 63, 73, 98, 101, 109, 195, 198, 206, 215, 216, 225, 232, 276], "logic": [10, 11, 18, 20, 33, 34, 35, 36, 39, 58, 60, 83, 85, 98, 164, 166, 167, 171, 207, 209, 215, 223, 227, 245, 276, 277, 278, 280], "node": [10, 11, 38, 52, 58, 85, 100, 104, 114, 148, 173, 182, 192, 197, 207, 214, 226, 231, 242, 279, 283], "maximum": [10, 12, 25, 38, 40, 41, 49, 50, 58, 64, 85, 94, 98, 101, 124, 169, 177, 193, 198, 200, 203, 207, 214, 215, 219, 220, 223, 226, 227, 242, 245], "multipli": [10, 12, 32, 36, 40, 49, 58, 69, 73, 80, 87, 89, 94, 98, 117, 126, 135, 136, 137, 149, 158, 172, 177, 178, 194, 195, 196, 198, 200, 202, 203, 207, 209, 216, 217, 220, 223, 228, 245, 256, 276, 279], "max": [10, 40, 49, 50, 58, 64, 66, 68, 85, 94, 98, 100, 101, 192, 193, 202, 203, 207, 214, 216, 217, 246], "min": [10, 50, 54, 58, 63, 64, 94, 100, 192, 193, 202, 207, 213, 223], "is_perfect_squar": 10, "ntheori": [10, 36, 49, 58, 59, 200, 203, 220, 245], "primetest": [10, 58, 98], "is_squar": [10, 58, 89, 98], "is_prim": [10, 18, 58, 194], "isprim": [10, 36, 59, 98], "divid": [10, 11, 49, 57, 58, 59, 74, 94, 98, 176, 177, 195, 197, 198, 200, 202, 203, 207, 223, 242, 279], "bottom_up": [10, 58], "interactive_travers": 10, "postorder_travers": [10, 58, 279], "preorder_travers": [10, 58, 279], "refactor": [10, 223, 231, 242], "tr": [10, 41, 49, 207, 216], "quantum": [10, 110, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 192, 269], "ever": [10, 11, 20, 64, 191, 194, 203, 217, 223, 240, 243, 279], "helper": [10, 24, 38, 40, 49, 53, 56, 58, 83, 86, 87, 157, 159, 168, 204, 214, 217, 220, 223, 224, 226, 239, 269], "default_sort_kei": [10, 39, 47, 58, 231], "matrixel": [10, 40], "matrixsymbol": [10, 15, 18, 36, 37, 40, 58, 89, 91, 94, 207, 227, 229], "layer": [10, 108, 200, 246], "imprecis": 10, "free_symbol": [10, 11, 24, 40, 58, 67, 85, 89, 161, 179, 182, 203, 213, 220], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 33, 38, 40, 41, 49, 50, 51, 54, 55, 56, 58, 59, 61, 63, 64, 66, 67, 68, 70, 71, 74, 76, 82, 83, 85, 87, 88, 89, 94, 98, 111, 116, 124, 137, 139, 148, 172, 173, 177, 181, 188, 191, 194, 195, 197, 198, 200, 202, 203, 207, 210, 215, 216, 217, 219, 220, 223, 225, 226, 227, 233, 237, 241, 242, 243, 245, 246, 250, 256, 258, 259, 261, 273, 278, 280, 283, 284, 285], "atomicexpr": [10, 58], "concept": [10, 11, 18, 49, 124, 191, 197, 199, 202, 207, 226, 231, 261, 277, 282], "misappli": 10, "noth": [10, 39, 49, 58, 71, 85, 156, 172, 194, 198, 206, 207, 219, 223, 225, 236, 238, 246, 248, 276], "introduc": [10, 19, 24, 54, 57, 58, 66, 83, 94, 99, 102, 122, 124, 129, 130, 131, 135, 172, 177, 191, 198, 199, 203, 204, 207, 214, 217, 220, 227, 243, 270, 277, 280, 282, 284], "21494": 10, "size": [10, 16, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 58, 59, 61, 63, 86, 89, 91, 94, 97, 98, 106, 124, 134, 135, 136, 145, 167, 168, 187, 193, 196, 200, 207, 219, 220, 223, 227, 245, 274], "die": [10, 202, 227], "histor": [10, 11, 14, 20, 59, 223, 227], "21563": 10, "revert": [10, 198, 203], "sample_it": [10, 227], "consequ": [10, 20, 36, 58, 195, 197, 276, 284], "subclass": [10, 11, 18, 20, 34, 35, 40, 58, 65, 69, 71, 85, 88, 141, 147, 156, 160, 161, 162, 167, 169, 170, 193, 194, 196, 197, 198, 202, 203, 207, 227, 238, 239, 240, 243, 246, 252, 256, 279], "kei": [10, 11, 12, 14, 23, 33, 36, 39, 47, 49, 50, 58, 59, 60, 63, 74, 87, 89, 94, 97, 98, 101, 121, 122, 164, 167, 172, 191, 193, 195, 197, 198, 199, 200, 202, 203, 204, 205, 207, 219, 223, 224, 225, 227, 231, 242, 245, 246, 248, 280, 281, 284], "domainmatrix": [10, 90, 94, 199, 202, 205, 270], "switch": [10, 49, 56, 85, 98, 108, 200, 203], "21402": 10, "earlier": [10, 112, 204, 208, 217, 219, 246, 257, 259, 279], "could": [10, 11, 12, 16, 18, 20, 25, 26, 27, 35, 40, 51, 58, 70, 83, 85, 88, 116, 119, 122, 132, 136, 172, 175, 177, 194, 197, 200, 202, 204, 207, 215, 217, 219, 223, 224, 225, 226, 227, 228, 231, 232, 239, 243, 257, 258, 276, 279, 284], "traceback": [10, 12, 15, 18, 19, 20, 23, 25, 26, 27, 28, 33, 34, 35, 40, 41, 50, 58, 59, 62, 68, 85, 88, 89, 90, 91, 92, 94, 96, 97, 100, 108, 192, 194, 197, 198, 200, 203, 206, 214, 215, 223, 225, 226, 236, 238, 239, 241, 243, 245, 246, 248, 276, 280], "typeerror": [10, 12, 19, 20, 25, 33, 34, 35, 50, 58, 68, 73, 88, 90, 92, 96, 108, 146, 214, 215, 239, 246], "unsupport": [10, 12, 15, 108, 207], "operand": [10, 12, 50, 58, 183, 202, 255], "dict": [10, 12, 14, 18, 24, 25, 27, 28, 40, 50, 58, 59, 60, 74, 75, 88, 89, 94, 98, 100, 117, 118, 152, 164, 167, 178, 180, 182, 193, 196, 197, 198, 200, 202, 203, 204, 205, 207, 219, 220, 223, 224, 225, 226, 227, 231, 238, 239, 245, 252, 285], "solve_lin_si": [10, 205], "heurisch": [10, 85], "smith_normal_form": [10, 95, 196], "newmatrix": 10, "holonom": [10, 79, 82, 123, 124, 125, 126, 132, 134, 135, 263, 269, 270], "polymatrix": 10, "risch": [10, 85, 274], "broken": [10, 47, 58, 190, 207, 223, 248], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 70, 91, 94, 98, 117, 118, 119, 121, 131, 132, 183, 189, 197, 202, 207, 214, 217, 219, 223, 241, 242, 255, 261, 269], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 39, 112, 140, 202, 204, 238, 239, 241, 277, 278], "perhap": [10, 14, 40, 58, 88, 98, 157, 197, 225, 240, 273], "tableform": [10, 225, 248], "isn": [10, 20, 85, 112, 122, 226, 278], "advis": [10, 18, 28, 39, 116, 122], "usecas": 10, "unclear": [10, 18, 112], "line2dbaseseri": [10, 193], "linecollect": [10, 193], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 193], "get_point": [10, 193], "uniformli": [10, 16, 49, 74, 75, 101, 106, 193, 241], "adapt": [10, 106, 193, 213, 225, 245, 251], "get_data": [10, 193, 249], "dft": [10, 61, 111], "fourier": [10, 58, 66, 85, 111, 165, 211, 264], "as_explicit": [10, 91, 94, 111, 229], "exp": [10, 11, 12, 14, 18, 20, 26, 28, 32, 38, 40, 48, 57, 58, 60, 62, 63, 64, 66, 76, 77, 80, 83, 85, 89, 91, 94, 98, 110, 148, 151, 167, 173, 192, 197, 198, 203, 204, 207, 209, 214, 217, 219, 223, 224, 225, 226, 227, 228, 245, 262, 274, 278, 280, 285], "discret": [10, 38, 40, 41, 48, 50, 58, 59, 66, 98, 172, 177, 209, 212, 223, 225, 226, 264, 273], "unevalu": [10, 11, 18, 19, 20, 34, 35, 38, 50, 57, 58, 64, 66, 75, 85, 98, 108, 149, 153, 160, 161, 172, 203, 206, 214, 215, 219, 223, 225, 226, 227, 274, 278, 279, 285], "represent": [10, 11, 20, 25, 32, 39, 40, 41, 49, 52, 58, 59, 64, 66, 70, 78, 80, 82, 83, 85, 87, 88, 89, 90, 91, 97, 98, 105, 106, 111, 112, 113, 121, 132, 136, 137, 141, 161, 166, 167, 169, 170, 172, 174, 181, 187, 188, 190, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 209, 217, 219, 220, 223, 226, 227, 232, 233, 248, 252, 255, 262, 270, 274, 276, 279], "21626": 10, "expos": [10, 39, 227], "mutat": [10, 108, 196, 198, 227], "flat": [10, 72, 89, 239], "todok": [10, 89], "ey": [10, 89, 90, 91, 92, 93, 94, 96, 196, 202, 228, 248, 280], "converg": [10, 40, 57, 62, 66, 85, 98, 141, 203, 210, 214, 217, 274], "legacy_matrix": [10, 85], "discontinu": [10, 38, 62, 64, 85, 101, 210, 225], "theano_cod": 10, "aesara_cod": [10, 207], "theanoprint": 10, "aesaraprint": [10, 207], "predic": [10, 11, 33, 34, 38, 100, 203, 219, 245, 264], "experienc": [10, 41], "big": [10, 12, 16, 18, 42, 58, 60, 98, 139, 152, 192, 206, 207, 214, 248, 274, 276], "registr": 10, "add_handl": 10, "remove_handl": [10, 33], "multipledispatch": [10, 33], "regist": [10, 33, 34, 35, 59, 168], "register_mani": [10, 34, 35], "askprimehandl": 10, "staticmethod": [10, 238], "register_handl": [10, 33], "prime": [10, 18, 33, 34, 35, 36, 49, 56, 57, 58, 59, 61, 63, 66, 98, 143, 194, 195, 197, 198, 200, 203, 217, 219, 220, 227, 242], "Not": [10, 11, 19, 20, 58, 63, 88, 108, 207, 226, 227, 245, 278, 285], "primepred": [10, 36], "q": [10, 11, 12, 15, 18, 22, 24, 31, 32, 33, 34, 35, 36, 37, 40, 50, 54, 57, 58, 59, 66, 75, 80, 81, 83, 85, 87, 89, 94, 100, 101, 108, 109, 116, 117, 118, 121, 122, 124, 126, 131, 133, 134, 135, 136, 139, 140, 141, 152, 166, 172, 175, 182, 183, 184, 186, 187, 188, 190, 193, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 209, 217, 220, 223, 225, 227, 232, 233, 248, 252, 255, 256, 258, 261, 280, 284], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 227], "normaldistribut": [10, 227], "20078": 10, "misspel": 10, "absorbing_prob": [10, 227], "absorb": [10, 11, 83, 223, 227, 274], "probabilit": [10, 227], "shutil": 10, "power": [10, 12, 23, 32, 37, 40, 48, 49, 50, 59, 61, 62, 64, 80, 81, 83, 85, 87, 89, 91, 98, 99, 108, 122, 139, 144, 155, 158, 171, 174, 177, 178, 182, 194, 195, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 211, 214, 216, 219, 220, 223, 225, 226, 227, 231, 240, 245, 264, 273, 274, 275, 276, 277, 279, 280, 283], "immut": [10, 11, 58, 90, 93, 96, 191, 198, 223, 228, 267, 273, 280], "coordsystem": [10, 60], "explicit": [10, 11, 18, 20, 24, 25, 50, 57, 58, 62, 74, 75, 85, 97, 98, 117, 121, 122, 126, 136, 140, 191, 194, 203, 206, 207, 209, 215, 217, 223, 224, 225, 226, 242], "appropi": 10, "patch": [10, 60, 207], "real": [10, 11, 12, 15, 16, 18, 19, 20, 24, 25, 32, 34, 36, 37, 38, 40, 50, 58, 59, 60, 62, 63, 64, 65, 66, 70, 74, 75, 80, 83, 85, 88, 89, 91, 94, 98, 100, 104, 110, 122, 139, 141, 144, 145, 152, 170, 184, 192, 195, 198, 202, 203, 204, 207, 208, 210, 214, 215, 217, 219, 222, 223, 225, 226, 227, 232, 236, 240, 249, 278, 284, 285], "similarli": [10, 18, 54, 58, 59, 66, 70, 94, 101, 102, 108, 117, 137, 193, 194, 197, 202, 204, 214, 215, 217, 223, 238, 246, 257, 258, 280], "manifold": [10, 60], "track": [10, 12, 49, 58, 62, 66, 121, 133, 137, 156, 191, 214, 233, 274], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 60], "constructor": [10, 11, 20, 34, 35, 39, 40, 45, 49, 50, 51, 58, 65, 66, 87, 92, 94, 126, 165, 166, 170, 174, 193, 194, 196, 197, 198, 207, 215, 223, 232, 240, 256, 264, 275, 279], "str": [10, 11, 20, 34, 39, 40, 41, 50, 58, 59, 60, 62, 67, 68, 71, 74, 75, 86, 88, 91, 98, 100, 106, 116, 117, 119, 139, 156, 166, 172, 182, 184, 186, 193, 198, 202, 207, 219, 223, 227, 243, 245, 246, 248, 252], "unord": [10, 12, 58, 98, 198, 226, 245, 246], "lambidfi": 10, "guess": [10, 14, 39, 59, 62, 83, 86, 187, 200, 203, 217, 220, 279], "construct": [10, 16, 23, 34, 35, 39, 40, 58, 60, 64, 66, 68, 72, 74, 86, 91, 94, 99, 102, 112, 113, 117, 119, 122, 124, 157, 161, 170, 171, 174, 178, 194, 197, 198, 200, 202, 203, 207, 220, 225, 227, 228, 232, 240, 242, 243, 256, 258, 259, 276, 279, 280, 284], "superclass": [10, 11, 18, 57, 58, 85, 91, 198], "scalar": [10, 26, 32, 58, 60, 73, 87, 89, 91, 94, 99, 119, 122, 171, 182, 183, 184, 189, 191, 194, 196, 200, 207, 223, 228, 240, 246, 252, 254, 255, 256, 257, 258, 260, 262, 267, 269], "boolean": [10, 11, 20, 21, 23, 33, 34, 35, 36, 37, 38, 40, 58, 64, 68, 72, 73, 74, 75, 86, 89, 94, 95, 98, 101, 106, 108, 117, 157, 182, 184, 187, 193, 196, 198, 200, 202, 204, 207, 219, 223, 225, 227, 245, 255, 280], "sens": [10, 11, 16, 18, 20, 32, 36, 38, 39, 58, 60, 63, 66, 83, 88, 117, 124, 177, 182, 191, 194, 200, 202, 216, 217, 219, 226, 227, 239, 240, 245, 261, 284], "exponenti": [10, 12, 18, 32, 40, 49, 54, 58, 59, 63, 85, 88, 89, 94, 98, 100, 158, 174, 204, 219, 223, 226, 227, 275, 276, 280], "trick": [10, 11, 12, 54, 217, 233], "treat": [10, 11, 18, 19, 20, 24, 27, 48, 49, 56, 58, 63, 66, 73, 74, 94, 100, 119, 122, 145, 182, 188, 195, 197, 198, 200, 202, 203, 204, 206, 207, 214, 215, 217, 219, 220, 223, 225, 231, 239, 242, 259, 276, 280], "cdot": [10, 18, 41, 57, 63, 66, 76, 80, 81, 83, 89, 91, 94, 98, 109, 111, 137, 177, 188, 190, 191, 192, 194, 195, 203, 210, 214, 217, 223, 225, 228, 229, 258, 259, 278, 279, 284], "attributeerror": [10, 18, 58, 94, 226, 246, 280], "as_coeff_mul": [10, 58, 83, 91], "tri": [10, 11, 12, 18, 23, 25, 39, 58, 66, 74, 83, 85, 124, 136, 167, 194, 195, 202, 207, 209, 219, 223, 224, 226, 238, 276, 284], "benchmark": [10, 124, 138], "runtest": [10, 238], "tmpfile": 10, "random_complex_numb": [10, 58], "verify_numer": [10, 58], "test_derivative_numer": [10, 58], "_randrang": [10, 58, 59], "_randint": [10, 58, 200], "as_poli": [10, 58, 195, 203], "as_expr": [10, 58, 94, 197, 202, 203, 204, 280], "combintor": 10, "perm_cycl": [10, 50, 207], "printer": [10, 11, 20, 50, 58, 66, 86, 94, 99, 187, 232, 239, 240, 246, 275, 279], "init_print": [10, 30, 40, 50, 62, 85, 86, 94, 102, 187, 194, 195, 206, 274, 278, 280, 283, 284, 285], "problemat": [10, 20, 197], "affect": [10, 18, 20, 57, 58, 94, 181, 203, 225, 226, 257], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 62], "significantli": [10, 40, 62, 112, 134, 198, 209, 239, 242], "slower": [10, 20, 54, 94, 197, 202, 246, 273], "_sympifi": [10, 58, 91, 279], "strict": [10, 11, 49, 50, 58, 62, 63, 89, 94, 200, 203, 225, 226, 245, 248, 284], "lot": [10, 49, 58, 76, 83, 85, 94, 122, 139, 193, 206, 210, 220, 226, 238, 284], "secur": 10, "whatev": [10, 12, 20, 49, 58, 59, 219, 223, 224, 226, 246], "__repr__": [10, 207], "12524": 10, "repr": [10, 40, 85, 166, 197, 202, 207, 238, 283], "plenti": 10, "_sympy_": [10, 58], "disabl": [10, 11, 58, 59, 83, 85, 98, 200, 203, 207, 215, 223, 225, 236, 238, 241, 245], "constant": [10, 11, 23, 24, 27, 38, 40, 57, 58, 62, 64, 66, 82, 83, 85, 101, 102, 108, 121, 122, 124, 139, 140, 149, 153, 159, 175, 176, 178, 179, 180, 183, 186, 188, 193, 195, 198, 200, 202, 203, 204, 207, 209, 214, 217, 219, 220, 223, 224, 225, 226, 227, 238, 240, 245, 246, 255, 259, 262, 269, 274, 280, 285], "lh": [10, 14, 23, 40, 48, 58, 205, 207, 223, 225, 226, 258], "tensexpr": [10, 109, 233], "substitute_indic": 10, "danger": [10, 195], "tensor_head": [10, 109, 233], "shorter": [10, 28, 58, 68, 112, 134, 181, 194, 198, 207, 240, 248], "creation": [10, 12, 20, 58, 60, 94, 113, 119, 129, 132, 133, 134, 135, 136, 146, 156, 160, 161, 162, 172, 190, 191, 207, 227, 232, 240, 246], "_dummy_fmt": 10, "l_": [10, 85, 94, 192], "obsolet": 10, "dummy_nam": [10, 233], "clearer": [10, 256], "metric_symmetri": [10, 233], "set_metr": [10, 233], "delta": [10, 12, 40, 42, 52, 63, 81, 83, 87, 106, 136, 144, 172, 192, 207, 214, 220, 223, 227, 228, 233], "epsilon": [10, 12, 57, 59, 66, 83, 85, 143, 207, 233], "latter": [10, 15, 20, 40, 49, 58, 63, 66, 83, 98, 194, 198, 202, 207, 217, 220, 233, 240, 245, 246, 276], "involv": [10, 12, 16, 18, 23, 25, 35, 37, 49, 57, 58, 59, 63, 70, 71, 83, 85, 98, 108, 113, 117, 122, 151, 161, 167, 169, 179, 190, 191, 194, 195, 198, 200, 202, 203, 204, 208, 209, 214, 215, 216, 217, 219, 220, 223, 225, 228, 246, 284], "obscur": [10, 18], "young": [10, 101, 233], "tableau": 10, "favor": 10, "tensorindex": [10, 233], "tensor_indic": [10, 109, 233], "denot": [10, 11, 12, 16, 49, 50, 58, 60, 66, 80, 81, 83, 85, 87, 88, 89, 94, 98, 100, 108, 177, 182, 188, 193, 194, 195, 200, 202, 210, 214, 215, 217, 223, 227, 232, 233, 252, 254, 256, 257, 259, 261], "set_dimens": 10, "unit_system": [10, 179], "set_quantity_dimens": [10, 175], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 175], "set_global_relative_scale_factor": [10, 179], "get_dimensional_expr": 10, "unitsystem": [10, 180], "dimension": [10, 38, 40, 42, 60, 70, 71, 72, 73, 74, 91, 94, 102, 109, 139, 146, 148, 158, 174, 188, 189, 193, 194, 200, 202, 203, 206, 207, 225, 226, 228, 229, 233, 239, 261, 285], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 29, 203], "emptyset": [10, 18, 25, 38, 39, 88, 207, 215, 226, 252, 285], "is_empti": [10, 18, 50], "unknown": [10, 11, 15, 18, 19, 20, 27, 32, 58, 59, 102, 157, 205, 222, 223, 224, 225, 226, 245, 285], "empti": [10, 11, 18, 24, 25, 27, 34, 38, 39, 40, 41, 49, 53, 57, 58, 70, 73, 74, 75, 88, 89, 94, 98, 117, 136, 167, 180, 198, 202, 203, 207, 213, 214, 215, 217, 223, 225, 226, 238, 240, 245, 248, 279], "individu": [10, 18, 20, 23, 58, 64, 69, 74, 75, 87, 89, 91, 94, 108, 137, 144, 162, 166, 192, 215, 223, 238, 280], "denest": [10, 58, 203, 219, 225, 245], "particl": [10, 113, 115, 116, 117, 122, 126, 127, 132, 134, 136, 139, 140, 148, 151, 158, 159, 170, 172, 175, 177, 190, 233, 269], "rigidbodi": [10, 113, 115, 117, 121, 124, 129, 130, 131, 132, 137, 139, 269], "potential_energi": [10, 116, 117, 119, 131, 137], "energi": [10, 110, 113, 117, 119, 122, 131, 148, 173, 177, 188, 233, 259, 269], "setter": [10, 122, 139], "getter": [10, 58, 122, 139], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 23, 25, 40, 49, 50, 58, 70, 74, 85, 94, 98, 101, 108, 117, 121, 136, 137, 140, 160, 161, 177, 182, 192, 194, 200, 202, 205, 207, 224, 226, 227, 231, 238, 240, 262, 274], "unpack": [10, 58, 89, 94, 245, 246], "emul": [10, 219, 226, 228, 246], "is_deriv": [10, 58], "as_finite_differ": [10, 38, 58, 274], "17881": 10, "get_matrix": [10, 233], "__getitem__": [10, 58, 89, 232], "__iter__": [10, 50, 58, 219], "_components_data_full_destroi": 10, "__pow__": [10, 89, 198, 204], "flaw": 10, "replace_with_arrai": [10, 233, 234], "cach": [10, 18, 63, 83, 194, 203, 207, 236, 241, 242], "safe": [10, 58, 98, 197, 203, 225, 231, 274], "squar": [10, 12, 18, 24, 25, 28, 32, 36, 40, 49, 58, 59, 64, 74, 75, 83, 85, 89, 90, 94, 97, 98, 101, 108, 110, 134, 135, 158, 174, 182, 192, 196, 198, 200, 202, 203, 204, 207, 215, 219, 220, 223, 226, 227, 278], "jordan": [10, 83, 89, 94, 205, 223, 225, 226], "band": [10, 89, 97], "eigenvalu": [10, 89, 94, 122, 124, 166, 169, 278], "elif": [10, 18, 19, 20, 64], "getsourc": [10, 246, 250], "sum": [10, 16, 18, 24, 40, 47, 50, 57, 58, 61, 63, 66, 71, 73, 81, 83, 85, 87, 88, 89, 91, 94, 98, 104, 119, 134, 151, 155, 158, 166, 169, 171, 172, 192, 194, 195, 197, 198, 202, 203, 204, 207, 209, 210, 212, 214, 216, 217, 219, 220, 223, 225, 226, 227, 228, 229, 231, 233, 242, 245, 284], "meter": [10, 101, 102, 143, 146, 175, 177, 178, 179], "si": [10, 20, 66, 82, 83, 145, 174, 175, 177, 178, 179, 207], "cg": [10, 151, 169], "aris": [10, 18, 19, 58, 63, 83, 85, 169, 191, 197, 202], "scale": [10, 67, 68, 69, 73, 74, 75, 86, 101, 152, 173, 175, 177, 179, 180, 187, 191, 193, 203, 210, 227, 259, 261], "kilomet": [10, 178, 179], "1000": [10, 12, 40, 42, 58, 59, 62, 91, 98, 139, 177, 178, 179, 192, 206, 207, 216], "dimensionsystem": [10, 174], "14318": 10, "duplic": [10, 12, 49, 52, 59, 64, 66, 94, 98, 215, 223, 245, 277], "flatten": [10, 39, 58, 197, 229, 234, 245, 246], "neither": [10, 18, 19, 36, 58, 146, 167, 193, 203, 214, 215, 216, 223, 233, 246, 252, 261, 284], "polymorph": 10, "anymor": [10, 193], "temporarili": [10, 58], "point3d": [10, 71, 72, 73, 145], "p1": [10, 41, 49, 50, 54, 57, 68, 70, 71, 72, 73, 74, 101, 108, 113, 116, 126, 139, 141, 186, 193, 197, 198, 200, 204, 216, 227, 228], "p2": [10, 19, 49, 50, 57, 68, 70, 71, 72, 73, 74, 101, 108, 113, 116, 139, 186, 193, 197, 198, 200, 204, 216, 227], "conflict": [10, 64, 98, 108, 122, 240], "throughout": [11, 83, 88, 200, 210, 226, 276], "elsewher": [11, 18, 63, 87, 124, 196, 238], "termnam": 11, "antideriv": [11, 64, 66, 85, 223, 274], "frac": [11, 16, 18, 20, 38, 57, 58, 59, 60, 63, 64, 66, 83, 85, 94, 98, 100, 108, 126, 137, 175, 187, 188, 190, 191, 192, 196, 200, 203, 207, 209, 210, 214, 217, 220, 223, 224, 226, 227, 228, 245, 259, 261, 274, 278, 279, 283, 284], "indefinit": [11, 32, 64, 82, 83, 85, 94, 198, 200, 201, 203, 212, 274], "integr": [11, 12, 15, 22, 30, 32, 38, 50, 57, 58, 60, 63, 64, 76, 77, 78, 81, 87, 89, 94, 97, 98, 108, 110, 117, 122, 132, 139, 158, 167, 170, 173, 176, 181, 183, 188, 192, 194, 197, 198, 200, 203, 204, 207, 209, 210, 217, 223, 224, 227, 240, 248, 252, 255, 256, 259, 260, 264, 267, 275, 278, 283], "primit": [11, 49, 58, 59, 66, 98, 166, 170, 194, 195, 197, 198, 200, 202, 203, 206, 207, 220, 274], "terminologi": [11, 22, 233], "tupl": [11, 20, 24, 26, 27, 32, 34, 35, 38, 39, 40, 41, 49, 50, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 80, 83, 85, 89, 94, 97, 98, 100, 101, 102, 106, 113, 116, 117, 119, 121, 134, 135, 137, 139, 141, 156, 157, 158, 161, 166, 169, 170, 171, 172, 182, 186, 191, 193, 194, 196, 197, 198, 200, 204, 205, 207, 208, 209, 213, 215, 219, 220, 223, 224, 225, 226, 227, 228, 232, 233, 238, 239, 240, 241, 245, 246, 248, 252, 256, 274, 279, 280, 283], "subexpress": [11, 20, 40, 58, 64, 89, 112, 114, 202, 203, 207, 214, 219, 226, 240, 246, 273], "togeth": [11, 12, 16, 40, 49, 58, 62, 87, 94, 98, 132, 158, 169, 177, 191, 194, 198, 200, 202, 203, 206, 207, 219, 223, 225, 227, 238, 239, 245, 278, 284], "walk": [11, 40, 42, 58, 164, 167, 217], "extract": [11, 25, 27, 28, 38, 58, 85, 89, 91, 94, 98, 109, 124, 132, 181, 191, 200, 202, 203, 225, 226, 227, 238, 240, 245], "rebuilt": [11, 279], "atom": [11, 23, 40, 50, 58, 85, 88, 89, 110, 173, 197, 204, 207, 225, 226, 232], "queri": [11, 18, 19, 20, 33, 36, 37, 38, 40, 58, 70, 203, 219, 227], "is_real": [11, 18, 20, 25, 58, 60, 64, 65, 94, 184, 207, 232], "restrict": [11, 18, 20, 23, 40, 47, 58, 59, 66, 94, 101, 102, 172, 194, 197, 202, 204, 222], "never": [11, 18, 20, 58, 64, 85, 174, 203, 204, 207, 215, 225, 227, 236, 256, 276, 277], "is_": [11, 20, 58], "leav": [11, 18, 20, 26, 27, 40, 58, 85, 94, 98, 118, 132, 156, 172, 214, 242, 273, 279, 284], "recurs": [11, 12, 15, 18, 20, 38, 58, 63, 83, 85, 88, 89, 98, 124, 193, 200, 203, 204, 207, 208, 212, 214, 219, 225, 226, 231, 236, 238, 242, 243, 245, 275, 284], "canonic": [11, 45, 58, 216, 233, 264], "excess": 11, "discourag": [11, 18, 58, 219], "expens": [11, 20, 58, 136, 216, 223, 224, 225, 241, 280], "matrix": [11, 15, 16, 18, 22, 26, 27, 32, 40, 47, 50, 58, 59, 60, 66, 73, 83, 85, 87, 89, 90, 92, 93, 96, 97, 99, 100, 108, 109, 111, 113, 116, 117, 118, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 139, 140, 141, 144, 145, 147, 155, 156, 161, 166, 167, 169, 171, 172, 174, 177, 181, 182, 191, 192, 194, 196, 200, 202, 205, 207, 208, 215, 217, 219, 220, 223, 225, 226, 228, 229, 231, 232, 233, 234, 239, 240, 245, 246, 248, 252, 254, 255, 257, 261, 267, 275, 278, 279, 284, 285], "sympifi": [11, 12, 18, 19, 40, 62, 68, 88, 137, 145, 170, 172, 182, 183, 197, 198, 273, 279], "bound": [11, 23, 36, 40, 41, 57, 58, 67, 68, 69, 71, 73, 74, 85, 98, 170, 198, 200, 202, 203, 207, 213, 223, 225, 226, 227, 232, 242, 248, 252], "dummi": [11, 40, 54, 57, 58, 64, 83, 85, 94, 122, 139, 167, 172, 197, 198, 202, 203, 204, 213, 214, 215, 217, 219, 223, 226, 231, 233, 236, 240, 245, 246], "ration": [11, 18, 20, 33, 35, 36, 38, 40, 57, 58, 62, 63, 64, 66, 68, 71, 73, 75, 79, 83, 85, 86, 91, 94, 98, 100, 108, 141, 174, 192, 195, 200, 201, 202, 204, 207, 212, 215, 216, 217, 219, 220, 222, 225, 226, 227, 245, 252, 275, 276, 279, 283], "unequ": [11, 12, 14, 58, 101, 207], "accident": 11, "clash": [11, 31, 58, 94], "contrast": [11, 20, 57, 58, 126, 197, 217, 223, 278], "_eval_": 11, "_eval_deriv": [11, 20, 58, 66], "overrid": [11, 12, 40, 58, 67, 68, 74, 100, 170, 207, 232, 239, 240, 245, 246], "pre": [11, 39, 40, 58, 192, 193, 208, 216, 219, 225, 226, 238, 257, 261, 279], "dispatch": [11, 34, 35, 36, 58, 59, 167, 207, 226, 242], "shorthand": [11, 12, 18, 20, 58, 88, 166, 202, 215, 236], "stand": [11, 57, 58, 139, 195, 197, 198, 204], "reserv": [11, 18, 122, 233, 240, 280], "smaller": [11, 40, 49, 50, 58, 59, 63, 66, 74, 85, 91, 98, 134, 195, 197, 200, 203, 210, 216, 217, 225, 245, 273, 284], "children": [11, 58, 59, 197, 242], "leaf": [11, 197, 207, 216, 279], "strictli": [11, 12, 15, 17, 18, 36, 38, 58, 66, 94, 98, 108, 200, 219, 225], "dag": 11, "map": [11, 18, 20, 38, 39, 40, 48, 49, 50, 58, 59, 70, 74, 81, 83, 85, 88, 89, 98, 106, 117, 126, 150, 161, 162, 167, 182, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 214, 219, 223, 224, 225, 226, 227, 231, 232, 239, 242, 245, 246, 248, 252], "colloqui": [11, 22], "lambda": [11, 12, 20, 23, 26, 34, 35, 38, 40, 49, 50, 58, 59, 60, 64, 85, 89, 90, 91, 94, 97, 98, 100, 122, 135, 136, 139, 140, 157, 193, 200, 202, 203, 207, 208, 215, 216, 219, 223, 225, 226, 227, 228, 236, 245, 246, 252, 254, 257, 273, 280], "hyper": [11, 58, 63, 66, 77, 80, 207, 209, 217, 219, 225, 227, 284], "primepi": [11, 20, 98], "divisor_sigma": [11, 98], "undefin": [11, 20, 25, 34, 35, 38, 58, 64, 65, 66, 85, 91, 100, 113, 191, 202, 213, 214, 217, 246, 274, 285], "interchang": [11, 54, 57, 83, 223], "memori": [11, 40, 58, 98, 203, 228, 239, 242], "maintain": [11, 12, 58, 59, 98, 102, 207, 215, 216, 223, 226, 242], "mental": 11, "hidden": [11, 181], "state": [11, 16, 18, 49, 56, 58, 66, 98, 101, 108, 110, 116, 117, 118, 121, 124, 126, 140, 144, 148, 149, 151, 152, 153, 155, 156, 157, 161, 164, 166, 167, 168, 169, 171, 172, 203, 207, 216, 217, 219, 227, 242, 269, 280], "hashabl": [11, 55, 83, 245], "repl": [11, 233], "intermedi": [11, 40, 41, 81, 89, 116, 122, 124, 129, 133, 156, 166, 174, 175, 182, 186, 190, 226, 240, 281], "execut": [11, 18, 30, 40, 86, 89, 139, 193, 207, 223, 226, 236, 238, 240, 241, 246, 248, 251, 263, 278, 283], "idiom": [11, 249, 276, 277], "anti": [11, 32, 36, 54, 64, 85, 89, 144, 149, 233], "frown": 11, "upon": [11, 18, 40, 58, 98, 121, 124, 134, 135, 136, 139, 166, 172, 188, 190, 191, 215, 223, 232, 239, 259, 284], "lowercas": [11, 12, 223, 238, 274], "is_integ": [11, 18, 20, 58, 184, 207, 232], "capit": [11, 57, 59, 108, 223], "wherea": [11, 16, 18, 36, 40, 59, 68, 74, 83, 88, 108, 177, 194, 197, 203, 207, 225, 226, 245, 284], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 58, 62, 66, 91, 98, 122, 139, 206, 214, 217, 219, 226, 241, 257], "isinst": [11, 15, 18, 20, 40, 58, 89, 91, 108, 197, 198, 207, 208, 219, 228, 231, 240, 279], "ship": [11, 99], "session": [11, 31, 40, 58, 70, 85, 187, 191, 197, 243, 276, 283], "sort": [11, 23, 34, 35, 39, 40, 47, 50, 54, 83, 85, 88, 94, 97, 98, 109, 112, 117, 156, 172, 177, 181, 193, 200, 203, 204, 214, 219, 220, 223, 224, 225, 231, 233, 238, 240, 245, 256, 276, 278, 279], "numberkind": [11, 15, 58, 89, 215], "matrixkind": [11, 15, 58, 89, 215], "booleankind": [11, 58], "ring": [11, 61, 81, 94, 95, 190, 195, 196, 200, 202, 203, 204, 205, 206, 207, 245], "classif": [11, 17, 58, 223, 224], "lamda": [11, 91, 207, 215, 227, 280], "\u03bb": [11, 280], "lambdifi": [11, 20, 26, 40, 66, 124, 207, 225, 239, 244, 271, 275], "matrixexpr": [11, 20, 89, 91, 92], "mutabl": [11, 12, 41, 58, 90, 91, 92, 101, 198, 207, 208, 219, 228, 280], "dens": [11, 89, 91, 93, 94, 196, 202, 203, 228, 267, 279], "underli": [11, 40, 50, 56, 58, 87, 94, 106, 122, 167, 180, 225, 226, 227], "quit": [11, 16, 20, 66, 94, 98, 124, 190, 193, 204, 206, 217, 225, 245, 261, 276, 279], "rung": [11, 38, 80], "kutta": [11, 80], "condit": [11, 18, 19, 23, 40, 49, 58, 60, 64, 66, 76, 77, 80, 81, 82, 85, 88, 94, 98, 100, 101, 102, 104, 108, 114, 118, 124, 132, 136, 139, 141, 186, 192, 204, 207, 210, 217, 220, 222, 223, 225, 226, 227, 232, 284], "loss": [11, 40, 83, 172, 239, 258], "stabil": [11, 49, 54, 56, 62, 108, 136, 231], "focus": [11, 26, 200, 220, 222, 225, 226, 285], "is_numb": [11, 18, 58, 66, 85], "infin": [11, 18, 23, 36, 57, 58, 63, 64, 66, 71, 83, 85, 94, 145, 198, 200, 203, 207, 212, 213, 214, 215, 219, 222, 223, 227], "resembl": [11, 60, 66, 85, 232], "zoo": [11, 14, 18, 36, 58, 63, 64, 66, 85, 214, 216, 219], "data": [11, 16, 40, 49, 58, 59, 66, 85, 94, 99, 106, 117, 151, 193, 194, 197, 198, 200, 203, 204, 207, 219, 232, 233, 238, 240, 242, 245, 249], "effici": [11, 16, 18, 38, 40, 42, 49, 54, 58, 61, 62, 63, 74, 75, 91, 94, 98, 99, 108, 116, 117, 139, 192, 195, 196, 197, 198, 200, 203, 204, 205, 206, 219, 220, 225, 239, 246, 273, 279, 280, 284], "act": [11, 39, 48, 49, 50, 54, 58, 66, 74, 87, 88, 94, 101, 104, 113, 116, 121, 122, 127, 135, 144, 156, 161, 164, 165, 215, 226, 228, 257, 261, 273], "pprint": [11, 12, 20, 25, 38, 39, 60, 66, 85, 94, 98, 108, 144, 192, 207, 208, 215, 219, 223, 224, 226, 227, 245, 283], "inequ": [11, 18, 19, 20, 22, 58, 193, 200, 215, 217, 221, 264], "neq": [11, 20, 58, 64, 66, 83, 85, 89, 177, 191, 192, 200, 203, 220, 223, 225, 284], "ne": [11, 14, 18, 58, 59, 63, 64, 71, 83, 98, 195, 197, 200, 217, 223, 227], "hold": [11, 12, 20, 35, 39, 49, 54, 58, 59, 60, 64, 66, 80, 83, 94, 97, 100, 108, 110, 116, 118, 119, 137, 168, 203, 217, 219, 223, 227, 240, 284], "singleton": [11, 50, 88, 226, 279], "gotcha": [11, 13, 58, 191, 246, 277, 285], "somehow": [11, 20], "simpler": [11, 19, 20, 58, 62, 66, 82, 83, 129, 191, 200, 216, 217, 219, 223, 225, 226, 284], "adject": [11, 227], "heurist": [11, 18, 50, 83, 85, 89, 200, 201, 214, 216, 219, 225, 226, 238, 274, 284], "appar": [11, 12, 58, 248, 284], "commut": [11, 18, 32, 36, 39, 49, 50, 54, 58, 60, 81, 85, 94, 149, 156, 159, 160, 161, 171, 172, 177, 184, 191, 195, 198, 199, 200, 201, 203, 207, 214, 215, 217, 223, 233, 269, 270, 279], "law": [11, 39, 132, 175, 191, 195], "xreplac": [11, 58, 89, 94, 182], "knowledg": [11, 57, 58, 59, 202, 223, 279, 282], "round": [11, 20, 26, 38, 40, 58, 62, 63, 64, 94, 145, 202, 203, 214, 216, 227], "analyt": [11, 30, 63, 66, 83, 94, 132, 223, 274], "implicitli": [11, 18, 19, 20, 50, 58, 85, 194, 197, 225], "independ": [11, 12, 20, 36, 38, 40, 49, 57, 58, 60, 66, 75, 83, 85, 87, 94, 108, 117, 118, 122, 124, 126, 134, 136, 170, 177, 188, 193, 195, 197, 202, 203, 209, 210, 217, 219, 220, 223, 224, 225, 226, 227, 233, 238, 239, 259, 278, 279], "nativ": [11, 58, 108, 198, 203, 238], "parsabl": 11, "iter": [11, 24, 25, 28, 38, 40, 47, 49, 50, 53, 54, 58, 59, 60, 61, 63, 66, 74, 88, 98, 113, 114, 116, 117, 118, 121, 136, 140, 157, 172, 186, 193, 194, 195, 196, 198, 200, 203, 207, 208, 209, 210, 213, 219, 220, 223, 225, 226, 227, 228, 231, 239, 240, 241, 242, 244, 246, 252, 257, 271], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 38, 61, 88, 200], "One": [11, 12, 15, 18, 20, 38, 39, 40, 48, 50, 57, 58, 63, 64, 66, 77, 80, 82, 83, 85, 88, 94, 98, 101, 102, 122, 137, 139, 148, 177, 198, 200, 201, 203, 206, 209, 215, 219, 222, 225, 226, 227, 228, 233, 246, 259, 273, 274, 276, 279, 280, 284], "care": [11, 12, 19, 20, 49, 58, 66, 85, 88, 94, 101, 112, 122, 136, 182, 191, 197, 202, 219, 220, 223, 225, 226, 231, 234, 239, 273, 276, 278], "falsi": 11, "is_posit": [11, 18, 19, 20, 58, 184, 198], "unevaluatedexpr": [11, 58, 207, 279], "surpris": [11, 18, 226], "north": 11, "riemann": [11, 60, 63, 64, 83, 194, 219, 233], "sphere": [11, 144, 252, 262], "behav": [12, 36, 38, 58, 59, 64, 66, 98, 203, 215, 219, 225, 228, 234, 280], "mapl": [12, 85, 223, 278], "mathematica": [12, 40, 50, 100, 278, 280], "faq": 12, "introductori": [12, 16, 29, 30, 139, 197, 198, 203], "remaind": [12, 57, 58, 59, 98, 195, 197, 198, 201, 203, 223], "familiar": [12, 20, 85, 122, 137, 156, 204, 274, 276, 282], "java": 12, "minut": [12, 112, 124, 181], "subtract": [12, 25, 40, 50, 58, 62, 73, 98, 108, 116, 174, 195, 196, 197, 198, 200, 202, 203, 279, 284], "proper": [12, 49, 58, 85, 98, 112, 122, 181, 197, 198, 202, 207, 215, 223, 228, 239, 240, 259, 280], "trigsimp": [12, 32, 58, 94, 116, 122, 130, 182, 216, 219, 256], "fill": [12, 17, 49, 59, 89, 91, 94, 97, 172, 193, 238, 241, 245, 248, 280], "alter": [12, 41, 49, 58, 182, 197, 207, 209, 226], "afterward": [12, 40, 58, 119, 126], "quantiti": [12, 50, 58, 63, 66, 70, 75, 102, 112, 117, 130, 137, 151, 174, 176, 180, 188, 190, 191, 202, 219, 227, 256, 261, 269], "simultan": [12, 58, 64, 71, 89, 98, 193, 216], "var": [12, 24, 38, 40, 57, 58, 62, 63, 81, 85, 88, 94, 108, 182, 193, 202, 206, 207, 219, 220, 246, 285], "rate": [12, 124, 190, 227, 259, 274], "short_lif": 12, "haven": 12, "160": [12, 101, 201], "ctimesd": 12, "circular": [12, 18, 106, 144, 200], "relationship": [12, 14, 18, 40, 58, 63, 65, 85, 98, 133, 156, 182, 188, 191, 197, 225], "runtimeerror": [12, 38, 215, 226, 245], "compileflag": [12, 238], "glob": [12, 238], "exceed": [12, 124], "stdin": [12, 241, 243], "nameerror": [12, 86, 241, 276], "__future__": [12, 16, 276, 283], "divis": [12, 20, 58, 94, 98, 174, 194, 197, 198, 199, 200, 203, 205, 207, 220, 223, 225, 238, 246, 276, 279, 283], "cl": [12, 18, 20, 40, 49, 58, 85, 89, 172, 186, 198, 202, 223, 232, 241, 245, 258, 274, 283, 285], "dir": [12, 58, 101, 209, 214, 245], "__builtins__": 12, "__file__": [12, 249], "__name__": [12, 207, 249], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 66, 83, 144, 207, 217, 223, 227, 233], "eta": [12, 66, 83, 202, 207, 223, 224, 227], "iota": [12, 207], "kappa": [12, 192, 207, 227], "mu": [12, 66, 83, 98, 109, 111, 143, 207, 227, 233], "omega": [12, 40, 41, 49, 83, 98, 113, 119, 121, 137, 140, 146, 148, 173, 182, 186, 187, 190, 192, 207, 214, 227], "omicron": [12, 207], "phi": [12, 49, 58, 59, 63, 66, 83, 87, 94, 98, 110, 139, 146, 155, 157, 192, 194, 202, 207, 223, 252, 262], "psi": [12, 63, 66, 83, 144, 155, 156, 162, 170, 202, 207, 233], "rho": [12, 60, 83, 94, 98, 125, 166, 207, 227, 233, 262], "sigma": [12, 50, 81, 83, 89, 94, 207, 210, 227], "tau": [12, 40, 83, 85, 94, 202, 207, 223], "theta": [12, 58, 60, 64, 66, 83, 86, 94, 100, 110, 121, 140, 144, 182, 191, 192, 198, 202, 207, 210, 215, 226, 227, 252, 254, 257, 259, 262], "upsilon": [12, 207], "xi": [12, 20, 60, 83, 207, 223, 224, 225], "lastli": [12, 85, 102, 140, 223], "unit": [12, 20, 32, 36, 39, 58, 59, 63, 71, 72, 73, 85, 94, 98, 101, 106, 108, 110, 111, 116, 122, 137, 139, 148, 173, 174, 175, 179, 181, 182, 188, 191, 193, 195, 198, 200, 202, 203, 205, 207, 215, 217, 220, 226, 228, 252, 254, 256, 261, 262, 269], "mnemon": [12, 216, 245], "osineq": 12, "reimport": 12, "restor": [12, 197, 219], "__": [12, 66, 85, 207, 227, 232], "press": [12, 39, 41, 42, 50, 59, 85, 89, 192, 201, 220, 225], "autocomplet": 12, "lose": [12, 194], "abil": [12, 18, 38, 94, 132, 202, 206, 223, 226, 278, 284], "past": [12, 64, 98, 206, 207, 283], "f1": [12, 26, 49, 83, 85, 94, 108, 113, 122, 130, 139, 193, 198, 200, 203, 207, 209, 225], "f2": [12, 26, 58, 83, 94, 108, 113, 122, 130, 139, 175, 193, 200, 203, 207, 209, 225], "6": [12, 14, 16, 27, 28, 32, 34, 35, 38, 40, 41, 42, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 70, 71, 72, 73, 74, 80, 81, 83, 85, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 104, 106, 108, 109, 110, 124, 125, 129, 130, 131, 141, 145, 151, 169, 181, 182, 191, 192, 193, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 209, 212, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 238, 239, 242, 245, 246, 252, 255, 257, 262, 274, 280, 284, 285], "accuraci": [12, 16, 38, 58, 203, 280], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 58, 279], "reus": [12, 20, 40, 172, 278], "142857142857143": 12, "receiv": [12, 28, 58, 59, 98, 113, 167, 202, 232], "fraction": [12, 58, 59, 62, 64, 74, 85, 94, 98, 114, 178, 197, 198, 200, 201, 204, 207, 209, 219, 220, 223, 225, 275], "interpret": [12, 19, 28, 40, 49, 57, 58, 63, 64, 66, 71, 74, 85, 89, 91, 94, 98, 100, 112, 177, 193, 195, 202, 203, 207, 214, 220, 225, 226, 227, 232, 238, 239, 242, 248, 280], "100": [12, 20, 40, 42, 47, 57, 58, 59, 62, 66, 74, 81, 88, 89, 94, 98, 101, 193, 197, 202, 204, 206, 207, 214, 225, 226, 245, 273], "000000000000": 12, "00": [12, 58, 98, 156, 166, 220, 245], "null": [12, 58, 94], "34": [12, 40, 50, 63, 71, 94, 98, 113, 154, 201, 206, 213, 219, 220], "3400000000000": 12, "250": [12, 98, 220], "143": [12, 151, 192], "next": [12, 16, 18, 20, 31, 40, 41, 42, 47, 49, 50, 52, 53, 58, 59, 64, 83, 85, 88, 94, 98, 112, 113, 117, 125, 126, 127, 129, 131, 132, 133, 140, 190, 191, 194, 198, 202, 203, 207, 215, 217, 220, 223, 242, 243, 245, 277, 278, 279], "binari": [12, 19, 20, 24, 36, 40, 42, 53, 58, 59, 85, 88, 98, 99, 166, 178, 194, 197, 203, 220, 239, 242, 245], "decim": [12, 20, 40, 58, 61, 62, 98, 100, 106, 197, 203, 278], "far": [12, 39, 58, 72, 85, 192, 194, 197, 207, 217, 246, 273, 274, 276], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 43, 49, 60, 88, 98, 126, 194, 195, 200, 227], "pad": [12, 40, 59, 60, 61, 73, 98], "inexact": [12, 28, 58, 198], "low": [12, 18, 19, 40, 58, 59, 66, 98, 197, 200, 205, 207, 219, 239, 240, 245], "higher": [12, 16, 38, 40, 58, 60, 62, 66, 69, 94, 186, 192, 194, 197, 200, 203, 209, 210, 214, 216, 219, 223, 225, 228, 246, 274], "engin": [12, 104, 138, 139, 189, 223, 283], "increas": [12, 38, 39, 50, 56, 57, 58, 61, 62, 66, 89, 98, 99, 112, 123, 156, 181, 182, 184, 190, 191, 197, 200, 202, 203, 209, 212, 216, 223, 227, 243, 245], "2000061035": 12, "highest": [12, 40, 52, 87, 112, 194, 203, 210, 220, 223], "hopefulli": [12, 17, 83], "unsimplifi": [12, 216], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 37, 40, 41, 57, 58, 59, 62, 63, 64, 66, 70, 81, 83, 88, 89, 94, 104, 110, 139, 172, 195, 198, 202, 203, 207, 220, 222, 225, 226, 227, 233, 242, 245, 248, 258, 284], "gave": [12, 58, 245], "gain": [12, 59, 108, 134, 135, 139], "impress": 12, "91": [12, 41, 201, 206, 213, 227], "compar": [12, 18, 28, 38, 40, 50, 55, 58, 63, 64, 75, 88, 94, 98, 99, 124, 151, 175, 179, 197, 200, 203, 204, 207, 212, 214, 219, 223, 226, 228, 232, 238, 245, 276, 279, 284], "4e": [12, 225], "nearli": [12, 98, 216], "snippet": [12, 40], "expr_modifi": 12, "__main__": [12, 40, 280], "declar": [12, 18, 25, 40, 71, 83, 94, 100, 109, 122, 124, 139, 151, 196, 207, 214, 217, 222, 223, 224, 227, 240], "asid": [12, 88, 223, 224, 278], "2x": [12, 24, 58, 66, 83, 100, 219, 220, 226, 227, 273, 276, 284], "syntaxerror": [12, 100], "asin": [12, 64, 66, 72, 204, 207, 217, 219, 223, 227, 284], "arcsin": [12, 64, 204, 207, 227], "arcco": [12, 64, 207], "root": [12, 18, 20, 22, 25, 28, 38, 40, 57, 58, 59, 64, 66, 80, 81, 82, 83, 85, 87, 90, 94, 98, 139, 177, 192, 194, 195, 198, 202, 204, 206, 207, 217, 219, 223, 225, 226, 227, 238, 242, 245, 278, 280, 283, 285], "expon": [12, 28, 37, 40, 58, 59, 64, 65, 66, 83, 85, 91, 98, 106, 108, 178, 195, 196, 197, 203, 204, 207, 216, 219, 223, 226, 231, 242, 284], "half": [12, 20, 40, 58, 59, 63, 64, 66, 68, 74, 85, 87, 94, 98, 100, 101, 141, 144, 169, 192, 198, 200, 202, 203, 215, 216, 217, 219, 227, 238, 245], "denomin": [12, 58, 62, 66, 85, 98, 108, 114, 195, 197, 198, 200, 202, 203, 206, 207, 216, 217, 219, 220, 223, 225, 284], "wild": [12, 58, 219, 245], "interest": [12, 14, 20, 24, 28, 54, 58, 60, 63, 64, 74, 83, 85, 94, 98, 123, 124, 172, 177, 191, 194, 198, 202, 203, 204, 206, 214, 217, 219, 220, 225, 226, 239, 240, 257, 274, 277, 279, 280, 281, 284], "sq": [12, 220], "is_pow": [12, 40, 58, 64], "is_rat": [12, 18, 202, 245], "bracket": [12, 20, 26, 27, 50, 58, 66, 170, 172, 182, 207], "notat": [12, 16, 25, 28, 46, 50, 51, 57, 58, 59, 63, 66, 83, 91, 94, 100, 108, 170, 181, 182, 187, 191, 194, 207, 214, 219, 226, 232, 233, 245, 259, 274], "curli": [12, 122, 207], "suppli": [12, 26, 38, 39, 40, 49, 50, 58, 60, 68, 72, 94, 98, 113, 116, 117, 119, 124, 126, 129, 134, 135, 145, 172, 181, 186, 191, 193, 202, 204, 209, 216, 223, 239, 245, 246, 252, 254, 257], "powsimp": [12, 58, 64, 216, 219], "deep": [12, 20, 58, 64, 88, 89, 203, 214, 219, 227, 279], "measur": [12, 32, 64, 66, 74, 90, 112, 152, 161, 166, 174, 177, 179, 181, 182, 186, 188, 191, 203, 215, 216, 219, 227, 251, 252, 255, 256, 258, 259, 261], "count_op": [12, 58, 216, 219], "radic": [12, 58, 59, 94, 194, 202, 203, 219, 225, 226], "join": [12, 23, 50, 58, 59, 71, 89, 101, 102, 207, 219, 223, 225, 228, 245, 249], "autoexpand": [12, 219], "violat": [12, 122, 192, 204, 219], "naiv": [12, 15, 49, 55, 58, 83, 89, 94, 177, 217, 225, 226, 233], "strategi": [12, 41, 58, 85, 200, 201, 214, 217, 219, 224], "radsimp": [12, 58, 219], "logcombin": [12, 219, 223, 226], "robust": [12, 55, 58, 62, 199, 219, 223], "cancel": [12, 16, 20, 40, 58, 62, 66, 74, 83, 85, 94, 98, 108, 109, 197, 198, 200, 203, 206, 219, 225, 278], "topic": [13, 21, 29, 40, 132, 137, 189, 190, 191, 192, 194, 196, 197, 202, 226, 269, 276, 281], "behind": [13, 29, 109, 122, 136, 176, 196, 216, 219, 223, 226, 269, 276], "decis": [13, 29, 58, 64, 85, 216, 225, 240], "opinion": [13, 29], "pitfal": [13, 20, 191, 197, 276, 281, 284], "glossari": 13, "seem": [14, 18, 20, 82, 83, 122, 177, 194, 219, 223, 284], "unwieldi": 14, "arbitrarili": [14, 38, 58, 71, 98, 200, 202, 214, 217, 223, 224, 227], "six": [14, 102, 207, 220, 226, 227], "bias": 14, "toward": [14, 40, 58, 66, 194, 214, 226], "enter": [14, 50, 58, 59, 63, 71, 98, 100, 101, 117, 121, 124, 134, 207, 217, 225, 238, 279, 283], "attempt": [14, 16, 19, 20, 24, 28, 40, 49, 54, 56, 58, 62, 63, 70, 83, 85, 94, 98, 112, 114, 167, 197, 202, 207, 209, 216, 219, 220, 223, 225, 226, 227, 238, 276, 284], "unambigu": [14, 207, 223, 248], "univari": [14, 28, 38, 57, 58, 64, 81, 85, 194, 195, 197, 198, 201, 202, 203, 204, 209, 220, 222, 225, 227], "linear": [14, 20, 22, 24, 26, 28, 39, 40, 50, 57, 58, 59, 61, 62, 66, 71, 81, 83, 85, 87, 89, 91, 93, 101, 105, 108, 115, 116, 117, 119, 124, 126, 127, 132, 134, 138, 139, 144, 166, 169, 170, 186, 193, 194, 198, 200, 202, 203, 205, 213, 215, 217, 220, 223, 224, 225, 226, 245, 267, 269, 285], "undetermin": [14, 58, 94, 203, 209, 223, 225], "nonlinear": [14, 22, 28, 57, 139, 203, 223, 225, 226], "sol": [14, 26, 94, 220, 223, 224, 225], "insuffici": [14, 89], "elimin": [14, 16, 40, 54, 58, 88, 90, 94, 112, 198, 205, 206, 208, 210, 219, 223, 225, 226, 233, 240, 280], "nsolv": [14, 26, 27, 28, 139, 225], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 23, 222, 225], "rh": [14, 23, 40, 48, 50, 58, 89, 90, 94, 116, 117, 122, 129, 130, 131, 196, 205, 207, 209, 223, 225, 226, 258], "classifi": [15, 94, 197, 223, 224, 226, 227], "distinguish": [15, 18, 19, 39, 49, 62, 87, 122, 171, 177, 194], "former": [15, 40, 58, 63, 122, 200, 202, 203, 220, 245], "retriev": [15, 56, 89, 203, 219, 233], "guarante": [15, 18, 26, 40, 49, 50, 58, 70, 83, 85, 94, 197, 200, 202, 203, 223, 225, 226, 243, 248, 280, 284], "catch": [15, 58, 223, 238, 280], "theori": [15, 20, 41, 47, 48, 49, 50, 56, 58, 59, 63, 66, 87, 95, 117, 122, 136, 138, 151, 169, 172, 182, 186, 196, 200, 201, 202, 206, 220, 242, 252, 270, 278], "is_subset": [15, 215], "valueerror": [15, 18, 26, 33, 35, 38, 40, 41, 50, 58, 59, 67, 68, 71, 73, 74, 85, 89, 91, 94, 97, 98, 101, 106, 108, 146, 186, 188, 192, 194, 196, 200, 202, 215, 223, 225, 226, 245, 248, 259], "odd": [15, 18, 24, 33, 35, 36, 37, 46, 50, 58, 59, 63, 64, 66, 88, 97, 98, 109, 192, 202, 203, 207, 225], "appliedpred": [15, 33, 34, 35], "analysi": [16, 40, 41, 49, 58, 59, 64, 105, 124, 136, 137, 140, 194, 203, 217, 220, 227], "vari": [16, 38, 40, 58, 72, 74, 101, 106, 112, 117, 137, 170, 191, 214, 225, 245, 259], "hope": [16, 49, 112, 194], "research": [16, 50, 204, 219], "establish": [16, 54, 83, 116, 127, 217], "envis": 16, "along": [16, 20, 40, 49, 58, 59, 60, 64, 66, 67, 68, 72, 73, 76, 78, 81, 83, 89, 91, 94, 101, 102, 104, 111, 112, 116, 117, 124, 126, 129, 130, 131, 134, 135, 136, 139, 141, 169, 181, 182, 188, 191, 193, 196, 197, 202, 203, 223, 226, 255, 259, 261], "small": [16, 24, 40, 41, 49, 50, 58, 62, 63, 85, 88, 94, 98, 108, 126, 130, 139, 169, 192, 193, 200, 201, 202, 219, 220, 225, 245, 273, 276, 278], "x_": [16, 24, 40, 48, 58, 59, 63, 100, 198, 200, 203, 209, 220, 223, 228], "taylor": [16, 58, 64, 122, 136, 139, 198, 200, 203, 204, 214, 223], "let": [16, 18, 19, 20, 38, 40, 49, 54, 58, 59, 68, 76, 81, 83, 87, 91, 94, 95, 98, 100, 113, 122, 139, 177, 182, 190, 194, 195, 196, 200, 202, 203, 204, 207, 214, 217, 219, 220, 223, 225, 226, 233, 236, 239, 243, 246, 257, 258, 262, 273, 276, 278, 279, 284], "df": [16, 60, 223], "c_": [16, 22, 59, 81, 83, 191, 195, 223], "grid": [16, 38, 39, 106, 193], "f_": [16, 58, 63, 66, 85, 134, 135, 136, 200, 206, 207, 217, 223], "constraint": [16, 23, 94, 102, 108, 116, 117, 118, 121, 122, 124, 125, 126, 128, 132, 134, 135, 136, 139, 204, 269], "formul": [16, 116, 125, 126, 132, 134, 135, 172, 191], "assess": 16, "brute": [16, 216, 220], "frequent": [16, 49, 202, 214, 226], "cover": [16, 64, 98, 100, 112, 122, 181, 190, 233, 240, 274, 276], "treatment": [16, 83, 203], "shall": [16, 49, 83, 122, 139, 214, 217, 279], "job": [16, 20, 50, 152, 204, 207], "truncat": [16, 50, 58, 94, 98, 102, 177, 193, 204, 206, 209, 210], "approx": [16, 22, 26, 58, 85], "lowest": [16, 40, 49, 54, 98, 194, 209, 226], "2h": 16, "print_funct": 16, "x0": [16, 38, 40, 48, 58, 66, 77, 79, 81, 82, 98, 144, 197, 208, 209, 214, 219, 223, 225, 227, 245, 274], "x_0": [16, 48, 49, 59, 80, 81, 82, 200, 209, 220, 223, 227, 274], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 59, 81], "c_1": [16, 59, 81, 83, 214, 217, 223], "c_2": [16, 83, 214, 223], "2f": [16, 285], "c_i": [16, 83, 214, 217, 223], "nth": [16, 58, 63, 66, 87, 98, 198, 203, 204, 213, 219, 223, 227], "degre": [16, 41, 49, 56, 57, 63, 66, 74, 85, 89, 94, 101, 104, 106, 108, 116, 117, 122, 123, 126, 132, 140, 144, 191, 194, 195, 198, 200, 202, 203, 206, 210, 213, 216, 217, 219, 220, 223, 225, 227, 252, 269], "x_i": [16, 20, 48, 66, 85, 94, 195, 198, 200, 203, 204, 207, 226], "m11": [16, 227], "m12": [16, 227], "m13": 16, "m21": [16, 227], "m22": [16, 227], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 98], "3x3": [16, 73, 94, 257], "invert": [16, 28, 36, 58, 59, 89, 91, 94, 108, 126, 174, 195, 197, 198, 202, 203, 223, 225, 226, 233, 280], "inv": [16, 50, 90, 94, 116, 117, 124, 129, 130, 139, 161, 196, 223], "fim1": 16, "eight": [16, 28, 207], "dfdxcheck": 16, "c3": [16, 61, 87, 89, 91, 98, 223, 227, 258, 285], "c5": [16, 223], "120": [16, 57, 58, 63, 64, 80, 98, 101, 102, 204, 206, 207, 209, 223, 274], "c7": [16, 49], "5040": [16, 63, 80, 203, 204], "quickli": [16, 20, 49, 50, 58, 59, 62, 98, 200, 203, 216, 226, 242], "tediou": [16, 85], "certainli": [16, 70, 100, 242], "fine": [16, 20, 24, 58, 62, 86, 187, 197, 207, 219], "devis": 16, "xn": [16, 20, 198], "x_n": [16, 20, 41, 48, 59, 80, 94, 195, 198, 200, 203, 220, 226], "fn": [16, 85, 94, 194, 203], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 57, 83, 94, 223, 226, 245, 284], "cours": [16, 18, 42, 49, 57, 66, 83, 85, 94, 95, 98, 188, 196, 197, 201, 202, 214, 216, 217, 259, 284], "etc": [16, 18, 19, 35, 38, 40, 54, 58, 59, 63, 64, 76, 87, 88, 93, 98, 122, 143, 152, 156, 169, 172, 176, 184, 188, 190, 191, 193, 194, 195, 197, 200, 202, 207, 208, 215, 216, 217, 219, 223, 226, 227, 231, 239, 240, 245, 257, 261], "discrit": 16, "bengt": [16, 38], "fornberg": [16, 38], "weight": [16, 58, 66, 73, 75, 85, 87, 94, 156, 219, 274], "gap": [17, 49, 98, 122, 204], "matur": [17, 18, 225, 226], "finit": [17, 18, 25, 36, 40, 44, 45, 46, 49, 57, 58, 59, 61, 62, 85, 87, 88, 158, 182, 192, 195, 198, 201, 203, 204, 207, 209, 210, 213, 215, 220, 222, 223, 226, 245, 252, 254, 264, 275, 278, 284], "concret": [18, 39, 50, 58, 63, 64, 85, 87, 94, 98, 122, 177, 198, 202, 207, 264], "obviou": [18, 19, 20, 49, 57, 194, 197, 206, 220, 278], "situat": [18, 28, 62, 83, 191, 223, 225, 227, 243, 276], "refus": [18, 284], "roughli": [18, 58, 59, 99, 123, 223, 246], "possibli": [18, 40, 50, 56, 58, 83, 85, 98, 175, 176, 200, 214, 215, 225, 240, 274, 280], "infinit": [18, 20, 23, 24, 36, 57, 58, 59, 62, 63, 64, 71, 72, 85, 94, 98, 108, 128, 158, 177, 194, 202, 207, 208, 209, 212, 213, 214, 215, 219, 220, 222, 225, 232, 245, 284, 285], "is_neg": [18, 20, 198], "interprett": 18, "unknow": 18, "resolv": [18, 19, 23, 24, 25, 26, 27, 58, 216, 219, 225], "undecid": [18, 20, 25, 94, 197, 226, 280], "conclud": [18, 66, 81, 124, 188, 214, 225, 261], "particularli": [18, 62, 85, 197, 198, 217, 284, 285], "mix": [18, 31, 57, 64, 89, 94, 100, 181, 197, 198, 203, 207, 226, 229, 231, 233, 246], "ideal": [18, 40, 95, 119, 122, 132, 182, 190, 196, 198, 200, 201, 202, 203, 204, 219, 226, 252], "slow": [18, 20, 54, 58, 62, 85, 99, 112, 124, 144, 181, 191, 197, 198, 207, 208, 209, 210, 219, 223, 225, 226, 238, 239, 284], "indetermin": [18, 19, 58, 94, 200, 212, 225], "contradict": 18, "infer": [18, 34, 35, 50, 58, 85, 197, 206, 207, 212, 217, 223, 239], "prepar": [18, 117, 205], "presum": [18, 83, 197, 217, 240], "singletonregistri": [18, 58], "x1": [18, 20, 26, 48, 58, 63, 139, 144, 197, 198, 208, 209, 219, 223, 225, 227, 245], "x2": [18, 26, 48, 58, 63, 139, 144, 197, 209, 223, 225, 227], "posifi": [18, 219], "_x": [18, 20, 94, 133, 137, 187, 190, 191, 198, 204, 219, 223, 239], "rep": [18, 49, 54, 58, 156, 194, 196, 197, 198, 201, 202, 203, 216, 219, 248], "feel": [18, 30, 139, 140, 219, 223, 225], "among": [18, 39, 40, 41, 42, 49, 50, 59, 86, 99, 203, 223, 228, 231, 233, 256], "behaviour": [18, 83, 88, 113, 200, 204, 210, 213], "symbolc": 18, "implicit": [18, 40, 56, 58, 100, 117, 121, 140, 193, 223, 225, 229, 232, 239, 240, 252, 255, 262, 276], "tailor": 18, "assumptions0": [18, 58], "extended_neg": [18, 58], "extended_nonneg": [18, 58], "extended_nonposit": [18, 58], "extended_nonzero": [18, 58, 207], "extended_posit": [18, 58], "extended_r": [18, 36, 58, 207, 222, 226], "hermitian": [18, 36, 58, 89, 90, 94, 155, 161, 172, 207], "irrat": [18, 36, 38, 58, 98, 197, 203, 207, 215, 278], "noninteg": [18, 36, 58, 197, 207], "nonneg": [18, 20, 36, 58, 59, 60, 63, 66, 91, 139, 195, 197, 203, 220, 227, 284], "nonposit": [18, 36, 58, 63, 66, 139], "nonzero": [18, 20, 36, 37, 57, 58, 73, 94, 110, 195, 196, 197, 198, 207, 210, 226], "transcendent": [18, 25, 27, 28, 36, 58, 66, 85, 197, 202, 207, 225, 226, 280, 285], "field": [18, 32, 36, 40, 58, 59, 60, 66, 76, 85, 144, 145, 184, 185, 189, 194, 195, 196, 198, 199, 201, 203, 204, 205, 220, 225, 238, 252, 255, 257, 258, 260, 262, 267, 269, 270], "antihermitian": [18, 36, 58], "mathbb": [18, 20, 24, 36, 41, 49, 57, 58, 59, 64, 66, 83, 89, 94, 136, 192, 194, 195, 197, 198, 200, 202, 203, 206, 214, 215, 217, 220, 226, 227, 284], "ii": [18, 64, 83, 85, 98, 203, 207, 215, 223, 226], "cup": [18, 203, 215, 226], "pm": [18, 24, 57, 83, 85, 195, 206, 214, 220, 223], "yi": 18, "composit": [18, 36, 39, 47, 49, 50, 58, 59, 76, 78, 85, 98, 101, 198, 200, 203, 206, 219, 226, 241], "2k": [18, 58, 63, 83, 98, 220], "pariti": [18, 50, 203], "product": [18, 32, 43, 46, 49, 50, 54, 56, 57, 58, 59, 60, 62, 63, 66, 68, 71, 73, 74, 81, 83, 85, 87, 88, 89, 91, 94, 98, 99, 108, 109, 110, 112, 116, 124, 137, 139, 147, 151, 152, 155, 157, 158, 159, 161, 164, 166, 167, 169, 170, 172, 177, 178, 181, 182, 184, 189, 190, 191, 192, 194, 195, 196, 198, 200, 202, 203, 204, 207, 208, 209, 212, 215, 216, 219, 220, 223, 224, 225, 226, 227, 229, 231, 232, 233, 239, 242, 245, 252, 256, 269], "le": [18, 41, 54, 58, 66, 83, 89, 98, 131, 200, 217, 227], "commutative_properti": [18, 58], "skew": [18, 81, 98, 227], "hermitian_matrix": 18, "complex_numb": [18, 36, 58], "algebraic_numb": [18, 36, 58], "transcendental_numb": [18, 58], "extended_real_number_lin": 18, "real_numb": [18, 36], "imaginary_numb": [18, 36, 58], "rational_numb": [18, 36], "irrational_numb": [18, 36, 58], "parity_": [18, 58], "prime_numb": [18, 58, 98], "composite_numb": [18, 58], "positive_real_numb": 18, "negative_numb": [18, 58], "inconsist": [18, 20, 33, 35, 57, 177, 182, 186, 190, 219, 223, 226], "inconsistentassumpt": 18, "deal": [18, 40, 57, 58, 62, 70, 78, 83, 85, 105, 112, 117, 118, 122, 188, 190, 191, 195, 200, 203, 220, 225, 236, 246, 248, 256, 261, 276, 278, 284], "is_zero_matrix": [18, 89, 196], "generalis": [18, 66, 83, 194], "gaussian": [18, 66, 85, 94, 98, 142, 200, 203, 220, 225, 227, 269, 280], "notion": [18, 39, 177, 180, 194, 226, 256, 261], "chain": [18, 20, 40, 49, 54, 58, 66, 75, 99, 190, 202, 227], "superset": [18, 38, 47, 53, 61, 139, 197, 215, 225], "vanilla": 18, "attach": [18, 52, 83, 99, 101, 116, 117, 133, 191, 239, 241, 246], "is_commut": [18, 85, 161, 170, 245], "is_complex": [18, 58], "is_finit": [18, 58], "permit": [18, 50, 60, 64, 88, 98, 193], "formal": [18, 24, 39, 57, 58, 66, 83, 88, 141, 177, 197, 200, 211, 214, 264], "littl": [18, 20, 39, 50, 68, 94, 98, 99, 124, 177, 201, 203, 207, 217, 219, 227, 242, 256], "n1": [18, 40, 49, 58, 59, 122, 139, 141, 145, 181, 220, 227, 252], "n2": [18, 40, 49, 58, 59, 139, 141, 145, 220, 227], "misunderstand": 18, "is_nonneg": [18, 20, 198], "intent": [18, 40, 57, 58, 100, 240], "meaning": [18, 33, 35, 39, 59], "alon": [18, 59, 86, 200, 223, 225, 232, 245, 278, 279], "tempt": [18, 20, 58, 98], "meet": [18, 59, 214], "criteria": [18, 58, 279], "noncommut": [18, 58, 81, 279], "finiteset": [18, 25, 38, 39, 215, 226, 227, 285], "s1": [18, 49, 57, 71, 74, 81, 108, 183, 194, 203, 210, 220, 245, 255], "s2": [18, 49, 50, 57, 71, 74, 108, 183, 194, 203, 210, 214, 220, 245, 255], "bool": [18, 38, 40, 54, 56, 58, 59, 61, 64, 85, 86, 88, 89, 91, 94, 98, 100, 117, 118, 156, 184, 187, 193, 202, 203, 205, 207, 208, 209, 214, 215, 219, 222, 227, 239, 240, 245, 246, 252, 255, 276], "plai": [18, 57, 124, 134, 220, 276, 278, 279], "role": [18, 64, 205], "connect": [18, 52, 59, 60, 73, 74, 94, 99, 101, 104, 113, 116, 124, 127, 133, 194, 195, 196, 205, 223, 227, 245, 252], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 58], "capitalis": 18, "4142135623731": [18, 26, 207, 225], "predict": [18, 172, 219, 245], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 32, 34, 35, 40, 42, 47, 49, 50, 52, 53, 58, 64, 65, 66, 73, 89, 94, 108, 158, 169, 170, 172, 196, 198, 202, 203, 207, 215, 233, 238], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 73], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 40, 49, 58, 279], "verifi": [18, 30, 38, 49, 55, 59, 60, 122, 194, 200, 206, 223, 225, 226, 228, 229, 284], "importantli": [18, 20, 204, 242], "reject": [18, 19, 98, 220, 248], "_eval_is_": 18, "is_algebra": [18, 58, 198], "interfer": [18, 207], "determinist": [18, 49, 85, 98, 200, 201], "reach": [18, 98, 108, 202, 203, 223], "claus": [18, 88], "flow": [18, 202], "inner": [18, 57, 83, 94, 155, 158, 159, 164, 166, 167, 170, 172, 182, 186, 196, 202, 209, 252, 269], "optimis": [18, 223], "stage": [18, 39, 57, 98, 214, 284], "briefli": [18, 195, 200], "managedproperti": [18, 58], "metaclass": [18, 58], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 29, 42, 47, 50, 53, 61, 65, 83, 88, 98, 202, 203, 217, 242, 245, 264], "randomis": [18, 235, 271], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 85, 205], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 58, 245], "precomput": [18, 63, 98, 246], "static": [18, 32, 40, 49, 50, 52, 58, 64, 71, 72, 73, 74, 91, 102, 124, 132, 193, 207, 213, 215, 227, 239], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 203], "_assumpt": [18, 58], "amongst": [18, 225], "indirectli": 18, "manifest": [18, 195], "jointli": 18, "fundament": [18, 20, 38, 41, 48, 76, 83, 85, 94, 177, 197, 202, 220, 223, 227, 280], "theoret": [18, 39, 41, 49, 59, 63, 201, 202, 217, 276], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 58, 207], "analogu": [19, 36, 57, 72, 197, 198], "piecewis": [19, 20, 40, 57, 63, 66, 85, 88, 101, 170, 207, 209, 210, 225, 226, 227, 246, 274], "nonetyp": [19, 40], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 36, 58, 64, 88, 108, 182, 196, 198, 200, 203], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 62, 98, 239], "carefulli": [19, 58, 182, 200, 209], "truth": [19, 33, 34, 35, 36, 37, 58, 89, 219], "bitwis": [19, 61, 88], "footnot": [19, 177, 279, 280, 283], "combinatori": [20, 42, 50, 57, 58, 65, 66, 203, 209, 219, 245, 247, 264, 284], "dig": [20, 40, 279], "th": [20, 32, 41, 49, 50, 56, 59, 60, 62, 63, 64, 66, 87, 88, 94, 98, 117, 198, 200, 202, 203, 209, 212, 217, 220, 223, 225, 227, 228, 233], "handler": [20, 33, 34, 35, 36, 37, 58, 65, 94], "spectrum": 20, "matter": [20, 38, 47, 50, 57, 58, 63, 83, 85, 137, 214, 245, 278, 279], "use_unicod": [20, 38, 39, 40, 62, 66, 85, 86, 94, 102, 108, 144, 187, 192, 194, 195, 206, 207, 208, 226, 227, 274, 278, 280, 283, 284, 285], "np": [20, 63, 81, 98, 122, 239, 246], "arang": [20, 239, 273], "arrai": [20, 22, 26, 40, 49, 50, 54, 55, 59, 66, 85, 89, 91, 94, 98, 99, 106, 139, 169, 193, 196, 198, 203, 207, 226, 227, 230, 232, 233, 234, 239, 240, 242, 246, 267, 280], "ultim": [20, 64, 177], "cosin": [20, 58, 64, 66, 73, 85, 113, 116, 182, 191, 203, 204, 210, 216, 227, 252, 284], "todai": [20, 194], "operatornam": [20, 63, 64, 66, 83, 85, 192, 195, 203, 207, 210, 215, 217, 225], "modern": [20, 40, 194, 201, 207], "recal": [20, 58, 94, 200, 202, 217, 276, 278, 279, 285], "redefin": [20, 50, 58, 134, 136, 195, 246], "antipattern": [20, 277], "stai": [20, 202], "trig": [20, 58, 85, 203, 207, 216, 219, 284], "wouldn": 20, "cheap": [20, 58, 98], "as_two_term": [20, 58], "split": [20, 40, 58, 59, 62, 83, 85, 100, 200, 202, 205, 206, 207, 225, 227, 233, 238, 245, 250, 279, 284], "hadn": 20, "wors": [20, 88, 219], "expand_trig": [20, 58, 273], "mid": [20, 41, 59, 62, 102, 215, 220], "troubl": [20, 66], "bigger": [20, 40, 58, 63, 217, 223, 284], "deduc": [20, 40, 83, 88, 217, 278], "disallow": [20, 58, 203, 208, 219, 241], "great": [20, 141, 204, 207, 220, 246], "simplest": [20, 39, 88, 94, 98, 99, 192, 193, 204, 208, 216, 219, 223, 274, 284], "\u03c0": [20, 62, 144, 207, 226, 274, 278, 284, 285], "as_independ": [20, 58, 226], "coeff": [20, 58, 60, 88, 139, 198, 202, 203, 213, 219, 223, 225, 233, 284], "apart": [20, 32, 49, 54, 58, 62, 64, 85, 188, 195, 198, 200, 203, 206, 209, 220, 226, 233, 257, 259, 279], "is_even": [20, 46, 49, 50], "nonreal": [20, 26, 225], "cosh": [20, 58, 64, 66, 77, 83, 204, 207, 208, 217, 219, 225, 280, 284], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 49, 242, 277, 284], "_eval_is_posit": 20, "as_add": [20, 58], "pi_": 20, "fuzzy_": 20, "deduct": [20, 40], "subtl": [20, 216], "nontrivi": [20, 49, 58, 98], "_eval_evalf": [20, 203], "prec": [20, 26, 58, 68, 74, 98, 106, 192, 198, 203, 204, 219, 225], "dp": [20, 40, 58, 61, 66, 98, 197, 198, 225, 241], "53": [20, 59, 61, 94, 141, 195, 197, 198], "459697694131860": 20, "hook": [20, 99, 207], "_eval_rewrit": [20, 58], "rewritten": [20, 58, 63, 64, 66, 85, 122, 169, 214, 219, 223, 225, 284], "caller": 20, "ve": [20, 124], "nonintegr": 20, "iff": [20, 36, 50, 59, 88, 94, 191, 194, 202, 217, 220, 238], "isint": 20, "xy": [20, 38, 39, 72, 94, 119, 191, 193, 194, 200, 207, 219, 226, 262, 279, 284], "happi": 20, "demand": [20, 31], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 60, 139, 197, 207, 208, 219, 226, 233, 252, 257], "expand_log": [20, 40, 58, 219], "_eval_expand_trig": 20, "sophist": [20, 99, 225], "x_1": [20, 41, 48, 49, 59, 63, 80, 94, 167, 195, 198, 200, 203, 209, 220, 226], "ldot": [20, 24, 41, 48, 49, 57, 58, 59, 63, 66, 83, 98, 102, 177, 192, 194, 195, 198, 200, 202, 207, 210, 214, 217, 220, 225, 228, 284], "x_k": [20, 59, 200], "dy": [20, 40, 60, 75, 94, 101, 111, 139, 203, 207, 220, 223, 224, 274], "dz": [20, 101, 111, 217], "argumentindexerror": 20, "varion": 20, "middl": [20, 66, 74, 83, 94, 102, 152, 193, 217, 284], "iverson": 20, "printmethod": [20, 207], "latexprint": 20, "_latex": [20, 207], "_print": [20, 207], "_m": [20, 66], "_n": [20, 59, 63, 66, 85, 203, 217, 226], "arcversin": 20, "aversin": 20, "im": [20, 37, 58, 64, 83, 92, 194, 207, 208, 215, 223, 280], "sinh": [20, 38, 58, 62, 64, 66, 77, 83, 204, 207, 208, 217, 284], "expand_complex": [20, 58], "analog": [20, 51, 57, 59, 63, 137, 190, 191, 194, 195, 196, 200, 212, 228, 245], "vers": 20, "geometr": [20, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 94, 141, 191, 194, 201, 227, 280], "angl": [20, 32, 64, 66, 67, 68, 69, 71, 72, 73, 74, 104, 110, 116, 121, 122, 124, 125, 126, 127, 133, 136, 141, 144, 145, 146, 169, 177, 182, 190, 191, 192, 207, 216, 226, 252, 254, 257, 284], "horizont": [20, 28, 39, 68, 71, 73, 89, 104, 144, 193, 196, 207], "distanc": [20, 39, 42, 50, 68, 71, 72, 73, 74, 101, 102, 111, 112, 116, 126, 127, 141, 145, 175, 186, 188, 261], "rightmost": [20, 172], "scientificamerican": 20, "uniti": [20, 64, 66, 83, 167, 202], "secret": [20, 59], "teacher": 20, "taught": [20, 85], "nr": 20, "sake": [20, 63, 220], "simplic": [20, 217, 219, 223], "divisor": [20, 36, 49, 58, 59, 94, 98, 194, 195, 197, 198, 200, 201, 202, 203, 206], "hardwar": [20, 40], "regard": [20, 41, 59, 66, 86, 140, 172, 194, 195, 209, 225, 226], "c99codeprint": [20, 40, 207], "cxx11codeprint": [20, 207], "cfunction": 20, "e2": [20, 38, 58, 61, 68, 75, 85, 94, 98, 106, 122, 197, 202, 214, 223, 226, 227, 245], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 40, 207, 232, 240], "cxxcode": [20, 40, 207], "_ccode": [20, 207], "_y": [20, 23, 133, 137, 187, 190, 191], "_z": [20, 85, 133, 137, 190, 191, 227], "_cxxcode": [20, 207], "std": [20, 207, 227], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 223], "fragil": 20, "tend": [20, 31, 40, 58, 63, 200, 202, 212, 214, 217, 277, 284], "prone": [20, 24, 40, 58], "move": [20, 49, 50, 58, 59, 72, 74, 101, 116, 124, 126, 132, 160, 186, 190, 191, 219, 228, 237, 259], "task": [21, 22, 29, 64, 132, 133, 139, 197, 202, 274, 281], "deeper": [21, 231, 279], "explor": [21, 134, 135, 193, 202, 242, 284], "diophantin": [22, 98, 200, 221, 264], "2z": [22, 27, 66, 226, 227], "4z": [22, 27, 226], "6z": [22, 27], "739085133215161": [22, 26, 27, 28, 225], "9y": 22, "3x": [22, 58, 100, 200, 226, 276], "cc": [22, 59, 74, 192, 195, 197, 203, 280], "2pq": [22, 24], "yield": [23, 24, 25, 27, 38, 40, 49, 58, 59, 63, 66, 82, 83, 98, 101, 108, 114, 166, 192, 195, 200, 202, 203, 208, 209, 214, 215, 216, 219, 220, 225, 242, 245, 280], "linprog": 23, "as_set": [23, 88], "accomplish": [23, 85, 136, 139, 259], "exclud": [23, 28, 40, 57, 58, 85, 94, 114, 139, 195, 198, 200, 203, 213, 223, 225, 238, 241, 245], "rel_op": [23, 58], "relations_sort": 23, "append": [23, 49, 58, 59, 94, 102, 139, 167, 193, 198, 207, 225, 228, 240, 241, 245, 284], "x_y_reduc": 23, "insight": [23, 277], "x_reduc": 23, "y_reduc": 23, "solve_univariate_inequ": [23, 222, 226], "interv": [23, 25, 36, 38, 49, 58, 62, 64, 66, 67, 68, 71, 74, 83, 85, 88, 98, 158, 167, 198, 200, 202, 203, 210, 213, 215, 222, 226, 227, 285], "calculu": [23, 25, 58, 63, 85, 94, 139, 188, 216, 227, 258, 259, 260, 263, 264, 275, 277, 282], "reflect": [23, 28, 42, 46, 50, 58, 68, 69, 74, 87, 104, 141, 144, 145, 182], "parameter": [24, 60, 67, 68, 71, 74, 220], "pythagorean": [24, 220], "sage": [24, 58, 98, 192, 278], "ellipticcurv": 24, "loop": [24, 39, 40, 98, 108, 125, 182, 193, 204, 207, 223, 242, 245, 279], "ineffici": [24, 58, 94, 197], "reveal": [24, 40, 98, 226, 279], "my_sym": 24, "pythag_eq": 24, "sym": [24, 38, 48, 49, 54, 58, 63, 182, 207, 210, 215, 219, 220, 225, 227, 233, 245, 284], "pythag": 24, "five": [24, 39, 47, 83, 104, 207, 220], "a_1x_1": [24, 220], "a_2x_2": [24, 220], "a_nx_n": [24, 220], "quadrat": [24, 58, 59, 85, 98, 194, 198, 202, 203, 220, 225, 227], "ax": [24, 32, 59, 62, 68, 71, 83, 90, 94, 101, 106, 116, 144, 169, 182, 191, 192, 193, 196, 204, 220, 223, 226, 228, 229, 232, 252, 254, 256, 259, 261, 284], "bxy": [24, 220], "cy": [24, 220], "ei": [24, 66, 83, 202, 207, 217, 220, 223, 233], "homogen": [24, 81, 85, 94, 108, 198, 200, 203, 220, 223, 224, 227], "ternari": [24, 40, 58, 207, 220], "cz": [24, 61, 220], "dxy": [24, 220], "eyz": [24, 220], "fzx": [24, 220], "a_": [24, 54, 58, 59, 66, 83, 87, 89, 91, 108, 109, 137, 209, 217, 220, 223, 225, 227, 228], "pythogorean": 24, "subscript": [24, 50, 198, 207, 217, 220, 245], "solution_dict": 24, "zip": [24, 38, 48, 59, 88, 98, 203, 213, 220, 223, 242, 245], "elegantli": 24, "forget": [24, 39, 284], "solution_list": [24, 25], "solution_first": 24, "solution_p4q3": 24, "p_val": 24, "q_val": 24, "pythag_v": 24, "union": [24, 31, 36, 38, 40, 47, 49, 56, 88, 100, 194, 202, 207, 213, 214, 215, 222, 226, 227, 245], "4y": [24, 200, 226, 273], "rearrang": [25, 109, 117, 134, 135, 156, 223], "eqn": [25, 38, 226], "solutions_set": 25, "solution_set": 25, "256": [25, 40, 49, 98, 203, 207], "techniqu": [25, 41, 53, 83, 85, 207, 209, 219, 223, 226, 280], "solution_outside_2_3": 25, "critic": [25, 38, 145, 190, 202, 226], "minima": [25, 226], "critical_point": 25, "point1": [25, 183, 255], "point2": [25, 183, 255], "curvatur": [25, 141, 145], "membership": [25, 56, 202, 215], "candid": [25, 58, 94, 98, 200, 219], "solution_set_arg": 25, "overli": 26, "float64": [26, 40, 99, 227], "fsolv": 26, "linalg": [26, 40], "findroot": [26, 66, 225], "overdetermin": [26, 225, 226], "toler": [26, 40, 58, 62, 198, 219, 225], "18466446988997098217": 26, "16840434497100886801e": 26, "tweak": [26, 207, 225], "closest": [26, 58, 71], "closer": [26, 124, 226, 279], "00000000000000": [26, 58, 62, 173, 207, 227], "bisect": [26, 98, 203, 225], "multidimension": [26, 201, 238], "19287309935246": [26, 225], "27844411169911": [26, 225], "192873099352460791205211": 26, "278444111699106966687122": 26, "root_scalar": 26, "lam_f": [26, 246], "3416277185114782": 26, "slightli": [26, 31, 40, 54, 98, 100, 124, 193, 194, 198, 200, 203, 207, 217, 219], "x_valu": 26, "12757857962640e": 26, "73908513321516": 26, "4877893607115270300540019e": 26, "6543612251060553497428174e": 26, "interrog": 27, "overconstrain": 27, "solvabl": [28, 49, 104, 220, 223, 226, 285], "abel": [28, 94], "ruffini": [28, 94], "theorem": [28, 46, 59, 66, 68, 74, 85, 89, 94, 98, 111, 112, 124, 172, 181, 190, 194, 197, 200, 214, 217, 220, 226], "groebnerbasi": [28, 195, 203, 206], "lambert": [28, 64, 85, 204], "decompos": [28, 49, 50, 56, 58, 60, 64, 69, 94, 98, 156, 165, 166, 168, 198, 203, 206, 227], "lack": [28, 40, 60, 62, 119, 207, 274], "crootof": [28, 58, 203, 223, 225], "765": 28, "352": 28, "181": 28, "08": [28, 124], "total": [28, 41, 47, 49, 58, 63, 74, 87, 88, 89, 91, 124, 126, 134, 141, 145, 151, 156, 169, 178, 192, 198, 200, 203, 216, 219, 223, 231, 233, 262], "scroll": 28, "56": [28, 61, 85, 98, 203], "1307": 28, "432": [28, 71, 202], "434607": 28, "144": [28, 63, 85, 192], "0509758447494279": 28, "313552108895239": 28, "14751999969868": 28, "estim": [28, 38, 57, 58, 62, 83, 274], "preserv": [28, 39, 40, 49, 58, 94, 170, 198, 203, 208, 209, 219], "77245385090552": 28, "4142135623730951": 28, "varieti": [28, 40, 41, 50, 58, 99, 102, 137, 194, 201, 203, 227, 245], "risk": 28, "parse_latex": [28, 100], "central": [29, 49, 55, 66, 68, 74, 113, 119, 137, 193, 202, 203, 220, 227], "pypi": 30, "continuum": [30, 269], "qtconsol": [30, 283], "nicer": [30, 58, 130], "setupegg": 30, "enthought": 30, "canopi": 30, "activepython": 30, "spack": 30, "freshli": 30, "starter": 30, "sy": [30, 40, 60, 122, 139, 207, 238, 249, 258, 276], "wherev": [30, 122, 219, 226, 256], "visit": [30, 42, 49, 58, 63, 281], "chat": 30, "gitter": [30, 280], "excel": [30, 62, 202, 282], "ticket": 30, "export": [31, 207], "latin": 31, "clunki": 31, "collid": [31, 233], "win": 31, "throwawai": 31, "surviv": 31, "foo": [31, 38, 40, 58, 167, 187, 245, 248], "report": [31, 38, 49, 58, 71, 89, 98, 204, 215, 226, 238, 280, 285], "stick": 31, "_clash1": [31, 58], "_clash2": [31, 58], "multi": [31, 58, 59, 123, 132, 139, 152, 156, 166, 193, 207, 226, 269], "_clash": [31, 58], "sympif": [31, 58], "real_field": 32, "instanti": [32, 39, 40, 50, 58, 66, 71, 73, 74, 91, 94, 162, 170, 182, 193, 194, 198, 202, 227, 252, 256], "q1": [32, 94, 101, 112, 122, 124, 125, 126, 127, 129, 130, 131, 134, 135, 136, 140, 181, 182, 184, 186, 187, 190, 191, 197, 252, 254], "q2": [32, 101, 112, 122, 124, 125, 126, 127, 129, 130, 131, 134, 135, 140, 181, 182, 184, 186, 187, 190, 191, 197, 252, 254], "r1": [32, 68, 71, 87, 101, 102, 145, 182, 188, 203, 252], "euclideanspac": 32, "realnormedalgebra": 32, "r2": [32, 60, 71, 87, 89, 101, 102, 145, 182, 203, 207, 219, 252], "q3": [32, 112, 124, 125, 127, 129, 130, 131, 134, 182, 184, 186, 191, 252, 254], "bi": [32, 58, 64, 66, 85, 191, 214, 223], "cj": 32, "dk": [32, 101, 202], "atan2": [32, 37, 60, 64, 146, 207, 252], "atan": [32, 37, 60, 62, 64, 69, 74, 82, 85, 126, 140, 141, 204, 207, 209], "arc_coplanar": 32, "arc": [32, 64, 284], "coplanar": [32, 72, 191], "parallel": [32, 68, 71, 72, 74, 85, 105, 108, 111, 190, 191, 200, 258, 262], "vector_coplanar": 32, "is_pur": 32, "mathbf": [32, 91, 117, 132, 134, 135, 137, 177, 181, 182, 187, 188, 190, 191, 207, 217, 228, 256, 257, 259, 261, 262], "versor": 32, "0i": 32, "0j": [32, 197], "0k": 32, "vector_part": 32, "from_axis_angl": 32, "radian": [32, 64, 67, 68, 69, 71, 72, 73, 94, 106, 122, 145, 146, 182], "from_rotation_matrix": 32, "orthogon": [32, 36, 73, 87, 94, 170, 182, 191, 252, 254], "det": [32, 94, 95, 139, 191, 196, 280], "index_vector": 32, "mod": [32, 59, 64, 88, 94, 95, 98, 168, 194, 196, 197, 198, 200, 202, 203, 207, 209, 217, 220], "magnitud": [32, 40, 57, 58, 62, 66, 99, 101, 102, 104, 106, 126, 139, 170, 179, 182, 188, 191, 193, 252, 259, 261], "norm": [32, 94, 170, 182, 198, 200, 202, 203], "scalar_part": 32, "is_zero_quaternion": 32, "mensor": 32, "60": [32, 44, 49, 51, 57, 58, 63, 66, 85, 94, 98, 101, 102, 206, 207, 220, 223, 245], "pth": 32, "668": 32, "224": [32, 175, 201], "336": 32, "448": 32, "pow_cos_sin": 32, "900": 32, "1800": [32, 59], "2700": [32, 101], "3600": [32, 63], "rotate_point": 32, "coordin": [32, 40, 59, 60, 64, 66, 67, 69, 73, 75, 91, 94, 101, 104, 106, 110, 116, 117, 118, 121, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 138, 140, 148, 150, 169, 170, 173, 181, 182, 183, 184, 186, 188, 191, 194, 202, 203, 215, 223, 252, 254, 255, 258, 260, 262, 267, 269], "to_axis_angl": 32, "to_rotation_matrix": 32, "assumptionkei": 33, "proposit": [33, 35, 88], "is_tru": [33, 35, 36], "assumptionscontext": [33, 34, 35], "global_assumpt": [33, 34, 35], "discern": [33, 35], "refin": [33, 35, 58, 89, 194, 198, 202, 203, 219, 240, 264], "progress": [33, 35, 98, 240], "inherit": [33, 58, 65, 88, 91, 92, 116, 161, 170, 192, 207, 227, 232, 240, 241], "askhandl": 33, "mere": [34, 35, 40, 62, 167], "thin": [34, 94, 128, 141], "undefinedpred": [34, 35], "sexi": [34, 35], "sexyprimepred": [34, 35], "sexyprim": [34, 35], "int1": [34, 35], "int2": [34, 35], "assump": [34, 35], "r3": [34, 87, 101, 102, 219], "predicate_": [34, 35], "mathematical_log": [34, 35], "r4": [34, 87, 101], "sexy_prim": [34, 35], "resolut": [34, 35, 220], "askpredicatehandl": [34, 35], "r5": [35, 219], "r6": 35, "notabl": [35, 40, 61, 66, 83, 99, 197], "truth_maintenance_system": 35, "istruepred": 36, "gt": [36, 40, 58, 227, 245], "istruehandl": 36, "commutativepred": 36, "commutativehandl": 36, "finitepred": 36, "nor": [36, 38, 58, 88, 98, 146, 193, 203, 214, 216, 223, 233, 252], "nan": [36, 37, 58, 64, 66, 114, 219, 227, 274], "finitehandl": 36, "r7": 36, "infinitepred": 36, "infinitehandl": 36, "symmetricpred": 36, "symmetr": [36, 37, 41, 46, 49, 50, 54, 74, 89, 90, 91, 94, 98, 181, 192, 198, 200, 203, 206, 215, 217, 233, 245], "transpos": [36, 39, 89, 91, 94, 108, 139, 155, 182, 191, 196, 202, 220, 228, 233, 234, 280], "diagon": [36, 63, 89, 90, 91, 94, 97, 121, 144, 196, 229], "symmetrichandl": 36, "r8": 36, "symmetric_matrix": 36, "invertiblepred": 36, "fullrank": [36, 40], "invertiblehandl": 36, "r9": 36, "invertible_matrix": 36, "orthogonalpred": 36, "tm": [36, 145], "mm": [36, 39, 98, 117, 124, 129, 130, 170, 196], "orthogonalhandl": 36, "r10": 36, "orthogonal_matrix": 36, "unitarypred": 36, "unitari": [36, 85, 98, 156, 161, 192], "unitaryhandl": 36, "r11": 36, "unitary_matrix": 36, "positivedefinitepred": 36, "tmz": 36, "column": [36, 39, 40, 41, 86, 88, 89, 91, 94, 95, 97, 108, 117, 121, 124, 137, 167, 174, 182, 187, 192, 196, 202, 207, 223, 226, 232, 252], "positive_definit": 36, "positivedefinitehandl": 36, "r12": 36, "definite_matrix": 36, "uppertriangularpred": 36, "triangular": [36, 89, 90, 94, 196, 202, 225, 227, 262], "m_": [36, 135, 192, 200], "ij": [36, 172, 177, 192, 227], "zeromatrix": [36, 91], "upper_triangular": [36, 89], "uppertriangularhandl": 36, "r13": 36, "uppertriangularmatrix": 36, "lowertriangularpred": 36, "lower_triangular": [36, 89], "lowertriangularhandl": 36, "r14": 36, "lowertriangularmatrix": 36, "diagonalpred": 36, "diagonalhandl": 36, "r15": 36, "diagonal_matrix": 36, "fullrankpred": 36, "rank": [36, 40, 41, 42, 47, 49, 50, 52, 53, 54, 73, 87, 94, 95, 182, 184, 194, 196, 198, 200, 202, 228, 232, 233, 280], "row": [36, 39, 40, 41, 47, 50, 58, 63, 89, 90, 91, 94, 95, 97, 98, 108, 121, 122, 124, 137, 139, 140, 167, 182, 191, 196, 202, 207, 217, 226, 227, 232, 246, 252, 254], "linearli": [36, 40, 66, 82, 94, 200, 223, 225, 233], "fullrankhandl": 36, "squarepred": 36, "squarehandl": 36, "r16": 36, "square_matrix": 36, "integerelementspred": 36, "integer_el": 36, "integerelementshandl": 36, "realelementspred": 36, "real_el": 36, "realelementshandl": 36, "complexelementspred": 36, "complex_el": 36, "complexelementshandl": 36, "singularpred": 36, "singular": [36, 40, 50, 58, 62, 64, 65, 66, 80, 81, 83, 85, 94, 101, 103, 136, 182, 194, 201, 214, 223, 226, 252, 269, 274], "singularhandl": 36, "fore": 36, "r17": 36, "singularmatrix": 36, "normalpred": 36, "normalhandl": 36, "r18": 36, "normal_matrix": 36, "triangularpred": 36, "triangularhandl": 36, "r19": 36, "triangular_matrix": 36, "unittriangularpred": 36, "unit_triangular": 36, "unittriangularhandl": 36, "evenpred": 36, "evenhandl": 36, "oddpred": 36, "oddhandl": 36, "primehandl": 36, "subject": [36, 68, 74, 102, 112, 140, 202], "compositepred": 36, "compositehandl": 36, "positivepred": 36, "positivehandl": 36, "negativepred": 36, "negativehandl": 36, "zeropred": 36, "zerohandl": 36, "nonzeropred": 36, "nonzerohandl": 36, "nonpositivepred": 36, "nonpositivehandl": 36, "nonnegativepred": 36, "nonnegativehandl": 36, "integerpred": 36, "integerhandl": 36, "r20": 36, "rationalpred": 36, "rationalhandl": 36, "r21": 36, "irrationalpred": 36, "ratio": [36, 48, 49, 57, 58, 62, 63, 66, 68, 71, 72, 73, 74, 90, 98, 108, 145, 177, 207, 216, 219, 225], "irrationalhandl": 36, "r22": 36, "realpred": 36, "disjoint": [36, 39, 47, 50, 203, 215, 245], "realhandl": 36, "r23": 36, "extendedrealpred": 36, "extendedrealhandl": 36, "hermitianpred": 36, "hermitianhandl": 36, "r24": 36, "hermitianoper": [36, 161], "complexpred": 36, "complexhandl": 36, "r25": 36, "imaginarypred": 36, "imaginaryhandl": 36, "r26": 36, "antihermitianpred": 36, "antihermitianhandl": 36, "r27": 36, "algebraicpred": 36, "askalgebraicpredicatehandl": 36, "r28": 36, "algebraichandl": 36, "transcendentalpred": 36, "transcedent": 36, "refine_pow": 37, "refine_ab": 37, "refine_arg": 37, "refine_atan2": 37, "refine_im": 37, "refine_matrixel": 37, "refine_r": 37, "refine_sign": 37, "lagrang": [38, 58, 115, 116, 128, 132, 203, 220, 269], "lagrangian": [38, 117, 119, 126, 131, 135, 136], "euler_equ": 38, "r29": 38, "93lagrange_equ": 38, "decreas": [38, 40, 50, 200], "monoton": [38, 40, 75], "is_decreas": 38, "lopen": [38, 58, 215, 222, 227], "ropen": [38, 64, 215, 227], "is_increas": 38, "72": [38, 58, 71, 94, 98, 101, 192, 206], "is_monoton": 38, "is_strictly_decreas": 38, "is_strictly_increas": 38, "monotonicity_help": 38, "held": [38, 59, 136, 231, 284], "r30": 38, "mathematical_singular": 38, "interpol": [38, 63, 67, 139, 200, 203], "finite_diff_weight": [38, 58, 274], "apply_finite_diff": [38, 58, 274], "differentiate_finit": [38, 58, 274], "finite_diff": [38, 58], "x_list": [38, 274], "y_list": [38, 274], "cube": [38, 40, 42, 49, 51, 64, 85, 200, 201, 220, 226, 262], "xlist": 38, "55271367880050e": 38, "indexedbas": [38, 40, 57, 58, 207, 225, 231, 232, 239], "idx": [38, 40, 207, 231, 232, 239], "region": [38, 66, 75, 85, 193, 215, 223, 226, 227, 252, 255, 262], "bewar": [38, 66], "phenomenon": [38, 177, 200, 210, 279], "90": [38, 49, 56, 66, 89, 94, 100, 101, 104, 112, 122, 140, 207, 209, 219, 227, 240], "finitediff": 38, "wrt": [38, 40, 58, 60, 66, 75, 94, 122, 139, 182, 183, 200, 203, 252, 254, 255, 259], "len": [38, 46, 47, 48, 49, 50, 54, 56, 58, 59, 63, 66, 73, 83, 88, 126, 141, 145, 156, 166, 203, 219, 223, 232, 245], "nearest": [38, 202], "furthest": [38, 59], "sublist": [38, 54, 59, 85, 169, 274], "fd": [38, 40, 172], "0th": [38, 50, 59, 66], "1st": [38, 50, 98, 108, 223, 224, 248, 274], "classic": [38, 64, 66, 94, 158, 174, 182, 191, 194, 269], "forward": [38, 40, 89, 108, 124, 132, 165, 190, 219, 238], "pai": 38, "attent": [38, 49, 64], "gridpoint": 38, "plan": [38, 112, 198, 283], "mycoeff": 38, "3rd": [38, 50, 64, 98, 139, 203, 225, 228, 245], "2nd": [38, 50, 59, 98, 108, 139, 223, 228, 245], "cost": [38, 40, 98, 126, 226, 278], "poorer": 38, "grand": 38, "r31": 38, "51": [38, 94, 98], "184": [38, 223], "1988": [38, 151, 169, 200, 201], "699": 38, "706": [38, 94], "1090": [38, 203], "s0025": [38, 98], "5718": [38, 98], "0935077": 38, "continuous_domain": [38, 222], "tan": [38, 58, 63, 64, 85, 100, 114, 129, 130, 131, 136, 204, 206, 207, 214, 216, 223, 226, 284], "function_rang": 38, "is_convex": [38, 74], "convex": [38, 74, 75, 85], "unspecifi": [38, 58, 73, 274], "multivari": [38, 58, 66, 194, 195, 197, 198, 199, 201, 203, 204, 214, 219, 225, 226, 227, 284], "concav": [38, 141], "r32": 38, "convex_funct": 38, "r33": 38, "ifp": 38, "illinoi": 38, "edu": [38, 42, 49, 50, 59, 61, 63, 85, 94, 98, 201, 206, 216, 219, 220, 223, 227, 252], "angelia": 38, "l3_convfunc": 38, "r34": 38, "logarithmically_convex_funct": 38, "r35": 38, "logarithmically_concave_funct": 38, "r36": 38, "concave_funct": 38, "lcim": 38, "mixtur": [38, 40, 75, 194, 240], "incommensur": 38, "not_empty_in": [38, 226], "finset_intersect": 38, "finite_set": [38, 215], "tracker": [38, 215, 226, 280], "aperiod": 38, "smallest": [38, 52, 64, 71, 73, 80, 88, 94, 98, 169, 182, 198, 243, 245], "verif": [38, 196, 225], "reliabl": [38, 58, 223, 243, 274], "henc": [38, 40, 48, 49, 58, 60, 64, 66, 70, 83, 86, 88, 98, 104, 188, 193, 194, 195, 200, 207, 217, 220, 224, 226, 238, 242, 257, 258, 259, 279, 284], "stationary_point": 38, "stationari": [38, 227], "tikz": 39, "joyofcat": 39, "adamek": 39, "herrlich": 39, "strecker": 39, "joi": 39, "cat": [39, 181], "book": [39, 49, 59, 64, 117, 122, 125, 133, 137, 138, 157, 201, 206, 207, 277], "katmat": 39, "uni": [39, 85, 245], "bremen": 39, "de": [39, 59, 63, 98, 177, 192, 193, 204, 209, 220, 223, 245], "acc": [39, 139, 186, 190], "embryon": 39, "morphism": [39, 194], "codomain": [39, 194, 202], "arrow": [39, 87, 101, 193, 207], "namedmorph": 39, "prohibit": [39, 50, 51, 182], "identitymorph": 39, "compositemorph": 39, "compos": [39, 58, 59, 126, 136, 174, 176, 177, 190, 194, 198, 202, 203, 204, 207, 209, 219], "circ": [39, 58, 69, 75, 83, 91], "compon": [39, 40, 54, 58, 60, 73, 85, 91, 94, 109, 116, 119, 132, 133, 137, 144, 169, 174, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 203, 205, 227, 229, 232, 233, 242, 245, 252, 255, 258, 259], "new_nam": 39, "id_a": 39, "id_b": 39, "commutative_diagram": 39, "quadrupl": [39, 203], "mbox": 39, "hom": 39, "id": [39, 54, 64], "rightarrow": [39, 50, 54, 59, 63, 64, 66, 80, 81, 83, 85, 88, 89, 98, 193, 202, 214, 226, 245, 274], "monoid": 39, "pare1970": 39, "accompani": 39, "premis": 39, "conclus": [39, 58], "carri": [39, 40, 58, 164, 170, 177, 194, 197, 200, 202, 204, 205, 246], "premises_kei": 39, "et": [39, 85, 151, 200, 203, 204, 216, 219], "pareigi": 39, "functor": 39, "1970": [39, 94], "is_subdiagram": 39, "subdiagram": 39, "d1": [39, 54, 182, 194, 214, 227, 252], "subdiagram_from_object": 39, "veryuniqu": 39, "diagram_draw": 39, "diagramgrid": 39, "analys": [39, 106, 108, 139, 227], "drawn": [39, 49, 87, 193, 197, 205], "moprhism": 39, "strive": 39, "nevertheless": 39, "laid": [39, 122, 169], "width": [39, 40, 86, 187, 193, 203, 207, 238], "height": [39, 40, 74, 91, 141, 193, 194, 207, 214, 262], "emploi": [39, 57, 62, 85, 98, 203, 206, 223, 227], "lai": 39, "layout": 39, "sequenti": [39, 42, 59, 64, 252, 254], "test_draw": 39, "lemma": [39, 49, 83, 195], "fivelemma": 39, "five_lemma": 39, "arrowstringdescript": 39, "curving_amount": 39, "looping_start": 39, "looping_end": 39, "horizontal_direct": 39, "vertical_direct": 39, "label_posit": 39, "pic": 39, "princip": [39, 59, 64, 66, 83, 85, 95, 110, 124, 145, 194, 195, 196, 197, 198, 200, 202, 203, 204], "offset": [39, 40, 58, 63, 66, 232], "cell": 39, "vertic": [39, 42, 51, 52, 68, 69, 71, 73, 74, 75, 85, 87, 89, 94, 102, 121, 127, 144, 152, 192, 193, 196, 202, 207, 215, 245, 262], "disregard": 39, "unexplain": 39, "astr": 39, "dr": [39, 60, 207, 223], "12mm": 39, "correspondingli": 39, "label_displac": 39, "arrow_styl": 39, "dash": 39, "xypicdiagramdraw": 39, "formatt": 39, "utilis": 39, "xypic": 39, "drawer": 39, "xymatrix": 39, "ld": 39, "arrow_formatt": 39, "therebi": 39, "default_arrow_formatt": 39, "farther": 39, "centr": [39, 55, 193], "default_formatt": 39, "45": [39, 58, 63, 74, 94, 98, 104, 203, 204, 220], "_3mm": 39, "default_curving_amount": 39, "cm": [39, 139, 227], "_1cm": 39, "default_curving_step": 39, "h1": [39, 119], "1cm": 39, "rr": [39, 58, 76, 196, 197, 203, 204], "h_": [39, 49, 54, 63, 66, 85], "_2cm": 39, "mask": [39, 207], "diagram_format": 39, "proceed": [39, 41, 83, 85, 138, 201, 217], "xypic_draw_diagram": 39, "shortcut": [39, 58, 90, 191, 207, 215, 219, 284], "insert": [39, 41, 89, 100, 101, 167, 172, 207, 227, 248], "preview_diagram": 39, "png": [39, 86, 94, 101, 102, 106, 187, 193, 207, 210], "brief": [40, 226, 238, 261], "fab": [40, 207], "cse_main": [40, 208, 219], "cse": [40, 99, 112, 161, 208, 219, 240, 246], "meat": 40, "lightweight": [40, 202, 278], "pycod": [40, 207], "lambdarepr": [40, 207, 246], "aesara_funct": [40, 99, 207], "float80": [40, 207], "assign_to": [40, 207], "type_alias": [40, 207], "0l": [40, 207], "powl": [40, 207], "c99": [40, 207, 240], "expm1": [40, 207], "thrown": [40, 207], "fcode": [40, 207], "contract": [40, 60, 109, 172, 207, 216, 229, 231, 232, 233, 234], "len_i": [40, 207], "mat_1": 40, "mat_2": 40, "jscode": [40, 207], "user_funct": [40, 207], "argument_test": [40, 207], "cfunction_str": [40, 207], "octav": [40, 139, 240], "custom_funct": [40, 207], "existing_octave_fcn": [40, 207], "is_matrix": [40, 207], "my_mat_fcn": [40, 207], "my_fcn": [40, 207], "mat": [40, 91, 141, 166, 207], "octave_cod": [40, 207], "summat": [40, 57, 58, 62, 63, 66, 172, 201, 203, 207, 210, 219, 227, 228, 231, 232, 233, 239], "mathematica_cod": [40, 207], "g1": [40, 43, 48, 49, 83, 94, 108], "g2": [40, 43, 48, 49, 83, 87, 94, 108], "gamma_1": [40, 111], "gamma_2": [40, 111], "\u03b3\u2081": 40, "\u03b3\u2082": 40, "\u03b2": [40, 192], "h_i": [40, 54], "c89": [40, 207, 240], "julia_cod": [40, 207], "rust_cod": [40, 207], "powi": [40, 207], "make_routin": [40, 240], "f95": [40, 239, 240], "matlab": [40, 112, 139, 240, 280], "breadth": [40, 58, 227], "c_name": [40, 240], "c_code": [40, 240], "h_name": [40, 240], "c_header": [40, 240], "volume_result": 40, "ifndef": [40, 240], "project__test__h": [40, 240], "endif": [40, 240], "preprocessor": [40, 208, 219, 240], "global_var": [40, 240], "insensit": [40, 94, 139, 207, 238, 240], "argument_sequ": [40, 240], "routin": [40, 47, 57, 58, 59, 60, 83, 88, 89, 94, 98, 144, 172, 196, 200, 203, 206, 207, 208, 219, 220, 223, 224, 225, 226, 239, 245, 259], "name_expr": [40, 240], "to_fil": [40, 240], "f_name": [40, 240], "f_code": [40, 240], "choic": [40, 50, 63, 66, 83, 85, 99, 136, 168, 177, 181, 182, 190, 198, 200, 203, 207, 219, 223, 245, 278], "hydrogen": [40, 269], "r_nl": [40, 110, 173], "my_routin": 40, "result_var": [40, 240], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 40, "__________": [40, 195], "\u212f": [40, 144, 192, 207, 274, 278, 280, 284, 285], "assoc_laguerr": [40, 66, 207], "fcn": [40, 240], "result_5397460570204848505": [40, 240], "out_8598435338387848786": [40, 240], "examin": [40, 59, 161, 238, 240, 284], "inputargu": [40, 240], "outputargu": [40, 240], "inoutargu": [40, 240], "disk": [40, 59, 215, 226, 246], "binary_funct": [40, 99, 239], "tensor": [40, 45, 60, 94, 109, 119, 137, 151, 157, 158, 159, 169, 172, 181, 182, 207, 228, 229, 231, 232, 239, 246, 256, 257, 263, 264, 267, 269], "binary_func": [40, 239], "servic": [40, 227], "tempdir": [40, 239], "qho_1d": [40, 148], "psi_n": [40, 148], "y_": [40, 66, 83, 110, 192], "qho": 40, "tmp": 40, "subroutin": [40, 49, 168, 200], "autofunc": 40, "dimens": [40, 42, 59, 60, 66, 67, 69, 71, 72, 73, 75, 87, 89, 91, 94, 97, 101, 109, 126, 146, 156, 158, 161, 166, 175, 176, 179, 180, 182, 193, 196, 207, 220, 223, 225, 227, 228, 232, 233, 240, 252, 255, 257, 269], "hbar": [40, 148, 154, 167, 173, 177, 179, 192], "05457162d": 40, "14159265358979d0": 40, "0d0": [40, 207], "74126166983329d": 40, "33": [40, 58, 61, 94, 137, 145, 200, 204, 207, 227], "verbos": [40, 58, 89, 98, 207, 238, 239, 283], "mute": [40, 239], "backend": [40, 86, 99, 100, 106, 125, 127, 133, 187, 204, 239, 246], "auxiliari": [40, 85, 117, 122, 134, 223, 239], "function_nam": [40, 239], "sympy_express": [40, 239], "mandatori": [40, 207, 239], "illustr": [40, 94, 123, 126, 177, 197, 210, 214], "psi_nl": 40, "766": 40, "incur": [40, 99], "get_numpy_arrai": 40, "tight": 40, "temp": [40, 124], "alloc": [40, 64], "fuse": 40, "wise": [40, 41, 64, 89, 196, 200, 207, 213, 239], "unabl": [40, 71, 75, 100, 225, 252, 273, 274], "fortun": [40, 99, 126, 203, 204], "reconnect": 40, "autom": [40, 64, 99, 216, 239, 278], "ideologi": [40, 226], "fashion": [40, 58, 64, 91, 124, 134, 135, 137, 191, 194, 245], "broadcast": [40, 99, 207, 232, 239], "outperform": 40, "jensen": 40, "quantit": [40, 174], "leverag": [40, 99, 207], "ufunc": [40, 99, 239, 246], "fn_numpi": 40, "fn_fortran": 40, "linspac": [40, 81, 99, 122, 139], "xx": [40, 94, 119, 191, 245], "21306132": 40, "98101184": 40, "44626032": 40, "timeit": [40, 204], "10000": [40, 62, 98, 99, 101, 225], "18891601900395472": 40, "004707066000264604": 40, "facil": 40, "comparison": [40, 57, 58, 88, 94, 122, 194, 202, 206, 225, 238, 245], "thereof": [40, 58, 194, 200, 202], "optims_c99": 40, "log1p": [40, 207], "expm1_opt": 40, "log1p_opt": 40, "exp2_opt": 40, "log2_opt": 40, "log2const_opt": 40, "funcminusoneoptim": 40, "func_m_1": 40, "opportunist": 40, "replaceoptim": 40, "catastroph": 40, "replace_in_add": 40, "cost_funct": 40, "prioriti": [40, 81, 112, 122, 191, 246], "__call__": [40, 50, 58, 202], "exp2": [40, 207], "create_expand_pow_optim": 40, "base_req": 40, "is_symbol": [40, 89], "expand_opt": 40, "opt2": 40, "is_funct": 40, "log2": [40, 66, 207], "matin_opt": 40, "matinv_opt": 40, "matrixsolv": [40, 207], "matrix_nod": 40, "numpyprint": 40, "doprint": [40, 207], "seriesapprox": 40, "reltol": 40, "max_ord": 40, "n_point_check": 40, "threshold": [40, 98], "largest": [40, 50, 52, 58, 64, 66, 94, 97, 98, 152, 194, 198, 225, 245], "series_approx2": 40, "1e": [40, 58, 62, 94, 106, 141, 203, 225], "series_approx3": 40, "series_approx8": 40, "sumapprox": 40, "neglect": 40, "2000": [40, 44, 85, 98, 201], "sum_approx3": 40, "sum_approx2": 40, "sum_approx1": 40, "token": [40, 83, 86, 100], "diagram": [40, 47, 87, 101, 125, 126, 127, 132, 152, 232, 257, 279], "codegenast": 40, "assignmentbas": 40, "augmentedassign": 40, "addaugmentedassign": 40, "subaugmentedassign": 40, "mulaugmentedassign": 40, "divaugmentedassign": 40, "modaugmentedassign": 40, "codeblock": [40, 100], "quotedstr": 40, "intbasetyp": 40, "_sizedinttyp": 40, "signedinttyp": 40, "unsignedinttyp": 40, "floatbasetyp": 40, "floattyp": 40, "complexbasetyp": 40, "complextyp": 40, "pointer": [40, 240, 241], "functionprototyp": 40, "functiondefinit": [40, 100], "stream": [40, 59, 208, 219, 245], "functioncal": 40, "breaktoken": 40, "continuetoken": 40, "nonetoken": 40, "float32": [40, 99, 100, 246], "codeprint": 40, "complex_": 40, "bool_": 40, "intc": [40, 100], "intp": 40, "unsign": [40, 63, 219], "int8": 40, "int16": 40, "int32": 40, "int64": [40, 227], "uint8": 40, "uint16": 40, "uint32": 40, "uint64": 40, "x86": 40, "amd64": 40, "complex64": 40, "complex128": 40, "newton": [40, 66, 132, 175, 179, 200, 204], "aug_assign": 40, "tol": [40, 58, 198], "val": [40, 58, 70, 198, 202, 246], "whl": 40, "py_str": 40, "inf": [40, 50, 58, 94, 198, 203, 215, 223, 227], "exec": [40, 58, 86, 246], "1121416371": 40, "909672693737": 40, "867263818209": 40, "865477135298": 40, "865474033111": 40, "1g": 40, "3e": 40, "2003": [40, 192, 201, 207, 220], "source_format": [40, 207], "op": [40, 58, 94, 161, 172, 186, 190, 216, 245, 246], "parametr": [40, 66, 67, 71, 94, 193, 220, 226, 252, 255, 262], "volatil": 40, "binop": 40, "exit": [40, 98, 238], "premad": 40, "break_": 40, "lift": [40, 54, 64, 66, 83, 198, 200, 203], "left_hand_sid": 40, "topological_sort": [40, 245], "postprocess": [40, 203, 208, 219], "topolog": [40, 58, 60, 196, 245], "continue_": 40, "untyp": 40, "compliant": 40, "ok": [40, 50, 207, 223], "elem": [40, 49, 194], "ijk": [40, 232], "stride": [40, 232], "lmn": 40, "cast_nocheck": 40, "alia": [40, 51, 58, 68, 74, 89, 90, 92, 96, 156, 165, 172, 194, 197, 198, 202, 206, 215, 238, 248, 284], "nbit": 40, "storag": [40, 58, 94, 166, 192, 200], "nmant": 40, "mantissa": 40, "nexp": 40, "half_precis": 40, "f16": 40, "65504": 40, "tini": [40, 58], "ep": [40, 49, 57, 198, 202, 203], "decimal_dig": 40, "cast_check": 40, "1e5": 40, "cast": [40, 91, 276], "subnorm": [40, 49], "idempot": 40, "loos": [40, 58], "overflow": [40, 242], "max_expon": 40, "min_expon": 40, "for_i": 40, "for_ji": 40, "for_kji": 40, "function_arg": [40, 238], "fcall": 40, "bar": [40, 66, 123, 132, 161, 167, 248, 269], "baz": 40, "return_typ": 40, "fp": [40, 41, 58, 203, 209], "from_functionprototyp": 40, "prototyp": [40, 99, 240], "value_const": 40, "pointer_const": 40, "attr_param": 40, "looking_for": 40, "as_declar": 40, "formatstr": 40, "5g": 40, "stdout": [40, 238], "stderr": 40, "oppos": [40, 246, 274], "_field": 40, "_construct_": 40, "not_in_arg": 40, "float16": 40, "inttyp": 40, "super": [40, 66, 198, 207, 252, 254], "from_expr": [40, 203], "42": [40, 47, 58, 61, 63, 71, 72, 74, 89, 90, 92, 94, 96, 98, 198, 203, 220, 238], "v6": 40, "123456": [40, 58, 98], "v10": 40, "12345": [40, 62], "67894": 40, "boost_mp50": 40, "boost": 40, "multiprecis": [40, 197], "cpp_dec_float_50": 40, "r37": 40, "rtol": 40, "atol": 40, "precision_target": 40, "v18": 40, "123456789012345646": 40, "123456789012345649": 40, "Will": [40, 94, 100, 202, 207, 238], "decl1": 40, "decl2": 40, "alt": 40, "secondarili": [40, 203], "mathcin": 40, "cbrt": [40, 64, 207], "minu": [40, 57, 58, 188, 200, 207, 259], "0e": [40, 58], "fma": [40, 207], "cpu": [40, 99, 139], "hypot": [40, 207], "hypotenus": [40, 74], "log10": [40, 207], "ten": [40, 99], "plu": [40, 57, 94, 100, 139, 152, 203, 207, 217, 246], "famili": [40, 42, 76, 85, 195], "commaoper": 40, "goto": 40, "preincrement": 40, "postdecr": 40, "decrement": [40, 242], "postincr": 40, "increment": [40, 49, 50, 51, 57, 74, 98, 227], "predecr": 40, "alignof": 40, "sizeof": 40, "struct": [40, 192], "dsign": 40, "arrayconstructor": 40, "ac": [40, 50, 70, 104, 119, 137, 149, 220, 227, 245, 248], "95": [40, 56, 98, 200, 207, 223, 225, 240], "do1": 40, "1d0": 40, "do2": 40, "extent": 40, "intent_out": 40, "dim": [40, 60, 73, 99, 174, 180, 207, 230, 233, 267], "arr": 40, "fortranreturn": 40, "aid": [40, 124], "implieddoloop": 40, "idl": 40, "signallib": 40, "prog": [40, 151], "myprogram": 40, "mysub": 40, "subroutinecal": 40, "passs": 40, "inout": 40, "bind_c": 40, "sum_": [40, 57, 58, 59, 63, 66, 83, 85, 89, 91, 98, 192, 203, 204, 209, 210, 217, 223, 227], "cmplx": [40, 207], "intent_in": 40, "intrins": 40, "isign": 40, "lbound": 40, "lb": [40, 80, 242], "literal_dp": 40, "num": [40, 49, 58, 98, 108, 198, 219, 223, 242, 248], "literal_sp": 40, "reshap": [40, 89, 122, 139, 228, 234, 245], "arrayexpr": 40, "shp": 40, "metric": [40, 50, 54, 60, 109, 219, 223, 226, 233], "snr": 40, "convolution2d": 40, "use_renam": 40, "ren": 40, "thingi": 40, "newtons_method": 40, "itermax": 40, "counter": [40, 58, 64, 70, 89, 102, 104], "raphson": 40, "criterion": [40, 49, 138, 195, 200], "netwon": 40, "algo": [40, 50], "r38": 40, "27s_method": 40, "newtons_method_funct": 40, "param": [40, 60, 94, 220], "render_as_modul": 40, "py_mod": 40, "865474033102": 40, "render_as_source_fil": 40, "printer_set": 40, "fcodeprint": [40, 207], "fpgroup": [41, 49], "studi": [41, 48, 57, 60, 94, 191, 194, 200, 203, 220, 227], "combinator": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 91, 98, 209, 228, 233, 242, 245, 264, 278, 284], "free_group": [41, 48, 49], "vfree_group": 41, "xfree_group": 41, "fp_group": [41, 49], "coset_enumeration_r": 41, "fall": [41, 57, 58, 63, 86, 187, 202, 207, 220, 224, 227], "famou": [41, 66, 85, 98, 220], "langl": [41, 49, 151, 192], "rangl": [41, 49, 151, 169, 192], "gen0": 41, "gen1": 41, "gen_": 41, "freegroup": 41, "x_2": [41, 48, 63, 80, 167, 195, 200, 203, 209, 220, 226], "x_3": [41, 48, 80, 167], "s_1": 41, "r_1": [41, 194, 204], "s_2": 41, "r_2": 41, "s_k": 41, "r_k": [41, 165], "s_i": [41, 54, 85, 87], "r_i": [41, 204], "reduct": [41, 94, 118, 200, 202, 220], "ho05": [41, 48], "cdhw73": 41, "hav91": 41, "coset_enumeration_c": 41, "coset_enumer": 41, "relator_bas": 41, "coset_table_bas": 41, "influenc": [41, 101, 194, 195], "coset_table_max_limit": 41, "4096000": 41, "safeti": [41, 50, 92], "max_coset": 41, "cox": [41, 201, 203], "c_r": [41, 217], "50": [41, 49, 61, 62, 63, 66, 74, 94, 98, 101, 102, 145, 203, 207, 216, 225], "max_stack_s": 41, "500": [41, 62, 119], "deduction_stack": 41, "stack": [41, 75, 89, 139, 196, 202, 207, 236, 242, 280], "occurr": [41, 58, 98, 122, 182, 219, 227], "exce": [41, 98, 233], "modest": 41, "low_index_subgroup": 41, "conjugaci": [41, 49], "coset_t": [41, 49], "reidemeister_present": 41, "y_1": [41, 220, 227], "y_2": [41, 220, 227], "john": [41, 49, 66, 203, 220, 223], "cannon": 41, "lucien": 41, "dimino": [41, 49], "georg": [41, 194, 223, 245], "hava": 41, "jane": 41, "watson": [41, 219], "comp": [41, 223], "463": [41, 138], "490": [41, 50], "1973": [41, 59, 189], "derek": [41, 48], "holt": [41, 48, 49, 56], "chapman": [41, 48], "hall": [41, 48, 227], "crc": [41, 48, 50], "2005": [41, 48, 85, 98, 203], "xvi": [41, 48], "514": [41, 48, 201], "symposium": [41, 83, 200, 201, 217], "issac": [41, 85, 201, 225], "bonn": 41, "1991": [41, 201], "191": [41, 226], "199": 41, "acm": [41, 57, 83, 85, 201, 217, 223, 225], "graycod": 42, "kw_arg": [42, 52, 172, 232, 233], "hamiltonian": [42, 163], "edg": [42, 51, 52, 87, 196, 207, 226, 245, 283], "hamilton": [42, 89], "vertex": [42, 52, 69, 74, 85, 196], "000": [42, 62, 85, 88, 166, 245], "110": [42, 88, 223, 225, 239, 245], "010": [42, 88, 245], "011": [42, 88, 166, 245], "111": [42, 61, 68, 88, 98, 245], "101": [42, 66, 88, 98, 166, 245], "001": [42, 62, 88, 141, 245], "delet": [42, 87, 89, 94, 204, 248, 284], "statist": [42, 59, 66, 227, 238, 278], "manner": [42, 59, 66, 136, 170, 188, 220, 223, 228, 245, 261], "generate_grai": 42, "0000": 42, "0001": [42, 62], "0011": [42, 53], "0010": 42, "0110": 42, "0111": [42, 166], "0101": [42, 166], "0100": 42, "1100": 42, "1101": 42, "1111": 42, "1110": 42, "1010": 42, "1011": 42, "1001": 42, "r39": 42, "nijenhui": 42, "wilf": [42, 57, 225], "1978": [42, 49, 177, 201], "r40": 42, "knuth": [42, 50, 242], "2011": [42, 50, 83, 98, 189, 216], "art": [42, 50, 194, 207, 209, 242], "vol": [42, 50, 59, 63, 66, 83, 94, 109, 202, 203, 217, 242, 245], "addison": [42, 50, 98, 201], "weslei": [42, 50, 98, 201], "r41": 42, "brgc": 42, "6th": [42, 98], "unrank": [42, 47, 49, 50, 52], "r42": 42, "statweb": 42, "stanford": 42, "susan": 42, "s208": 42, "node12": 42, "tail": [42, 57, 58, 198, 227], "00010": 42, "random_bitstr": 42, "bitlist": [42, 53], "gray_to_bin": 42, "endian": 42, "bin_to_grai": 42, "get_subset_from_bitstr": 42, "bitstr": 42, "graycode_subset": 42, "group_construct": 43, "directproduct": [43, 46], "__mul__": [43, 49, 89, 94, 198, 202], "shift": [43, 49, 50, 52, 59, 66, 69, 73, 75, 88, 193, 198, 200, 203, 210, 217, 225, 227], "gn": 43, "named_group": [43, 46, 48, 49, 55, 56], "cyclicgroup": [43, 46, 49], "perm_group": [43, 48, 49, 50, 55, 56], "permutationgroup": [43, 46, 48, 49, 50, 55, 56], "group_numb": 44, "is_nilpotent_numb": 44, "r43": 44, "randprim": [44, 98], "pakianathan": 44, "shankar": 44, "monthli": [44, 59, 94], "107": [44, 201], "631": 44, "634": 44, "is_abelian_numb": 44, "r44": 44, "is_cyclic_numb": 44, "r45": 44, "polyhedron": [45, 49, 85, 245, 264], "prufer": [45, 264], "grai": [45, 53, 86, 141, 187, 193, 264], "nilpot": [45, 49, 94, 264], "abelian": [45, 46, 49, 87, 177, 194, 264], "cyclic": [45, 46, 49, 50, 51, 61, 89, 98, 233, 245, 264], "polycycl": [45, 49, 264], "symmetricgroup": [46, 48, 49, 55, 56], "transposit": [46, 49, 50, 59, 89, 91, 229], "is_group": [46, 49], "generate_schreier_sim": [46, 49], "af": [46, 49, 55, 139], "dihedralgroup": [46, 49, 56], "alternatinggroup": [46, 49, 55], "r46": 46, "symmetric_group": 46, "generators_and_rel": 46, "dihedr": [46, 50], "d_n": [46, 87, 203], "gon": 46, "bab": 46, "generate_dimino": [46, 49], "perm": [46, 48, 49, 50, 51, 56, 63, 89, 91, 94, 228], "cyclic_form": [46, 50, 51], "r47": 46, "dihedral_group": 46, "31": [46, 58, 61, 62, 74, 98, 137, 192, 203, 220], "ex": [46, 85, 109, 121, 197, 202, 203, 233, 241], "r48": 46, "armstrong": 46, "abeliangroup": [46, 49], "cyclic_ord": 46, "r49": 46, "groupprop": [46, 49], "subwiki": [46, 49], "structure_theorem_for_finitely_generated_abelian_group": 46, "multiset_partit": [47, 63, 83, 242, 245], "rg": 47, "growth": [47, 98, 200, 274], "from_rg": 47, "abcd": [47, 51, 172, 245, 248], "cbead": 47, "sort_kei": [47, 58, 223], "ti": [47, 50, 58, 98], "integerpartit": [47, 245], "summand": [47, 202], "r50": 47, "partition_": [47, 63], "28number_theori": 47, "as_dict": [47, 197, 203], "as_ferr": 47, "char": 47, "ferrer": 47, "next_lex": [47, 50], "lexic": [47, 152, 245], "prev_lex": 47, "random_integer_partit": 47, "seed": [47, 49, 58, 59, 68, 71, 72, 94, 98, 200, 227, 238, 245], "85": [47, 62, 63, 94, 98, 124, 170, 192, 227], "rgs_gener": 47, "37": [47, 59, 64, 68, 94, 98, 102, 192, 207, 220], "52": [47, 63, 98, 101, 102, 192, 206, 220, 223, 245, 274], "151": 47, "203": [47, 63], "rgs_enum": 47, "rgs_unrank": 47, "rgs_rank": 47, "pcgroup": 48, "pcg": 48, "pc_seri": [48, 49], "polycyl": 48, "pc_present": 48, "pc_sequenc": [48, 49], "miss": [48, 49, 75, 207, 225, 240, 284], "adjac": [48, 49, 50, 58, 63, 108, 144, 196, 245], "der": [48, 49], "relative_ord": [48, 49], "polycyclic_group": [48, 49], "gen": [48, 49, 54, 55, 56, 58, 94, 194, 197, 198, 200, 202, 203, 204, 205, 213, 219, 222, 225], "is_ident": [48, 50, 58], "poss": [48, 124, 191], "pc_group": 48, "a_j": [48, 66, 83, 177, 200, 209, 217], "notin": [48, 83, 215], "_order": 48, "minimal_uncollected_subword": 48, "subword_index": 48, "i_1": [48, 172, 203, 228], "a_1": [48, 49, 59, 66, 80, 83, 89, 94, 109, 172, 177, 195, 200, 217, 220, 223, 227, 284], "i_r": 48, "a_r": [48, 217], "i_2": [48, 172, 203], "s_": [48, 54, 122, 200], "s_j": [48, 87, 200], "x3": [48, 58, 63, 197, 223, 227], "collected_word": 48, "free_to_perm": 48, "bottom": [48, 49, 58, 59, 74, 89, 94, 97, 121, 202, 207, 216, 262], "pictur": [48, 207], "x_3x_2": 48, "x_3x_1": 48, "x_2x_1": 48, "x_3x_0": 48, "x_2x_0": 48, "x_1x_0": 48, "varii": 48, "derived_seri": [48, 49], "pc_resent": 48, "k_arrai": 48, "array_form": [48, 50, 51], "v_arrai": 48, "e_1": [48, 94, 194, 200, 203], "e_n": [48, 63, 87, 94, 148, 194, 203], "exponent_vector": 48, "leading_expon": 48, "dup": [49, 198], "pn": [49, 126, 136], "motion": [49, 112, 116, 117, 118, 121, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 139, 140, 186, 187, 190, 191, 227], "front": [49, 58, 124, 125, 141, 171, 198, 200, 203, 207, 219, 284], "face": [49, 51, 71, 85, 122, 200, 204, 207, 220, 262, 280], "rubik": 49, "3674160": 49, "pgroup": [49, 51], "corner": [49, 51, 89, 203, 223, 226, 246], "reset": [49, 51, 193, 200, 203, 238, 241, 243], "p10": 49, "make_perm": 49, "r51": 49, "eick": [49, 56], "brien": [49, 56], "r52": 49, "seress": 49, "r53": 49, "schreier_vector": 49, "r54": 49, "nielsen_transform": 49, "product_replacement_algorithm": 49, "r55": 49, "frank": [49, 50, 94], "celler": 49, "charl": 49, "leedham": 49, "green": [49, 133, 193], "scott": 49, "murrai": 49, "alic": [49, 59], "niemey": 49, "r56": 49, "block_": 49, "28permutation_group_theori": 49, "r57": 49, "algorithmist": 49, "php": [49, 66, 98, 220, 227], "union_find": 49, "r58": 49, "multiply_transitive_group": 49, "r59": 49, "center_": 49, "28group_theori": 49, "centralizer_and_norm": 49, "derived_subgroup": 49, "nilpotent_group": 49, "colost": 49, "hulpk": 49, "cgt": 49, "cgtnote": 49, "__contains__": 49, "__weakref__": [49, 89], "weak": [49, 58, 89, 197, 200], "_coset_repres": 49, "hg": 49, "transvers": [49, 54, 56, 145, 146], "coset_transvers": 49, "_distinct_primes_lemma": 49, "_element": 49, "_eval_is_alt_sym_monte_carlo": 49, "05": [49, 80, 106, 189, 192], "mont": 49, "carlo": 49, "candidat": 49, "randomli": [49, 58, 59, 98, 166], "n_ep": 49, "_check_cycles_alt_sym": [49, 56], "_eval_is_alt_sym_na": 49, "only_sym": 49, "only_alt": 49, "_p_elements_group": 49, "subgroup": [49, 50, 54, 56, 87, 98], "_random_pr_init": 49, "_random_prec_n": 49, "modif": [49, 64, 94, 226, 227, 242], "69": [49, 94, 225, 242], "71": [49, 74, 94, 175], "_random_gen": 49, "accumul": [49, 238, 242], "random_pr": 49, "chosen": [49, 50, 59, 60, 71, 72, 94, 98, 101, 140, 174, 177, 193, 194, 198, 200, 202, 207, 214, 217, 223, 227, 238, 252], "gh": [49, 195, 226, 233], "eventu": [49, 66, 85, 193, 194, 214, 240, 245], "_sylow_alt_sym": 49, "sylow": 49, "p_1": [49, 54, 59, 76, 98, 190, 217, 220], "p_2": [49, 59, 76, 98, 190, 217], "p_p": 49, "sylow_subgroup": 49, "is_alt_sym": [49, 56], "_union_find_merg": 49, "not_rep": 49, "atkinson": 49, "83": [49, 206], "87": [49, 64, 94, 98], "minimal_block": 49, "_union_find_rep": 49, "r60": 49, "r66": 49, "compress": [49, 94, 97, 104], "r62": 49, "r68": [49, 50], "_verifi": 49, "_h": [49, 226], "gens_k": 49, "rels_k": 49, "gens_h": 49, "inject": [49, 58, 194, 198, 203, 280], "homomorph": 49, "rels_h": 49, "strong_present": 49, "abelian_invari": 49, "isomorph": [49, 52, 194, 197, 200, 202], "t_1": [49, 63, 220], "t_2": [49, 63, 220], "t_r": [49, 137, 233], "542": 49, "adopt": [49, 233], "schreier": [49, 54, 56], "sim": [49, 54, 56, 83], "b_1": [49, 56, 66, 80, 83, 194, 217, 220, 223, 284], "b_2": [49, 56, 66, 80, 217, 223], "dot": [49, 50, 54, 56, 59, 71, 73, 80, 89, 94, 108, 117, 124, 125, 126, 129, 130, 131, 134, 135, 136, 137, 139, 156, 182, 184, 187, 190, 191, 192, 194, 195, 200, 203, 207, 226, 227, 245, 252, 256, 258, 259], "b_k": [49, 56, 59, 63, 66, 209, 210], "strong": [49, 54, 55, 56, 98, 99], "89": [49, 56, 85], "55": [49, 61, 63, 94, 192, 193, 203, 220], "57": [49, 94, 98, 227], "coset": [49, 54, 202], "strong_gen": [49, 55, 56], "basic_transvers": [49, 56], "basic_orbit": [49, 56], "basic_stabil": 49, "baseswap": 49, "po": [49, 83, 88, 89, 119, 137, 139, 198, 225], "strong_gens_distr": [49, 56], "swap": [49, 50, 51, 89, 94, 152, 156, 165, 227, 245], "orbit": [49, 56, 172, 173, 175], "b_": [49, 54, 56, 58, 63, 66, 83, 91, 108, 209, 217, 220, 228], "b_i": [49, 54, 56, 83, 194, 217], "la": [49, 139, 177], "vega": 49, "testutil": [49, 55, 56], "_verify_bsg": [49, 55, 56], "schreier_sim": [49, 55, 56], "bsg": [49, 54, 56, 233], "102": [49, 94], "98": [49, 59, 138, 203, 223], "pseudocod": 49, "beta_": 49, "g_": [49, 56, 57, 66, 83, 220], "foral": [49, 57, 60, 177], "zg": 49, "gz": 49, "c_g": 49, "sg": [49, 227, 233], "is_subgroup": 49, "subgroup_search": 49, "hgh": 49, "closur": [49, 55, 81, 152, 202, 215], "composition_seri": 49, "h_0": [49, 54], "h_1": [49, 54, 226], "h_2": [49, 226], "1024": [49, 207, 227], "512": [49, 66], "128": [49, 63, 66, 68, 98, 201, 207], "32": [49, 61, 64, 66, 68, 94, 98, 101, 106, 137, 201, 203, 204, 216, 217, 220, 227, 238], "243": [49, 66, 225], "81": [49, 63, 68, 89, 94, 98, 122, 124, 192, 206], "conjugacy_class": 49, "xax": 49, "s_3": 49, "s3": [49, 57, 108, 210, 220], "feasibl": [49, 108], "resiz": [49, 50, 89, 91], "coset_factor": 49, "factor_index": 49, "_basic_orbit": 49, "u1": [49, 98, 122, 124, 125, 126, 127, 129, 130, 134, 136, 139, 182, 184, 186, 187, 190, 223], "u2": [49, 97, 98, 122, 124, 125, 126, 127, 129, 130, 134, 139, 182, 186, 190, 223], "_strip": [49, 56], "coset_rank": 49, "lexicograph": [49, 50, 53, 54, 58, 200, 203, 245], "coset_unrank": 49, "standardis": [49, 197], "subsect": [49, 259], "compris": [49, 59, 91, 119, 137, 140, 203, 245], "g_0": [49, 220], "g_1": [49, 203, 214, 220, 223], "g_2": [49, 87, 214, 223], "g_i": [49, 214], "g_k": 49, "tetrahedron": [49, 51], "r64": 49, "axiom": [49, 194], "doy": 49, "sc": [49, 85], "thesi": [49, 58, 214, 252], "generator_product": 49, "sn": [49, 50, 57, 80], "is_abelian": 49, "_random_prec": 49, "probabl": [49, 58, 63, 66, 70, 98, 122, 166, 170, 217, 223, 226, 227, 239, 276, 282], "transit": [49, 139, 200, 227], "82": [49, 85, 94, 227], "proport": [49, 59, 214], "226": 49, "227": 49, "is_altern": 49, "quicker": [49, 98], "taxonomi": 49, "is_cycl": 49, "p_": [49, 54, 58, 85, 177, 220, 223, 228], "p_i": [49, 54, 98], "equiv": [49, 59, 63, 98, 202, 217, 220], "pmod": [49, 58, 59, 63, 94, 217], "p_j": [49, 54], "r65": 49, "35": [49, 52, 61, 63, 71, 72, 85, 94, 98, 124, 202, 207, 220, 223, 227], "rose": 49, "is_elementari": 49, "is_nilpot": [49, 94], "lower_central_seri": 49, "is_solv": 49, "is_norm": [49, 170], "gr": 49, "is_perfect": [49, 98], "is_polycycl": 49, "is_primit": [49, 198, 203], "cardin": [49, 50, 53, 194, 215], "badli": 49, "random_stab": 49, "g3": [49, 108], "s5": 49, "is_symmetr": [49, 89], "is_transit": 49, "is_trivi": 49, "cba": [49, 228, 245], "mainli": [49, 66, 94, 99, 177, 187, 200, 217, 220, 223], "max_div": 49, "siev": [49, 98], "nonempti": 49, "gb": 49, "moreov": [49, 59, 83, 176, 188, 194, 195, 200, 208, 257], "congruenc": [49, 58, 98, 217, 220], "p_0": [49, 54, 76, 217, 220], "maxim": [49, 59, 87, 194, 198, 202, 214, 216], "intransit": 49, "normal_closur": 49, "adjoin": [49, 195], "yx": [49, 191], "73": [49, 57, 58, 71, 98, 223], "74": [49, 63, 98], "orb": 49, "78": [49, 72, 94, 98, 102, 177, 223, 227], "orbit_transvers": 49, "orbit_rep": 49, "send": [49, 58, 59, 64, 98, 194, 223, 225], "proof": [49, 52, 83, 85, 226], "79": [49, 50, 102], "pointwise_stabil": 49, "pointwis": [49, 56], "p_k": [49, 98], "p20": 49, "stab": 49, "schreier_sims_increment": [49, 56], "polycyclicgroup": 49, "eliminate_gen": 49, "gen_count": 49, "b1": [49, 54, 66, 98, 101, 102, 113, 122, 139, 182, 198, 207, 217, 220, 223, 258], "b_r": 49, "slp_dict": 49, "seq": [49, 58, 61, 94, 198, 200, 203, 213, 225, 245], "93": [49, 201], "schreier_sims_random": [49, 56], "consec_succ": 49, "consec": 49, "_succ": 49, "97": [49, 59, 98, 200], "sift": [49, 56, 245], "amend": 49, "unsuccess": [49, 56], "accordingli": [49, 195, 202], "halt": 49, "signifi": [49, 58, 101, 203, 227], "g_t": 49, "leq": [49, 57, 59, 66, 83, 94, 98, 192, 200, 202, 213, 214, 220, 227], "prop": [49, 202], "init_subgroup": 49, "supergroup": 49, "sought": [49, 98, 157, 167, 219, 225, 226], "prune": 49, "prop_even": 49, "lengthi": 49, "114": [49, 98], "117": [49, 66], "terribl": 49, "crucial": [49, 57, 197], "len1": 49, "len2": 49, "len3": 49, "transitivity_degre": 49, "fold": [49, 58, 64, 207, 214, 219], "a_2": [49, 59, 80, 94, 200, 217, 220, 223, 227, 284], "a_k": [49, 59, 204, 210], "arrang": [50, 108, 117, 137, 139, 216, 220, 233], "r69": 50, "reorder": [50, 57, 64, 172, 203, 223, 227, 245], "pretty_print": [50, 86, 119, 124, 125, 129, 130, 131, 133, 134, 135, 137, 140, 182, 184, 186, 187, 190, 191, 207], "understood": [50, 98, 177, 194, 198], "economi": 50, "caution": [50, 58, 64, 207, 219], "indexerror": [50, 94, 203], "autos": [50, 97], "watch": 50, "print_cycl": 50, "econom": [50, 85, 245], "retain": [50, 58, 64, 66, 85, 100, 203, 208, 216, 219], "biject": [50, 52, 59, 89, 194], "full_cyclic_form": 50, "rmul": 50, "unrank_lex": 50, "r73": 50, "zo42": 50, "from_sequ": 50, "a1": [50, 54, 58, 86, 89, 98, 102, 122, 139, 146, 223, 227, 228, 258, 284], "a2": [50, 54, 58, 87, 89, 98, 102, 122, 139, 146, 196, 227, 228, 258, 284], "a3": [50, 54, 58, 87, 89, 139, 258, 284], "perfectli": [50, 57, 58, 59, 200, 203, 206], "skiena": 50, "ma": [50, 57, 127], "1990": [50, 83, 217, 252], "r70": 50, "wendi": 50, "myrvold": 50, "ruskei": 50, "2001": [50, 98, 201], "lett": 50, "septemb": [50, 242], "281": 50, "284": [50, 98], "1016": 50, "s0020": 50, "0190": 50, "01": [50, 58, 62, 122, 166, 201, 219, 245], "00141": 50, "r71": 50, "kreher": 50, "stinson": 50, "1999": [50, 94, 201, 206, 223], "r72": 50, "graham": [50, 63, 64, 98], "patashnik": 50, "foundat": [50, 201, 202], "1994": [50, 200, 201, 203], "product_and_invers": 50, "r74": 50, "lehmer_cod": 50, "appliedpermut": 50, "magic": [50, 219, 238, 276], "attatch": 50, "_array_form": 50, "ascent": 50, "ie": [50, 220], "descent": [50, 220], "fg": [50, 60, 223, 226], "gf": [50, 59, 194, 196, 197, 200, 202], "r75": 50, "commutes_with": [50, 233], "cycle_structur": 50, "from_inversion_vector": 50, "get_adjacency_dist": 50, "n_adj": 50, "reev": 50, "colin": 50, "landscap": 50, "annal": 50, "86": [50, 94, 138, 206, 216], "473": 50, "josephu": 50, "get_precedence_matrix": 50, "get_precedence_dist": 50, "get_adjacency_matrix": 50, "get_positional_dist": 50, "inversion_vector": 50, "lesser": [50, 104, 203], "lie": [50, 60, 72, 73, 74, 203, 227, 263, 270], "lehmer": 50, "ith": [50, 87, 98, 198, 204, 226, 227], "variat": [50, 58, 200, 214, 223], "r76": 50, "eng": 50, "chula": 50, "piak": 50, "algo2008": 50, "htm": [50, 66, 85, 220], "is_singleton": 50, "is_odd": 50, "shuffl": [50, 94, 284], "012345": 50, "345": 50, "253": 50, "2531": 50, "25314": 50, "253140": 50, "r77": 50, "flavius_josephu": 50, "r78": 50, "josephus_problem": 50, "r79": 50, "wou": 50, "burtonl": 50, "trim": [50, 136], "unmov": 50, "mul_inv": 50, "next_nonlex": 50, "nonlex": 50, "rank_nonlex": 50, "unrank_nonlex": 50, "next_trotterjohnson": [50, 245], "trotter": 50, "johnson": [50, 94], "generate_bel": [50, 245], "rank_trotterjohnson": 50, "unrank_trotterjohnson": 50, "_af_par": 50, "pseudo": [50, 94, 98, 198, 200, 203], "inv_perm": 50, "enforc": [50, 124], "rmul_with_af": 50, "ascend": [50, 245], "r80": 50, "transposition_": 50, "28mathemat": [50, 58, 215], "flexibl": [50, 58, 122, 139, 190, 193, 197, 226, 274], "investig": [50, 83, 192, 194, 217, 245, 276], "cn": [50, 207, 283], "2n": [50, 57, 63, 66, 85, 89, 104, 109, 135, 192, 210, 217], "dn": [50, 227], "klein": 50, "s4": [50, 108], "polyhedr": 51, "psg": 51, "platon": 51, "solid": [51, 72, 116, 193, 262], "tetrahedr": 51, "octahedr": 51, "icosahedr": 51, "r81": 51, "polyhedralgroup": 51, "polyhedra": 51, "shadow": 51, "h5": 51, "heinz": 52, "caylei": [52, 89], "r82": 52, "labeledtre": 52, "tree_repr": 52, "prufer_rank": 52, "prev": [52, 58], "36": [52, 59, 63, 74, 85, 89, 94, 98, 102, 203, 207, 220, 223, 227, 262], "prufer_repr": 52, "record": [52, 58, 202, 207, 238], "to_pruf": 52, "778": 52, "779": 52, "777": [52, 61], "1296": 52, "to_tre": 52, "r83": 52, "hamberg": 52, "erlend": 52, "2010": [52, 224, 245], "06": [52, 58, 124, 192, 227], "compact": [52, 58, 105, 117, 139, 170, 187, 203, 207, 225, 242], "next_binari": 53, "prev_binari": 53, "bitlist_from_subset": 53, "subset_from_bitlist": 53, "superset_s": 53, "iterate_binari": 53, "iterate_graycod": 53, "prev_grai": 53, "next_grai": 53, "next_lexicograph": 53, "prev_lexicograph": 53, "rank_binari": 53, "unrank_binari": 53, "rank_grai": 53, "unrank_grai": 53, "rank_lexicograph": 53, "43": [53, 94, 98, 101, 102, 227, 284], "super_set": 53, "subset_indic": 53, "ksubset": 53, "itertool": [53, 245], "tensor_can": [54, 233], "msym": 54, "contravari": [54, 94, 233, 234], "covari": [54, 60, 94, 227, 233, 234], "d0": 54, "base_i": 54, "gens_i": 54, "n_i": [54, 200, 225], "sym_i": 54, "failur": [54, 62, 75, 83, 98, 227, 238, 284], "canonicalize_na": 54, "exchang": [54, 59, 94, 192, 196, 245], "anticommut": [54, 159, 161, 171, 172, 233, 269], "canonical_fre": 54, "slot": [54, 156, 228, 232, 233, 279], "residu": [54, 59, 98, 200, 217], "tensor_gen": 54, "list_free_indic": 54, "double_coset_can_rep": 54, "reintroduc": 54, "antisymmetr": [54, 60, 89, 172, 233], "d2": [54, 182, 194, 214, 227, 245, 252], "ord": [54, 59, 94], "t_c": 54, "get_symmetric_group_sg": [54, 233], "bsgs_direct_product": 54, "base2a": 54, "gens2a": 54, "t0": 54, "t1": [54, 74, 75, 98, 113, 119, 220, 227], "a_m": [54, 223], "a_n": [54, 59, 66, 83, 87, 177, 195, 200, 210, 220, 223, 284], "_a": [54, 66, 172, 203], "_b": [54, 66, 172], "base_f": 54, "gens_f": 54, "base1": 54, "gens1": 54, "base_a": 54, "gens_a": 54, "sgen": 54, "s_transvers": 54, "butler": [54, 233], "portug": [54, 233], "grow": [54, 58, 83, 94, 98, 197, 200], "computation": [54, 64, 116, 117, 118], "absenc": [54, 88], "observ": [54, 80, 83, 161, 191, 194, 217, 220, 223, 227, 261, 284], "opposit": [54, 74, 88, 89, 113, 195, 198, 215, 219, 226, 234, 245, 252, 254, 284], "ind": [54, 209, 233], "d3": [54, 214], "a0": [54, 223, 284], "a4": [54, 58, 87, 139, 284], "a5": [54, 58], "leftrightarrow": 54, "_af_rmul": 54, "t_": [54, 63], "b0": [54, 66, 198, 217, 223], "d_": [54, 217], "p0": [54, 68, 202, 223], "dbase": 54, "recomput": [54, 203], "d_i": [54, 83, 177], "s_0": 54, "d_0": [54, 59], "b_0": [54, 59, 63, 217, 220, 223], "b_j": [54, 56, 66, 83, 217], "sx": 54, "trace": [54, 89, 91, 109, 139, 200, 207, 227, 228, 229, 231, 245, 280], "h_n": [54, 66, 85, 203, 226], "tab1": 54, "get_transvers": 54, "antisym": 54, "base2": 54, "gens2": 54, "_cmp_perm_list": 55, "ls1": 55, "ls2": 55, "_naive_list_centr": 55, "_verify_centr": 55, "_verify_normal_closur": 55, "_base_ord": 56, "base_ord": 56, "backtrack": 56, "108": [56, 98, 102], "132": [56, 63, 182], "r84": 56, "_distribute_gens_by_bas": 56, "_strong_gens_from_distr": 56, "_orbits_transversals_from_bsg": 56, "_handle_precomputed_bsg": 56, "transversals_onli": 56, "slp": 56, "_remove_gen": 56, "new_gen": 56, "r85": 56, "r86": 56, "recurr": [57, 63, 80, 94, 202, 213, 219, 223, 227, 247], "annihil": [57, 76, 77, 81, 148, 172, 225], "is_hypergeometr": 57, "binomi": [57, 62, 63, 66, 98, 203, 207, 212, 219, 223, 227, 245, 284], "rf": [57, 63, 203], "ff": [57, 59, 63, 192, 195, 196, 197, 202, 203], "speci": [57, 58], "rise": [57, 63, 66, 192, 219, 223, 227, 256], "hypersimp": [57, 219], "quotient": [57, 58, 61, 64, 98, 194, 195, 197, 200, 203, 217, 219, 223], "dummy_vari": 57, "karr": 57, "quad": [57, 58, 60, 62, 66, 85, 89], "exclus": [57, 58, 64, 88, 94, 200, 276], "emphas": 57, "typeset": [57, 207], "doit": [57, 58, 60, 63, 64, 66, 85, 91, 108, 149, 151, 153, 164, 166, 169, 170, 172, 182, 192, 203, 209, 214, 219, 223, 224, 227, 229, 252, 255, 256, 258, 259, 274, 279], "seemingli": [57, 226], "nonsens": [57, 66], "r87": 57, "michael": [57, 201, 206], "april": 57, "1981": [57, 201], "305": 57, "350": [57, 119], "dl": [57, 191, 201], "cfm": [57, 201], "doid": [57, 201], "322248": 57, "322255": 57, "r88": 57, "sigma_not": 57, "r89": 57, "empty_sum": 57, "euler_maclaurin": [57, 62], "eval_integr": 57, "maclaurin": [57, 62], "endpoint": [57, 58, 62, 188, 215, 259], "28333333333333": 57, "sstr": [57, 187, 207], "full_prec": [57, 207], "26629073187415": 57, "0175000000000000": 57, "soon": [57, 58, 122, 177, 204], "eval_zeta_funct": 57, "is_absolutely_converg": 57, "sequence_term": 57, "is_converg": 57, "r90": 57, "absolute_converg": 57, "analogi": [57, 200], "prod_": [57, 63, 66, 83, 98, 177, 217], "respons": [57, 58, 108, 122, 193, 240], "diverg": [57, 66, 141, 183, 252, 255], "dirichlet": [57, 66, 227], "r91": 57, "convergence_test": 57, "reverse_ord": 57, "selector": [57, 89, 219, 245], "handi": [57, 58, 94, 207, 279], "s0": [57, 81, 83, 144], "expr_with_intlimit": [57, 85], "exprwithintlimit": [57, 85], "reorder_limit": 57, "r92": 57, "walli": 57, "w2": [57, 146], "w2e": 57, "risingfactori": [57, 63, 66, 207, 209], "combsimp": [57, 58, 63, 219], "pe": 57, "gammasimp": [57, 58, 219], "rewrit": [57, 58, 60, 63, 64, 66, 83, 85, 88, 101, 108, 169, 203, 214, 215, 216, 219, 223, 224, 225, 226, 227, 264, 278, 280], "r93": 57, "r94": 57, "capital_pi_not": 57, "r95": 57, "empty_product": 57, "r96": 57, "infinite_product": 57, "r97": 57, "expr_with_limit": [57, 85], "exprwithlimit": [57, 85], "change_index": 57, "trafo": 57, "newvar": 57, "mapsto": [57, 83, 89, 202], "p3": [57, 68, 70, 71, 73, 74, 108, 193, 197, 216, 227], "has_empty_sequ": [57, 85], "has_reversed_limit": [57, 85], "has_finite_limit": [57, 85], "____": [57, 62, 85, 144, 195, 208, 227, 245, 285], "___": [57, 62, 85, 86, 94, 195, 219, 227, 232, 245, 283], "rubric": [57, 58], "_____": [57, 227], "gosper": 57, "gosper_norm": 57, "monic": [57, 66, 194, 195, 198, 200, 202, 203, 206], "gcd": [57, 58, 59, 94, 98, 168, 197, 198, 201, 202, 203, 207, 219, 220], "gosper_term": 57, "s_n": [57, 203], "f_k": [57, 117, 134, 200], "g_n": [57, 63, 203], "f_n": [57, 63, 66, 194, 200, 203, 223], "gosper_sum": 57, "r98": 57, "marko": 57, "petkovsek": [57, 225], "herbert": 57, "doron": 57, "zeilberg": [57, 225], "ak": [57, 209], "peter": [57, 63, 66, 98, 138, 189, 203, 245], "ltd": 57, "welleslei": 57, "usa": [57, 201], "1997": [57, 83, 98, 201, 217], "convert_xor": [58, 100], "09": [58, 106, 192], "2e": 58, "xor": [58, 61, 88, 100, 207, 276], "sympifyerror": 58, "coerc": [58, 136, 200], "cooper": 58, "shouldn": [58, 204], "unsanit": [58, 246, 273], "bitcount": 58, "improperli": 58, "unbound": [58, 232], "23903": 58, "fallback": [58, 86, 172, 187, 197, 207, 225], "ast": [58, 207], "mylist1": 58, "mylist": 58, "mylist2": 58, "xxx": [58, 85, 94, 245, 247], "autosimplif": [58, 216, 219], "kern": 58, "r101": 58, "7649": 58, "r100": 58, "r104": 58, "r102": 58, "r103": 58, "r105": 58, "r106": 58, "r107": 58, "r99": 58, "imaginaryunit": [58, 64, 207], "negativeinfin": [58, 207], "complexinfin": [58, 108], "recreat": [58, 116], "isfinit": 58, "__cacheit": 58, "maxsiz": 58, "cacheit": 58, "noqa": [58, 86, 198, 241], "f811": 58, "sympy_use_cach": 58, "cot": [58, 64, 66, 100, 204, 207, 216], "_arg": [58, 64], "as_mut": [58, 90, 91], "as_content_primit": [58, 94, 195, 203], "stub": 58, "as_dummi": [58, 85], "_0": [58, 63, 83, 89, 94, 203, 246], "_r": [58, 172, 217, 226], "bound_symbol": [58, 85], "besid": [58, 200, 225], "typeinfo": 58, "truli": [58, 66, 177], "piec": [58, 62, 217, 240], "numbersymbol": [58, 207], "scan": 58, "appliedundef": 58, "canonical_vari": 58, "class_kei": 58, "sorted_class": 58, "dummy_eq": 58, "eg": [58, 122, 179, 226], "fromit": 58, "has_fre": 58, "has_xfre": 58, "exp_polar": [58, 64, 66, 217], "dif": 58, "_prec": 58, "r_": [58, 110, 173, 204], "repl_dict": 58, "rcall": [58, 60], "simul": [58, 122, 139, 206], "abus": [58, 233], "succe": [58, 83, 88, 98, 162, 202, 225], "newtyp": 58, "intuit": [58, 177, 223], "is_mul": 58, "is_add": [58, 226], "mysin": [58, 246, 273], "_eval_rewrite_as_": 58, "_eval_rewrite_as_co": 58, "tie": [58, 245], "delai": [58, 106, 136, 216, 238, 274], "unsort": [58, 112, 181], "333333333333333333333": 58, "333333333333333314830": 58, "wildcard": [58, 219], "evalfmixin": 58, "registri": 58, "metaprogram": 58, "address": [58, 207, 226], "mostli": [58, 64, 85, 94, 139, 167, 190, 194, 206, 207, 217, 225, 283], "__truediv__": [58, 198], "class_nam": 58, "mysingleton": 58, "_eval_is_g": 58, "_eval_is_eq": 58, "args_cnc": 58, "cset": 58, "split_1": 58, "suppress": [58, 100, 236, 243], "as_coeff_add": 58, "dep": [58, 223], "as_coeff_expon": 58, "as_coeffici": 58, "zz": [58, 63, 80, 81, 85, 91, 94, 95, 98, 119, 191, 194, 195, 196, 197, 200, 202, 203, 204, 205, 222], "coeff_monomi": [58, 203], "polytool": [58, 203, 226], "monomi": [58, 85, 88, 98, 195, 197, 198, 200, 206, 207, 284], "as_coefficients_dict": 58, "inquiri": 58, "expand_mul": [58, 83], "121": [58, 63, 98, 108, 182, 225], "84": [58, 62, 98], "separatevar": [58, 219, 223], "n3": [58, 122], "as_leading_term": [58, 214], "logx": [58, 214], "cdir": 58, "_eval_as_leading_term": 58, "as_numer_denom": [58, 225], "as_ordered_factor": 58, "as_ordered_term": 58, "as_powers_dict": 58, "lost": 58, "as_real_imag": [58, 64, 89, 208], "as_term": 58, "aseri": 58, "hir": 58, "asymptot": [58, 83, 108, 274], "hierarch": 58, "normalis": [58, 209], "induc": [58, 89, 202, 216, 245], "gruntz": [58, 209], "majorli": 58, "mrv": [58, 214], "overal": [58, 179, 193, 225], "rapidli": [58, 62, 83, 214], "till": [58, 101, 102, 122, 223], "r108": 58, "dominik": [58, 209], "proc": [58, 225], "1993": [58, 201], "symp": 58, "239": 58, "244": [58, 200], "r109": 58, "p90": 58, "r110": 58, "asymptotic_expans": 58, "_first": [58, 64], "factor_term": [58, 130, 203, 216, 219], "distribute_order_term": [58, 219], "compute_leading_term": 58, "could_extract_minus_sign": 58, "signsimp": [58, 130, 219], "failing_express": 58, "modulu": [58, 59, 61, 66, 68, 74, 89, 98, 101, 102, 194, 198, 200, 202, 203, 206, 226], "power_bas": [58, 89], "power_exp": [58, 89], "multinomi": [58, 89, 98, 227], "expr_free_symbol": 58, "extract_addit": 58, "extract_multipl": 58, "extract_branch_factor": 58, "allow_half": 58, "fourier_seri": [58, 210], "geto": 58, "getn": 58, "mod_invers": [58, 203], "is_algebraic_expr": 58, "is_rational_funct": 58, "r111": 58, "algebraic_express": 58, "is_const": 58, "constanc": 58, "agre": [58, 59, 66, 73, 83, 217], "test_expr": 58, "prove": [58, 83, 85, 94, 194, 214, 223, 258], "failing_numb": 58, "is_meromorph": 58, "meromorph": [58, 66], "multivalu": [58, 64], "cut": [58, 63, 64, 66, 74, 83, 194, 217, 242, 248, 284], "hit": [58, 279], "is_polynomi": 58, "rational_funct": 58, "leadterm": 58, "xlim": [58, 193], "lseri": 58, "exaxmpl": 58, "nseri": 58, "_eval_nseri": 58, "innermost": 58, "disadvantag": 58, "met": [58, 104, 220, 226, 241, 284], "poleerror": 58, "nsimplifi": [58, 62, 219], "ratsimp": [58, 219], "removeo": [58, 139, 207, 274], "chop": [58, 62, 66, 89, 94, 225, 273], "123": [58, 63, 68, 88, 116, 169, 182, 245, 252, 254], "lazi": [58, 91, 203], "smooth": [58, 62, 98, 209], "taylor_term": [58, 64], "previous_term": [58, 64], "wildfunct": 58, "dummy_index": 58, "temporari": [58, 239], "_dummy_10": 58, "contigu": [58, 217, 240], "x4": [58, 63, 197], "x5": [58, 63, 197], "x6": [58, 197], "x7": [58, 197], "x8": [58, 197], "x9": [58, 197], "x50": 58, "x51": 58, "y0": [58, 77, 79, 81, 223], "y1": [58, 139], "y2": [58, 139, 197], "y3": [58, 197], "y4": 58, "xa": [58, 195, 200], "xb": [58, 248], "xc": [58, 171, 248], "disambigu": 58, "x01": 58, "x02": 58, "x11": 58, "x12": 58, "escap": [58, 100, 193, 207, 248], "newli": [58, 83, 217], "undefinedfunct": [58, 184, 207, 239, 246], "f821": [58, 241], "cofactor": [58, 94, 198, 200, 203], "lcm": [58, 98, 198, 200, 203, 207], "50000000000000": [58, 62], "100000000000000000000": 58, "1e20": 58, "00000000000000e": 58, "23456789123456789": 58, "23456789123457": 58, "00100": 58, "sent": [58, 85, 219, 225], "789": [58, 98], "123_456": 58, "123456789": 58, "12e": 58, "012": 58, "60e2": 58, "6000": 58, "600e": 58, "125": [58, 62, 85, 98, 198, 213, 220], "099609": 58, "12500": 58, "12500000000000000000": 58, "5404319552844595": 58, "54": [58, 94, 102, 200, 206, 245], "29999999999999998890": 58, "30000000000000000000": 58, "_mpf_": [58, 197], "4915": 58, "70": [58, 59, 75, 85, 94, 98, 206, 207, 220, 227, 248], "307": 58, "mpf": [58, 197, 198], "is_float": 58, "unprejud": 58, "3602879701896397": 58, "18014398509481984": [58, 219], "limit_denomin": 58, "320": 58, "75": [58, 61, 227, 252], "use_tri": [58, 98], "use_rho": [58, 98], "use_pm1": [58, 98], "factorint": [58, 98, 202, 203, 242], "trial": [58, 98, 200, 212, 216, 223, 227], "max_denomin": 58, "1000000": [58, 98], "141592653589793": 58, "311": [58, 98], "discard": [58, 202, 207, 226], "99999999999999999999": 58, "algebraicnumb": [58, 198, 202, 206], "hookrightarrow": 58, "minpoli": [58, 197, 198, 202], "dmp": [58, 194, 198, 203], "complexrootof": [58, 94, 198, 203, 223], "anp": [58, 197, 198, 202, 203], "to_list": [58, 196, 198], "minpoly_of_el": 58, "414213562": 58, "scratch": [58, 177], "6x": [58, 200], "to_number_field": [58, 202], "to_root": 58, "primitive_el": [58, 197, 198, 202], "knew": [58, 284], "golden": [58, 62, 98], "5th": [58, 139, 200, 202], "cyclotom": [58, 198, 200, 201, 202, 203], "cyclotomic_poli": [58, 202, 203], "61803398874989": 58, "2i": 58, "a6": 58, "a6_wrong": 58, "309016994374947": 58, "951056516295154": 58, "field_el": 58, "is_alias": 58, "is_primitive_el": 58, "native_coeff": 58, "to_algebraic_integ": 58, "to_primitive_el": 58, "Its": [58, 64, 74, 139, 170, 200, 207, 215], "a_prim": 58, "number_cl": 58, "realnumb": 58, "igcd": [58, 98, 195], "greatest": [58, 63, 68, 98, 195, 197, 198, 200, 201, 203, 206], "euclid": [58, 200, 201], "r112": 58, "euclidean_algorithm": 58, "ilcm": [58, 98], "seterr": 58, "r113": 58, "r114": 58, "1_": 58, "28number": 58, "negativeon": [58, 64, 279], "r115": 58, "88": [58, 94, 98], "921_": 58, "r116": 58, "one_half": 58, "holder": 58, "ieee": [58, 59], "754": 58, "r117": 58, "affin": [58, 59, 73, 194], "compactif": 58, "r118": 58, "tild": [58, 64, 228], "phase": [58, 85, 106, 141, 144, 146, 156, 157, 226], "exp1": [58, 207], "718281828": 58, "napier": 58, "r119": 58, "e_": [58, 63, 94], "28mathematical_const": 58, "r120": 58, "imaginary_unit": [58, 207], "141592654": 58, "circumfer": [58, 68], "diamet": [58, 68], "area": [58, 68, 70, 74, 75, 101, 102], "is_irr": 58, "r121": 58, "mascheroni": [58, 66], "5772157": 58, "recur": 58, "harmon": [58, 63, 98, 110, 151, 192, 207, 269], "lim": [58, 214, 274], "limits_": [58, 192, 209, 278], "ln": [58, 64, 85, 207, 209, 223, 227, 284], "r122": 58, "93mascheroni_const": 58, "catalan": [58, 63, 207], "91596559": 58, "r123": 58, "27s_constant": 58, "goldenratio": [58, 62, 208, 219], "r124": 58, "golden_ratio": 58, "tribonacciconst": 58, "tribonacci": [58, 63], "fibonacci": [58, 62, 63, 98], "predetermin": [58, 238], "8392867552141611326": 58, "r125": 58, "generalizations_of_fibonacci_numb": [58, 63], "tribonacci_numb": [58, 63], "modulo": [58, 59, 95, 98, 168, 194, 196, 197, 198, 200, 202, 203, 204, 206, 207, 210, 219], "r126": 58, "modular_multiplicative_invers": 58, "r127": 58, "extended_euclidean_algorithm": 58, "oscil": [58, 269], "conform": [58, 226, 231, 232], "r128": 58, "r129": 58, "zero_to_the_power_of_zero": 58, "r130": 58, "indeterminate_form": 58, "as_base_exp": [58, 64, 65, 245], "expand_power_bas": [58, 219], "integer_nthroot": [58, 64, 98], "floor": [58, 64, 98, 116, 197, 198, 207, 227], "integer_log": 58, "geq": [58, 59, 66, 94, 203, 220, 227, 284], "factor_": [58, 59, 98, 203, 220], "perfect_pow": [58, 98], "infix": 58, "matmul": [58, 91, 196], "as_coef_mul": 58, "undesir": [58, 112, 122, 136, 195, 198, 217], "4596": 58, "compound": [58, 127, 170], "5728": 58, "suspect": [58, 98], "5706": 58, "moot": 58, "off": [58, 68, 83, 89, 97, 99, 124, 133, 156, 194, 203, 207, 223, 238, 249, 252, 278], "nb": 58, "sensit": [58, 108, 139, 193, 200, 219, 238], "assocop": 58, "prod": [58, 197, 204, 216], "matadd": [58, 91, 207], "as_coef_add": 58, "extract_leading_ord": 58, "commutative_part": 58, "noncommutative_part": 58, "order_symbol": 58, "subprocess": [58, 207, 238, 239], "dividend": [58, 198], "rop": 58, "validrelationoper": 58, "greaterthan": [58, 207], "lessthan": [58, 207], "strictlessthan": [58, 207, 248], "lt": [58, 203, 248], "fourth": [58, 59, 195, 223, 274], "my_equ": 58, "my_inequ": 58, "reversedsign": 58, "_eval_eq": 58, "respond": 58, "boolalg": [58, 88], "client": [58, 242], "counterpart": [58, 59, 223, 274], "litter": 58, "oddbal": 58, "minor": [58, 68, 94, 207, 238], "caveat": [58, 203, 276], "succinctli": 58, "coupl": [58, 94, 136, 151, 166, 169, 192], "annoy": 58, "succinct": 58, "occasion": 58, "r131": 58, "operar": 58, "circuit": [58, 156, 159, 269], "greaterthanobject": 58, "__bool__": 58, "335": 58, "march": 58, "2012": 58, "r132": 58, "r133": 58, "r134": 58, "mdarg": 58, "fgh": 58, "vsin": 58, "vdiff": 58, "narg": [58, 200], "naturals0": [58, 207, 215, 226, 227], "evalul": 58, "fairli": [58, 66, 83, 124, 132, 181, 194], "conserv": [58, 117, 135, 183, 255, 261], "136": [58, 94], "indirect": [58, 60, 66, 98, 172, 223], "implic": [58, 88, 200], "fx": [58, 60, 193, 223, 224], "fxx": 58, "insconsist": 58, "presenc": [58, 64, 88, 104, 121, 126, 136, 223, 231], "nonvanish": 58, "_diff_wrt": 58, "_sort_variable_count": 58, "vc": 58, "vsort": 58, "collaps": [58, 166, 219], "vsort0": 58, "vi": 58, "dfx": 58, "equidist": 58, "sq2": 58, "xl": 58, "d2fdxdy": 58, "doit_numer": 58, "z0": [58, 214], "unifi": [58, 140, 196, 198, 200, 202, 203, 215], "zeroth": [58, 202], "idiff": [58, 75], "r135": 58, "legaci": [58, 85, 94, 227], "v5_2": 58, "infunct": 58, "algebraiccomput": 58, "functionclass": [58, 207, 246], "f_real": [58, 65], "f_real_inherit": [58, 65], "is_singular": [58, 65, 81], "holomorph": [58, 65, 83], "superfici": 58, "unexpect": [58, 238], "ss": [58, 198], "denom": [58, 197, 198, 202, 219], "_eval_expand_bas": 58, "_eval_expand_complex": 58, "shut": [58, 203], "unwant": [58, 225, 245], "alphabet": [58, 59, 108, 177, 195, 220, 240], "expand_hint": 58, "_eval_expand_hint": 58, "liabl": [58, 88], "metahint": 58, "myclass": 58, "_eval_expand_doubl": 58, "expand_multinomi": 58, "expand_power_exp": 58, "expand_func": [58, 63, 66], "hyperexpand": [58, 66, 80, 83, 217, 219], "div": [58, 195, 197, 198, 203, 207, 219, 279], "horner": [58, 139, 200, 203], "untouch": 58, "unexpand": [58, 197, 206, 216, 239], "nfloat": [58, 219], "dkei": 58, "mixin": [58, 245], "maxn": [58, 62, 89], "subresult": [58, 198, 201, 203], "000100000000000000": 58, "precisionexhaust": [58, 62], "maxprec": 58, "quadratur": [58, 62, 85, 223], "tanh": [58, 62, 64, 85, 204, 207, 219, 284], "oscillatori": [58, 62, 212], "osc": [58, 62], "advers": 58, "1e16": 58, "291": 58, "builtin": [58, 198, 207, 215, 248, 283], "speedup": [58, 94, 99, 200, 204, 246], "framework": [58, 115, 122, 132, 232, 238, 240, 246, 269], "slice": [58, 88, 89, 94, 100, 198, 203, 213, 215, 219, 228, 245], "tuplekind": [58, 89, 215], "parametris": [58, 215], "element_kind": [58, 89, 215], "tuple_count": 58, "setkind": [58, 89], "gcd_term": [58, 203], "isprimit": 58, "_gcd_term": 58, "terms_gcd": [58, 198, 203], "entiti": [58, 68, 71, 72, 74, 75, 83, 122, 137, 188, 226, 261, 270, 280], "arguement": 58, "broad": [58, 279], "undefinedkind": [58, 89, 215], "lex": [58, 86, 187, 195, 197, 198, 200, 203, 204, 206, 207, 219], "grlex": [58, 86, 187, 198, 203, 206, 207], "grevlex": [58, 86, 187, 195, 200, 203, 206, 207], "rev": 58, "unaffect": [58, 226], "_node": 58, "fastest": [58, 63, 85, 98, 99, 204], "undecor": 58, "breaker": 58, "hash": [58, 198, 200, 208, 219, 223, 238, 240], "collis": [58, 97, 207], "wast": [58, 95, 196], "rng": 58, "getstat": 58, "intention": 58, "tn": 58, "td": [58, 207, 283], "randrang": 58, "999": [58, 62], "238": [58, 98], "randint": [58, 94, 200], "ri": [58, 207], "rv": [58, 216, 227, 245], "nonbas": 58, "postord": 58, "descend": [58, 194, 202, 240], "subtre": [58, 207, 242], "educ": [59, 94], "cryptograph": 59, "encrypt": 59, "hide": [59, 207], "cipher": 59, "vigener": 59, "hill": [59, 66, 117, 138, 182, 189, 252], "bifid": 59, "rsa": 59, "kid": 59, "feedback": [59, 105, 108, 277], "elgam": 59, "plaintext": [59, 207], "ciphertext": 59, "monoalphabet": 59, "polyalphabet": 59, "crypto": 59, "az": [59, 220], "uppercas": [59, 217], "hello": [59, 245], "world": [59, 104, 126, 136, 245], "helloworld": 59, "check_and_join": 59, "padded_kei": 59, "puppi": 59, "opqrstuvwxi": 59, "puyoqrstvwx": 59, "artist": 59, "aphras": 59, "ara": 59, "hp": 59, "cycle_list": 59, "encipher_shift": 59, "msg": [59, 85], "decipher_shift": 59, "gonavybeatarmi": 59, "ct": [59, 87, 200], "hpobwzcfbubsnz": 59, "deciph": 59, "l1": [59, 68, 70, 71, 116, 119, 125, 137, 198, 200, 203, 220, 227], "l2": [59, 70, 71, 116, 119, 125, 158, 174, 198, 200, 227], "caesar": 59, "juliu": 59, "suetoniu": 59, "protect": [59, 207], "militari": 59, "nephew": 59, "augustu": 59, "reportedli": 59, "r136": 59, "caesar_ciph": 59, "r137": 59, "caesarsmethod": 59, "encipher_rot13": 59, "rot13": 59, "caeser": 59, "midwai": 59, "decipher_rot13": 59, "r138": 59, "decrypt": 59, "tbanilorngnezl": 59, "encipher_affin": 59, "_invers": 59, "cx": [59, 102], "recov": [59, 85, 177, 200, 202, 203, 220, 223], "decipher_affin": 59, "r139": 59, "affine_ciph": 59, "reciph": 59, "navi": 59, "beat": 59, "armi": 59, "trobmvenbgbalv": 59, "encipher_atbash": 59, "enciph": 59, "atbash": 59, "hebrew": 59, "decipher_atbash": 59, "tlmzebyvzgzinb": 59, "r140": 59, "encipher_substitut": 59, "oeyag": 59, "034": 59, "60n": 59, "v4b3": 59, "rm4": 59, "immateri": 59, "anyv": 59, "wherebi": 59, "r141": 59, "substitution_ciph": 59, "encipher_vigener": 59, "me": [59, 122, 139, 182, 207, 229], "mondai": 59, "qrgkkthrzqebpr": 59, "krypto": 59, "sculptur": 59, "cia": 59, "headquart": 59, "r143": 59, "decipher_vigener": 59, "alp": 59, "palimpsest": 59, "emufphzlrfaxyusdjkzldkrnshgnfivj": 59, "betweensubtleshadingandtheabsenc": 59, "blais": 59, "sixteenth": 59, "centuri": [59, 194], "diplomat": 59, "accid": [59, 246], "invent": [59, 202, 225, 278], "giovan": 59, "batista": 59, "belaso": 59, "1553": 59, "civil": [59, 101], "war": 59, "confederaci": 59, "brass": 59, "nsa": 59, "museum": 59, "fort": 59, "mead": 59, "r142": 59, "sender": 59, "assembl": [59, 83, 214], "concaten": [59, 89], "frequenc": [59, 85, 106, 108, 146, 148, 156, 173], "kasiski": 59, "discov": [59, 83, 112, 231, 280], "babbag": 59, "unbreak": 59, "ye": [59, 88, 223], "gonavybeatarmyyesyoucan": 59, "gold": 59, "auto_kei": 59, "goldbuggonavybeatarmyy": 59, "mcydwshkogamkzcelyfgayr": 59, "pt": [59, 67, 68, 69, 71, 72, 73, 74, 213], "vigenere_ciph": 59, "archiv": [59, 138, 220], "20071116100808": 59, "r144": 59, "filebox": 59, "vt": 59, "batman": 59, "goo": 59, "gl": 59, "ijr22d": 59, "decod": 59, "qrgk": 59, "kt": [59, 127], "hrzqe": 59, "bpr": 59, "meetmeonmondai": 59, "encipher_hil": 59, "z_": [59, 219], "r145": 59, "lester": 59, "1920": 59, "r146": 59, "polygraph": 59, "bare": [59, 117], "ceil": [59, 64, 98, 116, 207], "l_1": [59, 63, 109, 192, 217, 233], "l_t": 59, "c_t": 59, "l_i": [59, 192, 217], "decipher_hil": 59, "hill_ciph": 59, "june": [59, 94], "juli": [59, 220], "1929": 59, "306": 59, "312": [59, 182, 225, 252, 254], "ueqdueodoctcwq": 59, "st": [59, 85, 172], "hjeb": 59, "stqq": 59, "ispk": 59, "stzz": 59, "hd": 59, "ormv": 59, "uiki": 59, "encipher_bifid": 59, "polybiu": 59, "printabl": 59, "bifid5": 59, "decipher_bifid": 59, "encipher_bifid5": 59, "encipher_bifid6": 59, "r147": 59, "bifid_ciph": 59, "ieilhhfstsfqy": 59, "ieilh": 59, "hfst": 59, "fqyej": 59, "bmtwmg": 59, "bio": 59, "gold_bug": 59, "hg2sfuei7t": 59, "pug": 59, "heldo": 59, "wor6d": 59, "bifid5_squar": 59, "5x5": 59, "cap": [59, 62, 172, 215, 226], "tradition": [59, 66], "decipher_bifid5": 59, "round_trip": 59, "josi": 59, "osi": 59, "iosi": 59, "qiq": 59, "1901": 59, "felix": 59, "delastel": 59, "onto": [59, 71, 72, 73, 83, 87, 94, 97, 99, 202], "helen": 59, "cryptanalysi": 59, "german": 59, "fridai": 59, "ieilehfstsfxe": 59, "okai": 59, "decipher_bifid6": 59, "8am": 59, "kfkljjhf5mmmktfrgpl": 59, "meetmeonmondayat8am": 59, "bifid6_squar": 59, "6x6": 59, "rsa_public_kei": 59, "totient": [59, 98], "carmichael": [59, 98], "p_n": [59, 63, 66, 85, 203], "multiprim": 59, "land": 59, "reduced_toti": [59, 98], "uniquenss": 59, "rsa_private_kei": 59, "e_0": 59, "canonicalz": 59, "61": [59, 63, 74, 94, 98, 203, 209], "3233": 59, "797": 59, "1577": 59, "multipow": 59, "cryptosystem": 59, "coprim": [59, 85, 98, 168, 200, 220], "30030": 59, "becam": [59, 132], "hardest": 59, "claim": [59, 191, 217, 226], "encipher_rsa": 59, "decipher_rsa": 59, "r148": 59, "rsa_": 59, "28cryptosystem": 59, "r149": 59, "cacr": 59, "uwaterloo": 59, "techreport": 59, "2006": [59, 216], "cacr2006": 59, "r150": 59, "springer": [59, 85, 98, 200, 201, 223], "1007": 59, "2fbfb0055738": 59, "r151": 59, "itii": 59, "manuscript": 59, "1381": 59, "2753": 59, "413": 59, "1193": 59, "823": 59, "r152": 59, "r153": 59, "r154": 59, "r155": 59, "bmod": [59, 203, 207], "vice": [59, 85, 98, 101, 162, 182, 194, 198, 256, 257, 276], "versa": [59, 85, 98, 101, 162, 182, 194, 198, 256, 257, 276], "asymmetr": [59, 74], "puk": 59, "prk": 59, "chines": [59, 98, 200], "k_1": [59, 98, 200, 217], "k_2": 59, "k_n": [59, 66, 200], "p_3": [59, 190], "k_3": 59, "moduli": [59, 98, 200], "2048": [59, 98, 207], "overhead": [59, 99, 204], "modular": [59, 98, 168, 201, 226], "crt": [59, 98, 200], "overcompens": 59, "theorit": 59, "new_msg": 59, "kid_rsa_public_kei": 59, "grade": [59, 86, 187, 203], "school": [59, 216], "bob": [59, 116], "369": 59, "58": [59, 94, 233], "kid_rsa_private_kei": 59, "encipher_kid_rsa": 59, "200": [59, 89, 94, 98, 101, 106, 252], "161": 59, "decipher_kid_rsa": 59, "pub": [59, 252], "pri": 59, "encode_mors": 59, "sep": [59, 207, 224, 238], "mors": 59, "attack": 59, "flank": 59, "r156": 59, "morse_cod": 59, "decode_mors": 59, "word_sep": 59, "mc": [59, 127], "east": 59, "r157": 59, "lfsr_sequenc": 59, "lfsr": 59, "c_k": 59, "golomb": [59, 98], "g157": 59, "autocorrel": 59, "lim_": [59, 64, 66, 83, 85, 214, 274, 278], "balanc": [59, 138, 194, 227, 238], "solomon": 59, "aegean": 59, "park": 59, "laguna": 59, "1967": [59, 201], "lfsr_autocorrel": 59, "lfsr_connection_polynomi": 59, "massei": 59, "m158": 59, "jame": [59, 200], "synthesi": 59, "bch": 59, "tran": 59, "122": [59, 61, 66], "127": [59, 98], "elgamal_public_kei": 59, "elgamal_private_kei": 59, "1031": 59, "636": 59, "212": [59, 85, 201], "mathmat": 59, "dlp": 59, "is_primitive_root": [59, 98], "encipher_elgam": 59, "c2": [59, 68, 75, 89, 91, 116, 158, 172, 215, 223, 227, 255, 258, 285], "encryp": 59, "decipher_elgam": 59, "eucliden": 59, "dh_public_kei": 59, "dh_private_kei": 59, "_p": [59, 172, 198, 200, 202, 214, 217, 225], "_g": 59, "diffi": 59, "hellman": [59, 98], "publicli": 59, "secretli": 59, "dh_shared_kei": 59, "sk": 59, "gm_public_kei": 59, "goldwass": 59, "micali": 59, "gm_private_kei": 59, "b_n": [59, 63, 87, 194, 210], "jacobi_symbol": [59, 98], "reconstruct": [59, 94, 200, 220, 279], "residuos": 59, "entropi": [59, 227], "encipher_gm": 59, "public_kei": 59, "gm": [59, 175], "decipher_gm": 59, "encipher_railf": 59, "rail": 59, "railfenc": 59, "horel": 59, "ollwd": 59, "r160": 59, "rail_fence_ciph": 59, "decipher_railf": 59, "diffgeom": 60, "euclidean": [60, 71, 73, 182, 198, 200, 203], "r161": 60, "chart": [60, 193], "r162": 60, "sussman": 60, "wisdom": 60, "farr": 60, "2013": [60, 70, 89, 282], "tranform": 60, "cartesian": [60, 101, 140, 145, 159, 162, 167, 188, 193, 194, 215, 226, 245, 256, 257, 259, 260, 269], "polar": [60, 64, 66, 68, 74, 101, 110, 142, 193, 215, 219, 226, 269], "relation_dict": 60, "car2d": 60, "pol": 60, "coordinatesymbol": 60, "jacobian": [60, 94, 136, 225], "jacobian_determin": 60, "r163": 60, "coordinate_system": 60, "base_oneform": 60, "coord_index": 60, "oneform": 60, "base_scalar": 60, "basescalarfield": 60, "base_vector": [60, 252], "coord_funct": 60, "to_si": 60, "coord": [60, 73, 75, 112, 170, 186], "immutabledensematrix": [60, 89, 90, 91, 92, 227], "rn": 60, "r2_r": 60, "r2_p": 60, "jacobian_matrix": 60, "point_to_coord": 60, "coord_si": [60, 255], "imbu": 60, "difficulti": [60, 123], "arriv": [60, 200, 217, 219, 223, 227, 284], "inappropri": 60, "poin": 60, "unappropri": 60, "fy": [60, 193, 224], "ftheta": 60, "basevectorfield": 60, "point_p": 60, "point_r": 60, "s_field": 60, "dxi": 60, "v1": [60, 71, 94, 119, 139, 182, 183, 186, 227, 246, 252, 255, 256, 257, 258], "v2": [60, 71, 94, 119, 182, 183, 186, 246, 252, 255, 256, 257, 258], "v_1": [60, 202, 225], "v_2": [60, 202], "e_x": [60, 233], "e_i": [60, 194, 217, 233], "e_r": 60, "c_xy": 60, "c_xr": 60, "unfortun": [60, 62, 99, 206, 220], "e_rho": 60, "form_field": 60, "exterior": [60, 74], "dg": 60, "tensorproduct": [60, 169, 171, 228, 229], "multilinear": 60, "wedg": [60, 83], "tp1": 60, "tp": [60, 144, 171, 198], "wedgeproduct": 60, "wp1": 60, "liederiv": 60, "v_field": 60, "transport": 60, "pushforward": 60, "e_theta": 60, "basecovarderivativeop": 60, "christoffel": 60, "metric_to_christoffel_2nd": 60, "ch": [60, 94, 220], "cvd": 60, "covarderivativeop": 60, "intcurve_seri": 60, "vector_field": [60, 259], "start_point": 60, "dt": [60, 66, 126, 139, 181, 182, 184, 190, 191, 203, 223, 284], "f_i": [60, 83, 94, 200, 204], "movement": 60, "intcurve_diffequ": 60, "init_cond": 60, "f_1": [60, 63, 66, 83, 108, 118, 121, 140, 194, 200, 203, 223], "f_0": [60, 63, 118, 200], "vectors_in_basi": 60, "kept": [60, 174, 191, 245, 279], "twoform_to_matrix": 60, "twoform": 60, "e_j": 60, "metric_to_christoffel_1st": 60, "levi": [60, 66, 227, 233], "civita": [60, 66, 233], "metric_to_riemann_compon": 60, "non_trivial_metr": 60, "dtheta": 60, "drho": 60, "metric_to_ricci_compon": 60, "ricci": 60, "fft": [61, 139], "ifft": 61, "ntt": 61, "intt": 61, "fwht": 61, "ifwht": 61, "mobius_transform": 61, "inverse_mobius_transform": 61, "convolution_fft": 61, "convolution_ntt": 61, "convolution_fwht": 61, "convolution_subset": 61, "covering_product": 61, "intersecting_product": 61, "radix": 61, "r164": 61, "coolei": 61, "93tukey_fft_algorithm": 61, "r165": 61, "fastfouriertransform": 61, "r166": 61, "r167": 61, "pz": [61, 106, 233], "643": [61, 98], "767": 61, "387": 61, "415": 61, "384": 61, "353": [61, 94], "r168": 61, "apfloat": 61, "r169": 61, "numbertheoretictransform": 61, "r170": 61, "discrete_fourier_transform_": 61, "r171": 61, "r172": 61, "r173": 61, "wht": 61, "r174": 61, "hadamard_transform": 61, "r175": 61, "fast_walsh": 61, "93hadamard_transform": 61, "r176": 61, "r177": 61, "mobiu": [61, 98], "lattic": [61, 220], "bitmask": 61, "r178": 61, "b6bius_inversion_formula": 61, "r179": 61, "csail": 61, "mit": 61, "rrw": 61, "conv": 61, "r180": 61, "arxiv": [61, 63, 66, 94, 110, 203, 245], "1211": 61, "0189": 61, "r181": 61, "r182": 61, "r183": 61, "888": 61, "444": 61, "1283": 61, "19351": 61, "14219": 61, "15502": 61, "44": [61, 63, 94, 98, 216, 227], "41": [61, 68, 94, 98, 198, 220], "63": [61, 94, 98], "r184": 61, "convolution_theorem": 61, "r185": 61, "333": [61, 98], "555": 61, "222": 61, "666": 61, "15555": 61, "19404": 61, "r186": 61, "r187": 61, "68": [61, 86, 94, 98, 220], "48": [61, 68, 102, 220, 225, 227, 274], "2057": 61, "1870": 61, "r188": 61, "radioeng": 61, "fulltext": 61, "2002": [61, 194, 201, 204], "02_03_40_42": 61, "r189": 61, "r190": 61, "r191": 61, "AND": [61, 88], "327": [61, 223], "r192": 61, "44288293815837": 62, "4429": 62, "4428829381583662470158809900606936986146216893757": 62, "28902548222223624241": 62, "091999668350375232456": 62, "14159265358979": [62, 66, 225], "333333333333333": [62, 197, 219], "1415926535": 62, "7182818284": 62, "100000": [62, 98, 106], "951": 62, "95678796130331164628399634646042209010610577945815": 62, "gmpy": [62, 197, 198, 283], "googl": [62, 192, 193, 226], "100000000000000": 62, "1000000000": 62, "125000000000000000000000000000": 62, "100000000000000005551115123126": 62, "100000000000000000000000000000": 62, "1415": 62, "uncertainti": [62, 177], "003": 62, "31417": 62, "propag": [62, 71, 143, 146], "5000": [62, 101], "50000000000000000000000000000": 62, "varphi": [62, 66, 202, 207, 223], "erron": 62, "34665576869e": 62, "208": [62, 203], "64613129282185e": 62, "60123853010113e": 62, "210": [62, 98, 220], "thousand": [62, 98, 273], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 62, "binet": 62, "104": 62, "1336": 62, "portion": [62, 74, 89, 94], "meaningless": 62, "012297": 62, "9562288417661": 62, "956": 62, "29128599706266": 62, "2912859970626635404072825905956005414986193682745": 62, "14159265358979323846264338328": 62, "integrand": [62, 66, 82, 83, 85, 217], "struggl": [62, 206], "346": 62, "34635637913639": 62, "dealt": [62, 83], "504067061906928": 62, "50406706190692837199": 62, "wrap_lin": [62, 85, 86, 94, 102, 187, 194, 195, 206, 207, 223], "intgrl": 62, "extrapol": [62, 214], "richardson": [62, 214, 226], "slowli": [62, 214], "64493406684823": 62, "577215664901533": 62, "57721566490153286060651209008240243104215933593992": 62, "10000000": [62, 203], "20000000": [62, 203], "693147255559946": 62, "tune": [62, 86, 187, 207], "worthwhil": 62, "hypergeometr": [62, 63, 76, 82, 83, 201, 218, 219, 223, 225, 227, 264, 284], "ramanujan": [62, 63, 98], "9801": 62, "1103": 62, "26390": 62, "396": [62, 122], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 62, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 62, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 62, "355": [62, 98, 201], "113": [62, 98, 220], "33333": [62, 85], "635": 62, "504": [62, 201], "130198866629986772369127970337": 62, "49": [62, 63, 98, 102, 200, 220], "___________": [62, 102, 223], "bell": [63, 156, 209, 245], "k_sym": 63, "binom": [63, 98, 227, 284], "dotsc": [63, 209], "j_1": [63, 151, 152, 169, 192, 209, 228], "j_2": [63, 151, 152, 169, 192, 209], "dotsb": [63, 209], "atop": [63, 66, 209, 217], "2j_2": [63, 209], "3j_2": [63, 209], "j_": [63, 66, 83, 85, 169, 209, 217, 278], "bernoulli": [63, 66, 203, 207, 223, 225, 227], "877": 63, "4140": 63, "21147": 63, "115975": 63, "846749014511809332450147": 63, "luca": [63, 98, 207, 213], "genocchi": [63, 66, 203], "r193": 63, "bell_numb": 63, "r194": 63, "bellnumb": 63, "r195": 63, "bellpolynomi": 63, "hurwitz": [63, 66], "6k": 63, "appel": [63, 66], "confer": [63, 99, 282], "r200": 63, "66": [63, 89, 94, 203, 207], "1000001": 63, "andr": [63, 203], "appellseq": [63, 203], "bernoulli_poli": [63, 203], "r196": 63, "bernoulli_numb": 63, "r197": 63, "bernoulli_polynomi": [63, 203], "r198": 63, "bernoullinumb": 63, "r199": 63, "bernoullipolynomi": 63, "luschni": [63, 66, 203], "manifesto": 63, "r201": 63, "2009": [63, 66, 98, 192, 203], "06743": [63, 66, 203], "_k": [63, 66, 85, 192, 202, 227], "6435": 63, "pascal": [63, 98], "4th": [63, 64, 80, 94, 98, 139], "195": 63, "r202": 63, "johndcook": 63, "binomial_coeffici": [63, 98], "c_n": [63, 66, 87, 203, 223], "429": [63, 207], "1430": 63, "4862": 63, "39764993382373624267": 63, "020884341620842555705": 63, "r203": 63, "catalan_numb": 63, "r204": 63, "catalannumb": [63, 207], "r205": 63, "r206": 63, "geomet": [63, 194], "mathcircl": 63, "2j": [63, 200, 227], "1385": [63, 203], "272": [63, 203], "7936": [63, 203], "2702765": 63, "4096": 63, "euler_poli": [63, 203], "r207": 63, "euler_numb": 63, "r208": 63, "eulernumb": 63, "r209": 63, "alternating_permut": 63, "r210": 63, "alternatingpermut": 63, "swing": 63, "factorial2": [63, 173, 207], "fallingfactori": [63, 207], "subfactori": [63, 207, 245], "derang": [63, 245], "r212": 63, "generate_derang": [63, 245], "r211": 63, "r213": 63, "double_factori": 63, "texttt": [63, 215], "r214": 63, "r215": 63, "paul": [63, 242], "235": 63, "268": 63, "1995": [63, 201, 219, 225], "f_z": [63, 188, 259], "f_2": [63, 83, 108, 118, 121, 140, 200, 217, 223], "r217": 63, "fibonacci_numb": 63, "r218": 63, "fibonaccinumb": 63, "t_0": [63, 220], "149": [63, 98], "r219": 63, "r220": 63, "tribonaccinumb": 63, "r221": 63, "oei": [63, 66, 98, 203], "a000073": 63, "137": [63, 94, 110], "205": [63, 83, 217], "5269": 63, "761": 63, "280": 63, "83711": 63, "27720": 63, "30247": 63, "9900": 63, "983697455232980674869851942390639915940": 63, "r222": 63, "harmonic_numb": 63, "r223": 63, "harmonicnumb": [63, 207], "r224": 63, "harmonicnumber2": 63, "l_0": [63, 109, 233, 234], "47": [63, 66, 94, 98, 110, 145, 177, 206], "76": [63, 66, 94, 98, 200, 203], "r225": 63, "lucas_numb": 63, "r226": 63, "lucasnumb": 63, "2t": 63, "genocchi_poli": [63, 203], "r227": 63, "genocchi_numb": 63, "r228": 63, "genocchinumb": 63, "r229": 63, "mathcal": [63, 64, 83, 108, 137, 169, 192, 203, 215], "a000111": [63, 203], "zigzag": 63, "li": [63, 66, 74, 85, 98, 172, 207, 262], "50521": [63, 203], "691": 63, "2730": 63, "andre_poli": [63, 203], "r230": 63, "r231": 63, "eulerzigzagnumb": 63, "r232": 63, "irrelev": 63, "r233": 63, "number_theori": 63, "r234": 63, "pentagonal_number_theorem": 63, "multifactori": 63, "pochhamm": [63, 207, 219], "r235": 63, "r236": 63, "pochhammer_symbol": 63, "274": 63, "225": [63, 98, 201], "511": 63, "9330": 63, "34105": 63, "42525": 63, "22827": 63, "5880": 63, "750": 63, "r237": 63, "stirling_numbers_of_the_first_kind": 63, "r238": 63, "stirling_numbers_of_the_second_kind": 63, "multiset": [63, 83, 242, 245], "nc": 63, "nt": [63, 245], "babi": [63, 98, 245], "aa": [63, 192], "bb": [63, 192, 219, 245], "multiset_combin": [63, 245], "aab": [63, 245], "aabc": 63, "aaaabbbbcccc": 63, "m_1": [63, 108, 151, 169, 192, 220], "m_2": [63, 121, 140, 151, 169, 192], "m_k": 63, "r239": 63, "r240": 63, "tinyurl": 63, "cep849r": 63, "ba": [63, 245], "multiset_permut": [63, 245], "r241": 63, "aabbc": 63, "mississippi": [63, 245], "609": 63, "1521": 63, "1768": 63, "1224": [63, 98], "579": 63, "197": 63, "r242": 63, "undergradu": 63, "csse": 63, "uwa": 63, "au": 63, "cits7209": 63, "707106781186548": 64, "tangent": [64, 68, 70, 74, 85, 204, 223], "643501108793284": 64, "r243": 64, "ib": [64, 127], "complex_conjug": 64, "polar_lift": [64, 66, 219], "periodic_argu": 64, "principal_branch": [64, 83], "r247": 64, "csc": [64, 100, 207, 216], "sec": [64, 85, 106, 202, 207, 216, 284], "acsc": [64, 207], "asec": [64, 207], "acot": [64, 207], "r244": 64, "trigonometric_funct": 64, "r245": 64, "r246": 64, "elementaryfunct": 64, "trigonometryangl": 64, "r248": 64, "r249": 64, "r250": 64, "r251": 64, "r252": 64, "r253": 64, "cotang": [64, 204], "r254": 64, "r255": 64, "r256": 64, "secant": [64, 203], "r257": 64, "r258": 64, "r259": 64, "cosec": 64, "r260": 64, "r261": 64, "r262": 64, "unnorm": [64, 66], "qquad": [64, 177, 200], "jn": [64, 66, 169, 203, 207, 278], "spheric": [64, 110, 116, 151, 192, 193, 203, 252, 256, 257, 278], "r263": 64, "sinc_funct": 64, "asinh": [64, 207], "r264": 64, "inverse_trigonometric_funct": 64, "r265": 64, "r266": 64, "r267": 64, "r268": 64, "r269": 64, "r270": 64, "r271": 64, "r272": 64, "arctan": [64, 204, 207], "acoth": [64, 207], "r273": 64, "r274": 64, "arccot": [64, 207], "r278": 64, "r275": 64, "r276": 64, "r277": 64, "arcsec": [64, 207], "r279": 64, "r280": 64, "r281": 64, "arccsc": [64, 207], "quadrant": [64, 198, 226], "clock": [64, 216], "reurn": 64, "r282": 64, "r283": 64, "r284": 64, "arctan2": [64, 207], "hyperbolicfunct": 64, "coth": [64, 207, 219], "acosh": [64, 207], "atanh": [64, 204, 207, 217], "sech": [64, 207], "csch": [64, 207], "asech": [64, 207], "r285": 64, "hyperbolic_funct": 64, "r286": 64, "r287": 64, "arcsech": [64, 207], "acsch": [64, 207], "r288": 64, "r289": 64, "r290": 64, "arccsch": [64, 207], "567": 64, "r291": 64, "r292": 64, "ceilingfunct": 64, "r293": 64, "r294": 64, "floorfunct": 64, "roundfunct": 64, "r295": 64, "lfloor": [64, 198, 226, 227], "rfloor": [64, 198, 226, 227], "fractional_part": 64, "r296": 64, "fractionalpart": 64, "lambertw": [64, 204, 207, 225, 226, 285], "r297": 64, "w_k": 64, "635564016364870": 64, "34747534407696": 64, "41624341514535": 64, "lambert_w_funct": 64, "exprcondpair": 64, "cond": [64, 83, 85, 215], "piecewise_fold": 64, "folded_cond": 64, "ITE": [64, 88, 207], "piecewise_exclus": 64, "_eval_integr": [64, 85], "piecewise_integr": 64, "as_expr_set_pair": 64, "skip_nan": 64, "mutual": [64, 83, 191], "conjunct": [64, 88, 193, 217, 238, 284], "identityfunct": 64, "supremum": [64, 215], "r298": 64, "directed_complete_partial_ord": 64, "r299": 64, "lattice_": 64, "28order": 64, "global_paramet": 64, "rootof": [64, 203], "real_root": [64, 203, 225], "rootoftool": [64, 94, 203], "r300": 64, "square_root": 64, "r301": 64, "r302": 64, "root_of_un": 64, "r303": 64, "principal_valu": [64, 85], "r304": 64, "cuberoot": 64, "powdenest": [64, 219], "misc": [64, 89, 248], "r305": 64, "r306": 64, "r307": 64, "cube_root": 64, "r308": 64, "delta_funct": [66, 85], "int_": [66, 82, 83, 85, 203, 210, 274, 278], "sum_i": [66, 214], "is_simpl": 66, "tensor_funct": 66, "kroneckerdelta": [66, 91, 172, 207, 219], "r309": 66, "deltafunct": [66, 85], "h0": 66, "electron": [66, 110, 216], "signal": [66, 88, 98, 106, 108, 139, 200, 279], "improp": [66, 85], "convolut": [66, 209], "r310": 66, "heavisidestepfunct": 66, "r311": 66, "iv": [66, 204], "105": [66, 98, 203, 220], "parg": 66, "singularity_funct": 66, "singularityfunct": [66, 85, 101], "macaulai": 66, "heavisidediracdelta": 66, "r312": 66, "r313": 66, "r314": 66, "r315": 66, "r316": 66, "setminu": [66, 83], "17805383034794561964694160130": 66, "65092319930185633889": 66, "8724366472624298171": 66, "r317": 66, "r318": 66, "r319": 66, "loggammafunct": 66, "r320": 66, "espinosa": 66, "moll": 66, "r325": 66, "19093197": 66, "5173168": 66, "ni": [66, 98], "r321": 66, "polygamma_funct": 66, "r322": 66, "polygammafunct": 66, "r323": 66, "r324": 66, "polygamma2": 66, "2004": [66, 201, 220], "115": 66, "r326": 66, "digamma_funct": 66, "r327": 66, "digammafunct": 66, "r328": 66, "r329": 66, "trigamma_funct": 66, "r330": 66, "trigammafunct": 66, "r331": 66, "int_x": 66, "_1f_1": 66, "confluent": [66, 217], "xt": 66, "expint": [66, 207], "r332": 66, "incomplete_gamma_funct": 66, "upper_incomplete_gamma_funct": 66, "r333": 66, "r334": 66, "r335": 66, "gamma2": 66, "r336": 66, "gamma3": 66, "r337": 66, "exponential_integr": 66, "relation_with_other_funct": 66, "int_0": [66, 83, 85, 274, 284], "r338": 66, "lower_incomplete_gamma_funct": 66, "r339": 66, "r340": 66, "r341": 66, "r342": 66, "multigamma": 66, "gamma_p": 66, "r343": 66, "multivariate_gamma_funct": 66, "beta_funct": 66, "eulerian": 66, "02671848900111377452242355235388489324562": 66, "2112723729365330143": 66, "7655283165378005676": 66, "r344": 66, "r345": 66, "betafunct": 66, "r346": 66, "error_funct": 66, "999999984582742099719981147840": 66, "1296959": 66, "73071763923152794095062": 66, "r347": 66, "r348": 66, "r349": 66, "r350": 66, "0000000154172579002800188521596734869": 66, "r351": 66, "r352": 66, "r353": 66, "r354": 66, "5648024145755525987042919132": 66, "995322265018952734162069256367": 66, "r355": 66, "r356": 66, "r357": 66, "r358": 66, "179143454621291692285822705344": 66, "r359": 66, "inverse_funct": 66, "r360": 66, "inverseerf": [66, 207], "r361": 66, "r362": 66, "inverseerfc": [66, 207], "r363": 66, "inverseerf2": 66, "fresnelintegr": 66, "343415678363698242195300815958": 66, "fresnelc": [66, 207, 217], "r364": 66, "fresnel_integr": 66, "r365": 66, "r366": 66, "r367": 66, "r368": 66, "wrench": 66, "jr": 66, "vicki": 66, "allei": 66, "488253406075340754500223503357": 66, "r369": 66, "r370": 66, "r371": 66, "r372": 66, "r373": 66, "background": [66, 86, 187, 190, 282], "cauchi": [66, 83, 85, 198, 223, 227], "219383934395520": 66, "21938393439552": 66, "shi": [66, 83, 207, 217], "e1": [66, 68, 75, 122, 197, 202, 214, 223, 226], "hyperbol": [66, 204, 226, 280, 284], "r374": 66, "r375": 66, "r376": 66, "sfu": [66, 85], "cbm": [66, 85], "aand": [66, 85], "page_228": 66, "int_1": [66, 83], "zt": [66, 83], "unbranch": [66, 83], "meijerg": [66, 77, 83, 85, 207, 227, 284], "postiv": 66, "r377": 66, "r378": 66, "expintegral": [66, 207], "r379": 66, "04516378011749278484458888919": 66, "0652795784357498247001125598": 66, "08346052231061726610939702133": 66, "soldner": 66, "45136923488338": 66, "r380": 66, "logarithmic_integr": 66, "r381": 66, "logarithmicintegr": 66, "r382": 66, "r383": 66, "soldnersconst": 66, "92242131492155809316615998938": 66, "r384": 66, "r385": 66, "r386": 66, "r387": 66, "trigonometric_integr": 66, "_1": [66, 94, 116, 182, 192, 217, 246], "somewhat": [66, 85, 122, 198], "r388": 66, "r389": 66, "r390": 66, "laurent": [66, 198, 204, 223], "j_n": [66, 169], "r391": 66, "r392": 66, "r393": 66, "r394": 66, "yn": [66, 207, 213], "r395": 66, "i_": [66, 83, 217, 227, 228], "iz": 66, "r396": 66, "k_": [66, 83, 117, 134, 135], "r397": 66, "hankel1": [66, 207], "hankel": [66, 85], "iy_": 66, "hankel2": [66, 207], "r398": 66, "hankelh1": [66, 207], "r399": 66, "hankelh2": [66, 207], "orthopoli": [66, 203], "spherical_bessel_fn": [66, 203], "3j": [66, 151, 192], "099419756723640344491": 66, "054525080242173562897": 66, "r400": 66, "y_n": [66, 220], "18525034196069722536": 66, "014895573969924817587": 66, "r401": 66, "jn_zero": 66, "besseljzero": 66, "sph_jn": 66, "7635": 66, "095": 66, "323": [66, 98], "515": 66, "marcumq": 66, "marcum": 66, "q_m": 66, "r402": 66, "marcum_q": 66, "r403": 66, "airybas": 66, "airyai": [66, 207, 223], "ai": [66, 98, 203, 220, 248, 284], "airyaiprim": [66, 207], "22740742820168557599192443603787379946077222541710": 66, "airybi": [66, 207, 223], "airybiprim": [66, 207], "r404": 66, "airy_funct": 66, "r405": 66, "r406": 66, "encyclopediaofmath": 66, "r407": 66, "airyfunct": 66, "41230258795639848808323405461146104203453483447240": 66, "r408": 66, "r409": 66, "r410": 66, "r411": 66, "61825902074169104140626429133247528291577794512415": 66, "r412": 66, "r413": 66, "r414": 66, "r415": 66, "27879516692116952268509756941098324140300059345163": 66, "r416": 66, "r417": 66, "r418": 66, "r419": 66, "bspline": 66, "bspline_basi": 66, "knot": 66, "cubic": [66, 194, 203, 220, 225], "bspline_basis_set": 66, "r420": 66, "interpolating_splin": 66, "131": [66, 182], "39": [66, 98, 206], "interpolating_poli": [66, 203], "zeta_funct": 66, "admit": [66, 223], "lerch": 66, "transcend": 66, "lerchphi": [66, 207], "dirichlet_eta": [66, 207], "20205690315959": 66, "polylog": [66, 207], "r421": 66, "r422": 66, "hurwitz_zeta_funct": 66, "r423": 66, "dirichlet_eta_funct": 66, "r424": 66, "polylogarithm": 66, "sheet": [66, 216], "phi_0": 66, "ze": 66, "r425": 66, "bateman": 66, "erdelyi": 66, "1953": [66, 202], "york": [66, 83, 138, 217, 225], "mcgraw": [66, 117, 138, 182, 189, 252], "r426": 66, "r427": 66, "lerch_transcend": 66, "stieltj": [66, 207], "gamma_": [66, 109, 111], "r428": 66, "stieltjes_const": 66, "ap": [66, 70, 217], "bq": [66, 195, 196, 217], "a_p": [66, 83, 217, 284], "b_q": [66, 83, 217, 284], "_pf_q": [66, 217, 223, 284], "unicod": [66, 86, 94, 187, 207, 238, 278], "r429": 66, "r430": 66, "generalized_hypergeometric_funct": 66, "convergence_stat": 66, "radius_of_converg": 66, "radiu": [66, 68, 72, 74, 129, 131, 141, 145, 193, 226, 227, 262], "meijer": [66, 76, 84, 85, 264, 274, 284], "mellin": [66, 85], "barn": 66, "b_m": [66, 83, 225], "confusingli": 66, "int_l": [66, 83, 217], "contour": [66, 68, 83, 193, 217], "__1": 66, "subvector": 66, "aother": 66, "bm": 66, "bother": [66, 279], "slater": [66, 217], "allow_hyp": [66, 219], "subsum": 66, "r431": 66, "r432": 66, "meijer_g": 66, "get_period": [66, 83], "appellf1": [66, 207], "b2": [66, 98, 101, 102, 113, 122, 139, 182, 196, 198, 207, 217, 220, 223, 258], "0063339426292673": 66, "172870711": 66, "659936": 66, "15605338197184": 66, "r433": 66, "appell_seri": 66, "r434": 66, "hypergeometricfunct": 66, "elliptic_integr": 66, "elliptic_k": [66, 207], "tfrac": [66, 223, 227], "eccentr": [66, 68], "50923695405127": 66, "625146415202697": 66, "elliptic_f": [66, 207], "r435": 66, "r436": 66, "ellipticintegr": 66, "elliptick": [66, 207], "909449841483": 66, "74720545502474": 66, "r437": 66, "r438": 66, "ellipticf": 66, "elliptic_": [66, 68, 207], "55203744279187": 66, "290764986058437": 66, "991052601328069": 66, "81879421395609": 66, "r439": 66, "r440": 66, "elliptice2": 66, "r441": 66, "elliptic": [66, 207], "elliptic_pi": [66, 207], "50232379629182": 66, "760939574180767": 66, "29136443417283": 66, "32555634906645": 66, "r442": 66, "r443": 66, "ellipticpi3": 66, "r444": 66, "ellipticpi": [66, 207], "mathieu_funct": 66, "mathieubas": 66, "mathieusprim": [66, 207], "mathieuc": [66, 207], "mathieucprim": [66, 207], "r445": 66, "r446": 66, "r447": 66, "r448": 66, "mathieuandspheroidalfunct": 66, "r449": 66, "r450": 66, "r451": 66, "r452": 66, "r453": 66, "r454": 66, "r455": 66, "r456": 66, "r457": 66, "r458": 66, "r459": 66, "r460": 66, "chebyshevu": [66, 207], "chebyshevt_root": 66, "chebyshevu_root": 66, "assoc_legendr": [66, 207], "hermite_prob": 66, "jacobi_poli": [66, 203], "gegenbauer_poli": [66, 203], "chebyshevt_poli": [66, 203], "chebyshevu_poli": [66, 203], "hermite_poli": [66, 203], "legendre_poli": [66, 203], "laguerre_poli": [66, 203], "r461": 66, "jacobi_polynomi": 66, "r462": 66, "jacobipolynomi": 66, "r463": 66, "jacobip": [66, 207], "jacobi_norm": 66, "normilz": 66, "p_m": 66, "delta_": [66, 169, 177, 192], "r464": 66, "r465": 66, "r466": 66, "hermite_prob_poli": [66, 203], "r467": 66, "gegenbauer_polynomi": 66, "r468": 66, "gegenbauerpolynomi": 66, "r469": 66, "gegenbauerc3": 66, "r470": 66, "chebyshev_polynomi": 66, "r471": 66, "chebyshevpolynomialofthefirstkind": 66, "r472": 66, "chebyshevpolynomialofthesecondkind": 66, "r473": 66, "r474": 66, "u_n": [66, 85, 200, 202, 203], "r475": 66, "r476": 66, "r477": 66, "r478": 66, "r479": 66, "chebyshev_root": 66, "r480": 66, "legendre_polynomi": 66, "r481": 66, "legendrepolynomi": 66, "r482": 66, "legendrep": [66, 207], "r483": 66, "legendrep2": 66, "r484": 66, "associated_legendre_polynomi": 66, "r485": 66, "r486": 66, "r487": 66, "r488": 66, "hermite_polynomi": 66, "r489": 66, "hermitepolynomi": 66, "r490": 66, "hermiteh": [66, 207], "probabilist": [66, 203, 227], "he_n": [66, 203], "telephon": 66, "a000085": 66, "232": 66, "764": 66, "2620": 66, "9496": 66, "r491": 66, "r492": 66, "l_n": [66, 85, 203], "r493": 66, "laguerre_polynomi": 66, "r494": 66, "laguerrepolynomi": 66, "r495": 66, "laguerrel": [66, 207], "r496": 66, "laguerrel3": 66, "r497": 66, "generalized_laguerre_polynomi": 66, "r498": 66, "associatedlaguerrepolynomi": 66, "r499": 66, "r500": 66, "spherical_harmon": 66, "ynm": [66, 192], "ynm_c": 66, "znm": 66, "r501": 66, "r502": 66, "sphericalharmon": 66, "r503": 66, "sphericalharmonici": 66, "r504": 66, "r505": 66, "r506": 66, "r507": 66, "z_n": [66, 201], "r508": 66, "r509": 66, "r510": 66, "eijk": 66, "levicivita": [66, 94], "eval_levicivita": 66, "pseudotensor": 66, "delta_rang": [66, 172], "kroneck": [66, 171, 172, 192, 228, 233], "r511": 66, "kronecker_delta": [66, 172], "indices_contain_equal_inform": [66, 172], "fermi": [66, 172], "above_fermi": [66, 172], "below_fermi": [66, 172], "is_above_fermi": [66, 172], "is_below_fermi": [66, 172], "is_only_below_fermi": [66, 172], "is_only_above_fermi": [66, 172], "killable_index": [66, 172], "preferred_index": [66, 172], "point2d": [67, 68, 69, 70, 71, 73, 74, 75], "arbitrary_point": [67, 68, 69, 70, 71, 72, 74], "polyfunc": [67, 203], "ambient_dimens": [67, 69, 71, 73], "plot_interv": [67, 68, 71, 74], "lower_bound": [67, 68, 71, 74], "upper_bound": [67, 68, 71, 74], "counterclockwis": [67, 68, 69, 73, 101, 102], "geometryent": [67, 68, 69, 71, 73, 74, 75], "hradiu": 68, "vradiu": 68, "ellipt": [68, 98, 194], "geometryerror": [68, 71, 74, 75], "radii": 68, "foci": 68, "periapsi": 68, "apoapsi": 68, "focus_dist": 68, "shortest": [68, 71, 74, 190, 213, 219, 223, 245], "auxiliary_circl": 68, "xmin": [68, 69, 71, 73, 74, 193], "ymin": [68, 69, 71, 73, 74, 193], "xmax": [68, 69, 71, 73, 74, 193], "ymax": [68, 69, 71, 73, 74, 193], "rectangl": [68, 69, 71, 73, 74, 193, 203], "director_circl": 68, "perpendicular": [68, 71, 72, 74, 87, 116, 130, 145, 191], "director": 68, "130": 68, "r512": 68, "encloses_point": [68, 69, 74], "border": [68, 74], "_slope": 68, "slope": [68, 69, 71, 74, 101, 102, 106, 116], "eq1": [68, 223, 225, 226], "eq2": [68, 88, 223, 226], "r513": 68, "108270": 68, "r514": 68, "equation_of_a_shifted_ellips": 68, "evolut": 68, "focal": [68, 141, 145], "100500": 68, "363": [68, 98, 201], "175": [68, 94, 200, 201], "is_tang": [68, 70], "tangent_lin": 68, "normal_lin": 68, "line2d": [68, 71, 74], "quartic": [68, 203, 225], "2020": [68, 151], "polar_second_moment_of_area": [68, 74], "moment": [68, 74, 101, 102, 124, 132, 135, 181, 193, 203, 220, 227], "constitu": [68, 74, 119, 182, 213, 252], "planar": [68, 74, 102, 116, 145], "resist": [68, 74, 101, 102, 216], "deflect": [68, 74, 101, 102], "bend": [68, 74, 101, 103, 269], "r515": 68, "polar_moment_of_inertia": [68, 74], "random_point": [68, 71, 72], "arb": 68, "364": 68, "notimpl": [68, 202], "second_moment_of_area": [68, 74], "centroid": [68, 74, 75, 101], "i_xx": [68, 74], "i_yi": [68, 74], "i_xi": [68, 74], "ellis": 68, "r516": 68, "list_of_second_moments_of_area": 68, "section_modulu": [68, 74], "sympify": [68, 74, 101, 104, 113, 119, 143, 146, 184], "farthest": [68, 74], "s_x": [68, 74], "s_y": [68, 74], "r517": 68, "semilatus_rectum": 68, "semi": [68, 71, 98], "latu": 68, "rectum": 68, "chord": 68, "conic": [68, 220, 252], "directrix": 68, "r518": 68, "semilatusrectum": 68, "r519": 68, "latus_rectum": 68, "collinear": [68, 70, 72, 73, 74, 193], "gx": 68, "hy": 68, "synonym": [68, 202], "p4": [68, 71, 73, 74, 193], "boundari": [69, 71, 101, 102, 186, 204, 215, 223, 227], "t2": [69, 74, 75, 98, 113, 119, 220, 227, 233], "ordering_of_class": 69, "is_similar": [69, 71, 74, 75], "uniform": [69, 193, 225, 227], "enlarg": 69, "shrink": [69, 83], "parameter_valu": [69, 72], "pent": 69, "rpent": 69, "rcirc": 69, "entity1": 70, "entity2": 70, "zp": 70, "is_collinear": [70, 73], "segment2d": [70, 71, 74, 75], "wikipappu": 70, "bc": [70, 104, 245, 248, 258], "subs_point": 70, "p11": 70, "p12": 70, "p13": 70, "p21": 70, "p22": 70, "p23": 70, "ll1": 70, "ll2": 70, "ll3": 70, "ll4": 70, "ll5": 70, "ll6": 70, "pp1": 70, "pp2": 70, "pp3": 70, "encyclopedia": [70, 189], "apr": 70, "s_hexagon_theorem": 70, "clockwis": [70, 85, 89, 101, 102, 104], "overlap": [70, 75, 97, 194, 215, 248], "infanc": 70, "geometryresult": 70, "fair": [70, 227], "angle_between": [71, 72, 74, 182], "reflex": 71, "eman": 71, "readili": [71, 94], "sw": 71, "obtus": 71, "smallest_angle_between": 71, "line3d": [71, 72, 73], "is_perpendicular": [71, 72, 73, 74], "ray2d": [71, 74], "closing_angl": 71, "are_concurr": [71, 72], "concurr": [71, 72, 204], "l3": [71, 125, 200], "l4": [71, 125], "bisector": [71, 74], "p5": [71, 73, 74, 193], "p6": [71, 74, 193], "p7": [71, 74, 193], "segment3d": [71, 72], "direction_ratio": [71, 73], "is_parallel": [71, 72], "parallel_lin": 71, "perpendicular_lin": [71, 72], "perpendicular_seg": 71, "enpoint": 71, "reform": 71, "92": [71, 201, 223, 227], "ccw": [71, 74], "ray3d": [71, 72, 145], "xdirect": 71, "ydirect": 71, "midpoint": [71, 73, 74, 85, 193, 258], "170": [71, 227], "341": 71, "perpendicular_bisector": 71, "linearentity2d": 71, "linearentity3d": [71, 72], "direction_cosin": [71, 73], "zdirect": 71, "normal_vector": [72, 145], "proce": [72, 136, 200, 202, 217, 225], "147": 72, "321": 72, "is_coplanar": 72, "perpendicualar": 72, "parallel_plan": 72, "on_circl": 72, "off_circl": 72, "perpendicular_plan": 72, "pt1": 72, "projection_lin": 72, "on_morph": 73, "affine_rank": 73, "are_coplanar": 73, "canberra_dist": 73, "canberra": 73, "geometricent": 73, "taxicab_dist": 73, "is_concycl": 73, "concycl": 73, "fewer": [73, 74, 136, 227, 274], "is_scalar_multipl": 73, "ambient": 73, "orthogonal_direct": 73, "taxicab": 73, "_nocheck": 73, "are_collinear": 73, "4x4": [73, 97, 144, 227], "travers": [74, 98, 114, 203, 216, 232, 242, 279], "unrot": 74, "circumscrib": 74, "spin": [74, 110, 124, 158, 159, 167, 269], "perimet": 74, "contact": [74, 124, 128, 129, 130, 131, 190, 231], "38": [74, 94, 98, 207, 220, 222, 227], "cut_sect": 74, "upper_polygon": 74, "lower_polygon": 74, "upper_seg": 74, "lower_seg": 74, "r520": 74, "r521": 74, "paulbourk": 74, "polygonmesh": 74, "insidepoli": 74, "first_moment_of_area": 74, "q_x": [74, 190], "q_y": [74, 190], "625": [74, 262], "3125": [74, 227], "525": 74, "3000": [74, 101], "r522": 74, "skyciv": 74, "beam": [74, 104, 141, 144, 269], "bmd": 74, "r523": 74, "mechanicalc": 74, "poly1": 74, "poly2": 74, "interior": [74, 203, 215], "180": [74, 191, 201], "r524": 74, "r525": 74, "r526": 74, "apothem": 74, "interior_angl": 74, "exterior_angl": 74, "circumcircl": 74, "incircl": 74, "inradiu": 74, "inscrib": 74, "circumcent": 74, "circumradiu": 74, "leg": 74, "square_in_unit_circl": 74, "kite": 74, "asa": 74, "sa": [74, 203], "sss": 74, "altitud": 74, "orthocent": 74, "exradii": 74, "median": [74, 227], "medial": 74, "nine_point_circl": 74, "straight": [74, 80, 106, 126, 190, 223], "eulerlin": 74, "equilater": 74, "coincid": [74, 94, 97, 116, 122, 194, 252, 257, 276], "excent": 74, "excircl": 74, "touch": [74, 124, 216], "r527": 74, "ly": [74, 94, 198], "exradiu": 74, "r528": 74, "r529": 74, "incent": 74, "is_equilater": 74, "is_isoscel": 74, "is_right": 74, "is_scalen": 74, "nine": [74, 207], "feet": 74, "real_num": 75, "hull": 75, "r530": 75, "graham_scan": 75, "r531": 75, "andrew": 75, "1979": [75, 177], "geomalgorithm": 75, "a10": 75, "_hull": 75, "t3": [75, 220], "averag": [75, 85, 98, 200, 227], "qq": [76, 77, 79, 80, 81, 85, 194, 195, 196, 197, 200, 202, 203, 204], "p_r": 76, "holonomic_funct": 76, "from_hyp": [77, 80], "holonomicfunct": [77, 80, 81], "from_meijerg": [77, 80], "initcond": [77, 79, 80], "expr_to_holonom": [77, 80, 81, 82], "lenic": [77, 79], "ground": [77, 116, 124, 128, 129, 130, 131, 194, 197, 198, 200, 202, 203, 225, 283], "meijerint": [77, 79, 83, 85], "_rewrite1": [77, 83], "_convert_poly_rat_alg": [77, 79], "_create_t": [77, 79], "_create_lookup_t": [79, 83], "differentialoper": [80, 81, 161], "old_poly_r": [80, 81, 194, 197, 198], "to_expr": [80, 81, 82, 108], "to_sequ": 80, "n_0": [80, 200, 225, 226], "indici": [80, 81, 82, 223], "c_j": [80, 83, 217], "holonomicsequ": 80, "r532": 80, "hal": 80, "inria": [80, 85], "fr": [80, 85, 98, 117, 122, 124, 126, 129, 130, 134, 136, 139, 227], "00070025": 80, "r533": 80, "risc": [80, 223, 252], "jku": [80, 223, 252], "risc_2244": 80, "diplform": 80, "_recur": 80, "rk4": 80, "71828182845905": 80, "10517083333333": 80, "22140257085069": 80, "34985849706254": 80, "49182424008069": 80, "64872063859684": 80, "82211796209193": 80, "01375162659678": 80, "22553956329232": 80, "45960141378007": 80, "71827974413517": 80, "331": 80, "4641": 80, "61051": 80, "771561": 80, "9487171": 80, "14358881": 80, "357947691": 80, "5937424601": 80, "to_hyp": 80, "as_list": [80, 203], "to_meijerg": 80, "1_0": 81, "1_1": 81, "0_0": 81, "0_1": 81, "pyplot": [81, 139], "plt": [81, 139], "list_of_poli": 81, "weyl": [81, 87], "differentialoperatoralgebra": 81, "Ore": 81, "dxa": 81, "endomorph": [81, 202], "frobeniu": [82, 94, 98, 200, 201], "subtleti": 83, "recast": [83, 219, 225, 226], "branchpoint": 83, "crude": [83, 124, 193], "decre": 83, "biholomorph": 83, "topologi": [83, 215], "neighbourhood": 83, "evid": [83, 117, 130, 217], "peculiar": [83, 191], "_split_mul": 83, "_mytyp": 83, "inequival": 83, "_mul_as_two_part": 83, "bx": [83, 227, 233], "twist": 83, "recognis": [83, 197, 217, 219], "anywai": [83, 219, 223], "analyitc": 83, "_rewrite_singl": 83, "_rewrite2": 83, "_rewrite_saxena_1": 83, "_rewrite_saxena": 83, "blogpost": 83, "remedi": 83, "exploit": [83, 239], "transpar": [83, 86, 187], "nessgrh": 83, "wordpress": [83, 220], "07": 83, "stade": 83, "c_u": 83, "d_1": [83, 177, 203, 227], "d_v": 83, "amalgam": 83, "prudnikov1990": [83, 217], "luke1969": [83, 217], "c_3": [83, 223], "c_4": 83, "visibl": [83, 193], "fulfil": [83, 192], "vee": [83, 88], "lceil": 83, "rceil": 83, "d_j": [83, 177, 217], "lambda_c": [83, 135], "lambda_": 83, "z_0": [83, 219], "z_1": 83, "a_i": [83, 177, 182, 191, 195, 200, 217], "c_5": 83, "c_6": 83, "c_7": 83, "c_8": 83, "lvert": 83, "rvert": 83, "c_9": 83, "versatil": 83, "bz": [83, 220, 233], "deform": [83, 102], "encircl": 83, "appeal": 83, "fox": 83, "obstacl": 83, "identif": [83, 226], "domin": [83, 89, 212, 214], "iT": 83, "omega_": 83, "disguis": 83, "meijerint_indefinit": 83, "meijerint_definit": 83, "meijerint_invers": 83, "kelli": [83, 217], "roach": [83, 217], "211": [83, 98, 203, 217, 223], "prudnikov": [83, 217], "yu": [83, 192, 217], "brychkov": [83, 217], "marichev": [83, 217], "gordon": [83, 151, 217], "breach": [83, 217], "_coeffexpvalueerror": 83, "_get_coeff_exp": 83, "_check_anteced": 83, "_check_antecedents_1": 83, "mt": 83, "_check_antecedents_invers": 83, "anteced": [83, 214], "_condsimp": 83, "hoc": 83, "simp": [83, 124, 182], "_dummi": 83, "_dummy_": 83, "_eval_cond": 83, "_expon": 83, "_find_splitting_point": 83, "fsp": 83, "_flip_g": 83, "_function": 83, "_guess_expans": 83, "sensibl": [83, 85], "_inflate_fox_h": 83, "_inflate_g": 83, "_int0oo": 83, "_int0oo_1": 83, "_int_invers": 83, "_is_analyt": 83, "almost": [83, 92, 100, 174, 193, 194, 198, 203, 204, 223, 227, 241, 242, 245, 278], "_meijerint_definite_2": 83, "trigexpand": 83, "_meijerint_definite_3": 83, "_meijerint_definite_4": 83, "only_doubl": 83, "_meijerint_indefinite_1": 83, "_mul_arg": 83, "_my_principal_branch": 83, "full_pb": 83, "nearer": 83, "superflu": 83, "opaqu": [83, 207], "fac": 83, "_rewrite_invers": 83, "costli": [83, 126, 280], "tx": [83, 282], "happili": [85, 231], "nonelementari": 85, "mellin_transform": 85, "bilater": 85, "laplac": [85, 105, 106, 108, 227], "mellintransform": 85, "integraltransform": 85, "nocond": 85, "inverse_mellin_transform": 85, "laplace_transform": [85, 108], "fourier_transform": 85, "hankel_transform": 85, "inverse_hankel_transform": 85, "suitabl": [85, 91, 100, 192, 195, 197, 200, 202, 207, 217, 220, 223, 226, 228, 277], "inversemellintransform": 85, "attemp": 85, "laplacetransform": 85, "inverse_laplace_transform": 85, "singularit": [85, 136], "inverselaplacetransform": 85, "_fast_inverse_laplac": 85, "rootsum": [85, 203, 209], "fouriertransform": 85, "_fourier_transform": 85, "inverse_fourier_transform": 85, "sine_transform": 85, "inverse_sine_transform": 85, "cosine_transform": 85, "inverse_cosine_transform": 85, "bixk": 85, "inversefouriertransform": 85, "sinetransform": 85, "inversesinetransform": 85, "cosinetransform": 85, "inversecosinetransform": 85, "hankeltransform": 85, "ht": 85, "inversehankeltransform": 85, "_compute_transform": 85, "_as_integr": 85, "integraltransformerror": 85, "_name": 85, "_collapse_extra": 85, "needev": 85, "function_vari": 85, "transform_vari": 85, "lazard": [85, 200, 203], "rioboo": 85, "trager": 85, "horowitz": 85, "ostrogradski": 85, "ratint": 85, "rationaltool": [85, 203], "ratint_logpart": 85, "ratint_ratpart": 85, "r534": 85, "bronstein": [85, 201, 203, 209, 225], "verlag": [85, 201], "deg": [85, 106, 122, 195, 200, 202, 203], "q_i": [85, 118, 136], "_t": [85, 122, 125, 139, 172, 181, 182, 186, 217, 227], "trigintegr": 85, "trigonometri": 85, "r535": 85, "integration_techniqu": 85, "deltaintegr": 85, "couldn": 85, "didn": [85, 94, 136], "singularityintegr": 85, "risch_integr": 85, "nonelementaryintegr": 85, "proven": [85, 98, 258, 276], "handle_first": 85, "separate_integr": 85, "rewrite_complex": 85, "forthcom": 85, "5109": 85, "outer": [85, 119, 137, 139, 155, 160, 161, 182, 184, 186, 191, 209, 215, 231, 252, 255, 256], "pop": [85, 220], "manualintegr": 85, "integral_step": 85, "student": [85, 216, 220, 227], "_i": [85, 172, 177, 204], "namedtupl": 85, "substep": 85, "sympy_gamma": 85, "app": 85, "intstep": 85, "urul": 85, "u_var": 85, "_u": [85, 172], "u_func": 85, "arctanrul": 85, "trigrul": 85, "rewriterul": 85, "addrul": 85, "powerrul": 85, "constanttimesrul": 85, "constantrul": 85, "norman": 85, "slowest": [85, 99], "retri": [85, 98], "degree_offset": 85, "unnecessary_permut": 85, "_try_heurisch": 85, "manuel": [85, 212], "poor": [85, 99], "man": [85, 201], "airi": [85, 223], "whittak": 85, "r536": 85, "sop": [85, 88], "cafe": 85, "pmint": 85, "r537": 85, "gedd": [85, 201], "stefanu": 85, "217": [85, 201], "r538": 85, "davenport": [85, 200, 201], "eurocam": 85, "lnc": [85, 201, 225], "157": [85, 98, 102, 201], "r539": 85, "iii": [85, 207, 223], "sigsam": 85, "bulletin": 85, "1982": [85, 192], "r540": 85, "transact": [85, 201], "1985": [85, 117, 138, 182, 252], "356": [85, 202, 225], "362": 85, "lookup": [85, 94, 98, 217], "huge": [85, 98, 203, 243], "entail": 85, "delic": [85, 194], "albeit": [85, 256], "mimic": [85, 86, 187, 246], "moder": 85, "irrespect": [85, 220, 223, 248], "line_integr": 85, "as_sum": 85, "subinterv": 85, "trapezoid": [85, 94, 227], "730": 85, "809": 85, "decai": 85, "r541": 85, "riemann_sum": 85, "r542": 85, "cauchy_principal_valu": 85, "r543": 85, "cauchyprincipalvalu": 85, "int_a": 85, "uvar": 85, "ui": [85, 98, 224], "3aissu": 85, "3aopen": 85, "3aintegr": 85, "gauss_legendr": 85, "n_digit": 85, "legendr": [85, 98, 203, 207, 220], "r544": 85, "w_i": [85, 141, 203, 223], "7746": 85, "55556": 85, "88889": 85, "86114": 85, "33998": 85, "34785": 85, "65215": 85, "gauss_laguerr": 85, "gauss_gen_laguerr": 85, "gauss_hermit": 85, "gauss_chebyshev_t": 85, "gauss_chebyshev_u": 85, "gauss_jacobi": 85, "gauss_lobatto": 85, "gaussian_quadratur": 85, "r545": 85, "fsu": 85, "jburkardt": 85, "cpp_src": 85, "legendre_rul": 85, "laguerr": [85, 203, 207], "r546": 85, "41577": 85, "2943": 85, "2899": 85, "71109": 85, "27852": 85, "010389": 85, "22285": 85, "1889": 85, "9927": 85, "7751": 85, "8375": 85, "983": 85, "45896": 85, "417": [85, 219], "11337": 85, "010399": 85, "00026102": 85, "9855e": 85, "93laguerre_quadratur": 85, "r547": 85, "laguerre_rul": 85, "hermit": [85, 89, 94, 95, 196, 202, 203, 207, 227], "r548": 85, "2247": 85, "29541": 85, "1816": 85, "3506": 85, "3358": 85, "43608": 85, "00453": 85, "15707": 85, "72463": 85, "hermite_quadratur": 85, "r549": 85, "hermite_rul": 85, "r550": 85, "gen_hermite_rul": 85, "r551": 85, "19016": 85, "7845": 85, "5253": 85, "4493": 85, "31413": 85, "00906": 85, "97851": 85, "9904": 85, "3193": 85, "712": 85, "53087": 85, "67721": 85, "11895": 85, "0023152": 85, "r552": 85, "gen_laguerre_rul": 85, "r553": 85, "86602": 85, "0472": 85, "96593": 85, "70711": 85, "25882": 85, "5236": 85, "93gauss_quadratur": 85, "r554": 85, "chebyshev1_rul": 85, "r555": 85, "3927": 85, "7854": 85, "90097": 85, "62349": 85, "22252": 85, "084489": 85, "27433": 85, "42658": 85, "r556": 85, "chebyshev2_rul": 85, "jacobi": [85, 98, 110, 203, 207], "r557": 85, "7063": 85, "0973": 85, "33795": 85, "87174": 85, "5917": 85, "2093": 85, "050584": 85, "22169": 85, "39439": 85, "93jacobi_quadratur": 85, "r558": 85, "jacobi_rul": 85, "r559": 85, "gegenbauer_rul": 85, "lobatto": 85, "r560": 85, "3333": 85, "44721": 85, "16667": 85, "83333": 85, "93lobatto_rul": 85, "r561": 85, "page_888": 85, "intpoli": 85, "chin": 85, "al": [85, 122, 151, 200, 216, 219], "2015": [85, 226], "unit_cub": 85, "polytope_integr": 85, "eric": [85, 201], "jean": 85, "lasserr": 85, "sukumar": 85, "nonconvex": 85, "967": 85, "981": 85, "dilbert": 85, "engr": 85, "ucdavi": 85, "suku": 85, "max_degre": [85, 203], "689": [85, 102], "21875": 85, "octahedron": 85, "trivari": 85, "enable_automatic_int_sympif": 86, "enable_automatic_symbol": 86, "init_ipython_sess": 86, "argv": [86, 238], "init_python_sess": 86, "use_latex": [86, 187, 283], "quiet": 86, "str_printer": [86, 187], "latex_print": [86, 187], "pylab": 86, "stringifi": [86, 187], "sstrrepr": [86, 187, 207], "lexograph": [86, 187], "gui": [86, 187], "statu": 86, "\u03b8": [86, 116, 144, 226], "int_to_integ": 86, "decistmt": 86, "f401": 86, "0x12": 86, "num_column": [86, 187, 207, 223], "no_glob": [86, 187], "ip": [86, 160, 166, 187], "forecolor": [86, 187], "backcolor": [86, 187], "fontsiz": [86, 187, 207], "10pt": [86, 187, 207], "latex_mod": [86, 187], "print_builtin": [86, 187], "interactiveconsol": [86, 187], "preambl": [86, 187, 207], "handwritten": [86, 187], "ctan": [86, 187], "pkg": [86, 187], "dvi": [86, 187, 207], "foreground": [86, 187], "black": [86, 157, 168, 187, 207, 283], "white": [86, 187, 227], "documentclass": [86, 187, 207], "dpi": [86, 187], "u03b8": 86, "dvip": 86, "r562": 86, "r563": 86, "the_68_standard_colors_known_to_dvip": 86, "config": 86, "root_system": 87, "rootsystem": 87, "cartantyp": 87, "cartan": 87, "subalgebra": 87, "adjoint": [87, 89, 94, 149, 153], "hyperplan": 87, "k_y": 87, "r564": 87, "r565": 87, "humphrei": 87, "add_as_root": 87, "root1": 87, "root2": 87, "add_simple_root": 87, "newroot": 87, "all_root": [87, 98, 203], "cartan_matrix": 87, "dynkin_diagram": 87, "dynkin": 87, "root_spac": 87, "simple_root": 87, "type_a": 87, "typea": 87, "basic_root": 87, "iin": 87, "jth": [87, 226], "ijth": 87, "cartan_typ": 87, "highest_root": 87, "lie_algebra": 87, "positive_root": 87, "type_b": 87, "typeb": 87, "b4": 87, "b3": [87, 122, 139, 182, 258], "type_c": 87, "typec": 87, "c4": [87, 89, 91, 223], "type_d": 87, "d4": [87, 227], "dmension": 87, "type_": 87, "e6": 87, "type_f": 87, "typef": 87, "f_4": [87, 118], "f4": [87, 193], "type_g": 87, "typeg": 87, "weyl_group": 87, "weylgroup": 87, "semisimpl": 87, "isometri": 87, "coxet": 87, "coxeter_diagram": 87, "undirect": [87, 245], "s_is_j": 87, "delete_doubl": 87, "element_ord": 87, "weylelt": 87, "group_nam": 87, "group_ord": 87, "192": 87, "matrix_form": 87, "cartantype_gener": 87, "standard_cartan": 87, "dynkindiagram": 87, "cartanmatrix": 87, "sopform": 88, "minterm": 88, "dontcar": 88, "simplified_pair": 88, "combo": 88, "outcom": [88, 175, 227], "posform": 88, "r566": 88, "quin": 88, "mccluskey_algorithm": 88, "r567": 88, "27t": 88, "care_term": 88, "r568": 88, "r569": 88, "anfform": 88, "truthvalu": 88, "anf": 88, "funciton": 88, "zhegalkin": 88, "r570": 88, "zhegalkin_polynomi": 88, "booleantru": 88, "doubt": [88, 122], "greet": 88, "booleanfals": 88, "universalset": [88, 215], "nand": 88, "xnor": 88, "gate": [88, 152, 157, 159, 165, 166, 168, 269], "perspect": [88, 98, 108, 177, 193, 240, 257, 261], "multiplex": 88, "disjunct": 88, "to_anf": 88, "oplu": [88, 156], "to_cnf": 88, "cnf": 88, "mccluskei": 88, "to_dnf": 88, "to_nnf": 88, "nnf": 88, "is_anf": 88, "is_cnf": 88, "is_dnf": 88, "is_nnf": 88, "gateinputcount": 88, "simplify_log": 88, "fewest": [88, 166], "conver": 88, "r571": 88, "bool_map": 88, "bool1": 88, "bool2": 88, "function1": 88, "function2": 88, "distribute_and_over_or": 88, "distribute_or_over_and": 88, "distribute_xor_over_and": 88, "eliminate_impl": 88, "truth_tabl": 88, "ibin": [88, 245], "integer_to_term": 88, "0001111011": [88, 245], "1101111000": [88, 245], "term_to_integ": 88, "bool_maxterm": 88, "maxterm": 88, "complement": [88, 91, 203, 215, 226], "r572": 88, "canonical_normal_form": 88, "indexing_maxterm": 88, "bool_minterm": 88, "patter": 88, "r573": 88, "indexing_minterm": 88, "bool_monomi": 88, "enumar": 88, "anf_coeff": 88, "to_int_repr": 88, "all_model": 88, "unsatisfi": 88, "use_model": 88, "unsat": 88, "matrixbas": [89, 90, 91, 94, 196], "dirac": [89, 94, 106, 110, 111, 170, 207], "__abs__": [89, 198], "__add__": [89, 198, 202], "shapeerror": [89, 91, 94], "__len__": 89, "96": [89, 94, 227], "mismatch": 89, "matrix_multiply_elementwis": [89, 94], "applyfunc": [89, 90, 94, 130, 182, 228], "col": [89, 91, 94, 97, 108, 139, 196, 202, 280], "col_del": [89, 94, 280], "col_join": [89, 94, 124], "col_insert": [89, 280], "row_insert": [89, 280], "row_join": [89, 94, 124], "companion": [89, 91], "c0": [89, 91, 214, 223, 225], "sparsematrix": [89, 94, 97, 208, 219], "diag": [89, 91, 94, 97, 139, 196, 233, 280], "immutablematrix": [89, 90, 91, 108, 182, 227, 252, 255, 280], "blockmatrix": [89, 91, 94], "sparsetool": [89, 97], "kth": [89, 98], "rowslist": [89, 196], "colslist": 89, "submatrix": [89, 94, 200, 227], "get_diag_block": [89, 91, 94], "decoupl": 89, "hstack": [89, 196], "is_anti_symmetr": 89, "is_diagon": [89, 94], "is_low": [89, 196], "is_upp": [89, 196], "matrixeigen": [89, 94], "is_diagonaliz": [89, 94], "is_hermitian": [89, 94], "is_lower_hessenberg": 89, "hessenberg": [89, 94], "superdiagon": 89, "is_upper_hessenberg": 89, "is_strongly_diagonally_domin": 89, "strongli": [89, 94, 196, 245], "m1": [89, 94, 98, 101, 102, 143, 151, 169, 171, 175, 220, 223, 228, 233], "subdiagon": [89, 94], "is_weakly_diagonally_domin": 89, "weakli": [89, 245], "vacuou": 89, "jordan_block": [89, 94], "eigenv": [89, 94, 122, 124, 139, 166, 278, 280], "rectangular": [89, 94, 215, 226, 256], "r574": 89, "jordan_matrix": [89, 223], "dotprodsimp": 89, "blowup": 89, "multiply_elementwis": [89, 94], "hadamard": [89, 91, 94, 156, 157, 168, 207], "elementwis": [89, 91, 94, 228], "300": [89, 94, 98, 101, 188, 193, 204, 261], "bmatrix": [89, 91, 94, 126, 134, 135, 136, 137, 182, 191, 220], "a_0": [89, 94, 210, 220, 223, 228, 284], "vdot": [89, 91, 94, 177], "alpha_0": 89, "alpha_1": [89, 98, 202], "alpha_": [89, 192], "permute_col": 89, "permute_row": 89, "mulsimp": 89, "rmultipli": 89, "__rmul__": 89, "rot90": 89, "anticlockwis": 89, "row_del": [89, 94, 280], "todod": 89, "tolist": [89, 228], "vec": [89, 94, 116, 139, 182, 192, 200, 258, 259, 261], "vech": 89, "check_symmetri": 89, "vstack": [89, 196], "wilkinson": 89, "w_": [89, 202], "wminu": 89, "wplu": 89, "r575": 89, "mathwork": [89, 106, 227, 280], "cleve": 89, "04": [89, 227], "r576": 89, "claredon": 89, "oxford": 89, "662": 89, "intm": 89, "mutabledensematrix": [90, 196, 248], "densematrix": [90, 94], "ldldecomposit": [90, 94], "ldl": [90, 94], "choleski": [90, 94], "ludecomposit": [90, 91, 94, 280], "qrdecomposit": [90, 94], "as_immut": 90, "lower_triangular_solv": [90, 94], "upper_triangular_solv": [90, 94], "gauss_jordan_solv": [90, 94], "cholesky_solv": [90, 94], "diagonal_solv": [90, 94], "ldlsolv": [90, 94], "lusolv": [90, 94, 116, 118, 136, 140, 225, 280], "qrsolv": [90, 94], "pinv_solv": [90, 94], "permutedim": [91, 228, 229], "arraytensorproduct": [91, 229], "from_index_summ": 91, "first_index": 91, "last_index": 91, "longrightarrow": 91, "matpow": [91, 207], "hadamard_product": 91, "aka": 91, "hadamardproduct": [91, 207], "hadamardpow": [91, 207], "ddot": [91, 94, 126, 135, 187, 190, 207, 284], "functionmatrix": 91, "lazili": [91, 213], "342923500": 91, "permutationmatrix": [91, 94], "matrixpermut": 91, "companionmatrix": 91, "matrixset": [91, 215], "submatric": [91, 94, 196, 227], "block_collaps": 91, "dat": [91, 245], "irregular": [91, 94], "ldudecomposit": 91, "ldu": 91, "2x2": [91, 97, 141, 196, 223], "noninvertiblematrixerror": [91, 280], "udldecomposit": 91, "lu": [91, 94, 196, 201], "udl": 91, "schur": 91, "penros": [91, 94], "pinv": [91, 94], "r577": 91, "schur_compl": 91, "blockdiagmatrix": [91, 94], "diag_block": 91, "alias": [92, 198], "bridg": [92, 104, 122, 246], "tension": 92, "gramschmidt": 94, "m2": [94, 98, 101, 102, 119, 143, 151, 169, 171, 175, 202, 220, 223, 228, 233], "126": [94, 98, 206], "150": [94, 108, 220], "v3": [94, 182, 186, 258], "glue": 94, "m3": [94, 151, 220, 228], "adj": 94, "qr": 94, "cheat": 94, "soln": 94, "gram": [94, 177, 179], "schmidt": 94, "out1": 94, "out2": 94, "1692": 94, "1551": 94, "423": 94, "6707": 94, "spot": [94, 140], "eigenvector": [94, 122, 166, 167, 192], "nullspac": [94, 196], "matrixdetermin": 94, "adjug": 94, "berkowitz": 94, "bareiss": 94, "cofactor_matrix": 94, "charpoli": [94, 196, 280], "_simplifi": 94, "purepoli": [94, 203], "samuelson": 94, "minor_submatrix": 94, "iszerofunc": [94, 280], "barei": 94, "det_lu": 94, "functiontyp": 94, "_iszero": [94, 280], "_is_zero_after_expand_mul": 94, "unrecogn": 94, "nonsquarematrixerror": [94, 223], "i3": [94, 109, 122, 139, 233], "perman": 94, "ryser": 94, "450": 94, "r578": 94, "prof": 94, "ben": 94, "berkelei": 94, "bernd": 94, "ban275": 94, "r579": 94, "permanent_": 94, "r580": 94, "r581": 94, "0904": 94, "3251": 94, "matrixreduct": 94, "echelon_form": [94, 280], "with_pivot": 94, "echelon": [94, 196, 226, 280], "elementary_col_op": 94, "kn": [94, 101, 102], "col1": 94, "col2": 94, "km": [94, 98, 112, 117, 124, 126, 129, 130, 134, 136, 139, 178], "elementary_row_op": 94, "row1": 94, "row2": 94, "is_echelon": [94, 280], "rref": [94, 196], "pivot": [94, 196, 280], "normalize_last": 94, "rref_matrix": [94, 196], "rref_pivot": [94, 196], "301369863013699": 94, "712328767123288": 94, "noramlize_last": 94, "matrixsubspac": 94, "subspac": [94, 202], "columnspac": [94, 196], "rowspac": [94, 196], "orthonorm": [94, 139, 167, 191, 256], "rankcheck": 94, "r582": 94, "93schmidt_process": 94, "eigen": [94, 148], "bidiagonal_decomposit": 94, "ubv": 94, "bidiagon": 94, "hang": [94, 126, 130, 223, 224], "bidiagn": 94, "r583": 94, "golub": 94, "van": [94, 98, 201], "loan": 94, "r584": 94, "vslobodi": 94, "household": 94, "r585": 94, "r586": 94, "reals_onli": 94, "throw": [94, 100, 122, 202, 220, 226], "error_when_incomplet": 94, "eig": [94, 122, 139], "matrixerror": 94, "got": [94, 194, 197, 200, 203, 206, 238, 239, 245, 246, 276, 278, 279], "eigenvect": [94, 122, 139, 166, 280], "tidi": 94, "artifact": 94, "ret": 94, "eigenspac": 94, "rag": 94, "a_3": 94, "diagonaliz": [94, 280], "is_indefinit": 94, "semidefinit": [94, 227], "plot3d": [94, 193], "is_positive_definit": 94, "is_positive_semidefinit": 94, "hire": [94, 101, 102, 106, 193, 210], "is_negative_definit": 94, "is_negative_semidefinit": 94, "defer": [94, 249], "r587": 94, "definiteness_of_a_matrix": 94, "r588": 94, "positivedefinitematrix": 94, "r589": 94, "amer": 94, "259": 94, "264": [94, 225], "r590": 94, "r591": 94, "r592": 94, "r593": 94, "r594": 94, "r595": 94, "r596": 94, "r597": 94, "r598": 94, "r599": 94, "r600": 94, "r601": 94, "jordan_form": 94, "calc_transform": 94, "left_eigenvect": 94, "singular_valu": 94, "condition_numb": 94, "matrixcalculu": 94, "hessian": 94, "wronskian": [94, 223], "simpfunc": 94, "permutebkwd": 94, "permutefwd": 94, "lucombin": 94, "defici": [94, 98, 226], "matrixi": 94, "ludecomposition_simpl": [94, 280], "ludecompositionff": 94, "pa": [94, 117, 119, 134, 137, 140], "r602": 94, "zhou": 94, "jeffrei": [94, 219], "frontier": [94, 215], "china": 94, "67": [94, 201], "2008": [94, 192, 201, 203, 207], "row_swap": 94, "compres": 94, "permute_backward": 94, "permute_forward": 94, "intiuit": 94, "lu_": 94, "_find_reasonable_pivot": 94, "lu_solv": [94, 196], "qr_solv": 94, "augument": 94, "167": 94, "158": [94, 102], "27261": 94, "30625": 94, "348": 94, "1914": 94, "6125": 94, "30589": 94, "198": 94, "1225": 94, "q_aug": 94, "r_aug": 94, "analytic_func": 94, "connected_compon": [94, 245], "connected_components_decomposit": 94, "relax": [94, 100], "3x1": 94, "1x3": 94, "conjugate_convent": 94, "dual": [94, 164, 170], "anti_symmetr": 94, "speak": [94, 202, 259], "freevar": 94, "underdetermin": [94, 225, 226], "free_var_index": 94, "tau0": [94, 226, 227], "tau1": 94, "taus_zero": 94, "sol_uniqu": 94, "r603": 94, "gaussian_elimin": 94, "try_block_diag": 94, "inverse_g": [94, 280], "inverse_lu": [94, 280], "inverse_adj": [94, 280], "inverse_ch": 94, "inverse_ldl": 94, "inverse_qr": 94, "inv_mod": 94, "cof": 94, "inverse_block": 94, "blockwis": 94, "ntop": 94, "key2bound": 94, "key2ij": 94, "reciproc": [94, 227, 284], "fro": 94, "sing": 94, "spectral": 94, "rd": [94, 122, 207], "pseudoinvers": 94, "r604": 94, "penrose_pseudoinvers": 94, "arbitrary_matrix": 94, "wn_m": 94, "_w0_0": 94, "_w1_0": 94, "_w2_0": 94, "59": [94, 223], "r605": 94, "obtaining_all_solutions_of_a_linear_system": 94, "print_nonzero": [94, 245], "symb": [94, 207], "rank_decomposit": 94, "r606": 94, "rank_factor": 94, "r607": 94, "piziak": 94, "odel": 94, "magazin": 94, "193": [94, 106], "2307": 94, "2690882": 94, "singular_value_decomposit": 94, "condens": [94, 226], "orthogn": 94, "v_aug": 94, "u_aug": 94, "s_aug": 94, "gj": 94, "solve_least_squar": 94, "strongly_connected_compon": [94, 196, 245], "62": [94, 200], "strongly_connected_components_decomposit": 94, "rowstart": 94, "rowend": 94, "rowsep": 94, "colsep": 94, "strprinter": [94, 187], "upper_hessenberg_decomposit": 94, "213": 94, "134": 94, "216": [94, 200], "hessenbergdecomposit": 94, "jordan_cel": 94, "varlist": 94, "r608": 94, "hessian_matrix": 94, "vlist": 94, "r609": 94, "casoratian": 94, "kernel": [94, 194, 200, 202, 225], "vanish": [94, 172, 200, 203, 206, 223, 252], "rsolve_hyp": [94, 225], "randmatrix": 94, "percent": [94, 226], "prng": 94, "percentag": [94, 98], "46": [94, 101, 177, 206, 225, 227], "list2numpi": 94, "dtype": [94, 99, 194, 196, 197, 198, 207, 246], "matrix2numpi": 94, "symarrai": 94, "ndarrai": [94, 227, 233, 239], "prefix_i1_i2_": 94, "_2": [94, 116, 181, 182, 192, 223], "a_0_0": 94, "a_0_1": 94, "a_0_2": 94, "a_1_0": 94, "a_1_1": 94, "a_1_2": 94, "a_0_0_0": 94, "a_0_0_1": 94, "a_0_1_0": 94, "a_0_1_1": 94, "a_0_2_0": 94, "a_0_2_1": 94, "a_1_0_0": 94, "a_1_0_1": 94, "a_1_1_0": 94, "a_1_1_1": 94, "a_1_2_0": 94, "a_1_2_1": 94, "rot_axis1": 94, "rot_axis2": 94, "rot_axis3": 94, "a2idx": 94, "normalform": [95, 196], "hermite_normal_form": [95, 196, 202], "check_rank": [95, 196], "hnf": [95, 196, 202], "explos": [95, 196], "believ": [95, 98, 196], "dmdomainerror": [95, 196], "dmshapeerror": [95, 196], "r610": 95, "cohen": [95, 196, 201, 202], "mutablesparsematrix": 96, "_doktocsr": 97, "csr": 97, "ja": 97, "ia": 97, "_csrtodok": 97, "dok": 97, "1x1": [97, 227], "vert": [97, 188, 191, 261], "saw": [97, 197, 284], "dynam": [98, 105, 106, 108, 112, 114, 117, 118, 121, 124, 132, 134, 135, 136, 137, 138, 139, 140, 181, 182, 184, 186, 190, 191, 242, 243, 252], "eratosthen": 98, "_reset": [98, 203], "_list": 98, "extend_to_no": 98, "mobiusrang": 98, "primerang": 98, "10th": 98, "totientrang": 98, "1e11": 98, "50000": 98, "primal": [98, 194], "1299709": 98, "r611": 98, "prime_number_theorem": 98, "table_of_": 98, "cf": [98, 200], "28x": 98, "2c_x_": 98, "2f_log_x": 98, "2c_and_li": 98, "r612": 98, "approximations_for_the_nth_prime_numb": 98, "r613": 98, "27_number": 98, "arr1": 98, "arr2": 98, "prevprim": 98, "9th": 98, "nextprim": 98, "occupi": [98, 172, 233], "conjectur": [98, 200], "twin": 98, "bertrand": 98, "brocard": 98, "primori": 98, "r614": 98, "r615": 98, "utm": 98, "postul": 98, "r616": 98, "s_postul": 98, "primefactor": 98, "argu": 98, "cycle_length": 98, "nmax": 98, "brent": [98, 242], "floyd": 98, "cycle_detect": 98, "17737": 98, "20000": 98, "compositepi": 98, "831": 98, "smoothness_p": 98, "sm": [98, 122, 139, 194], "psm": 98, "govern": 98, "10431": 98, "annot": [98, 193, 207], "21477639576571": 98, "4410317": 98, "1787": 98, "4869863": 98, "2434931": 98, "multiplicity_in_factori": 98, "nfac": 98, "52818775009509558395695966887": 98, "is2pow": 98, "pollard_rho": 98, "1234": [98, 220], "max_step": 98, "pollard": [98, 223], "leader": 98, "16843009": 98, "32767": 98, "4i": 98, "3i": 98, "2489": 98, "1482": 98, "285": [98, 225], "leadup": 98, "r617": 98, "crandal": 98, "carl": [98, 242], "pomer": [98, 242], "229": 98, "231": [98, 182], "pollard_pm1": 98, "likelihood": 98, "1009": 98, "am": [98, 177, 207], "255": 98, "crack": 98, "617": 98, "1786": 98, "worst": [98, 203, 223], "scenario": [98, 227], "divisisor": 98, "realist": 98, "r618": 98, "236": 98, "r619": 98, "washington": 98, "2007": [98, 138, 242], "spring": [98, 113, 116, 117, 122, 127], "ent": 98, "node81": 98, "r620": 98, "toronto": 98, "yuvalf": 98, "use_ecm": 98, "65537": [98, 206], "1407633717262338957430697921446883": 98, "991": 98, "202916782076162456022877024859": 98, "4200": 98, "1764": 98, "toggl": [98, 193], "12345678910111213141516": 98, "2507191691": 98, "1231026625769": 98, "factorrat": 98, "rat": 98, "987": 98, "10000000001": 98, "99009901": 98, "divisor_count": 98, "tim": [98, 245], "stackoverflow": [98, 245, 248], "1010381": 98, "proper_divisor": 98, "proper_divisor_count": 98, "udivisor": 98, "udivisor_count": 98, "r621": 98, "unitary_divisor": 98, "r622": 98, "unitarydivisor": 98, "r623": 98, "unitarydivisorfunct": 98, "antidivisor": 98, "r624": 98, "margin": [98, 108, 193, 227], "antidivisor_count": 98, "a066272": 98, "a066272a": 98, "r625": 98, "r626": 98, "27s_totient_funct": 98, "r627": 98, "totientfunct": 98, "r628": 98, "carmichael_funct": 98, "r629": 98, "carmichaelfunct": 98, "sigma_k": 98, "m_i": [98, 192, 200], "m_ik": 98, "r630": 98, "divisor_funct": 98, "udivisor_sigma": 98, "47450": 98, "152": 98, "r631": 98, "core_t": 98, "core_2": 98, "squarefre": [98, 202], "cubefre": 98, "9424": 98, "1178": 98, "379238": 98, "square_factor": [98, 220], "r632": 98, "free_integ": 98, "squarefree_cor": 98, "primenu": 98, "r633": 98, "primeomega": 98, "r634": 98, "mersenne_prime_expon": 98, "mersenn": 98, "4423": 98, "r635": 98, "perfectnumb": 98, "r636": 98, "perfect_numb": 98, "is_mersenne_prim": 98, "r637": 98, "mersenneprim": 98, "abund": 98, "is_abund": 98, "r638": 98, "abundantnumb": 98, "is_defici": 98, "r639": 98, "deficientnumb": 98, "is_amic": 98, "amic": 98, "220": [98, 203], "r640": 98, "amicable_numb": 98, "symmetric_residu": 98, "v_i": [98, 202, 225], "65": [98, 108, 200, 227], "639985": [98, 200], "912285": [98, 200], "954": 98, "gf_crt": [98, 200], "solve_congru": [98, 200], "programm": [98, 207], "galoistool": [98, 200], "crt1": 98, "4536": 98, "252": 98, "756": 98, "crt2": 98, "remainder_modulus_pair": 98, "mi": [98, 207], "k1": [98, 139, 170, 197, 198, 200], "k2": [98, 139, 197], "c_kn": 98, "binomial_coefficients_list": 98, "multinomial_coeffici": 98, "k_m": 98, "k_i": [98, 200, 217], "yann": 98, "laigl": 98, "chapui": 98, "permiss": [98, 192], "multinomial_coefficients_iter": 98, "_tupl": 98, "m53": 98, "partitions_": 98, "npartit": 98, "hardi": 98, "rademach": [98, 227], "r641": 98, "1958": [98, 192], "partitionfunctionp": 98, "is_euler_pseudoprim": 98, "pseudoprim": 98, "r642": 98, "euler_pseudoprim": 98, "prep": [98, 223, 224], "r643": 98, "mersenneforum": 98, "showpost": 98, "110896": 98, "mr": 98, "miller": 98, "rabin": 98, "wit": 98, "1373651": 98, "479001599": 98, "r644": 98, "135": 98, "138": 98, "93rabin_primality_test": 98, "deterministic_vari": 98, "is_lucas_prp": 98, "selfridg": 98, "377": 98, "1159": 98, "1829": 98, "3827": 98, "5459": 98, "5777": 98, "9071": 98, "9179": 98, "bailli": 98, "wagstaff": 98, "1980": [98, 245], "mpq": [98, 197], "lucaspseudoprim": 98, "a217120": 98, "lucas_pseudoprim": 98, "is_strong_lucas_prp": 98, "bpsw": 98, "10877": 98, "16109": 98, "18971": 98, "a217255": 98, "psw_primality_test": 98, "is_extra_strong_lucas_prp": 98, "grantham": 98, "mo": [98, 139, 207], "jone": [98, 144], "preprint": 98, "a217719": 98, "perl": 98, "counterexampl": [98, 284], "989": 98, "3239": 98, "jon": 98, "mcom": 98, "234": 98, "01197": 98, "1e3": 98, "1e23": [98, 248], "near_int": 98, "strong_pseudoprim": 98, "is_gaussian_prim": 98, "r645": 98, "gaussian_prim": 98, "residue_ntheori": 98, "n_order": 98, "cong": [98, 200], "primitive_root": [98, 202], "r646": 98, "stein": [98, 223], "r647": 98, "hackman": 98, "sqrt_mod": 98, "sqrt_mod_it": 98, "quadratic_residu": 98, "nthroot_mod": 98, "109": [98, 201, 220], "is_nthpow_residu": 98, "r648": 98, "is_quad_residu": 98, "legendre_symbol": 98, "genfrac": 98, "nonresidu": 98, "alpha_2": [98, 202], "alpha_k": 98, "discrete_log": 98, "prime_ord": 98, "giant": [98, 226], "pohlig": 98, "r649": 98, "discretelogarithm": 98, "r650": 98, "cryptographi": [98, 263, 270], "menez": 98, "vanston": 98, "continued_fract": 98, "continued_fraction_period": 98, "continued_fraction_reduc": 98, "continued_fraction_converg": 98, "continued_fraction_iter": 98, "106": 98, "103993": 98, "33102": 98, "104348": 98, "33215": 98, "208341": 98, "66317": 98, "292": 98, "r651": 98, "discrimin": [98, 198, 200, 202, 203], "r652": 98, "periodic_continued_fract": 98, "r653": 98, "rosen": 98, "379": [98, 203], "381": 98, "januari": 98, "1992": [98, 201, 225], "233": [98, 201, 223], "718281835": 98, "287": 98, "count_digit": 98, "1111339": 98, "0xfa": 98, "c77": 98, "is_palindrom": [98, 245], "palindrom": 98, "0o121": 98, "oct": 98, "0o171": 98, "fermion": [98, 172], "r654": 98, "b6bius_funct": 98, "r655": 98, "thoma": [98, 138], "koshi": 98, "egyptian_fract": 98, "greedi": [98, 200, 216, 219], "egyptian": 98, "r656": 98, "jewett": 98, "takenouchi": 98, "3192": 98, "1118": 98, "2580": 98, "sylvest": [98, 200], "r657": 98, "seldom": 98, "blow": 98, "doubli": 98, "exhibit": [98, 192, 202, 216], "singli": 98, "tendenc": 98, "r658": 98, "1921": 98, "golumb": 98, "1962": 98, "propos": 98, "bleicher": 98, "1972": 98, "r659": 98, "420": [98, 220], "140": 98, "574": 98, "2788": 98, "6460": 98, "11590": 98, "33062": 98, "113820": 98, "greedy_algorithm_for_egyptian_fract": 98, "ic": [98, 223], "uci": 98, "eppstein": 98, "numth": 98, "egypt": 98, "ami": 98, "ektf": 98, "hu": 98, "finalpdf": 98, "ami_42_from129to134": 98, "bbp_pi": 98, "pi_hex_digit": 98, "hex": 98, "3243f6a8885a30": 98, "324": [98, 201], "r660": 98, "numberworld": 98, "subexponenti": 98, "comfort": [98, 99], "15154262241479": 98, "15423094826093": 98, "799333555511111": 98, "809709509409109": 98, "888888877777777": 98, "914148152112161": 98, "factoris": [98, 197, 198, 223], "max_curv": 98, "lenstra": 98, "repeatedli": [98, 109, 239], "ecm_one_factor": 98, "pseudorandom": [98, 245], "25645121643901801": 98, "5394769": 98, "4753701529": 98, "9804659461513846513": 98, "4641991": 98, "2112166839943": 98, "7060005655815754299976961394452809": 98, "6988699669998001": 98, "1010203040506070809": 98, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 98, "2709077133180915240135586837960864768806330782747": 98, "248": 98, "prime_bound": 98, "error_term": 98, "siq": 98, "modn": 98, "mulipl": 98, "r661": 98, "semanticscholar": 98, "5c52": 98, "8a975c1405bd35c65993abf5a4edb667c1db": 98, "r662": 98, "rieselprim": 98, "ziki": 98, "initializing_quadratic_siev": 98, "5915587277": 98, "3267000013": 98, "facilit": [99, 132, 143, 189, 238], "000507214304613640": 99, "microsecond": 99, "000507214304614": 99, "hundr": [99, 278], "nanosecond": 99, "84147098": [99, 246, 273], "84119981": 99, "84092844": 99, "05426074": 99, "05433146": 99, "05440211": 99, "nano": 99, "manufactur": 99, "asnumpi": 99, "compliat": 99, "jnp": 99, "asarrai": 99, "84147096": 99, "8411998": 99, "05426079": 99, "05433151": 99, "autowrap": [99, 232, 240, 244, 271], "implemented_funct": [99, 239, 246], "effort": [99, 198, 200], "50u": 99, "1u": 99, "10n": 99, "sympy_pars": 100, "local_dict": 100, "lambda_not": 100, "repeated_decim": 100, "auto_numb": 100, "factorial_not": 100, "global_dict": 100, "standard_transform": 100, "implicit_multiplication_appl": 100, "implicit_appl": 100, "implicit_multipl": 100, "convert_equals_sign": 100, "function_exponenti": 100, "stringify_expr": 100, "eval_expr": 100, "name_dict": 100, "fullform": 100, "setdelai": 100, "datatyp": [100, 198, 207, 240], "split_symbol": 100, "split_symbols_custom": 100, "_token_splitt": 100, "can_split": 100, "unsplitt": 100, "10sin": 100, "3xyz": 100, "2111": 100, "latex2sympi": 100, "typograph": 100, "stricter": 100, "liber": [100, 112, 278], "618": 100, "latexparsingerror": 100, "sym_expr": 100, "sympyexpress": 100, "source_cod": 100, "return_expr": 100, "definiton": 100, "src2": 100, "convert_to_expr": 100, "convert_to_c": 100, "src3": 100, "convert_to_python": 100, "src_code": 100, "filenam": [100, 207, 238, 239, 240, 248], "convert_to_fortran": 100, "continuum_mechan": [101, 102, 104], "elastic_modulu": 101, "second_mo": 101, "base_char": 101, "withstand": [101, 102], "character": [101, 102, 188, 191, 214, 227, 233, 261], "profil": 101, "shear": [101, 102], "downward": [101, 102, 104, 202], "apply_load": [101, 102, 104], "bc_deflect": [101, 102], "boundary_condit": 101, "solve_for_reaction_load": [101, 102], "shear_forc": [101, 102], "bending_mo": [101, 102], "reaction": [101, 102, 104], "upward": [101, 202], "reaction_load": [101, 102, 104], "applied_load": 101, "nm": [101, 102, 170, 228], "pointload": [101, 102], "ramp": [101, 102], "parabol": 101, "apply_support": [101, 104], "loc": 101, "freedom": [101, 116, 117, 123, 126, 132, 227, 269], "roller": [101, 102, 104], "r_10": 101, "r_30": 101, "4000": [101, 102], "bc_slope": [101, 102], "cross_sect": 101, "elast": [101, 102], "12000": 101, "draw": [101, 152, 207, 227], "pictori": 101, "positv": 101, "ild_moment": 101, "ild_react": 101, "ild_shear": 101, "axial": [101, 141], "hing": [101, 102, 133], "cantilev": [101, 102], "inertia": [101, 102, 111, 112, 113, 115, 121, 122, 124, 125, 127, 129, 130, 131, 132, 139, 182, 190, 191, 202, 269], "666666666666667": [101, 102], "max_bmoment": 101, "max_deflect": 101, "max_shear_forc": 101, "plot_bending_mo": [101, 102], "gpa": 101, "400": [101, 193, 203], "13750": 101, "31250": 101, "plot_deflect": [101, 102], "00138541666666667": 101, "86458333333333e": 101, "04166666666667e": 101, "20833333333333e": 101, "51041666666667e": 101, "plot_ild_mo": 101, "solve_for_ild_mo": 101, "1kn": 101, "r_0": 101, "r_8": 101, "solve_for_ild_react": 101, "plot_ild_react": 101, "5kn": 101, "r_7": 101, "plotgrid": 101, "plot_ild_shear": 101, "solve_for_ild_shear": 101, "plot_loading_result": [101, 102], "subplot": [101, 193], "plot_shear_forc": [101, 102], "plot_shear_stress": 101, "stress": 101, "6875": 101, "2500": 101, "15625": [101, 179], "plot_slop": [101, 102], "59375e": 101, "125e": 101, "08333333333333e": 101, "0001953125": 101, "point_cflexur": 101, "overhang": [101, 102], "10kn": 101, "20kn": [101, 102], "3kn": 101, "remove_load": [101, 104, 113], "shear_stress": 101, "beam3d": 101, "shear_modulu": 101, "apply_moment_load": 101, "solve_slope_deflect": 101, "r663": 101, "home": [101, 202, 220, 227, 238], "aau": 101, "jc": 101, "femtesemest": 101, "beams3d": 101, "angular_deflect": 101, "depict": [101, 188, 226, 261], "angular": [101, 110, 113, 116, 119, 124, 125, 126, 127, 129, 131, 133, 136, 139, 141, 145, 146, 148, 151, 169, 173, 182, 186, 192], "axial_forc": 101, "axial_stress": 101, "load_vector": 101, "max_bending_mo": 101, "16000": 101, "495": 101, "10793": 101, "6400": 101, "301": [101, 217, 220], "560": 101, "2400": 101, "moment_load_vector": 101, "40000": 101, "4013": 101, "90300": 101, "1520": 101, "903": 101, "1600": [101, 102], "172": 101, "polar_mo": 101, "i1": [101, 109, 122, 139, 233], "1350": 101, "solve_for_tors": 101, "torsion": 101, "torqu": [101, 113, 117, 121, 127, 134, 135, 139], "torsional_mo": 101, "_________________": 102, "________________": [102, 223], "_______________v": 102, "_______________": 102, "equilibrium": [102, 104, 124, 136], "20e9": 102, "25e": 102, "______________________________________________": 102, "_______________________________________________": 102, "r\u2081": 102, "r\u2082": 102, "______________________": 102, "________________________": 102, "8kn": 102, "_____________": 102, "1m": 102, "3m": 102, "2m": 102, "5m": [102, 242], "679": 102, "12kn": 102, "________________________________": 102, "____________________________________________________": 102, "o____________________________________________________": 102, "4m": 102, "concentr": [102, 227], "_____________________________________": 102, "m\u2081": 102, "m\u2082": 102, "connector": 102, "_____________________": 102, "_______________________": 102, "_____________________o_______________________": 102, "oooo": [102, 245], "r\u2083": 102, "_______i_______": 102, "flexur": 102, "rigid": [102, 104, 113, 117, 119, 122, 124, 127, 132, 139, 182, 190, 269], "____________": 102, "____________o________________________": 102, "a\u2081": [102, 284], "a\u2082": [102, 284], "assembli": [104, 124], "joint": [104, 115, 125, 127, 132, 269], "add_nod": 104, "node_1": 104, "node_2": 104, "node_3": 104, "node_4": 104, "add_memb": 104, "member_1": 104, "member_2": 104, "member_3": 104, "member_4": 104, "member_5": 104, "270": 104, "360": 104, "change_member_label": 104, "new_label": 104, "change_node_label": 104, "bc_new": 104, "internal_forc": 104, "member_label": 104, "node_label": 104, "node_posit": 104, "remove_memb": 104, "remove_nod": 104, "remove_support": 104, "unstabl": 104, "revolv": 104, "tensil": 104, "r_node_1_x": 104, "r_node_1_i": 104, "r_node_2_i": 104, "lti": [105, 106], "transferfunct": [105, 106, 108], "interconnect": [105, 108, 116], "mimo": [105, 108], "transferfunctionmatrix": [105, 108], "mimoseri": [105, 108], "mimoparallel": [105, 108], "mimofeedback": [105, 108], "control_plot": 106, "pole_zero_plot": 106, "pole_color": 106, "blue": [106, 133, 193, 207], "pole_markers": 106, "zero_color": 106, "orang": 106, "zero_markers": 106, "show_ax": 106, "marker": [106, 193], "sisolineartimeinvari": [106, 108], "markers": 106, "tf1": [106, 108], "pole_zero_numerical_data": 106, "r664": 106, "93zero_plot": 106, "siso": [106, 108], "8660254j": 106, "bode_plot": 106, "initial_exp": 106, "final_exp": 106, "freq_unit": 106, "phase_unit": 106, "semilog": 106, "hz": 106, "hertz": 106, "bode_magnitude_plot": 106, "bode_phase_plot": 106, "bode_magnitude_numerical_data": 106, "5148378120533502e": 106, "68437": 106, "36188804005": 106, "020599914256786": 106, "0205999155219505": 106, "4117304087953": 106, "00000000260573": 106, "bode_phase_numerical_data": 106, "4472354033813751e": 106, "035581932165858e": 106, "47577": 106, "3248186011": 106, "67884": 106, "09326036123": 106, "5000000000291665e": 106, "6180885085e": 106, "08895483066e": 106, "1415085799262523": 106, "14155265358979": 106, "impulse_response_plot": 106, "lower_limit": [106, 274], "upper_limit": [106, 274], "step_response_plot": 106, "ramp_response_plot": 106, "r665": 106, "impulse_response_numerical_data": 106, "nb_of_point": [106, 193], "lineover1drangeseri": [106, 193], "amplitud": [106, 146], "06616480200395854": 106, "854500743565858": 106, "9999999799999999": 106, "7042848373025861": 106, "170748906965121e": 106, "1901263495547205e": 106, "r666": 106, "step_response_numerical_data": 106, "025413462339411542": 106, "0484508722725343": 106, "670250533855183": 106, "844291913708725": 106, "023844582399907256": 106, "042894276802320226": 106, "828770759094287e": 106, "456457160755703e": 106, "mx": [106, 152, 214], "r667": 106, "ramp_funct": 106, "ramp_response_numerical_data": 106, "12166980856813935": 106, "861246379582118": 106, "4504508011325967e": 106, "006046440489058766": 106, "12499999999568202": 106, "12499999999661349": 106, "den": [108, 198, 219, 223], "superscript": [108, 207], "impuls": 108, "tf2": 108, "tf3": 108, "tf4": 108, "tf5": 108, "tf6": 108, "500000000000000": 108, "tf7": 108, "tf8": 108, "tf9": 108, "tf10": 108, "tf11": 108, "tf12": 108, "r668": 108, "transfer_funct": 108, "r669": 108, "dc_gain": 108, "dc": [108, 135], "from_rational_express": 108, "zerodivisionerror": [108, 198, 236, 246], "tf": [108, 246], "is_biprop": 108, "is_prop": 108, "is_stabl": 108, "is_strictly_prop": 108, "sys1": 108, "sys2": 108, "feedforward": 108, "fed": 108, "sit": [108, 191], "plant": 108, "compulsori": 108, "tf_1": 108, "tf_2": 108, "tf_3": 108, "tf_4": 108, "tfm_1": 108, "num_input": 108, "num_output": 108, "tfm_2": 108, "tf_5": 108, "tf_6": 108, "tf_7": 108, "tf_8": 108, "tfm_3": 108, "tfm_4": 108, "tfm_5": 108, "tfm_6": 108, "tf_9": 108, "tf_10": 108, "tfm_7": 108, "tfm_8": 108, "tfm_9": 108, "tfm_10": 108, "tfm_11": 108, "tfm_12": 108, "elem_pol": 108, "elem_zero": 108, "from_matrix": [108, 196], "m_tf": 108, "tfm": 108, "tfm1": 108, "tfm2": 108, "g4": 108, "tfm3": 108, "mimolineartimeinvari": 108, "mat_a": 108, "mat_b": 108, "mat_c": 108, "tfm_a": 108, "tfm_b": 108, "tfm_c": 108, "expr_1": 108, "expr_2": 108, "expr_3": 108, "expr_4": 108, "plant_mat": 108, "controller_mat": 108, "neg_feedback": 108, "hep": 109, "gamma_matric": [109, 111], "gammamatrix": 109, "lorentzindex": 109, "gammamatrixhead": 109, "extract_type_ten": 109, "gamma_trac": 109, "i0": [109, 144, 233], "i2": [109, 122, 139, 233], "i4": [109, 233], "i5": 109, "kahane_simplifi": 109, "spinor": 109, "ta": [109, 216], "tb": [109, 216, 238], "tc": [109, 198, 203, 216], "joseph": [109, 201], "kahan": 109, "octob": 109, "1968": 109, "simplify_gpgp": 109, "e_nl": [110, 173], "hartre": 110, "helium": 110, "2209": 110, "e_nl_dirac": 110, "spin_up": 110, "035999037000": 110, "relativist": 110, "momentum": [110, 119, 122, 139, 150, 151, 169, 173, 192, 233], "light": [110, 144, 177, 187, 194], "035999037": 110, "1012": 110, "3627": 110, "500006656595360": 110, "125002080189006": 110, "125000416028342": 110, "0555562951740285": 110, "0555558020932949": 110, "0555556377366884": 110, "psi_nlm": 110, "wave": [110, 142, 143, 144, 210, 269], "psi_": [110, 148], "nlm": 110, "radial": [110, 126, 173], "nl": [110, 173], "magnet": [110, 143, 188, 261], "azimuth": 110, "wf": [110, 124], "abs_sqrd": 110, "silver": 110, "94": [110, 201], "141": 110, "4418": 110, "mdft": 111, "mgamma": 111, "gamma_5": 111, "gamma_0": 111, "gamma_3": 111, "r670": 111, "msigma": 111, "pauli": [111, 269], "sigma_i": [111, 227], "r671": 111, "pauli_matric": [111, 147], "pat_matrix": 111, "unansw": [112, 181], "kane": [112, 115, 116, 122, 128, 132, 133, 138, 139, 181, 182, 252, 269], "q1d": [112, 122, 124, 126, 129, 130, 131, 134, 135, 136, 137, 181, 187, 191], "q2d": [112, 122, 124, 126, 129, 130, 131, 134, 135, 186, 187], "q3d": [112, 129, 130, 131, 134], "kinemat": [112, 116, 117, 121, 122, 124, 125, 126, 127, 129, 131, 133, 134, 136, 137, 139, 140, 182, 185, 189, 191, 269], "dyad": [112, 139, 256], "mprint": [112, 129, 130, 131, 134], "mpprint": [112, 134], "mlatex": 112, "sub_dict": [112, 114, 124], "msub": [112, 114, 136], "cleaner": [112, 139, 223], "gsl": [112, 240], "lsoda": 112, "penalti": 112, "central_inertia": [113, 119, 125, 127], "possess": [113, 137, 233], "name_of_bodi": 113, "ixx": [113, 119, 182], "body_inertia": 113, "ang_vel_in": [113, 116, 122, 129, 130, 139, 182, 190], "set_ang_vel": [113, 119, 122, 124, 129, 130, 136, 137, 139, 140, 182, 184, 186, 190], "apply_forc": [113, 116, 127], "reaction_bodi": [113, 116, 127], "reaction_point": 113, "oppposit": 113, "desri": 113, "force1": 113, "b_masscent": 113, "b_frame": [113, 116], "newtonion": [113, 116], "spring_forc": 113, "n_frame": 113, "apply_torqu": [113, 127], "torquess": 113, "torque1": 113, "b1_frame": 113, "b2_frame": 113, "clear_load": 113, "kinetic_energi": [113, 119, 137, 139], "kinet": [113, 117, 119], "inerti": [113, 116, 117, 119, 124, 126, 129, 134, 135, 137, 139], "set_vel": [113, 117, 119, 122, 124, 126, 129, 130, 131, 134, 135, 136, 137, 139, 140, 186, 190], "b_ixx": 113, "b_mass": [113, 116], "masscenter_vel": [113, 116], "parallel_axi": [113, 119], "to_matrix": [113, 116, 181, 182, 191, 196, 202, 252, 255, 257], "a_ixx": 113, "a_mass": 113, "a_ixi": 113, "a_izx": 113, "a_iyi": 113, "a_iyz": 113, "a_izz": 113, "smart": [114, 136, 214, 220, 223], "sub1": [114, 207], "sub2": [114, 207], "find_dynamicsymbol": 114, "reference_fram": [114, 182], "symbolicsystem": [115, 132, 269], "interfram": [116, 186], "_generate_coordin": 116, "_generate_spe": 116, "_orient_fram": 116, "_set_angular_veloc": 116, "_set_linear_veloc": 116, "kde": [116, 125, 126, 133, 136], "revolut": 116, "\u03c9": 116, "pc": [116, 204], "p_masscent": 116, "c_masscent": 116, "p_frame": 116, "c_frame": 116, "q_pc": 116, "u_pc": 116, "pendulum": [116, 121, 123, 127, 132, 136, 140, 190, 269], "upper_bob": 116, "lower_bob": 116, "ceiling_joint": 116, "pendulum_joint": 116, "q_p1": 116, "q_p2": 116, "u_fram": 116, "l_frame": 116, "u_p1": 116, "u_p2": 116, "vel": [116, 122, 124, 126, 130, 133, 139, 186, 190, 259], "prismat": 116, "slide": 116, "wall": [116, 127], "part1": 116, "part2": 116, "j1": [116, 125, 127, 151, 169], "j2": [116, 125, 127, 151, 169], "q_j1": 116, "w_frame": 116, "q_j2": 116, "p1_frame": 116, "u_j1": 116, "cylindricaljoint": 116, "rotation_coordin": 116, "translation_coordin": 116, "rotation_spe": 116, "translation_spe": 116, "cylindr": [116, 193, 259], "q0_": 116, "q1_": 116, "u0_": 116, "u1_": 116, "q0_pc": 116, "q1_pc": 116, "u0_pc": 116, "u1_pc": 116, "tube": 116, "floor_joint": 116, "flag_joint": 116, "q0_c1": 116, "q0_c2": 116, "q1_c1": 116, "floor_fram": 116, "q1_c2": 116, "tube_fram": 116, "flag_fram": 116, "u0_c1": 116, "u0_c2": 116, "u1_c1": 116, "planarjoint": 116, "planar_coordin": 116, "planar_spe": 116, "q2_": 116, "u2_": 116, "nonparallel": 116, "q_1": [116, 125, 126, 127, 136, 152, 190, 203, 220], "q_2": [116, 125, 126, 127, 136, 190], "hat": [116, 133, 137, 181, 182, 187, 188, 190, 191, 256, 257, 259, 261, 262], "q_0": [116, 152, 220], "rotation_axi": 116, "planar_vector": 116, "q2_pc": 116, "u2_pc": 116, "parent_vector": 116, "plane_vector": 116, "g_frame": 116, "sphericaljoint": 116, "rot_typ": [116, 182, 186, 188], "rot_ord": [116, 182, 186, 254], "ball": 116, "socket": 116, "tait": [116, 182, 252, 254], "bryan": [116, 182, 252, 254], "joint_point": 116, "zxz": [116, 182, 191, 252, 254], "jointsmethod": [116, 125, 127], "damper": [116, 117, 122, 127], "form_eom": [116, 127, 133], "mass_matrix_ful": [116, 117, 122, 127, 134, 135], "forcing_ful": [116, 117, 122, 127, 134, 135], "mass_matrix": [116, 117, 121, 124, 129, 130, 134, 135, 140], "lagrangesmethod": [116, 117, 126, 131, 135, 136], "qd": [116, 117, 124, 134, 186], "inv_method": [116, 117], "solveabl": 116, "q_ind": [117, 118, 122, 124, 125, 126, 129, 130, 134, 136, 139], "u_ind": [117, 118, 122, 124, 125, 126, 129, 130, 134, 136, 139], "kd_eq": [117, 122, 124, 125, 126, 129, 130, 136, 139], "q_depend": [117, 124, 125, 126, 134, 139], "configuration_constraint": [117, 124, 125, 126, 134], "u_depend": [117, 124, 125, 126, 134, 139], "velocity_constraint": [117, 124, 125, 126, 134, 139], "acceleration_constraint": 117, "u_auxiliari": [117, 130, 134, 139], "forcelist": [117, 122, 125, 126, 129, 130, 135, 136, 139], "explicit_kinemat": 117, "levinson": [117, 138, 182, 252], "udot": [117, 124], "22626": 117, "ud": [117, 134], "kd": [117, 124, 129, 130, 134], "fl": [117, 124, 134, 135, 139, 201], "bl": [117, 124, 134, 139], "frstar": [117, 122, 124, 126, 129, 130, 134, 136, 139], "kanes_equ": [117, 122, 124, 126, 129, 130, 134, 136, 139], "a_and_b": [117, 118, 126], "auxiliary_eq": [117, 130], "k_d": [117, 134], "k_dnh": 117, "f_d": [117, 134, 135, 200], "f_dnh": 117, "mass_matrix_kin": 117, "k_kqdot": 117, "forcing_kin": 117, "k_ku": 117, "constrain": [117, 126, 135, 139], "kindiffdict": [117, 124, 129, 130, 134, 139], "new_method": [117, 126], "intens": [117, 118, 141, 144], "perm_mat": [117, 118, 136], "op_point": [117, 118, 126, 136], "beforehand": [117, 240], "to_linear": [117, 136], "recalcul": [117, 203], "hol_coneq": [117, 126, 135], "nonhol_coneq": [117, 126, 135], "nonconserv": 117, "form_lagranges_equ": [117, 126, 131, 135, 136], "qdot": [117, 124, 125, 186], "qdoubledot": 117, "lam": [117, 118, 140], "lagranges_equ": 117, "qd_ind": [117, 136], "q_dep": [117, 134, 136], "qd_dep": [117, 136], "solve_multipli": [117, 126], "sol_typ": 117, "array_lik": 117, "f_3": [118, 121, 140, 223], "f_c": [118, 126], "f_v": [118, 126], "f_a": 118, "q_d": 118, "u_i": [118, 136, 190, 200], "u_d": [118, 139], "q_op": [118, 126], "u_op": [118, 126], "qd_op": 118, "ud_op": [118, 126], "spatial": [119, 146, 182, 207], "angular_momentum": [119, 137, 139], "init_vprint": [119, 120, 137, 140, 182, 184, 186, 187, 190, 191], "linear_momentum": [119, 137, 139], "inertia_tupl": 119, "mv": 119, "iyi": [119, 182], "izz": [119, 182], "ixi": [119, 182], "iyz": [119, 182], "izx": 119, "yy": [119, 191, 223], "yz": [119, 191, 193], "zx": [119, 191], "inertia_of_point_mass": 119, "pos_vec": 119, "px": [119, 162, 167, 233], "body1": 119, "body2": 119, "body3": 119, "h2": 119, "multibodi": [119, 122, 132, 138, 139, 140, 190], "vprint": [120, 181, 186, 187, 191], "vpprint": [120, 181, 187, 191], "vlatex": [120, 181, 182, 187, 191], "coord_stat": 121, "right_hand_sid": 121, "coordinate_deriv": [121, 140], "alg_con": [121, 140], "output_eqn": 121, "coord_idx": [121, 140], "speed_idx": [121, 140], "m_3": [121, 140, 151, 192], "exogen": [121, 140], "ref_fram": 121, "graviti": [121, 122, 126, 127, 129, 131, 139, 188, 261], "theta_dot": 121, "kin_explicit_rh": [121, 140], "dyn_implicit_mat": [121, 140], "dyn_implicit_rh": [121, 140], "symsystem": 121, "dae": [121, 140], "adjust": [121, 210, 214], "comb_implicit_mat": [121, 140], "comb_implicit_rh": [121, 140], "kinema": 121, "comb_explicit_rh": [121, 140], "compute_explicit_form": 121, "awhil": 121, "constant_symbol": 121, "dynamic_symbol": 121, "motiongenesi": [122, 139], "double_pendulum": 122, "motionvari": [122, 139], "newtonian": [122, 139], "simprot": [122, 139], "n_a": 122, "n_b": 122, "w_a_n": 122, "w_b_n": [122, 139], "p_o_p": 122, "p_p_r": 122, "v_o_n": [122, 139], "v2pt": [122, 139], "v_p_n": 122, "v_r_n": 122, "force_p": 122, "force_r": 122, "tfinal": 122, "integstp": 122, "some_filenam": 122, "parse_autolev": 122, "sympy_cod": 122, "include_numer": 122, "include_pydi": 122, "pydi": [122, 139, 182], "u1d": [122, 124, 126, 129, 130, 134], "u2d": [122, 124, 126, 129, 130, 134], "frame_n": 122, "frame_a": 122, "frame_b": 122, "point_o": 122, "particle_p": 122, "p_pt": 122, "particle_r": 122, "r_pt": 122, "set_po": [122, 186, 190], "v2pt_theori": [122, 124, 129, 130, 131, 136, 137, 139, 140, 186, 190], "initial_condit": [122, 139], "overwritten": 122, "e2row": 122, "eigvec": [122, 139], "eigenvec": 122, "deg2rad": 122, "0174533": 122, "wo": 122, "coef": [122, 139], "u3": [122, 124, 125, 127, 129, 130, 134, 139, 182, 186, 190], "strai": 122, "reassign": 122, "inher": [122, 246, 276], "rhs_x": 122, "i_b_bo": 122, "body_b": 122, "body_b_f": 122, "b_cm": 122, "b_f": 122, "scene": [122, 219, 276], "i_c_d": 122, "i_p_q": 122, "i_b_o": 122, "e3": [122, 214, 223], "i_p_o": 122, "e4": [122, 214], "p_so_o": 122, "nicheck": 122, "plug": [122, 177], "hurdl": 122, "gitlab": 122, "repo": 122, "ch4": 122, "ch5": 122, "ch6": 122, "cst": 122, "grammar": [122, 219], "roll": [123, 124, 132, 190, 227, 269], "disc": [123, 132, 190, 269], "bicycl": [123, 132, 138, 269], "nonminim": [123, 132, 136, 269], "linkag": [123, 132, 269], "meijaard2007": [124, 138], "steer": [124, 138], "purposefulli": 124, "mechanics_print": [124, 125, 129, 130, 131, 133, 134, 135], "yaw": 124, "ang": 124, "rear": 124, "wheel": 124, "pitch": 124, "q4": [124, 134, 184], "q5": [124, 184], "q4d": [124, 134], "q5d": 124, "u4": [124, 130, 134, 139], "u5": [124, 130], "u6": [124, 130], "u3d": [124, 129, 130], "u4d": 124, "u5d": 124, "u6d": 124, "explanatori": 124, "wfrad": 124, "wrrad": 124, "htangl": 124, "forkoffset": 124, "forklength": 124, "framelength": 124, "forkcg1": 124, "forkcg3": 124, "framecg1": 124, "framecg3": 124, "iwr11": 124, "iwr22": 124, "iwf11": 124, "iwf22": 124, "iframe11": 124, "iframe22": 124, "iframe33": 124, "iframe31": 124, "ifork11": 124, "ifork22": 124, "ifork33": 124, "ifork31": 124, "mframe": 124, "mfork": 124, "mwf": 124, "mwr": 124, "wr": 124, "tempfram": 124, "tempfork": 124, "orientnew": [124, 126, 129, 130, 131, 136, 140, 182, 184, 186, 188, 190, 191], "wr_cont": 124, "wr_mc": 124, "frame_mc": 124, "fork_mc": 124, "wf_mc": 124, "wf_cont": 124, "flip": [124, 157, 166, 227], "frame_i": 124, "fork_i": 124, "wr_i": 124, "wf_i": 124, "bodyfram": 124, "bodyfork": 124, "bodywr": 124, "bodywf": 124, "nonholonom": 124, "slip": [124, 128, 130, 190], "replic": 124, "conlist_spe": 124, "conlist_coord": 124, "gravit": [124, 129, 175, 188, 261], "aforement": [124, 188, 220, 259], "paperradrear": 124, "paperradfront": 124, "hta": 124, "trailpap": 124, "rake": 124, "paperwb": 124, "02": 124, "paperframecgx": 124, "paperframecgz": 124, "paperforkcgx": 124, "paperforkcgz": 124, "framecgnorm": 124, "framecgpar": 124, "tempa": 124, "tempb": 124, "tempc": 124, "paperforkl": 124, "forkcgnorm": 124, "forkcgpar": 124, "upright": 124, "val_dict": 124, "0603": 124, "1405": 124, "05892": 124, "00708": 124, "00756": 124, "kdd": [124, 129, 130], "centripet": 124, "corioli": 124, "forcing_lin": 124, "mm_full": 124, "_k_kqdot": 124, "xdot": 124, "lean": [124, 129, 131], "amat": 124, "summari": [125, 219, 238, 263], "q_3": [125, 127, 190], "u_1": [125, 126, 127, 190, 202, 223], "u_2": [125, 126, 127, 190, 202, 223], "u_3": [125, 127, 190], "densiti": [125, 227, 238, 262], "link1": 125, "link2": 125, "link3": 125, "link4": 125, "joint1": 125, "joint2": 125, "joint3": 125, "j3": [125, 127, 151, 169], "fh": 125, "fhd": 125, "_method": 125, "_form_eom": 125, "eom": [126, 127, 136], "theta1": 126, "dq_dict": 126, "presimplifi": 126, "inp_vec": [126, 136], "lag": [126, 131, 136], "lm": [126, 135, 136, 200, 203], "lag_eq": [126, 136], "lam_op": 126, "mb": [127, 139], "ibzz": 127, "compound_pend": 127, "simple_pend": 127, "slider": 127, "rev1": 127, "rev2": 127, "w_r_n_qd": [129, 130], "dmc": [129, 130, 131], "uv": [129, 130, 172], "bodyd": [129, 130, 131], "bodylist": [129, 130], "revisit": [130, 190], "kane1985": [130, 134, 137, 138], "thorough": [130, 136, 220], "simplifc": 130, "f3": [130, 193, 207], "necessit": 130, "simplify_auxiliary_eq": 130, "lrh": 131, "planet": 132, "robot": 132, "fascin": 132, "trajectori": 132, "challeng": 132, "came": [132, 279], "tackl": [132, 240], "organ": 132, "amen": 132, "arduou": 132, "child_izz": 133, "child_mass": 133, "f_h": 134, "nh": 134, "ku": [134, 207], "dnh": 134, "f_r": [134, 136, 200], "speed_con": 134, "coord_con": 134, "u_dep": 134, "m_d": 135, "lam1": 135, "0_": 136, "blajer1994": [136, 138], "brought": [136, 227], "vel_p": 136, "a_op": 136, "b_op": 136, "m_op": 136, "a_lin": 136, "hasn": 136, "wikidyad": [137, 189], "wikidyadicproduct": [137, 189], "juxtaposit": [137, 181, 256], "otim": [137, 228], "l_p": 137, "likins1973": [137, 189], "l_b": 137, "requisit": 137, "t_p": 137, "t_b": 137, "t_t": 137, "virtu": [137, 139], "blajer": 138, "wojciech": 138, "werner": 138, "schiehlen": 138, "walter": 138, "schirm": 138, "kane1983": [138, 191], "likin": [138, 189], "david": [138, 203], "spacecraft": 138, "1983": [138, 242], "meijaard": 138, "jim": 138, "papadopoulo": 138, "ruina": 138, "schwab": 138, "royal": 138, "societi": [138, 220], "2084": 138, "1955": 138, "982": 138, "lectur": [139, 201, 227], "rigibodi": 139, "proprietari": 139, "k3": [139, 197], "k4": 139, "b11": 139, "b12": 139, "b21": 139, "b22": 139, "xd": 139, "xd2": 139, "y1d": 139, "y2d": 139, "tina": 139, "overwrit": [139, 181], "dt2": 139, "dy2": 139, "ty": 139, "linsolv": [139, 205, 225, 226, 285], "nonlinsolv": [139, 225, 226, 285], "rowmatrix": 139, "colmatrix": 139, "diagmat": 139, "eigval": 139, "row_matrix": 139, "col_matrix": 139, "ao": 139, "i12": 139, "i23": 139, "i31": 139, "bf": 139, "p_o_q": 139, "mag": 139, "unitvec": 139, "qo": 139, "p_p_q": 139, "partial_veloc": [139, 182, 186], "a_o_n": 139, "set_acc": [139, 186, 190], "qb": [139, 195], "qbd": 139, "alf_b_n": 139, "set_ang_acc": [139, 182], "ang_acc_in": [139, 182], "force_o": 139, "torque_a": 139, "qa": 139, "qad": 139, "a_b": 139, "v1pt": 139, "v1pt_theori": [139, 186, 190], "a1pt": 139, "a1pt_theori": [139, 186], "a2pt": 139, "a2pt_theori": [139, 186, 190], "angvel": 139, "force_vector": 139, "center_of_mass": 139, "kindiff": 139, "ke": 139, "configura": 139, "tion_constraint": 139, "pendent": 139, "velocity_con": 139, "traint": 139, "acceleration_": 139, "u_auxilia": 139, "ry": 139, "matlplotlib": 139, "stiff": 139, "damp": 139, "legend": [139, 193, 210], "introspect": 139, "rich": [139, 219], "media": [139, 145], "histori": 139, "esqu": 139, "cpython": 139, "pertin": [140, 194, 202], "alg_con_ful": 140, "symsystem1": 140, "symsystem2": 140, "symsystem3": 140, "raytransfermatrix": 141, "geometricrai": 141, "beamparamet": 141, "geometric_conj": 141, "gauss_conj": 141, "conjugate_gauss_beam": 141, "lens": 141, "gaussopt": 141, "wavelen": 141, "z_r": 141, "wavelength": [141, 146], "waist": 141, "rayleigh": [141, 227], "refract": [141, 143, 145, 146], "530e": 141, "88679245283019": 141, "92753330865999": 141, "w_0": [141, 220], "00100000000000000": 141, "freespac": 141, "00101413072159615": 141, "00210803120913829": 141, "r672": 141, "complex_beam_paramet": 141, "r673": 141, "gaussian_beam": 141, "spread": [141, 207, 227, 242], "00053": 141, "goui": 141, "55998576005696": 141, "2809": 141, "peak": 141, "waist_approximation_limit": 141, "paraxi": [141, 145], "06e": 141, "curvedmirror": 141, "curvedrefract": 141, "flatmirror": 141, "flatrefract": 141, "2x1": 141, "thinlen": 141, "r674": 141, "ray_transfer_matrix_analysi": 141, "waist_in": 141, "waist_out": 141, "s_in": 141, "s_out": 141, "w_o": 141, "gaussian_conj": 141, "z_r_in": 141, "incid": [141, 145], "z_r_out": 141, "emerg": [141, 195], "geometric_conj_ab": 141, "geometric_conj_af": 141, "geometric_conj_bf": 141, "rayleigh2waist": 141, "waist2rayleigh": 141, "optic": [143, 144, 145, 146, 269], "permitt": 143, "permeabl": 143, "fermat": 143, "electr": [143, 145, 188, 259, 261], "electromagnet": [143, 188, 233, 261], "intrinsic_imped": 143, "149896229": [143, 146], "kilogram": [143, 175, 177, 179], "1250000": 143, "amper": 143, "refractive_index": 143, "299792458": [143, 146, 179], "r675": 143, "optical_medium": 143, "travel": [143, 146, 188, 259, 261], "stoke": 144, "mueller": 144, "jones_vector": 144, "stokes_vector": 144, "half_wave_retard": 144, "polarizing_beam_splitt": 144, "jones_2_stok": 144, "\u2148": [144, 192, 206, 207, 226, 285], "\u03c7": 144, "\u03c8": 144, "i\u2080": 144, "plate": 144, "hwp": 144, "splitter": 144, "transmit": [144, 145], "pb": 144, "transmitted_port": 144, "reflected_port": 144, "transmitted_pow": 144, "reflected_pow": 144, "r676": 144, "jones_calculu": 144, "r677": 144, "mueller_calculu": 144, "r678": 144, "stokes_paramet": 144, "retard": 144, "poincar\u00e9": 144, "tilt": 144, "mayor": 144, "linear_polar": 144, "transmiss": [144, 145], "mueller_matrix": 144, "quarter_wave_retard": 144, "quarter": 144, "phase_retard": 144, "\u03b4": 144, "phia": 144, "phib": 144, "4x1": [144, 227], "phi_a": 144, "phi_b": 144, "qwp": 144, "reflective_filt": 144, "unpolar": 144, "transmissive_filt": 144, "attenu": 144, "transmitt": 144, "ndf": 144, "refraction_angl": 145, "fresnel_coeffici": 145, "brewster_angl": 145, "critical_angl": 145, "lens_makers_formula": 145, "mirror_formula": 145, "lens_formula": 145, "hyperfocal_dist": 145, "transverse_magnif": 145, "medium1": 145, "medium2": 145, "brewster": 145, "926093295503462": 145, "onset": 145, "850908514477849": 145, "02005": 145, "angle_of_incid": 145, "fresnel": [145, 207, 217], "polaris": 145, "te": 145, "undergo": 145, "317843553417859": 145, "348645229818821": 145, "658921776708929": 145, "651354770181179": 145, "235625382192159": 145, "971843958291041": 145, "816477005968898": 145, "577377951366403": 145, "r679": 145, "fresnel_equ": 145, "coc": 145, "0033": 145, "focal_length": 145, "n_len": 145, "n_surr": 145, "thick": 145, "1515151515151": 145, "0000000000000": 145, "3418463277618": 145, "41152": 145, "magnif": 145, "twave": 146, "time_period": 146, "wavenumb": 146, "phi1": 146, "phi2": 146, "w1": [146, 219], "w3": [146, 207], "superposit": [146, 157, 168, 194], "angular_veloc": 146, "tempor": 146, "r680": 147, "paulialgebra": 147, "evaluate_pauli_product": 147, "paulimatric": 147, "sigma3": 147, "nodal": [148, 173, 194], "hw": [148, 173], "coherent_st": 148, "coher": [148, 174, 180], "1d": [148, 150, 163, 182, 232], "wavefunct": [148, 161, 170, 173, 269], "r681": 149, "__cmp__": [149, 153, 172], "dagger": [149, 153, 159, 161, 164, 166, 171, 172, 269], "todo": [150, 152, 156, 157, 161, 162, 164, 165, 166, 167, 168, 200, 207, 214, 232], "operatorset": [150, 162], "positionbra3d": 150, "eigenbra": [150, 163, 169], "positionket3d": 150, "eigenket": [150, 163, 169], "positionstate3d": 150, "eigenst": [150, 162, 167, 169, 170], "position_x": 150, "position_i": 150, "position_z": 150, "pxbra": [150, 162], "pxket": [150, 162, 167], "pxop": [150, 162, 167], "xbra": [150, 162, 167], "xket": [150, 162, 167], "xop": [150, 162, 167], "yop": 150, "zop": 150, "momenta": 151, "uncoupl": [151, 169], "r682": 151, "j_3": [151, 169, 192], "r683": 151, "wigner3j": [151, 192], "wigner": [151, 169, 227, 269], "varshalovich": [151, 169], "zyla": 151, "theor": 151, "phy": [151, 177, 192], "083c01": 151, "r684": 151, "w3j": 151, "715": [151, 192, 207], "wigner6j": [151, 192], "j12": [151, 169], "j23": 151, "6j": [151, 192], "wigner9j": [151, 192], "j4": 151, "j34": 151, "j13": 151, "j24": 151, "9j": [151, 192], "cg_simp": 151, "r685": 151, "clebsh": 151, "rethink": 152, "figsiz": 152, "circuitplot": 152, "nqubit": [152, 156, 157, 166], "control_lin": 152, "gate_idx": [152, 156], "min_wir": 152, "max_wir": 152, "control_point": 152, "wire_idx": 152, "not_point": 152, "one_qubit_box": 152, "box": [152, 157, 159, 168, 170, 262, 269], "qubit": [152, 156, 157, 158, 159, 165, 269], "swap_point": 152, "two_qubit_box": 152, "createcg": 152, "latexnam": 152, "mock": 152, "mz": 152, "circuit_plot": 152, "min_qubit": [152, 156], "autogener": 152, "wire": 152, "j_0": 152, "r686": 153, "comm": [153, 172, 233], "plank": 154, "r687": 154, "05457162000000e": 154, "planck_const": 154, "hermetian": 155, "r688": 155, "r689": 155, "ket": [155, 160, 161, 162, 164, 166, 167, 170, 172], "bra": [155, 160, 161, 162, 164, 166, 167, 170, 172], "innerproduct": [155, 160, 161, 167, 169, 172], "outerproduct": [155, 161], "seamlessli": 155, "hermitian_adjoint": 155, "hermitian_transpos": 155, "_apply_operators_qubit": 156, "gate_sort": 156, "gate_simp": 156, "ugat": 156, "cgate": 156, "control_valu": 156, "cnot": 156, "eval_control": 156, "plot_gat": 156, "circ_plot": 156, "simplify_cg": 156, "cphase": 156, "cnotgat": 156, "qappli": [156, 157, 159, 161, 166, 269], "get_target_matrix": 156, "represen": 156, "hadamardg": 156, "identityg": 156, "onequbitg": 156, "phaseg": 156, "swapgat": 156, "target1": 156, "target2": 156, "tgate": 156, "twoqubitg": 156, "xgate": 156, "ygate": 156, "zgate": 156, "bubbl": 156, "random_circuit": 156, "ngate": 156, "gate_spac": 156, "mermin": 157, "_represent_zg": 157, "oracleg": 157, "oracl": 157, "intqubit": [157, 166], "search_funct": 157, "wgate": 157, "apply_grov": 157, "grover_iter": 157, "qstate": 157, "wv": 157, "superposition_basi": 157, "numqubit": 157, "basis_st": 157, "matt": 158, "complexspac": 158, "directsumhilbertspac": 158, "r690": 158, "hilbertspac": 158, "fockspac": 158, "hilbert_spac": [158, 161, 170], "direct_sum": 158, "quantiz": [158, 269], "r691": 158, "mess": [158, 223, 226, 284], "fock_spac": 158, "r692": 158, "tensorpowerhilbertspac": 158, "r693": 158, "tensor_product": 158, "tensorproducthilbertspac": 158, "r694": 158, "clebsch": [159, 169, 192, 269], "gordan": [159, 169, 192, 269], "hilbert": [159, 161, 167, 269], "grover": [159, 269], "qft": [159, 168, 269], "shor": [159, 269], "brabas": [160, 161, 167, 170], "ketbas": [160, 161, 167, 170], "r695": 160, "inner_product": 160, "apply_oper": [161, 172], "identityoper": 161, "r696": 161, "r697": 161, "polymoni": 161, "operator_": 161, "28physic": 161, "old_assumpt": 161, "r698": 161, "outer_product": 161, "unitaryoper": 161, "operators_to_st": 162, "state_to_oper": 162, "_operators_to_st": 162, "state_map": 162, "_state_to_oper": 162, "statebas": [162, 167, 170], "piab": 163, "piabbra": 163, "piabhamiltonian": 163, "piabket": 163, "ip_doit": 164, "smarter": [165, 216], "rk": 165, "iqft": 165, "rkgate": 165, "qtf": 165, "povm": 166, "as_int": [166, 248], "qubit_valu": 166, "intqubitbra": 166, "00001": 166, "qubitbra": 166, "matrix_to_dens": 166, "matrix_to_qubit": 166, "measure_al": 166, "ensembl": 166, "measure_all_oneshot": 166, "oneshot": 166, "measure_parti": 166, "measure_partial_oneshot": 166, "qubit_to_matrix": 166, "enumerate_st": 167, "_enumerate_st": 167, "foo_1": 167, "foo_2": 167, "foo_3": 167, "test2": 167, "bar_4": 167, "bar_5": 167, "bar_10": 167, "get_basi": 167, "replace_non": 167, "operator_to_st": 167, "qexpr": 167, "integrate_result": 167, "orig_expr": 167, "x_ket": 167, "x_op": 167, "rep_expect": 167, "px_2": 167, "px_1": 167, "rep_innerproduct": 167, "_repres": 167, "_represent_foobasi": 167, "foobasi": 167, "_represent_szop": 167, "szupket": 167, "szop": 167, "sz": 167, "cmod": 168, "reformat": 168, "period_find": 168, "momemtum": 169, "j2op": 169, "jxbra": 169, "jx": 169, "jzket": 169, "jxbracoupl": 169, "jcoupl": 169, "jzketcoupl": 169, "jxket": 169, "jxketcoupl": 169, "jybra": 169, "jy": 169, "jybracoupl": 169, "jyket": 169, "jyketcoupl": 169, "jzbra": 169, "jz": 169, "jzbracoupl": 169, "j_4": [169, 192], "argular": 169, "jzop": 169, "passiv": 169, "r699": 169, "wignerd": 169, "mp": [169, 225, 241], "jm": 169, "jj": 169, "r700": 169, "jcoupling_list": 169, "coupledspinst": 169, "spinstat": 169, "r701": 170, "dual_class": 170, "mn": [170, 207, 227], "ket_not": 170, "r702": 170, "k0": [170, 198, 200, 227], "orthogonalbra": 170, "orthogonalket": 170, "orthogonalst": 170, "_eval_adjoint": 170, "timedepbra": 170, "timedepst": 170, "timedepket": 170, "prob": [170, 227], "412214747707527": 170, "matrix_tensor_product": 171, "axb": 171, "xdagger": 171, "axc": 171, "bxc": 171, "tensor_product_simp": 171, "cxd": 171, "boson": 172, "fetter": 172, "welecka": 172, "secondqu": 172, "annihilateboson": 172, "fockstateket": 172, "bket": 172, "fockstatebosonket": 172, "annihilatefermion": 172, "createboson": 172, "is_only_q_annihil": 172, "destroi": [172, 216], "quasi": 172, "hole": 172, "is_only_q_cr": 172, "is_q_annihil": 172, "is_q_creat": 172, "antisymmetrictensor": 172, "bbra": 172, "fockstatebosonbra": 172, "bd": 172, "bosonicbasi": 172, "fock": 172, "NO": 172, "createfermion": 172, "wick": 172, "fbra": 172, "fockstatefermionbra": 172, "fket": 172, "fockstatefermionket": 172, "fixedbosonicbasi": 172, "n_particl": 172, "n_level": 172, "fockstat": 172, "occup": 172, "bosonbra": 172, "fockstatebra": 172, "fermi_level": 172, "r703": 172, "textwrap": [172, 248], "_q": 172, "get_subno": 172, "fermionicoper": 172, "has_q_annihil": 172, "q_annihil": 172, "has_q_creat": 172, "leftmost": 172, "q_creator": 172, "iter_q_annihil": 172, "iter_q_cr": 172, "0x": 172, "permutationoper": 172, "get_permut": 172, "varbosonicbasi": 172, "n_max": 172, "creator": 172, "evaluate_delta": 172, "einstein": [172, 233], "d_ij": 172, "_j": [172, 177, 192, 209], "d_ip": 172, "d_qp": 172, "matrix_rep": 172, "simplify_index_permut": 172, "permutation_oper": 172, "schemat": [172, 177], "abij": 172, "abji": 172, "baij": 172, "baji": 172, "permutlist": 172, "substitute_dummi": 172, "new_indic": 172, "pretty_indic": 172, "_get_ordered_dummi": 172, "_c": 172, "_d": 172, "index_group": 172, "string_of_lett": 172, "my_dummi": 172, "_v": [172, 191], "_p_0": 172, "_p_1": 172, "keep_only_fully_contract": 172, "sho": 173, "isotrop": 173, "mk": [174, 177], "legal": 174, "temperatur": [174, 188, 261], "dimensions": 174, "dimsys_si": [174, 175], "get_dimensional_depend": [174, 175], "has_integer_pow": 174, "dim_si": 174, "base_dim": 174, "derived_dim": 174, "dimensional_depend": 174, "can_transf_matrix": 174, "useless": [174, 198, 200], "inv_can_transf_matrix": 174, "dim_can_vector": 174, "dim_vector": 174, "is_consist": [174, 180], "is_dimensionless": 174, "list_can_dim": 174, "print_dim_bas": 174, "gravitational_const": [175, 179], "equivalent_dim": 175, "grav_eq": 175, "kepler": [175, 252], "venu": 175, "701": 175, "dai": [175, 179, 223], "venus_a": 175, "108208000e3": 175, "solar": 175, "solar_mass": 175, "9891e30": 175, "convert_to": [175, 179, 196, 202], "5112118495813": 175, "659097795948": 175, "astrophys": 175, "ill": 175, "astrophysicist": 176, "ua": [176, 195], "earth": [176, 188, 261], "sun": 176, "theoricist": 176, "philosophi": [176, 223, 226, 269], "rough": 177, "mole": 177, "dimensionless": 177, "unavoid": 177, "d_3": 177, "d_2": [177, 203, 227], "underbrac": [177, 190], "countabl": [177, 226], "pmatrix": 177, "kg": [177, 262], "glu": 177, "men": 177, "heat": 177, "joul": 177, "calori": 177, "stori": 177, "chemistri": 177, "page52": 177, "1952": 177, "page78": 177, "deboer79": 177, "boer": 177, "818": 177, "levyleblond77": 177, "l\u00e9vy": 177, "leblond": 177, "conceptu": [177, 194, 261], "rivista": 177, "del": [177, 242, 252, 260, 284], "nuovo": [177, 192], "cimento": [177, 192], "1977": 177, "187": [177, 201], "214": 177, "anticip": 177, "bin_prefix": 178, "abbrev": [178, 179, 207], "latex_repr": [178, 179], "encapsul": [178, 200, 226, 240], "kilo": 178, "scale_factor": 179, "pretty_unicode_repr": 179, "pretty_ascii_repr": 179, "mathml_presentation_repr": 179, "is_prefix": 179, "abbrevi": [179, 195, 207, 226, 228], "speed_of_light": 179, "reference_quant": 179, "target_unit": 179, "mile": 179, "atomic_mass_const": 179, "centimet": 179, "25146": 179, "609344": 179, "86400": 179, "660539060e": 179, "300000": 179, "planck": 179, "62963087839509e": 179, "base_unit": 180, "descr": 180, "dimension_system": 180, "derived_unit": 180, "overridden": [180, 194, 209, 284], "get_units_non_prefix": 180, "rigidli": 181, "entireti": 181, "_str": 181, "coordinatesym": [182, 184], "otherfram": [182, 252], "n_alpha_b": 182, "ny": 182, "_3": [182, 192], "orient_body_fix": 182, "orient_space_fix": 182, "orient_quaternion": 182, "quaternion": [182, 186, 191, 252, 254], "userwarn": [182, 236, 243, 280], "rotation_ord": [182, 252, 254], "xzx": 182, "xyx": [182, 252, 254], "yzy": 182, "zyz": 182, "yxy": [182, 191], "yzx": [182, 191], "zxy": 182, "xzy": 182, "zyx": 182, "yxz": 182, "orient_explicit": 182, "lambda_x": [182, 252, 254], "lambda_i": [182, 252, 254], "lambda_z": [182, 252, 254], "q0": [182, 223, 252, 254], "newnam": 182, "gen_spe": [182, 186], "variable_map": 182, "a_x": [182, 191, 207], "b_x": [182, 184, 191, 233], "b_y": [182, 184, 191, 233], "a_z": [182, 191], "b_z": [182, 191, 233], "inlist": 182, "var_in_dcm": 182, "reexpress": [182, 257], "time_deriv": [182, 184, 188], "free_dynamicsymbol": 182, "codirect": 182, "dyadic_tensor": [182, 252], "frame1": 182, "frame2": [182, 184], "second_reference_fram": 182, "ixz": 182, "inertia_dyad": 182, "pertain": [183, 189], "fieldfunct": [183, 188], "curl": [183, 252, 255, 262], "vect": [183, 252, 255], "r_x": [183, 188], "r_y": [183, 188], "r_z": [183, 188], "gradient": [183, 192, 193, 252, 255, 261], "scalar_potenti": [183, 188, 255, 259], "scalar_field": [183, 188, 252, 255, 259], "grad_field": [183, 255], "scalar_potential_differ": [183, 188, 255, 259], "sympyfi": [183, 184, 186, 255], "position2": [183, 255], "vectfield": [183, 188, 255, 259], "is_conserv": [183, 188, 255, 259], "is_solenoid": [183, 188, 255, 259], "solenoid": [183, 255], "q6": 184, "vec1": 184, "vec2": 184, "n_x": 184, "rotating_reference_fram": 184, "time_derivatives_in_the_two_fram": 184, "otherpoint": 186, "outfram": 186, "fixedfram": 186, "get_motion_param": 186, "vectori": [186, 188, 256, 261], "timevalue1": 186, "timevalue2": 186, "313": 186, "vel_vec": 186, "q1dd": 187, "q2dd": 187, "charg": [188, 261], "displac": [188, 190, 261], "temper": 188, "4xy": [188, 261], "electric_potenti": [188, 259], "r1_x": 188, "r1_y": 188, "infinitesim": [188, 223, 259], "nabla": [188, 252, 258, 259], "f_y": [188, 259], "f_x": [188, 226, 259], "sink": [188, 259], "irrot": [188, 259], "conservative_field": [188, 259], "aug": [189, 226], "dyadic_product": [189, 260], "inc": [189, 201], "w_x": 190, "w_y": 190, "w_z": 190, "w_1": [190, 202], "w_2": [190, 202], "w_3": 190, "textrm": [190, 191, 215], "u_x": 190, "sp": 190, "oq": 190, "qp": 190, "rod": 190, "went": 190, "parallelogram": 191, "c_x": 191, "c_y": 191, "c_z": 191, "train": 191, "friend": 191, "xz": [191, 193], "zy": 191, "undergon": [191, 226], "vastli": 191, "wait": 191, "mold": 191, "bp": [191, 223], "bpp": 191, "zzx": 191, "multifram": 191, "direction": 191, "racah": 192, "gaunt": 192, "rasch03": 192, "regge58": 192, "regg": 192, "544": 192, "regge59": 192, "116": [192, 201], "1959": 192, "edmonds74": 192, "edmond": 192, "princeton": [192, 227], "1957": 192, "rasch": 192, "siam": [192, 245], "sci": 192, "1416": 192, "1428": 192, "liberatodebrito82": 192, "liberato": 192, "brito": 192, "homeier96": 192, "homeier": 192, "steinborn": 192, "mol": 192, "368": 192, "1996": [192, 201, 217, 225, 252], "forum": [192, 226], "m4nzdu": 192, "7o38": 192, "jen": 192, "03": [192, 227], "oscar": 192, "gerardo": 192, "lazo": 192, "arjona": 192, "phil": 192, "adam": [192, 203], "lemaitr": 192, "2022": 192, "jyr2000": 192, "gmail": 192, "clebsch_gordan": 192, "2j_3": 192, "dot_rot_grad_ynm": 192, "_l": 192, "l_2": 192, "l_3": 192, "drastic": 192, "2l_1": 192, "2l_2": 192, "2l_3": 192, "1200": 192, "00689500421922113448": 192, "inflect": 192, "unsuit": 192, "dd": [192, 212], "ee": [192, 202], "j_5": 192, "j_6": 192, "richer": 192, "real_gaunt": 192, "realgaunt": 192, "m0": [192, 233], "00002480019791932209313156167": 192, "wigner_3j": 192, "wigner_6j": 192, "wigner_9j": 192, "j_7": 192, "j_8": 192, "j_9": 192, "05555555": 192, "1666666": 192, "wigner_d": 192, "j_z": 192, "j_y": 192, "\u03b3": [192, 274, 284], "wigner_d_smal": 192, "textbackend": 193, "plot_parametr": 193, "plot_implicit": 193, "plot3d_parametric_lin": 193, "plot3d_parametric_surfac": 193, "xlabel": 193, "ylabel": 193, "zlabel": 193, "aspect_ratio": 193, "ylim": 193, "axis_cent": 193, "xscale": 193, "yscale": 193, "autoscal": 193, "textplot": 193, "_seri": [193, 204], "baseseri": 193, "nonparametr": 193, "basebackend": 193, "parametric2dlineseri": 193, "parametric3dlineseri": 193, "red": 193, "cyan": 193, "grayscal": 193, "integers_onli": 193, "surfaceover2drangeseri": 193, "parametricsurfaceseri": 193, "surface_color": 193, "range1": 193, "range2": 193, "fill_between": 193, "inch": 193, "expr_x": 193, "expr_i": 193, "canva": 193, "range_x": 193, "range_i": 193, "nb_of_points_x": 193, "nb_of_points_i": 193, "expr_z": 193, "range_u": 193, "range_v": 193, "nb_of_points_u": 193, "nb_of_points_v": 193, "x_var": 193, "y_var": 193, "mesh": 193, "p8": 193, "p9": 193, "nrow": [193, 196], "ncolumn": 193, "stuff": [193, 238, 240, 248], "is_2dlin": 193, "oblig": 193, "only_integ": 193, "get_seg": 193, "get_color_arrai": 193, "var_start_end": 193, "r704": 193, "luiz": 193, "henriqu": 193, "figueiredo": 193, "r705": 193, "line3dbaseseri": 193, "surfacebaseseri": 193, "var_start_end_x": 193, "var_start_end_i": 193, "var_start_end_u": 193, "var_start_end_v": 193, "implicitseri": 193, "has_equ": 193, "use_interval_math": 193, "centric": 193, "get_mesh": 193, "process_seri": 193, "_process_seri": 193, "keyboard": 193, "mous": 193, "pyglet_plot": 193, "screenshot": 193, "camera": 193, "zoom": 193, "numpad": 193, "ordin": [193, 223, 248], "f5": 193, "f6": 193, "f8": 193, "drag": 193, "button": [193, 239], "curvilinear": [193, 256, 257], "__setitem__": 193, "zfade4": 193, "key1": 193, "value1": 193, "key2": 193, "value2": 193, "unbound_theta": 193, "wirefram": 193, "saddl": 193, "fz": 193, "_______________________________________________________": 193, "mediterranean": 194, "cultur": 194, "arab": 194, "lighten": 194, "tapestri": 194, "woven": 194, "european": 194, "soil": 194, "plausibl": 194, "teeter": 194, "totter": 194, "outweigh": 194, "excit": 194, "amus": 194, "kempf": 194, "1944": 194, "20th": 194, "dedekind": 194, "intim": 194, "disciplin": 194, "toolset": 194, "atiyah69": [194, 201], "gear": 194, "greuel2008": [194, 201], "interspers": 194, "lr": 194, "ilex": 194, "\u211a": [194, 207], "localis": 194, "abridg": 194, "free_modul": [194, 198], "quotient_r": [194, 198], "overload": [194, 197, 198, 256, 279], "polynomialr": [194, 198, 205], "domain_or_r": [194, 198], "quotientr": [194, 198], "base_id": [194, 198], "elbow": 194, "room": 194, "componentwis": [194, 207], "inclin": 194, "biproduct": 194, "quotient_modul": 194, "is_submodul": 194, "multiply_id": 194, "identity_hom": 194, "freemodul": 194, "freemoduleel": 194, "conicis": 194, "_contain": 194, "_syzygi": 194, "_in_terms_of_gener": 194, "_intersect": 194, "_module_quoti": 194, "reduce_el": [194, 202], "represantit": 194, "in_terms_of_gener": 194, "inclusion_hom": 194, "rela": 194, "relb": 194, "is_full_modul": 194, "module_quoti": 194, "opt": [194, 200, 219, 280], "coincis": 194, "syzygy_modul": 194, "r_n": 194, "_contains_elem": 194, "_contains_id": 194, "_quotient": 194, "_union": 194, "_product": 194, "is_whole_r": 194, "is_maxim": 194, "is_primari": 194, "is_rad": 194, "is_princip": 194, "xj": 194, "satur": 194, "subquoti": 194, "quotientmodul": 194, "subquotientmodul": 194, "killed_modul": 194, "quotientmoduleel": 194, "kill": [194, 198, 238], "quotient_hom": 194, "ker": 194, "surject": 194, "cokernel": 194, "coker": 194, "meaningfulli": 194, "restrict_domain": 194, "homomoprh": 194, "modulehomomorph": [194, 202], "_ker": 194, "_img": 194, "_kernel": 194, "_imag": 194, "_restrict_domain": 194, "_restrict_codomain": 194, "_quotient_domain": 194, "_quotient_codomain": 194, "_appli": 194, "_mul_scalar": 194, "_compos": 194, "_add": [194, 213], "is_inject": 194, "quotient_domain": 194, "is_isomorph": 194, "preimag": 194, "restrict_codomain": 194, "is_surject": 194, "quotient_codomain": 194, "induct": 194, "monogen": 194, "monogenicfiniteextens": [194, 198], "finiteextens": 194, "sqrt2": [194, 197], "_5": 194, "extensionel": [194, 198], "notinvert": [194, 200, 203], "overview": [195, 226, 260, 261], "nu_1": 195, "nu_2": 195, "nu_n": 195, "nu_i": 195, "customarili": 195, "irreduc": [195, 198, 200, 202, 203, 206, 227, 233, 284], "endow": [195, 203], "resp": [195, 198, 223], "divmod": [195, 197, 198], "cb": [195, 245], "sqf_list": [195, 198, 203], "sqf": [195, 198, 203, 220], "buchberg": [195, 200, 201, 203], "solve_poly_system": [195, 203, 225, 226], "ddm": 196, "fmt": [196, 198, 202], "matrix1": 196, "sdm": [196, 200], "dmnonsquarematrixerror": 196, "zz_i": [196, 197], "from_dict_sympi": 196, "ncol": 196, "elemsdict": 196, "from_list_sympi": 196, "from_list": [196, 198, 203, 204], "construct_domain": [196, 197, 198, 203], "from_rep": 196, "drep": 196, "dm": [196, 202], "ownership": 196, "scc": 196, "substract": 196, "to_dens": 196, "to_field": [196, 198, 203], "to_spars": 196, "aq": 196, "ccc": [196, 226], "from_ddm": 196, "domainerror": [196, 200, 203], "to_ddm": 196, "r706": 196, "pythonmpq": [197, 198], "srepr": [197, 279], "strength": 197, "richardon": 197, "dup_factor_list": 197, "factortool": [197, 200], "dup_": [197, 200], "dmp_": [197, 200], "z1": [197, 198, 225], "is_field": [197, 198], "quo": [197, 198, 200, 203], "rem": [197, 198, 200, 203], "exquo": [197, 198, 203], "exactquotientfail": [197, 198, 200, 203], "mpz": [197, 198], "of_typ": [197, 198], "z1_sympi": 197, "to_sympi": [197, 198], "from_sympi": [197, 198], "forth": [197, 202], "z_sympi": 197, "z_zz": 197, "coercionfail": [197, 200], "sum_domain": 197, "expressions_sympi": 197, "expressions_dom": 197, "result_dom": 197, "e_dom": 197, "result_sympi": 197, "qq_i": 197, "gaussianinteg": [197, 198], "gaussianrationalfield": [197, 198], "gaussianr": [197, 198], "galoi": [197, 200, 202], "finitefield": [197, 198], "pythonfinitefield": [197, 198], "gmpyfinitefield": [197, 198], "welcom": [197, 223, 277], "realel": [197, 198], "complexel": [197, 198], "mpc": 197, "xr": [197, 205], "zc": 197, "1j": 197, "_mpc_": 197, "realfield": [197, 198], "rr100": 197, "33333333333333333333333333333": 197, "hack": [197, 223, 236], "algebraic_field": [197, 198, 200, 202], "algebraicfield": [197, 198, 200, 202], "sqrt3": 197, "x_dom": 197, "p_expr": [197, 198], "polyel": [197, 198, 200, 204, 205, 207], "p_dom": 197, "xk": [197, 198, 209], "yk": [197, 198], "poly_r": [197, 198], "old_polynomialr": 197, "globalpolynomialr": 197, "polyclass": [197, 198, 203], "yr": [197, 205], "broader": 197, "get_field": [197, 198], "frac_field": [197, 198], "rationalfield": [197, 198], "old_frac_field": [197, 198], "fractionfield": [197, 198], "old_fractionfield": 197, "xf": 197, "yf": 197, "fracfield": [197, 198], "expressiondomain": [197, 198], "elements_sympi": 197, "elements_k": 197, "convert_from": [197, 198], "num_zz": 197, "num_qq": 197, "domainel": [197, 198, 205], "encompass": 197, "all_coeff": [197, 198, 203], "dom": [197, 198, 200, 215], "strang": 197, "hybrid": 197, "unreli": 197, "usefulli": 198, "pythonr": [198, 205], "p_domain": 198, "ez": [198, 233], "get_r": 198, "has_assoc_field": 198, "has_assoc_r": 198, "alg_field_from_poli": [198, 202], "root_index": 198, "almosteq": 198, "cyclotomic_field": [198, 202], "zeta7": 198, "zeta_": 198, "lexord": [198, 203], "from_algebraicfield": 198, "from_complexfield": 198, "from_expressiondomain": 198, "from_expressionrawdomain": 198, "from_ff": 198, "modularinteg": 198, "from_ff_gmpi": 198, "from_ff_python": 198, "from_fractionfield": 198, "from_globalpolynomialr": 198, "from_monogenicfiniteextens": 198, "from_polynomialr": 198, "from_qq_gmpi": 198, "from_qq_python": 198, "from_realfield": 198, "from_zz_gmpi": 198, "from_zz_python": 198, "gcdex": [198, 203], "get_exact": 198, "half_gcdex": [198, 203], "is_pid": 198, "is_r": 198, "is_nonposit": 198, "is_on": [198, 203], "rersiv": 198, "__neg__": 198, "__pos__": 198, "__sub__": 198, "q_domain": 198, "q_expr": 198, "x_domain": 198, "alg": [198, 202, 206], "trait": 198, "is_unit": 198, "__divmod__": 198, "__floordiv__": 198, "__mod__": [198, 202], "simpledomain": 198, "compositedomain": 198, "from_qq": 198, "from_zz": 198, "gmpyinteg": 198, "pythoninteg": 198, "gmpyrationalfield": 198, "pythonrationalfield": 198, "from_gaussianrationalfield": 198, "gaussianel": 198, "gaussiandomain": 198, "qq_python": 198, "zz_python": 198, "z2": 198, "z3": 198, "z4": 198, "from_gaussianinteg": 198, "as_algebraicfield": 198, "orig_ext": 198, "integral_basi": [198, 202], "maximal_ord": [198, 202], "zeta5": 198, "primes_abov": [198, 202], "primeid": [198, 202], "to_alg_num": [198, 202], "legibl": 198, "to_rat": 198, "mpelement": 198, "complexfield": 198, "lc": [198, 200, 203], "domain_or_field": 198, "dmf": 198, "coercibl": 198, "monomialord": [198, 203], "xring": 198, "vring": 198, "sring": [198, 204, 205], "polyr": [198, 200, 205], "factor_list": [198, 203, 284], "add_gen": 198, "drop_to_ground": 198, "monomial_basi": 198, "206": [198, 203], "744": 198, "945": [198, 204], "is_monomi": [198, 203], "const": [198, 207], "coeffcient": [198, 200], "inplac": 198, "shallow": [198, 214], "zero_monom": 198, "fv": 198, "clo": 198, "p64": 198, "qv": 198, "f0": 198, "imul_num": 198, "itercoeff": 198, "itermonom": 198, "iterterm": 198, "leading_expv": 198, "leading_monom": 198, "leading_term": 198, "listcoeff": 198, "listmonom": 198, "listterm": 198, "monom": [198, 203], "strip_zero": 198, "tail_degre": 198, "xfield": 198, "vfield": [198, 258], "sfield": [198, 258], "fracel": [198, 207], "lev": 198, "add_ground": [198, 203], "all_monom": [198, 203], "all_term": [198, 203], "cauchy_lower_bound": 198, "cauchy_upper_bound": 198, "clear_denom": [198, 203], "count_complex_root": 198, "sup": [198, 203, 207, 214, 215], "count_real_root": 198, "deflat": [198, 203], "y_i": [198, 200, 202, 203, 223], "x_j": [198, 200, 203], "degree_list": [198, 203], "eject": [198, 203], "exquo_ground": [198, 203], "factor_list_includ": [198, 203], "from_dict": [198, 203], "from_sympy_list": 198, "gff_list": [198, 203], "homogeneous_ord": [198, 203, 220, 223], "is_cyclotom": [198, 203], "is_ground": [198, 203], "is_homogen": [198, 203], "is_irreduc": [198, 203], "is_linear": [198, 203], "is_mon": [198, 203], "is_quadrat": [198, 203], "is_sqf": [198, 203], "l1_norm": [198, 203], "l2_norm_squar": 198, "max_norm": [198, 203], "mignotte_sep_bound_squar": 198, "mignott": [198, 200], "mul_ground": [198, 203], "pdiv": [198, 203], "pexquo": [198, 203], "pquo": [198, 203], "prem": [198, 203], "quo_ground": [198, 203], "refine_root": [198, 202, 203], "includepr": [198, 200, 203], "sqf_list_includ": [198, 203], "sqf_norm": [198, 203], "sqf_part": [198, 203], "sqr": [198, 203], "sturm": [198, 203], "sub_ground": [198, 203], "to_dict": 198, "to_exact": [198, 203], "to_r": [198, 203], "to_sympy_dict": 198, "to_sympy_list": 198, "to_tupl": 198, "total_degre": [198, 203, 220], "trunc": [198, 203, 206], "frac_unifi": 198, "half_per": 198, "poly_unifi": 198, "gr\u00f6bner": 199, "wester": [199, 270], "agca": [199, 270], "l0": 200, "legitim": 200, "uninterest": 200, "bulk": [200, 217], "x_u": 200, "dup__": 200, "densebas": 200, "dmp_lc": 200, "poly_lc": 200, "dmp_tc": 200, "poly_tc": 200, "dmp_ground_lc": 200, "dmp_ground_tc": 200, "dmp_true_lt": 200, "n_1": [200, 225, 227], "n_k": 200, "dmp_degre": 200, "dmp_degree_in": 200, "dmp_degree_list": 200, "dmp_strip": 200, "dmp_valid": 200, "dup_revers": 200, "dmp_copi": 200, "dmp_to_tupl": 200, "dmp_normal": 200, "dmp_convert": 200, "to_domain": 200, "dmp_from_sympi": 200, "dmp_nth": 200, "dmp_ground_nth": 200, "dmp_zero_p": 200, "dmp_zero": 200, "dmp_one_p": 200, "dmp_one": 200, "dmp_ground_p": 200, "dmp_ground": 200, "dmp_negative_p": 200, "dmp_positive_p": 200, "dmp_from_dict": 200, "dmp_to_dict": 200, "dmp_swap": 200, "dmp_permut": 200, "dmp_nest": 200, "dmp_rais": 200, "dmp_deflat": 200, "dmp_multi_defl": 200, "dmp_inflat": 200, "dmp_exclud": 200, "dmp_includ": 200, "dmp_inject": 200, "dmp_eject": 200, "dmp_terms_gcd": 200, "dmp_list_term": 200, "dmp_apply_pair": 200, "dmp_slice": 200, "dup_random": 200, "densearith": 200, "dmp_add_term": 200, "dmp_sub_term": 200, "dmp_mul_term": 200, "dmp_add_ground": 200, "dmp_sub_ground": 200, "dmp_mul_ground": 200, "dmp_quo_ground": 200, "dmp_exquo_ground": 200, "dup_lshift": 200, "dup_rshift": 200, "dmp_ab": 200, "dmp_neg": 200, "dmp_add": 200, "dmp_sub": 200, "dmp_add_mul": 200, "dmp_sub_mul": 200, "dmp_mul": 200, "dmp_sqr": 200, "dmp_pow": 200, "dmp_pdiv": 200, "dmp_prem": 200, "dmp_pquo": 200, "dmp_pexquo": 200, "dmp_rr_div": 200, "dmp_ff_div": 200, "dmp_div": 200, "dmp_rem": 200, "dmp_quo": 200, "dmp_exquo": 200, "dmp_max_norm": 200, "dmp_l1_norm": 200, "dmp_expand": 200, "densetool": 200, "dmp_integr": 200, "dmp_integrate_in": 200, "dmp_diff": 200, "dmp_diff_in": 200, "dmp_eval": 200, "dmp_eval_in": 200, "dmp_eval_tail": 200, "dmp_diff_eval_in": 200, "dmp_trunc": 200, "dmp_ground_trunc": 200, "dup_mon": 200, "dmp_ground_mon": 200, "dup_cont": 200, "dmp_ground_cont": 200, "dup_primit": 200, "dmp_ground_primit": 200, "dup_extract": 200, "dmp_ground_extract": 200, "dup_real_imag": 200, "bivari": [200, 206, 223, 227], "dup_mirror": 200, "dup_scal": 200, "dup_shift": 200, "dup_transform": 200, "dmp_compos": 200, "dup_decompos": 200, "t_m": 200, "r707": 200, "dmp_lift": 200, "dup_sign_vari": 200, "dmp_clear_denom": 200, "k_0": 200, "dmp_revert": 200, "gf_": 200, "justifi": 200, "necess": 200, "u_0": 200, "m_0": [200, 220], "m_n": 200, "gf_crt1": 200, "9215": 200, "9405": 200, "9603": 200, "gf_crt2": 200, "gf_int": 200, "gf_degre": 200, "gf_lc": 200, "gf_tc": 200, "gf_strip": 200, "gf_trunc": 200, "gf_normal": 200, "gf_from_dict": 200, "gf_to_dict": 200, "gf_from_int_poli": 200, "gf_to_int_poli": 200, "gf_neg": 200, "gf_add_ground": 200, "gf_sub_ground": 200, "gf_mul_ground": 200, "gf_quo_ground": 200, "gf_add": 200, "gf_sub": 200, "gf_mul": 200, "gf_sqr": 200, "gf_add_mul": 200, "gf_sub_mul": 200, "gf_expand": 200, "gf_div": 200, "r708": 200, "monagan93": [200, 201], "r709": 200, "gathen99": [200, 201], "gf_rem": 200, "gf_quo": 200, "gf_exquo": 200, "gf_lshift": 200, "gf_rshift": 200, "gf_pow": 200, "gf_pow_mod": 200, "r710": 200, "gf_gcd": 200, "gf_lcm": 200, "gf_cofactor": 200, "gf_gcdex": 200, "eea": 200, "r711": 200, "gf_monic": 200, "gf_diff": 200, "gf_eval": 200, "gf_multi_ev": 200, "gf_compos": 200, "gf_compose_mod": 200, "gf_trace_map": 200, "r712": 200, "gathen92": [200, 201], "gf_random": 200, "gf_irreduc": 200, "gf_irreducible_p": 200, "gf_sqf_p": 200, "gf_sqf_part": 200, "gf_sqf_list": 200, "e_2": [200, 203], "e_k": 200, "f_j": [200, 217], "gf_sqf": 200, "r713": 200, "geddes92": [200, 201], "gf_qmatrix": 200, "berlekamp": 200, "gf_qbasi": 200, "gf_berlekamp": 200, "gf_zassenhau": 200, "gf_shoup": 200, "gf_factor_sqf": 200, "gf_factor": 200, "e_d": 200, "cantor": 200, "zassenhau": [200, 202], "shoup": [200, 201], "kaltofen": [200, 201], "gathen": [200, 201], "gf_factor_method": 200, "r714": 200, "gf_valu": 200, "2204": 200, "gf_csolv": 200, "congruent": [200, 217, 220], "189": 200, "112": [200, 204], "139": 200, "r715": 200, "ivan": 200, "niven": 200, "zuckerman": 200, "montgomeri": 200, "infeas": [200, 203], "sdm_": 200, "distributedmodul": 200, "sdm_monomial_mul": 200, "sdm_monomial_deg": 200, "f_5": 200, "sdm_monomial_divid": 200, "sdm_lc": 200, "sdm_to_dict": 200, "sdm_from_dict": 200, "dic": 200, "sdm_add": 200, "2f_1": 200, "3f_1": 200, "yf_1": 200, "xf_1": 200, "sdm_lm": 200, "sdm_lt": 200, "sdm_mul_term": 200, "2xy": [200, 278], "8xy": 200, "2y": [200, 220, 223, 226, 278], "sdm_zero": 200, "sdm_deg": 200, "sdm_from_vector": 200, "sdm_to_vector": 200, "variant": [200, 223, 226], "qg": 200, "remark": [200, 206, 217, 223], "uf": 200, "vg": 200, "zout": 200, "euclidtool": 200, "dmp_half_gcdex": 200, "dmp_gcdex": 200, "dmp_invert": 200, "dmp_euclidean_pr": 200, "dmp_primitive_pr": 200, "exceedingli": 200, "collin": [200, 201], "collins67": [200, 201], "subdomain": 200, "2l": 200, "remainin": 200, "subdetermin": 200, "n_2": [200, 227], "n_": [200, 220], "abnorm": 200, "gamma_i": 200, "brown": [200, 201, 227], "traub": [200, 201], "browntraub71": [200, 201], "brown78": [200, 201], "discoveri": [200, 280], "dmp_inner_subresult": 200, "729": 200, "sre": 200, "dmp_subresult": 200, "dmp_prs_result": 200, "dmp_zz_modular_result": 200, "dmp_zz_collins_result": 200, "dmp_qq_collins_result": 200, "dmp_result": 200, "dmp_discrimin": 200, "dmp_rr_prs_gcd": 200, "cff": [200, 203], "cfg": [200, 203], "dmp_ff_prs_gcd": 200, "dmp_zz_heu_gcd": 200, "r716": 200, "liao95": [200, 201], "dmp_qq_heu_gcd": 200, "dmp_inner_gcd": 200, "dmp_gcd": 200, "dmp_lcm": 200, "dmp_content": 200, "dmp_primit": 200, "dmp_cancel": 200, "dmp_trial_divis": 200, "dmp_zz_mignotte_bound": 200, "dup_zz_hensel_step": 200, "hensel": 200, "r717": 200, "dup_zz_hensel_lift": 200, "f_list": 200, "multifactor": 200, "r718": 200, "dup_zz_zassenhau": 200, "dup_zz_irreducible_p": 200, "eisenstein": 200, "dup_cyclotomic_p": 200, "bradford": 200, "russel": 200, "251": 200, "berlin": 200, "heidelberg": 200, "dup_zz_cyclotomic_poli": 200, "dup_zz_cyclotomic_factor": 200, "r719": 200, "weisstein09": [200, 201], "dup_zz_factor_sqf": 200, "dup_zz_factor": 200, "r720": 200, "dmp_zz_wang_non_divisor": 200, "wang": [200, 201], "eez": 200, "dmp_zz_wang_test_point": 200, "dmp_zz_wang_lead_coeff": 200, "dmp_zz_diophantin": 200, "dmp_zz_wang_hensel_lift": 200, "dmp_zz_wang": 200, "enhanc": [200, 227], "r721": 200, "wang78": [200, 201], "r722": 200, "dmp_zz_factor": 200, "r723": 200, "dmp_ext_factor": 200, "dup_gf_factor": 200, "dmp_factor_list": 200, "dmp_factor_list_includ": 200, "dmp_irreducible_p": 200, "groebnertool": 200, "polyconfig": [200, 203], "f5b": [200, 203], "spoli": 200, "red_groebn": 200, "beckerweispfenning93": 200, "is_groebn": 200, "is_minim": 200, "is_reduc": 200, "fglmtool": 200, "matrix_fglm": 200, "o_to": 200, "o_from": 200, "r724": 200, "fauger": [200, 203], "gianni": [200, 203, 225], "mora": [200, 201, 203, 225], "sdm_spoli": 200, "phantom": 200, "sca": 200, "defn": 200, "sdm_ecart": 200, "ecart": 200, "sdm_nf_mora": 200, "nf": 200, "sdm_groebner": 200, "sugar": [200, 201, 232], "giovini": [200, 201], "polyopt": [200, 204], "build_opt": 200, "polyerror": [200, 203], "basepolynomialerror": 200, "operationnotsupport": 200, "heuristicgcdfail": 200, "homomorphismfail": 200, "isomorphismfail": [200, 202], "extraneousfactor": 200, "evaluationfail": 200, "refinementfail": 200, "notrevers": [200, 203], "notalgebra": 200, "polynomialerror": [200, 203], "unificationfail": [200, 202], "generatorsneed": 200, "computationfail": 200, "exc": 200, "generatorserror": 200, "univariatepolynomialerror": 200, "multivariatepolynomialerror": [200, 203], "polificationfail": 200, "orig": 200, "optionerror": 200, "flagerror": 200, "modulargcd": 200, "modgcd_univari": 200, "monagan00": [200, 201], "modgcd_bivari": 200, "modgcd_multivari": 200, "_modgcd_multivariate_p": 200, "brown71": [200, 201], "degbound": 200, "contbound": 200, "func_field_modgcd": 200, "reconstuct": 200, "z_p": 200, "spuriou": [200, 225], "hoeij04": [200, 201], "scarc": 200, "hsin": 201, "chao": 201, "liao": 201, "fateman": 201, "montreal": 201, "quebec": 201, "canada": 201, "240": [201, 209, 255], "247": [201, 225], "von": [201, 227], "zur": 201, "gerhard": 201, "cambridg": [201, 220], "weisstein": 201, "cyclotomicpolynomi": 201, "1215": 201, "1231": 201, "czapor": 201, "labahn": 201, "monagan": [201, 219], "disco": 201, "721": 201, "kaltofen98": 201, "subquadrat": 201, "223": 201, "1998": [201, 220], "1179": 201, "1197": 201, "shoup95": 201, "397": 201, "shoup91": 201, "cox97": [201, 203], "shea": [201, 203], "ajwa95": 201, "ajwa": 201, "liu": 201, "groebner": [201, 202, 203, 206, 219, 225, 226], "cites": [201, 219], "ist": [201, 216, 219], "psu": [201, 216, 219], "mycites": 201, "login": 201, "bose03": 201, "bose": 201, "guiver": 201, "giovini91": 201, "bronstein93": [201, 203], "salvi": [201, 204], "kiev": 201, "ukrain": 201, "buchberger01": [201, 203], "theorist": 201, "moreno": 201, "diaz": 201, "freir": 201, "eurocast": 201, "februari": 201, "davenport88": 201, "siret": 201, "tournier": 201, "london": [201, 220], "124": [201, 273], "greuel": 201, "pfister": 201, "atiyah": 201, "macdonald": 201, "142": 201, "1971": [201, 223], "505": 201, "237": 201, "249": 201, "wittkopf": 201, "478": 201, "hoeij": 201, "297": [201, 203], "304": [201, 203], "wang81": 201, "adic": 201, "symsac": 201, "hoeij02": 201, "manwright94": [201, 203], "yiu": 201, "kwong": 201, "franci": 201, "wright": 201, "dispers": [201, 227], "190347": 201, "190413": 201, "koepf98": [201, 203], "koepf": [201, 209, 219], "vieweg": 201, "abramov71": [201, 203], "abramov": [201, 225], "ussr": 201, "330": 201, "man93": [201, 203], "376": 201, "sciencedirect": 201, "pii": 201, "s0747717183710539": 201, "kapur1994": 201, "deepak": 201, "kapur": 201, "tushar": 201, "saxena": 201, "yang": 201, "dixon": 201, "researchg": [201, 227], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 201, "palancz08": 201, "pal\u00e1ncz": 201, "zaletnyik": 201, "jl": [201, 240], "awang": 201, "ew": 201, "grafarend": 201, "geodet": 201, "geodesi": 201, "225607735_dixon_result": 201, "s_solution_of_systems_of_geodetic_polynomial_equ": 201, "bruce97": 201, "bruce": 201, "randal": 201, "donald": [201, 242], "mundi": 201, "artifici": [201, 210], "intellig": [201, 219, 223, 284], "orlando": 201, "www2": 201, "duke": 201, "donaldlab": 201, "symbolicnumericalcomput": 201, "045": 201, "087": 201, "stiller96": 201, "stiller": 201, "citeseerx": [201, 216], "viewdoc": [201, 216, 219], "590": 201, "2021": 201, "rep1": [201, 216], "cohen93": [201, 202], "henri": 201, "olga": 202, "tausski": 202, "zimmer": 202, "pohst": 202, "articul": 202, "numberfield": 202, "mathfrak": 202, "regul": 202, "alpha_m": 202, "round_two": 202, "prime_decomp": 202, "prime_valu": 202, "minimal_polynomi": 202, "field_isomorph": 202, "nilrad": 202, "z_k": 202, "zk": 202, "ordinarili": 202, "503": 202, "r725": 202, "r726": 202, "powerbasisel": 202, "ramif": 202, "as_submodul": 202, "bundl": 202, "test_factor": 202, "deliber": 202, "is_inert": 202, "inert": [202, 223], "reduce_anp": 202, "elt": 202, "reduce_alg_num": 202, "field_gen": 202, "just_gen": 202, "reagent": 202, "kummer": 202, "1847": 202, "ueber": 202, "zerlegung": 202, "crell": 202, "r727": 202, "_minpoly_compos": 202, "stall": 202, "alli": 202, "monomorph": 202, "alpha_i": 202, "alpha_n": 202, "lincomb": 202, "primtiiv": 202, "meanwhil": 202, "moduleel": 202, "powerbasi": 202, "submodule_from_matrix": 202, "ancestor": 202, "to_col": 202, "nca": 202, "circumst": [202, 278], "_mult_tab": 202, "successfulli": 202, "moduleendomorph": 202, "innerendomorph": 202, "endomorphismr": 202, "spec": [202, 203], "i_n": [202, 203, 228], "include_self": 202, "basis_el": 202, "element_from_r": 202, "endomorphism_r": 202, "is_compat_col": 202, "mult_tab": 202, "mult": 202, "closurefailur": 202, "nearest_common_ancestor": 202, "number_field": 202, "power_basis_ancestor": 202, "incom": 202, "halv": 202, "submodule_from_gen": 202, "over_power_basi": 202, "starts_with_un": 202, "hnf_modulu": 202, "whole_submodul": 202, "element_from_anp": 202, "element_from_alg_num": 202, "element_from_poli": 202, "qq_matrix": 202, "basis_element_pullback": 202, "discard_befor": 202, "structureerror": 202, "cohen00": 202, "make_mod_elt": 202, "qq_col": 202, "from_int_list": 202, "is_compat": 202, "reduced_mod_p": 202, "to_ancestor": 202, "anc": 202, "to_par": 202, "to_anp": 202, "inner_endomorph": 202, "event": [202, 227], "find_min_poli": 202, "missingunityerror": 202, "is_int": 202, "get_num_denom": 202, "extract_fundamental_discrimin": 202, "r728": 202, "algintpow": 202, "zeta_pow": 202, "r729": 202, "coeff_search": 202, "supplement_a_subspac": 202, "dmrankerror": 202, "v_n": 202, "w_r": 202, "w_j": 202, "u_j": 202, "r730": 202, "poly_from_expr": 203, "parallel_poly_from_expr": 203, "exprtool": 203, "gcd_list": 203, "lcm_list": 203, "destruct": 203, "2079": 203, "1401": 203, "2715": 203, "6720": 203, "1092": 203, "gff": 203, "check_sqf": 203, "count_root": 203, "nroot": [203, 225], "maxstep": 203, "cleanup": 203, "73205080756888": 203, "73205080756887729352744634151": 203, "ground_root": 203, "nth_power_roots_poli": 203, "r_f": 203, "r_g": 203, "_signsimp": 203, "q_n": 203, "is_zero_dimension": [203, 226], "donal": 203, "230": [203, 225], "ec": 203, "em": 203, "di": 203, "dispersionset": 203, "gp": [203, 223], "free_symbols_in_domain": 203, "from_poli": 203, "get_domain": 203, "get_modulu": 203, "has_only_gen": 203, "vincent": [203, 245], "akrita": 203, "strzebonski": 203, "va": 203, "alkiviadi": 203, "panagioti": 203, "vigkla": 203, "265": 203, "279": 203, "polnomi": 203, "is_multivari": 203, "is_univari": 203, "ltrim": 203, "_only_": 203, "sturmian": 203, "subresultants_qq_zz": 203, "suffix": [203, 240], "_pg": 203, "_amv": 203, "rem_z": 203, "premultipli": 203, "rat_clear_denom": 203, "_ignor": 203, "retract": 203, "same_root": 203, "r0": 203, "set_domain": 203, "set_modulu": 203, "termwis": 203, "fglm": 203, "r731": 203, "horner_schem": 203, "equispac": 203, "viet": 203, "itermonomi": 203, "min_degre": 203, "gib": 203, "monomial_kei": 203, "monomial_count": 203, "gradedlexord": 203, "reversedgradedlexord": 203, "clear_cach": 203, "_get_interv": 203, "165": [203, 227, 245], "169": 203, "eval_approx": 203, "evalf_r": 203, "eval_r": 203, "69629": 203, "71318": 203, "805": 203, "3275": 203, "65536": [203, 206, 207], "414645": 203, "131072": 203, "6545": 203, "104755": 203, "2097152": 203, "6634255": 203, "_all_root": 203, "use_cach": 203, "_complexes_index": 203, "_complexes_sort": 203, "_count_root": 203, "_ensure_complexes_init": 203, "_ensure_reals_init": 203, "_eval_is_imaginari": 203, "_get_complex": 203, "_get_complexes_sqf": 203, "currentfactor": 203, "_get_real": 203, "_get_reals_sqf": 203, "_get_root": 203, "_indexed_root": 203, "_new": 203, "_postprocess_root": 203, "_preprocess_root": 203, "heroic": [203, 225], "_real_root": 203, "_reals_index": 203, "_reals_sort": 203, "_refine_complex": 203, "_roots_trivi": 203, "_set_interv": 203, "861136": 203, "86113631159405258": 203, "polyroot": 203, "quintic": [203, 225], "unread": [203, 243], "casu": 203, "irreducibili": 203, "unsolvablefactorerror": [203, 225], "inexpress": 203, "unsolv": [203, 226], "r732": 203, "cubic_funct": 203, "trigonometric_": 203, "28and_hyperbol": 203, "29_method": 203, "specialpoli": 203, "swinnerton_dyer_poli": 203, "swinnerton": 203, "dyer": 203, "symmetric_poli": 203, "random_poli": 203, "gegenbau": [203, 207], "jakob": 203, "psum": 203, "3144337": 203, "r733": 203, "bernoulli_c_poli": 203, "reindex": 203, "swiss": 203, "knife": 203, "630": 203, "5124": 203, "12465": 203, "155": 203, "r734": 203, "partfrac": [203, 209], "undertermin": 203, "_w": [203, 214], "apart_list": 203, "assemble_partfrac_list": 203, "bunch": 203, "pfd": 203, "r735": 203, "partial_list": 203, "reassembl": 203, "pfda": 203, "r736": 203, "r737": 203, "r738": 203, "r739": 203, "r740": 203, "r741": 203, "r742": 203, "r743": 203, "widen": 204, "ring_seri": 204, "rs_sin": 204, "166666666666667": 204, "puiseux": 204, "rs_co": 204, "rs_tan": 204, "took": [204, 216], "eleg": [204, 206], "rs_exp": 204, "everyon": 204, "blazingli": 204, "promin": 204, "gradual": 204, "rs_": 204, "rs_log": 204, "rs_lambertw": 204, "rs_atan": 204, "arctang": 204, "rs_asin": 204, "_tan1": 204, "rs_cot": 204, "rs_cos_sin": 204, "rs_atanh": 204, "rs_sinh": 204, "rs_cosh": 204, "rs_tanh": 204, "rs_hadamard_exp": 204, "inver": 204, "rs_mul": 204, "rs_squar": 204, "rs_pow": 204, "rs_series_invers": 204, "rs_series_revers": 204, "a_kx_k": 204, "ar_i": 204, "ar_": 204, "ae": 204, "rs_trunc": 204, "rs_nth_root": 204, "160249952256379": 204, "44224957030741": 204, "rs_sub": 204, "rs_diff": 204, "rs_integr": 204, "rs_newton": 204, "rs_compose_add": 204, "r744": 204, "bostan": 204, "flajolet": 204, "schost": 204, "4579": 204, "institut": 204, "nation": 204, "recherch": 204, "informatiqu": 204, "automatiqu": 204, "rs_is_puiseux": 204, "rs_puiseux": 204, "rs_puiseux2": 204, "rs_series_from_list": 204, "concur": 204, "rs_fun": 204, "_tan": 204, "_nth": 204, "_root": 204, "_fun": 204, "mul_xin": 204, "pow_xin": 204, "_raw": 205, "unkown": 205, "sympy_eqs_to_r": 205, "eqs_r": 205, "eqs_to_matrix": 205, "eqs_coeff": 205, "eqs_rh": 205, "_solve_lin_si": 205, "_solve_lin_sys_compon": 205, "critiqu": 206, "wester1999": 206, "systemat": 206, "153": 206, "\u2124": [206, 207, 226, 285], "unm": 206, "driver": [207, 239], "adequ": 207, "emptyprint": 207, "_sympystr": 207, "mathml": 207, "inconveni": 207, "_print_": 207, "expr_class": 207, "hierarchi": [207, 227], "_print_rat": 207, "_print_numb": 207, "_print_atom": 207, "_print_bas": 207, "print_latex": 207, "mylatexprint": 207, "_print_deriv": 207, "print_my_latex": 207, "modop": 207, "subcompon": 207, "outermost": [207, 215, 219, 231], "modopmodewrong": 207, "modopnestedwrong": 207, "modopsettingswrong": 207, "subobject": 207, "infrastructur": [207, 224], "printer_exampl": 207, "set_global_set": 207, "stringpict": 207, "pretty_symbologi": 207, "prettyform": 207, "hline": 207, "vline": 207, "ascii": 207, "_pretti": 207, "use_unicode_sqrt_char": 207, "root_not": 207, "mat_symbol_styl": 207, "prettifi": 207, "bold": 207, "c89codeprint": 207, "print_ccod": 207, "tgamma": 207, "known_functions_c89": 207, "known_functions_c99": 207, "fmax": 207, "fmin": 207, "lgamma": 207, "indent_cod": 207, "cfunction_format": 207, "derefer": 207, "dereferenc": 207, "symbols_to_declar": 207, "not_supported_funct": 207, "code_text": 207, "m_sqrt2": 207, "math_macro": 207, "m_sqrt2l": 207, "cxx": 207, "cxx98codeprint": 207, "print_rcod": 207, "rcode": 207, "known_funct": 207, "_rcode": 207, "rfunction_str": 207, "rfunction_format": 207, "ifels": 207, "type_map": 207, "name_mangl": 207, "mangl": 207, "floor1": 207, "floor2": 207, "print_fcod": 207, "_fcode": 207, "conjg": 207, "32768": 207, "7182818284590452d0": 207, "1415926535897932d0": 207, "718281828459045235360287d0": 207, "141592653589793238462643d0": 207, "869604401089358618834491d0": 207, "mygamma": 207, "allow_unknown_funct": 207, "smtlib": 207, "smtlibprint": 207, "symbol_t": 207, "_smtlib": 207, "_default_set": 207, "known_const": 207, "ite": 207, "known_typ": 207, "smtlib_cod": 207, "auto_assert": 207, "auto_declar": 207, "prefix_express": 207, "suffix_express": 207, "log_warn": 207, "booleanfunct": 207, "dreal": 207, "14159": 207, "my_smt_variable_for_pi": 207, "postfix": [207, 245], "riski": 207, "sound": [207, 284], "noop": 207, "pw": 207, "pythontyp": 207, "smt_builtin_func": 207, "existing_smtlib_fcn": 207, "user_def_func": 207, "fun": [207, 224, 277], "coshintegr": 207, "cosintegr": 207, "expintegralei": 207, "factorialpow": 207, "heavisidetheta": 207, "sinhintegr": 207, "sinintegr": 207, "arccosh": 207, "arccoth": 207, "arcsinh": 207, "arctanh": 207, "dirichleteta": 207, "gegenbauerc": 207, "hypergeometricpfq": 207, "sphericalbesselj": 207, "logintegr": 207, "lucasl": 207, "mathieu": 207, "riemann_xi": 207, "riemannxi": 207, "stieltjesgamma": 207, "sphericalbess": 207, "mcodeprint": 207, "_mcode": 207, "mcode": 207, "maplecodeprint": 207, "_mapl": 207, "maple_cod": 207, "print_maple_cod": 207, "javascriptcodeprint": 207, "_javascript": 207, "js_function_str": 207, "known_fcns_src1": 207, "known_fcns_src2": 207, "conj": 207, "juliacodeprint": 207, "_julia": 207, "harmless": [207, 280], "cosmet": 207, "existing_julia_fcn": 207, "coshint": 207, "cosint": 207, "sinhint": 207, "sinint": 207, "bincoeff": 207, "logint": 207, "gammaln": 207, "octavecodeprint": 207, "_octav": 207, "recip": [207, 245], "powf": 207, "signum": 207, "rustcodeprint": 207, "_rust_cod": 207, "7_f64": 207, "_aesara": 207, "tensorvari": 207, "floatx": 207, "squeez": 207, "dim_handl": 207, "gtkmathview": 207, "widget": 207, "print_gtk": 207, "libgtkmathview": 207, "start_view": 207, "_lambdacod": 207, "accepted_latex_funct": 207, "parenthesize_sup": 207, "fold_frac_pow": 207, "fold_func_bracket": 207, "fold_short_frac": 207, "inv_trig_styl": 207, "itex": 207, "ln_notat": 207, "long_frac_ratio": 207, "mat_delim": 207, "mat_str": 207, "mul_symbol": 207, "symbol_nam": 207, "gothic_re_im": 207, "decimal_separ": 207, "diff_oper": 207, "smallmatrix": [207, 278], "amsmath": 207, "fracton": 207, "semicolon": 207, "monospac": 207, "mathtt": 207, "mathml2": 207, "mathmlprinterbas": 207, "mathmlcontentprint": 207, "mathmlpresentationprint": 207, "chapter4": 207, "_mathml_cont": 207, "mathml_tag": 207, "chapter3": 207, "_mathml_present": 207, "utf": 207, "mul_symbol_mathml_numb": 207, "xb7": 207, "print_mathml": [207, 283], "mrow": 207, "mpmathprint": 207, "fully_qualified_modul": 207, "print_python": 207, "textual": 207, "reprprint": 207, "_sympyrepr": 207, "reprifi": 207, "sympy_integ": 207, "displayhook": [207, 238], "pprint_nod": 207, "nb2": 207, "print_nod": 207, "asssumpt": 207, "determinisit": 207, "backtrac": 207, "print_tre": 207, "outputbuff": 207, "dvioption": 207, "outputtexfil": 207, "extra_preambl": 207, "latex_set": 207, "postscript": 207, "tex": 207, "eulervm": 207, "sty": 207, "debian": 207, "ubuntu": 207, "unset": [207, 219], "gimp": 207, "evinc": 207, "kdvi": 207, "xdvi": 207, "xdg": 207, "system_default_view": 207, "gracefulli": [207, 231], "generet": 207, "bytesio": 207, "usepackag": 207, "amsfont": 207, "renewcommand": 207, "popen": 207, "phidd": 207, "bitmap": 207, "split_super_sub": 207, "var_sub1__sup_sub2": 207, "assignmenterror": 207, "bitwiseand": 207, "bitwiseor": 207, "bitwisexor": 207, "precedence_valu": 207, "kroneckerproduct": 207, "tensadd": [207, 233], "tensmul": [207, 233], "precedence_funct": 207, "precedence_float": 207, "precedence_fracel": 207, "precedence_integ": 207, "precedence_mul": 207, "precedence_polyel": 207, "precedence_r": 207, "precedence_unevaluatedexpr": 207, "databas": [207, 217], "pretty_use_unicod": 207, "pretty_try_use_unicod": 207, "xstr": 207, "greek_lett": 207, "digit_2txt": 207, "ONE": 207, "seven": 207, "symb_2txt": 207, "parenthesi": [207, 231], "\u2080": 207, "\u2081": 207, "\u2082": 207, "\u2083": 207, "\u2084": 207, "\u2085": 207, "\u2086": 207, "\u2087": 207, "\u2088": 207, "\u2089": 207, "\u2090": 207, "\u1d66": 207, "\u1d6a": 207, "\u2091": 207, "\u1d67": 207, "\u2095": 207, "\u1d62": 207, "\u2096": 207, "\u2097": 207, "\u2098": 207, "\u2099": 207, "\u2092": 207, "\u209a": 207, "\u1d69": 207, "\u1d63": 207, "\u1d68": 207, "\u209b": 207, "\u209c": 207, "\u1d64": 207, "\u1d65": 207, "\u2093": 207, "\u2070": 207, "\u00b9": 207, "\u00b2": 207, "\u00b3": 207, "\u2074": 207, "\u2075": 207, "\u2076": 207, "\u2077": 207, "\u2078": 207, "\u2079": 207, "\u2071": 207, "\u207f": 207, "xobj": 207, "vobj": 207, "hobj": 207, "vf": 207, "\u00bd": 207, "\u2153": 207, "\u00bc": 207, "\u2155": 207, "\u2159": 207, "\u215b": 207, "\u2154": 207, "\u2156": 207, "\u00be": 207, "\u2157": 207, "\u215c": 207, "\u2158": 207, "\u215a": 207, "\u215d": 207, "\u215e": 207, "xsym": 207, "symbologi": 207, "atoms_t": 207, "\u2102": [207, 285], "emptysequ": [207, 213], "\u2115": 207, "\u2115\u2080": 207, "\u211d": [207, 285], "symmetricdiffer": [207, 215, 226], "pretty_atom": 207, "atom_nam": 207, "pretty_symbol": 207, "symb_nam": 207, "bold_nam": 207, "stylis": 207, "_print_meijerg": 207, "_print_hyp": 207, "jurjen": 207, "bo": 207, "hate": 207, "spammer": 207, "pietjepuk314": 207, "oc": [207, 258], "oohai": 207, "gedg": 207, "email": 207, "mun": 207, "terminal_str": 207, "baselin": 207, "leftslash": 207, "slash": [207, 238], "paren": 207, "ifascii_nougli": 207, "line_break": 207, "ugli": 207, "terminal_width": 207, "wider": 207, "maxdepth": 207, "labelfunc": 207, "digraph": [207, 245, 283], "rankdir": [207, 283], "_sparse_": 208, "flavor": 208, "________": [208, 227, 245], "x\u2080": 208, "greatli": 208, "numbered_symbol": [208, 219, 223, 245], "postprocessor": [208, 219], "reduced_expr": [208, 219], "formalpowerseri": 209, "coeff_bel": 209, "formalpowerseriescompos": 209, "r745": 209, "comtet": 209, "loui": 209, "reidel": 209, "1974": 209, "720": [209, 223, 245], "formalpowerseriesinvers": 209, "r746": 209, "upto": [209, 214, 223], "formalpowerseriesproduct": 209, "rational_algorithm": 209, "compute_fp": 209, "hyper_algorithm": 209, "omposit": 209, "bell_seq": 209, "finiteformalpowerseri": 209, "rational_independ": 209, "ra": 209, "admiss": [209, 212], "r747": 209, "r748": 209, "simpled": 209, "exp_r": 209, "explik": 209, "hyper_r": 209, "rsolve_hypergeometr": 209, "r749": 209, "r750": 209, "solve_d": 209, "fourierseri": 210, "scalex": 210, "shiftx": 210, "sigma_approxim": 210, "gibb": 210, "bigl": 210, "bigr": 210, "lanczo": 210, "r751": 210, "gibbs_phenomenon": 210, "r752": 210, "sawtooth": 210, "bn": 210, "r753": 210, "limitseq": 212, "difference_delta": 212, "r754": 212, "differencedelta": 212, "limit_seq": [212, 214], "safeguard": 212, "r755": 212, "kauer": 212, "seqper": 213, "seqformula": 213, "seqbas": 213, "coeff_mul": 213, "find_linear_recurr": 213, "gfvar": 213, "seqadd": 213, "seqmul": 213, "_mul": 213, "recursiveseq": 213, "fib": 213, "invok": [214, 238, 239], "workhors": 214, "succ": [214, 227], "asymp": 214, "exposit": 214, "gloss": 214, "wsym": 214, "test_rewrite1": 214, "build_expression_tre": 214, "mrv_leadterm": 214, "e0": 214, "calculate_seri": 214, "limitinf": 214, "constantli": 214, "subsset": 214, "mrv_max1": 214, "mrv_max3": 214, "expsf": 214, "expsg": 214, "expsboth": 214, "o2": 214, "do_sub": 214, "r756": 214, "7048138294": 214, "7182818285": 214, "6349839002": 214, "6449340668": 214, "shank": 214, "6881721793": 214, "6931396564": 214, "6931471806": 214, "6931471805599453094172321215": 214, "r757": 214, "residue_theorem": 214, "neighborhood": 215, "rim": 215, "conditionset": [215, 226, 227, 285], "affirm": 215, "infimum": 215, "imageset": [215, 226, 285], "is_clos": 215, "closed": 215, "is_disjoint": 215, "r758": 215, "disjoint_set": 215, "is_open": 215, "is_proper_subset": 215, "is_proper_superset": 215, "left_open": 215, "is_superset": 215, "isdisjoint": 215, "issubset": 215, "issuperset": 215, "productset": [215, 226], "powerset": 215, "fancyset": 215, "complexregion": [215, 226], "disjointunion": 215, "lebesgu": 215, "r759": 215, "power_set": 215, "symmetric_differ": 215, "r760": 215, "right_open": 215, "mpi": 215, "r761": 215, "interval_": 215, "as_rel": 215, "is_left_unbound": 215, "is_right_unbound": 215, "r762": 215, "r763": 215, "union_": 215, "28set_theori": 215, "r764": 215, "intersection_": 215, "coin": [215, 227], "r765": 215, "cartesian_product": 215, "is_iter": 215, "r766": 215, "complementset": 215, "r767": 215, "disjoint_union": 215, "r768": 215, "empty_set": 215, "r769": 215, "universal_set": 215, "flambda": 215, "square_iter": 215, "base_set": 215, "cartesiancomplexregion": 215, "polarcomplexregion": 215, "unit_disk": 215, "upper_half_unit_disk": 215, "a_interv": 215, "b_interv": 215, "from_real": 215, "pset": 215, "rset": 215, "thetaset": 215, "upper_half_plan": 215, "normalize_theta_set": 215, "r770": 215, "r771": 215, "axiom_of_power_set": 215, "sin_sol": 215, "r772": 215, "element_": 215, "varnoth": 215, "tr0": 216, "tr1": 216, "tr2": 216, "tr2i": 216, "tr3": 216, "tr4": 216, "tr5": 216, "tr6": 216, "tr7": 216, "tr8": 216, "tr9": 216, "tr10": 216, "tr10i": 216, "tr11": 216, "tr12": 216, "tr12i": 216, "tr13": 216, "trmorri": 216, "tr14": 216, "tr15": 216, "tr16": 216, "tr22": 216, "tr111": 216, "ctr1": 216, "ctr4": 216, "rl1": 216, "rl2": 216, "deem": 216, "932": 216, "016": 216, "serendipit": 216, "dead": 216, "newa": 216, "lucki": 216, "sqt": 216, "_tr56": 216, "un": [216, 217], "r773": 216, "morri": 216, "27s_law": 216, "trpower": 216, "r774": 216, "list_of_trigonometric_ident": 216, "reduction_formula": 216, "ctr2": 216, "ctr3": 216, "r775": 216, "657": 216, "2478": 216, "dimitar": 216, "vlahovski": 216, "technolog": 216, "xiuqin": 216, "zhong": 216, "zhenb": 216, "zeng": 216, "1169": 216, "1177": 216, "sosmath": 216, "trig5": 216, "symplifi": [217, 219], "roach1996": 217, "roach1997": 217, "p_q": 217, "reachabl": [217, 227], "f_q": 217, "undo": [217, 284], "whenc": 217, "game": 217, "twofold": 217, "incongru": 217, "wlog": 217, "alpha_r": 217, "beta_r": 217, "blindli": 217, "messi": 217, "k_u": 217, "l_v": 217, "k_j": 217, "c_w": 217, "r_j": 217, "l_u": 217, "res_": 217, "delta_i": 217, "add_formula": 217, "addb": 217, "sum_0": 217, "test_hyperexpand": 217, "test_formula": 217, "typo": 217, "suboptim": 217, "imath": 217, "b1prime": 217, "vital": [217, 227], "308": 217, "hongguang": [218, 264], "fu": [218, 219, 264], "unmodifi": 219, "my_measur": 219, "nthroot": 219, "max_len": 219, "surd": 219, "kroneckersimp": 219, "besselsimp": 219, "strigonometr": 219, "399": 219, "hypersimilar": 219, "rational_convers": 219, "base10": 219, "6004799503160655": 219, "eq_x": 219, "max_term": 219, "collect_sqrt": 219, "polish": 219, "rad_ration": 219, "collect_const": 219, "rcollect": 219, "analyz": [219, 232], "ratsimpmodprim": 219, "r776": 219, "pearc": 219, "163": 219, "6984": 219, "trigsimp_groebn": 219, "bb1": 219, "be1": 219, "bb2": 219, "be2": 219, "bei": 219, "sqrtdenest": 219, "max_it": 219, "unrad": [219, 225], "r777": 219, "ibm": 219, "fagin": 219, "symb85": 219, "r778": 219, "cybertest": 219, "opt_sub": 219, "as_unevaluated_bas": 219, "tree_cs": 219, "hyperegeometr": 219, "epathtool": 219, "epath": 219, "ebnf": 219, "za": [219, 227], "xml": 219, "xpath": 219, "hasattr": [219, 241], "beginn": [220, 222, 225, 226, 285], "diophantu": 220, "mathematician": [220, 226], "citi": 220, "alexandria": 220, "father": 220, "hi": 220, "arithmetica": 220, "diop_solv": 220, "classify_diop": 220, "diop_linear": 220, "diop_quadrat": 220, "diop_ternary_quadrat": 220, "diop_ternary_quadratic_norm": 220, "diop_general_pythagorean": 220, "diop_general_sum_of_squar": 220, "diop_general_sum_of_even_pow": 220, "merge_solut": 220, "3y": 220, "4ac": 220, "9369318": 220, "find_dn": 220, "diop_dn": 220, "transformation_to_dn": 220, "920": 220, "5y": 220, "BY": 220, "transformation_to_norm": 220, "t4": 220, "t5": 220, "sum_of_squar": 220, "providean": 220, "eqyptian": 220, "thilinaatsympi": 220, "andreescu": 220, "titu": 220, "andrica": 220, "dorin": 220, "cucurezeanu": 220, "ion": 220, "diophantineequ": 220, "alpertron": 220, "20160323033111": 220, "jpr2718": 220, "ax2p": 220, "permute_sign": [220, 245], "signed_permut": [220, 245], "_dict": 220, "base_solution_linear": 220, "r779": 220, "r780": 220, "pell": 220, "lmm": 220, "r781": 220, "393": 220, "13y": 220, "986": 220, "49299": 220, "1570": 220, "diop_bf_dn": 220, "robertson": 220, "20160323033128": 220, "cornacchia": 220, "r782": 220, "nitaj": 220, "r783": 220, "numbertheori": 220, "r784": 220, "r785": 220, "676": 220, "884": 220, "fxz": 220, "3xy": 220, "r786": 220, "fxy": 220, "gyz": 220, "hxz": 220, "r787": 220, "cremona": 220, "rusin": 220, "2x_": 220, "m4": 220, "general_sum_of_squar": 220, "8m": 220, "r788": 220, "2345": 220, "proofwiki": 220, "integer_as_sum_of_three_squar": 220, "general_sum_of_even_pow": 220, "power_represent": 220, "1729": 220, "stopiter": 220, "sum_of_three_squar": 220, "r789": 220, "44542": 220, "207": 220, "schorn": 220, "sum_of_four_squar": 220, "3456": 220, "1294585930293": 220, "2161": 220, "1137796": 220, "r790": 220, "sum_of_pow": 220, "evenli": 220, "var_t": 220, "pqa": 220, "r791": 220, "ur": 220, "dv": 220, "vr": 220, "r792": 220, "parametrize_ternary_quadrat": 220, "r793": 220, "nigel": 220, "ldescent": 220, "y_0": [220, 223], "4x": [220, 226, 273], "7y": 220, "5x": 220, "r794": 220, "r795": 220, "eprint": 220, "nottingham": 220, "uk": 220, "kvxefz87": 220, "gaussian_reduc": 220, "r796": 220, "cuhk": 220, "hk": 220, "wkshum": 220, "404": 220, "r797": 220, "holzer": 220, "mordel": 220, "r798": 220, "r799": 220, "prime_as_sum_of_two_squar": 220, "r800": 220, "sqf_normal": 220, "r801": 220, "legrang": 220, "csusm": 220, "aitken_html": 220, "diophantinesolutionset": 220, "symbols_seq": 220, "dict_iter": 220, "diophantineequationtyp": 220, "binaryquadrat": 220, "r802": 220, "r803": 220, "inhomogeneousternaryquadrat": 220, "inhomogen": [220, 223, 225], "homogeneousternaryquadraticnorm": 220, "homogeneousternaryquadrat": 220, "inhomogeneousgeneralquadrat": 220, "homogeneousgeneralquadrat": 220, "generalsumofsquar": 220, "r804": 220, "generalpythagorean": 220, "cubicthu": 220, "thue": 220, "generalsumofevenpow": 220, "pde": [221, 223, 264], "subcategori": [222, 263], "solve_rational_inequ": 222, "solve_poly_inequ": 222, "reduce_rational_inequ": 222, "reduce_abs_inequ": 222, "solvifi": [222, 226], "autodetect": [223, 224], "classify_od": 223, "odesimp": 223, "ode_ord": [223, 224, 225], "deutil": [223, 224], "best_hint": 223, "all_integr": [223, 224], "_integr": [223, 224], "unevaluat": 223, "test_od": 223, "ode_": 223, "hintnam": [223, 224], "classify_sysod": 223, "almost_linear": 223, "dsolve_system": 223, "ode_hintnam": 223, "allhint": [223, 224], "tough": 223, "nth_linear_homogeneous_constant_coeff_integr": 223, "1st_linear": 223, "nth_linear": 223, "indep": 223, "indep_div_dep": 223, "undetermined_coeffici": 223, "_best": 223, "nth_algebra": 223, "1st_homogeneous_coeff_best": 223, "1st_homogeneous_coeff_subs_indep_div_dep": 223, "1st_homogeneous_coeff_subs_dep_div_indep": 223, "1st_power_seri": 223, "lie_group": 223, "nth_linear_constant_coeff_homogen": 223, "nth_linear_euler_eq_homogen": 223, "nth_algebraic_integr": 223, "separable_integr": 223, "1st_exact_integr": 223, "1st_linear_integr": 223, "bernoulli_integr": 223, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 223, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 223, "nth_linear_constant_coeff_undetermined_coeffici": 223, "nth_linear_constant_coeff_variation_of_paramet": 223, "nth_linear_constant_coeff_variation_of_parameters_integr": 223, "checkodesol": 223, "solve_for_func": [223, 224], "homogeneouscoeffsubsdepdivindep": 223, "homogeneouscoeffsubsindepdivdep": 223, "varepsilon": 223, "genform": [223, 224], "starrett": 223, "checkinfsol": 223, "constantsimp": 223, "symbolnam": 223, "startnumb": 223, "endnumb": 223, "renumb": 223, "absorpt": 223, "assist": 223, "constant_renumb": 223, "1st_rational_riccati": 223, "riccati_special_minus2": 223, "linear_coeffici": 223, "separable_reduc": 223, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 223, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 223, "liouvil": 223, "2nd_linear_airi": 223, "2nd_linear_bessel": 223, "2nd_hypergeometr": 223, "2nd_hypergeometric_integr": 223, "nth_order_reduc": 223, "2nd_power_series_ordinari": 223, "2nd_power_series_regular": 223, "almost_linear_integr": 223, "linear_coefficients_integr": 223, "separable_reduced_integr": 223, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 223, "liouville_integr": 223, "2nd_nonlinear_autonomous_conserv": 223, "2nd_nonlinear_autonomous_conserved_integr": 223, "newconst": 223, "ode_sol_simpl": 223, "trysolv": 223, "sola": 223, "solb": 223, "listofsolut": 223, "ode_problem": 223, "firstexact": 223, "exact_differential_equ": 223, "tenenbaum": 223, "dover": 223, "1963": 223, "homogeneouscoeffbest": 223, "ode_1st_homogeneous_coeff_best_integr": 223, "homogeneous_differential_equ": 223, "firstlinear": 223, "linear_differential_equ": 223, "first_order_equ": 223, "rationalriccati": 223, "atleast": 223, "riccati_equ": 223, "thieu": 223, "vo": 223, "www3": [223, 252], "risc_5387": 223, "phdthesisthieu": 223, "secondlinearairi": 223, "secondlinearbessel": 223, "math24": 223, "bernoulli_differential_equ": 223, "goldstein": 223, "braun": 223, "maplesoft": 223, "aspx": 223, "odeadvisor": 223, "riccatispeci": 223, "__________________": 223, "eqworld": 223, "ipmnet": 223, "ru": 223, "ode0106": 223, "ode0123": 223, "nthlinearconstantcoeffhomogen": 223, "nth_linear_constant_coeff_homogeneous_integr": 223, "nonhomogeneous_equation_with_constant_coeffici": 223, "nthlinearconstantcoeffundeterminedcoeffici": 223, "method_of_undetermined_coeffici": 223, "221": 223, "nthlinearconstantcoeffvariationofparamet": 223, "cramer": 223, "variation_of_paramet": 223, "planetmath": 223, "variationofparamet": 223, "nthlineareulereqhomogen": 223, "equidimension": 223, "nth_linear_euler_eq_homogeneous_integr": 223, "sollist": 223, "93euler_equ": 223, "bender": 223, "orszag": 223, "scientist": 223, "nthlineareulereqnonhomogeneousvariationofparamet": 223, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 223, "nthalgebra": 223, "nthorderreduc": 223, "caught": 223, "fault": 223, "almostlinear": 223, "first_linear": 223, "joel": 223, "mose": 223, "stormi": 223, "decad": 223, "august": [223, 242], "558": 223, "linearcoeffici": 223, "separablereduc": 223, "liegroup": 223, "secondhypergeometr": 223, "2f1": 223, "1f1": 223, "0f1": 223, "liouvillian": 223, "pfq": 223, "chan": 223, "cheb": 223, "terrab": 223, "ode_1st_power_seri": 223, "travi": [223, 238], "walker": 223, "ode_2nd_power_series_ordinari": 223, "lamar": 223, "seriessolut": 223, "simmon": 223, "176": 223, "ode_2nd_power_series_regular": 223, "lie_heuristic_abaco1_simpl": 223, "duart": 223, "da": 223, "mota": 223, "lie_heuristic_abaco1_product": 223, "roch": 223, "lie_heuristic_bivari": 223, "329": 223, "lie_heuristic_chi": 223, "lie_heuristic_abaco2_similar": 223, "lie_heuristic_function_sum": 223, "lie_heuristic_abaco2_unique_unknown": 223, "lie_heuristic_abaco2_unique_gener": 223, "lie_heuristic_linear": 223, "gy": 223, "bh": 223, "impract": 223, "riccati_norm": 223, "riccati_inverse_norm": 223, "riccati_reduc": 223, "construct_c": 223, "construct_d": 223, "val_inf": 223, "valuat": 223, "rational_laurent_seri": 223, "compute_m_ybar": 223, "ybar": 223, "solve_aux_eq": 223, "numa": 223, "dena": 223, "numi": 223, "deni": 223, "remove_redundant_sol": 223, "sol1": 223, "sol2": 223, "get_gen_sol_from_part_sol": 223, "part_sol": 223, "haaheim": 223, "solve_riccati": 223, "gensol": 223, "_linear_2eq_order1_type6": 223, "_linear_2eq_order1_type7": 223, "fgp": 223, "ag": 223, "bg": 223, "linear_ode_to_matrix": 223, "odeordererror": 223, "odenonlinearerror": 223, "eqs_mat": 223, "linear_eq_to_matrix": [223, 226], "r805": 223, "matrix_differential_equ": 223, "canonical_od": 223, "canonical_eq": 223, "canonical_system": 223, "linodesolve_typ": 223, "linodesolv": 223, "type1": 223, "type2": 223, "type3": 223, "type4": 223, "type5": 223, "type6": 223, "type_of_equ": 223, "a_t": 223, "a_non_commut": 223, "matrix_exp_jordan_form": 223, "expj": 223, "matrix_exp": 223, "defect": 223, "p_invers": 223, "r806": 223, "defective_matrix": 223, "r807": 223, "r808": 223, "jordan_normal_form": 223, "comupt": 223, "r809": 223, "r810": 223, "matrix_exponenti": 223, "follw": 223, "antiderv": 223, "subscheck": 223, "system_info": 223, "sol_vector": 223, "sol_vector_evalu": 223, "_nonlinear_2eq_order1_type1": 223, "_nonlinear_2eq_order1_type2": 223, "_nonlinear_2eq_order1_type3": 223, "autonom": 223, "_nonlinear_2eq_order1_type4": 223, "_nonlinear_2eq_order1_type5": 223, "clairaut": 223, "envelop": 223, "_nonlinear_3eq_order1_type1": 223, "enspac": [223, 226], "sysod": 223, "sode0401": 223, "_nonlinear_3eq_order1_type2": 223, "sode0402": 223, "_nonlinear_3eq_order1_type3": 223, "sode0404": 223, "_nonlinear_3eq_order1_type4": 223, "sode0405": 223, "_nonlinear_3eq_order1_type5": 223, "sode0406": 223, "_handle_integr": 223, "gather": 223, "unhind": 223, "wolphramalpha": 223, "detool": 223, "hint_integr": 223, "alphanumer": 223, "hinder": 223, "matching_hint": 223, "matchdict": 223, "1st_homogeneous_coeff": 223, "your_hint": 223, "xfail": [223, 236, 238], "pde_separ": 224, "uxt": 224, "pde_separate_add": 224, "pde_separate_mul": 224, "uxi": 224, "pdsolv": 224, "solvefun": 224, "classify_pd": 224, "test_pd": 224, "pde_hintnam": 224, "ux": 224, "1st_linear_constant_coeff_homogen": 224, "checkpdesol": 224, "_preprocess": 224, "inabl": 224, "_xi_1": 224, "pde_1st_linear_constant_coeff_homogen": 224, "viktor": 224, "grigoryan": 224, "124a": 224, "pde_1st_linear_constant_coeff": 224, "substack": 224, "1st_linear_constant_coeff_integr": 224, "pde_1st_linear_variable_coeff": 224, "du": 224, "inspir": [224, 280], "pde_hint": 224, "checksol": 225, "ect": 225, "attain": [225, 257], "star": 225, "052": 225, "cov": 225, "pval": 225, "xval": 225, "rsolv": 225, "solve_linear": 225, "solve_linear_system": 225, "msymbol": 225, "degener": [225, 226], "solve_linear_system_lu": 225, "solve_undetermined_coeff": 225, "equ": 225, "73908513321516064165531208767387340401341175890076": 225, "steep": 225, "39267e": 225, "1684e": 225, "588469032184": 225, "315": 225, "730061685774": 225, "46792545969349058": 225, "inconclus": 225, "init": 225, "dissimilar": 225, "v_0": 225, "n_m": 225, "v_m": 225, "rsolve_poli": 225, "rsolve_ratio": 225, "r811": 225, "levelt": 225, "290": [225, 255], "296": 225, "r812": 225, "r813": 225, "revis": 225, "r814": 225, "289": 225, "alembertian": 225, "r815": 225, "r816": 225, "polysi": 225, "solve_triangul": 225, "kalkbrenn": 225, "patrizia": 225, "teo": 225, "aaecc": 225, "argand": 226, "uncount": 226, "bizarr": 226, "her": 226, "sol_f": 226, "solveset_r": 226, "solveset_complex": 226, "methodologi": [226, 277], "_solve_real_trig": 226, "invert_r": 226, "invert_complex": 226, "_solve_rad": 226, "_solve_ab": 226, "_solve_as_r": 226, "_solve_as_poly_r": 226, "_solve_as_poly_complex": 226, "_solve_as_poli": 226, "gsoc": 226, "2014": [226, 227], "iamit": 226, "2948": 226, "6659": 226, "7523": 226, "sibx0afl3q": 226, "9696": 226, "27s_theorem": 226, "inftyright": 226, "nright": 226, "0right": 226, "domain_check": 226, "3z": 226, "9z": 226, "nonlinearerror": 226, "cccc": 226, "eq3": 226, "eq4": 226, "391": 226, "_solve_system": 226, "_solve_using_known_valu": 226, "_transolv": 226, "_tsolv": 226, "tsolv": 226, "outright": 226, "tractabl": 226, "interf": 226, "add_typ": 226, "_is_exponenti": 226, "new_eq": 226, "_solve_exponenti": 226, "_is_class": 226, "_solve_class": 226, "_solve_expo": 226, "9x": 226, "solve_expo": 226, "log_b": 226, "_solve_logarithm": 226, "solve_log": 226, "_is_logarithm": 226, "prebuilt": 227, "finiterv": 227, "varianc": 227, "dice": 227, "continuousrv": 227, "continuousdistributionhandmad": 227, "dist": 227, "discreterv": 227, "discretedistributionhandmad": 227, "pmf": 227, "finitedistributionhandmad": 227, "discreteuniform": 227, "randomsymbol": 227, "r817": 227, "discrete_uniform_distribut": 227, "r818": 227, "discreteuniformdistribut": 227, "d6": 227, "diedistribut": 227, "toss": 227, "r819": 227, "bernoulli_distribut": 227, "r820": 227, "bernoullidistribut": 227, "numeb": 227, "unfair": 227, "r821": 227, "coin_flip": 227, "binomialdistribut": 227, "r822": 227, "binomial_distribut": 227, "r823": 227, "betabinomi": 227, "r824": 227, "r825": 227, "betabinomialdistribut": 227, "popul": 227, "marbl": 227, "r826": 227, "hypergeometric_distribut": 227, "r827": 227, "hypergeometricdistribut": 227, "700000000000000": 227, "r828": 227, "rademacher_distribut": 227, "r829": 227, "geometric_distribut": 227, "r830": 227, "geometricdistribut": 227, "r831": 227, "hermite_distribut": 227, "poisson": 227, "r832": 227, "poisson_distribut": 227, "r833": 227, "poissondistribut": 227, "r834": 227, "logarithmic_distribut": 227, "r835": 227, "logarithmicdistribut": 227, "negativebinomi": 227, "r836": 227, "negative_binomial_distribut": 227, "r837": 227, "negativebinomialdistribut": 227, "skellam": 227, "mu1": 227, "mu2": 227, "mu_1": 227, "mu_2": 227, "i_k": 227, "r838": 227, "skellam_distribut": 227, "yulesimon": 227, "yule": 227, "simon": 227, "r839": 227, "93simon_distribut": 227, "8100": 227, "r840": 227, "zeta_distribut": 227, "cdf": 227, "r841": 227, "arcsine_distribut": 227, "benini": 227, "r842": 227, "benini_distribut": 227, "r843": 227, "v8": 227, "beninidistribut": 227, "r844": 227, "beta_distribut": 227, "r845": 227, "betadistribut": 227, "betanoncentr": 227, "noncentr": 227, "r846": 227, "noncentral_beta_distribut": 227, "r847": 227, "noncentralbetadistribut": 227, "betaprim": 227, "r848": 227, "beta_prime_distribut": 227, "r849": 227, "betaprimedistribut": 227, "boundedpareto": 227, "pareto": 227, "r850": 227, "pareto_distribut": 227, "bounded_pareto_distribut": 227, "r851": 227, "cauchy_distribut": 227, "r852": 227, "cauchydistribut": 227, "r853": 227, "chi_distribut": 227, "r854": 227, "chidistribut": 227, "chinoncentr": 227, "r855": 227, "noncentral_chi_distribut": 227, "chisquar": 227, "r856": 227, "chi_squared_distribut": 227, "r857": 227, "squareddistribut": 227, "dagum": 227, "r858": 227, "dagum_distribut": 227, "erlang": 227, "r859": 227, "erlang_distribut": 227, "r860": 227, "erlangdistribut": 227, "exgaussian": 227, "emg": 227, "r861": 227, "exponentially_modified_gaussian_distribut": 227, "quantil": 227, "r862": 227, "exponential_distribut": 227, "r863": 227, "exponentialdistribut": 227, "fdistribut": 227, "______________________________": 227, "r864": 227, "r865": 227, "fisherz": 227, "fisher": 227, "2d_1": 227, "d_1z": 227, "d_1e": 227, "r866": 227, "27s_z": 227, "r867": 227, "fishersz": 227, "frechet": 227, "r868": 227, "a9chet_distribut": 227, "r869": 227, "gamma_distribut": 227, "r870": 227, "gammadistribut": 227, "gammainvers": 227, "r871": 227, "gompertz": 227, "r872": 227, "gompertz_distribut": 227, "gumbel": 227, "dfrac": 227, "r873": 227, "gumbeldistribut": 227, "r874": 227, "gumbel_distribut": 227, "r875": 227, "mathwav": 227, "easyfit": 227, "gumbel_max": 227, "r876": 227, "gumbel_min": 227, "kumaraswami": 227, "r877": 227, "kumaraswamy_distribut": 227, "r878": 227, "laplace_distribut": 227, "r879": 227, "laplacedistribut": 227, "r880": 227, "a9vy_distribut": 227, "r881": 227, "levydistribut": 227, "logist": 227, "r882": 227, "logistic_distribut": 227, "r883": 227, "logisticdistribut": 227, "loglogist": 227, "unimod": 227, "r884": 227, "lognorm": 227, "r885": 227, "r886": 227, "lognormaldistribut": 227, "lomax": 227, "r887": 227, "lomax_distribut": 227, "maxwel": 227, "2a": 227, "r888": 227, "maxwell_distribut": 227, "r889": 227, "maxwelldistribut": 227, "moyal": 227, "r890": 227, "moyaldistribut": 227, "r891": 227, "rice": 227, "dobelman": 227, "textfil": 227, "distributionshandbook": 227, "nakagami": 227, "r892": 227, "nakagami_distribut": 227, "marginal_distribut": 227, "r893": 227, "normal_distribut": 227, "r894": 227, "normaldistributionfunct": 227, "xm": 227, "x_m": 227, "r895": 227, "r896": 227, "paretodistribut": 227, "powerfunct": 227, "paramat": 227, "r897": 227, "power_func": 227, "quadraticu": 227, "r898": 227, "quadratic_distribut": 227, "raisedcosin": 227, "r899": 227, "raised_cosine_distribut": 227, "r900": 227, "rayleigh_distribut": 227, "r901": 227, "rayleighdistribut": 227, "r902": 227, "reciprocal_distribut": 227, "studentt": 227, "r903": 227, "student_t": 227, "r904": 227, "studentst": 227, "shiftedgompertz": 227, "r905": 227, "shifted_gompertz_distribut": 227, "r906": 227, "trapezoidal_distribut": 227, "r907": 227, "triangular_distribut": 227, "r908": 227, "triangulardistribut": 227, "r909": 227, "uniform_distribution_": 227, "28continu": 227, "r910": 227, "uniformdistribut": 227, "uniformsum": 227, "irwin": 227, "r911": 227, "uniform_sum_distribut": 227, "r912": 227, "uniformsumdistribut": 227, "vonmis": 227, "mise": 227, "i_0": 227, "r913": 227, "von_mises_distribut": 227, "r914": 227, "vonmisesdistribut": 227, "wald": 227, "gaussianinvers": 227, "r915": 227, "inverse_gaussian_distribut": 227, "r916": 227, "inversegaussiandistribut": 227, "weibul": 227, "geq0": 227, "r917": 227, "weibull_distribut": 227, "r918": 227, "weibulldistribut": 227, "wignersemicircl": 227, "semicircl": 227, "frac2": 227, "r919": 227, "wigner_semicircle_distribut": 227, "r920": 227, "wignerssemicirclelaw": 227, "jointrv": 227, "_set": 227, "multivariatenorm": 227, "noninvert": 227, "ob": 227, "r921": 227, "multivariate_normal_distribut": 227, "multivariatelaplac": 227, "r922": 227, "multivariate_laplace_distribut": 227, "generalizedmultivariateloggamma": 227, "joint_rv_typ": 227, "gd": 227, "y_3": 227, "gmvlg": 227, "generalizedmultivariateloggammaomega": 227, "r923": 227, "generalized_multivariate_log": 227, "r924": 227, "234137346_on_a_multivariate_log": 227, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 227, "correl": 227, "gmvlgo": 227, "r925": 227, "r926": 227, "r927": 227, "multinomial_distribut": 227, "r928": 227, "multinomialdistribut": 227, "multivariatebeta": 227, "r929": 227, "dirichlet_distribut": 227, "r930": 227, "dirichletdistribut": 227, "multivariateewen": 227, "ewen": 227, "r931": 227, "27s_sampling_formula": 227, "r932": 227, "rutger": 227, "hcrane": 227, "sts529": 227, "multivariatet": 227, "negativemultinomi": 227, "n_c": 227, "r933": 227, "negative_multinomial_distribut": 227, "r934": 227, "normalgamma": 227, "r935": 227, "discretemarkovchain": 227, "state_spac": 227, "trans_prob": 227, "markov": 227, "characteris": 227, "transitionmatrixof": 227, "transition_prob": 227, "sunni": 227, "cloudi": 227, "raini": 227, "randomindexedsymbol": 227, "409": 227, "6963328": 227, "3096": 227, "query_gt": 227, "64705": 227, "r936": 227, "markov_chain": 227, "time_markov_chain": 227, "r937": 227, "dartmouth": 227, "teaching_aid": 227, "books_articl": 227, "probability_book": 227, "chapter11": 227, "canonical_form": 227, "transient": 227, "p_new": 227, "new_matrix": 227, "communication_class": 227, "r938": 227, "onlinelibrari": 227, "wilei": 227, "1002": 227, "9780470316887": 227, "app1": 227, "r939": 227, "columbia": 227, "ww2040": 227, "6711f12": 227, "lect1023big": 227, "is_recurr": 227, "tarjan": [227, 245], "r940": 227, "4701sum07": 227, "4701": 227, "mcii": 227, "r941": 227, "ceca": 227, "clemson": 227, "shierd": 227, "shier": 227, "r942": 227, "ujcont": 227, "uj": 227, "7506": 227, "content1": 227, "r943": 227, "econ": 227, "dtmc": 227, "reccur": 227, "r944": 227, "absorbing_markov_chain": 227, "r945": 227, "brandei": 227, "igusa": 227, "math56as08": 227, "math56a_s08_notes015": 227, "fixed_row_vector": 227, "stationary_distribut": 227, "fundamental_matrix": 227, "r946": 227, "lip": 227, "limiting_distribut": 227, "condition_set": 227, "wm": 227, "r947": 227, "probabilitycours": 227, "11_2_6_stationary_and_limiting_distribut": 227, "r948": 227, "galton": 227, "uchicago": 227, "yibi": 227, "stat317": 227, "lecture4_6up": 227, "continuousmarkovchain": 227, "gen_mat": 227, "generator_matrix": 227, "45279": 227, "58602": 227, "37933": 227, "34211": 227, "7143": 227, "4002723175": 227, "6832579186": 227, "r949": 227, "r950": 227, "biu": 227, "il": 227, "amirgi": 227, "ctmcnote": 227, "bernoulliprocess": 227, "processs": 227, "joint_distribut": 227, "jointdistributionhandmad": 227, "r951": 227, "bernoulli_process": 227, "r952": 227, "mathc": 227, "clarku": 227, "djoyc": 227, "ma217": 227, "given_condit": 227, "poissonprocess": 227, "648": 227, "r953": 227, "11_0_0_intro": 227, "r954": 227, "poisson_point_process": 227, "wiener": 227, "brownian": 227, "scottish": 227, "botanist": 227, "r955": 227, "11_4_0_brownian_motion_wiener_process": 227, "r956": 227, "wiener_process": 227, "gammaprocess": 227, "jump": [227, 284], "472": 227, "r957": 227, "gamma_process": 227, "matrixgamma": 227, "scale_matrix": 227, "r958": 227, "matrix_gamma_distribut": 227, "wishart": 227, "r959": 227, "wishart_distribut": 227, "matrixnorm": 227, "location_matrix": 227, "scale_matrix_1": 227, "scale_matrix_2": 227, "r960": 227, "matrix_normal_distribut": 227, "compound_rv": 227, "compounddistribut": 227, "crv_type": 227, "r961": 227, "compound_probability_distribut": 227, "numsampl": 227, "evaluate_integr": 227, "r962": 227, "entropy_": 227, "information_theori": 227, "r963": 227, "crmarsh": 227, "charles_marsh_continuous_entropi": 227, "r964": 227, "uconn": 227, "kconrad": 227, "blurb": 227, "entropypost": 227, "arg1": 227, "arg2": 227, "cexpr": 227, "coskew": 227, "sigma_": 227, "r965": 227, "r966": 227, "probability_distribut": 227, "randomst": 227, "die_rol": 227, "samp": 227, "pspace": 227, "samp_list": 227, "sam": 227, "42519758": 227, "40207856": 227, "94991743": 227, "85819627": 227, "83403519": 227, "9412172": 227, "85768055": 227, "38954165": 227, "11163337": 227, "3176591": 227, "79115232": 227, "63232916": 227, "01747268": 227, "96716083": 227, "sampling_p": 227, "sampling_": 227, "factorial_mo": 227, "r967": 227, "r968": 227, "factorialmo": 227, "kurtosi": 227, "outlier": 227, "sigma_x": 227, "r969": 227, "r970": 227, "asymmetri": 227, "pearson": 227, "sampling_dens": 227, "centralmo": 227, "cmoment": 227, "expectationmatrix": 227, "randommatrixsymbol": 227, "n11": 227, "n12": 227, "n21": 227, "n22": 227, "variancematrix": 227, "crosscovariancematrix": 227, "randomdomain": 227, "singledomain": 227, "singlepspac": 227, "productdomain": 227, "productpspac": 227, "conditionaldomain": 227, "frv": 227, "finitedomain": 227, "finitepspac": 227, "crv": 227, "continuousdomain": 227, "continuouspspac": 227, "diepspac": 227, "singlefinitepspac": 227, "normalpspac": 227, "singlecontinuouspspac": 227, "frv_type": 227, "randomvari": 227, "tactic": 227, "random_symbol": 227, "rs_swap": 227, "pspace1": 227, "pspace2": 227, "immutabledensendimarrai": 228, "tomatrix": 228, "j_m": 228, "i_a": 228, "i_b": 228, "sum_k": 228, "tensorcontract": [228, 229], "tensordiagon": [228, 229], "derive_by_arrai": 228, "sum_m": 228, "immutablesparsendimarrai": 228, "mutabledensendimarrai": 228, "mutablesparsendimarrai": 228, "index_order_old": 228, "index_order_new": 228, "cab": 228, "contraction_ax": 228, "diagonal_ax": 228, "arraycontract": 229, "arraydiagon": 229, "arraysymbol": 229, "convert_indexed_to_arrai": 229, "arrayadd": 229, "convert_matrix_to_arrai": 229, "convert_array_to_matrix": 229, "expr_tr": 229, "array_der": 229, "index_method": 231, "get_contraction_structur": [231, 232], "deepest": 231, "nested_contract": 231, "get_indic": [231, 232, 233, 234], "indexconformanceexcept": 231, "______": 232, "stem": 232, "dim1": 232, "dim2": 232, "qwerti": 232, "a_ij": 232, "b_ij": 232, "syntact": 232, "a_real": 232, "c_inherit": 232, "c_explicit": 232, "unrol": 232, "tensorindextyp": [233, 234], "eps_dim": 233, "metric_nam": 233, "su": 233, "lorentz": 233, "tensor_index_typ": 233, "is_up": 233, "tensor_inde_typ": 233, "typ": 233, "tensorhead": [233, 234], "index_typ": 233, "tensorsymmetri": 233, "monoterm": 233, "_tensormanag": 233, "set_comm": 233, "asym2": 233, "fully_symmetr": 233, "tensori": [233, 234], "e_z": 233, "no_symmetri": 233, "p_x": 233, "p_y": 233, "p_z": 233, "ipos1": 233, "ipos2": 233, "icomp1": 233, "icomp2": 233, "nameless": 233, "replacement_dict": 233, "free_arg": 233, "addend": 233, "canon_bp": 233, "contract_metr": 233, "contract_al": 233, "ipo": 233, "icomp": 233, "nonrep": 233, "dum": 233, "ext_rank": 233, "is_canon_bp": 233, "get_free_indic": [233, 234], "perm2tensor": 233, "tid": 233, "sorted_compon": 233, "riemann_cyclic_replac": 233, "riemann_cycl": 233, "cadabra": 233, "multiterm": 233, "bianchi": 233, "sym2": 233, "direct_product": 233, "monotorem": 233, "tableaux": 233, "tensortyp": 233, "repetit": [233, 245], "tensormanag": 233, "comm_i2symbol": 233, "comm_symbols2i": 233, "get_comm": 233, "gcomm": 233, "ghcomm": 233, "toper": 234, "partialderiv": 234, "valenc": 234, "uncontract": 234, "compa": 234, "compb": 234, "derivand": 234, "xpass": [236, 238], "nocache_fail": 236, "expectedexcept": 236, "assertionerror": 236, "exceptioninfo": 236, "abort": 236, "9999": 236, "warningcl": [236, 243], "test_stacklevel": 236, "randtest": 237, "portabl": [238, 239], "pytestreport": 238, "force_color": 238, "readlin": 238, "sympydoctestfind": 238, "doctestpars": 238, "exclude_empti": 238, "sympydoctestrunn": 238, "checker": 238, "optionflag": 238, "5140": 238, "doctestrunn": 238, "clear_glob": 238, "writer": 238, "garbag": 238, "check_output": 238, "report_": 238, "sympyoutputcheck": 238, "outputcheck": 238, "stdlib": 238, "testrunn": 238, "sympytestresult": 238, "convert_to_native_path": 238, "lst": 238, "blacklist": 238, "get_sympy_dir": 238, "raise_on_deprec": 238, "deprecationwarn": [238, 243], "run_all_test": 238, "test_arg": 238, "test_kwarg": 238, "doctest_arg": 238, "doctest_kwarg": 238, "examples_arg": 238, "examples_kwarg": 238, "run_in_subprocess_with_hash_random": 238, "function_kwarg": 238, "virtualenv": 238, "pythonhashse": 238, "_test": 238, "split_list": 238, "sympytestfil": 238, "module_rel": 238, "extraglob": 238, "raise_on_error": 238, "basenam": [238, 239, 240], "slate": 238, "dont_accept_true_for_1": 238, "dont_accept_blanklin": 238, "normalize_whitespac": 238, "ellipsi": 238, "ignore_exception_detail": 238, "report_udiff": 238, "report_cdiff": 238, "report_ndiff": 238, "report_only_first_failur": 238, "mortem": 238, "tomfooleri": 238, "testmod": 238, "tester": 238, "fiddl": [238, 284], "timeout": 238, "keyboardinterrupt": 238, "interrupt": 238, "_basic": 238, "kw": 238, "test_equ": 238, "pdb": 238, "pipe": 238, "time_bal": 238, "tandem": 239, "matvec": 239, "codewrapp": 239, "distutil": 239, "fwrap": 239, "swig": 239, "binary_cal": 239, "22925376": 239, "25165824": 239, "_imp_": [239, 246], "filepath": 239, "cythoncodewrapp": 239, "dump_pyx": 239, "dummywrapp": 239, "f2pycodewrapp": 239, "ufuncifycodewrapp": 239, "dump_c": [239, 240], "funcnam": 239, "code_gen": [239, 240], "argument_tupl": 239, "include_dir": 239, "library_dir": 239, "extra_compile_arg": 239, "extra_link_arg": 239, "symfunc": [239, 246], "funtion_nam": 239, "ndimension": 239, "f_fortran": 239, "f_cython": 239, "r971": 239, "fortran77": 240, "fortran90": 240, "julia": 240, "rust": 240, "mileston": 240, "unsurmount": 240, "pyf": 240, "inputoutput": 240, "tcc": 240, "libtcc": 240, "date": 240, "hostnam": 240, "sha1": 240, "ccodegen": 240, "preprocessor_stat": 240, "dump_h": 240, "guard": 240, "get_prototyp": 240, "codegenerror": 240, "function_prototyp": 240, "dump_cod": 240, "cname": 240, "fname": 240, "pynam": 240, "jlname": 240, "octnam": 240, "rsname": 240, "fcodegen": 240, "f90": 240, "dump_f95": 240, "get_interfac": 240, "juliacodegen": 240, "dump_jl": 240, "octavecodegen": 240, "dump_m": 240, "returnvalu": 240, "destin": 240, "local_var": 240, "result_vari": 240, "ot": 240, "unnam": 240, "rustcodegen": 240, "dump_r": 240, "f_result": 240, "myfcn": 240, "fcn2": 240, "myfcn_result": 240, "void": 240, "get_default_datatyp": 240, "complex_allow": 240, "agnost": 240, "conserve_mpmath_dp": 241, "doctest_depends_on": 241, "disable_view": 241, "python_vers": 241, "memoize_properti": 241, "propfunc": 241, "no_attrs_in_subclass": 241, "__all__": 241, "some_funct": 241, "thread": 241, "xthread": 241, "threaded_factori": 241, "use_add": 241, "multiset_partitions_taocp": 242, "visitor": 242, "pstack": 242, "lpart": 242, "topmost": 242, "partcompon": 242, "peek": [242, 284], "unpredict": 242, "list_visitor": 242, "abb": [242, 245], "factoring_visitor": 242, "multisetpartitiontravers": 242, "aocp": 242, "count_partit": 242, "127750": 242, "686": 242, "4a": 242, "factorisatio": 242, "oppenheim": 242, "numerorum": 242, "canfield": 242, "erdo": 242, "OF": 242, "yorgei": 242, "monad": 242, "persist": 242, "288716": 242, "memoiz": [242, 244, 271], "dramat": 242, "hypothet": 242, "borrow": 242, "coalesc": 242, "_rang": 242, "stretch": 242, "brain": 242, "histogram": 242, "enum_al": 242, "enum_larg": 242, "enum_rang": 242, "enum_smal": 242, "ub": 242, "parti": 243, "catch_warn": 243, "simplefilt": 243, "dedent": [243, 248], "enum": [244, 271], "miscellan": [244, 271], "pkgdata": [244, 271], "notiter": 245, "binary_partit": 245, "r972": 245, "taocp": 245, "nx": 245, "common_prefix": 245, "common_suffix": 245, "unhash": 245, "r973": 245, "connected_component_": 245, "graph_theori": 245, "r974": 245, "27s_strongly_connected_components_algorithm": 245, "dict_merg": 245, "filter_symbol": 245, "myop": 245, "kog": 245, "informatik": 245, "hamburg": 245, "mein": 245, "python_trick": 245, "neighbor": 245, "xxxxxx": 245, "xxxx": 245, "r975": 245, "method_ring": 245, "r976": 245, "4856615": 245, "4857018": 245, "r977": 245, "programminggeek": 245, "r978": 245, "steinhau": 245, "93johnson": 245, "93trotter_algorithm": 245, "r979": 245, "involut": 245, "eco": 245, "vajnovszki": 245, "dmtc": 245, "generate_involut": 245, "r980": 245, "permutationinvolut": 245, "generate_oriented_forest": 245, "forest": 245, "acycl": 245, "r981": 245, "beyer": 245, "hedetniemi": 245, "novemb": 245, "r982": 245, "1633833": 245, "has_dup": 245, "has_varieti": 245, "iproduct": 245, "abcbb": 245, "is_sequ": 245, "generatortyp": 245, "_iter": 245, "kbin": 245, "ordered_flag": 245, "least_rot": 245, "rotate_left": 245, "r983": 245, "lexicographically_minimal_string_rot": 245, "minlex": 245, "acb": 245, "11010011000": 245, "00011010011": 245, "00011001011": 245, "aaa": 245, "abi": 245, "bby": 245, "abracadabra": 245, "banana": 245, "multiset_derang": 245, "uniq": 245, "1233": 245, "3312": 245, "3321": 245, "aba": 245, "baa": 245, "bead": 245, "ooo": 245, "r984": 245, "ordered_partit": 245, "r985": 245, "jeromekelleh": 245, "r986": 245, "jerom": 245, "kelleh": 245, "barri": 245, "sullivan": 245, "0909": 245, "2331v2": 245, "r987": 245, "activest": 245, "218332": 245, "random_derang": 245, "reseed": 245, "rotate_right": 245, "roundrobin": 245, "ef": 245, "credit": 245, "sakki": 245, "keyfunc": 245, "subgraph": 245, "r988": 245, "r989": 245, "longest": 245, "r990": 245, "unflatten": 245, "partion": 245, "bcd": 245, "afunc": 246, "lambdastr": 246, "dummifi": 246, "use_imp": 246, "custom_sin": 246, "38177329": 246, "49315059": 246, "8414709848078965": 246, "eager": 246, "enable_eager_execut": 246, "eagertensor": 246, "__class__": 246, "placehold": 246, "user_guid": 246, "runtimewarn": 246, "sin_cos_sympi": 246, "sin_co": 246, "sin_cos_numpi": 246, "38177329068": 246, "module_dictionari": 246, "_lambdifygener": 246, "__globals__": 246, "lambdaprint": 246, "90929743": [246, 273], "assoc_recurrence_memo": 247, "base_seq": 247, "memo": 247, "pn0": 247, "recurrence_memo": 247, "specfun": 247, "__index__": 248, "sanit": 248, "99999999999999991611392": 248, "debug_decor": 248, "fillded": 248, "strline": 248, "rawlin": 248, "find_execut": 248, "pathsep": 248, "pastabl": 248, "bee": 248, "spamham": 248, "sha": 248, "spam": 248, "egg": 248, "md5": 248, "eggsham": 248, "r991": 248, "6116978": 248, "roken": 248, "deletechar": 248, "multicharact": 248, "oldchar": 248, "newchar": 248, "acquir": 249, "getresourc": 249, "pkgname": 249, "pkgpath": 249, "dirnam": 249, "normpath": 249, "rb": 249, "__loader__": 249, "stringio": 249, "get_resourc": 249, "ioerror": 249, "mydata": 249, "mypkgdata": 249, "jpg": 249, "get_class": 250, "lookup_view": 250, "get_mod_func": 250, "callback": 250, "timeutil": 251, "coordsysrect": 252, "coordsys3d": [252, 254, 255, 256, 258, 259, 262], "rotation_matrix": [252, 254, 257], "vector_nam": 252, "variable_nam": [252, 259], "latex_vect": 252, "pretty_vect": 252, "latex_scalar": 252, "pretty_scalar": 252, "new_system": 252, "create_new": [252, 257], "transformation_to_par": 252, "transformation_from_par": 252, "locate_new": [252, 255, 256, 257, 258, 259], "position_wrt": [252, 256, 257, 258], "orient_new": [252, 254], "axisorient": [252, 254, 257], "axis_orient": [252, 257], "bodyorient": [252, 254, 257], "body_orient": [252, 254, 257], "spaceorient": [252, 254, 257], "space_orient": [252, 254], "quaternionorient": [252, 254, 257], "q_orient": [252, 254], "orient_new_axi": [252, 255, 257], "orient_new_bodi": [252, 257], "angle1": [252, 254], "angle2": [252, 254], "angle3": [252, 254], "euler_angl": [252, 254], "orient_new_quaternion": [252, 257], "orient_new_spac": [252, 257], "coordsyrect": 252, "v_a": 252, "v_b": 252, "scalar_map": 252, "basevector": [252, 256, 257], "delop": [252, 258, 259], "r992": 252, "r993": 252, "basedyad": [252, 256], "second_system": 252, "deloper": [252, 260], "parametricregion": [252, 255, 262], "implicitregion": [252, 255, 262], "parabola": 252, "rational_parametr": 252, "singular_point": 252, "regular_point": 252, "reg_point": 252, "implict": 252, "cubic_curv": 252, "calulc": 252, "hoffmann": 252, "purdu": 252, "lib": 252, "cgi": 252, "viewcont": 252, "1827": 252, "cstech": 252, "erik": 252, "hillgart": 252, "diploma": 252, "linz": 252, "universitat": 252, "availa": 252, "risc_1355": 252, "20point": 252, "20on": 252, "20conic": 252, "parametricintegr": 252, "semispher": [252, 262], "axis_orienter1": 254, "axis_orienter2": 254, "axis_orienter3": 254, "body_orienter1": 254, "body_orienter2": 254, "body_orienter3": 254, "matrix_to_vector": 255, "system2": 255, "vector_integr": [255, 262], "essenc": 256, "vectormul": 256, "vectoradd": 256, "ofcours": 256, "vectorzero": 256, "expressli": 256, "express_coordin": [256, 257], "dyadicmul": 256, "dyadicadd": 256, "cleanest": 257, "orient_new_": 257, "basescalar": [257, 259], "oabc": 258, "oa": 258, "pq": 258, "sr": 258, "wikidel": 258, "ffield": 258, "gradient_field": 259, "instantan": 259, "directional_deriv": 259, "lame": 259, "dyadicproduct": 260, "quantifi": 261, "throughtout": 261, "necesssari": 262, "param_circl": 262, "implicit_circl": 262, "obextj": 262, "solidspher": 262, "lamina": 262, "\ud835\udc45": 262, "cylind": 262, "vectorfield": 262, "hemispher": 262, "top_fac": 262, "bottom_fac": 262, "27_theorem": 262, "cone": 262, "divergence_theorem": 262, "12288": 262, "truss": 269, "str_expr": 273, "82842712474619": 273, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 273, "0874989834394464": 273, "roundoff": 273, "14112001": 273, "7568025": 273, "95892427": 273, "2794155": 273, "6569866": 273, "98935825": 273, "41211849": 273, "0998334166468": 273, "sympy_nam": 273, "numerical_funct": 273, "rephras": 274, "oh": 274, "integration_vari": 274, "dfdx": 274, "equidistantli": 274, "d2fdx2": 274, "django": 276, "oop": 276, "crazi": 276, "abcdef": 276, "reevalu": 276, "infal": 276, "entertain": 277, "preliminari": 277, "82842712475": 278, "cass": 278, "wrote": [278, 279], "theme": 278, "expanded_expr": 278, "whet": 278, "appetit": 278, "c\u2082": [278, 285], "c\u2081": [278, 285], "\u03bd": 278, "sell": 278, "battl": 278, "confid": 278, "gigabyt": 278, "tear": 279, "dotprint": [279, 283], "stopper": 279, "uexpr": 279, "unevalutedexpr": 279, "downsid": 280, "algebraic_multipl": 280, "pdp": 280, "undertest": 280, "underevalu": 280, "my_iszero": 280, "stronger": 280, "tradeoff": 280, "wonder": 280, "5b7c3e8ee5b40332abdb206c": 280, "15141": 280, "19548": 280, "10120": 280, "10279": 280, "constant_problem": 280, "possiblezeroq": 280, "mupad_ref": 280, "iszero": 280, "congratul": 281, "decent": 282, "austin": 282, "video": 282, "javascript": 283, "bvar": 283, "unnecessarili": 284, "whittl": 284, "catchal": 284, "collected_expr": 284, "cdot1": 284, "undertak": 284, "undon": 284, "cdot2": 284, "nck": 284, "pronounc": 284, "_2f_1": 284, "cfrac": 284, "list_to_frac": 284, "a\u2080": 284, "a\u2083": 284, "a\u2084": 284, "pointless": 284, "orig_frac": 284, "diffeq": 285}, "objects": {"": [[29, 0, 0, "-", "sympy"]], "sympy": [[31, 0, 0, "-", "abc"], [32, 0, 0, "-", "algebras"], [35, 0, 0, "-", "assumptions"], [38, 0, 0, "-", "calculus"], [39, 0, 0, "-", "categories"], [60, 0, 0, "-", "diffgeom"], [61, 0, 0, "-", "discrete"], [65, 0, 0, "-", "functions"], [78, 0, 0, "-", "holonomic"], [85, 0, 0, "-", "integrals"], [86, 0, 0, "-", "interactive"], [87, 0, 0, "-", "liealgebras"], [88, 0, 0, "-", "logic"], [93, 0, 0, "-", "matrices"], [100, 0, 0, "-", "parsing"], [269, 0, 0, "-", "physics"], [203, 0, 0, "-", "polys"], [225, 0, 0, "-", "solvers"], [227, 0, 0, "-", "stats"], [230, 0, 0, "-", "tensor"], [235, 0, 0, "-", "testing"], [244, 0, 0, "-", "utilities"], [260, 0, 0, "-", "vector"]], "sympy.algebras": [[32, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[32, 2, 1, "", "add"], [32, 2, 1, "", "angle"], [32, 2, 1, "", "arc_coplanar"], [32, 2, 1, "", "axis"], [32, 2, 1, "", "exp"], [32, 2, 1, "", "from_axis_angle"], [32, 2, 1, "", "from_rotation_matrix"], [32, 2, 1, "", "index_vector"], [32, 2, 1, "", "integrate"], [32, 2, 1, "", "inverse"], [32, 2, 1, "", "is_pure"], [32, 2, 1, "", "is_zero_quaternion"], [32, 2, 1, "", "mensor"], [32, 2, 1, "", "mul"], [32, 2, 1, "", "norm"], [32, 2, 1, "", "normalize"], [32, 2, 1, "", "orthogonal"], [32, 2, 1, "", "parallel"], [32, 2, 1, "", "pow"], [32, 2, 1, "", "pow_cos_sin"], [32, 2, 1, "", "rotate_point"], [32, 2, 1, "", "scalar_part"], [32, 2, 1, "", "to_axis_angle"], [32, 2, 1, "", "to_rotation_matrix"], [32, 2, 1, "", "vector_coplanar"], [32, 2, 1, "", "vector_part"]], "sympy.assumptions": [[33, 0, 0, "-", "ask"], [34, 0, 0, "-", "assume"], [36, 0, 0, "-", "predicates"], [37, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[33, 1, 1, "", "AssumptionKeys"], [33, 3, 1, "", "ask"], [33, 3, 1, "", "register_handler"], [33, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[34, 1, 1, "", "AppliedPredicate"], [34, 1, 1, "", "AssumptionsContext"], [34, 1, 1, "", "Predicate"], [34, 1, 1, "", "UndefinedPredicate"], [34, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[34, 4, 1, "", "arg"], [34, 4, 1, "", "arguments"], [34, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[34, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[34, 2, 1, "", "eval"], [34, 5, 1, "", "handler"], [34, 2, 1, "", "register"], [34, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[36, 1, 1, "", "FinitePredicate"], [36, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[36, 1, 1, "", "CommutativePredicate"], [36, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[36, 1, 1, "", "ComplexElementsPredicate"], [36, 1, 1, "", "DiagonalPredicate"], [36, 1, 1, "", "FullRankPredicate"], [36, 1, 1, "", "IntegerElementsPredicate"], [36, 1, 1, "", "InvertiblePredicate"], [36, 1, 1, "", "LowerTriangularPredicate"], [36, 1, 1, "", "NormalPredicate"], [36, 1, 1, "", "OrthogonalPredicate"], [36, 1, 1, "", "PositiveDefinitePredicate"], [36, 1, 1, "", "RealElementsPredicate"], [36, 1, 1, "", "SingularPredicate"], [36, 1, 1, "", "SquarePredicate"], [36, 1, 1, "", "SymmetricPredicate"], [36, 1, 1, "", "TriangularPredicate"], [36, 1, 1, "", "UnitTriangularPredicate"], [36, 1, 1, "", "UnitaryPredicate"], [36, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[36, 1, 1, "", "CompositePredicate"], [36, 1, 1, "", "EvenPredicate"], [36, 1, 1, "", "OddPredicate"], [36, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[36, 1, 1, "", "NegativePredicate"], [36, 1, 1, "", "NonNegativePredicate"], [36, 1, 1, "", "NonPositivePredicate"], [36, 1, 1, "", "NonZeroPredicate"], [36, 1, 1, "", "PositivePredicate"], [36, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[36, 1, 1, "", "AlgebraicPredicate"], [36, 1, 1, "", "AntihermitianPredicate"], [36, 1, 1, "", "ComplexPredicate"], [36, 1, 1, "", "ExtendedRealPredicate"], [36, 1, 1, "", "HermitianPredicate"], [36, 1, 1, "", "ImaginaryPredicate"], [36, 1, 1, "", "IntegerPredicate"], [36, 1, 1, "", "IrrationalPredicate"], [36, 1, 1, "", "RationalPredicate"], [36, 1, 1, "", "RealPredicate"], [36, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[36, 5, 1, "", "AlgebraicHandler"], [36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[36, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[37, 3, 1, "", "refine"], [37, 3, 1, "", "refine_Pow"], [37, 3, 1, "", "refine_abs"], [37, 3, 1, "", "refine_arg"], [37, 3, 1, "", "refine_atan2"], [37, 3, 1, "", "refine_im"], [37, 3, 1, "", "refine_matrixelement"], [37, 3, 1, "", "refine_re"], [37, 3, 1, "", "refine_sign"]], "sympy.calculus": [[38, 0, 0, "-", "euler"], [38, 0, 0, "-", "finite_diff"], [38, 0, 0, "-", "singularities"], [38, 0, 0, "-", "util"]], "sympy.calculus.euler": [[38, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[38, 3, 1, "", "apply_finite_diff"], [38, 3, 1, "", "differentiate_finite"], [38, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[38, 3, 1, "", "is_decreasing"], [38, 3, 1, "", "is_increasing"], [38, 3, 1, "", "is_monotonic"], [38, 3, 1, "", "is_strictly_decreasing"], [38, 3, 1, "", "is_strictly_increasing"], [38, 3, 1, "", "monotonicity_helper"], [38, 3, 1, "", "singularities"]], "sympy.calculus.util": [[38, 3, 1, "", "continuous_domain"], [38, 3, 1, "", "function_range"], [38, 3, 1, "", "is_convex"], [38, 3, 1, "", "lcim"], [38, 3, 1, "", "maximum"], [38, 3, 1, "", "minimum"], [38, 3, 1, "", "not_empty_in"], [38, 3, 1, "", "periodicity"], [38, 3, 1, "", "stationary_points"]], "sympy.categories": [[39, 1, 1, "", "Category"], [39, 1, 1, "", "CompositeMorphism"], [39, 1, 1, "", "Diagram"], [39, 1, 1, "", "IdentityMorphism"], [39, 1, 1, "", "Morphism"], [39, 1, 1, "", "NamedMorphism"], [39, 1, 1, "", "Object"], [39, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[39, 4, 1, "", "commutative_diagrams"], [39, 4, 1, "", "name"], [39, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[39, 4, 1, "", "codomain"], [39, 4, 1, "", "components"], [39, 4, 1, "", "domain"], [39, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[39, 4, 1, "", "conclusions"], [39, 2, 1, "", "hom"], [39, 2, 1, "", "is_subdiagram"], [39, 4, 1, "", "objects"], [39, 4, 1, "", "premises"], [39, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[39, 4, 1, "", "codomain"], [39, 2, 1, "", "compose"], [39, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[39, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[39, 1, 1, "", "ArrowStringDescription"], [39, 1, 1, "", "DiagramGrid"], [39, 1, 1, "", "XypicDiagramDrawer"], [39, 3, 1, "", "preview_diagram"], [39, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[39, 4, 1, "", "height"], [39, 4, 1, "", "morphisms"], [39, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[39, 2, 1, "", "draw"]], "sympy.codegen": [[40, 0, 0, "-", "algorithms"], [40, 0, 0, "-", "approximations"], [40, 0, 0, "-", "ast"], [40, 0, 0, "-", "cfunctions"], [40, 0, 0, "-", "cnodes"], [40, 0, 0, "-", "cutils"], [40, 0, 0, "-", "cxxnodes"], [40, 0, 0, "-", "fnodes"], [40, 0, 0, "-", "futils"], [40, 0, 0, "-", "matrix_nodes"], [40, 0, 0, "-", "pyutils"], [40, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[40, 3, 1, "", "newtons_method"], [40, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[40, 1, 1, "", "SeriesApprox"], [40, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[40, 1, 1, "", "Assignment"], [40, 1, 1, "", "AssignmentBase"], [40, 1, 1, "", "Attribute"], [40, 1, 1, "", "AugmentedAssignment"], [40, 1, 1, "", "BreakToken"], [40, 1, 1, "", "CodeBlock"], [40, 1, 1, "", "Comment"], [40, 1, 1, "", "ComplexType"], [40, 1, 1, "", "ContinueToken"], [40, 1, 1, "", "Declaration"], [40, 1, 1, "", "Element"], [40, 1, 1, "", "FloatBaseType"], [40, 1, 1, "", "FloatType"], [40, 1, 1, "", "For"], [40, 1, 1, "", "FunctionCall"], [40, 1, 1, "", "FunctionDefinition"], [40, 1, 1, "", "FunctionPrototype"], [40, 1, 1, "", "IntBaseType"], [40, 1, 1, "", "Node"], [40, 1, 1, "", "NoneToken"], [40, 1, 1, "", "Pointer"], [40, 1, 1, "", "Print"], [40, 1, 1, "", "QuotedString"], [40, 1, 1, "", "Return"], [40, 1, 1, "", "Scope"], [40, 1, 1, "", "SignedIntType"], [40, 1, 1, "", "Stream"], [40, 1, 1, "", "String"], [40, 1, 1, "", "Token"], [40, 1, 1, "", "Type"], [40, 1, 1, "", "UnsignedIntType"], [40, 1, 1, "", "Variable"], [40, 1, 1, "", "While"], [40, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[40, 2, 1, "", "cse"], [40, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[40, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[40, 2, 1, "", "cast_nocheck"], [40, 4, 1, "", "decimal_dig"], [40, 4, 1, "", "dig"], [40, 4, 1, "", "eps"], [40, 4, 1, "", "max"], [40, 4, 1, "", "max_exponent"], [40, 4, 1, "", "min_exponent"], [40, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[40, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[40, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[40, 2, 1, "", "cast_check"], [40, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[40, 2, 1, "", "as_Declaration"], [40, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[40, 1, 1, "", "Cbrt"], [40, 1, 1, "", "Sqrt"], [40, 1, 1, "", "exp2"], [40, 1, 1, "", "expm1"], [40, 1, 1, "", "fma"], [40, 1, 1, "", "hypot"], [40, 1, 1, "", "log10"], [40, 1, 1, "", "log1p"], [40, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[40, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[40, 1, 1, "", "CommaOperator"], [40, 1, 1, "", "Label"], [40, 1, 1, "", "PostDecrement"], [40, 1, 1, "", "PostIncrement"], [40, 1, 1, "", "PreDecrement"], [40, 1, 1, "", "PreIncrement"], [40, 3, 1, "", "alignof"], [40, 1, 1, "", "goto"], [40, 3, 1, "", "sizeof"], [40, 1, 1, "", "struct"], [40, 1, 1, "", "union"]], "sympy.codegen.cutils": [[40, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[40, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[40, 1, 1, "", "ArrayConstructor"], [40, 1, 1, "", "Do"], [40, 1, 1, "", "Extent"], [40, 1, 1, "", "FortranReturn"], [40, 1, 1, "", "GoTo"], [40, 1, 1, "", "ImpliedDoLoop"], [40, 1, 1, "", "Module"], [40, 1, 1, "", "Program"], [40, 1, 1, "", "Subroutine"], [40, 1, 1, "", "SubroutineCall"], [40, 3, 1, "", "allocated"], [40, 3, 1, "", "array"], [40, 3, 1, "", "bind_C"], [40, 1, 1, "", "cmplx"], [40, 3, 1, "", "dimension"], [40, 1, 1, "", "dsign"], [40, 1, 1, "", "isign"], [40, 1, 1, "", "kind"], [40, 3, 1, "", "lbound"], [40, 1, 1, "", "literal_dp"], [40, 1, 1, "", "literal_sp"], [40, 1, 1, "", "merge"], [40, 3, 1, "", "reshape"], [40, 3, 1, "", "shape"], [40, 3, 1, "", "size"], [40, 1, 1, "", "use"], [40, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[40, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[40, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[40, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[40, 1, 1, "", "FuncMinusOneOptim"], [40, 1, 1, "", "Optimization"], [40, 1, 1, "", "ReplaceOptim"], [40, 3, 1, "", "create_expand_pow_optimization"], [40, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[40, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[50, 0, 0, "-", "generators"], [42, 0, 0, "-", "graycode"], [43, 0, 0, "-", "group_constructs"], [44, 0, 0, "-", "group_numbers"], [46, 0, 0, "-", "named_groups"], [47, 0, 0, "-", "partitions"], [49, 0, 0, "-", "perm_groups"], [50, 0, 0, "-", "permutations"], [51, 0, 0, "-", "polyhedron"], [52, 0, 0, "-", "prufer"], [53, 0, 0, "-", "subsets"], [54, 0, 0, "-", "tensor_can"], [55, 0, 0, "-", "testutil"], [56, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[50, 2, 1, "", "alternating"], [50, 2, 1, "", "cyclic"], [50, 2, 1, "", "dihedral"], [50, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[42, 1, 1, "", "GrayCode"], [42, 2, 1, "", "bin_to_gray"], [42, 2, 1, "", "get_subset_from_bitstring"], [42, 2, 1, "", "gray_to_bin"], [42, 2, 1, "", "graycode_subsets"], [42, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[42, 4, 1, "", "current"], [42, 2, 1, "", "generate_gray"], [42, 4, 1, "", "n"], [42, 2, 1, "", "next"], [42, 4, 1, "", "rank"], [42, 4, 1, "", "selections"], [42, 2, 1, "", "skip"], [42, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[43, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[44, 3, 1, "", "is_abelian_number"], [44, 3, 1, "", "is_cyclic_number"], [44, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[46, 3, 1, "", "AbelianGroup"], [46, 3, 1, "", "AlternatingGroup"], [46, 3, 1, "", "CyclicGroup"], [46, 3, 1, "", "DihedralGroup"], [46, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[47, 1, 1, "", "IntegerPartition"], [47, 1, 1, "", "Partition"], [47, 3, 1, "", "RGS_enum"], [47, 3, 1, "", "RGS_generalized"], [47, 3, 1, "", "RGS_rank"], [47, 3, 1, "", "RGS_unrank"], [47, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[47, 2, 1, "", "as_dict"], [47, 2, 1, "", "as_ferrers"], [47, 4, 1, "", "conjugate"], [47, 2, 1, "", "next_lex"], [47, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[47, 4, 1, "", "RGS"], [47, 2, 1, "", "from_rgs"], [47, 4, 1, "", "partition"], [47, 4, 1, "", "rank"], [47, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[49, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[49, 2, 1, "", "__contains__"], [49, 2, 1, "", "__mul__"], [49, 2, 1, "", "__new__"], [49, 5, 1, "", "__weakref__"], [49, 2, 1, "", "_coset_representative"], [49, 2, 1, "", "_distinct_primes_lemma"], [49, 4, 1, "", "_elements"], [49, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [49, 2, 1, "", "_eval_is_alt_sym_naive"], [49, 2, 1, "", "_p_elements_group"], [49, 2, 1, "", "_random_pr_init"], [49, 2, 1, "", "_sylow_alt_sym"], [49, 2, 1, "", "_union_find_merge"], [49, 2, 1, "", "_union_find_rep"], [49, 2, 1, "", "_verify"], [49, 2, 1, "", "abelian_invariants"], [49, 4, 1, "", "base"], [49, 2, 1, "", "baseswap"], [49, 4, 1, "", "basic_orbits"], [49, 4, 1, "", "basic_stabilizers"], [49, 4, 1, "", "basic_transversals"], [49, 2, 1, "", "center"], [49, 2, 1, "", "centralizer"], [49, 2, 1, "", "commutator"], [49, 2, 1, "", "composition_series"], [49, 2, 1, "", "conjugacy_class"], [49, 2, 1, "", "conjugacy_classes"], [49, 2, 1, "", "contains"], [49, 2, 1, "", "coset_factor"], [49, 2, 1, "", "coset_rank"], [49, 2, 1, "", "coset_table"], [49, 2, 1, "", "coset_transversal"], [49, 2, 1, "", "coset_unrank"], [49, 4, 1, "", "degree"], [49, 2, 1, "", "derived_series"], [49, 2, 1, "", "derived_subgroup"], [49, 4, 1, "", "elements"], [49, 2, 1, "", "equals"], [49, 2, 1, "", "generate"], [49, 2, 1, "", "generate_dimino"], [49, 2, 1, "", "generate_schreier_sims"], [49, 2, 1, "", "generator_product"], [49, 4, 1, "", "generators"], [49, 4, 1, "", "identity"], [49, 2, 1, "", "index"], [49, 4, 1, "", "is_abelian"], [49, 2, 1, "", "is_alt_sym"], [49, 4, 1, "", "is_alternating"], [49, 4, 1, "", "is_cyclic"], [49, 2, 1, "", "is_elementary"], [49, 4, 1, "", "is_nilpotent"], [49, 2, 1, "", "is_normal"], [49, 4, 1, "", "is_perfect"], [49, 4, 1, "", "is_polycyclic"], [49, 2, 1, "", "is_primitive"], [49, 4, 1, "", "is_solvable"], [49, 2, 1, "", "is_subgroup"], [49, 4, 1, "", "is_symmetric"], [49, 2, 1, "", "is_transitive"], [49, 4, 1, "", "is_trivial"], [49, 2, 1, "", "lower_central_series"], [49, 2, 1, "", "make_perm"], [49, 4, 1, "", "max_div"], [49, 2, 1, "", "minimal_block"], [49, 2, 1, "", "minimal_blocks"], [49, 2, 1, "", "normal_closure"], [49, 2, 1, "", "orbit"], [49, 2, 1, "", "orbit_rep"], [49, 2, 1, "", "orbit_transversal"], [49, 2, 1, "", "orbits"], [49, 2, 1, "", "order"], [49, 2, 1, "", "pointwise_stabilizer"], [49, 2, 1, "", "polycyclic_group"], [49, 2, 1, "", "presentation"], [49, 2, 1, "", "random"], [49, 2, 1, "", "random_pr"], [49, 2, 1, "", "random_stab"], [49, 2, 1, "", "schreier_sims"], [49, 2, 1, "", "schreier_sims_incremental"], [49, 2, 1, "", "schreier_sims_random"], [49, 2, 1, "", "schreier_vector"], [49, 2, 1, "", "stabilizer"], [49, 4, 1, "", "strong_gens"], [49, 2, 1, "", "strong_presentation"], [49, 2, 1, "", "subgroup"], [49, 2, 1, "", "subgroup_search"], [49, 2, 1, "", "sylow_subgroup"], [49, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[50, 1, 1, "", "Cycle"], [50, 1, 1, "", "Permutation"], [50, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[50, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[50, 2, 1, "", "apply"], [50, 4, 1, "", "array_form"], [50, 2, 1, "", "ascents"], [50, 2, 1, "", "atoms"], [50, 4, 1, "", "cardinality"], [50, 2, 1, "", "commutator"], [50, 2, 1, "", "commutes_with"], [50, 4, 1, "", "cycle_structure"], [50, 4, 1, "", "cycles"], [50, 4, 1, "", "cyclic_form"], [50, 2, 1, "", "descents"], [50, 2, 1, "", "from_inversion_vector"], [50, 2, 1, "", "from_sequence"], [50, 4, 1, "", "full_cyclic_form"], [50, 2, 1, "", "get_adjacency_distance"], [50, 2, 1, "", "get_adjacency_matrix"], [50, 2, 1, "", "get_positional_distance"], [50, 2, 1, "", "get_precedence_distance"], [50, 2, 1, "", "get_precedence_matrix"], [50, 2, 1, "", "index"], [50, 2, 1, "", "inversion_vector"], [50, 2, 1, "", "inversions"], [50, 4, 1, "", "is_Empty"], [50, 4, 1, "", "is_Identity"], [50, 4, 1, "", "is_Singleton"], [50, 4, 1, "", "is_even"], [50, 4, 1, "", "is_odd"], [50, 2, 1, "", "josephus"], [50, 2, 1, "", "length"], [50, 2, 1, "", "list"], [50, 2, 1, "", "max"], [50, 2, 1, "", "min"], [50, 2, 1, "", "mul_inv"], [50, 2, 1, "", "next_lex"], [50, 2, 1, "", "next_nonlex"], [50, 2, 1, "", "next_trotterjohnson"], [50, 2, 1, "", "order"], [50, 2, 1, "", "parity"], [50, 2, 1, "", "random"], [50, 2, 1, "", "rank"], [50, 2, 1, "", "rank_nonlex"], [50, 2, 1, "", "rank_trotterjohnson"], [50, 2, 1, "", "resize"], [50, 2, 1, "", "rmul"], [50, 2, 1, "", "rmul_with_af"], [50, 2, 1, "", "runs"], [50, 2, 1, "", "signature"], [50, 4, 1, "", "size"], [50, 2, 1, "", "support"], [50, 2, 1, "", "transpositions"], [50, 2, 1, "", "unrank_lex"], [50, 2, 1, "", "unrank_nonlex"], [50, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[51, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[51, 4, 1, "", "array_form"], [51, 4, 1, "", "corners"], [51, 4, 1, "", "cyclic_form"], [51, 4, 1, "", "edges"], [51, 4, 1, "", "faces"], [51, 4, 1, "", "pgroup"], [51, 2, 1, "", "reset"], [51, 2, 1, "", "rotate"], [51, 4, 1, "", "size"], [51, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[52, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[52, 2, 1, "", "edges"], [52, 2, 1, "", "next"], [52, 4, 1, "", "nodes"], [52, 2, 1, "", "prev"], [52, 2, 1, "", "prufer_rank"], [52, 4, 1, "", "prufer_repr"], [52, 4, 1, "", "rank"], [52, 4, 1, "", "size"], [52, 2, 1, "", "to_prufer"], [52, 2, 1, "", "to_tree"], [52, 4, 1, "", "tree_repr"], [52, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[53, 1, 1, "", "Subset"], [53, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[53, 2, 1, "", "bitlist_from_subset"], [53, 4, 1, "", "cardinality"], [53, 2, 1, "", "iterate_binary"], [53, 2, 1, "", "iterate_graycode"], [53, 2, 1, "", "next_binary"], [53, 2, 1, "", "next_gray"], [53, 2, 1, "", "next_lexicographic"], [53, 2, 1, "", "prev_binary"], [53, 2, 1, "", "prev_gray"], [53, 2, 1, "", "prev_lexicographic"], [53, 4, 1, "", "rank_binary"], [53, 4, 1, "", "rank_gray"], [53, 4, 1, "", "rank_lexicographic"], [53, 4, 1, "", "size"], [53, 4, 1, "", "subset"], [53, 2, 1, "", "subset_from_bitlist"], [53, 2, 1, "", "subset_indices"], [53, 4, 1, "", "superset"], [53, 4, 1, "", "superset_size"], [53, 2, 1, "", "unrank_binary"], [53, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[54, 3, 1, "", "bsgs_direct_product"], [54, 3, 1, "", "canonicalize"], [54, 3, 1, "", "double_coset_can_rep"], [54, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[55, 3, 1, "", "_cmp_perm_lists"], [55, 3, 1, "", "_naive_list_centralizer"], [55, 3, 1, "", "_verify_bsgs"], [55, 3, 1, "", "_verify_centralizer"], [55, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[56, 3, 1, "", "_base_ordering"], [56, 3, 1, "", "_check_cycles_alt_sym"], [56, 3, 1, "", "_distribute_gens_by_base"], [56, 3, 1, "", "_handle_precomputed_bsgs"], [56, 3, 1, "", "_orbits_transversals_from_bsgs"], [56, 3, 1, "", "_remove_gens"], [56, 3, 1, "", "_strip"], [56, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[57, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[57, 2, 1, "", "change_index"], [57, 4, 1, "", "has_empty_sequence"], [57, 2, 1, "", "index"], [57, 2, 1, "", "reorder"], [57, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[85, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[85, 4, 1, "", "bound_symbols"], [85, 4, 1, "", "free_symbols"], [85, 4, 1, "", "function"], [85, 4, 1, "", "has_finite_limits"], [85, 4, 1, "", "has_reversed_limits"], [85, 4, 1, "", "is_number"], [85, 4, 1, "", "limits"], [85, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[57, 3, 1, "", "gosper_normal"], [57, 3, 1, "", "gosper_sum"], [57, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[57, 1, 1, "", "Product"], [57, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[57, 2, 1, "", "is_convergent"], [57, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[57, 1, 1, "", "Sum"], [57, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[57, 2, 1, "", "euler_maclaurin"], [57, 2, 1, "", "eval_zeta_function"], [57, 2, 1, "", "is_absolutely_convergent"], [57, 2, 1, "", "is_convergent"], [57, 2, 1, "", "reverse_order"]], "sympy.core": [[58, 0, 0, "-", "add"], [58, 0, 0, "-", "assumptions"], [58, 0, 0, "-", "basic"], [58, 0, 0, "-", "cache"], [58, 0, 0, "-", "containers"], [58, 0, 0, "-", "evalf"], [58, 0, 0, "-", "expr"], [58, 0, 0, "-", "exprtools"], [58, 0, 0, "-", "function"], [58, 0, 0, "-", "kind"], [58, 0, 0, "-", "mod"], [58, 0, 0, "-", "mul"], [58, 0, 0, "-", "multidimensional"], [58, 0, 0, "-", "numbers"], [58, 0, 0, "-", "power"], [58, 0, 0, "-", "random"], [58, 0, 0, "-", "relational"], [58, 0, 0, "-", "singleton"], [58, 0, 0, "-", "symbol"], [58, 0, 0, "-", "sympify"], [58, 0, 0, "-", "traversal"]], "sympy.core.add": [[58, 1, 1, "", "Add"]], "sympy.core.add.Add": [[58, 2, 1, "", "as_coeff_Add"], [58, 2, 1, "", "as_coeff_add"], [58, 2, 1, "", "as_content_primitive"], [58, 2, 1, "", "as_numer_denom"], [58, 2, 1, "", "as_real_imag"], [58, 2, 1, "", "as_two_terms"], [58, 2, 1, "", "class_key"], [58, 2, 1, "", "extract_leading_order"], [58, 2, 1, "", "flatten"], [58, 2, 1, "", "primitive"]], "sympy.core.basic": [[58, 1, 1, "", "Atom"], [58, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[58, 4, 1, "", "args"], [58, 2, 1, "", "as_content_primitive"], [58, 2, 1, "", "as_dummy"], [58, 4, 1, "", "assumptions0"], [58, 2, 1, "", "atoms"], [58, 4, 1, "", "canonical_variables"], [58, 2, 1, "", "class_key"], [58, 2, 1, "", "compare"], [58, 2, 1, "", "count"], [58, 2, 1, "", "count_ops"], [58, 2, 1, "", "doit"], [58, 2, 1, "", "dummy_eq"], [58, 2, 1, "", "find"], [58, 4, 1, "", "free_symbols"], [58, 2, 1, "", "fromiter"], [58, 4, 1, "", "func"], [58, 2, 1, "", "has"], [58, 2, 1, "", "has_free"], [58, 2, 1, "", "has_xfree"], [58, 4, 1, "", "is_comparable"], [58, 2, 1, "", "match"], [58, 2, 1, "", "matches"], [58, 2, 1, "", "rcall"], [58, 2, 1, "", "refine"], [58, 2, 1, "", "replace"], [58, 2, 1, "", "rewrite"], [58, 2, 1, "", "simplify"], [58, 2, 1, "", "sort_key"], [58, 2, 1, "", "subs"], [58, 2, 1, "", "xreplace"]], "sympy.core.cache": [[58, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[58, 1, 1, "", "Dict"], [58, 1, 1, "", "Tuple"], [58, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[58, 2, 1, "", "get"], [58, 2, 1, "", "items"], [58, 2, 1, "", "keys"], [58, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[58, 2, 1, "", "index"], [58, 4, 1, "", "kind"], [58, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[58, 1, 1, "", "EvalfMixin"], [58, 3, 1, "", "N"], [58, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[58, 2, 1, "", "evalf"], [58, 2, 1, "", "n"]], "sympy.core.expr": [[58, 1, 1, "", "AtomicExpr"], [58, 1, 1, "", "Expr"], [58, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[58, 2, 1, "", "apart"], [58, 2, 1, "", "args_cnc"], [58, 2, 1, "", "as_coeff_Add"], [58, 2, 1, "", "as_coeff_Mul"], [58, 2, 1, "", "as_coeff_add"], [58, 2, 1, "", "as_coeff_exponent"], [58, 2, 1, "", "as_coeff_mul"], [58, 2, 1, "", "as_coefficient"], [58, 2, 1, "", "as_coefficients_dict"], [58, 2, 1, "", "as_content_primitive"], [58, 2, 1, "", "as_expr"], [58, 2, 1, "", "as_independent"], [58, 2, 1, "", "as_leading_term"], [58, 2, 1, "", "as_numer_denom"], [58, 2, 1, "", "as_ordered_factors"], [58, 2, 1, "", "as_ordered_terms"], [58, 2, 1, "", "as_poly"], [58, 2, 1, "", "as_powers_dict"], [58, 2, 1, "", "as_real_imag"], [58, 2, 1, "", "as_terms"], [58, 2, 1, "", "aseries"], [58, 2, 1, "", "cancel"], [58, 2, 1, "", "coeff"], [58, 2, 1, "", "collect"], [58, 2, 1, "", "combsimp"], [58, 2, 1, "", "compute_leading_term"], [58, 2, 1, "", "conjugate"], [58, 2, 1, "", "could_extract_minus_sign"], [58, 2, 1, "", "count_ops"], [58, 2, 1, "", "equals"], [58, 2, 1, "", "expand"], [58, 4, 1, "", "expr_free_symbols"], [58, 2, 1, "", "extract_additively"], [58, 2, 1, "", "extract_branch_factor"], [58, 2, 1, "", "extract_multiplicatively"], [58, 2, 1, "", "factor"], [58, 2, 1, "", "fourier_series"], [58, 2, 1, "", "fps"], [58, 2, 1, "", "gammasimp"], [58, 2, 1, "", "getO"], [58, 2, 1, "", "getn"], [58, 2, 1, "", "integrate"], [58, 2, 1, "", "invert"], [58, 2, 1, "", "is_algebraic_expr"], [58, 2, 1, "", "is_constant"], [58, 2, 1, "", "is_meromorphic"], [58, 4, 1, "", "is_number"], [58, 2, 1, "", "is_polynomial"], [58, 2, 1, "", "is_rational_function"], [58, 2, 1, "", "leadterm"], [58, 2, 1, "", "limit"], [58, 2, 1, "", "lseries"], [58, 2, 1, "", "normal"], [58, 2, 1, "", "nseries"], [58, 2, 1, "", "nsimplify"], [58, 2, 1, "", "powsimp"], [58, 2, 1, "", "primitive"], [58, 2, 1, "", "radsimp"], [58, 2, 1, "", "ratsimp"], [58, 2, 1, "", "removeO"], [58, 2, 1, "", "round"], [58, 2, 1, "", "separate"], [58, 2, 1, "", "series"], [58, 2, 1, "", "taylor_term"], [58, 2, 1, "", "together"], [58, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[58, 3, 1, "", "factor_terms"], [58, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[58, 1, 1, "", "Derivative"], [58, 1, 1, "", "Function"], [58, 1, 1, "", "FunctionClass"], [58, 1, 1, "", "Lambda"], [58, 1, 1, "", "PoleError"], [58, 1, 1, "", "Subs"], [58, 1, 1, "", "WildFunction"], [58, 3, 1, "", "count_ops"], [58, 3, 1, "", "diff"], [58, 3, 1, "", "expand"], [58, 3, 1, "", "expand_complex"], [58, 3, 1, "", "expand_func"], [58, 3, 1, "", "expand_log"], [58, 3, 1, "", "expand_mul"], [58, 3, 1, "", "expand_multinomial"], [58, 3, 1, "", "expand_power_base"], [58, 3, 1, "", "expand_power_exp"], [58, 3, 1, "", "expand_trig"], [58, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[58, 4, 1, "", "_diff_wrt"], [58, 2, 1, "", "_sort_variable_count"], [58, 2, 1, "", "as_finite_difference"], [58, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[58, 2, 1, "", "as_base_exp"], [58, 2, 1, "", "fdiff"], [58, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[58, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[58, 4, 1, "", "bound_symbols"], [58, 4, 1, "", "expr"], [58, 4, 1, "", "is_identity"], [58, 4, 1, "", "signature"], [58, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[58, 4, 1, "", "bound_symbols"], [58, 4, 1, "", "expr"], [58, 4, 1, "", "point"], [58, 4, 1, "", "variables"]], "sympy.core.kind": [[58, 5, 1, "", "BooleanKind"], [58, 1, 1, "", "Kind"], [58, 5, 1, "", "NumberKind"], [58, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[58, 1, 1, "", "Mod"]], "sympy.core.mul": [[58, 1, 1, "", "Mul"], [58, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[58, 2, 1, "", "as_coeff_Mul"], [58, 2, 1, "", "as_content_primitive"], [58, 2, 1, "", "as_ordered_factors"], [58, 2, 1, "", "as_two_terms"], [58, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[58, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[58, 1, 1, "", "AlgebraicNumber"], [58, 1, 1, "", "Catalan"], [58, 1, 1, "", "ComplexInfinity"], [58, 1, 1, "", "EulerGamma"], [58, 1, 1, "", "Exp1"], [58, 1, 1, "", "Float"], [58, 1, 1, "", "GoldenRatio"], [58, 1, 1, "", "Half"], [58, 1, 1, "", "ImaginaryUnit"], [58, 1, 1, "", "Infinity"], [58, 1, 1, "", "Integer"], [58, 1, 1, "", "NaN"], [58, 1, 1, "", "NegativeInfinity"], [58, 1, 1, "", "NegativeOne"], [58, 1, 1, "", "Number"], [58, 1, 1, "", "NumberSymbol"], [58, 1, 1, "", "One"], [58, 1, 1, "", "Pi"], [58, 1, 1, "", "Rational"], [58, 5, 1, "", "RealNumber"], [58, 1, 1, "", "TribonacciConstant"], [58, 1, 1, "", "Zero"], [58, 3, 1, "", "igcd"], [58, 3, 1, "", "ilcm"], [58, 3, 1, "", "mod_inverse"], [58, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[58, 2, 1, "", "__new__"], [58, 2, 1, "", "as_expr"], [58, 2, 1, "", "as_poly"], [58, 2, 1, "", "coeffs"], [58, 2, 1, "", "field_element"], [58, 4, 1, "", "is_aliased"], [58, 4, 1, "", "is_primitive_element"], [58, 2, 1, "", "minpoly_of_element"], [58, 2, 1, "", "native_coeffs"], [58, 2, 1, "", "primitive_element"], [58, 2, 1, "", "to_algebraic_integer"], [58, 2, 1, "", "to_primitive_element"], [58, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[58, 2, 1, "", "as_coeff_Add"], [58, 2, 1, "", "as_coeff_Mul"], [58, 2, 1, "", "cofactors"], [58, 2, 1, "", "gcd"], [58, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[58, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[58, 2, 1, "", "as_coeff_Add"], [58, 2, 1, "", "as_coeff_Mul"], [58, 2, 1, "", "as_content_primitive"], [58, 2, 1, "", "factors"], [58, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[58, 1, 1, "", "Pow"], [58, 3, 1, "", "integer_log"], [58, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[58, 2, 1, "", "as_base_exp"], [58, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[58, 3, 1, "", "_randint"], [58, 3, 1, "", "_randrange"], [58, 3, 1, "", "random_complex_number"], [58, 3, 1, "", "test_derivative_numerically"], [58, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[58, 5, 1, "", "Eq"], [58, 1, 1, "", "Equality"], [58, 5, 1, "", "Ge"], [58, 1, 1, "", "GreaterThan"], [58, 5, 1, "", "Gt"], [58, 5, 1, "", "Le"], [58, 1, 1, "", "LessThan"], [58, 5, 1, "", "Lt"], [58, 5, 1, "", "Ne"], [58, 5, 1, "", "Rel"], [58, 1, 1, "", "Relational"], [58, 1, 1, "", "StrictGreaterThan"], [58, 1, 1, "", "StrictLessThan"], [58, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[58, 2, 1, "", "as_poly"], [58, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[58, 4, 1, "", "canonical"], [58, 2, 1, "", "equals"], [58, 4, 1, "", "lhs"], [58, 4, 1, "", "negated"], [58, 4, 1, "", "reversed"], [58, 4, 1, "", "reversedsign"], [58, 4, 1, "", "rhs"], [58, 4, 1, "", "strict"], [58, 4, 1, "", "weak"]], "sympy.core.singleton": [[58, 1, 1, "", "Singleton"], [58, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[58, 3, 1, "", "default_sort_key"], [58, 3, 1, "", "ordered"]], "sympy.core.symbol": [[58, 1, 1, "", "Dummy"], [58, 1, 1, "", "Symbol"], [58, 1, 1, "", "Wild"], [58, 3, 1, "", "symbols"], [58, 3, 1, "", "var"]], "sympy.core.sympify": [[58, 3, 1, "", "sympify"]], "sympy.core.traversal": [[58, 3, 1, "", "bottom_up"], [58, 3, 1, "", "postorder_traversal"], [58, 3, 1, "", "preorder_traversal"], [58, 3, 1, "", "use"], [58, 3, 1, "", "walk"]], "sympy.crypto": [[59, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[59, 3, 1, "", "AZ"], [59, 3, 1, "", "bifid5_square"], [59, 3, 1, "", "bifid6_square"], [59, 3, 1, "", "check_and_join"], [59, 3, 1, "", "cycle_list"], [59, 3, 1, "", "decipher_affine"], [59, 3, 1, "", "decipher_atbash"], [59, 3, 1, "", "decipher_bifid"], [59, 3, 1, "", "decipher_bifid5"], [59, 3, 1, "", "decipher_bifid6"], [59, 3, 1, "", "decipher_elgamal"], [59, 3, 1, "", "decipher_gm"], [59, 3, 1, "", "decipher_hill"], [59, 3, 1, "", "decipher_kid_rsa"], [59, 3, 1, "", "decipher_railfence"], [59, 3, 1, "", "decipher_rot13"], [59, 3, 1, "", "decipher_rsa"], [59, 3, 1, "", "decipher_shift"], [59, 3, 1, "", "decipher_vigenere"], [59, 3, 1, "", "decode_morse"], [59, 3, 1, "", "dh_private_key"], [59, 3, 1, "", "dh_public_key"], [59, 3, 1, "", "dh_shared_key"], [59, 3, 1, "", "elgamal_private_key"], [59, 3, 1, "", "elgamal_public_key"], [59, 3, 1, "", "encipher_affine"], [59, 3, 1, "", "encipher_atbash"], [59, 3, 1, "", "encipher_bifid"], [59, 3, 1, "", "encipher_bifid5"], [59, 3, 1, "", "encipher_bifid6"], [59, 3, 1, "", "encipher_elgamal"], [59, 3, 1, "", "encipher_gm"], [59, 3, 1, "", "encipher_hill"], [59, 3, 1, "", "encipher_kid_rsa"], [59, 3, 1, "", "encipher_railfence"], [59, 3, 1, "", "encipher_rot13"], [59, 3, 1, "", "encipher_rsa"], [59, 3, 1, "", "encipher_shift"], [59, 3, 1, "", "encipher_substitution"], [59, 3, 1, "", "encipher_vigenere"], [59, 3, 1, "", "encode_morse"], [59, 3, 1, "", "gm_private_key"], [59, 3, 1, "", "gm_public_key"], [59, 3, 1, "", "kid_rsa_private_key"], [59, 3, 1, "", "kid_rsa_public_key"], [59, 3, 1, "", "lfsr_autocorrelation"], [59, 3, 1, "", "lfsr_connection_polynomial"], [59, 3, 1, "", "lfsr_sequence"], [59, 3, 1, "", "padded_key"], [59, 3, 1, "", "rsa_private_key"], [59, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[60, 1, 1, "", "BaseCovarDerivativeOp"], [60, 1, 1, "", "BaseScalarField"], [60, 1, 1, "", "BaseVectorField"], [60, 1, 1, "", "Commutator"], [60, 1, 1, "", "CoordSystem"], [60, 1, 1, "", "CoordinateSymbol"], [60, 1, 1, "", "CovarDerivativeOp"], [60, 1, 1, "", "Differential"], [60, 1, 1, "", "LieDerivative"], [60, 1, 1, "", "Manifold"], [60, 1, 1, "", "Patch"], [60, 1, 1, "", "Point"], [60, 1, 1, "", "TensorProduct"], [60, 1, 1, "", "WedgeProduct"], [60, 3, 1, "", "intcurve_diffequ"], [60, 3, 1, "", "intcurve_series"], [60, 3, 1, "", "metric_to_Christoffel_1st"], [60, 3, 1, "", "metric_to_Christoffel_2nd"], [60, 3, 1, "", "metric_to_Ricci_components"], [60, 3, 1, "", "metric_to_Riemann_components"], [60, 3, 1, "", "twoform_to_matrix"], [60, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[60, 2, 1, "", "base_oneform"], [60, 2, 1, "", "base_oneforms"], [60, 2, 1, "", "base_scalar"], [60, 2, 1, "", "base_scalars"], [60, 2, 1, "", "base_vector"], [60, 2, 1, "", "base_vectors"], [60, 2, 1, "", "coord_function"], [60, 2, 1, "", "coord_functions"], [60, 2, 1, "", "coord_tuple_transform_to"], [60, 2, 1, "", "jacobian"], [60, 2, 1, "", "jacobian_determinant"], [60, 2, 1, "", "jacobian_matrix"], [60, 2, 1, "", "point"], [60, 2, 1, "", "point_to_coords"], [60, 2, 1, "", "transform"], [60, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[60, 2, 1, "", "coords"]], "sympy.discrete": [[61, 0, 0, "-", "convolutions"], [61, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[61, 3, 1, "", "convolution"], [61, 3, 1, "", "convolution_fft"], [61, 3, 1, "", "convolution_fwht"], [61, 3, 1, "", "convolution_ntt"], [61, 3, 1, "", "convolution_subset"], [61, 3, 1, "", "covering_product"], [61, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[61, 3, 1, "", "fft"], [61, 3, 1, "", "fwht"], [61, 3, 1, "", "ifft"], [61, 3, 1, "", "ifwht"], [61, 3, 1, "", "intt"], [61, 3, 1, "", "inverse_mobius_transform"], [61, 3, 1, "", "mobius_transform"], [61, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[198, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[63, 1, 1, "", "FallingFactorial"], [63, 1, 1, "", "MultiFactorial"], [63, 1, 1, "", "RisingFactorial"], [63, 1, 1, "", "binomial"], [63, 1, 1, "", "factorial"], [63, 1, 1, "", "factorial2"], [63, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[63, 1, 1, "", "andre"], [63, 1, 1, "", "bell"], [63, 1, 1, "", "bernoulli"], [63, 1, 1, "", "catalan"], [63, 1, 1, "", "euler"], [63, 1, 1, "", "fibonacci"], [63, 1, 1, "", "genocchi"], [63, 1, 1, "", "harmonic"], [63, 1, 1, "", "lucas"], [63, 3, 1, "", "nC"], [63, 3, 1, "", "nP"], [63, 3, 1, "", "nT"], [63, 1, 1, "", "partition"], [63, 3, 1, "", "stirling"], [63, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[64, 1, 1, "", "Abs"], [64, 1, 1, "", "arg"], [64, 1, 1, "", "conjugate"], [64, 1, 1, "", "im"], [64, 1, 1, "", "periodic_argument"], [64, 1, 1, "", "polar_lift"], [64, 1, 1, "", "principal_branch"], [64, 1, 1, "", "re"], [64, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[64, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[64, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[64, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[64, 1, 1, "", "LambertW"], [64, 1, 1, "", "exp"], [64, 1, 1, "", "exp_polar"], [64, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[64, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[64, 2, 1, "", "as_real_imag"], [64, 4, 1, "", "base"], [64, 2, 1, "", "fdiff"], [64, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[64, 2, 1, "", "as_base_exp"], [64, 2, 1, "", "as_real_imag"], [64, 2, 1, "", "fdiff"], [64, 2, 1, "", "inverse"], [64, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[64, 1, 1, "", "HyperbolicFunction"], [64, 1, 1, "", "acosh"], [64, 1, 1, "", "acoth"], [64, 1, 1, "", "acsch"], [64, 1, 1, "", "asech"], [64, 1, 1, "", "asinh"], [64, 1, 1, "", "atanh"], [64, 1, 1, "", "cosh"], [64, 1, 1, "", "coth"], [64, 1, 1, "", "csch"], [64, 1, 1, "", "sech"], [64, 1, 1, "", "sinh"], [64, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[64, 2, 1, "", "fdiff"], [64, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[64, 2, 1, "", "as_real_imag"], [64, 2, 1, "", "fdiff"], [64, 2, 1, "", "inverse"], [64, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[64, 1, 1, "", "RoundFunction"], [64, 1, 1, "", "ceiling"], [64, 1, 1, "", "floor"], [64, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[64, 1, 1, "", "IdentityFunction"], [64, 1, 1, "", "Max"], [64, 1, 1, "", "Min"], [64, 3, 1, "", "cbrt"], [64, 3, 1, "", "real_root"], [64, 3, 1, "", "root"], [64, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[64, 1, 1, "", "ExprCondPair"], [64, 1, 1, "", "Piecewise"], [64, 3, 1, "", "piecewise_exclusive"], [64, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[64, 4, 1, "", "cond"], [64, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[64, 2, 1, "", "_eval_integral"], [64, 2, 1, "", "as_expr_set_pairs"], [64, 2, 1, "", "doit"], [64, 2, 1, "", "eval"], [64, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[64, 1, 1, "", "acos"], [64, 1, 1, "", "acot"], [64, 1, 1, "", "acsc"], [64, 1, 1, "", "asec"], [64, 1, 1, "", "asin"], [64, 1, 1, "", "atan"], [64, 1, 1, "", "atan2"], [64, 1, 1, "", "cos"], [64, 1, 1, "", "cot"], [64, 1, 1, "", "csc"], [64, 1, 1, "", "sec"], [64, 1, 1, "", "sin"], [64, 1, 1, "", "sinc"], [64, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[64, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[64, 2, 1, "", "inverse"]], "sympy.functions.special": [[66, 0, 0, "-", "bessel"], [66, 0, 0, "-", "beta_functions"], [66, 0, 0, "-", "elliptic_integrals"], [66, 0, 0, "-", "error_functions"], [66, 0, 0, "-", "gamma_functions"], [66, 0, 0, "-", "mathieu_functions"], [66, 0, 0, "-", "polynomials"], [66, 0, 0, "-", "singularity_functions"], [66, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[66, 1, 1, "", "AiryBase"], [66, 1, 1, "", "BesselBase"], [66, 1, 1, "", "airyai"], [66, 1, 1, "", "airyaiprime"], [66, 1, 1, "", "airybi"], [66, 1, 1, "", "airybiprime"], [66, 1, 1, "", "besseli"], [66, 1, 1, "", "besselj"], [66, 1, 1, "", "besselk"], [66, 1, 1, "", "bessely"], [66, 1, 1, "", "hankel1"], [66, 1, 1, "", "hankel2"], [66, 1, 1, "", "jn"], [66, 3, 1, "", "jn_zeros"], [66, 1, 1, "", "marcumq"], [66, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[66, 4, 1, "", "argument"], [66, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[66, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[66, 3, 1, "", "bspline_basis"], [66, 3, 1, "", "bspline_basis_set"], [66, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[66, 1, 1, "", "DiracDelta"], [66, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[66, 2, 1, "", "eval"], [66, 2, 1, "", "fdiff"], [66, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[66, 2, 1, "", "eval"], [66, 2, 1, "", "fdiff"], [66, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[66, 1, 1, "", "elliptic_e"], [66, 1, 1, "", "elliptic_f"], [66, 1, 1, "", "elliptic_k"], [66, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[66, 1, 1, "", "Chi"], [66, 1, 1, "", "Ci"], [66, 3, 1, "", "E1"], [66, 1, 1, "", "Ei"], [66, 1, 1, "", "FresnelIntegral"], [66, 1, 1, "", "Li"], [66, 1, 1, "", "Shi"], [66, 1, 1, "", "Si"], [66, 1, 1, "", "erf"], [66, 1, 1, "", "erf2"], [66, 1, 1, "", "erf2inv"], [66, 1, 1, "", "erfc"], [66, 1, 1, "", "erfcinv"], [66, 1, 1, "", "erfi"], [66, 1, 1, "", "erfinv"], [66, 1, 1, "", "expint"], [66, 1, 1, "", "fresnelc"], [66, 1, 1, "", "fresnels"], [66, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[66, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[66, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[66, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[66, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[66, 1, 1, "", "digamma"], [66, 1, 1, "", "gamma"], [66, 1, 1, "", "loggamma"], [66, 1, 1, "", "lowergamma"], [66, 1, 1, "", "multigamma"], [66, 1, 1, "", "polygamma"], [66, 1, 1, "", "trigamma"], [66, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[66, 1, 1, "", "appellf1"], [66, 1, 1, "", "hyper"], [66, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[66, 4, 1, "", "ap"], [66, 4, 1, "", "argument"], [66, 4, 1, "", "bq"], [66, 4, 1, "", "convergence_statement"], [66, 4, 1, "", "eta"], [66, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[66, 4, 1, "", "an"], [66, 4, 1, "", "aother"], [66, 4, 1, "", "ap"], [66, 4, 1, "", "argument"], [66, 4, 1, "", "bm"], [66, 4, 1, "", "bother"], [66, 4, 1, "", "bq"], [66, 4, 1, "", "delta"], [66, 2, 1, "", "get_period"], [66, 2, 1, "", "integrand"], [66, 4, 1, "", "is_number"], [66, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[66, 1, 1, "", "MathieuBase"], [66, 1, 1, "", "mathieuc"], [66, 1, 1, "", "mathieucprime"], [66, 1, 1, "", "mathieus"], [66, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[66, 1, 1, "", "assoc_laguerre"], [66, 1, 1, "", "assoc_legendre"], [66, 1, 1, "", "chebyshevt"], [66, 1, 1, "", "chebyshevt_root"], [66, 1, 1, "", "chebyshevu"], [66, 1, 1, "", "chebyshevu_root"], [66, 1, 1, "", "gegenbauer"], [66, 1, 1, "", "hermite"], [66, 1, 1, "", "hermite_prob"], [66, 1, 1, "", "jacobi"], [66, 3, 1, "", "jacobi_normalized"], [66, 1, 1, "", "laguerre"], [66, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[66, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[66, 2, 1, "", "eval"], [66, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[66, 1, 1, "", "Ynm"], [66, 3, 1, "", "Ynm_c"], [66, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[66, 3, 1, "", "Eijk"], [66, 1, 1, "", "KroneckerDelta"], [66, 1, 1, "", "LeviCivita"], [66, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[66, 2, 1, "", "eval"], [66, 4, 1, "", "indices_contain_equal_information"], [66, 4, 1, "", "is_above_fermi"], [66, 4, 1, "", "is_below_fermi"], [66, 4, 1, "", "is_only_above_fermi"], [66, 4, 1, "", "is_only_below_fermi"], [66, 4, 1, "", "killable_index"], [66, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[66, 1, 1, "", "dirichlet_eta"], [66, 1, 1, "", "lerchphi"], [66, 1, 1, "", "polylog"], [66, 1, 1, "", "stieltjes"], [66, 1, 1, "", "zeta"]], "sympy.geometry": [[67, 0, 0, "-", "curve"], [68, 0, 0, "-", "ellipse"], [69, 0, 0, "-", "entity"], [71, 0, 0, "-", "line"], [72, 0, 0, "-", "plane"], [73, 0, 0, "-", "point"], [74, 0, 0, "-", "polygon"], [75, 0, 0, "-", "util"]], "sympy.geometry.curve": [[67, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[67, 4, 1, "", "ambient_dimension"], [67, 2, 1, "", "arbitrary_point"], [67, 4, 1, "", "free_symbols"], [67, 4, 1, "", "functions"], [67, 4, 1, "", "length"], [67, 4, 1, "", "limits"], [67, 4, 1, "", "parameter"], [67, 2, 1, "", "plot_interval"], [67, 2, 1, "", "rotate"], [67, 2, 1, "", "scale"], [67, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[68, 1, 1, "", "Circle"], [68, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[68, 4, 1, "", "circumference"], [68, 2, 1, "", "equation"], [68, 2, 1, "", "intersection"], [68, 4, 1, "", "radius"], [68, 2, 1, "", "reflect"], [68, 2, 1, "", "scale"], [68, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[68, 4, 1, "", "apoapsis"], [68, 2, 1, "", "arbitrary_point"], [68, 4, 1, "", "area"], [68, 2, 1, "", "auxiliary_circle"], [68, 4, 1, "", "bounds"], [68, 4, 1, "", "center"], [68, 4, 1, "", "circumference"], [68, 2, 1, "", "director_circle"], [68, 4, 1, "", "eccentricity"], [68, 2, 1, "", "encloses_point"], [68, 2, 1, "", "equation"], [68, 2, 1, "", "evolute"], [68, 4, 1, "", "foci"], [68, 4, 1, "", "focus_distance"], [68, 4, 1, "", "hradius"], [68, 2, 1, "", "intersection"], [68, 2, 1, "", "is_tangent"], [68, 4, 1, "", "major"], [68, 4, 1, "", "minor"], [68, 2, 1, "", "normal_lines"], [68, 4, 1, "", "periapsis"], [68, 2, 1, "", "plot_interval"], [68, 2, 1, "", "polar_second_moment_of_area"], [68, 2, 1, "", "random_point"], [68, 2, 1, "", "reflect"], [68, 2, 1, "", "rotate"], [68, 2, 1, "", "scale"], [68, 2, 1, "", "second_moment_of_area"], [68, 2, 1, "", "section_modulus"], [68, 4, 1, "", "semilatus_rectum"], [68, 2, 1, "", "tangent_lines"], [68, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[69, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[69, 4, 1, "", "ambient_dimension"], [69, 4, 1, "", "bounds"], [69, 2, 1, "", "encloses"], [69, 2, 1, "", "intersection"], [69, 2, 1, "", "is_similar"], [69, 2, 1, "", "parameter_value"], [69, 2, 1, "", "reflect"], [69, 2, 1, "", "rotate"], [69, 2, 1, "", "scale"], [69, 2, 1, "", "translate"]], "sympy.geometry.line": [[71, 1, 1, "", "Line"], [71, 1, 1, "", "Line2D"], [71, 1, 1, "", "Line3D"], [71, 1, 1, "", "LinearEntity"], [71, 1, 1, "", "LinearEntity2D"], [71, 1, 1, "", "LinearEntity3D"], [71, 1, 1, "", "Ray"], [71, 1, 1, "", "Ray2D"], [71, 1, 1, "", "Ray3D"], [71, 1, 1, "", "Segment"], [71, 1, 1, "", "Segment2D"], [71, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[71, 2, 1, "", "contains"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "equals"], [71, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[71, 4, 1, "", "coefficients"], [71, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[71, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[71, 4, 1, "", "ambient_dimension"], [71, 2, 1, "", "angle_between"], [71, 2, 1, "", "arbitrary_point"], [71, 2, 1, "", "are_concurrent"], [71, 2, 1, "", "bisectors"], [71, 2, 1, "", "contains"], [71, 4, 1, "", "direction"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "is_parallel"], [71, 2, 1, "", "is_perpendicular"], [71, 2, 1, "", "is_similar"], [71, 4, 1, "", "length"], [71, 4, 1, "", "p1"], [71, 4, 1, "", "p2"], [71, 2, 1, "", "parallel_line"], [71, 2, 1, "", "perpendicular_line"], [71, 2, 1, "", "perpendicular_segment"], [71, 4, 1, "", "points"], [71, 2, 1, "", "projection"], [71, 2, 1, "", "random_point"], [71, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[71, 4, 1, "", "bounds"], [71, 2, 1, "", "perpendicular_line"], [71, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[71, 4, 1, "", "direction_cosine"], [71, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[71, 2, 1, "", "contains"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "equals"], [71, 2, 1, "", "plot_interval"], [71, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[71, 2, 1, "", "closing_angle"], [71, 4, 1, "", "xdirection"], [71, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[71, 4, 1, "", "xdirection"], [71, 4, 1, "", "ydirection"], [71, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[71, 2, 1, "", "contains"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "equals"], [71, 4, 1, "", "length"], [71, 4, 1, "", "midpoint"], [71, 2, 1, "", "perpendicular_bisector"], [71, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[72, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[72, 2, 1, "", "angle_between"], [72, 2, 1, "", "arbitrary_point"], [72, 2, 1, "", "are_concurrent"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "equals"], [72, 2, 1, "", "equation"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "is_coplanar"], [72, 2, 1, "", "is_parallel"], [72, 2, 1, "", "is_perpendicular"], [72, 4, 1, "", "normal_vector"], [72, 4, 1, "", "p1"], [72, 2, 1, "", "parallel_plane"], [72, 2, 1, "", "parameter_value"], [72, 2, 1, "", "perpendicular_line"], [72, 2, 1, "", "perpendicular_plane"], [72, 2, 1, "", "projection"], [72, 2, 1, "", "projection_line"], [72, 2, 1, "", "random_point"]], "sympy.geometry.point": [[73, 1, 1, "", "Point"], [73, 1, 1, "", "Point2D"], [73, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[73, 2, 1, "", "affine_rank"], [73, 4, 1, "", "ambient_dimension"], [73, 2, 1, "", "are_coplanar"], [73, 2, 1, "", "canberra_distance"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "dot"], [73, 2, 1, "", "equals"], [73, 2, 1, "", "intersection"], [73, 2, 1, "", "is_collinear"], [73, 2, 1, "", "is_concyclic"], [73, 4, 1, "", "is_nonzero"], [73, 2, 1, "", "is_scalar_multiple"], [73, 4, 1, "", "is_zero"], [73, 4, 1, "", "length"], [73, 2, 1, "", "midpoint"], [73, 4, 1, "", "origin"], [73, 4, 1, "", "orthogonal_direction"], [73, 2, 1, "", "project"], [73, 2, 1, "", "taxicab_distance"], [73, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[73, 4, 1, "", "bounds"], [73, 4, 1, "", "coordinates"], [73, 2, 1, "", "rotate"], [73, 2, 1, "", "scale"], [73, 2, 1, "", "transform"], [73, 2, 1, "", "translate"], [73, 4, 1, "", "x"], [73, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[73, 2, 1, "", "are_collinear"], [73, 4, 1, "", "coordinates"], [73, 2, 1, "", "direction_cosine"], [73, 2, 1, "", "direction_ratio"], [73, 2, 1, "", "intersection"], [73, 2, 1, "", "scale"], [73, 2, 1, "", "transform"], [73, 2, 1, "", "translate"], [73, 4, 1, "", "x"], [73, 4, 1, "", "y"], [73, 4, 1, "", "z"]], "sympy.geometry.polygon": [[74, 1, 1, "", "Polygon"], [74, 1, 1, "", "RegularPolygon"], [74, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[74, 4, 1, "", "angles"], [74, 2, 1, "", "arbitrary_point"], [74, 4, 1, "", "area"], [74, 2, 1, "", "bisectors"], [74, 4, 1, "", "bounds"], [74, 4, 1, "", "centroid"], [74, 2, 1, "", "cut_section"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "encloses_point"], [74, 2, 1, "", "first_moment_of_area"], [74, 2, 1, "", "intersection"], [74, 2, 1, "", "is_convex"], [74, 4, 1, "", "perimeter"], [74, 2, 1, "", "plot_interval"], [74, 2, 1, "", "polar_second_moment_of_area"], [74, 2, 1, "", "second_moment_of_area"], [74, 2, 1, "", "section_modulus"], [74, 4, 1, "", "sides"], [74, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[74, 4, 1, "", "angles"], [74, 4, 1, "", "apothem"], [74, 4, 1, "", "area"], [74, 4, 1, "", "args"], [74, 4, 1, "", "center"], [74, 4, 1, "", "centroid"], [74, 4, 1, "", "circumcenter"], [74, 4, 1, "", "circumcircle"], [74, 4, 1, "", "circumradius"], [74, 2, 1, "", "encloses_point"], [74, 4, 1, "", "exterior_angle"], [74, 4, 1, "", "incircle"], [74, 4, 1, "", "inradius"], [74, 4, 1, "", "interior_angle"], [74, 4, 1, "", "length"], [74, 4, 1, "", "radius"], [74, 2, 1, "", "reflect"], [74, 2, 1, "", "rotate"], [74, 4, 1, "", "rotation"], [74, 2, 1, "", "scale"], [74, 2, 1, "", "spin"], [74, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[74, 4, 1, "", "altitudes"], [74, 2, 1, "", "bisectors"], [74, 4, 1, "", "circumcenter"], [74, 4, 1, "", "circumcircle"], [74, 4, 1, "", "circumradius"], [74, 4, 1, "", "eulerline"], [74, 4, 1, "", "excenters"], [74, 4, 1, "", "exradii"], [74, 4, 1, "", "incenter"], [74, 4, 1, "", "incircle"], [74, 4, 1, "", "inradius"], [74, 2, 1, "", "is_equilateral"], [74, 2, 1, "", "is_isosceles"], [74, 2, 1, "", "is_right"], [74, 2, 1, "", "is_scalene"], [74, 2, 1, "", "is_similar"], [74, 4, 1, "", "medial"], [74, 4, 1, "", "medians"], [74, 4, 1, "", "nine_point_circle"], [74, 4, 1, "", "orthocenter"], [74, 4, 1, "", "vertices"]], "sympy.geometry.util": [[75, 3, 1, "", "are_similar"], [75, 3, 1, "", "centroid"], [75, 3, 1, "", "convex_hull"], [75, 3, 1, "", "idiff"], [75, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[81, 1, 1, "", "DifferentialOperator"], [81, 1, 1, "", "DifferentialOperatorAlgebra"], [81, 3, 1, "", "DifferentialOperators"], [81, 1, 1, "", "HolonomicFunction"], [79, 3, 1, "", "_convert_poly_rat_alg"], [79, 3, 1, "", "_create_table"], [77, 3, 1, "", "expr_to_holonomic"], [77, 3, 1, "", "from_hyper"], [77, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[81, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[80, 2, 1, "", "composition"], [80, 2, 1, "", "diff"], [80, 2, 1, "", "evalf"], [80, 2, 1, "", "integrate"], [80, 2, 1, "", "series"], [80, 2, 1, "", "to_expr"], [80, 2, 1, "", "to_hyper"], [80, 2, 1, "", "to_meijerg"], [80, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[85, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[85, 3, 1, "", "components"], [85, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[85, 1, 1, "", "Integral"], [85, 3, 1, "", "integrate"], [85, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[85, 2, 1, "", "as_sum"], [85, 2, 1, "", "doit"], [85, 4, 1, "", "free_symbols"], [85, 6, 1, "", "is_commutative"], [85, 2, 1, "", "principal_value"], [85, 2, 1, "", "transform"]], "sympy.integrals": [[85, 0, 0, "-", "intpoly"], [83, 0, 0, "-", "meijerint"], [83, 0, 0, "-", "meijerint_doc"], [85, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[85, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[85, 3, 1, "", "integral_steps"], [85, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[83, 7, 1, "", "_CoeffExpValueError"], [83, 3, 1, "", "_check_antecedents"], [83, 3, 1, "", "_check_antecedents_1"], [83, 3, 1, "", "_check_antecedents_inversion"], [83, 3, 1, "", "_condsimp"], [83, 3, 1, "", "_create_lookup_table"], [83, 3, 1, "", "_dummy"], [83, 3, 1, "", "_dummy_"], [83, 3, 1, "", "_eval_cond"], [83, 3, 1, "", "_exponents"], [83, 3, 1, "", "_find_splitting_points"], [83, 3, 1, "", "_flip_g"], [83, 3, 1, "", "_functions"], [83, 3, 1, "", "_get_coeff_exp"], [83, 3, 1, "", "_guess_expansion"], [83, 3, 1, "", "_inflate_fox_h"], [83, 3, 1, "", "_inflate_g"], [83, 3, 1, "", "_int0oo"], [83, 3, 1, "", "_int0oo_1"], [83, 3, 1, "", "_int_inversion"], [83, 3, 1, "", "_is_analytic"], [83, 3, 1, "", "_meijerint_definite_2"], [83, 3, 1, "", "_meijerint_definite_3"], [83, 3, 1, "", "_meijerint_definite_4"], [83, 3, 1, "", "_meijerint_indefinite_1"], [83, 3, 1, "", "_mul_args"], [83, 3, 1, "", "_mul_as_two_parts"], [83, 3, 1, "", "_my_principal_branch"], [83, 3, 1, "", "_mytype"], [83, 3, 1, "", "_rewrite1"], [83, 3, 1, "", "_rewrite2"], [83, 3, 1, "", "_rewrite_inversion"], [83, 3, 1, "", "_rewrite_saxena"], [83, 3, 1, "", "_rewrite_saxena_1"], [83, 3, 1, "", "_rewrite_single"], [83, 3, 1, "", "_split_mul"], [83, 3, 1, "", "meijerint_definite"], [83, 3, 1, "", "meijerint_indefinite"], [83, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[85, 3, 1, "", "gauss_chebyshev_t"], [85, 3, 1, "", "gauss_chebyshev_u"], [85, 3, 1, "", "gauss_gen_laguerre"], [85, 3, 1, "", "gauss_hermite"], [85, 3, 1, "", "gauss_jacobi"], [85, 3, 1, "", "gauss_laguerre"], [85, 3, 1, "", "gauss_legendre"], [85, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[85, 3, 1, "", "ratint"], [85, 3, 1, "", "ratint_logpart"], [85, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[85, 1, 1, "", "NonElementaryIntegral"], [85, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[85, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[85, 1, 1, "", "CosineTransform"], [85, 1, 1, "", "FourierTransform"], [85, 1, 1, "", "HankelTransform"], [85, 1, 1, "", "IntegralTransform"], [85, 7, 1, "", "IntegralTransformError"], [85, 1, 1, "", "InverseCosineTransform"], [85, 1, 1, "", "InverseFourierTransform"], [85, 1, 1, "", "InverseHankelTransform"], [85, 1, 1, "", "InverseLaplaceTransform"], [85, 1, 1, "", "InverseMellinTransform"], [85, 1, 1, "", "InverseSineTransform"], [85, 1, 1, "", "LaplaceTransform"], [85, 1, 1, "", "MellinTransform"], [85, 1, 1, "", "SineTransform"], [85, 3, 1, "", "_fast_inverse_laplace"], [85, 3, 1, "", "_fourier_transform"], [85, 3, 1, "", "cosine_transform"], [85, 3, 1, "", "fourier_transform"], [85, 3, 1, "", "hankel_transform"], [85, 3, 1, "", "inverse_cosine_transform"], [85, 3, 1, "", "inverse_fourier_transform"], [85, 3, 1, "", "inverse_hankel_transform"], [85, 3, 1, "", "inverse_laplace_transform"], [85, 3, 1, "", "inverse_mellin_transform"], [85, 3, 1, "", "inverse_sine_transform"], [85, 3, 1, "", "laplace_transform"], [85, 3, 1, "", "mellin_transform"], [85, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[85, 2, 1, "", "doit"], [85, 4, 1, "", "function"], [85, 4, 1, "", "function_variable"], [85, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[85, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[86, 0, 0, "-", "printing"], [86, 0, 0, "-", "session"]], "sympy.interactive.printing": [[86, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[86, 3, 1, "", "enable_automatic_int_sympification"], [86, 3, 1, "", "enable_automatic_symbols"], [86, 3, 1, "", "init_ipython_session"], [86, 3, 1, "", "init_python_session"], [86, 3, 1, "", "init_session"], [86, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[87, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[87, 1, 1, "", "CartanType_generator"], [87, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[87, 2, 1, "", "rank"], [87, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[87, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[87, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[87, 2, 1, "", "add_as_roots"], [87, 2, 1, "", "add_simple_roots"], [87, 2, 1, "", "all_roots"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dynkin_diagram"], [87, 2, 1, "", "root_space"], [87, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[87, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[87, 2, 1, "", "basic_root"], [87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "highest_root"], [87, 2, 1, "", "lie_algebra"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[87, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[87, 2, 1, "", "basic_root"], [87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "lie_algebra"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[87, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[87, 2, 1, "", "basic_root"], [87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "lie_algebra"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[87, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[87, 2, 1, "", "basic_root"], [87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "lie_algebra"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[87, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[87, 2, 1, "", "basic_root"], [87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[87, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[87, 2, 1, "", "basic_root"], [87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[87, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[87, 2, 1, "", "basis"], [87, 2, 1, "", "cartan_matrix"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "positive_roots"], [87, 2, 1, "", "roots"], [87, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[87, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[87, 2, 1, "", "coxeter_diagram"], [87, 2, 1, "", "delete_doubles"], [87, 2, 1, "", "element_order"], [87, 2, 1, "", "generators"], [87, 2, 1, "", "group_name"], [87, 2, 1, "", "group_order"], [87, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[88, 3, 1, "", "ANFform"], [88, 1, 1, "", "And"], [88, 1, 1, "", "Boolean"], [88, 1, 1, "", "BooleanFalse"], [88, 1, 1, "", "BooleanTrue"], [88, 1, 1, "", "Equivalent"], [88, 1, 1, "", "Exclusive"], [88, 1, 1, "", "ITE"], [88, 1, 1, "", "Implies"], [88, 1, 1, "", "Nand"], [88, 1, 1, "", "Nor"], [88, 1, 1, "", "Not"], [88, 1, 1, "", "Or"], [88, 3, 1, "", "POSform"], [88, 3, 1, "", "SOPform"], [88, 1, 1, "", "Xnor"], [88, 1, 1, "", "Xor"], [88, 3, 1, "", "anf_coeffs"], [88, 3, 1, "", "bool_map"], [88, 3, 1, "", "bool_maxterm"], [88, 3, 1, "", "bool_minterm"], [88, 3, 1, "", "bool_monomial"], [88, 3, 1, "", "distribute_and_over_or"], [88, 3, 1, "", "distribute_or_over_and"], [88, 3, 1, "", "distribute_xor_over_and"], [88, 3, 1, "", "eliminate_implications"], [88, 3, 1, "", "gateinputcount"], [88, 3, 1, "", "integer_to_term"], [88, 3, 1, "", "is_anf"], [88, 3, 1, "", "is_cnf"], [88, 3, 1, "", "is_dnf"], [88, 3, 1, "", "is_nnf"], [88, 3, 1, "", "simplify_logic"], [88, 3, 1, "", "term_to_integer"], [88, 3, 1, "", "to_anf"], [88, 3, 1, "", "to_cnf"], [88, 3, 1, "", "to_dnf"], [88, 3, 1, "", "to_int_repr"], [88, 3, 1, "", "to_nnf"], [88, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[88, 2, 1, "", "as_set"], [88, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[88, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[88, 2, 1, "", "as_set"]], "sympy.logic": [[88, 0, 0, "-", "inference"]], "sympy.logic.inference": [[88, 3, 1, "", "satisfiable"]], "sympy.matrices": [[89, 0, 0, "-", "common"], [91, 0, 0, "-", "expressions"], [92, 0, 0, "-", "immutable"], [94, 0, 0, "-", "matrices"], [96, 0, 0, "-", "sparse"], [97, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[89, 1, 1, "", "MatrixCommon"], [89, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[89, 4, 1, "", "C"], [89, 4, 1, "", "H"], [89, 4, 1, "", "T"], [89, 2, 1, "", "__abs__"], [89, 2, 1, "", "__add__"], [89, 2, 1, "", "__getitem__"], [89, 2, 1, "", "__len__"], [89, 2, 1, "", "__mul__"], [89, 2, 1, "", "__pow__"], [89, 5, 1, "", "__weakref__"], [89, 2, 1, "", "adjoint"], [89, 2, 1, "", "applyfunc"], [89, 2, 1, "", "as_real_imag"], [89, 2, 1, "", "atoms"], [89, 2, 1, "", "col"], [89, 2, 1, "", "col_del"], [89, 2, 1, "", "col_insert"], [89, 2, 1, "", "col_join"], [89, 2, 1, "", "companion"], [89, 2, 1, "", "conjugate"], [89, 2, 1, "", "diag"], [89, 2, 1, "", "diagonal"], [89, 2, 1, "", "evalf"], [89, 2, 1, "", "expand"], [89, 2, 1, "", "extract"], [89, 2, 1, "", "eye"], [89, 4, 1, "", "free_symbols"], [89, 2, 1, "", "get_diag_blocks"], [89, 2, 1, "", "has"], [89, 2, 1, "", "hstack"], [89, 2, 1, "", "is_anti_symmetric"], [89, 2, 1, "", "is_diagonal"], [89, 4, 1, "", "is_hermitian"], [89, 4, 1, "", "is_lower"], [89, 4, 1, "", "is_lower_hessenberg"], [89, 4, 1, "", "is_square"], [89, 4, 1, "", "is_strongly_diagonally_dominant"], [89, 2, 1, "", "is_symbolic"], [89, 2, 1, "", "is_symmetric"], [89, 4, 1, "", "is_upper"], [89, 4, 1, "", "is_upper_hessenberg"], [89, 4, 1, "", "is_weakly_diagonally_dominant"], [89, 4, 1, "", "is_zero_matrix"], [89, 2, 1, "", "jordan_block"], [89, 2, 1, "", "lower_triangular"], [89, 2, 1, "", "multiply"], [89, 2, 1, "", "multiply_elementwise"], [89, 2, 1, "", "n"], [89, 2, 1, "", "ones"], [89, 2, 1, "", "permute"], [89, 2, 1, "", "permute_cols"], [89, 2, 1, "", "permute_rows"], [89, 2, 1, "", "pow"], [89, 2, 1, "", "refine"], [89, 2, 1, "", "replace"], [89, 2, 1, "", "reshape"], [89, 2, 1, "", "rmultiply"], [89, 2, 1, "", "rot90"], [89, 2, 1, "", "row"], [89, 2, 1, "", "row_del"], [89, 2, 1, "", "row_insert"], [89, 2, 1, "", "row_join"], [89, 4, 1, "", "shape"], [89, 2, 1, "", "simplify"], [89, 2, 1, "", "subs"], [89, 2, 1, "", "todod"], [89, 2, 1, "", "todok"], [89, 2, 1, "", "tolist"], [89, 2, 1, "", "trace"], [89, 2, 1, "", "transpose"], [89, 2, 1, "", "upper_triangular"], [89, 2, 1, "", "values"], [89, 2, 1, "", "vec"], [89, 2, 1, "", "vech"], [89, 2, 1, "", "vstack"], [89, 2, 1, "", "wilkinson"], [89, 2, 1, "", "xreplace"], [89, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[90, 1, 1, "", "DenseMatrix"], [94, 3, 1, "", "GramSchmidt"], [90, 5, 1, "", "Matrix"], [90, 1, 1, "", "MutableDenseMatrix"], [94, 3, 1, "", "casoratian"], [94, 3, 1, "", "diag"], [94, 3, 1, "", "eye"], [94, 3, 1, "", "hessian"], [94, 3, 1, "", "jordan_cell"], [94, 3, 1, "", "list2numpy"], [94, 3, 1, "", "matrix2numpy"], [94, 3, 1, "", "matrix_multiply_elementwise"], [94, 3, 1, "", "ones"], [94, 3, 1, "", "randMatrix"], [94, 3, 1, "", "rot_axis1"], [94, 3, 1, "", "rot_axis2"], [94, 3, 1, "", "rot_axis3"], [94, 3, 1, "", "symarray"], [94, 3, 1, "", "wronskian"], [94, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[90, 2, 1, "", "LDLdecomposition"], [90, 2, 1, "", "as_immutable"], [90, 2, 1, "", "as_mutable"], [90, 2, 1, "", "cholesky"], [90, 2, 1, "", "lower_triangular_solve"], [90, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[90, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[91, 1, 1, "", "CompanionMatrix"], [91, 1, 1, "", "FunctionMatrix"], [91, 1, 1, "", "HadamardPower"], [91, 1, 1, "", "HadamardProduct"], [91, 1, 1, "", "Identity"], [91, 1, 1, "", "Inverse"], [91, 1, 1, "", "MatAdd"], [91, 1, 1, "", "MatMul"], [91, 1, 1, "", "MatPow"], [91, 1, 1, "", "MatrixExpr"], [91, 1, 1, "", "MatrixPermute"], [91, 1, 1, "", "MatrixSet"], [91, 1, 1, "", "MatrixSymbol"], [91, 1, 1, "", "PermutationMatrix"], [91, 1, 1, "", "Trace"], [91, 1, 1, "", "Transpose"], [91, 1, 1, "", "ZeroMatrix"], [91, 0, 0, "-", "blockmatrix"], [91, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[91, 4, 1, "", "T"], [91, 2, 1, "", "as_coeff_Mul"], [91, 2, 1, "", "as_explicit"], [91, 2, 1, "", "as_mutable"], [91, 2, 1, "", "equals"], [91, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[91, 1, 1, "", "BlockDiagMatrix"], [91, 1, 1, "", "BlockMatrix"], [91, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[91, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[91, 2, 1, "", "LDUdecomposition"], [91, 2, 1, "", "LUdecomposition"], [91, 2, 1, "", "UDLdecomposition"], [91, 2, 1, "", "schur"], [91, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[92, 1, 1, "", "ImmutableDenseMatrix"], [92, 5, 1, "", "ImmutableMatrix"], [96, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[94, 1, 1, "", "MatrixBase"], [94, 1, 1, "", "MatrixCalculus"], [94, 1, 1, "", "MatrixDeterminant"], [94, 1, 1, "", "MatrixEigen"], [94, 1, 1, "", "MatrixError"], [94, 1, 1, "", "MatrixReductions"], [94, 1, 1, "", "MatrixSubspaces"], [94, 1, 1, "", "NonSquareMatrixError"], [94, 1, 1, "", "ShapeError"], [94, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[94, 4, 1, "", "D"], [94, 2, 1, "", "LDLdecomposition"], [94, 2, 1, "", "LDLsolve"], [94, 2, 1, "", "LUdecomposition"], [94, 2, 1, "", "LUdecompositionFF"], [94, 2, 1, "", "LUdecomposition_Simple"], [94, 2, 1, "", "LUsolve"], [94, 2, 1, "", "QRdecomposition"], [94, 2, 1, "", "QRsolve"], [94, 2, 1, "", "add"], [94, 2, 1, "", "analytic_func"], [94, 2, 1, "", "cholesky"], [94, 2, 1, "", "cholesky_solve"], [94, 2, 1, "", "condition_number"], [94, 2, 1, "", "connected_components"], [94, 2, 1, "", "connected_components_decomposition"], [94, 2, 1, "", "copy"], [94, 2, 1, "", "cross"], [94, 2, 1, "", "diagonal_solve"], [94, 2, 1, "", "dot"], [94, 2, 1, "", "dual"], [94, 2, 1, "", "exp"], [94, 2, 1, "", "gauss_jordan_solve"], [94, 2, 1, "", "inv"], [94, 2, 1, "", "inv_mod"], [94, 2, 1, "", "inverse_ADJ"], [94, 2, 1, "", "inverse_BLOCK"], [94, 2, 1, "", "inverse_CH"], [94, 2, 1, "", "inverse_GE"], [94, 2, 1, "", "inverse_LDL"], [94, 2, 1, "", "inverse_LU"], [94, 2, 1, "", "inverse_QR"], [94, 2, 1, "", "irregular"], [94, 2, 1, "", "is_nilpotent"], [94, 2, 1, "", "key2bounds"], [94, 2, 1, "", "key2ij"], [94, 2, 1, "", "log"], [94, 2, 1, "", "lower_triangular_solve"], [94, 2, 1, "", "norm"], [94, 2, 1, "", "normalized"], [94, 2, 1, "", "pinv"], [94, 2, 1, "", "pinv_solve"], [94, 2, 1, "", "print_nonzero"], [94, 2, 1, "", "project"], [94, 2, 1, "", "rank_decomposition"], [94, 2, 1, "", "singular_value_decomposition"], [94, 2, 1, "", "solve"], [94, 2, 1, "", "solve_least_squares"], [94, 2, 1, "", "strongly_connected_components"], [94, 2, 1, "", "strongly_connected_components_decomposition"], [94, 2, 1, "", "table"], [94, 2, 1, "", "upper_hessenberg_decomposition"], [94, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[94, 2, 1, "", "diff"], [94, 2, 1, "", "integrate"], [94, 2, 1, "", "jacobian"], [94, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[94, 2, 1, "", "adjugate"], [94, 2, 1, "", "charpoly"], [94, 2, 1, "", "cofactor"], [94, 2, 1, "", "cofactor_matrix"], [94, 2, 1, "", "det"], [94, 2, 1, "", "minor"], [94, 2, 1, "", "minor_submatrix"], [94, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[94, 2, 1, "", "bidiagonal_decomposition"], [94, 2, 1, "", "bidiagonalize"], [94, 2, 1, "", "diagonalize"], [94, 2, 1, "", "eigenvals"], [94, 2, 1, "", "eigenvects"], [94, 2, 1, "", "is_diagonalizable"], [94, 4, 1, "", "is_indefinite"], [94, 4, 1, "", "is_negative_definite"], [94, 4, 1, "", "is_negative_semidefinite"], [94, 4, 1, "", "is_positive_definite"], [94, 4, 1, "", "is_positive_semidefinite"], [94, 2, 1, "", "jordan_form"], [94, 2, 1, "", "left_eigenvects"], [94, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[94, 2, 1, "", "echelon_form"], [94, 2, 1, "", "elementary_col_op"], [94, 2, 1, "", "elementary_row_op"], [94, 4, 1, "", "is_echelon"], [94, 2, 1, "", "rank"], [94, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[94, 2, 1, "", "columnspace"], [94, 2, 1, "", "nullspace"], [94, 2, 1, "", "orthogonalize"], [94, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[95, 3, 1, "", "hermite_normal_form"], [95, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[96, 1, 1, "", "MutableSparseMatrix"], [96, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[97, 2, 1, "", "_csrtodok"], [97, 2, 1, "", "_doktocsr"], [97, 2, 1, "", "banded"]], "sympy.ntheory": [[98, 0, 0, "-", "bbp_pi"], [98, 0, 0, "-", "continued_fraction"], [98, 0, 0, "-", "digits"], [98, 0, 0, "-", "ecm"], [98, 0, 0, "-", "egyptian_fraction"], [98, 0, 0, "-", "factor_"], [98, 0, 0, "-", "generate"], [98, 1, 1, "", "mobius"], [98, 0, 0, "-", "modular"], [98, 0, 0, "-", "multinomial"], [98, 0, 0, "-", "partitions_"], [98, 0, 0, "-", "primetest"], [98, 0, 0, "-", "qs"], [98, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[98, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[98, 3, 1, "", "continued_fraction"], [98, 3, 1, "", "continued_fraction_convergents"], [98, 3, 1, "", "continued_fraction_iterator"], [98, 3, 1, "", "continued_fraction_periodic"], [98, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[98, 3, 1, "", "count_digits"], [98, 3, 1, "", "digits"], [98, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[98, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[98, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[98, 3, 1, "", "abundance"], [98, 3, 1, "", "antidivisor_count"], [98, 3, 1, "", "antidivisors"], [98, 3, 1, "", "core"], [98, 3, 1, "", "digits"], [98, 3, 1, "", "divisor_count"], [98, 1, 1, "", "divisor_sigma"], [98, 3, 1, "", "divisors"], [98, 3, 1, "", "factorint"], [98, 3, 1, "", "factorrat"], [98, 3, 1, "", "is_abundant"], [98, 3, 1, "", "is_amicable"], [98, 3, 1, "", "is_deficient"], [98, 3, 1, "", "is_mersenne_prime"], [98, 3, 1, "", "is_perfect"], [98, 3, 1, "", "mersenne_prime_exponent"], [98, 3, 1, "", "multiplicity"], [98, 3, 1, "", "perfect_power"], [98, 3, 1, "", "pollard_pm1"], [98, 3, 1, "", "pollard_rho"], [98, 3, 1, "", "primefactors"], [98, 1, 1, "", "primenu"], [98, 1, 1, "", "primeomega"], [98, 3, 1, "", "proper_divisor_count"], [98, 3, 1, "", "proper_divisors"], [98, 1, 1, "", "reduced_totient"], [98, 3, 1, "", "smoothness"], [98, 3, 1, "", "smoothness_p"], [98, 1, 1, "", "totient"], [98, 3, 1, "", "trailing"], [98, 3, 1, "", "udivisor_count"], [98, 1, 1, "", "udivisor_sigma"], [98, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[98, 1, 1, "", "Sieve"], [98, 3, 1, "", "composite"], [98, 3, 1, "", "compositepi"], [98, 3, 1, "", "cycle_length"], [98, 3, 1, "", "nextprime"], [98, 3, 1, "", "prevprime"], [98, 3, 1, "", "prime"], [98, 3, 1, "", "primepi"], [98, 3, 1, "", "primerange"], [98, 3, 1, "", "primorial"], [98, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[98, 2, 1, "", "extend"], [98, 2, 1, "", "extend_to_no"], [98, 2, 1, "", "mobiusrange"], [98, 2, 1, "", "primerange"], [98, 2, 1, "", "search"], [98, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[98, 3, 1, "", "crt"], [98, 3, 1, "", "crt1"], [98, 3, 1, "", "crt2"], [98, 3, 1, "", "solve_congruence"], [98, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[98, 3, 1, "", "binomial_coefficients"], [98, 3, 1, "", "binomial_coefficients_list"], [98, 3, 1, "", "multinomial_coefficients"], [98, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[98, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[98, 3, 1, "", "is_euler_pseudoprime"], [98, 3, 1, "", "is_extra_strong_lucas_prp"], [98, 3, 1, "", "is_gaussian_prime"], [98, 3, 1, "", "is_lucas_prp"], [98, 3, 1, "", "is_square"], [98, 3, 1, "", "is_strong_lucas_prp"], [98, 3, 1, "", "isprime"], [98, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[98, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[98, 3, 1, "", "discrete_log"], [98, 3, 1, "", "is_nthpow_residue"], [98, 3, 1, "", "is_primitive_root"], [98, 3, 1, "", "is_quad_residue"], [98, 3, 1, "", "jacobi_symbol"], [98, 3, 1, "", "legendre_symbol"], [98, 3, 1, "", "n_order"], [98, 3, 1, "", "nthroot_mod"], [98, 3, 1, "", "primitive_root"], [98, 3, 1, "", "quadratic_residues"], [98, 3, 1, "", "sqrt_mod"], [98, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[100, 1, 1, "", "LaTeXParsingError"], [100, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[100, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[100, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[100, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[100, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[100, 2, 1, "", "convert_to_c"], [100, 2, 1, "", "convert_to_expr"], [100, 2, 1, "", "convert_to_fortran"], [100, 2, 1, "", "convert_to_python"], [100, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[100, 3, 1, "", "auto_number"], [100, 3, 1, "", "auto_symbol"], [100, 3, 1, "", "convert_xor"], [100, 3, 1, "", "eval_expr"], [100, 3, 1, "", "factorial_notation"], [100, 3, 1, "", "function_exponentiation"], [100, 3, 1, "", "implicit_application"], [100, 3, 1, "", "implicit_multiplication"], [100, 3, 1, "", "implicit_multiplication_application"], [100, 3, 1, "", "lambda_notation"], [100, 3, 1, "", "parse_expr"], [100, 3, 1, "", "rationalize"], [100, 3, 1, "", "repeated_decimals"], [100, 3, 1, "", "split_symbols"], [100, 3, 1, "", "split_symbols_custom"], [100, 6, 1, "", "standard_transformations"], [100, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[101, 0, 0, "-", "beam"], [104, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[101, 1, 1, "", "Beam"], [101, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[101, 4, 1, "", "applied_loads"], [101, 2, 1, "", "apply_load"], [101, 2, 1, "", "apply_support"], [101, 4, 1, "", "area"], [101, 2, 1, "", "bending_moment"], [101, 4, 1, "", "boundary_conditions"], [101, 4, 1, "", "cross_section"], [101, 2, 1, "", "deflection"], [101, 2, 1, "", "draw"], [101, 4, 1, "", "elastic_modulus"], [101, 4, 1, "", "ild_moment"], [101, 4, 1, "", "ild_reactions"], [101, 4, 1, "", "ild_shear"], [101, 2, 1, "", "join"], [101, 4, 1, "", "length"], [101, 4, 1, "", "load"], [101, 2, 1, "", "max_bmoment"], [101, 2, 1, "", "max_deflection"], [101, 2, 1, "", "max_shear_force"], [101, 2, 1, "", "plot_bending_moment"], [101, 2, 1, "", "plot_deflection"], [101, 2, 1, "", "plot_ild_moment"], [101, 2, 1, "", "plot_ild_reactions"], [101, 2, 1, "", "plot_ild_shear"], [101, 2, 1, "", "plot_loading_results"], [101, 2, 1, "", "plot_shear_force"], [101, 2, 1, "", "plot_shear_stress"], [101, 2, 1, "", "plot_slope"], [101, 2, 1, "", "point_cflexure"], [101, 4, 1, "", "reaction_loads"], [101, 2, 1, "", "remove_load"], [101, 4, 1, "", "second_moment"], [101, 2, 1, "", "shear_force"], [101, 2, 1, "", "shear_stress"], [101, 2, 1, "", "slope"], [101, 2, 1, "", "solve_for_ild_moment"], [101, 2, 1, "", "solve_for_ild_reactions"], [101, 2, 1, "", "solve_for_ild_shear"], [101, 2, 1, "", "solve_for_reaction_loads"], [101, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[101, 2, 1, "", "angular_deflection"], [101, 2, 1, "", "apply_load"], [101, 2, 1, "", "apply_moment_load"], [101, 4, 1, "", "area"], [101, 2, 1, "", "axial_force"], [101, 2, 1, "", "axial_stress"], [101, 2, 1, "", "bending_moment"], [101, 4, 1, "", "boundary_conditions"], [101, 2, 1, "", "deflection"], [101, 4, 1, "", "load_vector"], [101, 2, 1, "", "max_bending_moment"], [101, 2, 1, "", "max_bmoment"], [101, 2, 1, "", "max_deflection"], [101, 2, 1, "", "max_shear_force"], [101, 4, 1, "", "moment_load_vector"], [101, 2, 1, "", "plot_bending_moment"], [101, 2, 1, "", "plot_deflection"], [101, 2, 1, "", "plot_loading_results"], [101, 2, 1, "", "plot_shear_force"], [101, 2, 1, "", "plot_shear_stress"], [101, 2, 1, "", "plot_slope"], [101, 2, 1, "", "polar_moment"], [101, 4, 1, "", "second_moment"], [101, 2, 1, "", "shear_force"], [101, 4, 1, "", "shear_modulus"], [101, 2, 1, "", "shear_stress"], [101, 2, 1, "", "slope"], [101, 2, 1, "", "solve_for_reaction_loads"], [101, 2, 1, "", "solve_for_torsion"], [101, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[104, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[104, 2, 1, "", "add_member"], [104, 2, 1, "", "add_node"], [104, 2, 1, "", "apply_load"], [104, 2, 1, "", "apply_support"], [104, 2, 1, "", "change_member_label"], [104, 2, 1, "", "change_node_label"], [104, 4, 1, "", "internal_forces"], [104, 4, 1, "", "loads"], [104, 4, 1, "", "member_labels"], [104, 4, 1, "", "members"], [104, 4, 1, "", "node_labels"], [104, 4, 1, "", "node_positions"], [104, 4, 1, "", "nodes"], [104, 4, 1, "", "reaction_loads"], [104, 2, 1, "", "remove_load"], [104, 2, 1, "", "remove_member"], [104, 2, 1, "", "remove_node"], [104, 2, 1, "", "remove_support"], [104, 2, 1, "", "solve"], [104, 4, 1, "", "supports"]], "sympy.physics": [[107, 0, 0, "-", "control"], [110, 0, 0, "-", "hydrogen"], [111, 0, 0, "-", "matrices"], [132, 0, 0, "-", "mechanics"], [147, 0, 0, "-", "paulialgebra"], [148, 0, 0, "-", "qho_1d"], [172, 0, 0, "-", "secondquant"], [173, 0, 0, "-", "sho"], [189, 0, 0, "-", "vector"], [192, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[106, 2, 1, "", "bode_magnitude_numerical_data"], [106, 2, 1, "", "bode_magnitude_plot"], [106, 2, 1, "", "bode_phase_numerical_data"], [106, 2, 1, "", "bode_phase_plot"], [106, 2, 1, "", "bode_plot"], [106, 2, 1, "", "impulse_response_numerical_data"], [106, 2, 1, "", "impulse_response_plot"], [106, 2, 1, "", "pole_zero_numerical_data"], [106, 2, 1, "", "pole_zero_plot"], [106, 2, 1, "", "ramp_response_numerical_data"], [106, 2, 1, "", "ramp_response_plot"], [106, 2, 1, "", "step_response_numerical_data"], [106, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[108, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[108, 1, 1, "", "Feedback"], [108, 1, 1, "", "MIMOFeedback"], [108, 1, 1, "", "MIMOParallel"], [108, 1, 1, "", "MIMOSeries"], [108, 1, 1, "", "Parallel"], [108, 1, 1, "", "Series"], [108, 1, 1, "", "TransferFunction"], [108, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[108, 2, 1, "", "doit"], [108, 4, 1, "", "sensitivity"], [108, 4, 1, "", "sign"], [108, 4, 1, "", "sys1"], [108, 4, 1, "", "sys2"], [108, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[108, 2, 1, "", "doit"], [108, 4, 1, "", "sensitivity"], [108, 4, 1, "", "sign"], [108, 4, 1, "", "sys1"], [108, 4, 1, "", "sys2"], [108, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[108, 2, 1, "", "doit"], [108, 4, 1, "", "num_inputs"], [108, 4, 1, "", "num_outputs"], [108, 4, 1, "", "shape"], [108, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[108, 2, 1, "", "doit"], [108, 4, 1, "", "num_inputs"], [108, 4, 1, "", "num_outputs"], [108, 4, 1, "", "shape"], [108, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[108, 2, 1, "", "doit"], [108, 4, 1, "", "is_biproper"], [108, 4, 1, "", "is_proper"], [108, 4, 1, "", "is_strictly_proper"], [108, 2, 1, "", "to_expr"], [108, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[108, 2, 1, "", "doit"], [108, 4, 1, "", "is_biproper"], [108, 4, 1, "", "is_proper"], [108, 4, 1, "", "is_strictly_proper"], [108, 2, 1, "", "to_expr"], [108, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[108, 2, 1, "", "dc_gain"], [108, 4, 1, "", "den"], [108, 2, 1, "", "expand"], [108, 2, 1, "", "from_rational_expression"], [108, 4, 1, "", "is_biproper"], [108, 4, 1, "", "is_proper"], [108, 2, 1, "", "is_stable"], [108, 4, 1, "", "is_strictly_proper"], [108, 4, 1, "", "num"], [108, 2, 1, "", "poles"], [108, 2, 1, "", "to_expr"], [108, 4, 1, "", "var"], [108, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[108, 2, 1, "", "elem_poles"], [108, 2, 1, "", "elem_zeros"], [108, 2, 1, "", "expand"], [108, 2, 1, "", "from_Matrix"], [108, 4, 1, "", "num_inputs"], [108, 4, 1, "", "num_outputs"], [108, 4, 1, "", "shape"], [108, 2, 1, "", "transpose"], [108, 4, 1, "", "var"]], "sympy.physics.hep": [[109, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[109, 3, 1, "", "extract_type_tens"], [109, 3, 1, "", "gamma_trace"], [109, 3, 1, "", "kahane_simplify"], [109, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[110, 3, 1, "", "E_nl"], [110, 3, 1, "", "E_nl_dirac"], [110, 3, 1, "", "Psi_nlm"], [110, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[111, 3, 1, "", "mdft"], [111, 3, 1, "", "mgamma"], [111, 3, 1, "", "msigma"], [111, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[113, 0, 0, "-", "body"], [114, 3, 1, "", "find_dynamicsymbols"], [116, 0, 0, "-", "joint"], [116, 0, 0, "-", "jointsmethod"], [117, 0, 0, "-", "kane"], [117, 0, 0, "-", "lagrange"], [118, 0, 0, "-", "linearize"], [114, 3, 1, "", "msubs"], [119, 0, 0, "-", "particle"], [119, 0, 0, "-", "rigidbody"], [121, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[113, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[113, 2, 1, "", "ang_vel_in"], [113, 2, 1, "", "apply_force"], [113, 2, 1, "", "apply_torque"], [113, 2, 1, "", "clear_loads"], [113, 2, 1, "", "dcm"], [113, 4, 1, "", "inertia"], [113, 2, 1, "", "kinetic_energy"], [113, 2, 1, "", "masscenter_vel"], [113, 2, 1, "", "parallel_axis"], [113, 2, 1, "", "remove_load"], [113, 4, 1, "", "x"], [113, 4, 1, "", "y"], [113, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[119, 3, 1, "", "Lagrangian"], [119, 3, 1, "", "angular_momentum"], [119, 3, 1, "", "inertia"], [119, 3, 1, "", "inertia_of_point_mass"], [119, 3, 1, "", "kinetic_energy"], [119, 3, 1, "", "linear_momentum"], [119, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[116, 1, 1, "", "CylindricalJoint"], [116, 1, 1, "", "Joint"], [116, 1, 1, "", "PinJoint"], [116, 1, 1, "", "PlanarJoint"], [116, 1, 1, "", "PrismaticJoint"], [116, 1, 1, "", "SphericalJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[116, 4, 1, "", "joint_axis"], [116, 4, 1, "", "rotation_coordinate"], [116, 4, 1, "", "rotation_speed"], [116, 4, 1, "", "translation_coordinate"], [116, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[116, 4, 1, "", "child"], [116, 4, 1, "", "child_axis"], [116, 4, 1, "", "child_point"], [116, 4, 1, "", "coordinates"], [116, 4, 1, "", "kdes"], [116, 4, 1, "", "name"], [116, 4, 1, "", "parent"], [116, 4, 1, "", "parent_axis"], [116, 4, 1, "", "parent_point"], [116, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[116, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[116, 4, 1, "", "planar_coordinates"], [116, 4, 1, "", "planar_speeds"], [116, 4, 1, "", "planar_vectors"], [116, 4, 1, "", "rotation_axis"], [116, 4, 1, "", "rotation_coordinate"], [116, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[116, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[116, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[116, 4, 1, "", "bodies"], [116, 4, 1, "", "forcing"], [116, 4, 1, "", "forcing_full"], [116, 2, 1, "", "form_eoms"], [116, 4, 1, "", "kdes"], [116, 4, 1, "", "loads"], [116, 4, 1, "", "mass_matrix"], [116, 4, 1, "", "mass_matrix_full"], [116, 4, 1, "", "method"], [116, 4, 1, "", "q"], [116, 2, 1, "", "rhs"], [116, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[117, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[117, 4, 1, "", "auxiliary_eqs"], [117, 4, 1, "", "forcing"], [117, 4, 1, "", "forcing_full"], [117, 4, 1, "", "forcing_kin"], [117, 2, 1, "", "kanes_equations"], [117, 2, 1, "", "kindiffdict"], [117, 2, 1, "", "linearize"], [117, 4, 1, "", "mass_matrix"], [117, 4, 1, "", "mass_matrix_full"], [117, 4, 1, "", "mass_matrix_kin"], [117, 2, 1, "", "rhs"], [117, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[117, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[117, 4, 1, "", "forcing"], [117, 4, 1, "", "forcing_full"], [117, 2, 1, "", "form_lagranges_equations"], [117, 2, 1, "", "linearize"], [117, 4, 1, "", "mass_matrix"], [117, 4, 1, "", "mass_matrix_full"], [117, 2, 1, "", "rhs"], [117, 2, 1, "", "solve_multipliers"], [117, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[118, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[118, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[119, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[119, 2, 1, "", "angular_momentum"], [119, 2, 1, "", "kinetic_energy"], [119, 2, 1, "", "linear_momentum"], [119, 4, 1, "", "mass"], [119, 2, 1, "", "parallel_axis"], [119, 4, 1, "", "point"], [119, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[119, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[119, 2, 1, "", "angular_momentum"], [119, 4, 1, "", "central_inertia"], [119, 4, 1, "", "frame"], [119, 4, 1, "", "inertia"], [119, 2, 1, "", "kinetic_energy"], [119, 2, 1, "", "linear_momentum"], [119, 4, 1, "", "mass"], [119, 4, 1, "", "masscenter"], [119, 2, 1, "", "parallel_axis"], [119, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[121, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[121, 4, 1, "", "alg_con"], [121, 4, 1, "", "bodies"], [121, 4, 1, "", "comb_explicit_rhs"], [121, 4, 1, "", "comb_implicit_mat"], [121, 4, 1, "", "comb_implicit_rhs"], [121, 2, 1, "", "compute_explicit_form"], [121, 2, 1, "", "constant_symbols"], [121, 4, 1, "", "coordinates"], [121, 4, 1, "", "dyn_implicit_mat"], [121, 4, 1, "", "dyn_implicit_rhs"], [121, 2, 1, "", "dynamic_symbols"], [121, 4, 1, "", "kin_explicit_rhs"], [121, 4, 1, "", "loads"], [121, 4, 1, "", "speeds"], [121, 4, 1, "", "states"]], "sympy.physics.optics": [[141, 0, 0, "-", "gaussopt"], [143, 0, 0, "-", "medium"], [144, 0, 0, "-", "polarization"], [145, 0, 0, "-", "utils"], [146, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[141, 1, 1, "", "BeamParameter"], [141, 1, 1, "", "CurvedMirror"], [141, 1, 1, "", "CurvedRefraction"], [141, 1, 1, "", "FlatMirror"], [141, 1, 1, "", "FlatRefraction"], [141, 1, 1, "", "FreeSpace"], [141, 1, 1, "", "GeometricRay"], [141, 1, 1, "", "RayTransferMatrix"], [141, 1, 1, "", "ThinLens"], [141, 3, 1, "", "conjugate_gauss_beams"], [141, 3, 1, "", "gaussian_conj"], [141, 3, 1, "", "geometric_conj_ab"], [141, 3, 1, "", "geometric_conj_af"], [141, 3, 1, "", "geometric_conj_bf"], [141, 3, 1, "", "rayleigh2waist"], [141, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[141, 4, 1, "", "divergence"], [141, 4, 1, "", "gouy"], [141, 4, 1, "", "q"], [141, 4, 1, "", "radius"], [141, 4, 1, "", "w"], [141, 4, 1, "", "w_0"], [141, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[141, 4, 1, "", "angle"], [141, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[141, 4, 1, "", "A"], [141, 4, 1, "", "B"], [141, 4, 1, "", "C"], [141, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[143, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[143, 4, 1, "", "refractive_index"], [143, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[144, 3, 1, "", "half_wave_retarder"], [144, 3, 1, "", "jones_2_stokes"], [144, 3, 1, "", "jones_vector"], [144, 3, 1, "", "linear_polarizer"], [144, 3, 1, "", "mueller_matrix"], [144, 3, 1, "", "phase_retarder"], [144, 3, 1, "", "polarizing_beam_splitter"], [144, 3, 1, "", "quarter_wave_retarder"], [144, 3, 1, "", "reflective_filter"], [144, 3, 1, "", "stokes_vector"], [144, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[145, 3, 1, "", "brewster_angle"], [145, 3, 1, "", "critical_angle"], [145, 3, 1, "", "deviation"], [145, 3, 1, "", "fresnel_coefficients"], [145, 3, 1, "", "hyperfocal_distance"], [145, 3, 1, "", "lens_formula"], [145, 3, 1, "", "lens_makers_formula"], [145, 3, 1, "", "mirror_formula"], [145, 3, 1, "", "refraction_angle"], [145, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[146, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[146, 4, 1, "", "amplitude"], [146, 4, 1, "", "angular_velocity"], [146, 4, 1, "", "frequency"], [146, 4, 1, "", "n"], [146, 4, 1, "", "phase"], [146, 4, 1, "", "speed"], [146, 4, 1, "", "time_period"], [146, 4, 1, "", "wavelength"], [146, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[147, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[148, 3, 1, "", "E_n"], [148, 3, 1, "", "coherent_state"], [148, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[149, 0, 0, "-", "anticommutator"], [150, 0, 0, "-", "cartesian"], [151, 0, 0, "-", "cg"], [152, 0, 0, "-", "circuitplot"], [153, 0, 0, "-", "commutator"], [154, 0, 0, "-", "constants"], [155, 0, 0, "-", "dagger"], [156, 0, 0, "-", "gate"], [157, 0, 0, "-", "grover"], [158, 0, 0, "-", "hilbert"], [160, 0, 0, "-", "innerproduct"], [161, 0, 0, "-", "operator"], [162, 0, 0, "-", "operatorset"], [163, 0, 0, "-", "piab"], [164, 0, 0, "-", "qapply"], [165, 0, 0, "-", "qft"], [166, 0, 0, "-", "qubit"], [167, 0, 0, "-", "represent"], [168, 0, 0, "-", "shor"], [169, 0, 0, "-", "spin"], [170, 0, 0, "-", "state"], [171, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[149, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[149, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[150, 1, 1, "", "PositionBra3D"], [150, 1, 1, "", "PositionKet3D"], [150, 1, 1, "", "PositionState3D"], [150, 1, 1, "", "PxBra"], [150, 1, 1, "", "PxKet"], [150, 1, 1, "", "PxOp"], [150, 1, 1, "", "XBra"], [150, 1, 1, "", "XKet"], [150, 1, 1, "", "XOp"], [150, 1, 1, "", "YOp"], [150, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[150, 4, 1, "", "position_x"], [150, 4, 1, "", "position_y"], [150, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[150, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[150, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[150, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[150, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[151, 1, 1, "", "CG"], [151, 1, 1, "", "Wigner3j"], [151, 1, 1, "", "Wigner6j"], [151, 1, 1, "", "Wigner9j"], [151, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[152, 1, 1, "", "CircuitPlot"], [152, 3, 1, "", "CreateCGate"], [152, 1, 1, "", "Mx"], [152, 1, 1, "", "Mz"], [152, 3, 1, "", "circuit_plot"], [152, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[152, 2, 1, "", "control_line"], [152, 2, 1, "", "control_point"], [152, 2, 1, "", "not_point"], [152, 2, 1, "", "one_qubit_box"], [152, 2, 1, "", "swap_point"], [152, 2, 1, "", "two_qubit_box"], [152, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[153, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[153, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[154, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[155, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[156, 1, 1, "", "CGate"], [156, 1, 1, "", "CGateS"], [156, 5, 1, "", "CNOT"], [156, 1, 1, "", "CNotGate"], [156, 1, 1, "", "Gate"], [156, 5, 1, "", "H"], [156, 1, 1, "", "HadamardGate"], [156, 1, 1, "", "IdentityGate"], [156, 1, 1, "", "OneQubitGate"], [156, 5, 1, "", "Phase"], [156, 1, 1, "", "PhaseGate"], [156, 5, 1, "", "S"], [156, 5, 1, "", "SWAP"], [156, 1, 1, "", "SwapGate"], [156, 5, 1, "", "T"], [156, 1, 1, "", "TGate"], [156, 1, 1, "", "TwoQubitGate"], [156, 1, 1, "", "UGate"], [156, 5, 1, "", "X"], [156, 1, 1, "", "XGate"], [156, 5, 1, "", "Y"], [156, 1, 1, "", "YGate"], [156, 5, 1, "", "Z"], [156, 1, 1, "", "ZGate"], [156, 3, 1, "", "gate_simp"], [156, 3, 1, "", "gate_sort"], [156, 3, 1, "", "normalized"], [156, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[156, 4, 1, "", "controls"], [156, 2, 1, "", "decompose"], [156, 2, 1, "", "eval_controls"], [156, 4, 1, "", "gate"], [156, 4, 1, "", "min_qubits"], [156, 4, 1, "", "nqubits"], [156, 2, 1, "", "plot_gate"], [156, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[156, 4, 1, "", "controls"], [156, 4, 1, "", "gate"], [156, 4, 1, "", "min_qubits"], [156, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[156, 2, 1, "", "get_target_matrix"], [156, 4, 1, "", "min_qubits"], [156, 4, 1, "", "nqubits"], [156, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[156, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[156, 2, 1, "", "get_target_matrix"], [156, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[157, 1, 1, "", "OracleGate"], [157, 1, 1, "", "WGate"], [157, 3, 1, "", "apply_grover"], [157, 3, 1, "", "grover_iteration"], [157, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[157, 4, 1, "", "search_function"], [157, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[158, 1, 1, "", "ComplexSpace"], [158, 1, 1, "", "DirectSumHilbertSpace"], [158, 1, 1, "", "FockSpace"], [158, 1, 1, "", "HilbertSpace"], [158, 1, 1, "", "L2"], [158, 1, 1, "", "TensorPowerHilbertSpace"], [158, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[158, 2, 1, "", "eval"], [158, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[158, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[158, 2, 1, "", "eval"], [158, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[160, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[161, 1, 1, "", "DifferentialOperator"], [161, 1, 1, "", "HermitianOperator"], [161, 1, 1, "", "IdentityOperator"], [161, 1, 1, "", "Operator"], [161, 1, 1, "", "OuterProduct"], [161, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[161, 4, 1, "", "expr"], [161, 4, 1, "", "free_symbols"], [161, 4, 1, "", "function"], [161, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[161, 4, 1, "", "bra"], [161, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[162, 3, 1, "", "operators_to_state"], [162, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[163, 1, 1, "", "PIABBra"], [163, 1, 1, "", "PIABHamiltonian"], [163, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[164, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[165, 1, 1, "", "IQFT"], [165, 1, 1, "", "QFT"], [165, 5, 1, "", "Rk"], [165, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[165, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[165, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[166, 1, 1, "", "IntQubit"], [166, 1, 1, "", "IntQubitBra"], [166, 1, 1, "", "Qubit"], [166, 1, 1, "", "QubitBra"], [166, 3, 1, "", "matrix_to_density"], [166, 3, 1, "", "matrix_to_qubit"], [166, 3, 1, "", "measure_all"], [166, 3, 1, "", "measure_all_oneshot"], [166, 3, 1, "", "measure_partial"], [166, 3, 1, "", "measure_partial_oneshot"], [166, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[167, 3, 1, "", "enumerate_states"], [167, 3, 1, "", "get_basis"], [167, 3, 1, "", "integrate_result"], [167, 3, 1, "", "rep_expectation"], [167, 3, 1, "", "rep_innerproduct"], [167, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[168, 1, 1, "", "CMod"], [168, 3, 1, "", "period_find"], [168, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[168, 4, 1, "", "N"], [168, 4, 1, "", "a"], [168, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[169, 1, 1, "", "J2Op"], [169, 1, 1, "", "JxBra"], [169, 1, 1, "", "JxBraCoupled"], [169, 1, 1, "", "JxKet"], [169, 1, 1, "", "JxKetCoupled"], [169, 1, 1, "", "JyBra"], [169, 1, 1, "", "JyBraCoupled"], [169, 1, 1, "", "JyKet"], [169, 1, 1, "", "JyKetCoupled"], [169, 1, 1, "", "JzBra"], [169, 1, 1, "", "JzBraCoupled"], [169, 1, 1, "", "JzKet"], [169, 1, 1, "", "JzKetCoupled"], [169, 1, 1, "", "JzOp"], [169, 1, 1, "", "Rotation"], [169, 1, 1, "", "WignerD"], [169, 3, 1, "", "couple"], [169, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[169, 2, 1, "", "D"], [169, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[170, 1, 1, "", "Bra"], [170, 1, 1, "", "BraBase"], [170, 1, 1, "", "Ket"], [170, 1, 1, "", "KetBase"], [170, 1, 1, "", "OrthogonalBra"], [170, 1, 1, "", "OrthogonalKet"], [170, 1, 1, "", "OrthogonalState"], [170, 1, 1, "", "State"], [170, 1, 1, "", "StateBase"], [170, 1, 1, "", "TimeDepBra"], [170, 1, 1, "", "TimeDepKet"], [170, 1, 1, "", "TimeDepState"], [170, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[170, 4, 1, "", "dual"], [170, 2, 1, "", "dual_class"], [170, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[170, 4, 1, "", "label"], [170, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[170, 4, 1, "", "expr"], [170, 4, 1, "", "is_commutative"], [170, 4, 1, "", "is_normalized"], [170, 4, 1, "", "limits"], [170, 4, 1, "", "norm"], [170, 2, 1, "", "normalize"], [170, 2, 1, "", "prob"], [170, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[171, 1, 1, "", "TensorProduct"], [171, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[172, 1, 1, "", "AnnihilateBoson"], [172, 1, 1, "", "AnnihilateFermion"], [172, 1, 1, "", "AntiSymmetricTensor"], [172, 5, 1, "", "B"], [172, 5, 1, "", "BBra"], [172, 5, 1, "", "BKet"], [172, 5, 1, "", "Bd"], [172, 1, 1, "", "BosonicBasis"], [172, 1, 1, "", "Commutator"], [172, 1, 1, "", "CreateBoson"], [172, 1, 1, "", "CreateFermion"], [172, 1, 1, "", "Dagger"], [172, 5, 1, "", "F"], [172, 5, 1, "", "FBra"], [172, 5, 1, "", "FKet"], [172, 5, 1, "", "Fd"], [172, 1, 1, "", "FixedBosonicBasis"], [172, 1, 1, "", "FockState"], [172, 1, 1, "", "FockStateBosonBra"], [172, 1, 1, "", "FockStateBosonKet"], [172, 1, 1, "", "FockStateBra"], [172, 1, 1, "", "FockStateFermionBra"], [172, 1, 1, "", "FockStateFermionKet"], [172, 1, 1, "", "FockStateKet"], [172, 1, 1, "", "InnerProduct"], [172, 1, 1, "", "KroneckerDelta"], [172, 1, 1, "", "NO"], [172, 1, 1, "", "PermutationOperator"], [172, 1, 1, "", "VarBosonicBasis"], [172, 3, 1, "", "apply_operators"], [172, 3, 1, "", "contraction"], [172, 3, 1, "", "evaluate_deltas"], [172, 3, 1, "", "matrix_rep"], [172, 3, 1, "", "simplify_index_permutations"], [172, 3, 1, "", "substitute_dummies"], [172, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[172, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[172, 2, 1, "", "apply_operator"], [172, 4, 1, "", "is_only_q_annihilator"], [172, 4, 1, "", "is_only_q_creator"], [172, 4, 1, "", "is_q_annihilator"], [172, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[172, 4, 1, "", "lower"], [172, 4, 1, "", "symbol"], [172, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[172, 2, 1, "", "doit"], [172, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[172, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[172, 2, 1, "", "apply_operator"], [172, 4, 1, "", "is_only_q_annihilator"], [172, 4, 1, "", "is_only_q_creator"], [172, 4, 1, "", "is_q_annihilator"], [172, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[172, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[172, 2, 1, "", "index"], [172, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[172, 4, 1, "", "bra"], [172, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[172, 2, 1, "", "eval"], [172, 4, 1, "", "indices_contain_equal_information"], [172, 4, 1, "", "is_above_fermi"], [172, 4, 1, "", "is_below_fermi"], [172, 4, 1, "", "is_only_above_fermi"], [172, 4, 1, "", "is_only_below_fermi"], [172, 4, 1, "", "killable_index"], [172, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[172, 2, 1, "", "doit"], [172, 2, 1, "", "get_subNO"], [172, 4, 1, "", "has_q_annihilators"], [172, 4, 1, "", "has_q_creators"], [172, 2, 1, "", "iter_q_annihilators"], [172, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[172, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[172, 2, 1, "", "index"], [172, 2, 1, "", "state"]], "sympy.physics.sho": [[173, 3, 1, "", "E_nl"], [173, 3, 1, "", "R_nl"]], "sympy.physics.units": [[174, 0, 0, "-", "dimensions"], [178, 0, 0, "-", "prefixes"], [179, 0, 0, "-", "quantities"], [180, 0, 0, "-", "unitsystem"], [179, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[174, 1, 1, "", "Dimension"], [174, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[174, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[174, 4, 1, "", "can_transf_matrix"], [174, 4, 1, "", "dim"], [174, 2, 1, "", "dim_can_vector"], [174, 2, 1, "", "dim_vector"], [174, 4, 1, "", "inv_can_transf_matrix"], [174, 4, 1, "", "is_consistent"], [174, 2, 1, "", "is_dimensionless"], [174, 4, 1, "", "list_can_dims"], [174, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[178, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[179, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[179, 4, 1, "", "abbrev"], [179, 2, 1, "", "convert_to"], [179, 4, 1, "", "free_symbols"], [179, 4, 1, "", "is_prefixed"], [179, 4, 1, "", "scale_factor"], [179, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[180, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[180, 4, 1, "", "dim"], [180, 2, 1, "", "extend"], [180, 2, 1, "", "get_units_non_prefixed"], [180, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[179, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[182, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[182, 2, 1, "", "applyfunc"], [182, 2, 1, "", "cross"], [182, 2, 1, "", "doit"], [182, 2, 1, "", "dot"], [182, 2, 1, "", "dt"], [182, 2, 1, "", "express"], [182, 4, 1, "", "func"], [182, 2, 1, "", "simplify"], [182, 2, 1, "", "subs"], [182, 2, 1, "", "to_matrix"], [182, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[184, 3, 1, "", "dynamicsymbols"], [186, 0, 0, "-", "functions"], [186, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[183, 3, 1, "", "curl"], [183, 3, 1, "", "divergence"], [183, 3, 1, "", "gradient"], [183, 3, 1, "", "is_conservative"], [183, 3, 1, "", "is_solenoidal"], [183, 3, 1, "", "scalar_potential"], [183, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[182, 1, 1, "", "CoordinateSym"], [182, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[182, 2, 1, "", "ang_acc_in"], [182, 2, 1, "", "ang_vel_in"], [182, 2, 1, "", "dcm"], [182, 2, 1, "", "orient"], [182, 2, 1, "", "orient_axis"], [182, 2, 1, "", "orient_body_fixed"], [182, 2, 1, "", "orient_explicit"], [182, 2, 1, "", "orient_quaternion"], [182, 2, 1, "", "orient_space_fixed"], [182, 2, 1, "", "orientnew"], [182, 2, 1, "", "partial_velocity"], [182, 2, 1, "", "set_ang_acc"], [182, 2, 1, "", "set_ang_vel"], [182, 2, 1, "", "variable_map"], [182, 4, 1, "", "x"], [182, 4, 1, "", "y"], [182, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[184, 3, 1, "", "cross"], [184, 3, 1, "", "dot"], [184, 3, 1, "", "express"], [186, 3, 1, "", "get_motion_params"], [186, 3, 1, "", "kinematic_equations"], [184, 3, 1, "", "outer"], [186, 3, 1, "", "partial_velocity"], [184, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[186, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[186, 2, 1, "", "a1pt_theory"], [186, 2, 1, "", "a2pt_theory"], [186, 2, 1, "", "acc"], [186, 2, 1, "", "locatenew"], [186, 2, 1, "", "partial_velocity"], [186, 2, 1, "", "pos_from"], [186, 2, 1, "", "set_acc"], [186, 2, 1, "", "set_pos"], [186, 2, 1, "", "set_vel"], [186, 2, 1, "", "v1pt_theory"], [186, 2, 1, "", "v2pt_theory"], [186, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[187, 3, 1, "", "init_vprinting"], [187, 3, 1, "", "vlatex"], [187, 3, 1, "", "vpprint"], [187, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[182, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[182, 2, 1, "", "angle_between"], [182, 2, 1, "", "applyfunc"], [182, 2, 1, "", "cross"], [182, 2, 1, "", "diff"], [182, 2, 1, "", "doit"], [182, 2, 1, "", "dot"], [182, 2, 1, "", "dt"], [182, 2, 1, "", "express"], [182, 2, 1, "", "free_dynamicsymbols"], [182, 2, 1, "", "free_symbols"], [182, 4, 1, "", "func"], [182, 2, 1, "", "magnitude"], [182, 2, 1, "", "normalize"], [182, 2, 1, "", "outer"], [182, 2, 1, "", "separate"], [182, 2, 1, "", "simplify"], [182, 2, 1, "", "subs"], [182, 2, 1, "", "to_matrix"], [182, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[192, 3, 1, "", "clebsch_gordan"], [192, 3, 1, "", "dot_rot_grad_Ynm"], [192, 3, 1, "", "gaunt"], [192, 3, 1, "", "racah"], [192, 3, 1, "", "real_gaunt"], [192, 3, 1, "", "wigner_3j"], [192, 3, 1, "", "wigner_6j"], [192, 3, 1, "", "wigner_9j"], [192, 3, 1, "", "wigner_d"], [192, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[193, 0, 0, "-", "plot"], [193, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[193, 1, 1, "", "BaseBackend"], [193, 1, 1, "", "BaseSeries"], [193, 1, 1, "", "Line2DBaseSeries"], [193, 1, 1, "", "Line3DBaseSeries"], [193, 1, 1, "", "LineOver1DRangeSeries"], [193, 1, 1, "", "MatplotlibBackend"], [193, 1, 1, "", "Parametric2DLineSeries"], [193, 1, 1, "", "Parametric3DLineSeries"], [193, 1, 1, "", "ParametricSurfaceSeries"], [193, 1, 1, "", "Plot"], [193, 1, 1, "", "PlotGrid"], [193, 1, 1, "", "SurfaceBaseSeries"], [193, 1, 1, "", "SurfaceOver2DRangeSeries"], [193, 1, 1, "", "TextBackend"], [193, 3, 1, "", "plot"], [193, 3, 1, "", "plot3d"], [193, 3, 1, "", "plot3d_parametric_line"], [193, 3, 1, "", "plot3d_parametric_surface"], [193, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[193, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[193, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[193, 2, 1, "", "get_segments"], [193, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[193, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[193, 2, 1, "", "append"], [193, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[193, 1, 1, "", "ImplicitSeries"], [193, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[193, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[194, 1, 1, "", "ExtensionElement"], [194, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[194, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[194, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[194, 1, 1, "", "ModuleHomomorphism"], [194, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[194, 2, 1, "", "image"], [194, 2, 1, "", "is_injective"], [194, 2, 1, "", "is_isomorphism"], [194, 2, 1, "", "is_surjective"], [194, 2, 1, "", "is_zero"], [194, 2, 1, "", "kernel"], [194, 2, 1, "", "quotient_codomain"], [194, 2, 1, "", "quotient_domain"], [194, 2, 1, "", "restrict_codomain"], [194, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[194, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[194, 2, 1, "", "contains"], [194, 2, 1, "", "depth"], [194, 2, 1, "", "height"], [194, 2, 1, "", "intersect"], [194, 2, 1, "", "is_maximal"], [194, 2, 1, "", "is_primary"], [194, 2, 1, "", "is_prime"], [194, 2, 1, "", "is_principal"], [194, 2, 1, "", "is_radical"], [194, 2, 1, "", "is_whole_ring"], [194, 2, 1, "", "is_zero"], [194, 2, 1, "", "product"], [194, 2, 1, "", "quotient"], [194, 2, 1, "", "radical"], [194, 2, 1, "", "reduce_element"], [194, 2, 1, "", "saturate"], [194, 2, 1, "", "subset"], [194, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[194, 1, 1, "", "FreeModule"], [194, 1, 1, "", "FreeModuleElement"], [194, 1, 1, "", "Module"], [194, 1, 1, "", "QuotientModule"], [194, 1, 1, "", "QuotientModuleElement"], [194, 1, 1, "", "SubModule"], [194, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[194, 2, 1, "", "basis"], [194, 2, 1, "", "convert"], [194, 5, 1, "", "dtype"], [194, 2, 1, "", "identity_hom"], [194, 2, 1, "", "is_submodule"], [194, 2, 1, "", "is_zero"], [194, 2, 1, "", "multiply_ideal"], [194, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[194, 2, 1, "", "contains"], [194, 2, 1, "", "convert"], [194, 2, 1, "", "identity_hom"], [194, 2, 1, "", "is_submodule"], [194, 2, 1, "", "is_zero"], [194, 2, 1, "", "multiply_ideal"], [194, 2, 1, "", "quotient_module"], [194, 2, 1, "", "submodule"], [194, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[194, 2, 1, "", "convert"], [194, 5, 1, "", "dtype"], [194, 2, 1, "", "identity_hom"], [194, 2, 1, "", "is_submodule"], [194, 2, 1, "", "is_zero"], [194, 2, 1, "", "quotient_hom"], [194, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[194, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[194, 2, 1, "", "convert"], [194, 2, 1, "", "identity_hom"], [194, 2, 1, "", "in_terms_of_generators"], [194, 2, 1, "", "inclusion_hom"], [194, 2, 1, "", "intersect"], [194, 2, 1, "", "is_full_module"], [194, 2, 1, "", "is_submodule"], [194, 2, 1, "", "is_zero"], [194, 2, 1, "", "module_quotient"], [194, 2, 1, "", "multiply_ideal"], [194, 2, 1, "", "quotient_module"], [194, 2, 1, "", "reduce_element"], [194, 2, 1, "", "submodule"], [194, 2, 1, "", "syzygy_module"], [194, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[194, 2, 1, "", "is_full_module"], [194, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[203, 3, 1, "", "andre_poly"], [203, 3, 1, "", "bernoulli_c_poly"], [203, 3, 1, "", "bernoulli_poly"], [203, 3, 1, "", "euler_poly"], [203, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[203, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[200, 3, 1, "", "dmp_abs"], [200, 3, 1, "", "dmp_add"], [200, 3, 1, "", "dmp_add_ground"], [200, 3, 1, "", "dmp_add_mul"], [200, 3, 1, "", "dmp_add_term"], [200, 3, 1, "", "dmp_div"], [200, 3, 1, "", "dmp_expand"], [200, 3, 1, "", "dmp_exquo"], [200, 3, 1, "", "dmp_exquo_ground"], [200, 3, 1, "", "dmp_ff_div"], [200, 3, 1, "", "dmp_l1_norm"], [200, 3, 1, "", "dmp_max_norm"], [200, 3, 1, "", "dmp_mul"], [200, 3, 1, "", "dmp_mul_ground"], [200, 3, 1, "", "dmp_mul_term"], [200, 3, 1, "", "dmp_neg"], [200, 3, 1, "", "dmp_pdiv"], [200, 3, 1, "", "dmp_pexquo"], [200, 3, 1, "", "dmp_pow"], [200, 3, 1, "", "dmp_pquo"], [200, 3, 1, "", "dmp_prem"], [200, 3, 1, "", "dmp_quo"], [200, 3, 1, "", "dmp_quo_ground"], [200, 3, 1, "", "dmp_rem"], [200, 3, 1, "", "dmp_rr_div"], [200, 3, 1, "", "dmp_sqr"], [200, 3, 1, "", "dmp_sub"], [200, 3, 1, "", "dmp_sub_ground"], [200, 3, 1, "", "dmp_sub_mul"], [200, 3, 1, "", "dmp_sub_term"], [200, 3, 1, "", "dup_lshift"], [200, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[200, 3, 1, "", "dmp_LC"], [200, 3, 1, "", "dmp_TC"], [200, 3, 1, "", "dmp_apply_pairs"], [200, 3, 1, "", "dmp_convert"], [200, 3, 1, "", "dmp_copy"], [200, 3, 1, "", "dmp_deflate"], [200, 3, 1, "", "dmp_degree"], [200, 3, 1, "", "dmp_degree_in"], [200, 3, 1, "", "dmp_degree_list"], [200, 3, 1, "", "dmp_eject"], [200, 3, 1, "", "dmp_exclude"], [200, 3, 1, "", "dmp_from_dict"], [200, 3, 1, "", "dmp_from_sympy"], [200, 3, 1, "", "dmp_ground"], [200, 3, 1, "", "dmp_ground_LC"], [200, 3, 1, "", "dmp_ground_TC"], [200, 3, 1, "", "dmp_ground_nth"], [200, 3, 1, "", "dmp_ground_p"], [200, 3, 1, "", "dmp_grounds"], [200, 3, 1, "", "dmp_include"], [200, 3, 1, "", "dmp_inflate"], [200, 3, 1, "", "dmp_inject"], [200, 3, 1, "", "dmp_list_terms"], [200, 3, 1, "", "dmp_multi_deflate"], [200, 3, 1, "", "dmp_negative_p"], [200, 3, 1, "", "dmp_nest"], [200, 3, 1, "", "dmp_normal"], [200, 3, 1, "", "dmp_nth"], [200, 3, 1, "", "dmp_one"], [200, 3, 1, "", "dmp_one_p"], [200, 3, 1, "", "dmp_permute"], [200, 3, 1, "", "dmp_positive_p"], [200, 3, 1, "", "dmp_raise"], [200, 3, 1, "", "dmp_slice"], [200, 3, 1, "", "dmp_strip"], [200, 3, 1, "", "dmp_swap"], [200, 3, 1, "", "dmp_terms_gcd"], [200, 3, 1, "", "dmp_to_dict"], [200, 3, 1, "", "dmp_to_tuple"], [200, 3, 1, "", "dmp_true_LT"], [200, 3, 1, "", "dmp_validate"], [200, 3, 1, "", "dmp_zero"], [200, 3, 1, "", "dmp_zero_p"], [200, 3, 1, "", "dmp_zeros"], [200, 3, 1, "", "dup_random"], [200, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[200, 3, 1, "", "dmp_clear_denoms"], [200, 3, 1, "", "dmp_compose"], [200, 3, 1, "", "dmp_diff"], [200, 3, 1, "", "dmp_diff_eval_in"], [200, 3, 1, "", "dmp_diff_in"], [200, 3, 1, "", "dmp_eval"], [200, 3, 1, "", "dmp_eval_in"], [200, 3, 1, "", "dmp_eval_tail"], [200, 3, 1, "", "dmp_ground_content"], [200, 3, 1, "", "dmp_ground_extract"], [200, 3, 1, "", "dmp_ground_monic"], [200, 3, 1, "", "dmp_ground_primitive"], [200, 3, 1, "", "dmp_ground_trunc"], [200, 3, 1, "", "dmp_integrate"], [200, 3, 1, "", "dmp_integrate_in"], [200, 3, 1, "", "dmp_lift"], [200, 3, 1, "", "dmp_revert"], [200, 3, 1, "", "dmp_trunc"], [200, 3, 1, "", "dup_content"], [200, 3, 1, "", "dup_decompose"], [200, 3, 1, "", "dup_extract"], [200, 3, 1, "", "dup_mirror"], [200, 3, 1, "", "dup_monic"], [200, 3, 1, "", "dup_primitive"], [200, 3, 1, "", "dup_real_imag"], [200, 3, 1, "", "dup_scale"], [200, 3, 1, "", "dup_shift"], [200, 3, 1, "", "dup_sign_variations"], [200, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[203, 3, 1, "", "dispersion"], [203, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[200, 3, 1, "", "sdm_LC"], [200, 3, 1, "", "sdm_LM"], [200, 3, 1, "", "sdm_LT"], [200, 3, 1, "", "sdm_add"], [200, 3, 1, "", "sdm_deg"], [200, 3, 1, "", "sdm_ecart"], [200, 3, 1, "", "sdm_from_dict"], [200, 3, 1, "", "sdm_from_vector"], [200, 3, 1, "", "sdm_groebner"], [200, 3, 1, "", "sdm_monomial_deg"], [200, 3, 1, "", "sdm_monomial_divides"], [200, 3, 1, "", "sdm_monomial_mul"], [200, 3, 1, "", "sdm_mul_term"], [200, 3, 1, "", "sdm_nf_mora"], [200, 3, 1, "", "sdm_spoly"], [200, 3, 1, "", "sdm_to_dict"], [200, 3, 1, "", "sdm_to_vector"], [200, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[198, 1, 1, "", "AlgebraicField"], [198, 1, 1, "", "ComplexField"], [198, 1, 1, "", "ExpressionDomain"], [198, 1, 1, "", "FiniteField"], [198, 1, 1, "", "FractionField"], [198, 1, 1, "", "GMPYFiniteField"], [198, 1, 1, "", "GMPYIntegerRing"], [198, 1, 1, "", "GMPYRationalField"], [198, 1, 1, "", "IntegerRing"], [198, 1, 1, "", "PolynomialRing"], [198, 1, 1, "", "PythonFiniteField"], [198, 1, 1, "", "PythonIntegerRing"], [198, 1, 1, "", "PythonRationalField"], [198, 1, 1, "", "RationalField"], [198, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[198, 2, 1, "", "algebraic_field"], [198, 2, 1, "", "denom"], [198, 2, 1, "", "discriminant"], [198, 5, 1, "", "dtype"], [198, 5, 1, "", "ext"], [198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_GaussianIntegerRing"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "integral_basis"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "maximal_order"], [198, 5, 1, "", "mod"], [198, 2, 1, "", "numer"], [198, 5, 1, "", "orig_ext"], [198, 2, 1, "", "primes_above"], [198, 2, 1, "", "to_alg_num"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[198, 2, 1, "", "almosteq"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "get_exact"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[198, 1, 1, "", "Expression"], [198, 2, 1, "", "denom"], [198, 5, 1, "", "dtype"], [198, 2, 1, "", "from_ExpressionDomain"], [198, 2, 1, "", "from_FractionField"], [198, 2, 1, "", "from_GaussianIntegerRing"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "from_PolynomialRing"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[198, 2, 1, "", "characteristic"], [198, 2, 1, "", "from_FF"], [198, 2, 1, "", "from_FF_gmpy"], [198, 2, 1, "", "from_FF_python"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[198, 2, 1, "", "denom"], [198, 2, 1, "", "factorial"], [198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_ComplexField"], [198, 2, 1, "", "from_FractionField"], [198, 2, 1, "", "from_GaussianIntegerRing"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "from_PolynomialRing"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[198, 2, 1, "", "factorial"], [198, 2, 1, "", "from_FF_gmpy"], [198, 2, 1, "", "from_FF_python"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "gcdex"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "sqrt"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[198, 2, 1, "", "denom"], [198, 2, 1, "", "div"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "factorial"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[198, 2, 1, "", "algebraic_field"], [198, 2, 1, "", "factorial"], [198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_FF"], [198, 2, 1, "", "from_FF_gmpy"], [198, 2, 1, "", "from_FF_python"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "gcdex"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "log"], [198, 2, 1, "", "sqrt"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[198, 2, 1, "", "factorial"], [198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_ComplexField"], [198, 2, 1, "", "from_FractionField"], [198, 2, 1, "", "from_GaussianIntegerRing"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "from_GlobalPolynomialRing"], [198, 2, 1, "", "from_PolynomialRing"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "gcdex"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "is_unit"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[198, 2, 1, "", "algebraic_field"], [198, 2, 1, "", "denom"], [198, 2, 1, "", "div"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[198, 2, 1, "", "almosteq"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "get_exact"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "to_rational"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[198, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[198, 2, 1, "", "drop"], [198, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[198, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[198, 2, 1, "", "abs"], [198, 2, 1, "", "add"], [198, 2, 1, "", "alg_field_from_poly"], [198, 2, 1, "", "algebraic_field"], [198, 2, 1, "", "almosteq"], [198, 2, 1, "", "characteristic"], [198, 2, 1, "", "cofactors"], [198, 2, 1, "", "convert"], [198, 2, 1, "", "convert_from"], [198, 2, 1, "", "cyclotomic_field"], [198, 2, 1, "", "denom"], [198, 2, 1, "", "div"], [198, 2, 1, "", "drop"], [198, 5, 1, "", "dtype"], [198, 2, 1, "", "evalf"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "frac_field"], [198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_ComplexField"], [198, 2, 1, "", "from_ExpressionDomain"], [198, 2, 1, "", "from_ExpressionRawDomain"], [198, 2, 1, "", "from_FF"], [198, 2, 1, "", "from_FF_gmpy"], [198, 2, 1, "", "from_FF_python"], [198, 2, 1, "", "from_FractionField"], [198, 2, 1, "", "from_GlobalPolynomialRing"], [198, 2, 1, "", "from_MonogenicFiniteExtension"], [198, 2, 1, "", "from_PolynomialRing"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_RealField"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "gcdex"], [198, 2, 1, "", "get_exact"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "half_gcdex"], [198, 5, 1, "", "has_assoc_Field"], [198, 5, 1, "", "has_assoc_Ring"], [198, 2, 1, "", "inject"], [198, 2, 1, "", "invert"], [198, 5, 1, "", "is_Field"], [198, 5, 1, "", "is_PID"], [198, 5, 1, "", "is_Ring"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_one"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "log"], [198, 2, 1, "", "map"], [198, 2, 1, "", "mul"], [198, 2, 1, "", "n"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "of_type"], [198, 2, 1, "", "old_frac_field"], [198, 2, 1, "", "old_poly_ring"], [198, 5, 1, "", "one"], [198, 2, 1, "", "poly_ring"], [198, 2, 1, "", "pos"], [198, 2, 1, "", "pow"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "revert"], [198, 2, 1, "", "sqrt"], [198, 2, 1, "", "sub"], [198, 2, 1, "", "to_sympy"], [198, 4, 1, "", "tp"], [198, 2, 1, "", "unify"], [198, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[198, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[198, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[198, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[198, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[198, 2, 1, "", "div"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "is_unit"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[198, 1, 1, "", "GaussianDomain"], [198, 1, 1, "", "GaussianElement"], [198, 1, 1, "", "GaussianInteger"], [198, 1, 1, "", "GaussianIntegerRing"], [198, 1, 1, "", "GaussianRational"], [198, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[198, 2, 1, "", "from_AlgebraicField"], [198, 2, 1, "", "from_QQ"], [198, 2, 1, "", "from_QQ_gmpy"], [198, 2, 1, "", "from_QQ_python"], [198, 2, 1, "", "from_ZZ"], [198, 2, 1, "", "from_ZZ_gmpy"], [198, 2, 1, "", "from_ZZ_python"], [198, 2, 1, "", "from_sympy"], [198, 2, 1, "", "inject"], [198, 2, 1, "", "is_negative"], [198, 2, 1, "", "is_nonnegative"], [198, 2, 1, "", "is_nonpositive"], [198, 2, 1, "", "is_positive"], [198, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[198, 2, 1, "", "new"], [198, 2, 1, "", "parent"], [198, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[198, 5, 1, "", "dtype"], [198, 2, 1, "", "from_GaussianIntegerRing"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[198, 2, 1, "", "as_AlgebraicField"], [198, 2, 1, "", "denom"], [198, 5, 1, "", "dtype"], [198, 2, 1, "", "from_GaussianIntegerRing"], [198, 2, 1, "", "from_GaussianRationalField"], [198, 2, 1, "", "get_field"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[198, 1, 1, "", "ComplexElement"], [198, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[198, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[198, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[198, 2, 1, "", "denom"], [198, 2, 1, "", "div"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "free_module"], [198, 2, 1, "", "get_ring"], [198, 2, 1, "", "ideal"], [198, 2, 1, "", "invert"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "quotient_ring"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[198, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[198, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[200, 3, 1, "", "dmp_cancel"], [200, 3, 1, "", "dmp_content"], [200, 3, 1, "", "dmp_discriminant"], [200, 3, 1, "", "dmp_euclidean_prs"], [200, 3, 1, "", "dmp_ff_prs_gcd"], [200, 3, 1, "", "dmp_gcd"], [200, 3, 1, "", "dmp_gcdex"], [200, 3, 1, "", "dmp_half_gcdex"], [200, 3, 1, "", "dmp_inner_gcd"], [200, 3, 1, "", "dmp_inner_subresultants"], [200, 3, 1, "", "dmp_invert"], [200, 3, 1, "", "dmp_lcm"], [200, 3, 1, "", "dmp_primitive"], [200, 3, 1, "", "dmp_primitive_prs"], [200, 3, 1, "", "dmp_prs_resultant"], [200, 3, 1, "", "dmp_qq_collins_resultant"], [200, 3, 1, "", "dmp_qq_heu_gcd"], [200, 3, 1, "", "dmp_resultant"], [200, 3, 1, "", "dmp_rr_prs_gcd"], [200, 3, 1, "", "dmp_subresultants"], [200, 3, 1, "", "dmp_zz_collins_resultant"], [200, 3, 1, "", "dmp_zz_heu_gcd"], [200, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[200, 3, 1, "", "dmp_ext_factor"], [200, 3, 1, "", "dmp_factor_list"], [200, 3, 1, "", "dmp_factor_list_include"], [200, 3, 1, "", "dmp_irreducible_p"], [200, 3, 1, "", "dmp_trial_division"], [200, 3, 1, "", "dmp_zz_diophantine"], [200, 3, 1, "", "dmp_zz_factor"], [200, 3, 1, "", "dmp_zz_mignotte_bound"], [200, 3, 1, "", "dmp_zz_wang"], [200, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [200, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [200, 3, 1, "", "dmp_zz_wang_non_divisors"], [200, 3, 1, "", "dmp_zz_wang_test_points"], [200, 3, 1, "", "dup_cyclotomic_p"], [200, 3, 1, "", "dup_gf_factor"], [200, 3, 1, "", "dup_zz_cyclotomic_factor"], [200, 3, 1, "", "dup_zz_cyclotomic_poly"], [200, 3, 1, "", "dup_zz_factor"], [200, 3, 1, "", "dup_zz_factor_sqf"], [200, 3, 1, "", "dup_zz_hensel_lift"], [200, 3, 1, "", "dup_zz_hensel_step"], [200, 3, 1, "", "dup_zz_irreducible_p"], [200, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[200, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[198, 1, 1, "", "FracElement"], [198, 1, 1, "", "FracField"], [198, 3, 1, "", "field"], [198, 3, 1, "", "sfield"], [198, 3, 1, "", "vfield"], [198, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[198, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[200, 3, 1, "", "gf_LC"], [200, 3, 1, "", "gf_Qbasis"], [200, 3, 1, "", "gf_Qmatrix"], [200, 3, 1, "", "gf_TC"], [200, 3, 1, "", "gf_add"], [200, 3, 1, "", "gf_add_ground"], [200, 3, 1, "", "gf_add_mul"], [200, 3, 1, "", "gf_berlekamp"], [200, 3, 1, "", "gf_cofactors"], [200, 3, 1, "", "gf_compose"], [200, 3, 1, "", "gf_compose_mod"], [200, 3, 1, "", "gf_crt"], [200, 3, 1, "", "gf_crt1"], [200, 3, 1, "", "gf_crt2"], [200, 3, 1, "", "gf_csolve"], [200, 3, 1, "", "gf_degree"], [200, 3, 1, "", "gf_diff"], [200, 3, 1, "", "gf_div"], [200, 3, 1, "", "gf_eval"], [200, 3, 1, "", "gf_expand"], [200, 3, 1, "", "gf_exquo"], [200, 3, 1, "", "gf_factor"], [200, 3, 1, "", "gf_factor_sqf"], [200, 3, 1, "", "gf_from_dict"], [200, 3, 1, "", "gf_from_int_poly"], [200, 3, 1, "", "gf_gcd"], [200, 3, 1, "", "gf_gcdex"], [200, 3, 1, "", "gf_int"], [200, 3, 1, "", "gf_irreducible"], [200, 3, 1, "", "gf_irreducible_p"], [200, 3, 1, "", "gf_lcm"], [200, 3, 1, "", "gf_lshift"], [200, 3, 1, "", "gf_monic"], [200, 3, 1, "", "gf_mul"], [200, 3, 1, "", "gf_mul_ground"], [200, 3, 1, "", "gf_multi_eval"], [200, 3, 1, "", "gf_neg"], [200, 3, 1, "", "gf_normal"], [200, 3, 1, "", "gf_pow"], [200, 3, 1, "", "gf_pow_mod"], [200, 3, 1, "", "gf_quo"], [200, 3, 1, "", "gf_quo_ground"], [200, 3, 1, "", "gf_random"], [200, 3, 1, "", "gf_rem"], [200, 3, 1, "", "gf_rshift"], [200, 3, 1, "", "gf_shoup"], [200, 3, 1, "", "gf_sqf_list"], [200, 3, 1, "", "gf_sqf_p"], [200, 3, 1, "", "gf_sqf_part"], [200, 3, 1, "", "gf_sqr"], [200, 3, 1, "", "gf_strip"], [200, 3, 1, "", "gf_sub"], [200, 3, 1, "", "gf_sub_ground"], [200, 3, 1, "", "gf_sub_mul"], [200, 3, 1, "", "gf_to_dict"], [200, 3, 1, "", "gf_to_int_poly"], [200, 3, 1, "", "gf_trace_map"], [200, 3, 1, "", "gf_trunc"], [200, 3, 1, "", "gf_value"], [200, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[200, 3, 1, "", "groebner"], [200, 3, 1, "", "is_groebner"], [200, 3, 1, "", "is_minimal"], [200, 3, 1, "", "is_reduced"], [200, 3, 1, "", "red_groebner"], [200, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[196, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[196, 2, 1, "", "add"], [196, 2, 1, "", "charpoly"], [196, 2, 1, "", "det"], [196, 2, 1, "", "hstack"], [196, 2, 1, "", "inv"], [196, 2, 1, "", "is_lower"], [196, 2, 1, "", "is_upper"], [196, 2, 1, "", "is_zero_matrix"], [196, 2, 1, "", "lu"], [196, 2, 1, "", "lu_solve"], [196, 2, 1, "", "matmul"], [196, 2, 1, "", "neg"], [196, 2, 1, "", "rref"], [196, 2, 1, "", "scc"], [196, 2, 1, "", "sub"], [196, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[196, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[196, 2, 1, "", "add"], [196, 2, 1, "", "charpoly"], [196, 2, 1, "", "columnspace"], [196, 2, 1, "", "convert_to"], [196, 2, 1, "", "det"], [196, 2, 1, "", "diag"], [196, 2, 1, "", "eye"], [196, 2, 1, "", "from_Matrix"], [196, 2, 1, "", "from_dict_sympy"], [196, 2, 1, "", "from_list"], [196, 2, 1, "", "from_list_sympy"], [196, 2, 1, "", "from_rep"], [196, 2, 1, "", "hstack"], [196, 2, 1, "", "inv"], [196, 4, 1, "", "is_lower"], [196, 4, 1, "", "is_upper"], [196, 2, 1, "", "lu"], [196, 2, 1, "", "lu_solve"], [196, 2, 1, "", "matmul"], [196, 2, 1, "", "mul"], [196, 2, 1, "", "neg"], [196, 2, 1, "", "nullspace"], [196, 2, 1, "", "ones"], [196, 2, 1, "", "pow"], [196, 2, 1, "", "rowspace"], [196, 2, 1, "", "rref"], [196, 2, 1, "", "scc"], [196, 2, 1, "", "sub"], [196, 2, 1, "", "to_Matrix"], [196, 2, 1, "", "to_dense"], [196, 2, 1, "", "to_field"], [196, 2, 1, "", "to_sparse"], [196, 2, 1, "", "transpose"], [196, 2, 1, "", "unify"], [196, 2, 1, "", "vstack"], [196, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[196, 3, 1, "", "hermite_normal_form"], [196, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[196, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[196, 2, 1, "", "add"], [196, 2, 1, "", "charpoly"], [196, 2, 1, "", "convert_to"], [196, 2, 1, "", "copy"], [196, 2, 1, "", "det"], [196, 2, 1, "", "eye"], [196, 2, 1, "", "from_ddm"], [196, 2, 1, "", "from_list"], [196, 2, 1, "", "hstack"], [196, 2, 1, "", "inv"], [196, 2, 1, "", "is_lower"], [196, 2, 1, "", "is_upper"], [196, 2, 1, "", "is_zero_matrix"], [196, 2, 1, "", "lu"], [196, 2, 1, "", "lu_solve"], [196, 2, 1, "", "matmul"], [196, 2, 1, "", "mul"], [196, 2, 1, "", "neg"], [196, 2, 1, "", "new"], [196, 2, 1, "", "nullspace"], [196, 2, 1, "", "rref"], [196, 2, 1, "", "scc"], [196, 2, 1, "", "sub"], [196, 2, 1, "", "to_ddm"], [196, 2, 1, "", "to_list"], [196, 2, 1, "", "transpose"], [196, 2, 1, "", "vstack"], [196, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[200, 3, 1, "", "_modgcd_multivariate_p"], [200, 3, 1, "", "func_field_modgcd"], [200, 3, 1, "", "modgcd_bivariate"], [200, 3, 1, "", "modgcd_multivariate"], [200, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[203, 1, 1, "", "Monomial"], [203, 3, 1, "", "itermonomials"], [203, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[203, 2, 1, "", "as_expr"], [203, 2, 1, "", "gcd"], [203, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[202, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[202, 3, 1, "", "minimal_polynomial"], [202, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[202, 0, 0, "-", "modules"], [202, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[202, 1, 1, "", "EndomorphismRing"], [202, 1, 1, "", "InnerEndomorphism"], [202, 1, 1, "", "Module"], [202, 1, 1, "", "ModuleElement"], [202, 1, 1, "", "ModuleEndomorphism"], [202, 1, 1, "", "ModuleHomomorphism"], [202, 1, 1, "", "PowerBasis"], [202, 1, 1, "", "PowerBasisElement"], [202, 1, 1, "", "Submodule"], [202, 3, 1, "", "find_min_poly"], [202, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[202, 2, 1, "", "__init__"], [202, 2, 1, "", "inner_endomorphism"], [202, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[202, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[202, 2, 1, "", "__call__"], [202, 2, 1, "", "ancestors"], [202, 2, 1, "", "basis_elements"], [202, 2, 1, "", "element_from_rational"], [202, 2, 1, "", "endomorphism_ring"], [202, 2, 1, "", "is_compat_col"], [202, 2, 1, "", "mult_tab"], [202, 4, 1, "", "n"], [202, 2, 1, "", "nearest_common_ancestor"], [202, 4, 1, "", "number_field"], [202, 2, 1, "", "one"], [202, 4, 1, "", "parent"], [202, 2, 1, "", "power_basis_ancestor"], [202, 2, 1, "", "represent"], [202, 2, 1, "", "starts_with_unity"], [202, 2, 1, "", "submodule_from_gens"], [202, 2, 1, "", "submodule_from_matrix"], [202, 2, 1, "", "whole_submodule"], [202, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[202, 4, 1, "", "QQ_col"], [202, 2, 1, "", "__add__"], [202, 2, 1, "", "__init__"], [202, 2, 1, "", "__mod__"], [202, 2, 1, "", "__mul__"], [202, 2, 1, "", "column"], [202, 2, 1, "", "equiv"], [202, 2, 1, "", "from_int_list"], [202, 2, 1, "", "is_compat"], [202, 4, 1, "", "n"], [202, 2, 1, "", "over_power_basis"], [202, 2, 1, "", "reduced"], [202, 2, 1, "", "reduced_mod_p"], [202, 2, 1, "", "to_ancestor"], [202, 2, 1, "", "to_parent"], [202, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[202, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[202, 2, 1, "", "__init__"], [202, 2, 1, "", "kernel"], [202, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[202, 2, 1, "", "__init__"], [202, 2, 1, "", "element_from_ANP"], [202, 2, 1, "", "element_from_alg_num"], [202, 2, 1, "", "element_from_poly"], [202, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[202, 4, 1, "", "T"], [202, 2, 1, "", "as_expr"], [202, 4, 1, "", "generator"], [202, 4, 1, "", "is_rational"], [202, 2, 1, "", "norm"], [202, 2, 1, "", "numerator"], [202, 2, 1, "", "poly"], [202, 2, 1, "", "to_ANP"], [202, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[202, 4, 1, "", "QQ_matrix"], [202, 2, 1, "", "__init__"], [202, 2, 1, "", "add"], [202, 2, 1, "", "basis_element_pullbacks"], [202, 2, 1, "", "discard_before"], [202, 2, 1, "", "mul"], [202, 2, 1, "", "reduce_element"], [202, 2, 1, "", "reduced"], [202, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[202, 1, 1, "", "PrimeIdeal"], [202, 3, 1, "", "prime_decomp"], [202, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[202, 2, 1, "", "__add__"], [202, 2, 1, "", "__init__"], [202, 2, 1, "", "__mul__"], [202, 2, 1, "", "as_submodule"], [202, 4, 1, "", "is_inert"], [202, 2, 1, "", "reduce_ANP"], [202, 2, 1, "", "reduce_alg_num"], [202, 2, 1, "", "reduce_element"], [202, 2, 1, "", "repr"], [202, 2, 1, "", "test_factor"], [202, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[202, 3, 1, "", "field_isomorphism"], [202, 3, 1, "", "primitive_element"], [202, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[202, 1, 1, "", "AlgIntPowers"], [202, 3, 1, "", "coeff_search"], [202, 3, 1, "", "extract_fundamental_discriminant"], [202, 3, 1, "", "get_num_denom"], [202, 3, 1, "", "is_int"], [202, 3, 1, "", "is_rat"], [202, 3, 1, "", "isolate"], [202, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[202, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[203, 1, 1, "", "GradedLexOrder"], [203, 1, 1, "", "LexOrder"], [203, 1, 1, "", "MonomialOrder"], [203, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[203, 3, 1, "", "chebyshevt_poly"], [203, 3, 1, "", "chebyshevu_poly"], [203, 3, 1, "", "gegenbauer_poly"], [203, 3, 1, "", "hermite_poly"], [203, 3, 1, "", "hermite_prob_poly"], [203, 3, 1, "", "jacobi_poly"], [203, 3, 1, "", "laguerre_poly"], [203, 3, 1, "", "legendre_poly"], [203, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[203, 3, 1, "", "apart"], [203, 3, 1, "", "apart_list"], [203, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[198, 1, 1, "", "ANP"], [198, 1, 1, "", "DMF"], [198, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[198, 2, 1, "", "LC"], [198, 2, 1, "", "TC"], [198, 4, 1, "", "is_ground"], [198, 4, 1, "", "is_one"], [198, 4, 1, "", "is_zero"], [198, 2, 1, "", "pow"], [198, 2, 1, "", "to_dict"], [198, 2, 1, "", "to_list"], [198, 2, 1, "", "to_sympy_dict"], [198, 2, 1, "", "to_sympy_list"], [198, 2, 1, "", "to_tuple"], [198, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[198, 2, 1, "", "add"], [198, 2, 1, "", "cancel"], [198, 2, 1, "", "denom"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "frac_unify"], [198, 2, 1, "", "half_per"], [198, 2, 1, "", "invert"], [198, 4, 1, "", "is_one"], [198, 4, 1, "", "is_zero"], [198, 2, 1, "", "mul"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "numer"], [198, 2, 1, "", "per"], [198, 2, 1, "", "poly_unify"], [198, 2, 1, "", "pow"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[198, 2, 1, "", "LC"], [198, 2, 1, "", "TC"], [198, 2, 1, "", "abs"], [198, 2, 1, "", "add"], [198, 2, 1, "", "add_ground"], [198, 2, 1, "", "all_coeffs"], [198, 2, 1, "", "all_monoms"], [198, 2, 1, "", "all_terms"], [198, 2, 1, "", "cancel"], [198, 2, 1, "", "cauchy_lower_bound"], [198, 2, 1, "", "cauchy_upper_bound"], [198, 2, 1, "", "clear_denoms"], [198, 2, 1, "", "coeffs"], [198, 2, 1, "", "cofactors"], [198, 2, 1, "", "compose"], [198, 2, 1, "", "content"], [198, 2, 1, "", "convert"], [198, 2, 1, "", "count_complex_roots"], [198, 2, 1, "", "count_real_roots"], [198, 2, 1, "", "decompose"], [198, 2, 1, "", "deflate"], [198, 2, 1, "", "degree"], [198, 2, 1, "", "degree_list"], [198, 2, 1, "", "diff"], [198, 2, 1, "", "discriminant"], [198, 2, 1, "", "div"], [198, 2, 1, "", "eject"], [198, 2, 1, "", "eval"], [198, 2, 1, "", "exclude"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "exquo_ground"], [198, 2, 1, "", "factor_list"], [198, 2, 1, "", "factor_list_include"], [198, 2, 1, "", "from_dict"], [198, 2, 1, "", "from_list"], [198, 2, 1, "", "from_sympy_list"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "gcdex"], [198, 2, 1, "", "gff_list"], [198, 2, 1, "", "half_gcdex"], [198, 2, 1, "", "homogeneous_order"], [198, 2, 1, "", "homogenize"], [198, 2, 1, "", "inject"], [198, 2, 1, "", "integrate"], [198, 2, 1, "", "intervals"], [198, 2, 1, "", "invert"], [198, 4, 1, "", "is_cyclotomic"], [198, 4, 1, "", "is_ground"], [198, 4, 1, "", "is_homogeneous"], [198, 4, 1, "", "is_irreducible"], [198, 4, 1, "", "is_linear"], [198, 4, 1, "", "is_monic"], [198, 4, 1, "", "is_monomial"], [198, 4, 1, "", "is_one"], [198, 4, 1, "", "is_primitive"], [198, 4, 1, "", "is_quadratic"], [198, 4, 1, "", "is_sqf"], [198, 4, 1, "", "is_zero"], [198, 2, 1, "", "l1_norm"], [198, 2, 1, "", "l2_norm_squared"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "lift"], [198, 2, 1, "", "max_norm"], [198, 2, 1, "", "mignotte_sep_bound_squared"], [198, 2, 1, "", "monic"], [198, 2, 1, "", "monoms"], [198, 2, 1, "", "mul"], [198, 2, 1, "", "mul_ground"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "norm"], [198, 2, 1, "", "nth"], [198, 2, 1, "", "pdiv"], [198, 2, 1, "", "per"], [198, 2, 1, "", "permute"], [198, 2, 1, "", "pexquo"], [198, 2, 1, "", "pow"], [198, 2, 1, "", "pquo"], [198, 2, 1, "", "prem"], [198, 2, 1, "", "primitive"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "quo_ground"], [198, 2, 1, "", "refine_root"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "resultant"], [198, 2, 1, "", "revert"], [198, 2, 1, "", "shift"], [198, 2, 1, "", "slice"], [198, 2, 1, "", "sqf_list"], [198, 2, 1, "", "sqf_list_include"], [198, 2, 1, "", "sqf_norm"], [198, 2, 1, "", "sqf_part"], [198, 2, 1, "", "sqr"], [198, 2, 1, "", "sturm"], [198, 2, 1, "", "sub"], [198, 2, 1, "", "sub_ground"], [198, 2, 1, "", "subresultants"], [198, 2, 1, "", "terms"], [198, 2, 1, "", "terms_gcd"], [198, 2, 1, "", "to_dict"], [198, 2, 1, "", "to_exact"], [198, 2, 1, "", "to_field"], [198, 2, 1, "", "to_list"], [198, 2, 1, "", "to_ring"], [198, 2, 1, "", "to_sympy_dict"], [198, 2, 1, "", "to_sympy_list"], [198, 2, 1, "", "to_tuple"], [198, 2, 1, "", "total_degree"], [198, 2, 1, "", "transform"], [198, 2, 1, "", "trunc"], [198, 2, 1, "", "unify"]], "sympy.polys": [[200, 0, 0, "-", "polyconfig"], [200, 0, 0, "-", "polyoptions"], [205, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[200, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[200, 1, 1, "", "BasePolynomialError"], [200, 1, 1, "", "CoercionFailed"], [200, 1, 1, "", "ComputationFailed"], [200, 1, 1, "", "DomainError"], [200, 1, 1, "", "EvaluationFailed"], [200, 1, 1, "", "ExactQuotientFailed"], [200, 1, 1, "", "ExtraneousFactors"], [200, 1, 1, "", "FlagError"], [200, 1, 1, "", "GeneratorsError"], [200, 1, 1, "", "GeneratorsNeeded"], [200, 1, 1, "", "HeuristicGCDFailed"], [200, 1, 1, "", "HomomorphismFailed"], [200, 1, 1, "", "IsomorphismFailed"], [200, 1, 1, "", "MultivariatePolynomialError"], [200, 1, 1, "", "NotAlgebraic"], [200, 1, 1, "", "NotInvertible"], [200, 1, 1, "", "NotReversible"], [200, 1, 1, "", "OperationNotSupported"], [200, 1, 1, "", "OptionError"], [200, 1, 1, "", "PolificationFailed"], [200, 1, 1, "", "PolynomialError"], [200, 1, 1, "", "RefinementFailed"], [200, 1, 1, "", "UnificationFailed"], [200, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[203, 3, 1, "", "horner"], [203, 3, 1, "", "interpolate"], [203, 3, 1, "", "symmetrize"], [203, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[200, 1, 1, "", "Options"], [200, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[200, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[203, 3, 1, "", "roots"]], "sympy.polys.polytools": [[203, 1, 1, "", "GroebnerBasis"], [203, 3, 1, "", "LC"], [203, 3, 1, "", "LM"], [203, 3, 1, "", "LT"], [203, 1, 1, "", "Poly"], [203, 1, 1, "", "PurePoly"], [203, 3, 1, "", "cancel"], [203, 3, 1, "", "cofactors"], [203, 3, 1, "", "compose"], [203, 3, 1, "", "content"], [203, 3, 1, "", "count_roots"], [203, 3, 1, "", "decompose"], [203, 3, 1, "", "degree"], [203, 3, 1, "", "degree_list"], [203, 3, 1, "", "discriminant"], [203, 3, 1, "", "div"], [203, 3, 1, "", "exquo"], [203, 3, 1, "", "factor"], [203, 3, 1, "", "factor_list"], [203, 3, 1, "", "gcd"], [203, 3, 1, "", "gcd_list"], [203, 3, 1, "", "gcdex"], [203, 3, 1, "", "gff"], [203, 3, 1, "", "gff_list"], [203, 3, 1, "", "groebner"], [203, 3, 1, "", "ground_roots"], [203, 3, 1, "", "half_gcdex"], [203, 3, 1, "", "intervals"], [203, 3, 1, "", "invert"], [203, 3, 1, "", "is_zero_dimensional"], [203, 3, 1, "", "lcm"], [203, 3, 1, "", "lcm_list"], [203, 3, 1, "", "monic"], [203, 3, 1, "", "nroots"], [203, 3, 1, "", "nth_power_roots_poly"], [203, 3, 1, "", "parallel_poly_from_expr"], [203, 3, 1, "", "pdiv"], [203, 3, 1, "", "pexquo"], [203, 3, 1, "", "poly"], [203, 3, 1, "", "poly_from_expr"], [203, 3, 1, "", "pquo"], [203, 3, 1, "", "prem"], [203, 3, 1, "", "primitive"], [203, 3, 1, "", "quo"], [203, 3, 1, "", "real_roots"], [203, 3, 1, "", "reduced"], [203, 3, 1, "", "refine_root"], [203, 3, 1, "", "rem"], [203, 3, 1, "", "resultant"], [203, 3, 1, "", "sqf"], [203, 3, 1, "", "sqf_list"], [203, 3, 1, "", "sqf_norm"], [203, 3, 1, "", "sqf_part"], [203, 3, 1, "", "sturm"], [203, 3, 1, "", "subresultants"], [203, 3, 1, "", "terms_gcd"], [203, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[203, 2, 1, "", "contains"], [203, 2, 1, "", "fglm"], [203, 4, 1, "", "is_zero_dimensional"], [203, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[203, 2, 1, "", "EC"], [203, 2, 1, "", "EM"], [203, 2, 1, "", "ET"], [203, 2, 1, "", "LC"], [203, 2, 1, "", "LM"], [203, 2, 1, "", "LT"], [203, 2, 1, "", "TC"], [203, 2, 1, "", "abs"], [203, 2, 1, "", "add"], [203, 2, 1, "", "add_ground"], [203, 2, 1, "", "all_coeffs"], [203, 2, 1, "", "all_monoms"], [203, 2, 1, "", "all_roots"], [203, 2, 1, "", "all_terms"], [203, 2, 1, "", "as_dict"], [203, 2, 1, "", "as_expr"], [203, 2, 1, "", "as_list"], [203, 2, 1, "", "as_poly"], [203, 2, 1, "", "cancel"], [203, 2, 1, "", "clear_denoms"], [203, 2, 1, "", "coeff_monomial"], [203, 2, 1, "", "coeffs"], [203, 2, 1, "", "cofactors"], [203, 2, 1, "", "compose"], [203, 2, 1, "", "content"], [203, 2, 1, "", "count_roots"], [203, 2, 1, "", "decompose"], [203, 2, 1, "", "deflate"], [203, 2, 1, "", "degree"], [203, 2, 1, "", "degree_list"], [203, 2, 1, "", "diff"], [203, 2, 1, "", "discriminant"], [203, 2, 1, "", "dispersion"], [203, 2, 1, "", "dispersionset"], [203, 2, 1, "", "div"], [203, 4, 1, "", "domain"], [203, 2, 1, "", "eject"], [203, 2, 1, "", "eval"], [203, 2, 1, "", "exclude"], [203, 2, 1, "", "exquo"], [203, 2, 1, "", "exquo_ground"], [203, 2, 1, "", "factor_list"], [203, 2, 1, "", "factor_list_include"], [203, 4, 1, "", "free_symbols"], [203, 4, 1, "", "free_symbols_in_domain"], [203, 2, 1, "", "from_dict"], [203, 2, 1, "", "from_expr"], [203, 2, 1, "", "from_list"], [203, 2, 1, "", "from_poly"], [203, 2, 1, "", "gcd"], [203, 2, 1, "", "gcdex"], [203, 4, 1, "", "gen"], [203, 2, 1, "", "get_domain"], [203, 2, 1, "", "get_modulus"], [203, 2, 1, "", "gff_list"], [203, 2, 1, "", "ground_roots"], [203, 2, 1, "", "half_gcdex"], [203, 2, 1, "", "has_only_gens"], [203, 2, 1, "", "homogeneous_order"], [203, 2, 1, "", "homogenize"], [203, 2, 1, "", "inject"], [203, 2, 1, "", "integrate"], [203, 2, 1, "", "intervals"], [203, 2, 1, "", "invert"], [203, 4, 1, "", "is_cyclotomic"], [203, 4, 1, "", "is_ground"], [203, 4, 1, "", "is_homogeneous"], [203, 4, 1, "", "is_irreducible"], [203, 4, 1, "", "is_linear"], [203, 4, 1, "", "is_monic"], [203, 4, 1, "", "is_monomial"], [203, 4, 1, "", "is_multivariate"], [203, 4, 1, "", "is_one"], [203, 4, 1, "", "is_primitive"], [203, 4, 1, "", "is_quadratic"], [203, 4, 1, "", "is_sqf"], [203, 4, 1, "", "is_univariate"], [203, 4, 1, "", "is_zero"], [203, 2, 1, "", "l1_norm"], [203, 2, 1, "", "lcm"], [203, 2, 1, "", "length"], [203, 2, 1, "", "lift"], [203, 2, 1, "", "ltrim"], [203, 2, 1, "", "match"], [203, 2, 1, "", "max_norm"], [203, 2, 1, "", "monic"], [203, 2, 1, "", "monoms"], [203, 2, 1, "", "mul"], [203, 2, 1, "", "mul_ground"], [203, 2, 1, "", "neg"], [203, 2, 1, "", "new"], [203, 2, 1, "", "norm"], [203, 2, 1, "", "nroots"], [203, 2, 1, "", "nth"], [203, 2, 1, "", "nth_power_roots_poly"], [203, 4, 1, "", "one"], [203, 2, 1, "", "pdiv"], [203, 2, 1, "", "per"], [203, 2, 1, "", "pexquo"], [203, 2, 1, "", "pow"], [203, 2, 1, "", "pquo"], [203, 2, 1, "", "prem"], [203, 2, 1, "", "primitive"], [203, 2, 1, "", "quo"], [203, 2, 1, "", "quo_ground"], [203, 2, 1, "", "rat_clear_denoms"], [203, 2, 1, "", "real_roots"], [203, 2, 1, "", "refine_root"], [203, 2, 1, "", "rem"], [203, 2, 1, "", "reorder"], [203, 2, 1, "", "replace"], [203, 2, 1, "", "resultant"], [203, 2, 1, "", "retract"], [203, 2, 1, "", "revert"], [203, 2, 1, "", "root"], [203, 2, 1, "", "same_root"], [203, 2, 1, "", "set_domain"], [203, 2, 1, "", "set_modulus"], [203, 2, 1, "", "shift"], [203, 2, 1, "", "slice"], [203, 2, 1, "", "sqf_list"], [203, 2, 1, "", "sqf_list_include"], [203, 2, 1, "", "sqf_norm"], [203, 2, 1, "", "sqf_part"], [203, 2, 1, "", "sqr"], [203, 2, 1, "", "sturm"], [203, 2, 1, "", "sub"], [203, 2, 1, "", "sub_ground"], [203, 2, 1, "", "subresultants"], [203, 2, 1, "", "terms"], [203, 2, 1, "", "terms_gcd"], [203, 2, 1, "", "termwise"], [203, 2, 1, "", "to_exact"], [203, 2, 1, "", "to_field"], [203, 2, 1, "", "to_ring"], [203, 2, 1, "", "total_degree"], [203, 2, 1, "", "transform"], [203, 2, 1, "", "trunc"], [203, 2, 1, "", "unify"], [203, 4, 1, "", "unit"], [203, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[203, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[203, 3, 1, "", "together"]], "sympy.polys.ring_series": [[204, 3, 1, "", "_tan1"], [204, 3, 1, "", "mul_xin"], [204, 3, 1, "", "pow_xin"], [204, 3, 1, "", "rs_LambertW"], [204, 3, 1, "", "rs_asin"], [204, 3, 1, "", "rs_atan"], [204, 3, 1, "", "rs_atanh"], [204, 3, 1, "", "rs_compose_add"], [204, 3, 1, "", "rs_cos"], [204, 3, 1, "", "rs_cos_sin"], [204, 3, 1, "", "rs_cosh"], [204, 3, 1, "", "rs_cot"], [204, 3, 1, "", "rs_diff"], [204, 3, 1, "", "rs_exp"], [204, 3, 1, "", "rs_fun"], [204, 3, 1, "", "rs_hadamard_exp"], [204, 3, 1, "", "rs_integrate"], [204, 3, 1, "", "rs_is_puiseux"], [204, 3, 1, "", "rs_log"], [204, 3, 1, "", "rs_mul"], [204, 3, 1, "", "rs_newton"], [204, 3, 1, "", "rs_nth_root"], [204, 3, 1, "", "rs_pow"], [204, 3, 1, "", "rs_puiseux"], [204, 3, 1, "", "rs_puiseux2"], [204, 3, 1, "", "rs_series_from_list"], [204, 3, 1, "", "rs_series_inversion"], [204, 3, 1, "", "rs_series_reversion"], [204, 3, 1, "", "rs_sin"], [204, 3, 1, "", "rs_sinh"], [204, 3, 1, "", "rs_square"], [204, 3, 1, "", "rs_subs"], [204, 3, 1, "", "rs_tan"], [204, 3, 1, "", "rs_tanh"], [204, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[198, 1, 1, "", "PolyElement"], [198, 1, 1, "", "PolyRing"], [198, 3, 1, "", "ring"], [198, 3, 1, "", "sring"], [198, 3, 1, "", "vring"], [198, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[198, 2, 1, "", "almosteq"], [198, 2, 1, "", "cancel"], [198, 2, 1, "", "coeff"], [198, 2, 1, "", "coeffs"], [198, 2, 1, "", "const"], [198, 2, 1, "", "content"], [198, 2, 1, "", "copy"], [198, 2, 1, "", "degree"], [198, 2, 1, "", "degrees"], [198, 2, 1, "", "diff"], [198, 2, 1, "", "div"], [198, 2, 1, "", "imul_num"], [198, 2, 1, "", "itercoeffs"], [198, 2, 1, "", "itermonoms"], [198, 2, 1, "", "iterterms"], [198, 2, 1, "", "leading_expv"], [198, 2, 1, "", "leading_monom"], [198, 2, 1, "", "leading_term"], [198, 2, 1, "", "listcoeffs"], [198, 2, 1, "", "listmonoms"], [198, 2, 1, "", "listterms"], [198, 2, 1, "", "monic"], [198, 2, 1, "", "monoms"], [198, 2, 1, "", "primitive"], [198, 2, 1, "", "square"], [198, 2, 1, "", "strip_zero"], [198, 2, 1, "", "tail_degree"], [198, 2, 1, "", "tail_degrees"], [198, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[198, 2, 1, "", "add"], [198, 2, 1, "", "add_gens"], [198, 2, 1, "", "compose"], [198, 2, 1, "", "drop"], [198, 2, 1, "", "drop_to_ground"], [198, 2, 1, "", "index"], [198, 2, 1, "", "monomial_basis"], [198, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[203, 1, 1, "", "ComplexRootOf"], [203, 1, 1, "", "RootOf"], [203, 1, 1, "", "RootSum"], [203, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[203, 2, 1, "", "_all_roots"], [203, 2, 1, "", "_complexes_index"], [203, 2, 1, "", "_complexes_sorted"], [203, 2, 1, "", "_count_roots"], [203, 2, 1, "", "_ensure_complexes_init"], [203, 2, 1, "", "_ensure_reals_init"], [203, 2, 1, "", "_eval_evalf"], [203, 2, 1, "", "_eval_is_imaginary"], [203, 2, 1, "", "_eval_is_real"], [203, 2, 1, "", "_get_complexes"], [203, 2, 1, "", "_get_complexes_sqf"], [203, 2, 1, "", "_get_interval"], [203, 2, 1, "", "_get_reals"], [203, 2, 1, "", "_get_reals_sqf"], [203, 2, 1, "", "_get_roots"], [203, 2, 1, "", "_indexed_root"], [203, 2, 1, "", "_new"], [203, 2, 1, "", "_postprocess_root"], [203, 2, 1, "", "_preprocess_roots"], [203, 2, 1, "", "_real_roots"], [203, 2, 1, "", "_reals_index"], [203, 2, 1, "", "_reals_sorted"], [203, 2, 1, "", "_refine_complexes"], [203, 2, 1, "", "_reset"], [203, 2, 1, "", "_roots_trivial"], [203, 2, 1, "", "_set_interval"], [203, 2, 1, "", "all_roots"], [203, 2, 1, "", "clear_cache"], [203, 2, 1, "", "eval_approx"], [203, 2, 1, "", "eval_rational"], [203, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[203, 2, 1, "", "new"]], "sympy.polys.solvers": [[205, 3, 1, "", "_solve_lin_sys"], [205, 3, 1, "", "_solve_lin_sys_component"], [205, 3, 1, "", "eqs_to_matrix"], [205, 3, 1, "", "solve_lin_sys"], [205, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[203, 3, 1, "", "cyclotomic_poly"], [203, 3, 1, "", "interpolating_poly"], [203, 3, 1, "", "random_poly"], [203, 3, 1, "", "swinnerton_dyer_poly"], [203, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[207, 0, 0, "-", "aesaracode"], [207, 0, 0, "-", "c"], [207, 0, 0, "-", "codeprinter"], [207, 0, 0, "-", "conventions"], [207, 0, 0, "-", "cxx"], [207, 0, 0, "-", "fortran"], [207, 0, 0, "-", "gtk"], [207, 0, 0, "-", "jscode"], [207, 0, 0, "-", "julia"], [207, 0, 0, "-", "lambdarepr"], [207, 0, 0, "-", "latex"], [207, 0, 0, "-", "maple"], [207, 0, 0, "-", "mathematica"], [207, 0, 0, "-", "mathml"], [207, 0, 0, "-", "octave"], [207, 0, 0, "-", "precedence"], [207, 0, 0, "-", "pretty"], [207, 0, 0, "-", "preview"], [207, 0, 0, "-", "printer"], [207, 0, 0, "-", "pycode"], [207, 0, 0, "-", "python"], [207, 0, 0, "-", "rcode"], [207, 0, 0, "-", "repr"], [207, 0, 0, "-", "rust"], [207, 0, 0, "-", "smtlib"], [207, 0, 0, "-", "str"], [207, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[207, 1, 1, "", "AesaraPrinter"], [207, 3, 1, "", "aesara_code"], [207, 3, 1, "", "aesara_function"], [207, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[207, 2, 1, "", "doprint"], [207, 5, 1, "", "printmethod"]], "sympy.printing.c": [[207, 1, 1, "", "C89CodePrinter"], [207, 1, 1, "", "C99CodePrinter"], [207, 3, 1, "", "ccode"], [207, 6, 1, "", "known_functions_C89"], [207, 6, 1, "", "known_functions_C99"], [207, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[207, 7, 1, "", "AssignmentError"], [207, 1, 1, "", "CodePrinter"], [207, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[207, 2, 1, "", "doprint"], [207, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[207, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[207, 1, 1, "", "CXX11CodePrinter"], [207, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[207, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[207, 1, 1, "", "FCodePrinter"], [207, 3, 1, "", "fcode"], [207, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[207, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[207, 1, 1, "", "JavascriptCodePrinter"], [207, 3, 1, "", "jscode"], [207, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[207, 1, 1, "", "JuliaCodePrinter"], [207, 3, 1, "", "julia_code"], [207, 6, 1, "", "known_fcns_src1"], [207, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[207, 1, 1, "", "LambdaPrinter"], [207, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[207, 1, 1, "", "LatexPrinter"], [207, 6, 1, "", "accepted_latex_functions"], [207, 3, 1, "", "latex"], [207, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[207, 2, 1, "", "parenthesize_super"], [207, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[207, 1, 1, "", "MapleCodePrinter"], [207, 3, 1, "", "maple_code"], [207, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[207, 1, 1, "", "MCodePrinter"], [207, 6, 1, "", "known_functions"], [207, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[207, 1, 1, "", "MathMLContentPrinter"], [207, 1, 1, "", "MathMLPresentationPrinter"], [207, 1, 1, "", "MathMLPrinterBase"], [207, 3, 1, "", "mathml"], [207, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[207, 2, 1, "", "mathml_tag"], [207, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[207, 2, 1, "", "mathml_tag"], [207, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[207, 2, 1, "", "doprint"]], "sympy.printing.octave": [[207, 1, 1, "", "OctaveCodePrinter"], [207, 6, 1, "", "known_fcns_src1"], [207, 6, 1, "", "known_fcns_src2"], [207, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[207, 6, 1, "", "PRECEDENCE"], [207, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [207, 6, 1, "", "PRECEDENCE_VALUES"], [207, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[207, 0, 0, "-", "pretty"], [207, 0, 0, "-", "pretty_symbology"], [207, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[207, 1, 1, "", "PrettyPrinter"], [207, 3, 1, "", "pretty"], [207, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[207, 3, 1, "", "G"], [207, 3, 1, "", "U"], [207, 3, 1, "", "VF"], [207, 3, 1, "", "annotated"], [207, 6, 1, "", "atoms_table"], [207, 6, 1, "", "digit_2txt"], [207, 6, 1, "", "frac"], [207, 3, 1, "", "g"], [207, 6, 1, "", "greek_letters"], [207, 3, 1, "", "hobj"], [207, 3, 1, "", "pretty_atom"], [207, 3, 1, "", "pretty_symbol"], [207, 3, 1, "", "pretty_try_use_unicode"], [207, 3, 1, "", "pretty_use_unicode"], [207, 6, 1, "", "root"], [207, 6, 1, "", "sub"], [207, 6, 1, "", "sup"], [207, 6, 1, "", "symb_2txt"], [207, 3, 1, "", "vobj"], [207, 3, 1, "", "xobj"], [207, 3, 1, "", "xstr"], [207, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[207, 1, 1, "", "prettyForm"], [207, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[207, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[207, 2, 1, "", "above"], [207, 2, 1, "", "below"], [207, 2, 1, "", "height"], [207, 2, 1, "", "left"], [207, 2, 1, "", "leftslash"], [207, 2, 1, "", "next"], [207, 2, 1, "", "parens"], [207, 2, 1, "", "render"], [207, 2, 1, "", "right"], [207, 2, 1, "", "root"], [207, 2, 1, "", "stack"], [207, 2, 1, "", "terminal_width"], [207, 2, 1, "", "width"]], "sympy.printing.preview": [[207, 3, 1, "", "preview"]], "sympy.printing.printer": [[207, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[207, 2, 1, "", "_print"], [207, 2, 1, "", "doprint"], [207, 5, 1, "", "printmethod"], [207, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[207, 1, 1, "", "MpmathPrinter"], [207, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[207, 1, 1, "", "RCodePrinter"], [207, 6, 1, "", "known_functions"], [207, 3, 1, "", "print_rcode"], [207, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[207, 1, 1, "", "ReprPrinter"], [207, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[207, 2, 1, "", "emptyPrinter"], [207, 5, 1, "", "printmethod"], [207, 2, 1, "", "reprify"]], "sympy.printing.rust": [[207, 1, 1, "", "RustCodePrinter"], [207, 6, 1, "", "known_functions"], [207, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[207, 2, 1, "", "indent_code"], [207, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[207, 1, 1, "", "SMTLibPrinter"], [207, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[207, 5, 1, "", "_default_settings"], [207, 5, 1, "", "printmethod"]], "sympy.printing.str": [[207, 1, 1, "", "StrPrinter"], [207, 3, 1, "", "sstr"], [207, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[207, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[207, 3, 1, "", "pprint_nodes"], [207, 3, 1, "", "print_node"], [207, 3, 1, "", "print_tree"], [207, 3, 1, "", "tree"]], "sympy.series.acceleration": [[214, 3, 1, "", "richardson"], [214, 3, 1, "", "shanks"]], "sympy.series.formal": [[209, 1, 1, "", "FiniteFormalPowerSeries"], [209, 1, 1, "", "FormalPowerSeries"], [209, 1, 1, "", "FormalPowerSeriesCompose"], [209, 1, 1, "", "FormalPowerSeriesInverse"], [209, 1, 1, "", "FormalPowerSeriesProduct"], [209, 3, 1, "", "compute_fps"], [209, 3, 1, "", "exp_re"], [209, 3, 1, "", "fps"], [209, 3, 1, "", "hyper_algorithm"], [209, 3, 1, "", "hyper_re"], [209, 3, 1, "", "rational_algorithm"], [209, 3, 1, "", "rational_independent"], [209, 3, 1, "", "rsolve_hypergeometric"], [209, 3, 1, "", "simpleDE"], [209, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[209, 2, 1, "", "coeff_bell"], [209, 2, 1, "", "compose"], [209, 4, 1, "", "infinite"], [209, 2, 1, "", "integrate"], [209, 2, 1, "", "inverse"], [209, 2, 1, "", "polynomial"], [209, 2, 1, "", "product"], [209, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[209, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[209, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[209, 4, 1, "", "function"]], "sympy.series.fourier": [[210, 1, 1, "", "FourierSeries"], [210, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[210, 2, 1, "", "scale"], [210, 2, 1, "", "scalex"], [210, 2, 1, "", "shift"], [210, 2, 1, "", "shiftx"], [210, 2, 1, "", "sigma_approximation"], [210, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[214, 1, 1, "", "SubsSet"], [214, 3, 1, "", "build_expression_tree"], [214, 3, 1, "", "calculate_series"], [214, 3, 1, "", "compare"], [214, 3, 1, "", "gruntz"], [214, 3, 1, "", "limitinf"], [214, 3, 1, "", "mrv"], [214, 3, 1, "", "mrv_leadterm"], [214, 3, 1, "", "mrv_max1"], [214, 3, 1, "", "mrv_max3"], [214, 3, 1, "", "rewrite"], [214, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[214, 2, 1, "", "copy"], [214, 2, 1, "", "do_subs"], [214, 2, 1, "", "meets"], [214, 2, 1, "", "union"]], "sympy.series.limits": [[214, 1, 1, "", "Limit"], [214, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[214, 2, 1, "", "doit"]], "sympy.series.limitseq": [[212, 3, 1, "", "difference_delta"], [212, 3, 1, "", "dominant"], [212, 3, 1, "", "limit_seq"]], "sympy.series.order": [[214, 1, 1, "", "Order"]], "sympy.series.order.Order": [[214, 2, 1, "", "contains"]], "sympy.series.residues": [[214, 3, 1, "", "residue"]], "sympy.series.sequences": [[213, 1, 1, "", "EmptySequence"], [213, 1, 1, "", "RecursiveSeq"], [213, 1, 1, "", "SeqAdd"], [213, 1, 1, "", "SeqBase"], [213, 1, 1, "", "SeqFormula"], [213, 1, 1, "", "SeqMul"], [213, 1, 1, "", "SeqPer"], [213, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[213, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[213, 4, 1, "", "initial"], [213, 4, 1, "", "interval"], [213, 4, 1, "", "n"], [213, 4, 1, "", "recurrence"], [213, 4, 1, "", "start"], [213, 4, 1, "", "stop"], [213, 4, 1, "", "y"], [213, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[213, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[213, 2, 1, "", "coeff"], [213, 2, 1, "", "coeff_mul"], [213, 2, 1, "", "find_linear_recurrence"], [213, 4, 1, "", "free_symbols"], [213, 4, 1, "", "gen"], [213, 4, 1, "", "interval"], [213, 4, 1, "", "length"], [213, 4, 1, "", "start"], [213, 4, 1, "", "stop"], [213, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[213, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[213, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[213, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[214, 3, 1, "", "series"]], "sympy.sets": [[215, 0, 0, "-", "conditionset"], [215, 0, 0, "-", "fancysets"], [215, 0, 0, "-", "powerset"], [215, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[215, 1, 1, "", "ConditionSet"], [215, 1, 1, "", "Contains"], [215, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[215, 1, 1, "", "CartesianComplexRegion"], [215, 1, 1, "", "ComplexRegion"], [215, 1, 1, "", "Complexes"], [215, 1, 1, "", "ImageSet"], [215, 1, 1, "", "Integers"], [215, 1, 1, "", "Naturals"], [215, 1, 1, "", "Naturals0"], [215, 1, 1, "", "PolarComplexRegion"], [215, 1, 1, "", "Range"], [215, 1, 1, "", "Rationals"], [215, 1, 1, "", "Reals"], [215, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[215, 4, 1, "", "a_interval"], [215, 4, 1, "", "b_interval"], [215, 2, 1, "", "from_real"], [215, 4, 1, "", "psets"], [215, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[215, 2, 1, "", "as_relational"], [215, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[215, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[215, 1, 1, "", "Complement"], [215, 1, 1, "", "DisjointUnion"], [215, 1, 1, "", "EmptySet"], [215, 1, 1, "", "FiniteSet"], [215, 1, 1, "", "Intersection"], [215, 1, 1, "", "Interval"], [215, 1, 1, "", "ProductSet"], [215, 1, 1, "", "Set"], [215, 1, 1, "", "SymmetricDifference"], [215, 1, 1, "", "Union"], [215, 1, 1, "", "UniversalSet"], [215, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[215, 2, 1, "", "as_relational"], [215, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[215, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[215, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[215, 2, 1, "", "Lopen"], [215, 2, 1, "", "Ropen"], [215, 2, 1, "", "as_relational"], [215, 4, 1, "", "end"], [215, 4, 1, "", "is_left_unbounded"], [215, 4, 1, "", "is_right_unbounded"], [215, 4, 1, "", "left_open"], [215, 2, 1, "", "open"], [215, 4, 1, "", "right_open"], [215, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[215, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[215, 4, 1, "", "boundary"], [215, 4, 1, "", "closure"], [215, 2, 1, "", "complement"], [215, 2, 1, "", "contains"], [215, 4, 1, "", "inf"], [215, 4, 1, "", "interior"], [215, 2, 1, "", "intersect"], [215, 2, 1, "", "intersection"], [215, 4, 1, "", "is_closed"], [215, 2, 1, "", "is_disjoint"], [215, 4, 1, "", "is_open"], [215, 2, 1, "", "is_proper_subset"], [215, 2, 1, "", "is_proper_superset"], [215, 2, 1, "", "is_subset"], [215, 2, 1, "", "is_superset"], [215, 2, 1, "", "isdisjoint"], [215, 2, 1, "", "issubset"], [215, 2, 1, "", "issuperset"], [215, 4, 1, "", "kind"], [215, 4, 1, "", "measure"], [215, 2, 1, "", "powerset"], [215, 4, 1, "", "sup"], [215, 2, 1, "", "symmetric_difference"], [215, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[215, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[215, 2, 1, "", "as_relational"]], "sympy.simplify": [[219, 0, 0, "-", "combsimp"], [219, 0, 0, "-", "cse_main"], [219, 0, 0, "-", "epathtools"], [219, 0, 0, "-", "hyperexpand"], [217, 0, 0, "-", "hyperexpand_doc"], [219, 0, 0, "-", "powsimp"], [219, 0, 0, "-", "radsimp"], [219, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [219, 0, 0, "-", "sqrtdenest"], [219, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[219, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[219, 3, 1, "", "cse"], [219, 3, 1, "", "opt_cse"], [219, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[219, 1, 1, "", "EPath"], [219, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[219, 2, 1, "", "apply"], [219, 2, 1, "", "select"]], "sympy.simplify.fu": [[216, 3, 1, "", "TR0"], [216, 3, 1, "", "TR1"], [216, 3, 1, "", "TR10"], [216, 3, 1, "", "TR10i"], [216, 3, 1, "", "TR11"], [216, 3, 1, "", "TR111"], [216, 3, 1, "", "TR12"], [216, 3, 1, "", "TR12i"], [216, 3, 1, "", "TR13"], [216, 3, 1, "", "TR14"], [216, 3, 1, "", "TR15"], [216, 3, 1, "", "TR16"], [216, 3, 1, "", "TR2"], [216, 3, 1, "", "TR22"], [216, 3, 1, "", "TR2i"], [216, 3, 1, "", "TR3"], [216, 3, 1, "", "TR4"], [216, 3, 1, "", "TR5"], [216, 3, 1, "", "TR6"], [216, 3, 1, "", "TR7"], [216, 3, 1, "", "TR8"], [216, 3, 1, "", "TR9"], [216, 3, 1, "", "TRmorrie"], [216, 3, 1, "", "TRpower"], [216, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[219, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[219, 3, 1, "", "powdenest"], [219, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[219, 3, 1, "", "collect"], [219, 3, 1, "", "collect_const"], [219, 3, 1, "", "collect_sqrt"], [219, 3, 1, "", "fraction"], [219, 3, 1, "", "rad_rationalize"], [219, 3, 1, "", "radsimp"], [219, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[219, 3, 1, "", "ratsimp"], [219, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[219, 3, 1, "", "besselsimp"], [219, 3, 1, "", "hypersimilar"], [219, 3, 1, "", "hypersimp"], [219, 3, 1, "", "kroneckersimp"], [219, 3, 1, "", "logcombine"], [219, 3, 1, "", "nsimplify"], [219, 3, 1, "", "nthroot"], [219, 3, 1, "", "posify"], [219, 3, 1, "", "separatevars"], [219, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[219, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[219, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[225, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[220, 1, 1, "", "BinaryQuadratic"], [220, 1, 1, "", "CubicThue"], [220, 1, 1, "", "DiophantineEquationType"], [220, 1, 1, "", "DiophantineSolutionSet"], [220, 1, 1, "", "GeneralPythagorean"], [220, 1, 1, "", "GeneralSumOfEvenPowers"], [220, 1, 1, "", "GeneralSumOfSquares"], [220, 1, 1, "", "HomogeneousGeneralQuadratic"], [220, 1, 1, "", "HomogeneousTernaryQuadratic"], [220, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [220, 1, 1, "", "InhomogeneousGeneralQuadratic"], [220, 1, 1, "", "InhomogeneousTernaryQuadratic"], [220, 1, 1, "", "Linear"], [220, 3, 1, "", "PQa"], [220, 1, 1, "", "Univariate"], [220, 3, 1, "", "base_solution_linear"], [220, 3, 1, "", "classify_diop"], [220, 3, 1, "", "cornacchia"], [220, 3, 1, "", "descent"], [220, 3, 1, "", "diop_DN"], [220, 3, 1, "", "diop_bf_DN"], [220, 3, 1, "", "diop_general_pythagorean"], [220, 3, 1, "", "diop_general_sum_of_even_powers"], [220, 3, 1, "", "diop_general_sum_of_squares"], [220, 3, 1, "", "diop_linear"], [220, 3, 1, "", "diop_quadratic"], [220, 3, 1, "", "diop_solve"], [220, 3, 1, "", "diop_ternary_quadratic"], [220, 3, 1, "", "diop_ternary_quadratic_normal"], [220, 3, 1, "", "diophantine"], [220, 3, 1, "", "divisible"], [220, 3, 1, "", "equivalent"], [220, 3, 1, "", "find_DN"], [220, 3, 1, "", "gaussian_reduce"], [220, 3, 1, "", "holzer"], [220, 3, 1, "", "ldescent"], [220, 3, 1, "", "merge_solution"], [220, 3, 1, "", "parametrize_ternary_quadratic"], [220, 3, 1, "", "partition"], [220, 3, 1, "", "power_representation"], [220, 3, 1, "", "prime_as_sum_of_two_squares"], [220, 3, 1, "", "reconstruct"], [220, 3, 1, "", "sqf_normal"], [220, 3, 1, "", "square_factor"], [220, 3, 1, "", "sum_of_four_squares"], [220, 3, 1, "", "sum_of_powers"], [220, 3, 1, "", "sum_of_squares"], [220, 3, 1, "", "sum_of_three_squares"], [220, 3, 1, "", "transformation_to_DN"], [220, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[220, 2, 1, "", "matches"]], "sympy.solvers": [[222, 0, 0, "-", "inequalities"], [223, 0, 0, "-", "ode"], [224, 0, 0, "-", "pde"], [225, 0, 0, "-", "recurr"], [226, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[222, 3, 1, "", "reduce_abs_inequalities"], [222, 3, 1, "", "reduce_abs_inequality"], [222, 3, 1, "", "reduce_inequalities"], [222, 3, 1, "", "reduce_rational_inequalities"], [222, 3, 1, "", "solve_poly_inequalities"], [222, 3, 1, "", "solve_poly_inequality"], [222, 3, 1, "", "solve_rational_inequalities"], [222, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[223, 6, 1, "", "allhints"], [223, 3, 1, "", "checkinfsol"], [223, 3, 1, "", "checkodesol"], [223, 3, 1, "", "classify_ode"], [223, 3, 1, "", "constantsimp"], [223, 3, 1, "", "dsolve"], [223, 3, 1, "", "homogeneous_order"], [223, 3, 1, "", "infinitesimals"], [223, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[223, 3, 1, "", "lie_heuristic_abaco1_product"], [223, 3, 1, "", "lie_heuristic_abaco1_simple"], [223, 3, 1, "", "lie_heuristic_abaco2_similar"], [223, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [223, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [223, 3, 1, "", "lie_heuristic_bivariate"], [223, 3, 1, "", "lie_heuristic_chi"], [223, 3, 1, "", "lie_heuristic_function_sum"], [223, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[223, 3, 1, "", "_handle_Integral"], [223, 3, 1, "", "_linear_2eq_order1_type6"], [223, 3, 1, "", "_linear_2eq_order1_type7"], [223, 3, 1, "", "_nonlinear_2eq_order1_type1"], [223, 3, 1, "", "_nonlinear_2eq_order1_type2"], [223, 3, 1, "", "_nonlinear_2eq_order1_type3"], [223, 3, 1, "", "_nonlinear_2eq_order1_type4"], [223, 3, 1, "", "_nonlinear_2eq_order1_type5"], [223, 3, 1, "", "_nonlinear_3eq_order1_type1"], [223, 3, 1, "", "_nonlinear_3eq_order1_type2"], [223, 3, 1, "", "_nonlinear_3eq_order1_type3"], [223, 3, 1, "", "_nonlinear_3eq_order1_type4"], [223, 3, 1, "", "_nonlinear_3eq_order1_type5"], [223, 3, 1, "", "constant_renumber"], [223, 3, 1, "", "ode_1st_power_series"], [223, 3, 1, "", "ode_2nd_power_series_ordinary"], [223, 3, 1, "", "ode_2nd_power_series_regular"], [223, 3, 1, "", "ode_sol_simplicity"], [223, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[223, 3, 1, "", "compute_m_ybar"], [223, 3, 1, "", "construct_c"], [223, 3, 1, "", "construct_d"], [223, 3, 1, "", "get_gen_sol_from_part_sol"], [223, 3, 1, "", "rational_laurent_series"], [223, 3, 1, "", "remove_redundant_sols"], [223, 3, 1, "", "riccati_inverse_normal"], [223, 3, 1, "", "riccati_normal"], [223, 3, 1, "", "riccati_reduced"], [223, 3, 1, "", "solve_aux_eq"], [223, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[223, 1, 1, "", "AlmostLinear"], [223, 1, 1, "", "Bernoulli"], [223, 1, 1, "", "Factorable"], [223, 1, 1, "", "FirstExact"], [223, 1, 1, "", "FirstLinear"], [223, 1, 1, "", "HomogeneousCoeffBest"], [223, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [223, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [223, 1, 1, "", "LieGroup"], [223, 1, 1, "", "LinearCoefficients"], [223, 1, 1, "", "Liouville"], [223, 1, 1, "", "NthAlgebraic"], [223, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [223, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [223, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [223, 1, 1, "", "NthLinearEulerEqHomogeneous"], [223, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [223, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [223, 1, 1, "", "NthOrderReducible"], [223, 1, 1, "", "RationalRiccati"], [223, 1, 1, "", "RiccatiSpecial"], [223, 1, 1, "", "SecondHypergeometric"], [223, 1, 1, "", "SecondLinearAiry"], [223, 1, 1, "", "SecondLinearBessel"], [223, 1, 1, "", "Separable"], [223, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[223, 3, 1, "", "canonical_odes"], [223, 3, 1, "", "dsolve_system"], [223, 3, 1, "", "linear_ode_to_matrix"], [223, 3, 1, "", "linodesolve"], [223, 3, 1, "", "linodesolve_type"], [223, 3, 1, "", "matrix_exp"], [223, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[224, 3, 1, "", "checkpdesol"], [224, 3, 1, "", "classify_pde"], [224, 3, 1, "", "pde_1st_linear_constant_coeff"], [224, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [224, 3, 1, "", "pde_1st_linear_variable_coeff"], [224, 3, 1, "", "pde_separate"], [224, 3, 1, "", "pde_separate_add"], [224, 3, 1, "", "pde_separate_mul"], [224, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[225, 3, 1, "", "solve_poly_system"], [225, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[225, 3, 1, "", "rsolve"], [225, 3, 1, "", "rsolve_hyper"], [225, 3, 1, "", "rsolve_poly"], [225, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[225, 3, 1, "", "checksol"], [225, 3, 1, "", "nsolve"], [225, 3, 1, "", "solve"], [225, 3, 1, "", "solve_linear"], [225, 3, 1, "", "solve_linear_system"], [225, 3, 1, "", "solve_linear_system_LU"], [225, 3, 1, "", "solve_undetermined_coeffs"], [225, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[226, 3, 1, "", "_is_exponential"], [226, 3, 1, "", "_is_logarithmic"], [226, 3, 1, "", "_solve_exponential"], [226, 3, 1, "", "_solve_logarithm"], [226, 3, 1, "", "_transolve"], [226, 3, 1, "", "domain_check"], [226, 3, 1, "", "invert_complex"], [226, 3, 1, "", "invert_real"], [226, 3, 1, "", "linear_eq_to_matrix"], [226, 3, 1, "", "linsolve"], [226, 3, 1, "", "nonlinsolve"], [226, 3, 1, "", "solveset"], [226, 3, 1, "", "solveset_complex"], [226, 3, 1, "", "solveset_real"], [226, 3, 1, "", "solvify"]], "sympy.stats": [[227, 3, 1, "", "Arcsin"], [227, 3, 1, "", "Benini"], [227, 3, 1, "", "Bernoulli"], [227, 1, 1, "", "BernoulliProcess"], [227, 3, 1, "", "Beta"], [227, 3, 1, "", "BetaBinomial"], [227, 3, 1, "", "BetaNoncentral"], [227, 3, 1, "", "BetaPrime"], [227, 3, 1, "", "Binomial"], [227, 3, 1, "", "BoundedPareto"], [227, 3, 1, "", "Cauchy"], [227, 1, 1, "", "CentralMoment"], [227, 3, 1, "", "Chi"], [227, 3, 1, "", "ChiNoncentral"], [227, 3, 1, "", "ChiSquared"], [227, 3, 1, "", "Coin"], [227, 1, 1, "", "ContinuousMarkovChain"], [227, 3, 1, "", "ContinuousRV"], [227, 1, 1, "", "Covariance"], [227, 1, 1, "", "CrossCovarianceMatrix"], [227, 3, 1, "", "Dagum"], [227, 3, 1, "", "Die"], [227, 1, 1, "", "DiscreteMarkovChain"], [227, 3, 1, "", "DiscreteUniform"], [227, 3, 1, "", "E"], [227, 3, 1, "", "Erlang"], [227, 3, 1, "", "ExGaussian"], [227, 1, 1, "", "Expectation"], [227, 1, 1, "", "ExpectationMatrix"], [227, 3, 1, "", "Exponential"], [227, 3, 1, "", "FDistribution"], [227, 3, 1, "", "FiniteRV"], [227, 3, 1, "", "FisherZ"], [227, 3, 1, "", "Frechet"], [227, 3, 1, "", "Gamma"], [227, 3, 1, "", "GammaInverse"], [227, 1, 1, "", "GammaProcess"], [227, 3, 1, "", "GeneralizedMultivariateLogGamma"], [227, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [227, 3, 1, "", "Geometric"], [227, 3, 1, "", "Gompertz"], [227, 3, 1, "", "Gumbel"], [227, 3, 1, "", "Hermite"], [227, 3, 1, "", "Hypergeometric"], [227, 3, 1, "", "JointRV"], [227, 3, 1, "", "Kumaraswamy"], [227, 3, 1, "", "Laplace"], [227, 3, 1, "", "Levy"], [227, 3, 1, "", "LogLogistic"], [227, 3, 1, "", "LogNormal"], [227, 3, 1, "", "Logarithmic"], [227, 3, 1, "", "Logistic"], [227, 3, 1, "", "Lomax"], [227, 3, 1, "", "MatrixGamma"], [227, 3, 1, "", "MatrixNormal"], [227, 3, 1, "", "Maxwell"], [227, 1, 1, "", "Moment"], [227, 3, 1, "", "Moyal"], [227, 3, 1, "", "Multinomial"], [227, 3, 1, "", "MultivariateBeta"], [227, 3, 1, "", "MultivariateEwens"], [227, 3, 1, "", "MultivariateLaplace"], [227, 3, 1, "", "MultivariateNormal"], [227, 3, 1, "", "MultivariateT"], [227, 3, 1, "", "Nakagami"], [227, 3, 1, "", "NegativeBinomial"], [227, 3, 1, "", "NegativeMultinomial"], [227, 3, 1, "", "Normal"], [227, 3, 1, "", "NormalGamma"], [227, 3, 1, "", "P"], [227, 3, 1, "", "Pareto"], [227, 3, 1, "", "Poisson"], [227, 1, 1, "", "PoissonProcess"], [227, 3, 1, "", "PowerFunction"], [227, 1, 1, "", "Probability"], [227, 3, 1, "", "QuadraticU"], [227, 3, 1, "", "Rademacher"], [227, 3, 1, "", "RaisedCosine"], [227, 3, 1, "", "Rayleigh"], [227, 3, 1, "", "Reciprocal"], [227, 3, 1, "", "ShiftedGompertz"], [227, 3, 1, "", "Skellam"], [227, 3, 1, "", "StudentT"], [227, 3, 1, "", "Trapezoidal"], [227, 3, 1, "", "Triangular"], [227, 3, 1, "", "Uniform"], [227, 3, 1, "", "UniformSum"], [227, 1, 1, "", "Variance"], [227, 1, 1, "", "VarianceMatrix"], [227, 3, 1, "", "VonMises"], [227, 3, 1, "", "Wald"], [227, 3, 1, "", "Weibull"], [227, 1, 1, "", "WienerProcess"], [227, 3, 1, "", "WignerSemicircle"], [227, 3, 1, "", "Wishart"], [227, 3, 1, "", "YuleSimon"], [227, 3, 1, "", "Zeta"], [227, 3, 1, "", "cmoment"], [227, 3, 1, "", "correlation"], [227, 3, 1, "", "coskewness"], [227, 3, 1, "", "covariance"], [227, 0, 0, "-", "crv"], [227, 0, 0, "-", "crv_types"], [227, 3, 1, "", "density"], [227, 3, 1, "", "entropy"], [227, 3, 1, "", "factorial_moment"], [227, 0, 0, "-", "frv"], [227, 0, 0, "-", "frv_types"], [227, 3, 1, "", "given"], [227, 3, 1, "", "kurtosis"], [227, 3, 1, "", "marginal_distribution"], [227, 3, 1, "", "median"], [227, 3, 1, "", "moment"], [227, 3, 1, "", "quantile"], [227, 0, 0, "-", "rv"], [227, 3, 1, "", "sample"], [227, 3, 1, "", "sample_iter"], [227, 3, 1, "", "skewness"], [227, 3, 1, "", "std"], [227, 3, 1, "", "variance"], [227, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[227, 2, 1, "", "expectation"], [227, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[227, 2, 1, "", "absorbing_probabilities"], [227, 2, 1, "", "canonical_form"], [227, 2, 1, "", "communication_classes"], [227, 2, 1, "", "decompose"], [227, 2, 1, "", "fixed_row_vector"], [227, 2, 1, "", "fundamental_matrix"], [227, 4, 1, "", "limiting_distribution"], [227, 2, 1, "", "sample"], [227, 2, 1, "", "stationary_distribution"], [227, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[227, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[227, 1, 1, "", "ContinuousDomain"], [227, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[227, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[227, 3, 1, "", "Die"], [227, 3, 1, "", "Normal"]], "sympy.stats.frv": [[227, 1, 1, "", "FiniteDomain"], [227, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[227, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[227, 1, 1, "", "ConditionalDomain"], [227, 1, 1, "", "PSpace"], [227, 1, 1, "", "ProductDomain"], [227, 1, 1, "", "ProductPSpace"], [227, 1, 1, "", "RandomDomain"], [227, 1, 1, "", "RandomSymbol"], [227, 1, 1, "", "SingleDomain"], [227, 1, 1, "", "SinglePSpace"], [227, 3, 1, "", "pspace"], [227, 3, 1, "", "random_symbols"], [227, 3, 1, "", "rs_swap"], [227, 3, 1, "", "sampling_E"], [227, 3, 1, "", "sampling_P"], [227, 3, 1, "", "sampling_density"]], "sympy.tensor": [[228, 0, 0, "-", "array"], [231, 0, 0, "-", "index_methods"], [232, 0, 0, "-", "indexed"], [233, 0, 0, "-", "tensor"], [234, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[228, 1, 1, "", "ImmutableDenseNDimArray"], [228, 1, 1, "", "ImmutableSparseNDimArray"], [228, 1, 1, "", "MutableDenseNDimArray"], [228, 1, 1, "", "MutableSparseNDimArray"], [228, 3, 1, "", "derive_by_array"], [229, 0, 0, "-", "expressions"], [228, 3, 1, "", "permutedims"], [228, 3, 1, "", "tensorcontraction"], [228, 3, 1, "", "tensordiagonal"], [228, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[231, 3, 1, "", "get_contraction_structure"], [231, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[232, 1, 1, "", "Idx"], [232, 1, 1, "", "Indexed"], [232, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[232, 4, 1, "", "label"], [232, 4, 1, "", "lower"], [232, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[232, 4, 1, "", "base"], [232, 4, 1, "", "indices"], [232, 4, 1, "", "ranges"], [232, 4, 1, "", "rank"], [232, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[232, 4, 1, "", "label"], [232, 4, 1, "", "offset"], [232, 4, 1, "", "shape"], [232, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[233, 1, 1, "", "TensAdd"], [233, 1, 1, "", "TensExpr"], [233, 1, 1, "", "TensMul"], [233, 1, 1, "", "TensorHead"], [233, 1, 1, "", "TensorIndex"], [233, 1, 1, "", "TensorIndexType"], [233, 1, 1, "", "TensorSymmetry"], [233, 1, 1, "", "TensorType"], [233, 1, 1, "", "_TensorManager"], [233, 3, 1, "", "canon_bp"], [233, 3, 1, "", "riemann_cyclic"], [233, 3, 1, "", "riemann_cyclic_replace"], [233, 3, 1, "", "tensor_heads"], [233, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[233, 2, 1, "", "canon_bp"], [233, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[233, 2, 1, "", "get_matrix"], [233, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[233, 2, 1, "", "canon_bp"], [233, 2, 1, "", "contract_metric"], [233, 2, 1, "", "get_free_indices"], [233, 2, 1, "", "get_indices"], [233, 2, 1, "", "perm2tensor"], [233, 2, 1, "", "sorted_components"], [233, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[233, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[233, 2, 1, "", "direct_product"], [233, 2, 1, "", "fully_symmetric"], [233, 2, 1, "", "no_symmetry"], [233, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[233, 2, 1, "", "clear"], [233, 2, 1, "", "comm_i2symbol"], [233, 2, 1, "", "comm_symbols2i"], [233, 2, 1, "", "get_comm"], [233, 2, 1, "", "set_comm"], [233, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[234, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[236, 0, 0, "-", "pytest"], [237, 0, 0, "-", "randtest"], [238, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[236, 3, 1, "", "SKIP"], [236, 3, 1, "", "nocache_fail"], [236, 3, 1, "", "raises"], [236, 3, 1, "", "warns"], [236, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[238, 1, 1, "", "PyTestReporter"], [238, 1, 1, "", "Reporter"], [238, 1, 1, "", "SymPyDocTestFinder"], [238, 1, 1, "", "SymPyDocTestRunner"], [238, 1, 1, "", "SymPyOutputChecker"], [238, 1, 1, "", "SymPyTestResults"], [238, 3, 1, "", "convert_to_native_paths"], [238, 3, 1, "", "doctest"], [238, 3, 1, "", "get_sympy_dir"], [238, 3, 1, "", "raise_on_deprecated"], [238, 3, 1, "", "run_all_tests"], [238, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [238, 3, 1, "", "split_list"], [238, 3, 1, "", "sympytestfile"], [238, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[238, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[238, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[238, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[238, 5, 1, "", "attempted"], [238, 5, 1, "", "failed"]], "sympy.utilities": [[239, 0, 0, "-", "autowrap"], [240, 0, 0, "-", "codegen"], [241, 0, 0, "-", "decorator"], [242, 0, 0, "-", "enumerative"], [243, 0, 0, "-", "exceptions"], [245, 0, 0, "-", "iterables"], [246, 0, 0, "-", "lambdify"], [247, 0, 0, "-", "memoization"], [248, 0, 0, "-", "misc"], [249, 0, 0, "-", "pkgdata"], [250, 0, 0, "-", "source"], [251, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[239, 1, 1, "", "CodeWrapper"], [239, 1, 1, "", "CythonCodeWrapper"], [239, 1, 1, "", "DummyWrapper"], [239, 1, 1, "", "F2PyCodeWrapper"], [239, 1, 1, "", "UfuncifyCodeWrapper"], [239, 3, 1, "", "autowrap"], [239, 3, 1, "", "binary_function"], [239, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[239, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[239, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[240, 1, 1, "", "Argument"], [240, 1, 1, "", "CCodeGen"], [240, 1, 1, "", "CodeGen"], [240, 1, 1, "", "DataType"], [240, 1, 1, "", "FCodeGen"], [240, 1, 1, "", "JuliaCodeGen"], [240, 1, 1, "", "OctaveCodeGen"], [240, 1, 1, "", "OutputArgument"], [240, 1, 1, "", "Result"], [240, 1, 1, "", "Routine"], [240, 1, 1, "", "RustCodeGen"], [240, 3, 1, "", "codegen"], [240, 3, 1, "", "get_default_datatype"], [240, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[240, 2, 1, "", "dump_c"], [240, 2, 1, "", "dump_h"], [240, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[240, 2, 1, "", "dump_code"], [240, 2, 1, "", "routine"], [240, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[240, 2, 1, "", "dump_f95"], [240, 2, 1, "", "dump_h"], [240, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[240, 2, 1, "", "dump_jl"], [240, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[240, 2, 1, "", "dump_m"], [240, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[240, 4, 1, "", "result_variables"], [240, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[240, 2, 1, "", "dump_rs"], [240, 2, 1, "", "get_prototype"], [240, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[241, 3, 1, "", "conserve_mpmath_dps"], [241, 3, 1, "", "deprecated"], [241, 3, 1, "", "doctest_depends_on"], [241, 3, 1, "", "memoize_property"], [241, 1, 1, "", "no_attrs_in_subclass"], [241, 3, 1, "", "public"], [241, 3, 1, "", "threaded"], [241, 3, 1, "", "threaded_factory"], [241, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[242, 1, 1, "", "MultisetPartitionTraverser"], [242, 3, 1, "", "factoring_visitor"], [242, 3, 1, "", "list_visitor"], [242, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[242, 2, 1, "", "count_partitions"], [242, 2, 1, "", "enum_all"], [242, 2, 1, "", "enum_large"], [242, 2, 1, "", "enum_range"], [242, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[243, 7, 1, "", "SymPyDeprecationWarning"], [243, 3, 1, "", "ignore_warnings"], [243, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[245, 1, 1, "", "NotIterable"], [245, 3, 1, "", "binary_partitions"], [245, 3, 1, "", "bracelets"], [245, 3, 1, "", "capture"], [245, 3, 1, "", "common_prefix"], [245, 3, 1, "", "common_suffix"], [245, 3, 1, "", "connected_components"], [245, 3, 1, "", "dict_merge"], [245, 3, 1, "", "filter_symbols"], [245, 3, 1, "", "flatten"], [245, 3, 1, "", "generate_bell"], [245, 3, 1, "", "generate_derangements"], [245, 3, 1, "", "generate_involutions"], [245, 3, 1, "", "generate_oriented_forest"], [245, 3, 1, "", "group"], [245, 3, 1, "", "has_dups"], [245, 3, 1, "", "has_variety"], [245, 3, 1, "", "ibin"], [245, 3, 1, "", "iproduct"], [245, 3, 1, "", "is_palindromic"], [245, 3, 1, "", "is_sequence"], [245, 3, 1, "", "iterable"], [245, 3, 1, "", "kbins"], [245, 3, 1, "", "least_rotation"], [245, 3, 1, "", "minlex"], [245, 3, 1, "", "multiset"], [245, 3, 1, "", "multiset_combinations"], [245, 3, 1, "", "multiset_derangements"], [245, 3, 1, "", "multiset_partitions"], [245, 3, 1, "", "multiset_permutations"], [245, 3, 1, "", "necklaces"], [245, 3, 1, "", "numbered_symbols"], [245, 3, 1, "", "ordered_partitions"], [245, 3, 1, "", "partitions"], [245, 3, 1, "", "permute_signs"], [245, 3, 1, "", "postfixes"], [245, 3, 1, "", "prefixes"], [245, 3, 1, "", "random_derangement"], [245, 3, 1, "", "reshape"], [245, 3, 1, "", "rotate_left"], [245, 3, 1, "", "rotate_right"], [245, 3, 1, "", "rotations"], [245, 3, 1, "", "roundrobin"], [245, 3, 1, "", "runs"], [245, 3, 1, "", "sift"], [245, 3, 1, "", "signed_permutations"], [245, 3, 1, "", "strongly_connected_components"], [245, 3, 1, "", "subsets"], [245, 3, 1, "", "take"], [245, 3, 1, "", "topological_sort"], [245, 3, 1, "", "unflatten"], [245, 3, 1, "", "uniq"], [245, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[246, 3, 1, "", "implemented_function"], [246, 3, 1, "", "lambdastr"], [246, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[247, 3, 1, "", "assoc_recurrence_memo"], [247, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[248, 3, 1, "", "as_int"], [248, 3, 1, "", "debug"], [248, 3, 1, "", "debug_decorator"], [248, 3, 1, "", "filldedent"], [248, 3, 1, "", "find_executable"], [248, 3, 1, "", "func_name"], [248, 3, 1, "", "ordinal"], [248, 3, 1, "", "rawlines"], [248, 3, 1, "", "replace"], [248, 3, 1, "", "strlines"], [248, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[249, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[250, 3, 1, "", "get_class"], [250, 3, 1, "", "get_mod_func"], [250, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[251, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[252, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "create_new"], [252, 2, 1, "", "locate_new"], [252, 2, 1, "", "orient_new"], [252, 2, 1, "", "orient_new_axis"], [252, 2, 1, "", "orient_new_body"], [252, 2, 1, "", "orient_new_quaternion"], [252, 2, 1, "", "orient_new_space"], [252, 2, 1, "", "position_wrt"], [252, 2, 1, "", "rotation_matrix"], [252, 2, 1, "", "scalar_map"]], "sympy.vector": [[255, 3, 1, "", "curl"], [255, 3, 1, "", "divergence"], [255, 3, 1, "", "express"], [255, 3, 1, "", "gradient"], [255, 3, 1, "", "is_conservative"], [255, 3, 1, "", "is_solenoidal"], [255, 3, 1, "", "matrix_to_vector"], [255, 3, 1, "", "scalar_potential"], [255, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[252, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[252, 2, 1, "", "cross"], [252, 2, 1, "", "dot"], [252, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[252, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[252, 4, 1, "", "components"], [252, 2, 1, "", "cross"], [252, 2, 1, "", "dot"], [252, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[252, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[252, 2, 1, "", "multiplicity"], [252, 2, 1, "", "rational_parametrization"], [252, 2, 1, "", "regular_point"], [252, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[252, 1, 1, "", "ParametricIntegral"], [255, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[254, 1, 1, "", "AxisOrienter"], [254, 1, 1, "", "BodyOrienter"], [254, 1, 1, "", "Orienter"], [254, 1, 1, "", "QuaternionOrienter"], [254, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[254, 2, 1, "", "__init__"], [254, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[254, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[254, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[254, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[254, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[252, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[252, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[252, 4, 1, "", "components"], [252, 2, 1, "", "cross"], [252, 2, 1, "", "dot"], [252, 2, 1, "", "magnitude"], [252, 2, 1, "", "normalize"], [252, 2, 1, "", "outer"], [252, 2, 1, "", "projection"], [252, 2, 1, "", "separate"], [252, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 23, 25, 27, 29, 30, 40, 81, 100, 139, 188, 197, 252, 255, 256, 259, 273, 275, 278], "build": [1, 3], "document": [1, 3, 4, 6, 7, 29], "requir": [1, 4], "depend": [1, 3, 136, 197, 257], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 193], "10": [1, 10, 102], "doc": [1, 198], "local": 1, "instal": [1, 29, 30, 100, 282], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 25, 27, 28, 200], "recommend": [3, 7], "interact": [3, 86, 193], "us": [3, 7, 10, 16, 23, 24, 25, 26, 27, 28, 40, 61, 82, 83, 99, 102, 131, 136, 137, 191, 193, 204, 226, 257], "print": [3, 10, 20, 40, 86, 112, 120, 181, 187, 207, 283], "pars": [3, 28, 100], "logic": [3, 19, 88, 263, 266], "plot": [3, 10, 106, 152, 193], "lambdifi": [3, 10, 99, 246, 273], "code": [3, 4, 5, 7, 10, 40, 42, 112, 191, 207, 250, 263, 265], "gener": [3, 6, 7, 40, 48, 50, 197, 202, 226, 258, 263, 265], "autowrap": [3, 40, 239], "printer": [3, 40, 207, 283], "test": [3, 5, 10, 55, 88, 206, 235, 237, 238, 280], "onli": [3, 23, 226], "statist": 3, "symengin": 3, "backend": [3, 193], "experiment": [3, 100], "rubi": 3, "integr": [3, 10, 62, 66, 80, 82, 83, 84, 85, 112, 195, 202, 262, 274], "sage": 3, "develop": [3, 5, 58], "get": [3, 5, 12], "sourc": [3, 10, 12, 250], "run": [3, 5, 30, 238], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 136, 196, 197, 226, 278, 281], "i": [4, 12, 26, 83, 99, 136, 196, 207, 226, 278], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 28, 83], "doe": [4, 12, 226], "public": 4, "api": [4, 29, 79, 83, 85, 108, 115, 185, 226, 239, 240, 253, 263], "Not": [4, 23, 24, 25, 26, 27, 28], "The": [4, 10, 18, 20, 41, 48, 83, 136, 177, 189, 202, 214, 217, 258, 259, 278], "purpos": 4, "technic": 4, "possibl": [4, 25, 280], "how": [4, 21, 29, 83, 191, 226], "long": 4, "should": [4, 99], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 58, 70, 136, 214, 216, 276, 285], "entri": [4, 94], "environ": 5, "setup": 5, "git": [5, 30], "virtual": 5, "docstr": [6, 7, 101, 104, 113, 114, 116, 117, 118, 119, 120, 121, 183, 184, 186, 187, 252, 254, 255], "style": [6, 7], "guid": [6, 7, 21, 29, 132, 189, 260], "guidelin": [6, 7], "format": [6, 7, 10, 28], "section": 6, "1": [6, 10, 83, 102, 122, 136, 148], "singl": [6, 12, 14, 23], "sentenc": 6, "summari": 6, "2": [6, 10, 83, 102, 122, 136], "explan": [6, 13, 29], "3": [6, 10, 85, 102, 122, 173], "exampl": [6, 20, 23, 24, 26, 27, 31, 58, 70, 82, 85, 98, 102, 109, 123, 136, 140, 144, 175, 177, 191, 206, 207, 214, 217, 227, 228, 229, 232, 258, 278, 284], "4": [6, 10, 102], "paramet": [6, 24, 217, 226], "5": [6, 10, 102], "see": [6, 58, 245, 258], "also": [6, 58, 245], "6": [6, 10, 102], "refer": [6, 18, 29, 32, 39, 57, 58, 60, 70, 76, 83, 85, 91, 92, 94, 96, 98, 100, 115, 138, 144, 147, 177, 189, 191, 192, 193, 194, 198, 200, 202, 203, 204, 214, 216, 217, 220, 226, 239, 240, 260, 263], "sampl": [6, 10], "class": [6, 15, 39, 40, 57, 60, 92, 94, 96, 98, 136, 182, 193, 202, 207, 220, 228, 252, 254], "ar": [6, 23, 191, 197, 226], "mathemat": [6, 12, 139], "function": [6, 10, 12, 20, 23, 26, 28, 40, 48, 57, 58, 64, 65, 66, 76, 77, 80, 81, 83, 88, 94, 98, 100, 102, 112, 137, 159, 162, 183, 184, 188, 193, 195, 197, 198, 203, 206, 207, 217, 220, 223, 224, 228, 255, 259, 283, 284], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 23, 40, 66, 183, 226, 227], "narr": 7, "markdown": 7, "prefer": [7, 28], "math": [7, 40], "latex": [7, 100, 283], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 29, 204], "make": [9, 25, 28], "list": [10, 12, 14, 23], "activ": 10, "silenc": 10, "warn": [10, 243], "version": 10, "12": 10, "new": [10, 257], "joint": [10, 116, 133, 227], "coordin": [10, 112, 126, 136, 193, 256, 257, 259, 261], "intermedi": 10, "frame": [10, 191], "attach": 10, "point": [10, 20, 62, 73, 112, 181, 190, 256], "argument": [10, 12, 226], "11": [10, 102], "mathematica": [10, 207], "parser": [10, 122], "redund": 10, "static": 10, "method": [10, 16, 20, 30, 117, 126, 129, 130, 131, 134, 135, 136, 207, 224, 226, 231, 257, 280], "carmichael": 10, "check": [10, 183], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 139, 226], "travers": [10, 58], "have": [10, 25, 27, 206], "been": 10, "move": [10, 217], "core": [10, 58, 91], "trace": 10, "compat": [10, 229], "submodul": [10, 70], "9": [10, 102], "expr_free_symbol": 10, "stat": [10, 227], "numsampl": 10, "n": [10, 228, 229], "poli": [10, 196, 197, 198, 205], "solver": [10, 205, 221, 222, 223, 225, 226, 285], "rawmatrix": 10, "non": 10, "expr": [10, 58], "object": [10, 15, 232], "matrix": [10, 36, 91, 94, 95, 136, 227, 280], "get_seg": 10, "attribut": [10, 41, 48], "mdft": 10, "physic": [10, 109, 112, 123, 133, 134, 135, 136, 137, 138, 139, 140, 179, 181, 185, 188, 189, 190, 191, 263, 269], "matric": [10, 16, 89, 90, 91, 92, 93, 94, 96, 109, 111, 229, 263, 267, 280], "privat": 10, "sparsematrix": [10, 96], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 102], "theanocod": 10, "assumpt": [10, 15, 18, 20, 35, 58], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 23, 58, 66, 88, 188, 191, 259], "7": [10, 102], "call": [10, 23, 28], "stochasticprocess": 10, "distribut": [10, 200, 227], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 40, 55, 56, 75, 94, 145, 202, 225, 244, 251, 263, 271], "misc": [10, 35], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 283], "pretti": [10, 207, 283], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 25, 27, 36, 70, 191, 215, 226, 283], "oper": [10, 12, 80, 94, 150, 159, 161, 162, 183, 188, 191, 217, 228, 234, 256, 258, 259, 273, 280], "longer": 10, "accept": 10, "arg": [10, 279], "variou": [10, 206], "randtest": 10, "mix": 10, "polynomi": [10, 66, 80, 195, 197, 198, 199, 200, 202, 203, 204, 206, 225, 284], "express": [10, 12, 24, 25, 26, 40, 70, 77, 80, 88, 91, 100, 114, 197, 206, 229, 257, 273, 279], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 45], "permut": [10, 49, 50], "string": [10, 18, 28, 273], "fallback": 10, "sympifi": [10, 58], "creat": [10, 12, 20, 26, 94], "an": [10, 25, 26, 70, 122, 177, 217, 226, 279], "indefinit": 10, "eq": [10, 25], "tensor": [10, 54, 66, 171, 230, 233, 234], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 176, 177, 178, 180], "quantiti": [10, 175, 177, 179, 257], "is_emptyset": 10, "productset": 10, "iter": [10, 215, 245], "set_potential_energi": 10, "mechan": [10, 18, 103, 112, 115, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 159, 227], "condit": [10, 83, 215], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 194], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 23, 203], "lambda": 10, "evalu": [10, 12, 20, 62, 80, 139, 279], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 280], "col": 10, "jordan_block": 10, "dimens": [10, 70, 174, 177], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 24, 25, 28, 206, 229], "dot": [10, 283], "product": [10, 61, 160, 171, 228, 258], "column": [10, 280], "vector": [10, 48, 132, 181, 183, 185, 188, 189, 190, 191, 200, 252, 253, 255, 256, 257, 259, 260, 261, 262], "geometri": [10, 60, 70, 194], "line3d": 10, "equat": [10, 22, 24, 25, 26, 27, 28, 134, 135, 136, 175, 195, 220, 225, 226, 285], "need": [10, 177], "k": [10, 198], "modul": [10, 107, 142, 181, 189, 194, 195, 196, 197, 200, 202, 203, 220, 223, 224, 226, 239], "arrai": [10, 228, 229], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 122, 276], "pitfal": 12, "introduct": [12, 16, 32, 39, 40, 41, 48, 60, 70, 88, 122, 139, 177, 188, 190, 193, 194, 195, 202, 206, 261, 278], "equal": [12, 24, 25, 276], "sign": [12, 276], "doubl": 12, "variabl": [12, 23, 28, 193, 227, 257], "assign": 12, "between": [12, 18, 179, 197], "symbol": [12, 18, 19, 20, 23, 24, 58, 77, 136, 140, 192, 197, 203, 206, 226, 276, 278], "python": [12, 40], "number": [12, 36, 44, 58, 61, 62, 83, 98, 197, 202, 206, 263, 268], "v": [12, 19, 197], "float": [12, 62], "ration": [12, 197, 198, 203, 206, 209, 223, 284], "immut": [12, 92], "invers": [12, 20, 64, 83], "trig": 12, "sqrt": 12, "special": [12, 17, 40, 66, 203, 215, 284], "dictionari": [12, 14, 27], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 26, 27, 28, 102, 195, 202, 225, 226, 285], "output": [14, 112, 226], "empti": 14, "Of": 14, "valu": [14, 19, 28], "boolean": [14, 19, 88], "classif": 15, "kind": [15, 58], "func": [15, 279], "finit": [16, 38, 41, 194, 197, 200, 202, 206, 217, 227, 274], "differ": [16, 18, 38, 139, 197, 257, 274], "approxim": [16, 40], "deriv": [16, 191, 228, 259, 274], "A": [16, 124, 125, 128, 129, 130, 131, 136, 278, 285], "direct": [16, 259], "topic": [17, 112, 181, 263, 270], "old": [18, 197], "system": [18, 23, 26, 27, 106, 127, 140, 174, 176, 177, 180, 223, 225, 256, 257, 259, 261], "appli": [18, 83, 217], "input": [18, 226], "predic": [18, 35, 36], "abov": 18, "definit": [18, 20, 76], "implic": 18, "interpret": 18, "other": [18, 20, 30, 77, 188, 257], "is_": 18, "implement": [18, 83, 188, 207, 217, 239, 240, 256, 259], "limit": [18, 23, 24, 82, 122, 212, 214, 274], "combin": [18, 80], "fuzzi": 19, "three": [19, 70], "bool": 19, "custom": [20, 193, 207], "easi": 20, "case": [20, 226], "fulli": 20, "defin": 20, "automat": [20, 206], "eval": 20, "remind": 20, "kei": [20, 139, 279], "numer": [20, 26, 28, 62, 80, 85, 99, 112, 139], "evalf": [20, 58, 99, 273], "rewrit": [20, 40, 208, 284], "simplif": [20, 62, 88, 216, 284], "doit": 20, "expand": [20, 206, 208, 284], "differenti": [20, 60, 80, 112, 225, 226, 285], "as_real_imag": 20, "miscellan": [20, 64, 70, 248], "_eval_": 20, "complet": [20, 122], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 58], "fma": 20, "addit": [20, 80], "tip": [20, 273, 274, 276, 279, 280], "reduc": [23, 206], "One": [23, 26], "inequ": [23, 222, 225, 226], "algebra": [23, 24, 25, 27, 32, 87, 94, 147, 191, 194, 197, 202, 206, 225, 285], "altern": [23, 24, 26, 27, 191], "consid": [23, 24, 26, 27], "guidanc": [23, 24, 25, 26, 27, 28], "includ": [23, 28], "Be": [23, 24, 25, 26], "result": [23, 24, 25, 26, 27, 206], "extract": [23, 24], "decompos": 23, "reduct": [23, 217], "can": [23, 24, 25, 26, 27, 28], "interest": [23, 278], "per": 23, "That": [23, 24, 25, 26, 27, 28], "all": [23, 24, 25, 26, 27], "return": [23, 226], "period": 23, "which": [23, 25, 27, 99, 207], "cannot": [23, 25, 27], "satisfi": 23, "analyt": [23, 159], "report": [23, 24, 26], "problem": [23, 24, 26, 102, 202, 258], "diophantin": [24, 220, 225, 226], "zero": [24, 25, 28, 106, 200, 206, 280], "specifi": [24, 193], "order": [24, 36, 203, 214, 217], "solut": [24, 25, 26, 27, 28, 159, 226, 258], "work": [24, 70, 206], "With": [24, 25, 26, 27, 28], "verifi": [24, 262], "programmat": [24, 25], "No": [24, 25], "your": 25, "Into": [25, 26, 27], "put": 25, "form": [25, 27, 28, 88, 95, 136, 229], "restrict": 25, "domain": [25, 195, 197, 198, 203, 206, 226], "explicitli": 25, "repres": [25, 28, 83, 167, 197, 202], "infinit": [25, 226], "substitut": [25, 26, 112, 181, 273], "solveset": [25, 226], "necessarili": 25, "interrog": 25, "speed": [25, 27, 28, 112, 136], "up": [25, 27, 28, 283], "close": [25, 27, 28], "find": [26, 202, 203], "complex": [26, 64, 197], "root": [26, 203], "real": [26, 197], "ensur": [26, 28, 226], "found": 26, "given": [26, 27], "interv": [26, 193], "increas": 26, "precis": 26, "scipi": 26, "linear": [27, 80, 94, 112, 118, 136, 137, 177, 206], "nonlinear": 27, "you": 28, "might": 28, "exact": 28, "consist": 28, "ani": [28, 226], "denomin": 28, "do": [28, 226], "simplifi": [28, 40, 200, 218, 219, 284], "welcom": 29, "": [29, 117, 126, 129, 130, 131, 134, 135, 136, 157, 168, 206, 216, 225, 226, 257, 262, 281], "tutori": [29, 220, 272, 277], "anaconda": 30, "mpmath": 30, "question": 30, "abc": 31, "caveat": [31, 100], "quaternion": 32, "ask": 33, "assum": 34, "queri": 35, "content": [35, 45, 65, 78, 84, 199, 211, 221, 230], "perform": 35, "improv": [35, 122], "common": [36, 89, 112, 181, 206, 207, 208], "calculu": [36, 38, 191, 274], "theori": [36, 39, 98, 263, 268], "refin": 37, "singular": [38, 102], "weight": 38, "categori": 39, "base": [39, 60, 94, 194, 195, 206, 213, 226], "diagram": 39, "draw": 39, "codegen": [40, 240], "tool": [40, 97], "abstract": [40, 103, 107, 109, 132, 142, 159, 189, 198], "syntax": 40, "tree": [40, 197, 207, 279], "ast": [40, 122], "predefin": 40, "node": 40, "c": [40, 207], "cfunction": 40, "specif": 40, "cnode": 40, "cxxnode": 40, "fortran": [40, 207], "fnode": 40, "algorithm": [40, 41, 157, 168, 200, 203, 209, 214, 217], "pyutil": 40, "cutil": 40, "futil": 40, "present": [41, 48], "group": [41, 43, 46, 48, 49, 177], "overview": [41, 48, 83], "facil": 41, "construct": [41, 48, 229], "free": [41, 195], "word": [41, 48], "coset": 41, "enumer": [41, 63], "todd": 41, "coxet": 41, "cosett": 41, "compress": 41, "standard": 41, "subgroup": 41, "index": [41, 48, 229, 232], "low": 41, "reidemeist": 41, "schreier": 41, "bibliographi": [41, 48], "grai": 42, "constructor": [43, 203, 280], "nilpot": 44, "abelian": 44, "cyclic": 44, "name": 46, "partit": [47, 245], "polycycl": 48, "polycyclicgroup": 48, "collector": 48, "comput": [48, 83, 99, 159, 206, 278], "minim": [48, 202], "uncollect": 48, "subword": 48, "collect": [48, 208, 284], "expon": [48, 206], "depth": [48, 70], "lead": 48, "polyhedron": 51, "prufer": 52, "sequenc": [52, 80, 200, 203, 212, 213], "subset": [53, 61], "canonic": 54, "concret": 57, "hypergeometr": [57, 66, 77, 80, 209, 217], "term": [57, 206, 208, 214], "cach": 58, "basic": [58, 62, 94, 183, 195, 197, 203, 215, 256, 263, 264, 273, 280], "singleton": [58, 213, 215], "power": [58, 209, 215, 278, 284], "mul": 58, "mod": 58, "multidimension": 58, "contain": 58, "exprtool": 58, "sort": 58, "random": [58, 227], "cryptographi": 59, "discret": [61, 227], "transform": [61, 83, 85, 100, 257], "fast": 61, "fourier": [61, 210], "theoret": 61, "walsh": 61, "hadamard": 61, "m\u00f6biu": 61, "convolut": 61, "cover": 61, "intersect": [61, 70], "accuraci": 62, "error": [62, 66], "handl": [62, 226], "sum": 62, "combinatori": 63, "elementari": [64, 194, 213, 215], "trigonometr": [64, 66, 216, 284], "hyperbol": 64, "integ": [64, 197], "exponenti": [64, 66, 284], "piecewis": 64, "dirac": 66, "delta": 66, "discontinu": 66, "gamma": [66, 109], "beta": 66, "fresnel": 66, "logarithm": [66, 284], "bessel": 66, "airi": 66, "b": 66, "spline": 66, "riemann": 66, "zeta": 66, "ellipt": 66, "mathieu": 66, "orthogon": [66, 203, 259], "jacobi": 66, "gegenbau": 66, "chebyshev": 66, "legendr": 66, "hermit": 66, "laguerr": 66, "spheric": 66, "harmon": [66, 148, 173], "curv": 67, "ellips": 68, "entiti": [69, 70, 193], "avail": 70, "usag": [70, 122, 140, 197, 258], "median": 70, "pappu": 70, "hexagon": 70, "theorem": [70, 83, 262], "futur": [70, 112, 122, 181], "truth": [70, 88], "beyond": 70, "visual": [70, 139], "line": 71, "plane": [72, 83], "polygon": [74, 85], "about": [76, 226, 257, 285], "holonom": [76, 77, 78, 80, 81, 127], "convert": [77, 80, 197, 273], "represent": [77, 81, 177, 191, 197], "meijer": [77, 80, 83, 217], "g": [77, 80, 83, 217], "intern": [79, 83, 85, 197, 200, 202, 220], "multipl": [80, 191, 202], "composit": 80, "seri": [80, 193, 204, 209, 210, 211, 214, 274], "expans": [80, 214, 217, 274], "current": 82, "polar": [83, 144], "branch": 83, "argand": 83, "tabl": [83, 88, 217], "lookup": 83, "mellin": 83, "converg": 83, "laplac": 83, "thi": [83, 226], "valid": 83, "exist": 83, "formula": [83, 217], "todo": 85, "bug": 85, "over": [85, 206, 215], "polytop": 85, "For": 85, "2d": 85, "polyhedra": 85, "session": 86, "lie": [87, 223], "equival": [88, 139], "manipul": [88, 94, 114, 199, 200, 203, 204, 226, 279], "infer": 88, "dens": [90, 197, 198, 200], "block": 91, "immutablematrix": 92, "except": [94, 100, 200, 243], "numpi": 94, "normal": [95, 206], "spars": [96, 97, 197, 198, 200], "immutablesparsematrix": 96, "ntheori": 98, "ecm": 98, "q": 98, "sub": 99, "ufuncifi": 99, "aesara": [99, 207], "so": 99, "mathrm": [100, 283], "runtim": 100, "beam": [101, 102, 103], "bend": 102, "continuum": 103, "truss": [103, 104], "control": [105, 106, 107, 108, 193], "pole": 106, "bode": 106, "impuls": 106, "respons": [106, 207], "step": [106, 226], "ramp": 106, "lti": 108, "high": 109, "energi": [109, 137], "hydrogen": 110, "wavefunct": 110, "potenti": [112, 136, 137, 181, 188, 259], "issu": [112, 122, 136, 181, 280], "advanc": [112, 181, 206, 279, 280], "featur": [112, 181, 275], "choic": 112, "acceler": [112, 181, 190, 214], "interfac": [112, 181, 193, 227], "bodi": [113, 137, 262], "framework": [116, 133], "kane": [117, 126, 129, 130, 134, 136], "lagrang": [117, 126, 131, 135, 136], "mass": [119, 137, 262], "inertia": [119, 137, 181], "particl": [119, 137, 163], "rigidbodi": 119, "mechanics_print": 120, "mprint": 120, "mpprint": 120, "mlatex": 120, "symbolicsystem": [121, 140], "autolev": [122, 139], "dynam": 122, "onlin": 122, "fix": 122, "switch": 122, "bicycl": 124, "four": 125, "bar": 125, "linkag": 125, "nonminim": 126, "pendulum": 126, "multi": 127, "degre": 127, "freedom": 127, "roll": [128, 129, 130, 131], "disc": [128, 129, 130, 131], "constraint": 130, "forc": 130, "classic": [132, 200], "jointsmethod": 133, "structur": [134, 135, 177, 220], "background": 136, "directli": [136, 257], "new_method": 136, "kwarg": 136, "a_and_b": 136, "true": 136, "slow": 136, "ha": 136, "nan": 136, "zoo": 136, "oo": 136, "element": [136, 197, 202], "further": [136, 276], "rigid": 137, "dyadic": [137, 181, 256, 257], "momentum": 137, "angular": [137, 190], "momenta": 137, "kinet": 137, "lagrangian": 137, "user": [139, 220, 223, 224], "rough": 139, "link": 139, "gaussian": [141, 197, 198, 206], "optic": [141, 142], "medium": 143, "wave": 146, "pauli": 147, "quantum": [148, 159, 173], "oscil": [148, 173], "d": [148, 173], "anticommut": 149, "cartesian": 150, "state": [150, 159, 162, 170], "clebsch": 151, "gordan": 151, "coeffici": [151, 200], "circuit": 152, "commut": [153, 194], "constant": [154, 177], "dagger": 155, "gate": 156, "grover": 157, "hilbert": 158, "space": [158, 177, 217], "inner": 160, "helper": [162, 207], "box": 163, "qappli": 164, "qft": 165, "qubit": 166, "shor": 168, "spin": 169, "second": 172, "quantiz": 172, "dimension": 175, "analysi": 175, "philosophi": 177, "behind": 177, "literatur": [177, 201, 206], "prefix": 178, "convers": 179, "referencefram": [181, 191], "dynamicsymbol": 181, "essenti": [182, 184, 252, 255], "field": [183, 188, 197, 200, 202, 206, 259, 261], "kinemat": [186, 190], "kinematic_equ": 186, "scalar": [188, 259, 261], "curl": [188, 259], "diverg": [188, 259, 262], "gradient": [188, 259], "conserv": [188, 259], "solenoid": [188, 259], "veloc": 190, "basi": [191, 200, 202], "wigner": 192, "credit": 192, "copyright": 192, "author": 192, "plotgrid": 193, "pyglet": 193, "mode": 193, "color": 193, "geometr": 193, "ascii": [193, 283], "art": 193, "agca": 194, "ring": [194, 197, 198], "ideal": 194, "homomorph": [194, 202], "syzygi": 194, "extens": [194, 206], "concept": 195, "divis": 195, "factori": 195, "euclidean": 195, "gcd": [195, 200, 206], "lcm": 195, "squar": 195, "factor": [195, 200, 206, 284], "groebner": [195, 200], "introduc": [196, 197], "domainmatrix": 196, "dup": 197, "dmp": 197, "polyr": 197, "polynomialr": 197, "choos": 197, "unifi": 197, "gf": 198, "p": [198, 202], "zz": 198, "qq": 198, "mpq": 198, "zz_i": 198, "qq_i": 198, "rr": 198, "cc": 198, "x": 198, "ex": 198, "quotient": 198, "level": 200, "multivari": [200, 206], "univari": [200, 206], "remaind": 200, "subresult": 200, "configur": 200, "modular": 200, "undocu": 200, "main": 202, "prime": 202, "decomposit": [202, 203, 206], "adic": 202, "valuat": 202, "subfield": 202, "As": 202, "arithmet": 202, "extra": 203, "monomi": 203, "encod": 203, "formal": [203, 209], "appel": 203, "partial": [203, 206, 225, 226], "fraction": [203, 206, 284], "dispers": 203, "rs_seri": 204, "wester": 206, "articl": 206, "simpl": 206, "support": 206, "back": 206, "cyclotom": 206, "gr\u00f6bner": 206, "mistak": 207, "prettyprint": 207, "rcodeprint": 207, "smt": 207, "lib": 207, "mapl": 207, "javascript": 207, "julia": 207, "octav": 207, "matlab": 207, "rust": 207, "gtk": 207, "lambdaprint": 207, "latexprint": 207, "mathmlprint": 207, "pythoncodeprint": 207, "pythonprint": 207, "srepr": [207, 283], "strprinter": 207, "preview": 207, "codeprint": 207, "preced": 207, "dotprint": 207, "subexpress": 208, "detect": 208, "compound": [213, 215, 227], "recurs": [213, 279], "gruntz": 214, "more": [214, 257, 278], "intuit": 214, "residu": 214, "setkind": 215, "hongguang": 216, "fu": 216, "rule": [216, 258], "notat": 217, "increment": 217, "decrement": 217, "indic": 217, "around": 217, "loos": 217, "end": 217, "confluenc": 217, "extend": 217, "od": [223, 225, 226], "hint": [223, 224], "heurist": 223, "riccati": 223, "inform": [223, 224], "pde": [224, 225, 226], "ordinari": [225, 226], "deutil": 225, "recurr": 225, "de": [225, 226], "wrong": 226, "why": [226, 278], "we": 226, "emploi": 226, "search": 226, "deal": 226, "where": 226, "known": 226, "plan": 226, "transolv": 226, "continu": [227, 284], "stochast": 227, "process": 227, "dim": [228, 229], "contract": 228, "diagon": [228, 280], "explicit": 229, "pytest": 236, "randomis": 237, "detail": [239, 240, 256], "routin": 240, "decor": 241, "enum": 242, "variat": 245, "memoiz": 247, "pkgdata": 249, "inspect": 250, "time": 251, "orient": [254, 257], "locat": 257, "coordsys3d": 257, "orient_new": 257, "AND": 257, "quadrilater": 258, "third": 258, "del": [258, 259], "curvilinear": 259, "applic": 262, "calcul": 262, "perimet": 262, "surfac": 262, "area": 262, "volum": 262, "flux": 262, "stoke": 262, "introductori": [272, 277], "quick": [273, 274, 276, 279, 280], "two": 276, "final": 276, "read": 276, "understand": 279, "through": 279, "invari": 279, "walk": 279, "prevent": 279, "shape": 280, "access": 280, "delet": 280, "insert": 280, "determin": 280, "rref": 280, "nullspac": 280, "columnspac": 280, "eigenvalu": 280, "eigenvector": 280, "next": 281, "preliminari": 282, "exercis": 282, "str": 283, "mathml": 283, "cancel": 284, "apart": 284, "trigsimp": 284, "expand_trig": 284, "powsimp": 284, "expand_power_exp": 284, "expand_power_bas": 284, "powdenest": 284, "expand_log": 284, "logcombin": 284, "expand_func": 284, "hyperexpand": 284, "combsimp": 284, "gammasimp": 284}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [86, "module-sympy.interactive.printing"], [112, "printing"], [181, "printing"], [207, "printing"], [283, "printing"]], "Parsing": [[3, "parsing"], [100, "module-sympy.parsing"]], "Logic": [[3, "logic"], [88, "module-sympy.logic"], [263, "logic"], [266, "logic"]], "Plotting": [[3, "plotting"], [193, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [273, "lambdify"]], "Code Generation": [[3, "code-generation"], [40, "code-generation"], [263, "code-generation"], [265, "code-generation"]], "Autowrap": [[3, "autowrap"], [40, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [29, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [32, "introduction"], [39, "introduction"], [40, "introduction"], [41, "introduction"], [48, "introduction"], [60, "introduction"], [70, "introduction"], [88, "introduction"], [122, "introduction"], [139, "introduction"], [177, "introduction"], [188, "introduction"], [193, "introduction"], [194, "introduction"], [195, "introduction"], [202, "introduction"], [206, "introduction"], [261, "introduction"], [278, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [276, "symbols"]], "Functions": [[12, "functions"], [65, "functions"], [228, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [29, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [58, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [279, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [35, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [36, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [24, "limitations"], [82, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [30, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [76, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [23, "examples"], [31, "examples"], [58, "examples"], [58, "id47"], [82, "examples"], [85, "examples"], [85, "id37"], [98, "examples"], [98, "id61"], [102, "examples"], [109, "examples"], [144, "examples"], [175, "examples"], [191, "examples"], [191, "id1"], [206, "examples"], [214, "examples"], [214, "id3"], [227, "examples"], [228, "examples"], [229, "examples"], [232, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [29, "how-to-guides"]], "Solve Equations": [[22, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[23, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Alternatives to Consider": [[23, "alternatives-to-consider"], [24, "alternatives-to-consider"], [26, "alternatives-to-consider"], [27, "alternatives-to-consider"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[23, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[23, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Guidance": [[23, "guidance"], [24, "guidance"], [25, "guidance"], [26, "guidance"], [27, "guidance"]], "Include the Variable to Be Reduced for in the Function Call": [[23, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[23, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[23, "use-the-result"]], "Extract a List of Decomposed Relations": [[23, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[23, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[23, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[23, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[23, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[23, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[23, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[23, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[23, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[23, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Report a Problem": [[23, "report-a-problem"], [24, "report-a-problem"], [26, "report-a-problem"]], "Solve a Diophantine Equation Algebraically": [[24, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[24, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[24, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[24, "specify-the-order-of-symbols-in-the-result"]], "Use the Solution Result": [[24, "use-the-solution-result"], [25, "use-the-solution-result"], [26, "use-the-solution-result"]], "Extract Expressions From the Result": [[24, "extract-expressions-from-the-result"]], "Work With Parameters": [[24, "work-with-parameters"]], "Verify a Solution": [[24, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[24, "programmatically-extract-parameter-symbols"]], "Not All Equations Can Be Solved": [[24, "not-all-equations-can-be-solved"], [25, "not-all-equations-can-be-solved"]], "Equations With No Solution": [[24, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[25, "solve-an-equation-algebraically"], [25, "id1"]], "Make Your Equation Into an Expression That Equals Zero": [[25, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[25, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[25, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[25, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[25, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[25, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[25, "options-that-can-speed-up-solve"], [27, "options-that-can-speed-up-solve"], [28, "options-that-can-speed-up-solve"]], "Equations With No Closed-Form Solution": [[25, "equations-with-no-closed-form-solution"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[25, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [27, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve One or a System of Equations Numerically": [[26, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[26, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[26, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[26, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[26, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[26, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[26, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[26, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[26, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[26, "equations-with-no-solution"]], "Solve a System of Equations Algebraically": [[27, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[27, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[27, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[27, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[27, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[27, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[27, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[27, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[27, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[27, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[27, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[28, "solving-guidance"]], "Numeric Solutions": [[28, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[28, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[28, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[28, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[28, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[28, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[28, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[28, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[28, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[29, "welcome-to-sympy-s-documentation"]], "Installation": [[29, "installation"], [30, "installation"], [282, "installation"]], "Tutorials": [[29, "tutorials"], [272, "tutorials"]], "API Reference": [[29, "api-reference"], [239, "module-sympy.utilities.autowrap"], [240, "module-sympy.utilities.codegen"], [263, "api-reference"]], "Anaconda": [[30, "anaconda"]], "Git": [[30, "git"]], "Run SymPy": [[30, "run-sympy"]], "mpmath": [[30, "mpmath"]], "Questions": [[30, "questions"]], "abc": [[31, "module-sympy.abc"]], "Caveats": [[31, "caveats"]], "Algebras": [[32, "algebras"]], "Quaternion Reference": [[32, "module-sympy.algebras"]], "Ask": [[33, "module-sympy.assumptions.ask"]], "Assume": [[34, "module-sympy.assumptions.assume"]], "Predicate": [[35, "predicate"]], "Querying": [[35, "querying"]], "Contents": [[35, "contents"], [45, "contents"], [65, "contents"], [78, "contents"], [84, "contents"], [199, "contents"], [211, "contents"], [221, "contents"], [230, "contents"]], "Performance improvements": [[35, "performance-improvements"]], "Misc": [[35, "misc"]], "Common": [[36, "common"]], "Calculus": [[36, "calculus"], [38, "module-sympy.calculus"], [274, "calculus"]], "Matrix": [[36, "matrix"]], "Number Theory": [[36, "number-theory"], [98, "module-sympy.ntheory.generate"], [263, "number-theory"], [268, "number-theory"]], "Order": [[36, "order"]], "Sets": [[36, "sets"], [215, "sets"]], "Refine": [[37, "module-sympy.assumptions.refine"]], "Singularities": [[38, "singularities"]], "Finite difference weights": [[38, "finite-difference-weights"]], "Category Theory": [[39, "category-theory"]], "Base Class Reference": [[39, "module-sympy.categories"], [60, "base-class-reference"]], "Diagram Drawing": [[39, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[40, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[40, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[40, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[40, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[40, "module-sympy.codegen.ast"]], "AST Type Tree": [[40, "ast-type-tree"]], "Predefined types": [[40, "predefined-types"]], "Using the nodes": [[40, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[40, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[40, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[40, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[40, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[40, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[40, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[40, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[40, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[41, "finitely-presented-groups"]], "Overview of Facilities": [[41, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[41, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[41, "free-groups-and-words"]], "Construction of a Free Group": [[41, "construction-of-a-free-group"]], "Construction of words": [[41, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[41, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[41, "cosettable"]], "Attributes of CosetTable": [[41, "attributes-of-cosettable"]], "Compression and Standardization": [[41, "compression-and-standardization"]], "Subgroups of Finite Index": [[41, "subgroups-of-finite-index"]], "Low Index Subgroups": [[41, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[41, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[41, "reidemeister-schreier-algorithm"]], "Bibliography": [[41, "bibliography"], [48, "bibliography"]], "Gray Code": [[42, "module-sympy.combinatorics.graycode"]], "Group constructors": [[43, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[44, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[45, "combinatorics"]], "Named Groups": [[46, "module-sympy.combinatorics.named_groups"]], "Partitions": [[47, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[48, "polycyclic-groups"]], "Overview of functionalities": [[48, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[48, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[48, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[48, "the-construction-of-collector"]], "Attributes of Collector": [[48, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[48, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[48, "computation-of-subword-index"]], "Computation of Collected Word": [[48, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[48, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[48, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[48, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[48, "computation-of-leading-exponent"]], "Permutation Groups": [[49, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[50, "module-sympy.combinatorics.permutations"]], "Generators": [[50, "module-sympy.combinatorics.generators"]], "Polyhedron": [[51, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[52, "module-sympy.combinatorics.prufer"]], "Subsets": [[53, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[54, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[55, "module-sympy.combinatorics.testutil"]], "Utilities": [[56, "module-sympy.combinatorics.util"], [145, "module-sympy.physics.optics.utils"], [202, "utilities"], [244, "module-sympy.utilities"], [263, "utilities"], [271, "utilities"]], "Concrete": [[57, "concrete"]], "Hypergeometric terms": [[57, "hypergeometric-terms"]], "Concrete Class Reference": [[57, "concrete-class-reference"]], "Concrete Functions Reference": [[57, "concrete-functions-reference"]], "Core": [[58, "core"]], "sympify": [[58, "module-sympy.core.sympify"]], "assumptions": [[58, "module-sympy.core.assumptions"]], "See Also": [[58, "see-also"], [245, "see-also"]], "Notes": [[58, "notes"], [214, "notes"], [216, "notes"]], "Developers Notes": [[58, "developers-notes"]], "References": [[58, "references"], [70, "references"], [76, "references"], [85, "references"], [144, "references"], [147, "references"], [192, "references"], [216, "references"], [217, "references"], [220, "references"], [226, "references"]], "cache": [[58, "module-sympy.core.cache"]], "basic": [[58, "module-sympy.core.basic"]], "singleton": [[58, "module-sympy.core.singleton"]], "expr": [[58, "module-sympy.core.expr"]], "symbol": [[58, "module-sympy.core.symbol"]], "numbers": [[58, "module-sympy.core.numbers"]], "power": [[58, "module-sympy.core.power"]], "mul": [[58, "module-sympy.core.mul"]], "add": [[58, "module-sympy.core.add"]], "mod": [[58, "module-sympy.core.mod"]], "relational": [[58, "module-sympy.core.relational"]], "multidimensional": [[58, "module-sympy.core.multidimensional"]], "function": [[58, "module-sympy.core.function"]], "evalf": [[58, "module-sympy.core.evalf"], [273, "evalf"]], "containers": [[58, "module-sympy.core.containers"]], "exprtools": [[58, "module-sympy.core.exprtools"]], "Sorting": [[58, "sorting"]], "Random": [[58, "module-sympy.core.random"]], "Traversal": [[58, "module-sympy.core.traversal"]], "Cryptography": [[59, "cryptography"]], "Differential Geometry": [[60, "module-sympy.diffgeom"]], "Discrete": [[61, "discrete"]], "Transforms": [[61, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[61, "fast-fourier-transform"]], "Number Theoretic Transform": [[61, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[61, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[61, "mobius-transform"]], "Convolutions": [[61, "module-sympy.discrete.convolutions"]], "Convolution": [[61, "convolution"]], "Convolution using Fast Fourier Transform": [[61, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[61, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[61, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[61, "subset-convolution"]], "Covering Product": [[61, "covering-product"]], "Intersecting Product": [[61, "intersecting-product"]], "Numerical Evaluation": [[62, "numerical-evaluation"]], "Basics": [[62, "basics"], [263, "basics"], [264, "basics"]], "Floating-point numbers": [[62, "floating-point-numbers"]], "Accuracy and error handling": [[62, "accuracy-and-error-handling"]], "Sums and integrals": [[62, "sums-and-integrals"]], "Numerical simplification": [[62, "numerical-simplification"]], "Combinatorial": [[63, "combinatorial"]], "Enumeration": [[63, "enumeration"]], "Elementary": [[64, "elementary"]], "Complex Functions": [[64, "complex-functions"]], "Trigonometric": [[64, "trigonometric"]], "Trigonometric Functions": [[64, "trigonometric-functions"]], "Trigonometric Inverses": [[64, "trigonometric-inverses"]], "Hyperbolic": [[64, "hyperbolic"]], "Hyperbolic Functions": [[64, "hyperbolic-functions"]], "Hyperbolic Inverses": [[64, "hyperbolic-inverses"]], "Integer Functions": [[64, "integer-functions"]], "Exponential": [[64, "exponential"]], "Piecewise": [[64, "piecewise"]], "Miscellaneous": [[64, "miscellaneous"], [248, "module-sympy.utilities.misc"]], "Special": [[66, "special"]], "Dirac Delta and Related Discontinuous Functions": [[66, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[66, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[66, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[66, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[66, "module-sympy.functions.special.bessel"]], "Airy Functions": [[66, "airy-functions"]], "B-Splines": [[66, "b-splines"]], "Riemann Zeta and Related Functions": [[66, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[66, "hypergeometric-functions"]], "Elliptic integrals": [[66, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[66, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[66, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[66, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[66, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[66, "chebyshev-polynomials"]], "Legendre Polynomials": [[66, "legendre-polynomials"]], "Hermite Polynomials": [[66, "hermite-polynomials"]], "Laguerre Polynomials": [[66, "laguerre-polynomials"]], "Spherical Harmonics": [[66, "spherical-harmonics"]], "Tensor Functions": [[66, "tensor-functions"]], "Curves": [[67, "module-sympy.geometry.curve"]], "Ellipses": [[68, "module-sympy.geometry.ellipse"]], "Entities": [[69, "module-sympy.geometry.entity"]], "Geometry": [[70, "geometry"]], "Available Entities": [[70, "available-entities"]], "Example Usage": [[70, "example-usage"]], "Intersection of medians": [[70, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[70, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[70, "miscellaneous-notes"]], "Future Work": [[70, "future-work"]], "Truth Setting Expressions": [[70, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[70, "three-dimensions-and-beyond"]], "Geometry Visualization": [[70, "geometry-visualization"]], "Submodules": [[70, "submodules"]], "Lines": [[71, "module-sympy.geometry.line"]], "Plane": [[72, "module-sympy.geometry.plane"]], "Points": [[73, "module-sympy.geometry.point"], [256, "points"]], "Polygons": [[74, "module-sympy.geometry.polygon"]], "Utils": [[75, "module-sympy.geometry.util"]], "About Holonomic Functions": [[76, "about-holonomic-functions"]], "Converting other representations to holonomic": [[77, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[77, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[77, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[77, "converting-symbolic-expressions"]], "Holonomic": [[78, "module-sympy.holonomic"]], "Internal API": [[79, "internal-api"]], "Operations on holonomic functions": [[80, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[80, "addition-and-multiplication"]], "Integration and Differentiation": [[80, "integration-and-differentiation"]], "Composition with polynomials": [[80, "composition-with-polynomials"]], "Convert to holonomic sequence": [[80, "convert-to-holonomic-sequence"]], "Series expansion": [[80, "series-expansion"]], "Numerical evaluation": [[80, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[80, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[80, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[80, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[81, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[82, "uses-and-current-limitations"]], "Integration": [[82, "integration"]], "Computing Integrals using Meijer G-Functions": [[83, "computing-integrals-using-meijer-g-functions"]], "Overview": [[83, "overview"]], "Polar Numbers and Branched Functions": [[83, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[83, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[83, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[83, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[83, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[83, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[83, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[83, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[83, "how-to-compute-the-integral"]], "When this computation is valid": [[83, "when-this-computation-is-valid"]], "When the integral exists": [[83, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[83, "implemented-g-function-formulae"]], "Internal API Reference": [[83, "module-sympy.integrals.meijerint"]], "Integrals": [[84, "integrals"], [85, "module-sympy.integrals"], [274, "integrals"]], "Integral Transforms": [[85, "module-sympy.integrals.transforms"]], "Internals": [[85, "internals"], [202, "internals"]], "API reference": [[85, "api-reference"], [85, "id38"]], "TODO and Bugs": [[85, "todo-and-bugs"]], "Numeric Integrals": [[85, "numeric-integrals"]], "Integration over Polytopes": [[85, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[85, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[85, "for-3-polytopes-polyhedra"]], "Interactive": [[86, "module-sympy.interactive"]], "Session": [[86, "module-sympy.interactive.session"]], "Lie Algebra": [[87, "module-sympy.liealgebras"]], "Forming logical expressions": [[88, "forming-logical-expressions"]], "Boolean functions": [[88, "boolean-functions"]], "Simplification and equivalence-testing": [[88, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[88, "manipulating-expressions"]], "Truth tables and related functions": [[88, "truth-tables-and-related-functions"]], "Inference": [[88, "module-sympy.logic.inference"]], "Common Matrices": [[89, "module-sympy.matrices.common"]], "Dense Matrices": [[90, "dense-matrices"]], "Matrix Expressions": [[91, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[91, "matrix-expressions-core-reference"]], "Block Matrices": [[91, "block-matrices"]], "Immutable Matrices": [[92, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[92, "module-sympy.matrices.immutable"]], "Matrices": [[93, "module-sympy.matrices"], [111, "module-sympy.physics.matrices"], [263, "matrices"], [267, "matrices"], [280, "matrices"]], "Matrices (linear algebra)": [[94, "module-sympy.matrices.matrices"]], "Creating Matrices": [[94, "creating-matrices"]], "Basic Manipulation": [[94, "basic-manipulation"]], "Operations on entries": [[94, "operations-on-entries"]], "Linear algebra": [[94, "linear-algebra"]], "Reference": [[94, "reference"], [194, "reference"], [200, "reference"], [204, "reference"], [214, "reference"], [214, "id2"], [214, "id4"], [214, "id7"], [214, "id8"]], "Matrix Base Classes": [[94, "matrix-base-classes"]], "Matrix Exceptions": [[94, "matrix-exceptions"]], "Matrix Functions": [[94, "matrix-functions"]], "Numpy Utility Functions": [[94, "numpy-utility-functions"]], "Matrix Normal Forms": [[95, "matrix-normal-forms"]], "Sparse Matrices": [[96, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[96, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[96, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[97, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[98, "ntheory-class-reference"]], "Ntheory Functions Reference": [[98, "ntheory-functions-reference"]], "ECM function": [[98, "ecm-function"]], "QS function": [[98, "qs-function"]], "Numeric Computation": [[99, "numeric-computation"]], "Subs/evalf": [[99, "subs-evalf"]], "Lambdify": [[99, "lambdify"], [246, "module-sympy.utilities.lambdify"]], "uFuncify": [[99, "ufuncify"]], "Aesara": [[99, "aesara"]], "So Which Should I Use?": [[99, "so-which-should-i-use"]], "Parsing Functions Reference": [[100, "parsing-functions-reference"]], "Parsing Transformations Reference": [[100, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[100, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[100, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[100, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[100, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[100, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[100, "runtime-installation"]], "Beam (Docstrings)": [[101, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[102, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[102, "beam"], [103, "beam"]], "Example 1": [[102, "example-1"]], "Example 2": [[102, "example-2"]], "Example 3": [[102, "example-3"]], "Example 4": [[102, "example-4"]], "Example 5": [[102, "example-5"]], "Example 6": [[102, "example-6"]], "Example 7": [[102, "example-7"]], "Example 8": [[102, "example-8"]], "Example 9": [[102, "example-9"]], "Example 10": [[102, "example-10"]], "Example 11": [[102, "example-11"]], "Continuum Mechanics": [[103, "continuum-mechanics"]], "Abstract": [[103, null], [107, null], [109, null], [132, null], [142, null], [159, null], [189, null]], "Truss": [[103, "truss"]], "Truss (Docstrings)": [[104, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[105, "control"]], "Control System Plots": [[106, "control-system-plots"]], "Pole-Zero Plot": [[106, "pole-zero-plot"]], "Bode Plot": [[106, "bode-plot"]], "Impulse-Response Plot": [[106, "impulse-response-plot"]], "Step-Response Plot": [[106, "step-response-plot"]], "Ramp-Response Plot": [[106, "ramp-response-plot"]], "Control Module": [[107, "module-sympy.physics.control"]], "Control API": [[108, "control-api"]], "lti": [[108, "module-sympy.physics.control.lti"]], "High energy physics": [[109, "high-energy-physics"]], "Gamma matrices": [[109, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[110, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[112, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[112, "common-issues"], [181, "common-issues"]], "Numerically Integrating Code": [[112, "numerically-integrating-code"]], "Differentiating": [[112, "differentiating"]], "Choice of Coordinates and Speeds": [[112, "choice-of-coordinates-and-speeds"]], "Substitution": [[112, "substitution"], [181, "substitution"], [273, "substitution"]], "Linearization": [[112, "linearization"]], "Acceleration of Points": [[112, "acceleration-of-points"], [181, "acceleration-of-points"]], "Advanced Interfaces": [[112, "advanced-interfaces"], [181, "advanced-interfaces"]], "Advanced Functionality": [[112, "advanced-functionality"]], "Future Features": [[112, "future-features"]], "Code Output": [[112, "code-output"]], "Body (Docstrings)": [[113, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[114, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[115, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[116, "joints-framework-docstrings"]], "Joint (Docstrings)": [[116, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[117, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[118, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[119, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[120, "printing-docstrings"], [187, "printing-docstrings"]], "mechanics_printing": [[120, "mechanics-printing"]], "mprint": [[120, "mprint"]], "mpprint": [[120, "mpprint"]], "mlatex": [[120, "mlatex"]], "SymbolicSystem (Docstrings)": [[121, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[122, "autolev-parser"]], "Usage": [[122, "usage"]], "Gotchas": [[122, "gotchas"], [276, "gotchas"]], "Limitations and Issues": [[122, "limitations-and-issues"]], "Future Improvements": [[122, "future-improvements"]], "1. Completing Dynamics Online": [[122, "completing-dynamics-online"]], "2. Fixing Issues": [[122, "fixing-issues"]], "3. Switching to an AST": [[122, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[123, "examples-for-physics-mechanics"]], "A bicycle": [[124, "a-bicycle"]], "A four bar linkage": [[125, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[126, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[126, "kane-s-method"]], "Lagrange\u2019s Method": [[126, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[127, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[128, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[129, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[130, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[131, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[132, "classical-mechanics"]], "Vector": [[132, "vector"], [191, "vector"], [260, "vector"]], "Mechanics": [[132, "mechanics"], [227, "module-sympy.stats.rv"]], "Guide to Mechanics": [[132, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[133, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[133, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[133, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[134, "kane-s-method-in-physics-mechanics"], [134, "id2"]], "Structure of Equations": [[134, "structure-of-equations"], [135, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[135, "lagrange-s-method-in-physics-mechanics"], [135, "id1"]], "Linearization in Physics/Mechanics": [[136, "linearization-in-physics-mechanics"]], "Background": [[136, "background"]], "A Note on Dependent Coordinates and Speeds": [[136, null]], "Linearizing Kane\u2019s Equations": [[136, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[136, "using-the-linearizer-class-directly"], [136, "id2"]], "2. Using the linearize class method:": [[136, "using-the-linearize-class-method"], [136, "id3"]], "What\u2019s with the new_method kwarg?": [[136, null]], "Linearizing Lagrange\u2019s Equations": [[136, "linearizing-lagrange-s-equations"]], "Potential Issues": [[136, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[136, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[136, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[136, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[137, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[137, "mass"]], "Particle": [[137, "particle"]], "Inertia": [[137, "inertia"]], "Rigid Body": [[137, "rigid-body"]], "Dyadic": [[137, "dyadic"]], "Linear Momentum": [[137, "linear-momentum"]], "Angular Momentum": [[137, "angular-momentum"]], "Using momenta functions in Mechanics": [[137, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[137, "kinetic-energy"]], "Potential Energy": [[137, "potential-energy"]], "Lagrangian": [[137, "lagrangian"]], "Using energy functions in Mechanics": [[137, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[138, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[139, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[139, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[139, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[139, "mathematical-equivalents"]], "Physical Equivalents": [[139, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[139, "numerical-evaluation-and-visualization"]], "Links": [[139, "links"]], "Symbolic Systems in Physics/Mechanics": [[140, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[140, "symbolicsystem-example-usage"]], "Gaussian Optics": [[141, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[142, "optics-module"]], "Medium": [[143, "module-sympy.physics.optics.medium"]], "Polarization": [[144, "module-sympy.physics.optics.polarization"]], "Waves": [[146, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[147, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[148, "module-sympy.physics.qho_1d"]], "Anticommutator": [[149, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[150, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[151, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[152, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[153, "module-sympy.physics.quantum.commutator"]], "Constants": [[154, "module-sympy.physics.quantum.constants"], [177, "constants"]], "Dagger": [[155, "module-sympy.physics.quantum.dagger"]], "Gates": [[156, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[157, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[158, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[159, "quantum-mechanics"]], "Quantum Functions": [[159, "quantum-functions"]], "States and Operators": [[159, "states-and-operators"]], "Quantum Computation": [[159, "quantum-computation"]], "Analytic Solutions": [[159, "analytic-solutions"]], "Inner Product": [[160, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[161, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[162, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[163, "module-sympy.physics.quantum.piab"]], "Qapply": [[164, "module-sympy.physics.quantum.qapply"]], "QFT": [[165, "module-sympy.physics.quantum.qft"]], "Qubit": [[166, "module-sympy.physics.quantum.qubit"]], "Represent": [[167, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[168, "module-sympy.physics.quantum.shor"]], "Spin": [[169, "module-sympy.physics.quantum.spin"]], "State": [[170, "module-sympy.physics.quantum.state"]], "Tensor Product": [[171, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[172, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[173, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[174, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[175, "dimensional-analysis"]], "Equation with quantities": [[175, "equation-with-quantities"]], "Unit systems": [[176, "unit-systems"]], "Philosophy behind unit systems": [[177, "philosophy-behind-unit-systems"]], "Dimensions": [[177, "dimensions"]], "Group structure": [[177, "group-structure"]], "Linear space representation": [[177, "linear-space-representation"]], "An example": [[177, "an-example"], [217, "an-example"]], "Quantities": [[177, "quantities"]], "Units": [[177, "units"]], "The need for a reference": [[177, "the-need-for-a-reference"]], "Literature": [[177, "literature"], [201, "literature"], [206, "literature"]], "Unit prefixes": [[178, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[179, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[179, "module-sympy.physics.units.util"]], "Units and unit systems": [[180, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[181, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[181, "inertia-dyadics"]], "ReferenceFrame": [[181, "referenceframe"]], "dynamicsymbols": [[181, "dynamicsymbols"]], "Essential Classes": [[182, "essential-classes"]], "Docstrings for basic field functions": [[183, "docstrings-for-basic-field-functions"]], "Field operation functions": [[183, "field-operation-functions"]], "Checking the type of vector field": [[183, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[184, "essential-functions-docstrings"]], "Physics Vector API": [[185, "physics-vector-api"]], "Kinematics (Docstrings)": [[186, "module-sympy.physics.vector.point"]], "kinematic_equations": [[186, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[188, "scalar-and-vector-field-functionality"], [259, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[188, "vectors-and-scalars"], [261, "vectors-and-scalars"]], "Fields": [[188, "fields"], [261, "fields"]], "Implementation of fields in sympy.physics.vector": [[188, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[188, "field-operators-and-other-related-functions"]], "Curl": [[188, "curl"], [259, "curl"]], "Divergence": [[188, "divergence"], [259, "divergence"]], "Gradient": [[188, "gradient"], [259, "gradient"]], "Conservative and Solenoidal fields": [[188, "conservative-and-solenoidal-fields"], [259, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[188, "scalar-potential-functions"], [259, "scalar-potential-functions"]], "The Physics Vector Module": [[189, "the-physics-vector-module"]], "References for Physics/Vector": [[189, "references-for-physics-vector"]], "Guide to Vector": [[189, "guide-to-vector"], [260, "guide-to-vector"]], "Vector: Kinematics": [[190, "vector-kinematics"]], "Introduction to Kinematics": [[190, "introduction-to-kinematics"]], "Angular Velocity": [[190, "angular-velocity"]], "Angular Acceleration": [[190, "angular-acceleration"]], "Point Velocity & Acceleration": [[190, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[190, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[191, "vector-referenceframe"]], "Vector Algebra": [[191, "vector-algebra"]], "Vector Operations": [[191, "vector-operations"]], "Alternative Representation": [[191, "alternative-representation"]], "Vector Calculus": [[191, "vector-calculus"]], "Derivatives of Vectors": [[191, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[191, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[191, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[191, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[191, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[191, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[191, "how-vectors-are-coded"]], "Wigner Symbols": [[192, "module-sympy.physics.wigner"]], "Credits and Copyright": [[192, "credits-and-copyright"]], "Authors": [[192, "authors"]], "Plot Class": [[193, "plot-class"]], "Plotting Function Reference": [[193, "plotting-function-reference"]], "PlotGrid Class": [[193, "plotgrid-class"]], "Series Classes": [[193, "series-classes"]], "Backends": [[193, "backends"]], "Pyglet Plotting": [[193, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[193, "plot-window-controls"]], "Coordinate Modes": [[193, "coordinate-modes"]], "Specifying Intervals for Variables": [[193, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[193, "using-the-interactive-interface"]], "Using Custom Color Functions": [[193, "using-custom-color-functions"]], "Plotting Geometric Entities": [[193, "plotting-geometric-entities"]], "Plotting with ASCII art": [[193, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[194, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[194, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[194, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[194, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[194, "finite-extensions"]], "Basic functionality of the module": [[195, "basic-functionality-of-the-module"]], "Basic concepts": [[195, "basic-concepts"]], "Polynomials": [[195, "polynomials"]], "Divisibility": [[195, "divisibility"]], "Integral domains": [[195, "integral-domains"]], "Factorial domains": [[195, "factorial-domains"]], "Euclidean domains": [[195, "euclidean-domains"]], "Divisibility of polynomials": [[195, "divisibility-of-polynomials"]], "Basic functionality": [[195, "basic-functionality"]], "Division": [[195, "division"]], "GCD and LCM": [[195, "gcd-and-lcm"]], "Square-free factorization": [[195, "square-free-factorization"]], "Factorization": [[195, "factorization"]], "Groebner bases": [[195, "groebner-bases"]], "Solving Equations": [[195, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[196, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[196, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[197, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[197, "what-are-the-domains"]], "Representing expressions symbolically": [[197, "representing-expressions-symbolically"]], "Tree representation": [[197, "tree-representation"]], "DUP representation": [[197, "dup-representation"]], "DMP representation": [[197, "dmp-representation"]], "Sparse polynomial representation": [[197, "sparse-polynomial-representation"]], "Basic usage of domains": [[197, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[197, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[197, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[197, "finite-fields"]], "Real and complex fields": [[197, "real-and-complex-fields"]], "Algebraic number fields": [[197, "algebraic-number-fields"], [202, "algebraic-number-fields"]], "Polynomial ring domains": [[197, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[197, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[197, "polyring-vs-polynomialring"]], "Rational function fields": [[197, "rational-function-fields"]], "Expression domain": [[197, "expression-domain"]], "Choosing a domain": [[197, "choosing-a-domain"]], "Converting elements between different domains": [[197, "converting-elements-between-different-domains"]], "Unifying domains": [[197, "unifying-domains"]], "Internals of a Poly": [[197, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[197, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[197, "choosing-generators"]], "Algebraically dependent generators": [[197, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[198, "reference-docs-for-the-poly-domains"]], "Domains": [[198, "domains"]], "Abstract Domains": [[198, "abstract-domains"]], "GF(p)": [[198, "gf-p"]], "ZZ": [[198, "zz"]], "QQ": [[198, "qq"]], "MPQ": [[198, "mpq"]], "Gaussian domains": [[198, "gaussian-domains"]], "ZZ_I": [[198, "zz-i"]], "QQ_I": [[198, "qq-i"]], "QQ<a>": [[198, "qq-a"]], "RR": [[198, "rr"]], "CC": [[198, "cc"]], "K[x]": [[198, "k-x"]], "K(x)": [[198, "id11"]], "EX": [[198, "ex"]], "Quotient ring": [[198, "quotient-ring"]], "Sparse polynomials": [[198, "sparse-polynomials"]], "Sparse rational functions": [[198, "sparse-rational-functions"]], "Dense polynomials": [[198, "dense-polynomials"]], "Polynomial Manipulation": [[199, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[200, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[200, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[200, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[200, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[200, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[200, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[200, "classical-remainder-sequence"]], "Simplified remainder sequences": [[200, "simplified-remainder-sequences"]], "Subresultant sequence": [[200, "subresultant-sequence"]], "Groebner basis algorithms": [[200, "groebner-basis-algorithms"]], "Options": [[200, "module-sympy.polys.polyoptions"]], "Configuration": [[200, "module-sympy.polys.polyconfig"]], "Exceptions": [[200, "exceptions"]], "Modular GCD": [[200, "modular-gcd"]], "Undocumented": [[200, "undocumented"]], "Number Fields": [[202, "number-fields"]], "Solving the Main Problems": [[202, "solving-the-main-problems"]], "Integral Basis": [[202, "integral-basis"]], "Prime Decomposition": [[202, "prime-decomposition"]], "p-adic Valuation": [[202, "p-adic-valuation"]], "Finding Minimal Polynomials": [[202, "finding-minimal-polynomials"]], "The Subfield Problem": [[202, "the-subfield-problem"]], "Representing algebraic numbers": [[202, "representing-algebraic-numbers"]], "As number field elements": [[202, "as-number-field-elements"]], "As elements of finitely-generated modules": [[202, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[202, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[202, "arithmetic-with-module-elements"]], "Multiplication": [[202, "multiplication"]], "Module Homomorphisms": [[202, "module-homomorphisms"]], "Class Reference": [[202, "class-reference"]], "Polynomials Manipulation Module Reference": [[203, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[203, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[203, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[203, "domain-constructors"]], "Monomials encoded as tuples": [[203, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[203, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[203, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[203, "symbolic-root-finding-algorithms"]], "Special polynomials": [[203, "special-polynomials"]], "Orthogonal polynomials": [[203, "orthogonal-polynomials"]], "Appell sequences": [[203, "appell-sequences"]], "Manipulation of rational functions": [[203, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[203, "partial-fraction-decomposition"], [206, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[203, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[204, "series-manipulation-using-polynomials"]], "rs_series": [[204, "rs-series"]], "Contribute": [[204, "contribute"]], "Poly solvers": [[205, "poly-solvers"]], "Examples from Wester\u2019s Article": [[206, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[206, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[206, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[206, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[206, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[206, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[206, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[206, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[206, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[206, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[206, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[206, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[206, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[206, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[206, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[206, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[206, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[207, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[207, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[207, "example-of-custom-printer"]], "Example of Custom Printing Method": [[207, "example-of-custom-printing-method"]], "Common mistakes": [[207, "common-mistakes"]], "PrettyPrinter Class": [[207, "prettyprinter-class"]], "C code printers": [[207, "module-sympy.printing.c"]], "C++ code printers": [[207, "module-sympy.printing.cxx"]], "RCodePrinter": [[207, "module-sympy.printing.rcode"]], "Fortran Printing": [[207, "fortran-printing"]], "SMT-Lib printing": [[207, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[207, "module-sympy.printing.mathematica"]], "Maple code printing": [[207, "module-sympy.printing.maple"]], "Javascript Code printing": [[207, "module-sympy.printing.jscode"]], "Julia code printing": [[207, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[207, "module-sympy.printing.octave"]], "Rust code printing": [[207, "module-sympy.printing.rust"]], "Aesara Code printing": [[207, "module-sympy.printing.aesaracode"]], "Gtk": [[207, "module-sympy.printing.gtk"]], "LambdaPrinter": [[207, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[207, "module-sympy.printing.latex"]], "MathMLPrinter": [[207, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[207, "module-sympy.printing.pycode"]], "PythonPrinter": [[207, "module-sympy.printing.python"]], "srepr": [[207, "module-sympy.printing.repr"], [283, "srepr"]], "StrPrinter": [[207, "module-sympy.printing.str"]], "Tree Printing": [[207, "module-sympy.printing.tree"]], "Preview": [[207, "preview"]], "Implementation - Helper Classes/Functions": [[207, "module-sympy.printing.conventions"]], "CodePrinter": [[207, "module-sympy.printing.codeprinter"]], "Precedence": [[207, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[207, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[207, "dotprint"]], "Term Rewriting": [[208, "term-rewriting"]], "Expanding": [[208, "expanding"]], "Common Subexpression Detection and Collection": [[208, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[209, "formal-power-series"]], "Rational Algorithm": [[209, "rational-algorithm"]], "Hypergeometric Algorithm": [[209, "hypergeometric-algorithm"]], "Fourier Series": [[210, "fourier-series"]], "Series": [[211, "series"]], "Limits of Sequences": [[212, "limits-of-sequences"]], "Sequences": [[213, "sequences"]], "Sequences Base": [[213, "sequences-base"]], "Elementary Sequences": [[213, "elementary-sequences"]], "Singleton Sequences": [[213, "singleton-sequences"]], "Compound Sequences": [[213, "compound-sequences"]], "Recursive Sequences": [[213, "recursive-sequences"]], "Series Expansions": [[214, "series-expansions"]], "Limits": [[214, "limits"], [274, "limits"]], "The Gruntz Algorithm": [[214, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[214, "more-intuitive-series-expansion"]], "Order Terms": [[214, "order-terms"]], "Series Acceleration": [[214, "series-acceleration"]], "Residues": [[214, "residues"]], "Basic Sets": [[215, "module-sympy.sets.sets"]], "Elementary Sets": [[215, "elementary-sets"]], "Compound Sets": [[215, "compound-sets"]], "Singleton Sets": [[215, "singleton-sets"]], "Special Sets": [[215, "module-sympy.sets.fancysets"]], "Power sets": [[215, "module-sympy.sets.powerset"]], "Condition Sets": [[215, "module-sympy.sets.conditionset"]], "SetKind": [[215, "setkind"]], "Iteration over sets": [[215, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[216, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[216, "rules"]], "Hypergeometric Expansion": [[217, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[217, "hypergeometric-function-expansion-algorithm"]], "Notation": [[217, "notation"]], "Incrementing and decrementing indices": [[217, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[217, "reduction-of-order"]], "Moving Around in the Parameter Space": [[217, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[217, "applying-the-operators"]], "Loose Ends": [[217, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[217, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[217, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[217, "implemented-hypergeometric-formulae"]], "Simplify": [[218, "simplify"], [219, "simplify"]], "Diophantine": [[220, "diophantine"]], "Diophantine equations": [[220, "diophantine-equations"]], "Module structure": [[220, "module-structure"]], "Tutorial": [[220, "tutorial"]], "User Functions": [[220, "user-functions"], [223, "user-functions"], [224, "user-functions"]], "Internal Functions": [[220, "internal-functions"]], "Internal Classes": [[220, "internal-classes"]], "Solvers": [[221, "solvers"], [225, "module-sympy.solvers"], [285, "solvers"]], "Inequality Solvers": [[222, "inequality-solvers"]], "ODE": [[223, "ode"]], "Hint Functions": [[223, "hint-functions"]], "Lie heuristics": [[223, "lie-heuristics"]], "Rational Riccati Solver": [[223, "rational-riccati-solver"]], "System of ODEs": [[223, "system-of-odes"]], "Information on the ode module": [[223, "module-sympy.solvers.ode.ode"]], "PDE": [[224, "pde"]], "Hint Methods": [[224, "hint-methods"]], "Information on the pde module": [[224, "module-sympy.solvers.pde"]], "Algebraic equations": [[225, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[225, "ordinary-differential-equations-odes"], [226, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[225, "partial-differential-equations-pdes"], [226, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[225, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[225, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[225, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[225, "diophantine-equations-des"], [226, "diophantine-equations-des"]], "Inequalities": [[225, "inequalities"], [226, "inequalities"]], "Solveset": [[226, "solveset"]], "What\u2019s wrong with solve():": [[226, "what-s-wrong-with-solve"]], "Why Solveset?": [[226, "why-solveset"]], "Why do we use Sets as an output type?": [[226, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[226, "input-api-of-solveset"]], "What is this domain argument about?": [[226, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[226, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[226, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[226, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[226, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[226, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[226, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[226, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[226, "solveset-module-reference"]], "transolve": [[226, "transolve"]], "Stats": [[227, "module-sympy.stats"]], "Random Variable Types": [[227, "random-variable-types"]], "Finite Types": [[227, "finite-types"]], "Discrete Types": [[227, "discrete-types"]], "Continuous Types": [[227, "continuous-types"]], "Joint Types": [[227, "joint-types"]], "Stochastic Processes": [[227, "stochastic-processes"]], "Matrix Distributions": [[227, "matrix-distributions"]], "Compound Distribution": [[227, "compound-distribution"]], "Interface": [[227, "interface"]], "N-dim array": [[228, "module-sympy.tensor.array"]], "Products and contractions": [[228, "products-and-contractions"]], "Diagonal operator": [[228, "diagonal-operator"]], "Derivatives by array": [[228, "derivatives-by-array"]], "Classes": [[228, "classes"]], "N-dim array expressions": [[229, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[229, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[229, "compatibility-with-matrices"]], "Tensor": [[230, "module-sympy.tensor"], [233, "module-sympy.tensor.tensor"]], "Methods": [[231, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[232, "module-sympy.tensor.indexed"]], "Tensor Operators": [[234, "module-sympy.tensor.toperators"]], "Testing": [[235, "testing"]], "pytest": [[236, "module-sympy.testing.pytest"]], "Randomised Testing": [[237, "module-sympy.testing.randtest"]], "Run Tests": [[238, "module-sympy.testing.runtests"]], "Autowrap Module": [[239, "autowrap-module"]], "Implementation details": [[239, "implementation-details"]], "Codegen": [[240, "codegen"]], "Implementation Details": [[240, "implementation-details"]], "Routine": [[240, "routine"]], "Decorator": [[241, "module-sympy.utilities.decorator"]], "Enumerative": [[242, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[243, "module-sympy.utilities.exceptions"]], "Iterables": [[245, "module-sympy.utilities.iterables"]], "variations": [[245, "variations"]], "partitions": [[245, "partitions"]], "Memoization": [[247, "module-sympy.utilities.memoization"]], "PKGDATA": [[249, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[250, "module-sympy.utilities.source"]], "Timing Utilities": [[251, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[252, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[253, "vector-api"]], "Orienter classes (docstrings)": [[254, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[255, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[256, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[256, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[256, "sympy-operations-on-vectors"]], "Dyadics": [[256, "dyadics"]], "More about Coordinate Systems": [[257, "more-about-coordinate-systems"]], "Locating new systems": [[257, "locating-new-systems"]], "Orienting new systems": [[257, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[257, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[257, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[257, "orienting-and-locating-new-systems"]], "Transforming new system": [[257, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[257, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[257, "vectors-and-dyadics"]], "Coordinate Variables": [[257, "coordinate-variables"]], "Other expression-dependent methods": [[257, "other-expression-dependent-methods"]], "General examples of usage": [[258, "general-examples-of-usage"]], "Quadrilateral problem": [[258, "quadrilateral-problem"]], "The Problem": [[258, "the-problem"], [258, "id1"]], "Solution": [[258, "solution"], [258, "id2"]], "Third product rule for Del operator": [[258, "third-product-rule-for-del-operator"]], "See": [[258, "see"]], "Implementation in sympy.vector": [[259, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[259, "scalar-and-vector-fields"]], "The Del operator": [[259, "the-del-operator"]], "Field operators and related functions": [[259, "field-operators-and-related-functions"]], "Directional Derivative": [[259, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[259, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[260, "references-for-vector"]], "Coordinate Systems": [[261, "coordinate-systems"]], "Applications of Vector Integrals": [[262, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[262, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[262, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[262, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[262, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[262, "verifying-divergence-theorem"]], "Physics": [[263, "physics"], [269, "module-sympy.physics"]], "Topics": [[263, "topics"], [270, "topics"]], "Introductory Tutorial": [[272, "introductory-tutorial"], [277, "introductory-tutorial"]], "Basic Operations": [[273, "basic-operations"], [280, "basic-operations"]], "Quick Tip": [[273, null], [274, null], [276, null], [279, null], [280, null]], "Converting Strings to SymPy Expressions": [[273, "converting-strings-to-sympy-expressions"]], "Derivatives": [[274, "derivatives"]], "Series Expansion": [[274, "series-expansion"]], "Finite differences": [[274, "finite-differences"]], "SymPy Features": [[275, "sympy-features"]], "Equals signs": [[276, "equals-signs"]], "Two Final Notes: ^ and /": [[276, "two-final-notes-and"]], "Further Reading": [[276, "further-reading"]], "What is Symbolic Computation?": [[278, "what-is-symbolic-computation"]], "A More Interesting Example": [[278, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[278, "the-power-of-symbolic-computation"]], "Why SymPy?": [[278, "why-sympy"]], "Advanced Expression Manipulation": [[279, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[279, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[279, "recursing-through-an-expression-tree"]], "args": [[279, "args"]], "Key Invariant": [[279, null]], "Walking the Tree": [[279, "walking-the-tree"]], "Prevent expression evaluation": [[279, "prevent-expression-evaluation"]], "Shape": [[280, "shape"]], "Accessing Rows and Columns": [[280, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[280, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[280, "basic-methods"]], "Matrix Constructors": [[280, "matrix-constructors"]], "Advanced Methods": [[280, "advanced-methods"]], "Determinant": [[280, "determinant"]], "RREF": [[280, "rref"]], "Nullspace": [[280, "nullspace"]], "Columnspace": [[280, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[280, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[280, "possible-issues"]], "Zero Testing": [[280, "zero-testing"]], "What\u2019s Next": [[281, "whats-next"]], "Preliminaries": [[282, "preliminaries"]], "Exercises": [[282, "exercises"]], "Printers": [[283, "printers"]], "Setting up Pretty Printing": [[283, "setting-up-pretty-printing"]], "Printing Functions": [[283, "printing-functions"]], "str": [[283, "str"]], "ASCII Pretty Printer": [[283, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[283, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[283, "mathrm-latex"]], "MathML": [[283, "mathml"]], "Dot": [[283, "dot"]], "Simplification": [[284, "simplification"]], "simplify": [[284, "simplify"]], "Polynomial/Rational Function Simplification": [[284, "polynomial-rational-function-simplification"]], "expand": [[284, "expand"]], "factor": [[284, "factor"]], "collect": [[284, "collect"]], "cancel": [[284, "cancel"]], "apart": [[284, "apart"]], "Trigonometric Simplification": [[284, "trigonometric-simplification"]], "trigsimp": [[284, "trigsimp"]], "expand_trig": [[284, "expand-trig"]], "Powers": [[284, "powers"]], "powsimp": [[284, "powsimp"]], "expand_power_exp / expand_power_base": [[284, "expand-power-exp-expand-power-base"]], "powdenest": [[284, "powdenest"]], "Exponentials and logarithms": [[284, "exponentials-and-logarithms"]], "expand_log": [[284, "expand-log"]], "logcombine": [[284, "logcombine"]], "Special Functions": [[284, "special-functions"]], "rewrite": [[284, "rewrite"]], "expand_func": [[284, "expand-func"]], "hyperexpand": [[284, "hyperexpand"]], "combsimp": [[284, "combsimp"]], "gammasimp": [[284, "gammasimp"]], "Example: Continued Fractions": [[284, "example-continued-fractions"]], "A Note about Equations": [[285, "a-note-about-equations"]], "Solving Equations Algebraically": [[285, "solving-equations-algebraically"]], "Solving Differential Equations": [[285, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [29, "module-sympy"], [31, "module-sympy.abc"], [32, "module-sympy.algebras"], [33, "module-sympy.assumptions.ask"], [34, "module-sympy.assumptions.assume"], [35, "module-sympy.assumptions"], [36, "module-sympy.assumptions.predicates"], [37, "module-sympy.assumptions.refine"], [38, "module-sympy.calculus"], [38, "module-sympy.calculus.euler"], [38, "module-sympy.calculus.finite_diff"], [38, "module-sympy.calculus.singularities"], [38, "module-sympy.calculus.util"], [39, "module-sympy.categories"], [39, "module-sympy.categories.diagram_drawing"], [40, "module-sympy.codegen.algorithms"], [40, "module-sympy.codegen.approximations"], [40, "module-sympy.codegen.ast"], [40, "module-sympy.codegen.cfunctions"], [40, "module-sympy.codegen.cnodes"], [40, "module-sympy.codegen.cutils"], [40, "module-sympy.codegen.cxxnodes"], [40, "module-sympy.codegen.fnodes"], [40, "module-sympy.codegen.futils"], [40, "module-sympy.codegen.matrix_nodes"], [40, "module-sympy.codegen.pyutils"], [40, "module-sympy.codegen.rewriting"], [42, "module-sympy.combinatorics.graycode"], [43, "module-sympy.combinatorics.group_constructs"], [44, "module-sympy.combinatorics.group_numbers"], [46, "module-sympy.combinatorics.named_groups"], [47, "module-sympy.combinatorics.partitions"], [49, "module-sympy.combinatorics.perm_groups"], [50, "module-sympy.combinatorics.generators"], [50, "module-sympy.combinatorics.permutations"], [51, "module-sympy.combinatorics.polyhedron"], [52, "module-sympy.combinatorics.prufer"], [53, "module-sympy.combinatorics.subsets"], [54, "module-sympy.combinatorics.tensor_can"], [55, "module-sympy.combinatorics.testutil"], [56, "module-sympy.combinatorics.util"], [58, "module-sympy.core.add"], [58, "module-sympy.core.assumptions"], [58, "module-sympy.core.basic"], [58, "module-sympy.core.cache"], [58, "module-sympy.core.containers"], [58, "module-sympy.core.evalf"], [58, "module-sympy.core.expr"], [58, "module-sympy.core.exprtools"], [58, "module-sympy.core.function"], [58, "module-sympy.core.kind"], [58, "module-sympy.core.mod"], [58, "module-sympy.core.mul"], [58, "module-sympy.core.multidimensional"], [58, "module-sympy.core.numbers"], [58, "module-sympy.core.power"], [58, "module-sympy.core.random"], [58, "module-sympy.core.relational"], [58, "module-sympy.core.singleton"], [58, "module-sympy.core.symbol"], [58, "module-sympy.core.sympify"], [58, "module-sympy.core.traversal"], [59, "module-sympy.crypto.crypto"], [60, "module-sympy.diffgeom"], [61, "module-sympy.discrete"], [61, "module-sympy.discrete.convolutions"], [61, "module-sympy.discrete.transforms"], [65, "module-sympy.functions"], [66, "module-sympy.functions.special.bessel"], [66, "module-sympy.functions.special.beta_functions"], [66, "module-sympy.functions.special.elliptic_integrals"], [66, "module-sympy.functions.special.error_functions"], [66, "module-sympy.functions.special.gamma_functions"], [66, "module-sympy.functions.special.mathieu_functions"], [66, "module-sympy.functions.special.polynomials"], [66, "module-sympy.functions.special.singularity_functions"], [66, "module-sympy.functions.special.zeta_functions"], [67, "module-sympy.geometry.curve"], [68, "module-sympy.geometry.ellipse"], [69, "module-sympy.geometry.entity"], [71, "module-sympy.geometry.line"], [72, "module-sympy.geometry.plane"], [73, "module-sympy.geometry.point"], [74, "module-sympy.geometry.polygon"], [75, "module-sympy.geometry.util"], [78, "module-sympy.holonomic"], [83, "module-sympy.integrals.meijerint"], [83, "module-sympy.integrals.meijerint_doc"], [85, "module-sympy.integrals"], [85, "module-sympy.integrals.intpoly"], [85, "module-sympy.integrals.transforms"], [86, "module-sympy.interactive"], [86, "module-sympy.interactive.printing"], [86, "module-sympy.interactive.session"], [87, "module-sympy.liealgebras"], [88, "module-sympy.logic"], [88, "module-sympy.logic.inference"], [89, "module-sympy.matrices.common"], [91, "module-sympy.matrices.expressions"], [91, "module-sympy.matrices.expressions.blockmatrix"], [92, "module-sympy.matrices.immutable"], [93, "module-sympy.matrices"], [94, "module-sympy.matrices.matrices"], [96, "module-sympy.matrices.sparse"], [97, "module-sympy.matrices.sparsetools"], [98, "module-sympy.ntheory.bbp_pi"], [98, "module-sympy.ntheory.continued_fraction"], [98, "module-sympy.ntheory.digits"], [98, "module-sympy.ntheory.ecm"], [98, "module-sympy.ntheory.egyptian_fraction"], [98, "module-sympy.ntheory.factor_"], [98, "module-sympy.ntheory.generate"], [98, "module-sympy.ntheory.modular"], [98, "module-sympy.ntheory.multinomial"], [98, "module-sympy.ntheory.partitions_"], [98, "module-sympy.ntheory.primetest"], [98, "module-sympy.ntheory.qs"], [98, "module-sympy.ntheory.residue_ntheory"], [100, "module-sympy.parsing"], [100, "module-sympy.parsing.sym_expr"], [101, "module-sympy.physics.continuum_mechanics.beam"], [104, "module-sympy.physics.continuum_mechanics.truss"], [107, "module-sympy.physics.control"], [108, "module-sympy.physics.control.lti"], [109, "module-sympy.physics.hep.gamma_matrices"], [110, "module-sympy.physics.hydrogen"], [111, "module-sympy.physics.matrices"], [113, "module-sympy.physics.mechanics.body"], [116, "module-sympy.physics.mechanics.joint"], [116, "module-sympy.physics.mechanics.jointsmethod"], [117, "module-sympy.physics.mechanics.kane"], [117, "module-sympy.physics.mechanics.lagrange"], [118, "module-sympy.physics.mechanics.linearize"], [119, "module-sympy.physics.mechanics.particle"], [119, "module-sympy.physics.mechanics.rigidbody"], [121, "module-sympy.physics.mechanics.system"], [132, "module-sympy.physics.mechanics"], [141, "module-sympy.physics.optics.gaussopt"], [143, "module-sympy.physics.optics.medium"], [144, "module-sympy.physics.optics.polarization"], [145, "module-sympy.physics.optics.utils"], [146, "module-sympy.physics.optics.waves"], [147, "module-sympy.physics.paulialgebra"], [148, "module-sympy.physics.qho_1d"], [149, "module-sympy.physics.quantum.anticommutator"], [150, "module-sympy.physics.quantum.cartesian"], [151, "module-sympy.physics.quantum.cg"], [152, "module-sympy.physics.quantum.circuitplot"], [153, "module-sympy.physics.quantum.commutator"], [154, "module-sympy.physics.quantum.constants"], [155, "module-sympy.physics.quantum.dagger"], [156, "module-sympy.physics.quantum.gate"], [157, "module-sympy.physics.quantum.grover"], [158, "module-sympy.physics.quantum.hilbert"], [160, "module-sympy.physics.quantum.innerproduct"], [161, "module-sympy.physics.quantum.operator"], [162, "module-sympy.physics.quantum.operatorset"], [163, "module-sympy.physics.quantum.piab"], [164, "module-sympy.physics.quantum.qapply"], [165, "module-sympy.physics.quantum.qft"], [166, "module-sympy.physics.quantum.qubit"], [167, "module-sympy.physics.quantum.represent"], [168, "module-sympy.physics.quantum.shor"], [169, "module-sympy.physics.quantum.spin"], [170, "module-sympy.physics.quantum.state"], [171, "module-sympy.physics.quantum.tensorproduct"], [172, "module-sympy.physics.secondquant"], [173, "module-sympy.physics.sho"], [174, "module-sympy.physics.units.dimensions"], [178, "module-sympy.physics.units.prefixes"], [179, "module-sympy.physics.units.quantities"], [179, "module-sympy.physics.units.util"], [180, "module-sympy.physics.units.unitsystem"], [186, "module-sympy.physics.vector.functions"], [186, "module-sympy.physics.vector.point"], [189, "module-sympy.physics.vector"], [192, "module-sympy.physics.wigner"], [193, "module-sympy.plotting.plot"], [193, "module-sympy.plotting.pygletplot"], [200, "module-sympy.polys.polyconfig"], [200, "module-sympy.polys.polyoptions"], [202, "module-sympy.polys.numberfields.modules"], [202, "module-sympy.polys.numberfields.subfield"], [203, "module-sympy.polys"], [205, "module-sympy.polys.solvers"], [207, "module-sympy.printing.aesaracode"], [207, "module-sympy.printing.c"], [207, "module-sympy.printing.codeprinter"], [207, "module-sympy.printing.conventions"], [207, "module-sympy.printing.cxx"], [207, "module-sympy.printing.fortran"], [207, "module-sympy.printing.gtk"], [207, "module-sympy.printing.jscode"], [207, "module-sympy.printing.julia"], [207, "module-sympy.printing.lambdarepr"], [207, "module-sympy.printing.latex"], [207, "module-sympy.printing.maple"], [207, "module-sympy.printing.mathematica"], [207, "module-sympy.printing.mathml"], [207, "module-sympy.printing.octave"], [207, "module-sympy.printing.precedence"], [207, "module-sympy.printing.pretty"], [207, "module-sympy.printing.pretty.pretty"], [207, "module-sympy.printing.pretty.pretty_symbology"], [207, "module-sympy.printing.pretty.stringpict"], [207, "module-sympy.printing.preview"], [207, "module-sympy.printing.printer"], [207, "module-sympy.printing.pycode"], [207, "module-sympy.printing.python"], [207, "module-sympy.printing.rcode"], [207, "module-sympy.printing.repr"], [207, "module-sympy.printing.rust"], [207, "module-sympy.printing.smtlib"], [207, "module-sympy.printing.str"], [207, "module-sympy.printing.tree"], [215, "module-sympy.sets.conditionset"], [215, "module-sympy.sets.fancysets"], [215, "module-sympy.sets.powerset"], [215, "module-sympy.sets.sets"], [217, "module-sympy.simplify.hyperexpand_doc"], [219, "module-sympy.simplify.combsimp"], [219, "module-sympy.simplify.cse_main"], [219, "module-sympy.simplify.epathtools"], [219, "module-sympy.simplify.hyperexpand"], [219, "module-sympy.simplify.powsimp"], [219, "module-sympy.simplify.radsimp"], [219, "module-sympy.simplify.ratsimp"], [219, "module-sympy.simplify.sqrtdenest"], [219, "module-sympy.simplify.trigsimp"], [222, "module-sympy.solvers.inequalities"], [223, "module-sympy.solvers.ode"], [223, "module-sympy.solvers.ode.ode"], [224, "module-sympy.solvers.pde"], [225, "module-sympy.solvers"], [225, "module-sympy.solvers.recurr"], [226, "module-sympy.solvers.solveset"], [227, "module-sympy.stats"], [227, "module-sympy.stats.crv"], [227, "module-sympy.stats.crv_types"], [227, "module-sympy.stats.frv"], [227, "module-sympy.stats.frv_types"], [227, "module-sympy.stats.rv"], [228, "module-sympy.tensor.array"], [229, "module-sympy.tensor.array.expressions"], [230, "module-sympy.tensor"], [231, "module-sympy.tensor.index_methods"], [232, "module-sympy.tensor.indexed"], [233, "module-sympy.tensor.tensor"], [234, "module-sympy.tensor.toperators"], [235, "module-sympy.testing"], [236, "module-sympy.testing.pytest"], [237, "module-sympy.testing.randtest"], [238, "module-sympy.testing.runtests"], [239, "module-sympy.utilities.autowrap"], [240, "module-sympy.utilities.codegen"], [241, "module-sympy.utilities.decorator"], [242, "module-sympy.utilities.enumerative"], [243, "module-sympy.utilities.exceptions"], [244, "module-sympy.utilities"], [245, "module-sympy.utilities.iterables"], [246, "module-sympy.utilities.lambdify"], [247, "module-sympy.utilities.memoization"], [248, "module-sympy.utilities.misc"], [249, "module-sympy.utilities.pkgdata"], [250, "module-sympy.utilities.source"], [251, "module-sympy.utilities.timeutils"], [260, "module-sympy.vector"], [269, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[29, "module-sympy"]], "sympy.abc": [[31, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[32, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[32, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[32, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[32, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[32, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[32, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[32, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[33, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[33, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[33, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[33, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[33, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[34, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[34, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[34, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[34, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[34, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[34, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[34, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[34, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[34, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[34, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[34, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[34, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[34, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[34, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[35, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[36, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[36, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[36, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[36, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[36, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[36, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[36, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[36, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[36, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[36, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[36, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[36, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[36, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[36, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[36, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[36, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[36, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[36, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[36, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[36, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[36, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[36, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[36, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[36, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[36, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[36, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[36, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[36, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[36, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[36, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[36, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[36, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[36, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[36, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[37, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[37, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[38, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[38, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[38, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[38, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[38, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[38, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[38, "module-sympy.calculus"]], "sympy.calculus.euler": [[38, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[38, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[38, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[38, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[39, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[39, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[39, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[39, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[39, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[39, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[39, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[39, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[39, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[39, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[39, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[39, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[39, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[39, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[39, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[39, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[39, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[39, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[39, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[39, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[39, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[39, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[39, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[39, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[39, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[39, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[39, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[39, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[39, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[39, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[39, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[39, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[39, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[39, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[39, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[40, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[40, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[40, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[40, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[40, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[40, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[40, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[40, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[40, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[40, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[40, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[40, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[40, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[40, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[40, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[40, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[40, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[40, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[40, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[40, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[40, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[40, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[40, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[40, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[40, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[40, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[40, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[40, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[40, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[40, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[40, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[40, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[40, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[40, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[40, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[40, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[40, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[40, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[40, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[40, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[40, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[40, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[40, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[40, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[40, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[40, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[40, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[40, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[40, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[40, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[40, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[40, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[42, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[42, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[42, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[42, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[42, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[42, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[42, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[42, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[42, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[42, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[42, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[42, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[42, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[42, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[42, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[43, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[43, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[44, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[44, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[44, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[44, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[46, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[46, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[46, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[46, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[46, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[46, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[47, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[47, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[47, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[47, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[47, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[47, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[47, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[47, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[47, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[47, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[47, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[47, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[49, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[49, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[50, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[50, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[50, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[50, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[50, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[50, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[50, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[50, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[50, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[50, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[50, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[50, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[50, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[50, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[51, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[51, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[51, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[52, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[52, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[52, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[52, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[52, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[52, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[52, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[52, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[52, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[52, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[52, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[52, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[52, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[52, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[53, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[53, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[53, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[53, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[53, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[53, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[53, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[53, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[53, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[53, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[54, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[54, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[54, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[54, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[54, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[55, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[55, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[55, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[55, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[55, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[55, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[56, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[56, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[57, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[57, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[57, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[57, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[57, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[57, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[57, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[57, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[57, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[57, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[57, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[57, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[57, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[57, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[57, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[57, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[57, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[57, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[57, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[57, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[58, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[58, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[58, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[58, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[58, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[58, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[58, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[58, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[58, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[58, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[58, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[58, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[58, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[58, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[58, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[58, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[58, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[58, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[58, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[58, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[58, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[58, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[58, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[58, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[58, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[58, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[58, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[58, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[58, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[58, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[58, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[58, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[58, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[58, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[58, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[58, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[58, "sympy.core.numbers.One"]], "pep 335": [[58, "index-0"], [58, "index-1"], [58, "index-2"], [58, "index-3"]], "pi (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[58, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[58, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[58, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[58, "index-0"], [58, "index-1"], [58, "index-2"], [58, "index-3"]], "rational (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[58, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[58, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[58, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[58, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[58, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[58, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[58, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[58, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[58, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[58, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[58, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[58, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[58, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[58, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[58, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[58, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[58, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[58, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[58, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[58, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[58, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[58, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[58, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[58, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[58, "term-algebraic"]], "antihermitian": [[58, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[58, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[58, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[58, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[58, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.as_coeff_Add"], [58, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_coeff_Add"], [58, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[58, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[58, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_coeff_Mul"], [58, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[58, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[58, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[58, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[58, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[58, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[58, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[58, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[58, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[58, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[58, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[58, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[58, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[58, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[58, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[58, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[58, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[58, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[58, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.combsimp"]], "commutative": [[58, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.compare"]], "complex": [[58, "term-complex"]], "composite": [[58, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[58, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[58, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[58, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[58, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[58, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[58, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[58, "term-even"]], "expand() (in module sympy.core.function)": [[58, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[58, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[58, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[58, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[58, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[58, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[58, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[58, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[58, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[58, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[58, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[58, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[58, "term-extended_negative"]], "extended_nonnegative": [[58, "term-extended_nonnegative"]], "extended_nonpositive": [[58, "term-extended_nonpositive"]], "extended_nonzero": [[58, "term-extended_nonzero"]], "extended_positive": [[58, "term-extended_positive"]], "extended_real": [[58, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[58, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[58, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[58, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.find"]], "finite": [[58, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[58, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[58, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[58, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[58, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[58, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[58, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[58, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[58, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[58, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[58, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[58, "sympy.core.numbers.ilcm"]], "imaginary": [[58, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[58, "sympy.core.containers.Tuple.index"]], "infinite": [[58, "term-infinite"]], "integer": [[58, "term-integer"]], "integer_log() (in module sympy.core.power)": [[58, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[58, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[58, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.invert"]], "irrational": [[58, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[58, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[58, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[58, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[58, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[58, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[58, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[58, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[58, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[58, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[58, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[58, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[58, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[58, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[58, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.negated"]], "negative": [[58, "term-negative"]], "nfloat() (in module sympy.core.function)": [[58, "sympy.core.function.nfloat"]], "nonnegative": [[58, "term-nonnegative"]], "nonpositive": [[58, "term-nonpositive"]], "nonzero": [[58, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.nsimplify"]], "odd": [[58, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[58, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[58, "sympy.core.function.Subs.point"]], "positive": [[58, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[58, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[58, "sympy.core.traversal.preorder_traversal"]], "prime": [[58, "term-prime"]], "primitive() (sympy.core.add.add method)": [[58, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[58, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[58, "sympy.core.random.random_complex_number"]], "rational": [[58, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.rcall"]], "real": [[58, "term-real"]], "refine() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[58, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[58, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[58, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[58, "sympy.core.sympify.sympify"]], "sympy.core.add": [[58, "module-sympy.core.add"]], "sympy.core.assumptions": [[58, "module-sympy.core.assumptions"]], "sympy.core.basic": [[58, "module-sympy.core.basic"]], "sympy.core.cache": [[58, "module-sympy.core.cache"]], "sympy.core.containers": [[58, "module-sympy.core.containers"]], "sympy.core.evalf": [[58, "module-sympy.core.evalf"]], "sympy.core.expr": [[58, "module-sympy.core.expr"]], "sympy.core.exprtools": [[58, "module-sympy.core.exprtools"]], "sympy.core.function": [[58, "module-sympy.core.function"]], "sympy.core.kind": [[58, "module-sympy.core.kind"]], "sympy.core.mod": [[58, "module-sympy.core.mod"]], "sympy.core.mul": [[58, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[58, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[58, "module-sympy.core.numbers"]], "sympy.core.power": [[58, "module-sympy.core.power"]], "sympy.core.random": [[58, "module-sympy.core.random"]], "sympy.core.relational": [[58, "module-sympy.core.relational"]], "sympy.core.singleton": [[58, "module-sympy.core.singleton"]], "sympy.core.symbol": [[58, "module-sympy.core.symbol"]], "sympy.core.sympify": [[58, "module-sympy.core.sympify"]], "sympy.core.traversal": [[58, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[58, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[58, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.together"]], "transcendental": [[58, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[58, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[58, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[58, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[58, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[58, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[58, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[58, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[58, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[58, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[58, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[58, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[58, "sympy.core.basic.Basic.xreplace"]], "zero": [[58, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[59, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[59, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[60, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[60, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[60, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[60, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[60, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[60, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[60, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[60, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[60, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[60, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[60, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[60, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[60, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[60, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[60, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[60, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[60, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[60, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[61, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[61, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[61, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[61, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[61, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[63, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[63, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[64, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[64, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[64, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[64, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[64, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[64, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[64, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[64, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[64, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[64, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[64, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[64, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[64, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[64, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[64, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[64, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[64, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[64, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[64, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[64, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[64, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[64, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[64, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[64, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[64, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[64, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[64, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[64, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[64, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[64, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[64, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[64, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[64, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[64, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[64, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[64, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[64, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[64, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[64, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[64, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[64, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[64, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[64, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[64, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[64, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[64, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[64, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[64, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[64, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[64, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[64, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[64, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[64, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[64, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[64, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[64, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[64, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[64, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[65, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[66, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[66, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[66, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[66, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.Li"], [66, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[66, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[66, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[66, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[66, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[66, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[66, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[66, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[66, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[66, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[66, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[66, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[66, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[66, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[66, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[66, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[66, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[66, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[66, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[66, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[66, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[66, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[66, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[66, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[66, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[66, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[66, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[66, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[66, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[66, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[66, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[66, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[66, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[66, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[66, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[66, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[66, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[66, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[66, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[66, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[66, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[66, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[66, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[66, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[66, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[66, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[66, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[66, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[66, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[66, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[66, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[66, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[66, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[66, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[66, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[66, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[66, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[66, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[66, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[66, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[66, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[66, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[66, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[66, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[67, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[67, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[67, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[67, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[67, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[67, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[67, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[67, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[67, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[67, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[67, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[67, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[67, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[68, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[68, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[68, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[68, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[68, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[68, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[68, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[68, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[68, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[68, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[68, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[68, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[69, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[69, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[69, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[69, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[69, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[71, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[71, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[71, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[71, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[71, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[71, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[71, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[71, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[71, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[71, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[71, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[71, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[71, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[71, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[71, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[71, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[71, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[71, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[71, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[71, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[71, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[71, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[71, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[71, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[71, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[71, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[71, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[71, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[71, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[71, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[71, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[71, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[71, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[71, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[71, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[71, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[71, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[71, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[71, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[71, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[71, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[72, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[72, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[72, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[72, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[72, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[72, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[73, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[73, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[73, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[73, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[73, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[73, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[73, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[73, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[73, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[73, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[73, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[73, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[73, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[73, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[73, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[73, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[73, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[73, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[73, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[73, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[73, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[73, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[73, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[73, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[73, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[73, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[73, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[73, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[74, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[74, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[74, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[74, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[74, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[74, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[74, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[74, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[74, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[74, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[74, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[74, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[74, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[74, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[74, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[74, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[74, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[74, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[74, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[75, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[75, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[75, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[75, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[75, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[75, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[77, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[77, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[77, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[78, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[80, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[81, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[83, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[83, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[83, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[83, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[85, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[85, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[85, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[85, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[85, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[85, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[85, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[85, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[85, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[85, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[85, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[85, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[85, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[85, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[85, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[85, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[85, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[85, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[85, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[85, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[85, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[85, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[85, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[85, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[85, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[85, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[85, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[85, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[85, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[85, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[85, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[85, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[85, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[86, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[86, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[86, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[86, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[86, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[86, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[86, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[86, "module-sympy.interactive"]], "sympy.interactive.printing": [[86, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[86, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[87, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[87, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[87, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[87, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[87, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[87, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[87, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[87, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[87, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[87, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[87, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[87, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[87, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[87, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[87, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[87, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[87, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[87, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[87, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[87, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[87, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[87, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[87, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[87, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[87, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[87, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[87, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[87, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[87, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[87, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[88, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[88, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[88, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[88, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[88, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[88, "module-sympy.logic"]], "sympy.logic.inference": [[88, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[88, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[89, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[89, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[89, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[89, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[89, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[89, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[89, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[90, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[90, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[90, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[90, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[90, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[90, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[90, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[90, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[90, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[90, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[91, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[91, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[91, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[91, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[91, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[91, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[91, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[91, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[91, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[91, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[91, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[91, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[91, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[91, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[91, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[91, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[91, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[91, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[92, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[92, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[92, "module-sympy.matrices.immutable"]], "sympy.matrices": [[93, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[94, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[94, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[94, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[94, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[94, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[94, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[94, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[94, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[94, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[94, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[94, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[94, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[94, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[94, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[94, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[94, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[94, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[94, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[94, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[94, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[94, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[94, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[94, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[94, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[94, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[94, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[95, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[95, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[96, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[96, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[96, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[96, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[97, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[97, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[97, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[97, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[98, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[98, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[98, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[98, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[98, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[98, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[98, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[98, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[98, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[98, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[98, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[98, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[98, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[98, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[98, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[98, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[98, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[98, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[98, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[98, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[98, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[98, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[98, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[98, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[98, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[98, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[98, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[98, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[98, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[98, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[98, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[98, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[98, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[98, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[98, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[98, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[98, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[98, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[98, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[98, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[98, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[98, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[98, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[98, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[98, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[98, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[100, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[100, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[100, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[100, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[100, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[100, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[100, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[100, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[100, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[100, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[100, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[100, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[100, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[101, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[101, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[101, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[101, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[104, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[104, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[104, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[106, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[107, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[108, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[108, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[108, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[108, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[108, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[108, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[108, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[108, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[108, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[108, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[108, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[108, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[108, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[108, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[108, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[108, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[108, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[108, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[108, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[108, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[108, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[108, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[108, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[108, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[108, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[108, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[108, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[108, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[108, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[108, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[108, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[108, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[108, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[108, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[108, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[108, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[108, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[108, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[108, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[108, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[108, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[108, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[108, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[108, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[108, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[108, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[108, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[108, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[108, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[109, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[109, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[109, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[109, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[109, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[110, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[110, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[110, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[110, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[110, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[111, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[111, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[111, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[111, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[111, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[113, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[113, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[113, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[113, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[113, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[113, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[113, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[114, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[114, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[116, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[116, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[116, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[116, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[116, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[116, "sympy.physics.mechanics.joint.SphericalJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[116, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[116, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[116, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[116, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[116, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[116, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[116, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[116, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[116, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[116, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[116, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[116, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[116, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[116, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[116, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[116, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[116, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[117, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[117, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[117, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[117, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[117, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[117, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[117, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[117, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[117, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[117, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[118, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[118, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[118, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[119, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[119, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[119, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[119, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[119, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[119, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[119, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[119, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[119, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[119, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[119, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[119, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[121, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[121, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[121, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[132, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[141, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[141, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[141, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[141, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[141, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[141, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[141, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[141, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[141, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[143, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[143, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[143, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[143, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[144, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[144, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[145, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[145, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[146, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[146, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[146, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[147, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[147, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[148, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[148, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[148, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[148, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[149, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[149, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[149, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[150, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[150, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[150, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[150, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[150, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[150, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[150, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[150, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[150, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[151, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[151, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[151, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[151, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[151, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[151, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[152, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[152, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[152, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[152, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[152, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[152, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[152, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[153, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[153, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[153, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[154, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[154, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[155, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[155, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[156, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[156, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[156, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[156, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[156, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[156, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[156, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[156, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[156, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[156, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[156, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[156, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[156, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[156, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[156, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[156, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[156, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[156, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[156, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[156, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[156, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[157, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[157, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[157, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[157, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[157, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[157, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[157, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[157, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[158, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[158, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[158, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[158, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[158, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[158, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[158, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[160, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[160, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[161, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[161, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[161, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[161, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[161, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[161, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[161, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[161, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[161, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[161, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[161, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[161, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[161, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[162, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[162, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[162, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[163, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[163, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[163, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[163, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[164, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[164, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[165, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[165, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[165, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[165, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[165, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[165, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[165, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[166, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[166, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[167, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[167, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[167, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[167, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[167, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[167, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[167, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[168, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[168, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[168, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[168, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[168, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[168, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[168, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[169, "sympy.physics.quantum.spin.Rotation.D"], [169, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[169, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[169, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[170, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[170, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[170, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[170, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[170, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[170, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[170, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[170, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[170, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[170, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[170, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[170, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[170, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[170, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[170, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[171, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[171, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[171, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[172, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[172, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[172, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[172, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[172, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[172, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[172, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[172, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[172, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[172, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[172, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[172, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[172, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[172, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[172, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[172, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[172, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[172, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[172, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[172, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[172, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[172, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[172, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[172, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[172, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[172, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[172, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[172, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[172, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[172, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[172, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[172, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[172, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[172, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[172, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[173, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[173, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[173, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[174, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[174, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[174, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[174, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[174, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[174, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[174, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[174, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[174, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[174, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[174, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[174, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[174, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[178, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[178, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[179, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[179, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[179, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[179, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[179, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[179, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[179, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[179, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[179, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[179, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[180, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[180, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[180, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[180, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[180, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[180, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[182, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[182, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[182, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[182, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[182, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[182, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[182, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[182, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[182, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[182, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[182, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[182, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[183, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[184, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[186, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[186, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[186, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[186, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[187, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[187, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[187, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[187, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[189, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[192, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[192, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[193, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[193, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[193, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[193, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[193, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[193, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[193, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[193, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[193, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[193, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[193, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[193, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[193, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[193, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[193, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[193, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[193, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[193, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[194, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[194, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[194, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[194, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[194, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[194, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[194, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[194, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[194, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[194, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[194, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[194, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[194, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[194, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[194, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[194, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[194, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[194, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[194, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[194, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[194, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[194, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[194, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[196, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[196, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[196, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[196, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[196, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[196, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[196, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[196, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[196, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[196, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[196, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[196, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[198, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[198, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[198, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[198, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[198, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[198, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[198, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[198, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[198, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[198, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[198, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[198, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[198, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[198, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[198, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[198, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[198, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[198, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[198, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[198, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[198, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[198, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[198, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[198, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[198, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[198, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[198, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[198, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[198, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[198, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[198, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[198, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[198, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[198, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[198, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[198, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[198, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[198, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[198, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[198, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[198, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[198, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[198, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[198, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[198, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[198, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[198, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[198, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[198, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[198, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[198, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[198, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[198, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[198, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[198, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[198, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[198, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[198, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[198, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[198, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[198, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[198, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[198, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[198, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[198, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[198, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[198, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[198, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[198, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[198, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[198, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[198, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[198, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[198, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[198, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[198, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[200, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[200, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[200, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[200, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[200, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[200, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[200, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[200, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[200, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[200, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[200, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[200, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[200, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[200, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[200, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[200, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[200, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[200, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[200, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[200, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[200, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[200, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[200, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[200, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[200, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[200, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[202, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[202, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[202, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[202, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[202, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[202, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[202, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[202, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[202, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[202, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[202, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[202, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[202, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[202, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[202, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[202, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[202, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[202, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[202, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[202, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[202, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[202, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[202, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[202, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[202, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[202, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[202, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[202, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[202, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[202, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[202, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[202, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[202, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[202, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[202, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[202, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[202, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[203, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[203, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[203, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[203, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[203, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[203, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[203, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[203, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[203, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[203, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[203, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[203, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[203, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[203, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[203, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[203, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[203, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[203, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[203, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[203, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[203, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[203, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[203, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[203, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[203, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[203, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[203, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[203, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[203, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[203, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[203, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[203, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[203, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[203, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[203, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[203, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[203, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[203, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[203, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[203, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[203, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[203, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[203, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[203, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[203, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[203, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[203, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[203, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[203, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[203, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[203, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[203, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[203, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[203, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[203, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[203, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[203, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[204, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[205, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[205, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[205, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[205, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[205, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[205, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[207, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[207, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[207, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[207, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[207, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[207, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[207, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[207, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.G"], [207, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[207, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[207, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[207, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[207, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[207, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[207, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[207, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[207, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[207, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[207, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[207, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[207, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[207, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[207, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[207, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[207, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[207, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[207, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[207, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[207, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[207, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[207, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[207, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[207, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[207, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[207, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[207, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[207, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[207, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[207, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[207, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[207, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[207, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[207, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[207, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[207, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[207, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[207, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[207, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[207, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[207, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[207, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[207, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[207, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[207, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[207, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[207, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[207, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[207, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[207, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[207, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[207, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[207, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[207, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[207, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[207, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[207, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[207, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[207, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[207, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[207, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[207, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[207, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[207, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[207, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[207, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[207, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[207, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[207, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[207, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[207, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[207, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[207, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[207, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[207, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[207, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[207, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[207, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[207, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[207, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[207, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[207, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[207, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[207, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[207, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[207, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[207, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[207, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[207, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[207, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[207, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[207, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[207, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[207, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[207, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[207, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[207, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[207, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[207, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[207, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[207, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[207, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[207, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[207, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[207, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[207, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[207, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[207, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[207, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[207, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[207, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[207, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[207, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[207, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[207, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[207, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[207, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[207, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[207, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[207, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[207, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[207, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[207, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[207, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[207, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[207, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[207, "module-sympy.printing.latex"]], "sympy.printing.maple": [[207, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[207, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[207, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[207, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[207, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[207, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[207, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[207, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[207, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[207, "module-sympy.printing.preview"]], "sympy.printing.printer": [[207, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[207, "module-sympy.printing.pycode"]], "sympy.printing.python": [[207, "module-sympy.printing.python"]], "sympy.printing.rcode": [[207, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[207, "module-sympy.printing.repr"]], "sympy.printing.rust": [[207, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[207, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[207, "module-sympy.printing.str"]], "sympy.printing.tree": [[207, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[207, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[207, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[207, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[209, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[209, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[209, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[209, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[209, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[209, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[209, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[209, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[209, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[209, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[209, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[209, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[209, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[209, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[209, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[209, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[209, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[209, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[209, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[209, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[210, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[210, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[210, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[210, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[210, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[210, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[210, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[210, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[212, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[212, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[212, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[213, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[213, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[213, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[213, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[213, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[213, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[213, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[213, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[213, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[213, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[213, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[213, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[213, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[213, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[213, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[213, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[213, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[213, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[214, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[214, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[214, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[214, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[214, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[214, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[214, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[214, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[214, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[214, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[214, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[214, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[214, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[214, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[214, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[215, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[215, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[215, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[215, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[215, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[215, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[215, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[215, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[215, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[215, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[215, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[215, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[215, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[215, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[215, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[215, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[215, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[215, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[215, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[215, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[215, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[215, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[215, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[215, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[215, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[215, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[215, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[215, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[215, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[215, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[215, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[215, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[215, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[215, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[215, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[215, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[215, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[215, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[215, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[215, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[215, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[215, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[215, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[215, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[215, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[215, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[215, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[216, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[217, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[219, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[219, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[219, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[219, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[219, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[219, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[219, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[219, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[219, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[219, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[219, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[219, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[219, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[219, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[219, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[219, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[219, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[219, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[219, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[219, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[219, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[219, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[219, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[219, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[219, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[219, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[220, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[220, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[222, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[222, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[223, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[223, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[223, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[223, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[223, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[223, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[223, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[223, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[224, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[224, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[225, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[225, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[225, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[225, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[225, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[225, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[225, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[225, "module-sympy.solvers"]], "sympy.solvers.recurr": [[225, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[225, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[226, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[226, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[227, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[227, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[227, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[227, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[227, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[227, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[227, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[227, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[227, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[227, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[227, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[227, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[227, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[227, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[227, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[227, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[227, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[227, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[227, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[227, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[227, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[227, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[227, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[227, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[227, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[227, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[227, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[227, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[227, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[227, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[227, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[227, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[227, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[227, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[227, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[227, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[227, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[227, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[227, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[227, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[227, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[227, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[227, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[227, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[227, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[227, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[227, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[227, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[227, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[227, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[227, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[227, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[227, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[227, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[227, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[227, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[227, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[227, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[227, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[227, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[227, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[227, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[227, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[227, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[227, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[227, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[227, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[227, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[227, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[227, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[227, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[227, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[227, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[227, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[227, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[227, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[227, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[227, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[227, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[227, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[227, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[227, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[227, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[227, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[227, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[227, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[227, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[227, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[227, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[227, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[227, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[227, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[227, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[227, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[227, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[227, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[227, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[227, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[227, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[227, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[227, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[227, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[227, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[227, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[227, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[227, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[227, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[227, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[227, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[227, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[227, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[227, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[227, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[227, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[227, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[227, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[227, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[227, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[227, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[227, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[227, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[227, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[227, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[227, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[227, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[227, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[227, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[227, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[227, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[227, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[227, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[227, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[227, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[227, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[227, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[227, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[227, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[227, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[227, "sympy.stats.std"]], "sympy.stats": [[227, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[227, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[227, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[227, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[227, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[227, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[227, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[227, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[227, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[227, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[227, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[228, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[228, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[228, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[228, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[228, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[228, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[228, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[228, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[228, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[228, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[229, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[230, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[231, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[231, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[231, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[232, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[232, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[232, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[232, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[232, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[232, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[232, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[232, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[232, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[232, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[232, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[232, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[232, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[232, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[232, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[232, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[233, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[233, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[233, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[233, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[233, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[233, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[233, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[233, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[233, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[233, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[233, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[233, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[233, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[233, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[233, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[233, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[233, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[233, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[233, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[234, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[234, "module-sympy.tensor.toperators"]], "sympy.testing": [[235, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[236, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[236, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[236, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[236, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[236, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[236, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[237, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[238, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[238, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[238, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[238, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[238, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[238, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[238, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[238, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[238, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[238, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[238, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[238, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[238, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[239, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[239, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[239, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[239, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[240, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[240, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[240, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[240, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[240, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[240, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[240, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[240, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[240, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[240, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[240, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[240, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[240, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[240, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[240, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[240, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[240, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[240, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[240, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[240, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[241, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[241, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[242, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[242, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[242, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[242, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[242, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[242, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[242, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[242, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[242, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[242, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[243, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[243, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[243, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[243, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[244, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[245, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[245, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[246, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[246, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[246, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[246, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[247, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[247, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[247, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[248, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[248, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[249, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[249, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[250, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[250, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[250, "sympy.utilities.source.source"]], "sympy.utilities.source": [[250, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[251, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[251, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[252, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[252, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[252, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[252, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[252, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[252, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[252, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[252, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[252, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[252, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[252, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[252, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[252, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[252, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[252, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[252, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[252, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[252, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[252, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[252, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[252, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[254, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[254, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[254, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[254, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[254, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[254, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[254, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[254, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[254, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[254, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[254, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[255, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[255, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[255, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[255, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[255, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[255, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[255, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[255, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[255, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[255, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[260, "module-sympy.vector"]], "sympy.physics": [[269, "module-sympy.physics"]]}})