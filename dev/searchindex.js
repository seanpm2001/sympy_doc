Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/index", "guides/solving/solve-equation-algebraically", "guides/solving/solve-numerically", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/index.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-numerically.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Solve Equations", "Solve an Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 23, 24, 25, 26, 28, 29, 32, 33, 36, 37, 38, 39, 46, 47, 48, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 69, 79, 81, 83, 85, 86, 87, 89, 92, 96, 98, 99, 100, 104, 106, 107, 109, 111, 114, 115, 133, 134, 137, 147, 151, 164, 173, 175, 179, 186, 189, 191, 193, 195, 196, 198, 200, 201, 202, 204, 205, 212, 213, 215, 218, 221, 222, 223, 224, 225, 226, 229, 230, 234, 236, 237, 240, 241, 243, 244, 250, 252, 254, 255, 257, 259, 260, 271, 272, 274, 275, 277, 278, 281, 282, 283], "public": [0, 6, 38, 56, 57, 78, 195, 196, 198, 199, 203, 218, 221, 225, 239, 250], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 22, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 137, 138, 139, 142, 143, 145, 147, 149, 150, 151, 154, 156, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 253, 254, 256, 257, 259, 260, 262, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 24, 25, 26, 27, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 104, 106, 110, 111, 112, 114, 115, 116, 117, 120, 121, 124, 125, 130, 131, 132, 135, 136, 137, 138, 139, 142, 144, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 172, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 250, 252, 254, 255, 256, 257, 259, 260, 267, 273, 275, 277, 278, 282], "smith": [0, 10, 93, 194], "cp": [0, 48, 97, 193], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 30, 34, 38, 39, 44, 45, 47, 48, 52, 55, 56, 57, 58, 59, 61, 64, 66, 68, 72, 73, 81, 83, 85, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 102, 106, 108, 109, 111, 114, 115, 116, 117, 119, 120, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 153, 167, 168, 171, 173, 175, 186, 190, 192, 193, 194, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 218, 221, 223, 224, 225, 226, 227, 230, 231, 237, 238, 240, 243, 245, 250, 253, 255, 259, 260, 272, 278, 281, 282, 283], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 29, 37, 38, 47, 48, 54, 56, 57, 62, 64, 66, 67, 69, 70, 72, 78, 81, 96, 100, 111, 115, 117, 119, 120, 132, 133, 134, 135, 137, 138, 160, 170, 181, 184, 186, 188, 190, 198, 199, 201, 202, 205, 207, 212, 215, 221, 225, 230, 236, 243, 246, 247, 253, 256, 272], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 224], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 78, 79, 81, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 98, 99, 100, 104, 106, 108, 110, 111, 113, 114, 117, 120, 122, 126, 130, 131, 135, 137, 141, 142, 143, 149, 150, 152, 154, 156, 157, 160, 164, 165, 167, 168, 170, 173, 175, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 225, 231, 236, 237, 238, 239, 240, 241, 243, 244, 246, 250, 252, 256, 257, 259, 262, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 282, 283], "moor": [0, 89, 92], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 30, 33, 34, 36, 38, 39, 40, 47, 48, 49, 50, 52, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 80, 81, 83, 85, 86, 87, 88, 89, 92, 96, 97, 98, 102, 106, 107, 110, 111, 112, 114, 115, 116, 117, 119, 120, 123, 124, 125, 132, 133, 134, 135, 137, 138, 142, 144, 150, 154, 166, 168, 170, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 208, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 231, 234, 236, 239, 243, 244, 250, 253, 255, 259, 271, 272, 276, 277, 278, 281, 282, 283], "vig": 0, "granger": [0, 156], "BE": 0, "muller": 0, "rp": [0, 72, 142], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 23, 24, 36, 37, 38, 39, 46, 47, 48, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 74, 79, 80, 81, 83, 85, 87, 89, 92, 96, 97, 98, 100, 104, 114, 115, 119, 125, 130, 132, 133, 137, 139, 143, 144, 155, 156, 159, 168, 170, 173, 180, 185, 186, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 205, 207, 208, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 230, 231, 236, 237, 238, 239, 240, 243, 244, 246, 256, 257, 260, 271, 272, 277, 281, 282, 283], "gupta": [0, 224], "h": [0, 12, 16, 36, 37, 38, 39, 40, 47, 52, 55, 56, 57, 61, 64, 78, 81, 83, 87, 88, 92, 93, 98, 106, 114, 117, 135, 139, 142, 154, 156, 159, 164, 168, 175, 190, 191, 192, 193, 194, 198, 199, 200, 201, 204, 205, 213, 217, 221, 223, 224, 225, 226, 231, 238, 260, 272, 281], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 156], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 147, 149, 151, 154, 156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 246, 250, 252, 253, 254, 255, 256, 257, 259, 261, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 156, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 275, 277, 278, 280, 281, 282, 283], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 30, 37, 38, 39, 40, 47, 48, 56, 57, 58, 60, 61, 62, 69, 70, 72, 74, 78, 79, 81, 83, 92, 96, 98, 100, 102, 106, 108, 111, 114, 115, 116, 117, 119, 120, 122, 124, 127, 128, 129, 134, 135, 136, 137, 138, 139, 142, 166, 167, 170, 171, 173, 180, 181, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 212, 213, 215, 217, 218, 221, 223, 224, 225, 231, 236, 238, 240, 250, 253, 255, 256, 257, 260, 282], "scopatz": 0, "2017": [0, 190], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 46, 48, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 83, 84, 86, 87, 89, 92, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 135, 137, 139, 142, 143, 144, 145, 147, 149, 150, 152, 154, 156, 158, 159, 162, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 218, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 237, 243, 244, 250, 252, 253, 255, 256, 257, 260, 267, 271, 272, 275, 277, 278, 281, 282, 283], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 28, 30, 36, 38, 39, 40, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 75, 78, 79, 80, 82, 83, 85, 87, 89, 92, 93, 95, 96, 98, 99, 100, 104, 106, 110, 114, 115, 116, 119, 120, 122, 123, 127, 130, 137, 154, 155, 156, 164, 169, 170, 172, 174, 175, 179, 180, 181, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 210, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 227, 237, 240, 243, 244, 250, 252, 253, 254, 255, 256, 257, 259, 262, 271, 272, 274, 275, 278, 282], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 23, 26, 27, 28, 31, 32, 33, 36, 48, 56, 57, 60, 62, 68, 84, 86, 87, 89, 92, 96, 97, 98, 99, 110, 120, 137, 180, 191, 192, 193, 195, 196, 202, 204, 205, 213, 217, 221, 224, 226, 236, 237, 238, 239, 240, 243, 244, 246, 250, 274, 275, 276, 277, 278, 280, 281, 282], "peerj": 0, "scienc": [0, 48, 81, 92, 136, 137, 192, 199, 215, 272], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 22, 23, 24, 26, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 106, 107, 108, 109, 111, 112, 114, 117, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 137, 138, 139, 141, 143, 147, 149, 150, 151, 155, 159, 164, 165, 167, 169, 170, 173, 176, 177, 179, 180, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 236, 237, 239, 240, 241, 243, 244, 246, 248, 250, 252, 253, 254, 255, 257, 259, 260, 267, 271, 272, 274, 276, 277, 278, 281, 282, 283], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 28, 30, 32, 33, 34, 36, 37, 38, 40, 44, 45, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 72, 73, 74, 78, 81, 83, 84, 85, 86, 87, 89, 92, 96, 99, 104, 106, 108, 109, 139, 141, 142, 143, 145, 146, 147, 151, 152, 153, 156, 158, 159, 168, 170, 180, 182, 185, 187, 190, 199, 201, 204, 205, 208, 210, 212, 213, 214, 217, 218, 221, 224, 225, 237, 238, 239, 241, 243, 244, 246, 250, 252, 256, 258, 260, 278, 281], "doi": [0, 6, 36, 48, 92, 199, 214, 217, 225], "org": [0, 3, 6, 7, 12, 18, 20, 30, 32, 33, 34, 36, 37, 38, 44, 45, 47, 48, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 72, 73, 74, 83, 84, 85, 86, 87, 89, 92, 96, 104, 106, 108, 109, 139, 141, 142, 143, 145, 146, 147, 151, 152, 153, 156, 158, 159, 168, 170, 180, 182, 185, 187, 199, 201, 205, 208, 212, 213, 214, 218, 221, 224, 225, 237, 238, 239, 241, 243, 250, 252, 256, 258, 260, 278, 281], "10": [0, 3, 6, 12, 20, 24, 26, 28, 30, 36, 38, 45, 47, 48, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 69, 70, 72, 73, 81, 83, 84, 86, 87, 89, 92, 93, 96, 97, 98, 99, 102, 104, 106, 107, 112, 117, 120, 122, 137, 139, 143, 154, 164, 165, 176, 180, 181, 182, 184, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 208, 211, 212, 213, 214, 217, 218, 221, 224, 225, 226, 235, 236, 241, 243, 244, 246, 250, 253, 271, 278, 282], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 29, 30, 36, 37, 40, 41, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 79, 81, 83, 85, 86, 87, 89, 92, 96, 97, 98, 99, 100, 102, 106, 108, 110, 112, 114, 115, 120, 125, 127, 128, 129, 131, 133, 134, 135, 137, 139, 143, 149, 150, 151, 154, 156, 159, 164, 167, 169, 170, 175, 180, 184, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 230, 231, 237, 238, 240, 243, 246, 247, 250, 252, 253, 254, 255, 256, 257, 260, 272, 274, 281, 282, 283], "103": [0, 47], "bibtex": 0, "entri": [0, 10, 34, 39, 46, 48, 54, 57, 68, 81, 85, 87, 88, 89, 95, 115, 120, 122, 135, 142, 194, 198, 200, 201, 215, 225, 244], "latex": [0, 1, 3, 6, 11, 20, 26, 28, 64, 84, 179, 180, 185, 189, 191, 196, 205, 276, 277], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 37, 38, 39, 47, 48, 55, 56, 57, 58, 64, 68, 81, 85, 89, 92, 98, 99, 100, 104, 106, 110, 120, 130, 133, 135, 138, 158, 159, 168, 174, 175, 179, 180, 184, 188, 192, 195, 198, 200, 202, 203, 204, 205, 206, 214, 217, 223, 224, 225, 234, 237, 238, 240, 241, 244, 250, 254, 255, 260, 267, 271, 274, 275, 277, 278, 279], "articl": [0, 56, 57, 89, 92, 197, 199, 200, 205, 250, 268, 276], "titl": [0, 6, 7, 191], "author": [0, 6, 96, 156, 200], "aaron": 0, "christoph": [0, 250], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 30, 32, 33, 34, 38, 39, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 78, 79, 81, 83, 87, 89, 92, 96, 98, 99, 100, 102, 106, 107, 111, 114, 115, 116, 117, 119, 120, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 149, 168, 170, 175, 181, 184, 186, 188, 190, 191, 193, 194, 195, 198, 199, 201, 202, 205, 207, 208, 212, 213, 215, 217, 218, 221, 223, 224, 225, 226, 230, 231, 243, 250, 253, 254, 255, 256, 257, 259, 278, 282], "mateusz": 0, "v": [0, 1, 5, 14, 23, 26, 30, 38, 46, 52, 55, 56, 57, 58, 59, 60, 64, 70, 81, 85, 87, 92, 96, 100, 111, 112, 114, 117, 122, 134, 135, 137, 138, 142, 143, 155, 170, 175, 180, 182, 184, 186, 188, 189, 191, 198, 199, 200, 201, 205, 215, 217, 218, 221, 223, 225, 236, 243, 250, 253, 254, 255, 256, 257, 259], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 30, 36, 37, 38, 39, 40, 42, 46, 47, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 64, 69, 74, 81, 83, 86, 87, 89, 92, 96, 114, 115, 125, 132, 134, 135, 137, 144, 158, 159, 162, 166, 168, 170, 179, 186, 190, 192, 194, 195, 198, 199, 200, 201, 202, 205, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 221, 223, 225, 226, 227, 229, 230, 231, 232, 236, 240, 243, 250, 252, 253, 254, 255, 256, 257, 259, 260, 281, 282], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 30, 37, 38, 39, 40, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 79, 81, 83, 85, 86, 87, 88, 89, 92, 96, 98, 99, 100, 102, 104, 106, 111, 112, 114, 115, 116, 117, 120, 124, 125, 134, 135, 137, 139, 142, 147, 149, 151, 153, 158, 159, 162, 167, 168, 169, 170, 180, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 205, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 236, 239, 240, 243, 246, 250, 252, 253, 254, 255, 256, 272, 274, 278, 282, 283], "matthew": 0, "amit": [0, 224], "sergiu": 0, "jason": [0, 205], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 156], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 24, 26, 29, 30, 34, 36, 37, 38, 39, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 85, 86, 87, 92, 96, 98, 99, 100, 102, 106, 107, 111, 114, 115, 117, 119, 120, 133, 134, 137, 138, 139, 142, 149, 150, 154, 159, 160, 162, 165, 167, 169, 170, 175, 176, 180, 185, 186, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 250, 254, 257, 259, 260, 271, 272, 276, 277, 282], "richard": [0, 96], "francesco": 0, "harsh": [0, 224], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 30, 34, 36, 38, 39, 42, 46, 47, 48, 52, 54, 55, 57, 58, 60, 61, 64, 78, 81, 83, 85, 87, 89, 92, 96, 104, 107, 114, 135, 136, 137, 142, 149, 150, 167, 170, 175, 179, 186, 190, 192, 194, 196, 198, 199, 200, 201, 202, 204, 205, 207, 213, 215, 217, 218, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 237, 243, 250, 252, 253, 254, 255, 256, 257, 259, 260], "andi": [0, 136], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 23, 29, 34, 36, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 78, 79, 81, 83, 85, 86, 87, 89, 92, 93, 96, 98, 99, 100, 102, 106, 108, 109, 111, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 146, 150, 155, 156, 159, 164, 166, 167, 168, 170, 171, 173, 175, 177, 179, 180, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 228, 230, 231, 234, 237, 243, 245, 246, 250, 252, 253, 254, 255, 259, 265, 272, 278, 281, 282, 283], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 225], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 57], "keyword": [0, 4, 6, 11, 14, 20, 37, 38, 39, 47, 48, 56, 57, 60, 61, 69, 71, 72, 73, 87, 92, 96, 99, 104, 106, 115, 132, 133, 164, 170, 185, 191, 193, 195, 196, 198, 200, 201, 204, 205, 206, 212, 217, 218, 223, 230, 236, 237, 239, 241, 244, 246, 255, 278], "algebra": [0, 7, 11, 12, 14, 18, 22, 24, 26, 34, 39, 47, 56, 57, 60, 62, 74, 77, 78, 79, 81, 83, 86, 87, 91, 93, 96, 97, 98, 119, 130, 137, 138, 190, 193, 194, 196, 197, 198, 199, 201, 202, 205, 207, 215, 218, 221, 224, 261, 262, 265, 267, 268, 273, 274, 276, 278], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 31, 33, 47, 56, 57, 58, 62, 81, 84, 85, 86, 87, 92, 97, 98, 99, 102, 103, 105, 106, 110, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 137, 148, 149, 164, 167, 168, 170, 173, 177, 180, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 213, 214, 220, 224, 225, 236, 237, 250, 252, 253, 256, 258, 260, 265, 267, 274, 276, 278, 282, 283], "abstract": [0, 10, 36, 37, 45, 56, 58, 62, 64, 69, 74, 89, 114, 120, 154, 156, 165, 168, 169, 170, 192, 200, 224, 225, 227, 231, 238, 259], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 107, 108, 110, 111, 114, 115, 117, 119, 122, 124, 130, 132, 134, 135, 137, 138, 141, 142, 143, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 163, 164, 165, 167, 168, 170, 171, 172, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 225, 226, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 250, 252, 254, 255, 257, 258, 259, 260, 271, 272, 273, 274, 275, 276, 278, 281, 282, 283], "open": [0, 1, 3, 4, 6, 7, 9, 10, 23, 24, 25, 28, 36, 56, 58, 62, 83, 86, 106, 120, 123, 137, 205, 213, 220, 224, 225, 247, 276, 278], "sourc": [0, 1, 5, 6, 7, 11, 20, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 178, 180, 181, 182, 184, 185, 186, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 257, 269, 276], "written": [0, 3, 6, 7, 11, 18, 20, 34, 38, 44, 47, 48, 52, 56, 61, 64, 68, 74, 79, 81, 85, 86, 95, 96, 124, 130, 137, 170, 186, 187, 188, 189, 192, 193, 201, 205, 208, 212, 215, 218, 221, 238, 257, 259, 275, 276, 277, 282], "pure": [0, 3, 11, 23, 24, 30, 57, 62, 83, 86, 89, 106, 134, 175, 195, 196, 198, 201, 205, 225, 243], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 25, 28, 30, 31, 32, 33, 36, 37, 38, 44, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 69, 72, 73, 79, 81, 83, 85, 86, 92, 96, 97, 98, 99, 100, 102, 104, 106, 108, 110, 111, 112, 114, 115, 120, 122, 128, 130, 131, 132, 133, 135, 137, 139, 143, 144, 154, 159, 160, 165, 166, 167, 168, 169, 170, 172, 175, 178, 180, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 208, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 236, 237, 238, 239, 240, 241, 244, 250, 253, 254, 255, 257, 259, 260, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282], "built": [0, 1, 3, 6, 7, 11, 12, 15, 31, 33, 39, 56, 62, 83, 92, 120, 137, 193, 196, 205, 206, 210, 221, 224, 225, 231, 240, 243, 244, 276, 277, 281], "focu": [0, 10, 18, 66, 223, 276], "extens": [0, 3, 6, 7, 18, 20, 47, 56, 61, 62, 68, 72, 83, 92, 117, 137, 193, 195, 196, 198, 199, 200, 201, 205, 215, 217, 221, 223, 224, 237, 238, 247, 275, 282], "eas": [0, 120, 189, 191, 205, 208], "through": [0, 1, 4, 6, 11, 12, 18, 20, 23, 26, 28, 36, 38, 47, 48, 50, 55, 56, 57, 60, 61, 64, 66, 67, 68, 69, 70, 72, 81, 85, 86, 92, 96, 99, 100, 104, 111, 115, 120, 122, 130, 135, 141, 142, 180, 191, 192, 198, 200, 205, 211, 215, 217, 221, 223, 224, 225, 226, 237, 243, 250, 252, 257, 260, 273, 274, 275, 280], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 29, 30, 36, 37, 38, 48, 51, 52, 54, 55, 56, 57, 61, 62, 64, 71, 80, 81, 83, 86, 87, 92, 96, 98, 99, 100, 106, 111, 114, 115, 122, 124, 125, 131, 134, 142, 143, 154, 160, 167, 170, 175, 180, 184, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 203, 204, 205, 207, 212, 213, 214, 215, 217, 218, 221, 223, 224, 226, 230, 236, 238, 243, 244, 250, 252, 272, 275, 276, 277, 282, 283], "interact": [0, 11, 14, 23, 29, 56, 70, 83, 90, 92, 137, 167, 185, 189, 195, 196, 217, 225, 241, 248, 261, 269, 274, 276, 277, 281, 282], "programmat": [0, 11, 14, 15, 25, 26, 224, 255], "applic": [0, 7, 10, 23, 39, 40, 46, 47, 48, 49, 56, 57, 62, 83, 87, 92, 96, 99, 102, 114, 115, 119, 120, 130, 134, 136, 137, 154, 155, 180, 184, 188, 193, 198, 199, 200, 201, 205, 207, 212, 218, 221, 224, 238, 243, 250, 257, 258, 265, 276], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 26, 27, 29, 37, 38, 47, 55, 56, 57, 58, 64, 81, 83, 86, 92, 98, 100, 106, 114, 115, 116, 122, 124, 128, 134, 137, 160, 165, 166, 180, 181, 186, 188, 189, 192, 193, 194, 195, 196, 198, 201, 205, 215, 218, 221, 222, 224, 225, 227, 232, 236, 237, 238, 243, 257, 272, 275, 278, 281, 282], "characterist": [0, 58, 74, 92, 188, 194, 196, 198, 199, 221, 223, 278], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 24, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 71, 72, 74, 79, 80, 81, 83, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 99, 100, 104, 106, 107, 109, 110, 114, 115, 117, 120, 121, 122, 128, 130, 134, 137, 154, 156, 159, 163, 165, 167, 168, 169, 170, 172, 173, 174, 175, 178, 179, 180, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 207, 208, 210, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 229, 231, 232, 234, 235, 236, 238, 239, 240, 243, 244, 246, 250, 252, 254, 255, 256, 257, 260, 271, 272, 274, 275, 276, 277, 278, 281, 282, 283], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 47, 52, 55, 56, 57, 60, 79, 84, 92, 98, 185, 188, 192, 193, 195, 202, 205, 208, 214, 221, 224, 225, 231, 246, 253, 255, 282], "popular": [0, 3, 57, 97, 137, 276], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 24, 27, 28, 38, 56, 57, 61, 81, 83, 84, 92, 97, 110, 120, 137, 191, 195, 196, 225, 236, 237, 238, 243, 244, 271, 274, 275, 276], "scientif": [0, 11, 28, 56, 137], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283], "paper": [0, 6, 96, 122, 189, 200, 201, 214, 215, 218, 221, 225], "present": [0, 3, 7, 10, 11, 12, 16, 36, 37, 40, 43, 47, 48, 50, 54, 56, 59, 83, 92, 96, 99, 102, 104, 106, 115, 122, 170, 172, 180, 182, 185, 186, 191, 192, 198, 199, 200, 204, 205, 218, 224, 238, 244, 247, 253, 254, 255, 259, 262, 283], "architectur": [0, 137, 195, 236], "descript": [0, 4, 6, 7, 10, 22, 27, 37, 39, 46, 64, 83, 96, 142, 160, 167, 178, 188, 189, 190, 205, 229, 236, 238, 240, 241, 261, 279], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 26, 30, 32, 33, 34, 37, 38, 39, 40, 44, 46, 47, 48, 55, 56, 57, 58, 61, 62, 64, 66, 68, 72, 74, 81, 83, 84, 86, 87, 89, 92, 96, 98, 99, 100, 102, 106, 110, 111, 114, 115, 117, 120, 122, 123, 124, 130, 131, 134, 135, 137, 138, 143, 149, 155, 156, 158, 159, 164, 165, 168, 170, 175, 177, 180, 181, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 217, 220, 221, 223, 224, 225, 229, 230, 231, 236, 239, 240, 243, 244, 247, 250, 253, 254, 255, 257, 260, 276, 277, 278, 281, 282], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 27, 28, 56, 58, 60, 87, 98, 120, 130, 137, 187, 205, 221, 225, 234, 238, 241, 258, 267, 270, 275, 276, 280, 282], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 27, 39, 47, 57, 64, 96, 110, 115, 120, 130, 134, 135, 179, 187, 188, 189, 195, 231, 240, 261, 271, 273, 274, 276, 277, 279, 281, 282], "select": [0, 1, 13, 14, 27, 38, 40, 47, 48, 55, 56, 57, 65, 70, 84, 86, 87, 96, 98, 112, 135, 175, 185, 195, 196, 198, 199, 201, 205, 214, 217, 223], "submodul": [0, 3, 4, 6, 11, 38, 110, 192, 196, 198, 200], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 258, 259, 260, 267, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283], "supplementari": 0, "materi": [0, 99, 141, 280], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 24, 27, 30, 36, 37, 38, 39, 45, 46, 47, 48, 54, 55, 56, 58, 60, 64, 65, 67, 72, 75, 78, 79, 83, 84, 86, 87, 89, 92, 93, 95, 96, 97, 98, 100, 102, 104, 110, 111, 114, 115, 117, 119, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 137, 138, 143, 144, 164, 172, 173, 174, 178, 179, 180, 181, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 208, 210, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 230, 231, 236, 237, 238, 240, 241, 243, 244, 246, 250, 253, 254, 255, 257, 258, 260, 272, 276, 277, 278, 282], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 28, 38, 46, 47, 48, 55, 56, 62, 64, 68, 74, 76, 80, 81, 83, 84, 86, 89, 92, 98, 103, 104, 106, 110, 111, 115, 134, 135, 138, 156, 168, 169, 172, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 205, 211, 214, 215, 217, 218, 221, 222, 223, 224, 225, 236, 237, 238, 240, 241, 243, 244, 246, 254, 274, 276, 277, 278, 281, 282], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 102, 104, 106, 108, 109, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 210, 211, 213, 214, 217, 218, 220, 221, 222, 223, 224, 229, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 257, 258, 259, 260, 265, 267, 268, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283], "further": [0, 3, 5, 18, 20, 33, 37, 57, 62, 64, 68, 81, 83, 88, 89, 92, 98, 99, 103, 104, 111, 114, 115, 135, 142, 188, 190, 191, 192, 198, 200, 201, 214, 215, 217, 221, 225, 231, 275, 276], "outlin": [0, 3, 4, 18, 20, 54, 83, 192, 221], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 27, 37, 47, 56, 58, 61, 63, 64, 81, 82, 83, 84, 87, 92, 96, 104, 114, 115, 120, 135, 137, 142, 160, 164, 180, 182, 190, 191, 192, 198, 200, 207, 212, 217, 218, 219, 221, 222, 225, 230, 231, 236, 239, 241, 244, 255, 256, 257, 258, 261, 265, 272, 274, 278, 279, 281], "volum": [0, 6, 38, 55, 64, 81, 190, 199, 215, 218, 221, 240, 250], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 24, 25, 27, 38, 39, 55, 61, 81, 96, 97, 114, 115, 137, 175, 191, 194, 195, 196, 199, 205, 215, 218, 241, 259, 282], "journal": [0, 6, 55, 61, 96, 107, 199, 217, 240], "issn": 0, "2376": 0, "5992": 0, "url": [0, 57, 241], "bsd": [0, 1, 3, 276], "licens": [0, 1, 3, 276], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 47, 48, 50, 52, 54, 56, 57, 60, 62, 64, 66, 68, 69, 70, 72, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92, 93, 96, 98, 99, 100, 106, 110, 114, 115, 120, 122, 124, 130, 131, 132, 134, 137, 138, 143, 154, 156, 164, 166, 167, 168, 170, 172, 174, 175, 179, 180, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 229, 230, 234, 236, 237, 240, 241, 243, 244, 246, 256, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 36, 38, 39, 47, 48, 55, 56, 57, 58, 60, 62, 63, 64, 68, 70, 72, 74, 75, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 96, 97, 98, 106, 108, 109, 110, 114, 115, 116, 117, 120, 121, 131, 132, 134, 135, 137, 159, 164, 165, 168, 170, 179, 180, 182, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 206, 208, 212, 213, 217, 218, 221, 222, 223, 224, 225, 229, 230, 231, 234, 236, 237, 238, 239, 241, 243, 244, 247, 254, 255, 256, 257, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283], "free": [0, 10, 11, 24, 28, 36, 37, 38, 46, 47, 52, 56, 68, 83, 87, 89, 92, 96, 99, 100, 104, 107, 114, 130, 139, 159, 177, 180, 187, 191, 192, 196, 198, 200, 201, 205, 207, 213, 215, 217, 218, 221, 223, 224, 231, 243, 276], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 31, 33, 38, 47, 48, 52, 55, 56, 57, 58, 61, 62, 64, 66, 81, 83, 86, 87, 92, 96, 97, 98, 99, 102, 114, 120, 134, 138, 170, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 212, 213, 214, 215, 217, 221, 222, 223, 224, 236, 237, 244, 254, 255, 259, 271, 274, 276, 278, 282, 283], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 25, 26, 27, 28, 38, 39, 41, 47, 48, 55, 56, 57, 60, 61, 62, 64, 66, 76, 79, 83, 84, 86, 87, 89, 90, 91, 92, 96, 97, 98, 102, 106, 110, 114, 117, 120, 122, 131, 134, 135, 137, 138, 152, 154, 164, 165, 168, 169, 170, 175, 179, 180, 184, 186, 188, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 205, 208, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 232, 234, 236, 237, 238, 239, 243, 244, 246, 247, 254, 255, 257, 259, 271, 272, 274, 275, 276, 277, 278, 282], "academ": [0, 37, 40, 199], "commerci": [0, 276], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 23, 25, 26, 32, 37, 38, 39, 45, 47, 48, 56, 57, 58, 60, 62, 63, 64, 66, 68, 69, 71, 72, 77, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 102, 106, 111, 114, 115, 117, 120, 123, 124, 125, 127, 129, 131, 133, 134, 135, 137, 138, 147, 149, 151, 155, 158, 159, 160, 164, 165, 167, 168, 170, 173, 176, 179, 180, 182, 184, 188, 189, 191, 192, 194, 195, 196, 198, 200, 201, 202, 205, 212, 217, 221, 224, 225, 226, 230, 231, 236, 237, 238, 240, 241, 243, 244, 250, 255, 257, 272, 274, 277, 278, 281, 282, 283], "fork": [0, 5, 7, 10, 122], "deriv": [0, 6, 10, 11, 17, 20, 23, 36, 37, 38, 40, 46, 47, 56, 58, 62, 63, 64, 66, 73, 78, 79, 81, 83, 84, 86, 89, 92, 102, 106, 110, 112, 114, 115, 119, 122, 124, 125, 127, 130, 132, 133, 134, 135, 159, 168, 172, 175, 176, 179, 180, 182, 184, 185, 186, 188, 191, 192, 193, 196, 198, 200, 201, 202, 205, 207, 215, 217, 221, 222, 223, 227, 232, 238, 250, 253, 254, 273, 276, 283], "long": [0, 6, 7, 8, 26, 38, 48, 55, 56, 57, 59, 69, 81, 83, 84, 86, 92, 96, 99, 100, 122, 185, 201, 202, 205, 214, 215, 223, 225, 237, 246, 253, 274, 277], "copi": [0, 1, 5, 10, 12, 18, 39, 48, 49, 56, 72, 92, 96, 97, 194, 196, 198, 200, 204, 205, 212, 223, 236, 243, 246, 281], "statement": [0, 6, 18, 19, 20, 28, 37, 38, 56, 64, 81, 86, 89, 120, 149, 205, 225, 234, 238, 243], "redistribut": [0, 201], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 27, 31, 32, 33, 34, 36, 37, 38, 42, 44, 47, 48, 49, 52, 55, 57, 58, 61, 62, 63, 64, 68, 72, 73, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92, 93, 96, 97, 98, 104, 110, 114, 115, 126, 128, 132, 134, 135, 139, 142, 145, 146, 155, 159, 160, 164, 165, 166, 167, 169, 170, 173, 175, 180, 185, 188, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 207, 208, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 230, 231, 234, 236, 237, 238, 239, 240, 241, 244, 245, 250, 252, 260, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 38, 92, 120, 137, 159, 205, 212, 215, 217, 234, 236, 237, 238, 244, 247], "That": [0, 4, 7, 11, 12, 18, 19, 20, 56, 57, 62, 86, 92, 130, 167, 172, 178, 188, 189, 192, 193, 195, 196, 198, 200, 211, 212, 221, 225, 237, 238, 244, 271, 274, 277, 282], "said": [0, 4, 11, 30, 34, 38, 42, 96, 175, 186, 188, 189, 193, 221, 224, 225, 250, 257], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 48, 56, 57, 62, 68, 80, 81, 84, 86, 87, 89, 92, 96, 99, 110, 122, 137, 192, 195, 196, 198, 200, 201, 213, 214, 217, 218, 223, 237, 243, 244, 274, 277, 282], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 26, 28, 38, 47, 56, 57, 59, 60, 64, 66, 67, 69, 70, 73, 75, 86, 92, 95, 96, 97, 98, 99, 104, 110, 111, 114, 115, 117, 119, 120, 122, 124, 131, 135, 144, 167, 179, 180, 182, 190, 191, 192, 195, 196, 198, 200, 202, 205, 208, 214, 215, 218, 221, 223, 224, 225, 229, 236, 237, 238, 239, 241, 243, 244, 253, 254, 255, 278, 280], "conveni": [0, 1, 10, 11, 12, 23, 26, 29, 36, 38, 48, 56, 57, 61, 64, 83, 86, 98, 120, 137, 179, 182, 188, 189, 191, 192, 193, 194, 195, 196, 200, 203, 212, 213, 217, 223, 229, 230, 237, 239, 240, 244, 257, 272, 274], "pleas": [0, 4, 6, 7, 9, 10, 23, 24, 25, 28, 34, 36, 56, 64, 68, 81, 96, 110, 115, 120, 130, 134, 135, 142, 143, 164, 179, 189, 190, 191, 192, 198, 199, 213, 217, 218, 223, 224, 244, 250, 255, 279, 283], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 47, 48, 49, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 80, 83, 84, 86, 87, 88, 92, 96, 97, 98, 102, 104, 106, 107, 110, 114, 120, 122, 128, 130, 131, 132, 133, 134, 135, 138, 143, 144, 149, 154, 155, 159, 162, 164, 172, 173, 174, 179, 185, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 229, 230, 234, 236, 237, 238, 239, 241, 243, 244, 246, 247, 249, 254, 272, 274, 276, 277, 282, 283], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 25, 26, 28, 32, 56, 57, 83, 84, 92, 97, 98, 106, 110, 114, 132, 134, 189, 191, 205, 212, 217, 221, 224, 225, 243, 244, 272, 276, 278, 279, 281, 282], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 24, 28, 31, 33, 36, 37, 38, 47, 48, 49, 56, 57, 60, 64, 81, 83, 85, 86, 87, 89, 92, 93, 96, 98, 110, 114, 120, 122, 131, 135, 137, 150, 154, 159, 163, 164, 165, 166, 169, 172, 182, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 205, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 231, 236, 237, 238, 240, 243, 244, 245, 246, 254, 255, 274, 275, 276, 277, 278, 281, 282], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 45, 47, 48, 55, 57, 58, 60, 61, 62, 63, 64, 68, 72, 74, 76, 78, 79, 81, 83, 85, 86, 87, 90, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 110, 111, 112, 114, 115, 119, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 137, 138, 139, 143, 153, 154, 156, 160, 164, 169, 170, 173, 175, 179, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 244, 246, 250, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 23, 26, 34, 37, 38, 45, 48, 51, 55, 56, 57, 59, 60, 61, 62, 64, 66, 68, 72, 80, 81, 83, 84, 85, 86, 87, 89, 92, 96, 106, 110, 111, 117, 121, 132, 138, 160, 167, 170, 175, 181, 185, 186, 188, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 208, 212, 217, 218, 221, 222, 223, 224, 225, 236, 238, 243, 253, 255, 257, 259, 260, 274, 278, 282], "contribut": [0, 3, 4, 5, 6, 7, 28, 72, 96, 115, 125, 128, 195, 198, 200, 221, 260, 279], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 26, 27, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 81, 83, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 99, 100, 102, 104, 106, 107, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 130, 132, 134, 137, 138, 144, 149, 150, 154, 164, 166, 167, 168, 170, 172, 173, 174, 175, 177, 178, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 234, 236, 237, 238, 239, 241, 243, 244, 246, 250, 252, 254, 256, 257, 258, 259, 261, 271, 272, 274, 276, 277, 278, 281, 282, 283], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 28, 37, 38, 39, 47, 48, 52, 55, 56, 57, 60, 61, 62, 64, 70, 71, 81, 83, 86, 92, 96, 98, 99, 102, 106, 114, 117, 120, 122, 127, 144, 155, 165, 175, 176, 179, 186, 188, 189, 190, 191, 192, 193, 194, 198, 201, 202, 205, 212, 213, 214, 215, 217, 221, 223, 224, 225, 226, 236, 243, 244, 255, 257, 271, 274, 277, 281], "back": [0, 20, 23, 24, 37, 38, 52, 55, 56, 57, 62, 64, 71, 72, 78, 80, 81, 83, 84, 87, 96, 97, 106, 164, 185, 188, 195, 200, 201, 203, 205, 215, 221, 223, 226, 227], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 25, 26, 31, 32, 33, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 69, 74, 79, 80, 81, 83, 84, 85, 86, 87, 92, 93, 95, 96, 106, 109, 110, 111, 112, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 142, 145, 153, 156, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 175, 179, 180, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 212, 213, 215, 217, 218, 220, 221, 222, 223, 225, 229, 231, 236, 237, 238, 240, 241, 243, 244, 250, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 119, 120, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 137, 138, 142, 143, 144, 149, 151, 154, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 240, 241, 243, 244, 246, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283], "incorpor": [0, 3, 16, 193, 217], "u": [0, 12, 16, 18, 19, 20, 23, 30, 36, 37, 38, 47, 52, 55, 56, 57, 59, 70, 73, 78, 81, 83, 89, 92, 96, 111, 114, 115, 116, 119, 120, 122, 124, 127, 130, 131, 132, 134, 135, 137, 138, 142, 143, 154, 159, 165, 175, 184, 186, 188, 190, 191, 192, 193, 194, 198, 200, 201, 204, 205, 212, 215, 217, 218, 221, 222, 223, 224, 225, 230, 244, 257, 274, 276, 277, 278], "benefit": [0, 3, 20, 38, 110, 134, 185], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 22, 36, 37, 38, 46, 47, 52, 54, 55, 56, 57, 61, 62, 64, 66, 68, 72, 81, 84, 86, 87, 89, 92, 96, 98, 99, 100, 102, 119, 122, 124, 127, 132, 133, 134, 135, 175, 180, 185, 186, 189, 190, 194, 198, 205, 208, 211, 213, 214, 218, 221, 222, 223, 224, 225, 226, 236, 238, 239, 241, 243, 246, 257, 272, 276, 278, 282], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 27, 28, 36, 39, 54, 98, 137, 174, 191, 192, 195, 198, 223, 224, 276, 279], "team": [0, 4], "member": [0, 6, 10, 18, 37, 45, 47, 57, 79, 102, 192, 213, 230], "list": [0, 3, 4, 6, 7, 13, 18, 23, 24, 25, 26, 28, 30, 33, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 84, 85, 86, 87, 89, 92, 95, 96, 97, 98, 99, 106, 111, 114, 115, 119, 122, 124, 127, 131, 132, 133, 137, 138, 143, 154, 156, 159, 160, 164, 165, 167, 168, 170, 172, 180, 184, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 271, 275, 276, 278, 281, 282, 283], "github": [0, 1, 3, 4, 5, 7, 10, 23, 24, 25, 28, 36, 56, 72, 83, 92, 174, 213, 224, 278], "found": [0, 1, 3, 4, 6, 7, 18, 19, 23, 36, 39, 47, 48, 50, 52, 54, 56, 57, 58, 66, 67, 72, 81, 83, 92, 96, 106, 112, 114, 115, 116, 134, 137, 174, 188, 192, 193, 195, 200, 201, 202, 205, 207, 208, 211, 212, 215, 218, 221, 222, 223, 224, 225, 229, 243, 244, 246, 247, 281], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 24, 27, 28, 37, 38, 40, 45, 46, 47, 48, 52, 55, 56, 57, 58, 64, 86, 87, 89, 92, 95, 96, 97, 99, 100, 102, 120, 122, 132, 133, 165, 166, 169, 173, 188, 189, 191, 195, 198, 200, 201, 205, 208, 211, 213, 214, 215, 218, 221, 223, 224, 225, 226, 229, 236, 237, 243, 245, 246, 256, 270, 271, 274, 276], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 23, 24, 25, 30, 34, 36, 37, 40, 48, 55, 56, 57, 60, 61, 62, 64, 71, 73, 79, 81, 83, 84, 86, 87, 92, 96, 106, 111, 114, 115, 116, 119, 120, 133, 135, 137, 154, 160, 167, 170, 172, 185, 189, 191, 193, 194, 195, 196, 198, 200, 201, 205, 207, 212, 213, 214, 215, 218, 221, 222, 223, 224, 225, 226, 229, 230, 237, 243, 244, 250, 259, 274, 277, 278], "machin": [1, 3, 5, 6, 206, 217, 221, 271], "imag": [1, 3, 47, 114, 126, 131, 137, 139, 143, 192, 196, 198, 205, 213, 224], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 23, 25, 26, 29, 31, 32, 36, 37, 38, 39, 47, 48, 52, 54, 55, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 82, 83, 85, 86, 87, 89, 92, 95, 96, 97, 98, 99, 101, 104, 105, 107, 111, 115, 116, 117, 119, 122, 124, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 157, 160, 162, 165, 167, 170, 179, 189, 190, 191, 192, 193, 194, 195, 196, 198, 201, 205, 206, 207, 212, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 250, 253, 261, 272, 274, 278, 282], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 26, 29, 32, 34, 37, 38, 45, 47, 48, 55, 56, 57, 58, 60, 61, 64, 67, 72, 74, 76, 78, 79, 81, 85, 86, 89, 92, 95, 96, 97, 110, 115, 117, 120, 122, 124, 125, 130, 132, 134, 135, 137, 143, 147, 163, 164, 170, 172, 175, 178, 180, 186, 188, 189, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 212, 213, 214, 215, 217, 218, 221, 223, 224, 226, 227, 236, 238, 240, 243, 253, 271, 272, 274, 276, 277, 282], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 45, 47, 48, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 84, 85, 86, 87, 89, 92, 93, 95, 96, 97, 98, 99, 104, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 132, 133, 134, 135, 137, 138, 143, 147, 151, 154, 160, 164, 165, 166, 167, 168, 170, 178, 179, 180, 181, 182, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 250, 253, 255, 257, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 25, 26, 29, 31, 33, 37, 38, 47, 49, 52, 56, 58, 59, 60, 61, 64, 83, 84, 86, 87, 89, 90, 92, 96, 104, 107, 109, 119, 120, 122, 124, 134, 137, 168, 172, 174, 180, 185, 186, 188, 189, 192, 195, 196, 198, 200, 201, 203, 205, 207, 215, 217, 221, 223, 224, 225, 229, 230, 231, 234, 239, 240, 241, 243, 244, 248, 257, 260, 271, 272, 274, 276, 277, 278, 282, 283], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 28, 31, 33, 36, 37, 38, 39, 45, 46, 47, 48, 49, 52, 55, 56, 57, 60, 61, 62, 64, 68, 70, 72, 79, 80, 81, 83, 86, 87, 89, 92, 96, 97, 99, 100, 102, 114, 115, 120, 122, 130, 131, 132, 133, 134, 135, 137, 139, 143, 162, 165, 167, 170, 173, 175, 180, 186, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 236, 239, 240, 243, 244, 247, 254, 255, 257, 271, 272, 274, 275, 277, 278, 282, 283], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 27, 47, 48, 56, 57, 58, 64, 68, 83, 85, 87, 92, 111, 114, 115, 119, 120, 130, 137, 139, 175, 189, 191, 192, 196, 198, 200, 201, 204, 205, 206, 211, 217, 218, 221, 222, 223, 225, 231, 236, 237, 238, 243, 278, 282], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 27, 38, 205, 223, 237, 238], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 23, 25, 26, 28, 36, 37, 38, 46, 47, 48, 56, 57, 61, 63, 64, 65, 66, 72, 73, 79, 81, 83, 87, 92, 95, 96, 98, 99, 100, 106, 111, 114, 115, 119, 120, 122, 124, 125, 126, 131, 132, 133, 134, 137, 164, 170, 175, 180, 189, 190, 191, 192, 194, 201, 205, 206, 208, 214, 217, 218, 221, 222, 223, 224, 225, 236, 238, 243, 244, 246, 255, 257, 260, 261, 278, 282], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 34, 36, 37, 38, 39, 47, 48, 49, 55, 56, 57, 58, 60, 61, 62, 64, 66, 68, 69, 71, 72, 73, 81, 83, 84, 86, 87, 88, 92, 93, 95, 96, 98, 102, 112, 115, 116, 120, 124, 130, 134, 156, 165, 170, 171, 172, 177, 180, 184, 186, 188, 191, 192, 193, 194, 198, 200, 204, 205, 206, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 257, 259, 271, 272, 274, 277, 278, 282, 283], "choos": [1, 6, 23, 47, 52, 56, 58, 61, 92, 96, 100, 104, 124, 135, 170, 174, 180, 188, 189, 201, 202, 205, 212, 214, 215, 221, 222, 225, 236, 241, 282], "cd": [1, 5, 6, 224, 243], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 31, 33, 36, 38, 47, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 69, 70, 72, 73, 75, 83, 84, 87, 89, 92, 93, 96, 97, 98, 99, 104, 106, 110, 111, 112, 114, 115, 116, 119, 137, 143, 154, 159, 160, 162, 165, 167, 172, 179, 180, 185, 191, 192, 193, 194, 195, 196, 200, 201, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 230, 231, 236, 237, 238, 241, 243, 244, 250, 275, 281, 282], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 28, 37, 38, 48, 56, 57, 61, 64, 67, 72, 73, 78, 80, 81, 85, 92, 96, 106, 111, 114, 119, 120, 123, 125, 128, 130, 137, 138, 173, 175, 180, 185, 188, 189, 192, 193, 195, 198, 201, 202, 206, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 231, 236, 237, 244, 255, 256, 274, 276, 277, 282, 283], "skip": [1, 3, 4, 6, 12, 37, 40, 56, 87, 92, 96, 180, 200, 204, 205, 207, 221, 223, 234, 236, 272, 280, 281], "down": [1, 4, 6, 18, 61, 89, 108, 122, 124, 188, 189, 191, 196, 207, 213, 215, 217, 221, 240, 278, 282], "section": [1, 4, 7, 8, 11, 18, 20, 21, 30, 37, 39, 47, 48, 55, 56, 57, 59, 63, 64, 66, 72, 81, 86, 87, 92, 99, 100, 114, 120, 135, 173, 175, 179, 186, 189, 192, 195, 198, 200, 205, 208, 212, 215, 221, 231, 240, 241, 243, 254, 255, 256, 257, 261, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 71, 74, 77, 79, 80, 81, 85, 86, 87, 92, 96, 97, 98, 99, 100, 106, 108, 112, 114, 115, 116, 120, 124, 130, 131, 132, 133, 134, 135, 137, 139, 153, 154, 159, 163, 165, 167, 168, 169, 170, 172, 175, 176, 180, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 236, 237, 238, 240, 241, 243, 244, 247, 248, 250, 252, 255, 257, 259, 260, 271, 272, 274, 277, 278, 282, 283], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 23, 24, 25, 28, 29, 32, 33, 36, 37, 38, 40, 45, 46, 48, 49, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 69, 79, 81, 83, 85, 89, 92, 96, 98, 99, 104, 106, 109, 120, 123, 124, 132, 133, 134, 137, 142, 143, 150, 154, 159, 164, 165, 166, 167, 172, 175, 189, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 207, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 231, 232, 237, 243, 244, 245, 247, 250, 254, 271, 274, 276, 277, 278, 281, 282, 283], "python3": [1, 3, 38, 98, 205, 236], "sphinx": [1, 4, 7, 8, 62, 221, 236, 241], "texliv": [1, 3, 205], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 22, 23, 24, 25, 26, 27, 28, 37, 38, 56, 57, 60, 87, 110, 132, 137, 164, 180, 188, 193, 194, 195, 196, 202, 218, 221, 224, 230, 234, 241, 254, 255, 280, 283], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 84, 205, 236, 243], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 277, 281], "pip": [1, 3, 28, 98], "sudo": 1, "virtual": [1, 4, 8, 28, 56, 72, 189, 275], "environ": [1, 3, 8, 9, 10, 11, 56, 84, 185, 205, 225, 236, 246, 274, 276, 281], "venv": 1, "path": [1, 5, 6, 10, 47, 72, 78, 106, 128, 186, 188, 214, 217, 221, 224, 236, 237, 240, 241, 243, 246, 247, 248, 257], "my": [1, 205, 271], "Then": [1, 5, 11, 16, 18, 47, 52, 55, 56, 81, 85, 92, 96, 112, 115, 117, 127, 129, 130, 135, 139, 167, 175, 188, 192, 193, 195, 198, 200, 202, 205, 212, 215, 217, 218, 221, 223, 244], "activ": [1, 4, 5, 13, 122, 191, 234, 239, 241], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 28, 29, 30, 32, 33, 36, 37, 38, 41, 47, 48, 52, 54, 55, 56, 57, 58, 62, 64, 67, 71, 72, 79, 80, 81, 83, 84, 86, 87, 92, 96, 97, 98, 99, 100, 102, 106, 110, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 150, 154, 162, 168, 173, 179, 180, 185, 188, 189, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 212, 213, 215, 217, 218, 220, 221, 223, 224, 225, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 243, 246, 250, 254, 256, 257, 260, 271, 272, 274, 277, 278, 280, 282], "rerun": [1, 201, 236], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 23, 27, 33, 34, 36, 37, 38, 39, 40, 47, 48, 52, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 72, 73, 78, 79, 81, 83, 85, 86, 87, 89, 92, 96, 99, 102, 104, 106, 112, 114, 115, 120, 122, 124, 127, 129, 131, 132, 135, 154, 167, 170, 179, 180, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 203, 205, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 234, 236, 238, 240, 243, 244, 246, 250, 252, 253, 255, 257, 259, 272, 275, 277, 282, 283], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 26, 29, 33, 34, 38, 47, 48, 52, 56, 57, 61, 64, 79, 81, 86, 87, 92, 93, 95, 96, 97, 98, 103, 104, 106, 110, 115, 116, 119, 120, 122, 124, 127, 128, 130, 132, 133, 134, 135, 137, 138, 144, 154, 159, 167, 168, 172, 173, 175, 176, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 198, 199, 200, 201, 202, 204, 205, 212, 213, 214, 215, 217, 221, 223, 225, 234, 236, 237, 242, 243, 244, 257, 259, 269, 272, 276, 277, 278], "new": [1, 3, 4, 5, 7, 11, 18, 20, 27, 32, 33, 37, 38, 39, 47, 48, 55, 56, 57, 58, 64, 69, 72, 81, 83, 84, 87, 92, 96, 99, 102, 106, 111, 114, 120, 127, 129, 135, 136, 137, 139, 160, 166, 167, 170, 172, 175, 176, 178, 180, 184, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 205, 212, 215, 217, 218, 221, 223, 224, 225, 226, 236, 237, 241, 244, 250, 252, 254, 270, 271, 274, 277, 278, 280], "termin": [1, 47, 56, 62, 84, 96, 185, 205, 212, 236, 281], "after": [1, 4, 5, 6, 7, 10, 12, 28, 30, 32, 33, 37, 39, 44, 47, 48, 52, 54, 55, 56, 57, 58, 62, 71, 73, 78, 83, 87, 92, 96, 98, 99, 106, 131, 132, 134, 137, 139, 143, 155, 167, 175, 179, 186, 189, 194, 198, 200, 201, 202, 203, 205, 206, 211, 218, 221, 222, 223, 224, 226, 236, 239, 244, 246, 250, 253, 257, 271, 272, 274, 278, 282], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 30, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 81, 83, 85, 86, 87, 89, 92, 96, 97, 99, 100, 102, 103, 106, 107, 110, 111, 114, 115, 123, 128, 130, 131, 132, 134, 135, 142, 143, 144, 149, 150, 154, 156, 159, 160, 165, 166, 167, 168, 169, 170, 172, 175, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 230, 240, 243, 244, 250, 253, 255, 256, 257, 259, 271, 272, 275, 277, 278, 282], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 23, 24, 25, 32, 33, 34, 36, 37, 38, 39, 40, 47, 48, 49, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 68, 69, 70, 72, 75, 78, 80, 81, 83, 85, 87, 88, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 110, 113, 114, 119, 120, 123, 125, 126, 130, 131, 136, 137, 144, 147, 149, 151, 159, 160, 165, 167, 170, 172, 177, 178, 179, 180, 182, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 217, 218, 221, 223, 225, 226, 228, 230, 231, 232, 236, 238, 240, 243, 244, 250, 254, 257, 260, 261, 265, 267, 271, 272, 273, 274, 277, 282], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 30, 32, 33, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 83, 85, 86, 87, 89, 92, 95, 96, 98, 99, 102, 104, 107, 111, 112, 114, 117, 119, 120, 124, 135, 143, 160, 165, 167, 175, 176, 178, 180, 181, 182, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 230, 231, 234, 236, 238, 240, 243, 244, 246, 247, 248, 250, 253, 255, 257, 259, 271, 277, 280, 282, 283], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 24, 26, 36, 37, 38, 39, 40, 46, 47, 48, 52, 55, 56, 60, 61, 64, 66, 69, 72, 73, 81, 83, 86, 87, 92, 96, 97, 98, 100, 106, 110, 114, 115, 117, 119, 120, 122, 123, 124, 125, 130, 131, 133, 134, 135, 138, 165, 167, 170, 180, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 212, 215, 217, 218, 221, 223, 224, 225, 229, 230, 237, 238, 244, 254, 255, 256, 257, 260, 274, 276, 277, 278, 282], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 39, 47, 48, 50, 56, 57, 81, 92, 97, 98, 115, 122, 137, 170, 185, 191, 192, 205, 215, 217, 221, 222, 223, 233, 237, 239, 240, 243, 244, 269, 274, 281], "txt": [1, 205], "mpmath": [1, 3, 5, 11, 20, 24, 38, 61, 64, 92, 97, 137, 195, 196, 205, 213, 223, 239, 244], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 23, 24, 26, 29, 36, 38, 45, 48, 55, 56, 57, 62, 66, 71, 81, 83, 92, 95, 96, 98, 120, 189, 190, 193, 195, 196, 198, 202, 205, 207, 213, 221, 222, 223, 224, 225, 236, 237, 238, 241, 243, 246, 250, 271], "packag": [1, 3, 22, 24, 28, 84, 97, 98, 103, 130, 137, 185, 205, 236, 247, 256, 257, 276], "matplotlib": [1, 3, 6, 7, 10, 28, 79, 84, 104, 137, 150, 185, 191, 281], "mayb": [1, 19], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 23, 25, 26, 30, 34, 37, 38, 39, 47, 48, 49, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 81, 83, 86, 87, 89, 92, 96, 97, 98, 99, 100, 106, 110, 111, 114, 120, 121, 124, 125, 130, 131, 134, 135, 137, 139, 142, 143, 144, 154, 165, 167, 168, 169, 170, 173, 175, 176, 177, 179, 180, 182, 184, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 206, 207, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 231, 232, 234, 237, 238, 239, 240, 243, 244, 250, 253, 254, 257, 259, 261, 268, 271, 272, 274, 276, 277, 278, 282], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 28, 32, 33, 36, 38, 39, 45, 46, 47, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 67, 69, 72, 79, 83, 84, 85, 86, 88, 89, 96, 97, 103, 111, 114, 120, 122, 137, 138, 139, 148, 150, 154, 155, 159, 165, 166, 168, 170, 172, 175, 176, 178, 180, 182, 185, 186, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 205, 207, 212, 213, 214, 215, 217, 218, 221, 223, 225, 229, 230, 231, 236, 237, 238, 239, 240, 241, 243, 244, 245, 250, 253, 254, 257, 277, 282], "distribut": [1, 3, 28, 47, 54, 56, 64, 72, 83, 99, 100, 169, 193, 196, 201, 205, 231], "prerequisit": 1, "dnf": [1, 86], "scheme": [1, 4, 18, 48, 55, 60, 190, 191, 198, 201, 230], "medium": [1, 20, 139, 140, 143, 144, 154, 198, 267], "tool": [1, 7, 11, 20, 47, 84, 91, 92, 97, 106, 137, 189, 192, 197, 198, 205, 237, 243, 249, 258, 265], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 23, 25, 28, 37, 38, 39, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 69, 70, 72, 73, 80, 81, 83, 85, 86, 87, 92, 95, 96, 99, 100, 106, 107, 112, 114, 115, 119, 120, 122, 123, 124, 125, 130, 131, 134, 135, 138, 142, 143, 147, 151, 154, 159, 160, 163, 164, 165, 166, 167, 169, 170, 173, 175, 180, 184, 188, 189, 191, 192, 194, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 211, 212, 214, 215, 217, 218, 221, 222, 223, 224, 225, 229, 231, 234, 236, 237, 238, 239, 243, 244, 246, 255, 260, 271, 272, 274, 276, 277, 278, 280, 282, 283], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 28, 98], "Or": [1, 7, 10, 12, 19, 23, 47, 56, 57, 58, 64, 81, 86, 96, 117, 192, 202, 204, 205, 217, 224, 225, 236, 244, 257, 277, 280], "forg": [1, 3, 98], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 29, 32, 33, 34, 36, 38, 39, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 72, 83, 84, 86, 92, 95, 96, 97, 98, 99, 100, 102, 115, 119, 120, 122, 123, 127, 128, 132, 134, 135, 137, 150, 167, 172, 185, 188, 191, 194, 195, 196, 198, 200, 201, 202, 204, 205, 208, 213, 214, 215, 217, 221, 222, 223, 224, 229, 231, 234, 236, 237, 238, 239, 241, 243, 244, 254, 259, 260, 274, 275, 276, 277, 278, 282], "success": [1, 7, 37, 47, 56, 64, 81, 83, 96, 114, 122, 180, 192, 198, 200, 213, 214, 221, 224, 225, 243, 250, 252], "tricki": [1, 56, 81], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 24, 25, 26, 28, 29, 34, 38, 48, 55, 56, 57, 62, 68, 72, 73, 81, 83, 86, 90, 92, 96, 98, 114, 120, 124, 150, 158, 170, 172, 175, 188, 191, 192, 194, 195, 196, 198, 200, 201, 202, 204, 205, 208, 212, 215, 217, 218, 221, 222, 223, 224, 234, 236, 237, 239, 243, 244, 246, 254, 272, 274, 276, 277, 278, 281, 282, 283], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 23, 24, 25, 26, 28, 29, 34, 37, 38, 39, 44, 47, 48, 54, 55, 56, 57, 60, 61, 62, 64, 66, 67, 68, 72, 81, 83, 85, 86, 87, 89, 92, 96, 97, 98, 104, 107, 110, 111, 114, 117, 119, 120, 121, 122, 123, 124, 125, 131, 132, 134, 135, 138, 150, 155, 159, 167, 170, 175, 176, 179, 181, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 207, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 250, 252, 253, 255, 257, 261, 271, 272, 274, 276, 277, 278, 280, 281, 282], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 24, 26, 27, 28, 37, 38, 47, 48, 55, 56, 61, 64, 83, 92, 97, 98, 120, 134, 137, 195, 196, 198, 201, 205, 206, 211, 213, 215, 217, 218, 223, 224, 225, 226, 230, 231, 236, 243, 244, 249, 250, 274, 281], "subsystem": [1, 205], "linux": [1, 28], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 25, 28, 36, 38, 39, 40, 45, 47, 48, 50, 51, 52, 56, 57, 61, 62, 64, 66, 68, 70, 71, 73, 78, 80, 81, 83, 85, 86, 87, 89, 92, 96, 107, 108, 110, 122, 133, 135, 164, 166, 170, 172, 175, 184, 186, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 231, 236, 238, 239, 240, 241, 243, 244, 254, 255, 257, 273, 274, 277, 282], "workaround": [1, 244], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 22, 38, 52, 56, 57, 62, 64, 66, 74, 78, 79, 80, 83, 92, 96, 99, 103, 110, 115, 120, 124, 130, 134, 139, 175, 179, 192, 198, 199, 200, 201, 202, 203, 204, 213, 218, 220, 221, 222, 223, 283], "shell": [1, 12, 84, 137, 204], "tutori": [1, 7, 11, 12, 16, 17, 28, 72, 120, 137, 193, 204, 205, 221, 244, 274, 277, 279, 280, 281, 282, 283], "com": [1, 3, 4, 5, 6, 7, 10, 20, 28, 30, 34, 36, 47, 49, 50, 56, 57, 59, 60, 61, 62, 64, 66, 72, 73, 81, 83, 87, 92, 96, 104, 190, 199, 208, 210, 213, 214, 217, 218, 221, 224, 225, 243, 246, 278], "microsoftdoc": 1, "wsl": 1, "blob": [1, 83], "win10": 1, "md": [1, 4, 7, 234, 241], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 26, 28, 34, 36, 37, 38, 39, 40, 45, 46, 47, 48, 55, 56, 57, 58, 60, 61, 62, 64, 69, 71, 72, 73, 74, 81, 83, 84, 85, 86, 87, 89, 92, 93, 96, 98, 100, 102, 106, 110, 114, 115, 120, 123, 124, 125, 130, 131, 132, 133, 134, 135, 137, 138, 156, 158, 159, 160, 165, 169, 170, 173, 175, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 234, 236, 238, 240, 241, 243, 244, 247, 250, 254, 255, 257, 259, 271, 274, 275, 276, 277, 278, 281, 282, 283], "command": [1, 3, 5, 6, 11, 12, 28, 38, 60, 84, 120, 132, 137, 185, 191, 205, 236, 237, 281], "prompt": [1, 6, 11], "transfer": [1, 103, 104, 106, 139, 224], "html": [1, 3, 4, 6, 7, 34, 38, 40, 48, 49, 50, 56, 57, 59, 61, 62, 64, 66, 72, 73, 83, 84, 92, 96, 104, 199, 205, 208, 210, 213, 214, 218, 221, 225, 237, 239, 241, 243, 244, 278], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 24, 25, 30, 31, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 52, 54, 55, 57, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 81, 83, 84, 86, 87, 89, 92, 96, 98, 106, 107, 111, 112, 114, 115, 116, 119, 120, 122, 124, 127, 135, 137, 143, 146, 154, 164, 165, 167, 169, 170, 171, 173, 179, 180, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 215, 217, 218, 220, 221, 222, 223, 224, 225, 230, 231, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 255, 257, 259, 271, 272, 273, 275, 276, 277, 278, 282], "via": [1, 3, 11, 16, 20, 26, 28, 31, 32, 33, 47, 48, 56, 61, 64, 81, 83, 86, 92, 96, 97, 98, 99, 180, 190, 192, 196, 198, 200, 201, 204, 205, 224, 234, 237, 238, 250, 259, 277], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 26, 28, 34, 36, 38, 39, 40, 48, 56, 57, 63, 68, 70, 72, 75, 81, 83, 87, 89, 92, 93, 96, 97, 104, 106, 109, 116, 120, 137, 153, 163, 164, 167, 170, 173, 175, 182, 184, 188, 189, 191, 193, 194, 195, 198, 200, 201, 202, 204, 205, 206, 212, 213, 215, 217, 218, 221, 222, 223, 224, 225, 231, 234, 236, 238, 240, 243, 244, 255, 257, 260, 271, 272, 274, 276, 277, 278, 279, 281, 282], "directori": [1, 3, 6, 7, 28, 33, 38, 221, 236, 237, 246], "folder": 1, "prepend": [1, 37, 47, 92, 106, 177, 205, 231], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 37, 38, 48, 56, 60, 64, 83, 86, 106, 120, 150, 174, 178, 191, 194, 195, 196, 208, 212, 213, 214, 215, 221, 222, 223, 224, 225, 237, 243, 244, 276, 282], "compat": [1, 3, 4, 15, 38, 56, 64, 84, 87, 92, 97, 110, 172, 177, 185, 191, 194, 196, 200, 201, 205, 225, 229, 232, 236, 238, 244], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29, 34, 38, 39, 41, 47, 48, 49, 55, 56, 57, 60, 61, 62, 64, 65, 70, 71, 72, 74, 78, 81, 83, 85, 86, 87, 89, 92, 93, 95, 96, 97, 98, 102, 104, 106, 110, 115, 119, 120, 124, 127, 144, 150, 164, 167, 168, 170, 179, 189, 190, 193, 194, 195, 196, 198, 201, 202, 203, 205, 208, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 232, 237, 238, 240, 243, 244, 246, 247, 271, 272, 274, 275, 276, 277, 278, 280, 282], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 28, 29, 33, 34, 36, 37, 38, 39, 42, 46, 47, 48, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 78, 81, 83, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 104, 106, 110, 114, 115, 116, 120, 122, 124, 126, 128, 130, 132, 133, 134, 135, 137, 139, 142, 154, 158, 159, 164, 167, 168, 169, 170, 175, 179, 180, 184, 185, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 214, 215, 217, 218, 221, 222, 223, 224, 225, 236, 238, 239, 240, 243, 244, 246, 250, 254, 258, 265, 271, 272, 274, 275, 277, 278, 280, 281, 282, 283], "partial": [1, 11, 36, 47, 54, 55, 56, 58, 60, 61, 62, 96, 98, 137, 164, 180, 184, 186, 196, 199, 202, 205, 207, 214, 217, 221, 222, 226, 232, 250, 257, 272, 282], "workflow": [1, 3, 5, 8, 9, 24, 27, 137, 195, 238, 244, 279], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 72, 73, 74, 79, 81, 83, 84, 85, 86, 87, 92, 93, 96, 97, 98, 102, 104, 106, 112, 114, 120, 122, 123, 124, 126, 127, 129, 131, 132, 134, 135, 138, 143, 145, 164, 165, 169, 170, 172, 174, 175, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 226, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 250, 253, 255, 257, 259, 260, 271, 272, 274, 275, 277, 278, 282, 283], "viabl": [1, 57], "64": [1, 41, 47, 96, 136, 190, 204, 214, 223, 225, 236, 243, 246, 281], "bit": [1, 16, 20, 37, 38, 40, 56, 57, 59, 86, 87, 92, 96, 164, 175, 192, 201, 215, 218, 224, 236, 243, 254, 255, 281], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 24, 30, 34, 38, 40, 48, 52, 56, 57, 60, 61, 62, 70, 71, 73, 76, 77, 80, 84, 86, 87, 92, 95, 96, 98, 106, 164, 167, 173, 174, 175, 177, 184, 191, 192, 194, 196, 198, 200, 201, 202, 203, 205, 206, 207, 213, 214, 215, 217, 218, 221, 222, 224, 225, 226, 227, 230, 236, 237, 243, 244, 246, 248, 253, 268, 273, 274, 277, 282], "chose": [1, 57], "rm": [1, 38], "absolut": [1, 10, 34, 35, 38, 55, 56, 62, 64, 71, 81, 83, 87, 92, 108, 168, 196, 200, 201, 215, 217, 220, 225, 236, 259, 260, 261], "Be": [1, 4, 6, 20, 36, 56, 86, 92, 198, 221, 224, 232, 244], "sure": [1, 4, 6, 7, 20, 38, 47, 56, 68, 119, 120, 150, 175, 201, 202, 212, 221, 223, 224, 237, 243, 274, 277, 282], "substitut": [1, 10, 11, 12, 16, 19, 26, 38, 56, 57, 62, 64, 81, 83, 92, 97, 98, 106, 115, 116, 120, 122, 124, 134, 159, 168, 170, 173, 180, 182, 184, 202, 203, 206, 207, 212, 215, 217, 218, 221, 222, 223, 224, 244, 253, 273, 274], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 37, 38, 39, 45, 47, 54, 56, 57, 64, 68, 81, 83, 85, 89, 92, 96, 106, 110, 120, 122, 132, 133, 134, 185, 192, 195, 200, 205, 213, 215, 217, 218, 221, 224, 232, 236, 237, 240, 241, 243, 244, 276], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 250, 252, 253, 254, 255, 256, 257, 259, 260, 268, 271, 272, 274, 276, 277, 278, 281, 282, 283], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 23, 28, 31, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 71, 72, 73, 81, 83, 84, 86, 87, 90, 92, 93, 96, 98, 99, 100, 102, 106, 108, 111, 114, 115, 116, 117, 119, 120, 130, 133, 134, 135, 138, 139, 143, 156, 159, 164, 165, 168, 170, 172, 175, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 206, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 227, 230, 231, 236, 237, 239, 240, 241, 243, 244, 250, 254, 255, 256, 257, 259, 260, 271, 272, 274, 277, 278, 281, 282, 283], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 25, 26, 34, 36, 37, 38, 39, 40, 45, 46, 47, 48, 50, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 69, 71, 72, 73, 79, 81, 83, 85, 86, 87, 89, 92, 93, 95, 96, 97, 99, 100, 102, 106, 107, 111, 114, 115, 120, 122, 124, 130, 135, 137, 143, 144, 154, 155, 164, 167, 172, 175, 179, 180, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 210, 212, 213, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 236, 237, 238, 239, 240, 241, 243, 246, 250, 252, 254, 255, 257, 259, 260, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "collect": [1, 3, 7, 17, 37, 38, 47, 56, 73, 83, 96, 99, 106, 119, 128, 137, 170, 177, 190, 196, 201, 214, 215, 217, 221, 225, 236, 243], "offici": [1, 12, 28, 56, 110, 137, 179, 189, 224, 244, 280], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 156, 159, 165, 166, 167, 168, 170, 174, 175, 176, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 229, 231, 236, 237, 238, 239, 240, 241, 243, 244, 246, 250, 252, 255, 259, 260, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 28, 32, 34, 35, 36, 37, 39, 40, 41, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 72, 74, 79, 81, 83, 84, 85, 86, 89, 92, 96, 97, 98, 106, 110, 111, 114, 115, 116, 119, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 137, 138, 142, 153, 154, 155, 156, 159, 164, 165, 168, 169, 170, 175, 177, 179, 180, 181, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 198, 201, 202, 203, 204, 205, 206, 207, 211, 214, 215, 217, 218, 220, 221, 222, 223, 225, 230, 231, 237, 238, 240, 241, 242, 243, 244, 250, 254, 255, 257, 258, 259, 265, 272, 274, 275, 276, 277, 278, 282, 283], "svg": [1, 84, 185], "store": [1, 5, 10, 12, 18, 37, 38, 46, 47, 56, 78, 80, 89, 92, 96, 98, 111, 115, 117, 119, 120, 135, 164, 170, 184, 188, 189, 191, 192, 195, 200, 201, 202, 212, 215, 226, 229, 230, 238, 239, 240, 243, 255, 257, 277], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 30, 31, 32, 33, 34, 36, 37, 38, 45, 46, 47, 48, 52, 55, 56, 57, 58, 61, 63, 64, 66, 69, 70, 71, 72, 73, 78, 79, 81, 83, 85, 86, 87, 89, 92, 96, 98, 99, 100, 106, 107, 110, 111, 114, 118, 120, 124, 127, 128, 131, 134, 135, 154, 156, 164, 167, 168, 170, 172, 173, 175, 177, 178, 179, 180, 182, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 230, 231, 232, 234, 236, 238, 239, 240, 241, 243, 244, 246, 250, 252, 254, 255, 259, 272, 274, 277, 278, 281, 282], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 26, 27, 33, 34, 37, 38, 39, 42, 47, 48, 54, 56, 57, 61, 64, 68, 81, 83, 85, 89, 92, 97, 100, 111, 112, 114, 115, 119, 120, 122, 130, 131, 132, 134, 135, 137, 138, 165, 170, 175, 179, 180, 185, 189, 191, 195, 200, 201, 205, 206, 212, 215, 217, 218, 223, 224, 225, 229, 230, 231, 236, 237, 238, 239, 240, 250, 255, 257, 282], "onc": [1, 4, 11, 12, 18, 19, 20, 38, 40, 47, 52, 56, 57, 61, 64, 72, 81, 83, 97, 100, 112, 114, 130, 134, 175, 180, 182, 189, 191, 193, 195, 201, 205, 206, 214, 215, 217, 221, 224, 231, 243, 254, 271, 272, 282, 283], "under": [1, 3, 4, 6, 11, 12, 18, 19, 32, 33, 35, 36, 38, 39, 46, 47, 52, 54, 64, 74, 81, 83, 85, 86, 92, 96, 98, 99, 100, 139, 165, 190, 192, 193, 200, 201, 205, 212, 213, 215, 218, 221, 223, 224, 225, 231, 234, 276, 282], "prefer": [1, 3, 6, 10, 11, 18, 20, 24, 38, 48, 55, 56, 64, 96, 98, 114, 120, 170, 175, 180, 191, 194, 196, 198, 200, 205, 213, 217, 221, 223, 230, 236, 238, 241, 244, 276, 278], "web": [1, 7, 57, 68, 137, 187, 199, 218], "browser": 1, "drop": [1, 62, 83, 97, 127, 196, 198], "menu": 1, "index": [1, 3, 10, 12, 20, 25, 26, 30, 38, 45, 47, 48, 52, 55, 56, 57, 58, 61, 62, 64, 67, 72, 81, 83, 86, 87, 89, 92, 95, 96, 106, 119, 120, 137, 138, 139, 141, 143, 144, 154, 163, 165, 167, 170, 175, 180, 191, 192, 196, 200, 201, 202, 205, 210, 211, 215, 223, 225, 226, 228, 229, 231, 232, 237, 265], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 37, 38, 47, 48, 55, 56, 62, 63, 64, 68, 79, 83, 86, 87, 89, 92, 96, 98, 99, 110, 114, 115, 120, 121, 127, 132, 133, 135, 137, 141, 142, 158, 162, 165, 166, 167, 172, 173, 180, 188, 191, 192, 195, 196, 198, 200, 204, 205, 208, 212, 213, 215, 217, 218, 221, 222, 223, 225, 231, 236, 237, 238, 239, 241, 243, 244, 255, 272, 274, 276, 277, 278, 279, 281, 282], "load": [1, 38, 56, 84, 99, 100, 102, 111, 114, 115, 119, 123, 125, 138, 150, 185], "ll": [1, 37, 54, 92, 124, 188, 189, 234], "manual": [1, 3, 4, 7, 10, 11, 20, 38, 39, 47, 60, 66, 83, 84, 98, 106, 119, 120, 123, 134, 138, 191, 198, 205, 221, 223, 224, 239, 272, 282], "repeat": [1, 11, 12, 47, 50, 55, 56, 62, 64, 83, 85, 87, 92, 96, 98, 154, 156, 170, 191, 192, 193, 198, 200, 201, 205, 211, 221, 225, 229, 230, 237, 239, 243, 282], "step": [1, 4, 5, 20, 21, 27, 36, 38, 47, 51, 52, 55, 56, 57, 64, 80, 81, 83, 92, 96, 97, 115, 127, 130, 132, 137, 138, 172, 184, 189, 190, 191, 195, 196, 198, 201, 205, 206, 207, 210, 213, 214, 215, 217, 218, 221, 223, 225, 230, 237, 243, 244, 272], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 25, 38, 39, 47, 48, 49, 50, 53, 55, 56, 57, 60, 61, 64, 80, 81, 83, 84, 85, 86, 89, 92, 96, 99, 100, 102, 106, 110, 119, 130, 132, 134, 143, 160, 165, 179, 180, 185, 188, 189, 191, 195, 196, 197, 198, 200, 201, 202, 205, 206, 207, 213, 214, 215, 217, 218, 221, 223, 224, 225, 230, 239, 240, 243, 244, 246, 255, 271, 272, 274, 276, 277, 281, 282], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 23, 28, 38, 44, 47, 48, 55, 56, 60, 61, 62, 63, 64, 87, 89, 93, 97, 120, 132, 134, 180, 188, 190, 191, 193, 194, 195, 200, 201, 205, 210, 212, 214, 223, 224, 226, 243, 274, 276, 278], "approach": [1, 16, 23, 25, 26, 37, 55, 56, 83, 106, 124, 130, 195, 198, 199, 202, 213, 222, 223, 225, 237, 240, 243, 272, 278], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 26, 29, 32, 36, 37, 38, 39, 44, 45, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 69, 71, 73, 74, 75, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 98, 99, 100, 106, 110, 114, 115, 119, 120, 122, 123, 124, 129, 131, 132, 133, 134, 137, 138, 154, 160, 165, 170, 172, 175, 177, 178, 179, 180, 182, 184, 185, 186, 188, 191, 192, 193, 194, 195, 198, 200, 201, 204, 205, 206, 207, 212, 214, 215, 217, 218, 220, 221, 222, 223, 225, 229, 230, 231, 234, 236, 237, 238, 239, 243, 244, 250, 253, 255, 261, 264, 271, 273, 282], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 28, 33, 36, 38, 47, 48, 50, 56, 57, 58, 60, 61, 62, 64, 65, 72, 73, 77, 81, 83, 84, 86, 87, 92, 96, 97, 99, 108, 110, 117, 119, 122, 123, 127, 129, 134, 135, 137, 138, 150, 165, 167, 184, 190, 191, 192, 195, 196, 200, 202, 205, 206, 207, 212, 214, 215, 217, 218, 221, 222, 223, 224, 237, 238, 239, 240, 241, 244, 273, 274, 277, 278, 280], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 23, 26, 37, 38, 39, 48, 56, 58, 59, 60, 61, 62, 64, 69, 71, 75, 81, 84, 86, 96, 98, 99, 115, 120, 122, 128, 156, 158, 159, 168, 170, 184, 188, 191, 192, 195, 196, 200, 201, 202, 205, 208, 211, 212, 214, 215, 217, 218, 221, 223, 224, 230, 231, 236, 237, 238, 241, 255, 260, 272, 274, 276, 277, 281, 282, 283], "detect": [1, 3, 29, 36, 89, 92, 96, 191, 195, 205, 221, 222, 224, 226, 243, 281], "procedur": [1, 39, 41, 47, 53, 54, 55, 83, 92, 115, 135, 198, 200, 217, 218, 223, 224, 250, 278], "again": [1, 4, 12, 16, 19, 48, 56, 71, 96, 120, 122, 135, 165, 166, 180, 188, 192, 193, 200, 208, 215, 221, 234, 254, 274, 282], "whether": [1, 4, 10, 11, 18, 19, 20, 25, 26, 36, 37, 38, 42, 47, 55, 56, 57, 63, 64, 68, 71, 83, 84, 86, 87, 92, 96, 102, 110, 116, 119, 120, 158, 177, 182, 189, 191, 194, 195, 196, 200, 201, 205, 208, 212, 213, 217, 218, 221, 223, 224, 225, 226, 236, 238, 243, 244, 250, 253, 274, 278], "8000": [1, 99], "80": [1, 4, 6, 12, 20, 36, 47, 56, 59, 83, 92, 96, 99, 100, 104, 201, 204, 221, 225, 241, 243], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24, 25, 29, 37, 38, 39, 45, 46, 47, 48, 52, 55, 56, 57, 58, 60, 61, 62, 64, 67, 69, 71, 72, 76, 78, 80, 81, 83, 84, 85, 86, 89, 92, 96, 97, 98, 99, 104, 110, 111, 117, 120, 122, 126, 134, 135, 138, 142, 143, 155, 156, 164, 165, 168, 170, 172, 175, 179, 180, 181, 184, 185, 186, 189, 191, 192, 193, 194, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 234, 236, 237, 238, 239, 240, 241, 243, 244, 250, 253, 257, 259, 273, 274, 276, 277, 278, 281, 282], "port": [1, 98, 122, 142], "finish": [1, 38, 39, 164, 239, 279], "stop": [1, 4, 38, 39, 48, 56, 92, 96, 191, 211, 213, 221, 225], "ctrl": 1, "detach": 1, "mode": [1, 2, 56, 84, 98, 142, 165, 185, 201, 205, 236, 247], "d": [1, 6, 7, 10, 11, 12, 16, 20, 30, 37, 40, 45, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 64, 66, 70, 74, 79, 81, 83, 85, 86, 87, 88, 89, 92, 93, 95, 96, 98, 99, 102, 114, 115, 137, 139, 142, 143, 149, 159, 167, 169, 170, 175, 179, 180, 182, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 205, 207, 211, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 231, 243, 246, 250, 252, 253, 254, 255, 259, 267, 278, 283], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 25, 29, 32, 33, 37, 38, 39, 43, 46, 49, 52, 55, 56, 57, 58, 61, 62, 63, 64, 66, 69, 81, 83, 84, 85, 89, 92, 96, 98, 99, 102, 111, 114, 117, 119, 120, 122, 137, 141, 150, 165, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 189, 191, 192, 193, 195, 196, 198, 200, 202, 205, 211, 215, 217, 218, 221, 222, 224, 225, 230, 231, 234, 236, 237, 238, 239, 244, 246, 247, 248, 250, 254, 257, 262, 271, 274, 277, 278, 282], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 34, 39, 55, 56, 58, 62, 66, 87, 89, 92, 96, 98, 99, 102, 107, 111, 120, 122, 134, 160, 165, 175, 186, 189, 195, 201, 202, 213, 214, 215, 221, 224, 241, 243, 244, 257], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 26, 29, 31, 33, 36, 37, 38, 39, 47, 48, 49, 50, 52, 55, 56, 57, 59, 60, 62, 64, 66, 67, 68, 69, 70, 71, 73, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92, 96, 98, 99, 104, 106, 110, 120, 122, 124, 132, 134, 135, 137, 138, 139, 150, 154, 158, 160, 162, 164, 165, 168, 170, 172, 173, 175, 176, 180, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 204, 205, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 223, 224, 225, 229, 230, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 250, 254, 271, 272, 274, 275, 278], "tab": [1, 10, 12, 52, 137], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 38, 48, 55, 56, 60, 62, 79, 81, 83, 92, 96, 99, 100, 104, 110, 120, 126, 131, 135, 137, 165, 169, 173, 175, 180, 188, 189, 191, 192, 195, 196, 198, 200, 201, 205, 206, 208, 212, 213, 214, 215, 217, 218, 221, 223, 225, 226, 234, 237, 238, 241, 243, 244, 274, 276, 278, 281], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 27, 36, 37, 47, 48, 56, 66, 81, 83, 86, 92, 96, 115, 122, 130, 191, 193, 195, 200, 201, 205, 208, 214, 217, 221, 222, 223, 224, 225, 226, 231, 236, 238, 243, 244, 250, 275, 280], "major": [1, 3, 4, 7, 10, 26, 66, 110, 230, 276, 282], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 47, 85, 162, 165, 175, 201, 217, 224], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 28, 38, 56, 61, 64, 169, 206, 217, 221, 224, 278, 282], "request": [1, 3, 4, 6, 7, 9, 10, 18, 28, 36, 56, 60, 72, 81, 96, 120, 170, 198, 201, 229, 237], "releas": [1, 7, 10, 56, 83, 87, 98, 134, 191, 230, 241, 244, 277], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 23, 25, 28, 33, 34, 36, 37, 38, 48, 52, 55, 56, 57, 58, 60, 61, 62, 64, 68, 74, 81, 83, 86, 87, 89, 91, 92, 96, 97, 98, 108, 110, 119, 120, 122, 124, 125, 130, 132, 134, 137, 150, 154, 159, 164, 167, 168, 178, 186, 189, 193, 196, 197, 198, 200, 201, 204, 205, 206, 211, 212, 213, 215, 217, 220, 221, 222, 223, 225, 228, 231, 234, 236, 238, 239, 240, 241, 243, 250, 252, 254, 259, 261, 272, 276, 277, 278, 282, 283], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 38, 47, 48, 52, 55, 56, 60, 62, 80, 81, 83, 84, 92, 93, 96, 98, 122, 160, 165, 185, 191, 194, 195, 196, 198, 200, 201, 205, 212, 215, 221, 223, 225, 234, 236, 243, 244, 278], "99": [1, 38, 56, 57, 92, 96, 198, 199], "due": [1, 6, 10, 16, 20, 24, 36, 38, 46, 47, 56, 58, 73, 92, 96, 99, 102, 120, 122, 134, 143, 170, 186, 189, 195, 201, 205, 208, 218, 220, 222, 225, 241, 253, 259, 282], "bad": [1, 10, 55, 96, 172, 205], "math": [1, 3, 6, 20, 26, 30, 34, 37, 39, 47, 56, 61, 64, 66, 83, 92, 96, 97, 120, 130, 186, 191, 196, 199, 204, 205, 221, 222, 225, 237, 238, 244, 255, 256, 257, 258, 259, 271, 272, 276], "format": [1, 4, 8, 11, 14, 16, 23, 25, 37, 48, 57, 78, 79, 83, 86, 92, 95, 96, 99, 119, 138, 143, 154, 164, 191, 194, 195, 200, 201, 203, 205, 215, 221, 224, 236, 246, 250, 254, 275, 278, 281], "doubl": [1, 6, 7, 36, 38, 52, 56, 57, 61, 92, 98, 114, 129, 130, 188, 195, 205, 214, 215, 238, 282], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 26, 32, 33, 36, 37, 38, 42, 45, 47, 48, 49, 54, 55, 56, 57, 61, 64, 68, 79, 81, 85, 86, 87, 89, 92, 93, 96, 106, 111, 112, 120, 134, 137, 150, 158, 170, 172, 173, 178, 186, 191, 192, 194, 195, 196, 198, 200, 201, 207, 213, 215, 217, 221, 222, 223, 224, 225, 229, 230, 234, 236, 238, 241, 243, 253, 257, 274, 282], "ad": [1, 6, 7, 10, 18, 23, 30, 37, 38, 40, 46, 47, 56, 57, 67, 71, 78, 81, 85, 96, 98, 102, 110, 111, 114, 120, 121, 137, 144, 172, 175, 181, 190, 191, 200, 202, 204, 205, 207, 215, 218, 221, 224, 225, 227, 230, 231, 236, 253, 274], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 36, 60, 81, 84, 92, 120, 122, 134, 205, 212, 218, 221], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 24, 25, 26, 28, 29, 39, 43, 47, 50, 51, 56, 57, 58, 60, 64, 68, 81, 83, 84, 92, 96, 97, 98, 111, 114, 120, 122, 128, 130, 131, 135, 137, 138, 164, 170, 179, 185, 188, 190, 191, 192, 193, 195, 198, 204, 215, 217, 221, 223, 224, 225, 230, 233, 234, 236, 237, 238, 241, 242, 243, 244, 254, 262, 269, 274, 276, 279, 281], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 29, 37, 38, 40, 47, 56, 57, 61, 62, 64, 69, 70, 72, 73, 74, 81, 83, 86, 87, 92, 95, 98, 106, 107, 112, 114, 124, 131, 150, 154, 156, 164, 167, 170, 177, 180, 184, 191, 192, 194, 195, 196, 198, 200, 201, 205, 206, 207, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 230, 236, 238, 240, 243, 244, 246, 272, 274, 277, 278, 283], "render": [1, 3, 6, 7, 38, 56, 84, 185, 191, 205, 281], "resourc": [1, 6, 7, 20, 92, 199, 221, 237, 247], "style": [1, 8, 37, 56, 84, 164, 185, 191, 205, 224, 281], "guid": [1, 3, 8, 9, 11, 13, 20, 22, 28, 37, 56, 63, 120, 134, 205, 223, 224, 231, 275, 279, 280, 283], "tip": [1, 6, 56, 134, 221, 222, 282], "few": [1, 3, 4, 10, 11, 18, 26, 34, 46, 48, 56, 57, 83, 84, 96, 97, 122, 130, 173, 179, 185, 188, 189, 192, 200, 205, 213, 214, 215, 221, 224, 225, 238, 243, 282], "extra": [1, 10, 38, 56, 57, 96, 97, 128, 175, 186, 198, 205, 215, 221, 236, 237, 238, 257], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 33, 49, 56, 58, 64, 83, 86, 96, 120, 175, 186, 195, 198, 199, 200, 201, 221, 223, 240, 244, 257, 259], "xetex": 1, "font": [1, 84, 185, 205], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 22, 36, 38, 39, 47, 48, 52, 56, 57, 59, 61, 62, 64, 72, 73, 81, 83, 86, 87, 92, 95, 96, 98, 99, 100, 106, 115, 119, 120, 134, 135, 137, 138, 142, 149, 154, 156, 158, 159, 164, 167, 170, 180, 186, 189, 190, 191, 192, 194, 200, 201, 202, 203, 205, 207, 208, 212, 213, 215, 221, 222, 224, 225, 236, 238, 240, 243, 257, 272, 276, 278, 282], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 26, 30, 31, 32, 33, 34, 36, 37, 38, 46, 47, 48, 52, 55, 56, 57, 58, 60, 62, 64, 68, 73, 74, 78, 80, 81, 83, 85, 86, 87, 89, 92, 95, 96, 97, 98, 99, 106, 107, 110, 111, 112, 116, 120, 124, 130, 134, 137, 155, 162, 164, 165, 167, 169, 170, 172, 173, 175, 179, 180, 189, 191, 192, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 232, 236, 237, 238, 240, 241, 243, 244, 246, 250, 253, 255, 274, 276, 277, 278, 282], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 26, 27, 28, 31, 37, 38, 47, 48, 54, 56, 57, 61, 62, 64, 69, 83, 86, 87, 88, 90, 92, 94, 96, 109, 111, 114, 120, 154, 168, 172, 180, 190, 191, 192, 195, 196, 198, 200, 201, 205, 208, 217, 223, 225, 235, 236, 238, 239, 240, 241, 243, 244, 248, 250, 256, 274, 277, 278], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 26, 29, 30, 34, 36, 37, 38, 39, 45, 46, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 71, 72, 73, 74, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 92, 96, 99, 102, 103, 106, 110, 114, 115, 116, 117, 119, 120, 122, 133, 134, 135, 137, 138, 144, 154, 159, 165, 167, 169, 170, 171, 172, 173, 180, 184, 186, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 226, 229, 231, 236, 237, 238, 239, 243, 244, 246, 250, 257, 259, 272, 274, 276, 278, 282, 283], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 24, 26, 36, 37, 38, 39, 41, 44, 46, 47, 48, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 72, 73, 74, 79, 82, 83, 85, 86, 87, 92, 96, 98, 99, 106, 107, 111, 114, 117, 119, 120, 122, 124, 125, 127, 128, 129, 134, 135, 137, 138, 150, 154, 159, 165, 167, 168, 170, 173, 175, 176, 180, 186, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 236, 237, 238, 239, 241, 243, 244, 245, 246, 259, 262, 272, 277, 281, 282, 283], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 137, 138, 139, 141, 142, 143, 144, 145, 149, 152, 153, 154, 155, 156, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 248, 250, 253, 254, 255, 257, 260, 267, 271, 272, 274, 276, 277, 278, 281, 282, 283], "dev": [1, 3, 4, 5, 241], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 258, 259, 260, 261, 265, 267, 268, 270, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283], "sympy_debug": [2, 83, 246], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 23, 24, 25, 29, 30, 31, 33, 34, 36, 38, 39, 51, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 75, 81, 83, 84, 86, 87, 92, 98, 99, 100, 102, 104, 106, 119, 120, 127, 129, 137, 138, 144, 159, 164, 168, 170, 173, 179, 180, 182, 186, 193, 195, 196, 198, 200, 201, 202, 205, 206, 211, 212, 217, 218, 220, 221, 222, 223, 224, 232, 236, 238, 239, 240, 244, 250, 253, 254, 256, 257, 259, 272, 274, 276, 278, 283], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 31, 32, 33, 35, 37, 38, 47, 49, 51, 56, 58, 60, 61, 62, 64, 69, 72, 73, 74, 79, 80, 83, 84, 87, 89, 92, 96, 98, 99, 107, 111, 115, 119, 120, 138, 143, 150, 154, 160, 164, 165, 167, 169, 170, 180, 182, 185, 186, 191, 195, 196, 200, 201, 202, 203, 205, 213, 215, 217, 221, 223, 224, 225, 229, 230, 231, 236, 237, 238, 240, 243, 244, 250, 252, 253, 254, 255, 257, 259, 271, 272, 277, 282, 283], "unix": [2, 236, 237], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 28, 37, 38, 39, 45, 47, 48, 55, 56, 57, 61, 62, 68, 72, 81, 83, 87, 92, 96, 98, 99, 106, 107, 108, 110, 112, 114, 120, 124, 134, 137, 165, 167, 170, 175, 179, 180, 186, 188, 191, 194, 195, 196, 198, 201, 202, 204, 205, 206, 208, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 229, 230, 236, 238, 240, 243, 244, 246, 247, 255, 256, 257, 259, 271, 272, 274, 276, 277, 278, 281, 282, 283], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 48, 52, 55, 56, 57, 58, 59, 62, 64, 66, 68, 71, 72, 75, 81, 83, 84, 86, 87, 89, 90, 92, 93, 96, 97, 103, 106, 110, 114, 115, 117, 119, 120, 121, 123, 124, 128, 131, 132, 137, 142, 145, 150, 154, 159, 162, 164, 166, 172, 174, 175, 178, 179, 181, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 208, 212, 213, 214, 215, 217, 218, 221, 222, 223, 227, 230, 231, 234, 236, 237, 239, 241, 243, 244, 246, 253, 255, 256, 257, 259, 271, 272, 274, 275, 276, 277, 278, 280, 282], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 23, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 81, 83, 84, 86, 87, 88, 89, 92, 93, 96, 98, 99, 100, 104, 106, 107, 108, 109, 110, 112, 115, 116, 120, 122, 124, 137, 141, 142, 151, 154, 155, 162, 164, 165, 168, 169, 170, 173, 179, 180, 181, 182, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 234, 236, 237, 238, 239, 241, 243, 244, 246, 250, 253, 254, 255, 256, 257, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "isympi": [2, 3, 11, 12, 84], "window": [2, 246], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 23, 28, 34, 37, 38, 47, 54, 56, 57, 58, 62, 79, 81, 83, 84, 85, 86, 92, 96, 97, 108, 110, 111, 117, 120, 124, 128, 134, 135, 137, 150, 155, 160, 170, 175, 179, 185, 186, 188, 192, 194, 195, 196, 198, 200, 204, 205, 212, 213, 214, 215, 217, 221, 224, 234, 236, 238, 239, 241, 256, 257, 259, 271, 272, 274, 275, 276, 277, 278, 282, 283], "limit": [2, 4, 10, 12, 23, 26, 28, 34, 36, 38, 55, 56, 58, 60, 61, 62, 64, 65, 68, 76, 78, 83, 84, 86, 92, 96, 104, 135, 159, 165, 168, 185, 191, 196, 198, 201, 202, 205, 208, 209, 211, 213, 217, 218, 220, 221, 222, 223, 225, 230, 237, 240, 243, 244, 246, 249, 250, 260, 262, 268, 273, 274, 276, 278], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 22, 23, 25, 27, 31, 32, 33, 35, 36, 37, 39, 47, 48, 51, 52, 54, 57, 58, 59, 60, 61, 65, 66, 67, 68, 73, 76, 77, 80, 82, 83, 84, 85, 87, 89, 91, 95, 97, 99, 101, 103, 104, 106, 107, 108, 112, 114, 117, 118, 119, 120, 123, 124, 125, 126, 130, 132, 133, 137, 142, 143, 144, 145, 149, 154, 155, 156, 159, 164, 165, 166, 167, 168, 169, 170, 173, 179, 180, 183, 184, 185, 187, 189, 190, 192, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 223, 224, 225, 227, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 255, 256, 258, 259, 260, 261, 262, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283], "nice": [2, 4, 6, 28, 56, 68, 92, 96, 120, 134, 137, 191, 205, 215, 246, 277], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 23, 24, 28, 31, 32, 33, 34, 36, 37, 39, 40, 45, 47, 48, 55, 56, 57, 60, 61, 62, 64, 83, 85, 86, 89, 92, 93, 96, 97, 98, 99, 100, 106, 113, 115, 120, 122, 130, 136, 142, 150, 163, 164, 168, 170, 180, 183, 187, 189, 191, 194, 195, 196, 200, 201, 211, 212, 214, 215, 217, 221, 223, 230, 232, 236, 238, 243, 244, 246, 248, 250, 254, 261, 267, 269, 272, 273, 274, 275, 276, 277, 278, 282], "tree": [2, 10, 11, 15, 47, 50, 56, 98, 112, 120, 162, 165, 180, 201, 212, 214, 217, 224, 227, 229, 240, 243, 246, 273], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 38, 52, 56, 57, 60, 61, 66, 68, 74, 78, 81, 83, 86, 92, 96, 106, 110, 120, 124, 137, 142, 175, 188, 189, 192, 195, 198, 200, 201, 202, 204, 205, 206, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 236, 237, 238, 244, 271, 274, 277, 282], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 23, 28, 38, 41, 47, 48, 55, 56, 60, 61, 63, 64, 68, 81, 83, 96, 112, 131, 175, 177, 191, 193, 195, 198, 200, 204, 205, 206, 212, 213, 221, 225, 236, 238, 248, 261, 274, 278, 281], "instal": [3, 5, 7, 11, 12, 60, 97, 195, 196, 205, 237, 244, 275, 281], "enabl": [3, 7, 11, 20, 28, 56, 83, 84, 96, 100, 120, 122, 170, 180, 185, 205, 221, 225, 236, 241, 244, 278, 281, 282], "certain": [3, 7, 11, 20, 26, 28, 35, 37, 38, 47, 54, 56, 60, 64, 72, 81, 83, 96, 98, 134, 180, 181, 192, 195, 198, 200, 205, 206, 212, 215, 217, 218, 221, 223, 224, 225, 227, 238, 239, 244, 250, 253, 259, 282], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 26, 28, 31, 32, 33, 36, 37, 38, 39, 47, 48, 55, 56, 57, 60, 62, 66, 68, 83, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 106, 110, 114, 115, 120, 128, 131, 134, 135, 138, 172, 179, 180, 184, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 212, 213, 215, 218, 221, 222, 223, 224, 225, 234, 237, 238, 239, 240, 241, 243, 244, 246, 253, 255, 271, 274, 276, 277, 278, 280, 281, 282], "mention": [3, 4, 6, 20, 47, 81, 83, 106, 122, 138, 139, 186, 215, 218, 221, 225, 254, 255, 256, 257, 278], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 26, 36, 38, 47, 48, 56, 57, 60, 61, 62, 64, 81, 83, 96, 128, 176, 190, 192, 195, 196, 200, 201, 202, 203, 205, 214, 217, 218, 221, 222, 224, 229, 234, 236, 238, 239, 242, 243, 244, 254, 257, 269, 271, 274, 277, 278], "unless": [3, 6, 11, 18, 20, 31, 33, 36, 38, 47, 55, 56, 57, 61, 64, 71, 72, 81, 92, 95, 143, 188, 189, 193, 195, 200, 201, 205, 210, 213, 214, 221, 223, 236, 240, 243, 244, 246, 250, 259, 272, 278, 282], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 25, 26, 28, 34, 37, 38, 39, 44, 46, 47, 48, 54, 55, 56, 57, 58, 61, 62, 64, 66, 69, 70, 71, 72, 73, 78, 81, 83, 84, 86, 87, 89, 90, 92, 95, 96, 98, 110, 114, 115, 117, 119, 120, 122, 128, 130, 132, 133, 134, 137, 138, 144, 149, 154, 159, 162, 167, 172, 173, 175, 176, 180, 184, 185, 186, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 205, 206, 211, 212, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 231, 234, 236, 238, 240, 243, 244, 246, 250, 257, 259, 272, 274, 275, 276, 277, 278, 282], "intend": [3, 4, 6, 10, 14, 18, 56, 57, 67, 76, 81, 96, 98, 112, 165, 195, 196, 200, 203, 218, 221, 222, 234, 239, 271], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 30, 35, 47, 48, 55, 56, 57, 61, 62, 64, 72, 79, 81, 83, 86, 87, 89, 96, 106, 110, 111, 114, 115, 119, 120, 122, 128, 130, 131, 135, 137, 154, 166, 170, 179, 189, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 213, 215, 217, 218, 221, 223, 236, 238, 240, 243, 272, 277, 282], "those": [3, 6, 10, 11, 12, 14, 18, 19, 23, 25, 26, 29, 34, 37, 38, 39, 47, 48, 54, 55, 56, 57, 60, 69, 70, 81, 83, 86, 92, 95, 96, 110, 114, 122, 128, 131, 143, 167, 179, 182, 185, 188, 189, 191, 195, 196, 198, 200, 201, 203, 204, 205, 211, 213, 217, 221, 222, 223, 224, 225, 231, 234, 236, 240, 243, 250, 253, 274, 276, 282], "everi": [3, 4, 6, 11, 18, 20, 23, 27, 32, 33, 34, 37, 42, 44, 47, 48, 56, 57, 71, 85, 87, 92, 96, 106, 135, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 205, 210, 213, 215, 217, 218, 221, 224, 225, 227, 254, 257, 259, 275, 277, 278, 282], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 25, 26, 27, 28, 29, 32, 33, 36, 37, 38, 39, 47, 48, 52, 54, 55, 56, 57, 58, 60, 62, 64, 66, 67, 69, 70, 72, 81, 83, 86, 87, 92, 95, 96, 98, 108, 110, 112, 120, 122, 127, 131, 150, 154, 160, 164, 166, 169, 179, 188, 189, 191, 193, 194, 195, 196, 198, 200, 201, 202, 205, 212, 213, 214, 215, 217, 218, 220, 221, 223, 230, 231, 234, 236, 238, 240, 243, 244, 246, 250, 252, 255, 271, 272, 274, 277, 278, 281, 282, 283], "themselv": [3, 7, 10, 20, 34, 37, 48, 52, 54, 56, 83, 96, 130, 131, 174, 195, 196, 200, 211, 225, 231, 240, 243, 246, 282], "incomplet": [3, 6, 7, 56, 61, 64, 193, 195, 201, 205, 207, 223, 224], "main": [3, 5, 6, 7, 10, 12, 24, 33, 34, 38, 56, 62, 81, 87, 92, 95, 120, 128, 168, 174, 185, 189, 191, 192, 196, 205, 212, 221, 224, 230, 237, 282, 283], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 23, 33, 38, 56, 57, 58, 60, 62, 63, 64, 72, 81, 83, 92, 96, 110, 115, 116, 124, 130, 137, 156, 159, 160, 189, 198, 201, 202, 206, 212, 217, 218, 221, 224, 225, 236, 238, 246, 276, 277, 282], "io": [3, 7, 84, 205, 244], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 27, 29, 30, 33, 34, 36, 37, 38, 40, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 72, 73, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 114, 115, 120, 121, 124, 134, 135, 137, 139, 142, 143, 144, 150, 155, 164, 168, 170, 172, 173, 175, 178, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 232, 236, 237, 238, 240, 243, 244, 246, 250, 255, 257, 259, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 23, 24, 25, 26, 36, 41, 48, 49, 55, 56, 57, 60, 61, 64, 67, 68, 70, 86, 87, 92, 100, 131, 135, 156, 159, 189, 191, 192, 195, 196, 198, 200, 202, 217, 221, 222, 223, 231, 241, 244, 250, 252, 271, 272, 277, 282, 283], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 23, 38, 47, 56, 59, 60, 61, 64, 72, 83, 92, 96, 104, 135, 190, 192, 195, 196, 200, 201, 202, 205, 212, 217, 218, 223, 224, 237, 238, 246, 271, 282], "arithmet": [3, 38, 56, 57, 60, 87, 92, 96, 159, 166, 190, 191, 192, 194, 195, 196, 198, 199, 203, 206], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 54, 81, 83, 92, 177, 191, 192, 193, 207, 212, 215, 225, 272, 274, 277], "calcul": [3, 12, 16, 18, 24, 30, 36, 39, 48, 54, 56, 57, 58, 59, 60, 62, 64, 66, 68, 69, 70, 72, 73, 83, 87, 89, 92, 96, 99, 100, 108, 110, 111, 114, 115, 119, 122, 123, 124, 139, 142, 143, 146, 149, 165, 166, 167, 168, 170, 171, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 195, 196, 198, 200, 201, 202, 207, 212, 221, 225, 229, 237, 238, 244, 250, 253, 257, 259, 278, 281], "float": [3, 11, 18, 20, 38, 47, 56, 62, 64, 71, 73, 83, 84, 87, 92, 96, 98, 104, 106, 137, 143, 185, 191, 195, 196, 205, 217, 223, 225, 236, 244, 246, 271, 274], "point": [3, 4, 6, 7, 11, 12, 16, 18, 23, 24, 28, 30, 36, 38, 39, 47, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 83, 92, 96, 99, 100, 102, 104, 111, 114, 115, 116, 117, 119, 120, 122, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 150, 172, 175, 181, 184, 186, 189, 191, 192, 195, 196, 198, 200, 201, 205, 207, 211, 212, 213, 221, 223, 224, 225, 237, 240, 243, 244, 246, 250, 253, 255, 256, 257, 259, 260, 268, 271, 272, 274, 277], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 47, 48, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 108, 111, 114, 115, 116, 117, 119, 120, 122, 134, 137, 139, 143, 146, 149, 154, 156, 159, 162, 164, 165, 166, 167, 170, 171, 173, 174, 175, 180, 181, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 236, 238, 239, 243, 244, 246, 253, 255, 257, 260, 272, 274, 277], "evalf": [3, 6, 11, 12, 18, 24, 26, 38, 55, 60, 61, 62, 64, 75, 78, 79, 87, 92, 98, 120, 122, 137, 152, 196, 201, 205, 212, 213, 217, 225, 237, 244, 273], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 24, 28, 31, 32, 33, 34, 35, 36, 38, 48, 53, 55, 56, 58, 60, 62, 66, 68, 69, 71, 73, 78, 83, 85, 88, 90, 92, 94, 96, 106, 165, 173, 175, 188, 189, 191, 196, 198, 200, 201, 202, 205, 212, 213, 217, 218, 220, 221, 223, 224, 225, 226, 234, 236, 237, 238, 243, 247, 250, 252, 276, 277, 278, 282, 283], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 28, 32, 34, 35, 38, 55, 56, 57, 58, 60, 64, 81, 83, 84, 87, 89, 92, 106, 107, 114, 120, 126, 128, 133, 134, 170, 175, 179, 180, 181, 188, 191, 194, 195, 198, 201, 205, 207, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 227, 230, 231, 234, 236, 237, 238, 241, 243, 244, 246, 253, 256, 278, 282], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 177, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 260, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283], "importerror": 3, "extern": [3, 28, 84, 98, 102, 104, 122, 130, 185, 195, 196, 206, 213, 217, 225, 236, 237], "doc": [3, 4, 6, 7, 8, 12, 27, 38, 47, 55, 56, 72, 84, 135, 172, 195, 197, 218, 221, 236, 237, 239, 241, 243, 250, 255, 268], "latest": [3, 5, 28, 37, 239, 241, 244], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 25, 34, 39, 48, 55, 56, 57, 58, 74, 81, 83, 84, 86, 87, 90, 92, 96, 99, 110, 131, 170, 172, 175, 180, 185, 188, 191, 192, 193, 195, 198, 200, 204, 205, 215, 217, 218, 221, 223, 224, 225, 226, 227, 229, 230, 236, 243, 255, 271, 272, 274, 276, 277, 278, 282, 283], "did": [3, 7, 19, 56, 83, 96, 110, 127, 175, 198, 202, 213, 223, 234, 244, 274, 276, 282], "explain": [3, 4, 6, 7, 18, 26, 37, 52, 56, 64, 74, 79, 192, 195, 198, 200, 202, 212], "ones": [3, 4, 10, 20, 28, 38, 47, 52, 56, 81, 83, 86, 87, 89, 92, 95, 96, 120, 143, 164, 170, 194, 198, 208, 218, 221, 226, 232, 238, 246, 250, 255, 278, 281], "typic": [3, 4, 10, 11, 20, 52, 62, 81, 96, 106, 111, 117, 121, 179, 189, 191, 193, 198, 202, 215, 237, 238, 255], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 28, 32, 33, 36, 37, 38, 47, 55, 56, 58, 62, 67, 87, 89, 92, 96, 120, 156, 168, 173, 180, 184, 191, 192, 194, 195, 196, 200, 201, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 236, 237, 238, 239, 240, 241, 272, 283], "git": [3, 8], "repositori": [3, 5, 7, 28], "vast": [3, 26, 83, 197], "wrap": [3, 4, 6, 31, 32, 33, 34, 38, 45, 56, 62, 84, 97, 185, 189, 191, 194, 195, 198, 205, 208, 224, 230, 237, 241, 244, 246, 277], "addition": [3, 6, 10, 56, 132, 168, 189, 198, 205, 225, 234, 241, 254], "ci": [3, 7, 64, 81, 205, 281], "wish": [3, 6, 12, 20, 28, 38, 56, 57, 60, 81, 96, 165, 179, 189, 240, 244, 272, 276, 278, 283], "local": [3, 29, 31, 32, 33, 56, 58, 81, 98, 127, 129, 182, 192, 198, 223, 236], "improv": [3, 4, 10, 19, 20, 56, 81, 191, 195, 198, 199, 201, 202, 204, 206, 221, 224, 230, 272, 278], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 35, 37, 38, 39, 47, 48, 51, 55, 56, 57, 59, 60, 62, 69, 73, 80, 83, 90, 92, 96, 97, 112, 115, 122, 124, 130, 134, 135, 137, 154, 155, 164, 167, 170, 186, 189, 193, 194, 195, 198, 200, 201, 206, 207, 208, 212, 217, 218, 221, 223, 224, 225, 226, 237, 243, 250, 252, 254, 257, 271, 272, 276, 277, 282], "gmpy2": [3, 195, 196], "wrapper": [3, 10, 11, 20, 32, 34, 38, 48, 56, 64, 92, 134, 182, 185, 194, 195, 198, 205, 212, 221, 224, 225, 237, 241, 243], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 23, 25, 26, 32, 33, 34, 36, 37, 38, 39, 45, 47, 48, 52, 55, 56, 57, 61, 62, 64, 66, 71, 74, 76, 81, 83, 85, 86, 87, 89, 92, 93, 96, 98, 103, 106, 110, 122, 130, 137, 138, 154, 155, 156, 160, 167, 169, 172, 175, 176, 177, 180, 184, 188, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 205, 210, 211, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 234, 238, 239, 240, 241, 243, 244, 246, 250, 255, 271, 272, 274, 275, 277, 278, 283], "larg": [3, 4, 6, 12, 18, 47, 48, 56, 57, 66, 81, 83, 95, 96, 110, 116, 134, 137, 150, 175, 179, 190, 195, 196, 198, 201, 204, 205, 206, 212, 215, 217, 225, 230, 237, 244, 246, 253, 271, 276, 282], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 22, 23, 31, 32, 33, 34, 36, 38, 39, 45, 47, 48, 49, 50, 52, 55, 56, 57, 58, 59, 60, 61, 64, 66, 69, 80, 81, 83, 84, 85, 86, 87, 89, 92, 93, 96, 98, 99, 106, 108, 114, 159, 164, 166, 167, 168, 170, 172, 180, 182, 185, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 204, 205, 207, 210, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 229, 230, 231, 237, 238, 240, 243, 246, 272, 274, 277, 281, 282], "faster": [3, 18, 24, 38, 41, 56, 64, 87, 96, 97, 110, 112, 115, 116, 134, 194, 195, 196, 198, 200, 201, 202, 206, 208, 212, 217, 218, 221, 222, 224, 237, 240], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 30, 36, 38, 48, 56, 57, 58, 61, 62, 64, 65, 72, 81, 83, 84, 86, 87, 92, 93, 96, 98, 104, 106, 114, 150, 154, 155, 164, 180, 182, 184, 185, 190, 191, 195, 196, 200, 201, 202, 205, 207, 208, 210, 221, 222, 225, 237, 241, 243, 246, 274, 276, 277, 281, 282], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 34, 36, 38, 47, 57, 62, 63, 65, 73, 87, 96, 98, 168, 169, 193, 195, 196, 197, 198, 200, 201, 202, 205, 212, 213, 217, 218, 221, 225, 235, 236, 237, 243, 244, 248, 261, 262, 274, 277], "oper": [3, 5, 6, 11, 18, 19, 20, 24, 26, 30, 34, 38, 47, 48, 49, 55, 56, 57, 58, 59, 60, 62, 64, 66, 74, 76, 79, 81, 86, 87, 89, 96, 98, 106, 107, 110, 115, 116, 124, 128, 134, 137, 142, 146, 147, 151, 153, 154, 155, 156, 161, 162, 165, 167, 168, 169, 170, 179, 180, 182, 187, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 208, 210, 213, 214, 217, 220, 221, 223, 224, 227, 228, 229, 230, 236, 237, 240, 243, 244, 250, 261, 265, 267, 268, 273, 274, 275, 277, 282], "poli": [3, 11, 12, 55, 56, 57, 61, 62, 64, 65, 72, 78, 83, 87, 89, 92, 96, 137, 192, 193, 197, 198, 200, 201, 202, 204, 207, 220, 221, 223, 224, 236, 268], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 23, 24, 25, 26, 28, 32, 33, 34, 36, 38, 40, 42, 44, 45, 47, 48, 49, 50, 54, 57, 59, 61, 62, 64, 66, 71, 72, 73, 78, 84, 85, 86, 87, 93, 97, 99, 104, 106, 107, 109, 111, 114, 115, 117, 119, 120, 122, 130, 132, 135, 137, 138, 139, 141, 143, 147, 149, 151, 152, 153, 156, 158, 159, 167, 168, 170, 179, 180, 181, 182, 184, 186, 188, 194, 195, 197, 205, 207, 208, 210, 213, 217, 221, 222, 223, 225, 231, 240, 243, 244, 246, 250, 254, 255, 259, 267, 268, 274, 278, 279, 282, 283], "domain": [3, 6, 10, 11, 16, 20, 36, 37, 56, 57, 59, 61, 62, 64, 75, 77, 78, 81, 83, 89, 92, 93, 96, 103, 106, 120, 137, 192, 194, 197, 198, 200, 202, 203, 220, 221, 223, 225, 268, 278, 283], "No": [3, 6, 7, 12, 26, 37, 56, 64, 71, 86, 96, 99, 107, 120, 165, 191, 201, 207, 208, 217, 218, 223, 224, 225, 230, 234, 240, 241, 243, 271, 283], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 26, 28, 36, 37, 38, 39, 44, 47, 52, 56, 57, 58, 60, 62, 64, 68, 81, 83, 86, 87, 92, 96, 97, 115, 116, 120, 122, 130, 133, 134, 137, 154, 170, 178, 189, 192, 194, 195, 196, 198, 200, 209, 212, 213, 215, 217, 218, 221, 222, 223, 224, 225, 229, 238, 243, 271, 272, 274, 275, 276, 277, 281, 282, 283], "algorithm": [3, 6, 11, 12, 18, 23, 24, 25, 26, 36, 40, 41, 46, 47, 48, 50, 52, 54, 55, 56, 57, 60, 61, 62, 68, 73, 81, 83, 86, 89, 92, 93, 96, 99, 107, 114, 134, 157, 175, 180, 190, 191, 192, 193, 194, 195, 196, 199, 200, 202, 206, 210, 213, 214, 217, 218, 221, 223, 224, 225, 231, 240, 243, 267, 272, 277, 278, 282], "simplif": [3, 11, 12, 18, 31, 33, 35, 36, 38, 56, 58, 61, 62, 81, 87, 92, 98, 112, 120, 134, 137, 154, 170, 180, 201, 206, 216, 217, 221, 223, 224, 261, 262, 271, 273, 275, 276], "factor": [3, 10, 11, 12, 39, 47, 48, 55, 56, 57, 60, 61, 62, 64, 81, 83, 92, 96, 99, 106, 137, 139, 147, 151, 154, 166, 170, 175, 176, 177, 192, 195, 196, 197, 199, 200, 201, 208, 214, 215, 217, 218, 221, 223, 225, 229, 240, 254, 257, 276, 278], "matric": [3, 6, 11, 17, 18, 34, 38, 56, 57, 83, 93, 95, 106, 114, 115, 116, 120, 124, 134, 137, 139, 142, 143, 145, 153, 154, 164, 169, 180, 189, 190, 194, 200, 205, 206, 213, 215, 217, 218, 221, 223, 224, 226, 238, 239, 267, 273, 275, 276], "thu": [3, 4, 10, 11, 12, 16, 23, 34, 41, 47, 48, 56, 57, 58, 62, 64, 79, 81, 83, 87, 90, 92, 95, 96, 107, 119, 124, 130, 134, 175, 180, 193, 198, 200, 202, 206, 212, 215, 217, 238, 243, 244, 255, 256, 274, 277, 282, 283], "speed": [3, 6, 10, 33, 38, 47, 56, 57, 60, 87, 96, 97, 108, 114, 115, 116, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 137, 138, 141, 144, 179, 180, 184, 189, 190, 202, 205, 206, 212, 217, 221, 237, 240, 243, 277, 278], "non": [3, 4, 11, 12, 18, 20, 24, 26, 29, 34, 36, 39, 46, 49, 55, 56, 57, 61, 62, 63, 64, 65, 66, 69, 70, 71, 83, 85, 86, 87, 88, 89, 92, 93, 95, 110, 115, 117, 122, 124, 128, 132, 133, 137, 154, 159, 169, 170, 172, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 208, 212, 213, 215, 217, 218, 220, 221, 223, 224, 225, 226, 229, 230, 231, 236, 238, 243, 246, 257, 277, 282, 283], "who": [3, 4, 6, 16, 20, 57, 58, 137, 189, 198, 205, 275], "abl": [3, 4, 6, 11, 16, 18, 20, 37, 38, 47, 52, 56, 57, 58, 67, 75, 83, 89, 92, 96, 103, 120, 132, 134, 135, 137, 138, 192, 195, 202, 221, 224, 236, 254, 276, 281, 283], "experi": [3, 122, 224, 225], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 22, 24, 27, 34, 39, 46, 56, 92, 95, 98, 137, 138, 195, 199, 205, 210, 215, 221, 224, 276, 277, 281], "interfac": [3, 7, 11, 23, 36, 56, 84, 114, 139, 165, 185, 189, 195, 198, 203, 224, 237, 238], "ipython": [3, 6, 10, 11, 12, 28, 84, 137, 185, 244, 248, 249, 280, 281], "jupyt": [3, 10, 11, 20, 244, 248], "notebook": [3, 11, 20, 28, 84, 185, 244, 280, 281], "init_sess": [3, 84, 281], "usual": [3, 10, 11, 12, 16, 18, 37, 39, 47, 55, 56, 57, 74, 81, 83, 92, 130, 156, 168, 175, 186, 188, 189, 192, 193, 195, 196, 198, 204, 205, 206, 212, 215, 221, 224, 225, 226, 230, 231, 238, 240, 244, 250, 259, 271, 274, 277, 281, 282], "flag": [3, 4, 14, 20, 36, 38, 47, 48, 52, 54, 56, 69, 71, 83, 86, 87, 88, 92, 96, 114, 120, 154, 191, 196, 198, 201, 202, 205, 206, 207, 213, 217, 218, 221, 223, 224, 231, 236, 237, 243, 246, 271, 282], "auto_symbol": [3, 84, 98], "auto_int_to_integ": [3, 84], "qt": 3, "consol": [3, 4, 12, 56, 84, 185, 191, 281], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 22, 26, 31, 32, 33, 34, 35, 36, 48, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 69, 71, 72, 79, 80, 81, 83, 84, 87, 90, 91, 92, 95, 96, 97, 99, 106, 107, 109, 110, 111, 113, 114, 116, 117, 120, 124, 130, 131, 132, 133, 134, 135, 137, 138, 145, 149, 153, 154, 158, 159, 162, 165, 167, 168, 169, 170, 172, 173, 175, 177, 179, 180, 182, 184, 185, 186, 189, 190, 191, 192, 193, 196, 198, 200, 201, 202, 205, 206, 208, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 244, 246, 250, 252, 253, 254, 256, 257, 259, 265, 267, 272, 273, 274, 275, 276, 278, 281, 282, 283], "mathjax": [3, 7, 84, 185, 281], "preview": [3, 37, 239], "save": [3, 11, 36, 56, 92, 96, 191, 204, 223, 240], "viewer": [3, 7, 37, 205, 239], "parser": [3, 89, 98, 130, 137, 236, 267], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 46, 48, 56, 57, 59, 61, 62, 64, 68, 72, 76, 79, 82, 83, 84, 86, 89, 90, 91, 92, 97, 98, 99, 101, 102, 104, 107, 110, 120, 121, 126, 130, 132, 133, 137, 139, 142, 144, 145, 157, 160, 173, 174, 175, 176, 186, 189, 191, 196, 197, 199, 202, 203, 205, 209, 212, 215, 219, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 253, 255, 257, 258, 259, 260, 261, 267, 268, 269, 271, 274, 276, 282, 283], "parse_expr": [3, 10, 18, 26, 98], "mathematca": 3, "parse_mathematica": [3, 10, 98], "maxima": [3, 23, 98, 224], "parse_maxima": [3, 98], "antlr": [3, 98, 120], "runtim": [3, 11, 38, 56, 116], "autolev": [3, 122, 130, 267], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 54, 56, 57, 59, 60, 61, 63, 64, 66, 71, 72, 74, 79, 81, 83, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 98, 99, 100, 106, 110, 114, 120, 122, 124, 131, 134, 135, 160, 162, 165, 170, 175, 180, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 207, 212, 213, 215, 217, 218, 220, 221, 223, 224, 225, 227, 229, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 250, 253, 254, 257, 259, 272, 274, 276, 277, 278, 281, 282, 283], "antlr4": [3, 98], "awar": [3, 4, 6, 11, 12, 19, 36, 56, 60, 86, 92, 215, 225, 244], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 30, 31, 32, 33, 38, 47, 48, 50, 52, 54, 55, 56, 57, 58, 61, 62, 64, 66, 69, 72, 75, 78, 79, 81, 83, 86, 87, 88, 89, 92, 95, 96, 99, 100, 102, 104, 106, 107, 114, 115, 116, 120, 122, 130, 132, 133, 134, 135, 137, 150, 165, 167, 170, 179, 180, 189, 190, 191, 192, 193, 196, 198, 200, 201, 205, 206, 213, 214, 215, 217, 218, 221, 223, 224, 225, 229, 230, 236, 237, 238, 239, 240, 241, 243, 244, 247, 274, 276, 277, 281, 282], "match": [3, 4, 6, 10, 12, 18, 20, 47, 48, 55, 56, 64, 69, 81, 83, 87, 92, 114, 119, 146, 171, 179, 180, 194, 201, 217, 218, 221, 222, 223, 225, 234, 236, 238, 243, 244, 256, 272], "wa": [3, 4, 10, 12, 14, 18, 20, 45, 47, 48, 50, 56, 57, 58, 64, 69, 92, 96, 98, 110, 111, 120, 122, 124, 134, 135, 165, 175, 188, 189, 190, 192, 198, 200, 201, 202, 204, 205, 214, 215, 217, 221, 223, 225, 234, 236, 239, 241, 243, 244, 272, 274, 276, 277, 280], "compil": [3, 38, 84, 97, 110, 137, 185, 205, 217, 230, 236, 237, 238, 261, 276], "4": [3, 7, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 102, 104, 106, 107, 108, 112, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 142, 146, 149, 154, 164, 165, 167, 168, 169, 170, 171, 173, 179, 180, 181, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 236, 237, 240, 243, 244, 250, 253, 254, 255, 257, 259, 260, 271, 272, 274, 276, 277, 278, 282, 283], "clang": [3, 98], "bind": [3, 38, 205, 237], "parse_c": 3, "lfortran": [3, 98], "fortran": [3, 11, 16, 20, 36, 97, 98, 110, 137, 190, 238, 281], "satisfi": [3, 7, 10, 18, 23, 25, 33, 34, 36, 39, 44, 47, 52, 56, 57, 61, 64, 66, 79, 81, 85, 86, 92, 96, 116, 134, 154, 159, 192, 193, 198, 200, 201, 205, 211, 212, 213, 218, 221, 222, 223, 224, 225, 231, 277, 282], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 23, 24, 25, 26, 27, 30, 31, 32, 33, 36, 37, 38, 39, 41, 46, 47, 48, 53, 56, 57, 59, 61, 62, 64, 67, 69, 76, 77, 79, 80, 83, 86, 87, 88, 92, 96, 97, 98, 110, 120, 130, 139, 141, 142, 145, 154, 155, 163, 164, 166, 174, 179, 181, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 209, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 229, 230, 240, 243, 244, 247, 258, 261, 265, 272, 276, 282], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 26, 55, 56, 64, 70, 80, 87, 92, 96, 158, 159, 170, 175, 180, 192, 193, 198, 202, 212, 214, 215, 217, 218, 221, 223, 224, 230, 240, 243, 244, 253, 272, 274, 276, 277, 282], "sat": [3, 32], "solver": [3, 6, 11, 24, 32, 64, 92, 96, 119, 130, 137, 138, 194, 197, 205, 217, 218, 222, 236, 261, 262, 268, 273, 275], "ask": [3, 6, 11, 12, 15, 18, 19, 32, 33, 34, 35, 56, 68, 81, 120, 175, 192, 211, 217, 224, 243, 262, 274], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 56, 60, 62, 66, 72, 81, 83, 86, 99, 100, 102, 111, 114, 115, 119, 122, 124, 125, 126, 127, 130, 132, 133, 134, 137, 158, 159, 173, 186, 189, 191, 193, 195, 214, 217, 218, 223, 236, 257, 259, 267, 281, 282], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 225, 277], "primarili": [3, 11, 18, 38, 56, 62, 96, 99, 169, 201, 203, 237, 240, 246, 254], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 24, 28, 30, 31, 32, 33, 36, 37, 38, 48, 56, 60, 63, 64, 66, 80, 83, 89, 92, 96, 97, 98, 99, 100, 102, 103, 106, 110, 114, 120, 137, 165, 180, 188, 191, 193, 194, 195, 196, 198, 200, 201, 202, 205, 210, 211, 212, 213, 217, 221, 222, 223, 224, 225, 226, 230, 234, 236, 237, 238, 244, 255, 257, 272, 274, 277, 281], "give": [3, 4, 6, 12, 14, 18, 19, 20, 23, 24, 25, 26, 31, 33, 38, 39, 45, 47, 48, 49, 50, 55, 56, 57, 58, 61, 62, 64, 66, 68, 69, 71, 72, 80, 81, 83, 84, 86, 89, 92, 95, 96, 97, 99, 102, 106, 114, 120, 137, 149, 164, 165, 167, 168, 172, 173, 175, 176, 178, 180, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 205, 206, 207, 208, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 236, 237, 238, 243, 254, 259, 274, 275, 277, 282, 283], "rudimentari": [3, 20, 198], "text": [3, 4, 6, 7, 11, 20, 28, 38, 47, 57, 61, 62, 64, 74, 81, 84, 87, 92, 96, 135, 175, 185, 190, 191, 192, 205, 212, 218, 221, 224, 225, 236], "pyglet": [3, 205], "pygletplot": [3, 191], "2d": [3, 10, 69, 70, 72, 99, 100, 102, 148, 180, 191, 205, 218, 230, 276], "3d": [3, 10, 30, 40, 69, 70, 99, 148, 171, 186, 191, 254, 256, 257, 258, 259], "evalu": [3, 6, 11, 16, 18, 19, 22, 26, 31, 32, 33, 36, 38, 56, 58, 61, 62, 64, 67, 71, 72, 81, 83, 86, 89, 92, 96, 97, 98, 106, 110, 112, 120, 134, 135, 145, 147, 149, 151, 156, 159, 167, 170, 190, 191, 195, 196, 198, 199, 201, 205, 206, 211, 212, 213, 215, 217, 218, 221, 223, 224, 225, 227, 237, 238, 239, 244, 257, 262, 271, 272, 273, 274, 276, 278], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 22, 23, 25, 34, 36, 38, 55, 56, 61, 64, 68, 72, 79, 92, 96, 98, 102, 103, 104, 106, 114, 115, 116, 120, 122, 130, 134, 138, 142, 149, 152, 167, 174, 179, 189, 191, 195, 196, 198, 199, 200, 201, 204, 205, 214, 215, 217, 221, 223, 224, 230, 236, 237, 243, 244, 262, 271, 274, 278, 282], "variou": [3, 6, 7, 11, 16, 20, 36, 38, 40, 47, 55, 56, 61, 76, 81, 83, 86, 92, 117, 149, 153, 154, 165, 167, 179, 192, 193, 196, 197, 198, 200, 206, 212, 215, 218, 221, 222, 224, 238, 282], "primari": [3, 4, 6, 7, 18, 20, 56, 68, 86, 189, 192, 238, 244], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 23, 37, 38, 46, 47, 48, 50, 54, 56, 58, 61, 64, 66, 68, 69, 70, 71, 72, 73, 83, 85, 86, 89, 90, 92, 96, 97, 98, 102, 103, 104, 106, 114, 117, 119, 120, 123, 127, 129, 131, 134, 135, 137, 138, 139, 142, 143, 149, 156, 158, 159, 160, 164, 167, 168, 169, 170, 173, 175, 180, 181, 182, 184, 186, 188, 189, 191, 192, 194, 198, 200, 201, 205, 207, 217, 221, 222, 223, 224, 225, 226, 239, 244, 250, 253, 254, 257, 259, 274], "standard": [3, 7, 10, 11, 12, 18, 20, 23, 26, 38, 56, 60, 62, 64, 79, 81, 83, 84, 85, 86, 90, 92, 96, 97, 98, 109, 147, 151, 180, 186, 190, 192, 195, 196, 198, 205, 208, 213, 217, 218, 221, 224, 225, 238, 244, 247, 254, 259, 271, 274, 282], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 23, 29, 37, 39, 40, 45, 47, 48, 49, 52, 56, 58, 61, 64, 72, 76, 80, 81, 83, 85, 89, 92, 95, 96, 98, 99, 102, 110, 115, 117, 119, 120, 124, 126, 127, 130, 134, 150, 164, 167, 168, 173, 175, 178, 179, 180, 182, 184, 186, 188, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 212, 215, 217, 218, 221, 222, 224, 226, 227, 230, 231, 234, 238, 240, 243, 244, 247, 250, 254, 255, 256, 257, 259, 271, 272, 274, 275, 276, 277, 282, 283], "principl": [3, 57, 87, 96, 141, 190, 192, 193, 198, 214, 223], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 24, 26, 29, 30, 33, 36, 37, 38, 47, 48, 56, 57, 58, 60, 62, 63, 64, 66, 69, 70, 72, 83, 84, 86, 87, 89, 92, 93, 96, 98, 99, 104, 106, 111, 119, 120, 124, 137, 138, 142, 159, 160, 164, 165, 167, 168, 180, 185, 191, 192, 194, 195, 196, 198, 200, 201, 203, 205, 206, 212, 213, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 234, 236, 237, 238, 239, 241, 243, 244, 246, 249, 250, 271, 272, 277, 281, 282, 283], "appropri": [3, 6, 7, 12, 16, 23, 25, 47, 56, 62, 71, 92, 110, 122, 159, 160, 170, 180, 188, 194, 195, 201, 202, 205, 211, 212, 217, 218, 223, 225, 230, 238, 255, 281], "namespac": [3, 6, 10, 29, 38, 39, 56, 196, 218, 221, 222, 236, 238, 239, 244], "dictionari": [3, 10, 11, 26, 37, 38, 45, 47, 48, 54, 56, 61, 70, 72, 85, 87, 92, 95, 96, 98, 99, 112, 115, 116, 119, 120, 122, 124, 127, 132, 134, 160, 170, 180, 189, 191, 193, 196, 198, 200, 201, 203, 205, 212, 217, 218, 221, 222, 223, 224, 225, 229, 231, 236, 240, 243, 244, 250, 271, 278], "third": [3, 4, 14, 38, 47, 48, 56, 64, 66, 70, 106, 114, 167, 173, 188, 193, 201, 215, 221, 224, 225, 241, 243, 272, 277], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 47, 48, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 72, 73, 81, 83, 84, 86, 87, 89, 92, 95, 96, 98, 99, 104, 106, 114, 115, 119, 120, 132, 133, 137, 144, 147, 151, 153, 156, 159, 164, 165, 167, 168, 169, 170, 178, 185, 186, 190, 191, 192, 193, 195, 196, 198, 200, 201, 204, 205, 206, 207, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 229, 230, 236, 237, 238, 239, 240, 241, 243, 244, 246, 254, 255, 257, 271, 272, 277, 278, 282], "default": [3, 4, 6, 7, 11, 12, 18, 20, 23, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 46, 47, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 78, 83, 84, 86, 87, 89, 92, 93, 96, 97, 98, 99, 100, 102, 104, 106, 108, 110, 111, 112, 114, 115, 116, 120, 134, 143, 160, 162, 165, 167, 168, 170, 176, 179, 180, 182, 184, 185, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 230, 231, 236, 237, 238, 240, 241, 243, 244, 246, 250, 271, 272, 276, 278, 281, 282], "translat": [3, 10, 38, 47, 56, 65, 67, 71, 73, 97, 98, 106, 109, 114, 115, 127, 129, 131, 135, 188, 191, 205, 221, 223, 237, 238, 244, 246, 255], "numpi": [3, 6, 10, 11, 20, 24, 28, 38, 56, 79, 84, 97, 104, 120, 137, 154, 164, 194, 205, 225, 230, 237, 238, 244, 271, 274], "By": [3, 12, 18, 20, 23, 31, 33, 38, 46, 55, 56, 58, 60, 61, 64, 70, 71, 75, 79, 81, 86, 87, 92, 95, 96, 97, 98, 99, 100, 104, 111, 165, 170, 191, 193, 195, 196, 198, 200, 201, 202, 204, 205, 207, 212, 214, 217, 218, 221, 223, 224, 225, 229, 231, 232, 236, 239, 243, 244, 257, 271, 276, 277, 282], "produc": [3, 6, 7, 11, 19, 20, 24, 26, 37, 47, 56, 57, 69, 83, 86, 92, 180, 195, 200, 201, 205, 212, 221, 222, 223, 225, 234, 236, 240, 241, 243, 281], "behavior": [3, 4, 10, 11, 12, 20, 47, 56, 61, 64, 83, 98, 109, 110, 130, 134, 165, 192, 193, 200, 201, 205, 206, 210, 212, 214, 217, 234, 237, 239, 243, 244, 274], "backward": [3, 8, 16, 36, 56, 87, 92, 205, 243, 282], "scipi": [3, 11, 38, 56, 64, 110, 137, 164, 205, 225, 237, 244, 271, 280], "special": [3, 6, 11, 13, 18, 20, 26, 29, 30, 48, 56, 57, 59, 60, 61, 63, 71, 74, 81, 83, 87, 92, 137, 154, 159, 186, 192, 195, 198, 199, 200, 205, 214, 215, 217, 220, 221, 222, 223, 225, 236, 237, 238, 241, 243, 244, 254, 257, 259, 262, 272, 273, 277], "cupi": [3, 97], "cuda": [3, 97], "gpu": [3, 97, 137], "jax": [3, 97, 244], "xla": [3, 97], "program": [3, 7, 12, 18, 38, 40, 48, 137, 175, 190, 238, 240, 274, 276, 280, 282], "tpu": [3, 97], "compatibli": 3, "tensorflow": [3, 244], "learn": [3, 5, 7, 22, 26, 92, 135, 189, 214, 224, 271, 274, 275, 276, 280], "numexpr": [3, 244], "fast": [3, 18, 38, 56, 83, 91, 92, 96, 142, 196, 197, 198, 199, 200, 201, 202, 208, 212, 221, 223, 240, 243, 244], "alreadi": [3, 4, 10, 12, 18, 20, 23, 26, 28, 47, 48, 56, 57, 65, 66, 69, 70, 72, 81, 83, 87, 93, 96, 102, 107, 111, 120, 134, 139, 165, 167, 170, 186, 188, 189, 191, 194, 195, 198, 200, 204, 208, 214, 215, 217, 221, 224, 225, 231, 255, 257, 272, 274, 275, 276, 280, 281, 282, 283], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 23, 25, 26, 30, 32, 33, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 61, 62, 64, 66, 69, 70, 71, 72, 73, 75, 83, 84, 85, 86, 87, 89, 92, 93, 95, 97, 98, 100, 102, 104, 106, 107, 108, 110, 115, 116, 119, 120, 124, 134, 135, 137, 143, 146, 149, 150, 153, 154, 155, 156, 158, 159, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 178, 179, 180, 184, 185, 186, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 205, 207, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 230, 231, 236, 238, 240, 243, 246, 250, 253, 254, 256, 257, 259, 262, 268, 271, 272, 274, 276, 277, 278, 282], "languag": [3, 7, 11, 12, 16, 20, 38, 62, 92, 98, 110, 120, 137, 205, 210, 225, 237, 238, 274, 276, 278, 280, 282], "valid": [3, 6, 7, 10, 18, 19, 20, 31, 33, 35, 36, 37, 38, 49, 55, 56, 61, 62, 72, 92, 96, 112, 114, 115, 120, 122, 135, 139, 143, 162, 167, 177, 180, 185, 189, 195, 198, 201, 204, 205, 213, 217, 218, 221, 223, 224, 225, 244, 278, 282], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 26, 29, 34, 38, 39, 47, 48, 49, 56, 60, 62, 67, 72, 74, 81, 86, 87, 89, 92, 96, 98, 119, 127, 137, 150, 164, 168, 170, 179, 188, 192, 195, 198, 201, 203, 208, 215, 218, 220, 221, 224, 225, 240, 243, 244, 247, 259, 274, 276, 277], "string": [3, 4, 6, 7, 11, 12, 20, 31, 37, 38, 40, 45, 56, 57, 58, 59, 60, 63, 69, 79, 84, 85, 86, 89, 92, 96, 98, 99, 102, 104, 110, 111, 114, 117, 141, 150, 154, 164, 168, 172, 178, 179, 180, 184, 185, 186, 191, 194, 196, 200, 205, 206, 212, 217, 221, 225, 226, 229, 230, 231, 236, 237, 238, 243, 244, 246, 248, 250, 252, 254, 273, 274, 277, 281], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 30, 32, 34, 37, 38, 39, 40, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 61, 62, 64, 66, 67, 69, 71, 72, 73, 78, 79, 83, 85, 86, 87, 89, 92, 96, 98, 99, 100, 103, 104, 106, 111, 114, 115, 117, 119, 120, 122, 123, 124, 125, 128, 130, 132, 133, 134, 135, 137, 139, 141, 142, 144, 156, 157, 159, 163, 164, 167, 168, 170, 172, 175, 176, 177, 178, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 201, 203, 205, 207, 208, 211, 212, 213, 215, 217, 218, 221, 223, 224, 225, 227, 229, 230, 231, 238, 240, 243, 244, 250, 253, 257, 259, 267, 272, 274, 276, 277, 282, 283], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 23, 33, 36, 38, 39, 41, 46, 47, 51, 55, 56, 57, 58, 62, 64, 68, 69, 79, 83, 85, 86, 87, 92, 96, 97, 98, 99, 102, 106, 110, 114, 115, 117, 119, 120, 122, 134, 135, 137, 139, 153, 156, 159, 160, 164, 166, 167, 168, 169, 170, 172, 175, 178, 179, 180, 181, 182, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 201, 202, 205, 208, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 227, 230, 236, 237, 239, 240, 243, 244, 250, 252, 253, 271, 272, 274, 276, 277, 278, 282], "within": [3, 7, 10, 11, 18, 24, 36, 37, 38, 56, 62, 69, 72, 86, 87, 89, 96, 97, 99, 127, 165, 179, 180, 188, 189, 193, 195, 201, 203, 213, 221, 223, 224, 225, 236, 237, 246], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 23, 24, 25, 26, 36, 37, 38, 39, 41, 44, 47, 48, 52, 55, 56, 57, 58, 60, 61, 62, 64, 68, 71, 72, 73, 74, 78, 81, 83, 86, 87, 89, 92, 93, 96, 97, 98, 100, 106, 110, 114, 115, 120, 122, 123, 124, 125, 131, 133, 135, 137, 143, 154, 160, 165, 167, 169, 170, 175, 176, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 210, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 229, 231, 234, 236, 238, 239, 241, 243, 244, 245, 246, 247, 250, 253, 254, 272, 276, 277, 278, 281, 282, 283], "subpackag": [3, 261], "f2py": [3, 38, 97, 237, 238], "ufuncifi": [3, 38, 237], "cython": [3, 38, 97, 137, 237], "codegen": [3, 20, 97, 205, 237, 242, 269], "relat": [3, 4, 6, 7, 11, 19, 31, 33, 34, 36, 39, 40, 46, 47, 54, 58, 61, 62, 72, 78, 81, 83, 87, 92, 96, 102, 109, 124, 127, 130, 131, 137, 139, 144, 152, 154, 180, 184, 188, 190, 191, 192, 198, 200, 201, 202, 204, 205, 209, 211, 212, 215, 217, 218, 220, 221, 223, 224, 225, 243, 282], "reli": [3, 10, 12, 38, 92, 97, 103, 198, 204, 205, 212, 217, 224, 239, 244, 278], "llvm": 3, "gcc": [3, 238], "ifort": 3, "therefor": [3, 4, 6, 20, 23, 39, 47, 52, 56, 60, 64, 72, 85, 96, 106, 114, 186, 189, 190, 191, 195, 198, 201, 205, 221, 224, 225, 226, 231, 250, 252, 254, 255, 257, 259], "aesara": [3, 10, 38, 137], "aesaracod": [3, 10, 38, 97, 205], "aeseara": 3, "previous": [3, 4, 10, 55, 114, 128, 131, 186, 204, 217, 225, 257], "theano": [3, 10, 137, 281], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 85, 86, 87, 88, 89, 92, 93, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 128, 132, 134, 135, 137, 139, 141, 142, 143, 144, 146, 147, 151, 154, 155, 156, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 225, 226, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 253, 255, 257, 271, 272, 277, 278, 281, 282, 283], "graph": [3, 6, 11, 48, 64, 85, 92, 97, 194, 205, 224, 243, 277, 281], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 46, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 81, 83, 86, 87, 89, 90, 92, 97, 98, 99, 100, 104, 106, 107, 110, 111, 114, 115, 116, 117, 119, 120, 124, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 143, 144, 145, 153, 154, 156, 164, 165, 169, 170, 172, 173, 176, 177, 179, 180, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 205, 207, 208, 211, 212, 213, 214, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 236, 237, 238, 239, 240, 243, 244, 247, 248, 253, 254, 255, 260, 261, 265, 271, 272, 274, 276, 277, 278, 281, 282], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 214], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 28, 36, 45, 48, 56, 57, 58, 60, 62, 65, 72, 76, 95, 96, 102, 111, 114, 130, 134, 138, 189, 195, 198, 200, 205, 207, 212, 218, 221, 224, 225, 236, 250, 252, 272, 274, 276], "llvm_callabl": 3, "callabl": [3, 12, 38, 47, 92, 98, 155, 200, 205, 206, 217, 234, 237, 238, 243, 244, 245], "unlik": [3, 6, 11, 12, 18, 19, 35, 57, 83, 92, 96, 98, 120, 188, 198, 205, 218, 221, 224, 240, 241, 274, 276, 277, 278, 281], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 69, 72, 73, 75, 78, 81, 83, 84, 85, 86, 87, 92, 93, 96, 97, 98, 99, 100, 106, 107, 110, 114, 115, 119, 120, 121, 122, 123, 131, 132, 133, 134, 135, 143, 147, 151, 154, 164, 165, 166, 167, 168, 169, 170, 175, 179, 180, 182, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 211, 213, 217, 218, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 236, 237, 238, 240, 243, 244, 246, 250, 252, 254, 255, 260, 272, 274, 275, 277, 281, 282, 283], "assum": [3, 6, 11, 12, 15, 18, 20, 23, 25, 33, 38, 39, 40, 45, 47, 55, 56, 57, 58, 61, 62, 64, 66, 73, 74, 81, 83, 92, 96, 99, 102, 106, 119, 120, 126, 132, 133, 134, 135, 137, 143, 165, 169, 170, 180, 184, 186, 192, 193, 195, 198, 201, 203, 205, 212, 213, 215, 217, 218, 221, 222, 224, 225, 229, 230, 231, 238, 243, 246, 253, 255, 259, 262, 275, 277, 280, 282, 283], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 34, 37, 38, 39, 40, 47, 49, 52, 55, 56, 57, 60, 62, 64, 66, 67, 68, 81, 84, 86, 87, 89, 90, 92, 96, 97, 98, 100, 114, 115, 120, 122, 130, 134, 135, 137, 142, 154, 170, 174, 175, 176, 189, 191, 192, 195, 196, 198, 200, 201, 202, 205, 210, 212, 213, 214, 217, 218, 221, 223, 224, 225, 226, 230, 236, 239, 241, 243, 244, 255, 274, 277], "captur": [3, 56, 243], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 23, 26, 37, 38, 56, 57, 64, 80, 83, 84, 86, 87, 89, 92, 96, 97, 98, 103, 106, 115, 119, 120, 128, 134, 137, 138, 142, 143, 154, 166, 170, 179, 180, 184, 185, 186, 189, 195, 198, 201, 205, 206, 215, 217, 218, 220, 221, 223, 225, 230, 236, 237, 238, 240, 243, 244, 250, 274, 276, 277, 278, 281, 282, 283], "suit": [3, 4, 7, 18, 20, 23, 37, 191, 201, 234, 236], "stat": [3, 261, 268], "sampl": [3, 8, 16, 47, 59, 104, 154, 191, 205, 225, 272, 276], "At": [3, 10, 18, 20, 23, 36, 52, 62, 64, 83, 96, 99, 100, 110, 175, 179, 189, 200, 215, 244], "least": [3, 4, 7, 10, 14, 18, 34, 36, 38, 47, 56, 62, 68, 80, 81, 83, 92, 96, 97, 115, 150, 164, 172, 192, 193, 195, 196, 198, 200, 201, 212, 214, 217, 221, 223, 224, 225, 238, 282], "random": [3, 6, 10, 40, 45, 47, 48, 54, 57, 66, 69, 70, 91, 92, 96, 154, 166, 191, 198, 205, 235, 236, 239, 243, 274, 278, 282], "pymc": [3, 225], "manipul": [3, 11, 15, 16, 18, 37, 38, 39, 47, 56, 62, 64, 81, 96, 97, 113, 120, 130, 135, 168, 188, 194, 195, 196, 199, 204, 205, 207, 214, 217, 228, 243, 261, 267, 268, 271, 272, 273, 274, 275, 276, 278, 281, 282], "use_symengin": 3, "physic": [3, 6, 16, 38, 49, 92, 96, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 184, 185, 190, 199, 225, 240, 243, 257, 276, 282], "mechan": [3, 20, 56, 79, 83, 99, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 152, 156, 159, 165, 167, 168, 169, 172, 179, 180, 187, 190, 267], "liealgebra": [3, 85], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 27, 34, 38, 46, 47, 48, 56, 58, 68, 84, 85, 86, 87, 92, 97, 110, 117, 120, 134, 137, 154, 170, 175, 188, 189, 202, 204, 212, 213, 214, 217, 221, 224, 229, 239, 241, 243, 271, 272, 274, 276, 277, 278, 281, 282], "configur": [3, 4, 5, 10, 48, 86, 106, 114, 115, 123, 124, 127, 129, 130, 132, 134, 205], "otherwis": [3, 4, 14, 18, 19, 20, 36, 37, 38, 47, 48, 52, 55, 56, 57, 60, 62, 64, 65, 66, 69, 70, 71, 72, 81, 83, 85, 86, 88, 92, 95, 96, 98, 104, 106, 108, 111, 119, 120, 155, 160, 166, 184, 187, 188, 192, 196, 198, 200, 201, 203, 205, 207, 208, 210, 211, 213, 217, 218, 221, 222, 223, 224, 225, 226, 234, 236, 238, 243, 244, 271, 272, 281], "ordinari": [3, 18, 19, 22, 36, 38, 47, 56, 60, 61, 62, 64, 74, 78, 79, 83, 93, 106, 130, 192, 194, 195, 204, 211, 221, 226, 240, 276, 282], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 45, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 99, 100, 102, 104, 106, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 142, 144, 145, 146, 147, 148, 150, 151, 154, 159, 160, 165, 167, 168, 169, 170, 171, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 236, 237, 238, 239, 241, 243, 244, 246, 250, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 28, 29, 37, 48, 55, 56, 57, 64, 68, 83, 87, 92, 120, 170, 189, 191, 192, 193, 198, 200, 205, 212, 214, 215, 217, 221, 223, 224, 230, 236, 243, 257, 278], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 56, 81, 83, 86, 87, 98, 164, 195, 215, 217, 221, 223, 272, 277], "anywher": [3, 4, 6, 10, 18, 38, 56, 64, 70, 170, 246, 276], "els": [3, 4, 10, 11, 12, 18, 19, 20, 38, 46, 48, 52, 56, 57, 64, 66, 70, 72, 73, 81, 83, 86, 92, 96, 106, 170, 180, 191, 196, 200, 201, 205, 206, 213, 217, 221, 223, 224, 229, 231, 236, 243, 246, 250, 253, 271, 277], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 23, 24, 26, 27, 32, 33, 36, 38, 39, 42, 46, 48, 55, 56, 57, 58, 61, 62, 63, 64, 69, 70, 81, 83, 86, 89, 92, 96, 97, 98, 106, 107, 110, 124, 136, 175, 186, 188, 189, 192, 193, 195, 196, 199, 204, 205, 213, 214, 218, 221, 224, 225, 230, 237, 238, 244, 250, 254, 257, 259, 271, 274, 275, 276, 277, 280, 282], "softwar": [3, 7, 83, 199, 276], "itself": [3, 4, 6, 7, 10, 11, 20, 34, 45, 47, 48, 54, 56, 58, 61, 62, 69, 73, 78, 96, 115, 119, 120, 135, 160, 167, 186, 188, 191, 192, 195, 198, 200, 201, 205, 213, 214, 217, 224, 229, 230, 231, 238, 240, 243, 259, 276], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 26, 30, 32, 37, 38, 39, 44, 47, 51, 54, 55, 59, 62, 72, 74, 79, 80, 81, 86, 87, 90, 93, 106, 114, 120, 132, 133, 135, 137, 138, 144, 154, 168, 175, 178, 183, 186, 187, 189, 191, 192, 194, 196, 197, 198, 200, 202, 203, 205, 206, 212, 217, 218, 221, 222, 223, 224, 225, 236, 238, 243, 244, 248, 256, 257, 258, 265, 267, 268, 272, 273, 274, 275, 280], "beyond": [3, 18, 50, 72, 96, 134, 192, 195, 214, 217, 278], "control": [3, 5, 10, 12, 14, 18, 20, 37, 39, 56, 57, 60, 81, 86, 87, 134, 137, 150, 154, 165, 166, 170, 174, 201, 202, 206, 213, 218, 224, 243, 267, 271], "pytest": [3, 4, 10, 233, 239, 241, 244, 269], "entir": [3, 4, 18, 47, 56, 57, 60, 61, 64, 70, 72, 81, 95, 112, 131, 135, 180, 192, 194, 200, 213, 230, 239, 241, 276, 282], "import_modul": 3, "own": [3, 5, 6, 12, 20, 32, 40, 47, 48, 56, 72, 100, 114, 120, 137, 200, 205, 212, 217, 221, 240, 243, 244, 276], "runner": [3, 236], "access": [3, 6, 7, 11, 12, 18, 20, 31, 32, 33, 38, 56, 64, 85, 86, 89, 92, 97, 100, 106, 107, 114, 115, 119, 120, 138, 179, 180, 186, 189, 191, 195, 196, 198, 200, 217, 221, 225, 226, 229, 237, 238, 254, 257, 277, 281], "script": [3, 5, 6, 11, 29, 64, 185, 237], "cloudpickl": 3, "effect": [3, 6, 10, 20, 24, 28, 47, 49, 56, 73, 81, 83, 87, 92, 99, 120, 122, 134, 142, 170, 180, 191, 195, 198, 202, 204, 221, 274], "pickl": 3, "util": [3, 4, 5, 6, 7, 23, 36, 43, 45, 47, 48, 61, 62, 67, 68, 69, 72, 86, 87, 96, 97, 140, 174, 177, 194, 198, 202, 205, 217, 218, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 262, 267, 268], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 28, 37, 56, 67, 81, 83, 92, 148, 150, 191, 194, 196, 202, 205, 212, 215, 221, 222, 231, 234, 236, 241, 244], "pdf": [3, 7, 8, 27, 36, 37, 47, 57, 59, 61, 78, 83, 92, 96, 99, 100, 104, 191, 199, 204, 205, 208, 214, 217, 218, 221, 225, 243, 250], "view": [3, 6, 8, 11, 26, 38, 39, 56, 92, 99, 172, 175, 189, 191, 198, 205, 221, 224, 238, 240, 243], "host": [3, 7], "onlin": [3, 6, 115, 218, 243], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 26, 38, 122, 239, 272], "reproduc": [3, 201, 236, 282], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 30, 32, 36, 38, 45, 47, 52, 57, 60, 63, 71, 73, 81, 85, 89, 92, 96, 99, 102, 111, 120, 137, 148, 154, 164, 169, 170, 173, 188, 189, 191, 194, 195, 196, 198, 200, 201, 202, 205, 206, 215, 217, 218, 221, 222, 224, 225, 227, 229, 230, 231, 239, 244, 248, 272, 274, 277, 281, 282], "asv": 3, "airspe": 3, "veloc": [3, 110, 111, 114, 115, 117, 122, 123, 124, 127, 128, 129, 131, 134, 135, 137, 144, 172, 175, 179, 180, 184, 186, 189, 257, 259], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 37, 39, 46, 47, 48, 50, 51, 54, 55, 56, 57, 61, 64, 66, 71, 72, 81, 83, 87, 92, 95, 96, 106, 110, 114, 115, 117, 119, 120, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 149, 170, 174, 175, 179, 180, 186, 188, 189, 192, 195, 198, 200, 206, 212, 215, 217, 218, 221, 224, 225, 229, 238, 243, 244, 250, 252, 257, 272], "properli": [4, 11, 20, 37, 56, 62, 68, 81, 92, 116, 120, 132, 147, 151, 154, 168, 193, 195, 205, 221, 224, 234, 238, 244, 278, 283], "current": [4, 7, 10, 12, 18, 30, 33, 36, 37, 38, 39, 40, 47, 50, 51, 53, 54, 55, 56, 58, 62, 64, 66, 68, 71, 76, 79, 81, 83, 85, 87, 92, 96, 98, 99, 103, 110, 114, 120, 130, 164, 169, 170, 174, 178, 189, 191, 192, 193, 194, 196, 198, 201, 202, 204, 205, 206, 212, 215, 217, 218, 220, 221, 222, 223, 224, 225, 231, 236, 237, 238, 240, 254, 268, 278, 283], "updat": [4, 10, 12, 28, 56, 124, 150, 160, 163, 164, 166, 190, 198, 201, 205, 218, 231, 241], "continu": [4, 6, 7, 10, 16, 19, 20, 36, 38, 46, 48, 50, 56, 61, 62, 64, 81, 84, 87, 96, 103, 104, 165, 168, 185, 196, 198, 201, 218, 220, 221, 229, 273], "someon": [4, 221, 240, 275], "warn": [4, 6, 12, 20, 56, 57, 71, 98, 180, 189, 193, 205, 221, 223, 234, 236, 238, 242, 243, 269, 278], "screen": [4, 11, 84, 185, 189, 236, 281], "indic": [4, 6, 12, 15, 18, 23, 25, 36, 37, 38, 39, 40, 45, 47, 48, 49, 51, 52, 54, 55, 56, 59, 60, 61, 64, 66, 71, 72, 81, 83, 86, 87, 89, 92, 95, 96, 107, 119, 124, 154, 165, 167, 168, 170, 175, 179, 180, 190, 194, 195, 196, 200, 201, 202, 205, 212, 213, 214, 217, 218, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 243, 278], "remov": [4, 10, 18, 31, 32, 47, 50, 54, 56, 60, 62, 71, 72, 81, 86, 87, 92, 96, 99, 102, 111, 114, 127, 129, 134, 154, 170, 196, 198, 201, 203, 204, 205, 217, 218, 221, 223, 224, 226, 227, 237, 238, 239, 241, 243, 244, 271, 282], "futur": [4, 12, 18, 19, 38, 39, 56, 81, 83, 87, 92, 98, 114, 119, 122, 130, 134, 170, 174, 187, 191, 193, 204, 205, 217, 221, 230, 236, 239, 241, 244, 267, 277, 283], "chanc": [4, 12, 19, 56, 84, 215, 225, 277], "break": [4, 6, 10, 20, 37, 38, 48, 56, 57, 96, 188, 202, 205, 213, 243], "opportun": [4, 6, 217], "messag": [4, 10, 57, 84, 239, 241], "wrong": [4, 7, 10, 47, 56, 57, 64, 66, 92, 180, 195, 221, 239, 274, 278], "answer": [4, 18, 20, 47, 56, 60, 78, 81, 83, 86, 92, 96, 175, 198, 202, 214, 215, 217, 223, 225, 240, 246, 276, 278, 282], "made": [4, 7, 10, 11, 12, 18, 20, 25, 50, 52, 56, 57, 62, 65, 66, 69, 72, 73, 83, 86, 92, 96, 98, 120, 131, 134, 137, 189, 192, 196, 198, 200, 201, 205, 206, 212, 213, 214, 217, 221, 223, 224, 225, 238, 243, 246, 259, 277], "lightli": 4, "fix": [4, 6, 9, 10, 38, 47, 49, 52, 54, 57, 61, 64, 68, 85, 99, 100, 102, 111, 114, 117, 122, 131, 137, 154, 159, 163, 166, 170, 175, 180, 184, 188, 189, 191, 195, 198, 200, 201, 202, 205, 211, 215, 223, 225, 243, 250, 252], "worth": [4, 18, 20, 180, 255, 257], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 28, 37, 38, 47, 57, 61, 62, 81, 115, 120, 122, 135, 137, 138, 164, 175, 184, 191, 200, 201, 212, 215, 221, 274, 276, 277, 280, 282], "seek": [4, 223], "stabl": [4, 6, 20, 56, 84, 92, 98, 102, 106, 271], "done": [4, 6, 10, 11, 12, 16, 20, 32, 33, 35, 36, 37, 38, 47, 49, 54, 56, 57, 58, 61, 64, 67, 68, 81, 83, 87, 92, 96, 114, 120, 122, 128, 135, 137, 156, 165, 166, 167, 170, 172, 173, 180, 186, 188, 189, 191, 192, 194, 198, 201, 202, 204, 205, 206, 214, 217, 218, 221, 223, 224, 225, 230, 231, 236, 237, 240, 244, 254, 255, 271, 274, 276, 277, 278], "exist": [4, 10, 11, 16, 18, 20, 24, 26, 36, 37, 40, 47, 56, 60, 66, 68, 71, 72, 73, 74, 83, 86, 92, 96, 102, 160, 186, 189, 191, 192, 193, 194, 198, 200, 205, 212, 213, 215, 218, 221, 223, 224, 236, 244, 255, 276, 278, 283], "necessarili": [4, 6, 18, 34, 56, 57, 58, 81, 83, 86, 192, 193, 200, 201, 203, 217, 221, 223, 224], "supplant": 4, "old": [4, 10, 11, 12, 56, 57, 58, 84, 134, 139, 174, 175, 185, 191, 192, 196, 205, 206, 217, 221, 224, 226, 271], "sometim": [4, 6, 7, 11, 12, 18, 20, 37, 38, 56, 61, 64, 80, 81, 106, 130, 134, 162, 170, 189, 192, 195, 200, 205, 207, 212, 214, 218, 221, 223, 234, 243, 271, 278], "alongsid": [4, 10, 20, 89], "newer": [4, 11, 188, 223], "solveset": [4, 20, 24, 26, 137, 203, 219, 220, 223, 262, 283], "superior": [4, 205], "replac": [4, 6, 10, 11, 12, 18, 36, 38, 47, 55, 56, 57, 60, 61, 62, 64, 66, 70, 83, 86, 87, 92, 96, 97, 98, 110, 112, 114, 137, 159, 165, 180, 192, 198, 201, 202, 206, 212, 214, 215, 217, 221, 223, 224, 231, 232, 243, 244, 246, 271, 280], "older": [4, 7, 11, 79, 120, 195, 205, 223], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 38, 40, 52, 55, 56, 64, 69, 81, 83, 87, 88, 92, 99, 101, 102, 114, 115, 116, 120, 123, 124, 127, 129, 130, 132, 134, 137, 173, 194, 198, 202, 203, 204, 205, 207, 217, 218, 220, 221, 222, 225, 267, 272, 273, 276, 278, 281], "remain": [4, 10, 11, 20, 32, 33, 38, 47, 48, 50, 52, 56, 57, 62, 81, 87, 96, 98, 107, 120, 169, 186, 188, 189, 200, 201, 202, 211, 214, 215, 221, 222, 223, 225, 227, 231, 240, 243, 244, 254, 259, 271, 274, 276, 277, 278], "intact": [4, 10, 38, 237], "cogniz": 4, "properti": [4, 11, 15, 20, 32, 33, 36, 37, 38, 39, 40, 44, 45, 47, 48, 49, 50, 51, 55, 56, 57, 58, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 79, 81, 83, 87, 89, 92, 96, 99, 100, 102, 103, 106, 111, 114, 115, 117, 119, 135, 137, 139, 141, 144, 145, 148, 149, 154, 155, 156, 158, 159, 166, 168, 170, 172, 175, 177, 178, 180, 181, 182, 186, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 204, 207, 208, 211, 212, 213, 215, 218, 221, 224, 225, 230, 231, 236, 238, 239, 250, 253, 254, 255, 257, 259, 278], "attr": [4, 38], "imposs": [4, 6, 10, 11, 20, 56, 195, 214, 221, 222, 234, 274, 282], "later": [4, 10, 16, 38, 47, 81, 86, 87, 110, 116, 117, 122, 124, 125, 132, 134, 135, 137, 144, 179, 188, 195, 198, 204, 205, 206, 215, 217, 221, 240, 254, 271, 272, 274, 276, 277, 282], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 26, 27, 28, 30, 31, 33, 34, 37, 38, 47, 48, 49, 50, 56, 60, 62, 64, 66, 67, 68, 70, 71, 72, 76, 78, 82, 83, 85, 92, 96, 99, 100, 106, 110, 111, 112, 114, 115, 116, 117, 119, 120, 124, 134, 135, 165, 167, 168, 170, 174, 179, 180, 188, 189, 190, 192, 194, 195, 200, 202, 205, 207, 212, 217, 218, 219, 221, 225, 229, 230, 236, 237, 238, 239, 240, 241, 250, 252, 254, 257, 258, 265, 268, 271, 273, 274, 276, 277, 278, 282], "mark": [4, 6, 7, 104, 143, 155, 218, 234, 239, 241], "explicitli": [4, 10, 11, 18, 20, 38, 47, 48, 56, 57, 59, 62, 64, 69, 73, 89, 92, 97, 106, 120, 179, 180, 191, 193, 195, 196, 198, 201, 205, 217, 221, 223, 241, 274, 278, 281, 283], "privat": [4, 6, 56, 57, 120, 191, 238], "experiment": [4, 217], "With": [4, 12, 19, 28, 38, 55, 56, 60, 81, 96, 123, 124, 125, 131, 133, 134, 143, 167, 170, 189, 191, 192, 193, 195, 196, 203, 204, 205, 212, 217, 226, 243, 276, 277], "being": [4, 7, 10, 11, 12, 14, 18, 19, 34, 36, 38, 47, 48, 54, 55, 56, 57, 61, 62, 64, 66, 68, 69, 72, 73, 81, 86, 87, 92, 93, 96, 99, 100, 102, 110, 119, 120, 122, 134, 135, 137, 138, 166, 175, 182, 186, 188, 189, 190, 191, 192, 194, 195, 200, 201, 202, 204, 205, 214, 215, 217, 218, 221, 222, 223, 224, 225, 231, 234, 236, 240, 241, 243, 244, 246, 250, 255, 259, 276, 278], "decid": [4, 6, 16, 18, 19, 20, 37, 55, 87, 110, 134, 163, 174, 195, 198, 200, 201, 205, 221, 224, 238, 278], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 24, 38, 48, 54, 56, 60, 64, 81, 84, 90, 92, 115, 116, 120, 122, 127, 130, 134, 141, 175, 185, 189, 195, 198, 199, 202, 205, 213, 215, 217, 221, 224, 234, 240, 241, 243, 244, 271, 272, 276, 277, 278], "confus": [4, 7, 10, 11, 18, 56, 61, 86, 143, 189, 193, 201, 224, 271, 272, 274], "unnecessari": [4, 6, 7, 34, 38, 201, 204, 225, 236, 275], "redund": [4, 18, 47, 54, 86, 92, 221, 238], "usabl": [4, 195, 196, 205, 224, 276], "breakag": 4, "serious": 4, "taken": [4, 11, 38, 39, 44, 47, 54, 55, 56, 61, 62, 64, 73, 87, 96, 106, 108, 110, 111, 134, 137, 167, 173, 180, 184, 190, 191, 195, 200, 201, 205, 208, 212, 214, 215, 224, 225, 230, 238, 243, 250], "commun": [4, 7, 28, 190, 221, 223, 225, 278], "inde": [4, 16, 20, 44, 47, 55, 81, 192, 215, 221, 232, 236, 276], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 23, 26, 29, 33, 36, 38, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 70, 72, 83, 92, 96, 97, 99, 100, 104, 106, 107, 110, 111, 114, 115, 120, 124, 127, 129, 130, 131, 133, 135, 141, 143, 144, 147, 151, 156, 159, 164, 165, 167, 168, 173, 175, 177, 179, 180, 181, 188, 189, 191, 194, 195, 198, 199, 200, 201, 205, 207, 215, 217, 218, 221, 223, 224, 225, 226, 227, 243, 244, 250, 253, 254, 255, 267, 271, 276, 277, 278], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 25, 26, 31, 33, 37, 48, 56, 57, 60, 68, 73, 81, 83, 92, 96, 117, 120, 138, 164, 168, 172, 173, 175, 179, 180, 188, 189, 191, 201, 202, 204, 205, 215, 217, 221, 223, 224, 225, 239, 243, 244, 255, 271, 272, 274, 275, 276, 277, 280, 282], "count": [4, 7, 11, 48, 55, 56, 57, 61, 66, 86, 92, 95, 96, 165, 201, 213, 214, 217, 224, 225, 231, 240, 243], "basi": [4, 56, 58, 85, 89, 92, 111, 127, 129, 155, 164, 165, 167, 170, 172, 175, 178, 179, 180, 186, 188, 190, 192, 194, 196, 201, 204, 215, 217, 223, 224, 226, 231, 253, 254, 257, 280], "exact": [4, 10, 11, 12, 18, 20, 24, 34, 55, 56, 57, 60, 66, 71, 78, 81, 83, 87, 92, 99, 137, 164, 195, 196, 198, 201, 212, 217, 221, 223, 236, 246, 274, 276, 281], "rule": [4, 7, 10, 16, 18, 20, 38, 47, 48, 55, 56, 64, 79, 81, 83, 86, 87, 92, 99, 120, 151, 154, 175, 180, 186, 189, 190, 202, 204, 205, 206, 211, 215, 217, 221, 231, 243, 244, 257, 274, 277], "doesn": [4, 6, 10, 12, 20, 38, 80, 120, 124, 134, 137, 189, 193, 202, 204, 214, 217, 224, 283], "constitut": [4, 7, 11, 83, 96, 205], "yet": [4, 5, 12, 18, 20, 31, 33, 36, 37, 60, 83, 134, 150, 192, 195, 196, 200, 202, 204, 213, 221, 224, 272], "fulli": [4, 6, 10, 18, 47, 56, 73, 83, 86, 98, 99, 100, 114, 120, 137, 170, 188, 195, 196, 202, 212, 225, 231, 247], "codifi": 4, "clean": [4, 236], "distinct": [4, 7, 11, 14, 18, 20, 25, 38, 47, 48, 56, 57, 61, 69, 81, 86, 92, 96, 119, 188, 195, 200, 201, 205, 213, 215, 282], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 28, 34, 36, 37, 38, 39, 40, 48, 55, 56, 61, 62, 64, 83, 87, 90, 92, 102, 107, 110, 114, 120, 122, 124, 125, 134, 160, 169, 172, 173, 179, 188, 190, 191, 192, 194, 195, 196, 198, 200, 205, 212, 213, 214, 215, 217, 221, 223, 224, 236, 237, 254, 255, 259, 274, 276, 277, 282], "categor": [4, 92, 192], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 23, 24, 25, 28, 29, 36, 55, 56, 73, 83, 86, 92, 97, 116, 130, 150, 187, 190, 199, 200, 202, 205, 213, 214, 223, 224, 236, 238, 240, 241, 243, 246, 267, 273, 274, 277, 282], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 23, 24, 27, 28, 32, 33, 38, 39, 40, 45, 46, 47, 48, 54, 55, 56, 57, 58, 60, 61, 62, 64, 72, 73, 74, 78, 79, 81, 83, 86, 87, 92, 95, 96, 97, 98, 99, 102, 106, 110, 115, 120, 121, 122, 127, 128, 129, 132, 134, 135, 137, 138, 160, 165, 170, 179, 185, 186, 188, 189, 191, 192, 195, 196, 198, 200, 201, 202, 205, 206, 212, 214, 215, 217, 218, 221, 223, 224, 225, 229, 230, 237, 238, 240, 241, 243, 244, 255, 257, 259, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282], "guidelin": [4, 8, 26, 221], "exhaust": [4, 18, 215, 243, 275], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 28, 30, 37, 47, 48, 55, 56, 57, 58, 60, 62, 64, 66, 68, 71, 72, 80, 81, 83, 86, 87, 92, 95, 96, 102, 106, 107, 119, 120, 122, 124, 128, 138, 170, 172, 175, 176, 186, 188, 192, 193, 195, 196, 198, 200, 201, 205, 206, 207, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 232, 236, 238, 243, 244, 250, 252, 257, 272, 274, 275, 276, 277, 282], "posit": [4, 10, 11, 12, 18, 19, 20, 23, 31, 32, 33, 34, 35, 37, 38, 39, 40, 45, 47, 48, 49, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 66, 68, 69, 72, 81, 83, 85, 86, 87, 88, 92, 93, 95, 96, 99, 100, 102, 106, 108, 114, 117, 120, 122, 124, 127, 129, 131, 134, 135, 137, 139, 142, 144, 148, 165, 168, 170, 181, 182, 184, 186, 188, 189, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 210, 211, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 231, 243, 250, 253, 254, 255, 257, 259, 260, 278, 282, 283], "convent": [4, 6, 7, 9, 20, 47, 48, 52, 55, 56, 57, 61, 62, 64, 66, 71, 81, 83, 86, 98, 99, 100, 102, 106, 109, 122, 137, 139, 143, 164, 165, 167, 172, 173, 186, 191, 205, 221, 222, 224, 225, 231, 259, 274, 282], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 26, 29, 30, 32, 33, 36, 38, 39, 40, 46, 47, 48, 51, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 79, 81, 83, 84, 87, 89, 92, 96, 99, 100, 104, 110, 111, 114, 117, 119, 120, 122, 123, 127, 129, 130, 131, 135, 137, 138, 141, 147, 149, 151, 156, 159, 165, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 207, 208, 211, 212, 213, 215, 217, 218, 221, 223, 224, 225, 226, 230, 231, 237, 238, 239, 244, 245, 246, 250, 252, 253, 254, 255, 256, 257, 259, 260, 274, 276, 282], "And": [4, 10, 12, 19, 20, 22, 32, 47, 48, 55, 56, 57, 64, 81, 86, 87, 92, 95, 114, 142, 189, 191, 193, 201, 202, 205, 213, 217, 218, 223, 224, 225, 243, 244, 255, 282], "aren": [4, 10, 11, 20, 38, 56, 120, 204, 224], "don": [4, 10, 12, 19, 20, 33, 38, 81, 86, 92, 97, 98, 110, 120, 179, 188, 189, 195, 205, 215, 224, 234, 239, 259, 271, 272, 276, 277, 282], "form": [4, 7, 10, 11, 16, 18, 20, 24, 30, 33, 34, 35, 36, 38, 39, 46, 47, 48, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 72, 76, 78, 79, 81, 83, 85, 87, 89, 91, 92, 96, 98, 99, 100, 102, 103, 106, 110, 111, 114, 115, 116, 119, 120, 122, 124, 127, 129, 130, 131, 132, 133, 135, 137, 138, 147, 150, 151, 152, 154, 164, 165, 168, 170, 172, 175, 178, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 230, 231, 236, 237, 243, 250, 253, 254, 256, 257, 259, 265, 272, 276, 277, 278, 281, 282, 283], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 30, 34, 38, 39, 46, 47, 52, 56, 57, 60, 62, 64, 81, 83, 92, 96, 98, 103, 104, 106, 114, 120, 153, 164, 167, 170, 173, 180, 185, 189, 191, 192, 193, 195, 196, 200, 201, 205, 212, 213, 217, 218, 221, 223, 224, 226, 227, 230, 231, 240, 244, 246, 247], "intern": [4, 10, 11, 12, 18, 19, 36, 38, 39, 47, 56, 59, 60, 61, 64, 72, 73, 76, 88, 92, 96, 100, 102, 104, 122, 134, 143, 164, 165, 175, 192, 194, 196, 197, 199, 201, 203, 205, 215, 217, 220, 221, 222, 223, 224, 225, 229, 231, 234, 238, 240, 243, 268, 277, 281], "Such": [4, 6, 18, 38, 56, 72, 124, 192, 193, 200, 206, 214, 215, 217, 271, 277], "prefix": [4, 38, 56, 92, 96, 174, 177, 178, 195, 198, 202, 205, 218, 221, 237, 238, 243, 267], "underscor": [4, 6, 10, 56, 92, 221, 231, 239], "_": [4, 6, 7, 10, 12, 14, 16, 20, 32, 33, 37, 44, 45, 47, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 69, 70, 71, 72, 81, 83, 86, 87, 88, 89, 90, 92, 94, 96, 98, 106, 132, 135, 137, 149, 170, 175, 179, 185, 188, 190, 196, 201, 204, 205, 206, 208, 212, 213, 214, 215, 217, 218, 221, 222, 223, 226, 243, 253, 255, 281], "univers": [4, 11, 38, 190, 199, 213, 218, 223, 224], "adher": [4, 7, 81], "codebas": [4, 10, 18, 195, 234], "anyth": [4, 6, 7, 10, 12, 20, 36, 38, 56, 57, 67, 71, 92, 120, 144, 154, 202, 205, 211, 213, 217, 221, 223, 237, 243, 246, 274], "were": [4, 7, 10, 11, 12, 14, 18, 20, 37, 48, 50, 56, 57, 62, 73, 81, 87, 92, 96, 97, 98, 110, 119, 134, 179, 186, 189, 192, 198, 199, 200, 201, 204, 205, 206, 214, 217, 223, 243, 244, 246, 274, 276, 277, 281, 282], "incorrect": [4, 7, 10, 19, 20, 24, 47, 56, 66, 96, 104, 184, 196, 221, 224, 237, 240, 241], "bug": [4, 6, 18, 20, 23, 25, 28, 36, 57, 195, 213, 221, 224, 274], "despit": [4, 26, 56, 282], "sai": [4, 7, 11, 12, 16, 18, 39, 46, 55, 56, 57, 85, 110, 115, 120, 130, 137, 175, 188, 189, 192, 193, 194, 198, 200, 204, 205, 212, 215, 218, 221, 223, 224, 225, 244, 271, 276, 282], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 26, 28, 38, 47, 48, 50, 52, 56, 57, 58, 64, 84, 87, 92, 96, 98, 99, 100, 110, 116, 120, 122, 123, 124, 127, 128, 134, 137, 139, 170, 179, 185, 189, 193, 195, 200, 201, 205, 206, 212, 213, 217, 218, 221, 223, 224, 225, 232, 236, 239, 243, 244, 254, 275, 276, 277, 282], "recent": [4, 10, 12, 15, 18, 19, 20, 23, 24, 25, 26, 31, 32, 33, 38, 39, 48, 56, 57, 60, 64, 66, 83, 86, 87, 88, 89, 90, 92, 94, 95, 98, 106, 190, 192, 195, 196, 198, 201, 204, 212, 213, 221, 223, 224, 234, 237, 239, 241, 243, 244, 246, 274, 278], "best": [4, 8, 12, 23, 24, 27, 28, 38, 56, 64, 81, 83, 97, 169, 191, 202, 205, 214, 215, 217, 221, 224, 229, 237, 270, 274, 275, 281, 282], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 31, 33, 34, 35, 36, 38, 39, 40, 47, 56, 57, 58, 59, 60, 62, 66, 67, 69, 71, 72, 83, 84, 85, 89, 92, 96, 98, 99, 100, 106, 112, 114, 116, 117, 119, 129, 135, 138, 149, 162, 164, 166, 167, 170, 173, 175, 180, 186, 191, 192, 193, 194, 198, 200, 205, 211, 212, 213, 215, 217, 218, 220, 221, 223, 224, 225, 229, 241, 243, 250, 257, 260, 274, 282], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 36, 38, 56, 57, 60, 66, 81, 86, 87, 92, 96, 110, 120, 121, 137, 163, 176, 179, 191, 195, 196, 204, 212, 213, 217, 221, 224, 236, 238, 244, 271, 274, 276, 277, 280], "re": [4, 12, 20, 35, 36, 38, 47, 48, 56, 57, 60, 62, 64, 81, 83, 92, 180, 182, 186, 192, 198, 205, 206, 207, 213, 214, 215, 221, 223, 236, 253, 255, 272, 274, 277], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 44, 47, 48, 55, 56, 57, 60, 61, 62, 64, 68, 72, 81, 83, 86, 87, 92, 95, 96, 107, 120, 130, 155, 166, 173, 175, 180, 190, 193, 194, 195, 196, 198, 200, 201, 202, 205, 206, 213, 214, 215, 217, 218, 221, 223, 224, 232, 236, 259, 271, 272, 274, 276, 277, 282, 283], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 24, 36, 56, 60, 62, 69, 78, 81, 89, 92, 96, 98, 110, 120, 121, 137, 150, 180, 188, 191, 195, 196, 201, 202, 205, 206, 213, 214, 215, 217, 218, 223, 224, 225, 237, 238, 241, 243, 246, 271, 274, 276, 277, 279, 282], "while": [4, 6, 10, 11, 12, 18, 20, 22, 26, 37, 38, 39, 47, 48, 49, 52, 55, 56, 57, 58, 60, 61, 62, 66, 70, 72, 80, 86, 87, 92, 96, 97, 98, 99, 102, 111, 114, 116, 120, 124, 134, 154, 175, 180, 186, 192, 200, 203, 205, 221, 224, 236, 238, 240, 243, 259, 271, 277, 278], "peopl": [4, 6, 59, 64, 83, 92, 175, 225], "upgrad": [4, 29], "immedi": [4, 18, 47, 56, 81, 86, 170, 192, 195, 237, 244], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 38, 45, 47, 53, 55, 56, 60, 62, 80, 81, 83, 92, 96, 106, 120, 134, 188, 189, 198, 201, 212, 218, 221, 223, 224, 229, 237, 243, 274, 281], "question": [4, 6, 7, 16, 18, 55, 58, 66, 73, 81, 83, 86, 96, 110, 172, 175, 179, 192, 195, 200, 215, 224, 243, 246], "read": [4, 6, 7, 9, 10, 20, 26, 48, 62, 81, 96, 100, 137, 188, 189, 194, 195, 196, 202, 205, 218, 231, 232, 240, 247, 275, 281, 282], "previou": [4, 6, 10, 20, 40, 45, 46, 47, 48, 51, 56, 61, 62, 83, 86, 87, 95, 111, 134, 172, 188, 189, 198, 211, 218, 222, 226, 243, 275, 277, 282], "unchang": [4, 10, 11, 20, 47, 48, 56, 83, 92, 106, 201, 205, 211, 214, 217, 224, 271], "dure": [4, 10, 12, 29, 38, 56, 57, 87, 92, 96, 98, 111, 115, 137, 138, 188, 200, 205, 214, 223, 224, 241, 243], "period": [4, 6, 10, 23, 36, 56, 57, 62, 81, 96, 134, 144, 166, 173, 200, 205, 208, 211, 220, 224, 225, 243], "silenc": [4, 234, 241], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 28, 56, 57, 60, 62, 92, 120, 128, 134, 188, 205, 214, 221, 222, 223, 240, 241, 278], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 34, 37, 38, 48, 53, 55, 56, 57, 58, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 81, 83, 89, 92, 96, 99, 100, 111, 117, 131, 159, 175, 177, 180, 184, 188, 189, 191, 193, 195, 196, 198, 200, 201, 202, 205, 206, 212, 213, 215, 221, 223, 224, 225, 237, 238, 244, 250, 254, 255, 259, 271, 274, 276, 277, 282, 283], "over": [4, 7, 8, 10, 12, 15, 20, 27, 30, 36, 37, 38, 39, 47, 48, 51, 55, 56, 57, 58, 59, 60, 61, 70, 72, 79, 81, 85, 86, 89, 92, 93, 96, 99, 100, 108, 114, 120, 137, 138, 149, 165, 168, 170, 174, 175, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 208, 210, 212, 217, 218, 220, 221, 223, 224, 225, 226, 229, 230, 239, 243, 244, 250, 253, 257, 260, 276, 280, 282], "defeat": [4, 221], "three": [4, 11, 12, 14, 16, 18, 20, 25, 30, 34, 38, 47, 48, 49, 52, 56, 57, 61, 64, 66, 70, 71, 72, 81, 85, 86, 87, 99, 100, 114, 119, 123, 126, 127, 128, 143, 165, 167, 172, 180, 184, 188, 189, 190, 191, 192, 193, 196, 198, 201, 205, 215, 217, 218, 223, 224, 225, 236, 250, 252, 257, 260, 274, 277, 282], "natur": [4, 10, 12, 18, 30, 34, 38, 39, 47, 56, 57, 61, 62, 90, 96, 120, 172, 174, 175, 192, 195, 196, 198, 200, 202, 205, 213, 214, 218, 224, 225, 243, 260, 277, 282], "heavili": [4, 212, 222], "consider": [4, 19, 56, 97, 110, 195, 204, 213, 218, 221, 254], "easi": [4, 11, 44, 48, 56, 64, 81, 97, 117, 124, 130, 188, 192, 195, 200, 205, 212, 215, 218, 221, 224, 229, 230, 231, 271, 272, 274, 275, 276, 277, 278, 281], "account": [4, 11, 62, 92, 208, 217, 221], "nonetheless": [4, 57, 172, 217, 221], "deprecat": 4, "won": [4, 12, 20, 38, 217, 224, 277], "until": [4, 16, 18, 23, 24, 25, 29, 48, 50, 56, 57, 66, 83, 92, 96, 134, 189, 198, 201, 214, 221, 274], "come": [4, 28, 47, 52, 54, 55, 56, 62, 64, 81, 83, 92, 97, 110, 120, 122, 132, 173, 189, 192, 195, 198, 200, 201, 215, 218, 221, 224, 234, 236, 241, 244, 274, 276, 277, 280, 282], "minimum": [4, 10, 23, 36, 38, 47, 48, 50, 52, 56, 57, 60, 62, 92, 110, 115, 122, 154, 179, 191, 193, 198, 224, 225, 239, 272], "longer": [4, 6, 12, 17, 56, 66, 96, 124, 134, 193, 198, 205, 214, 217, 243, 246, 274, 282], "especi": [4, 6, 20, 26, 55, 92, 110, 120, 137, 164, 179, 189, 217, 221, 223, 236, 271, 272], "hard": [4, 8, 11, 18, 48, 57, 92, 96, 120, 170, 195, 205, 212, 221, 224, 274, 276], "migrat": 4, "lengthen": 4, "impos": [4, 100], "signific": [4, 12, 18, 38, 56, 57, 60, 83, 92, 110, 135, 164, 195, 224, 244, 277], "mainten": [4, 33], "burden": [4, 205], "keep": [4, 6, 12, 15, 20, 52, 56, 57, 60, 61, 64, 81, 92, 115, 123, 131, 135, 154, 170, 191, 194, 195, 196, 201, 212, 213, 215, 217, 221, 223, 231, 259, 272, 277], "firstli": [4, 10, 18, 20, 215], "regular": [4, 10, 12, 18, 19, 39, 44, 56, 57, 60, 64, 72, 78, 79, 83, 96, 120, 164, 195, 202, 221, 231, 236, 281, 282], "schedul": 4, "Being": [4, 52, 66, 72, 195], "assur": [4, 96, 201], "suffici": [4, 6, 18, 37, 38, 47, 48, 52, 56, 92, 175, 208, 212, 221, 225, 240, 282], "regardless": [4, 6, 10, 20, 48, 56, 83, 96, 198, 213, 217, 243, 254, 259, 282], "often": [4, 6, 11, 18, 19, 20, 24, 37, 38, 39, 46, 56, 64, 66, 68, 81, 83, 92, 96, 97, 106, 130, 134, 179, 188, 189, 192, 193, 195, 198, 201, 206, 212, 213, 218, 221, 225, 243, 271, 276, 277, 278, 282], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 23, 30, 38, 48, 55, 56, 60, 68, 71, 80, 114, 165, 169, 175, 192, 198, 200, 201, 204, 213, 217, 221, 225, 244, 255, 274, 281, 282], "secondli": [4, 20, 215], "rigor": [4, 64, 189, 238], "semant": [4, 11, 18, 89, 223], "surfac": [4, 62, 64, 70, 81, 100, 114, 139, 143, 170, 191, 217, 250], "enough": [4, 6, 23, 47, 56, 60, 83, 92, 95, 96, 106, 120, 137, 196, 198, 205, 221, 272, 274], "encod": [4, 10, 40, 48, 54, 57, 86, 205, 236, 240, 243], "backport": 4, "prior": [4, 10, 28, 184, 201, 217, 278], "extrem": [4, 47, 60, 66, 72, 83, 89, 102, 134, 189, 217, 225], "accur": [4, 10, 12, 16, 20, 36, 47, 56, 60, 61, 78, 83, 103, 191, 212, 271, 278], "model": [4, 11, 60, 86, 96, 106, 116, 122, 124, 125, 126, 142, 201, 214, 225], "final": [4, 6, 7, 10, 18, 20, 37, 48, 55, 56, 62, 64, 81, 83, 86, 92, 96, 100, 104, 114, 115, 122, 127, 129, 130, 132, 135, 150, 162, 165, 167, 168, 170, 172, 173, 175, 180, 188, 189, 192, 195, 198, 200, 207, 213, 214, 215, 217, 218, 221, 223, 224, 231, 243, 244, 275, 276, 277], "temptat": [4, 214, 282], "fudg": 4, "earli": [4, 56, 96, 159, 218], "acceler": [4, 97, 117, 122, 127, 129, 134, 135, 137, 173, 180, 184, 186, 240, 259], "myst": [4, 7], "checkbox": 4, "tag": [4, 205, 223], "nest": [4, 56, 58, 62, 64, 83, 87, 106, 193, 195, 198, 205, 215, 217, 220, 224, 225, 226, 227, 229, 232, 243, 244, 277], "ensur": [4, 12, 20, 23, 25, 28, 56, 57, 60, 88, 92, 114, 135, 200, 201, 205, 236, 241, 244], "realli": [4, 10, 11, 16, 18, 19, 20, 56, 68, 96, 122, 172, 195, 204, 206, 212, 214, 215, 217, 221, 237, 246, 274, 276], "per": [4, 57, 92, 97, 102, 144, 180, 186, 191, 196, 201, 202, 250, 254, 256, 259], "everywher": [4, 11, 12, 56, 64, 81, 106, 186, 259], "doctest": [4, 6, 7, 12, 20, 49, 64, 92, 96, 122, 159, 170, 195, 201, 221, 236, 239, 241, 281], "sympy_deprecation_warn": [4, 234, 239, 241], "write": [4, 8, 10, 11, 16, 18, 19, 21, 29, 38, 45, 56, 57, 63, 64, 81, 83, 89, 137, 150, 188, 189, 193, 198, 200, 205, 214, 215, 218, 221, 224, 230, 236, 237, 238, 244, 275, 276, 277, 282], "multilin": [4, 205], "deprecated_since_vers": [4, 234, 239, 241], "active_deprecations_target": [4, 234, 239, 241], "target": [4, 6, 11, 36, 37, 38, 56, 96, 112, 150, 154, 155, 214, 217, 220, 223, 224, 234, 237, 238, 241, 282], "stacklevel": [4, 234, 239, 241], "line": [4, 6, 10, 11, 12, 16, 18, 28, 37, 38, 47, 48, 52, 57, 66, 67, 68, 70, 71, 72, 73, 78, 81, 83, 84, 85, 92, 96, 99, 104, 107, 120, 122, 128, 150, 180, 185, 186, 188, 190, 191, 205, 208, 215, 217, 221, 225, 226, 234, 236, 237, 238, 241, 244, 246, 257, 260, 268, 274], "visual": [4, 56, 96, 100, 106, 204, 217], "confirm": [4, 10, 47, 96, 221], "look": [4, 6, 7, 10, 12, 18, 19, 20, 29, 37, 38, 47, 56, 61, 62, 64, 77, 92, 96, 115, 120, 122, 130, 154, 164, 165, 168, 184, 191, 195, 196, 200, 205, 207, 208, 212, 215, 217, 218, 221, 222, 236, 240, 244, 246, 255, 272, 277, 280, 281], "good": [4, 7, 11, 18, 20, 26, 38, 56, 57, 60, 68, 81, 92, 96, 122, 134, 137, 192, 195, 196, 205, 212, 214, 215, 217, 221, 243, 271, 275, 278], "top": [4, 6, 7, 10, 11, 38, 55, 56, 57, 72, 73, 83, 86, 92, 99, 100, 114, 119, 165, 172, 195, 205, 215, 221, 238, 239, 244, 260, 277], "relev": [4, 6, 7, 18, 38, 54, 69, 84, 85, 111, 115, 117, 122, 175, 185, 189, 195, 215, 221, 222, 231, 236, 258], "docstr": [4, 8, 10, 12, 20, 37, 38, 49, 56, 78, 81, 83, 92, 96, 101, 105, 107, 113, 130, 135, 140, 157, 163, 164, 166, 183, 187, 201, 208, 211, 212, 214, 217, 221, 222, 223, 224, 230, 231, 236, 239, 244, 246, 251, 258, 261, 265, 267], "src": [4, 6, 7, 98, 221, 236, 241], "explan": [4, 7, 12, 14, 18, 21, 30, 31, 32, 33, 34, 35, 37, 38, 41, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 62, 64, 68, 78, 79, 81, 83, 87, 92, 96, 106, 109, 111, 112, 114, 115, 117, 128, 139, 141, 144, 147, 149, 151, 153, 165, 170, 190, 191, 192, 194, 196, 200, 201, 203, 207, 208, 210, 211, 212, 213, 215, 217, 218, 221, 223, 225, 226, 230, 231, 236, 239, 241, 244, 279], "cross": [4, 7, 8, 11, 56, 66, 72, 87, 92, 99, 100, 114, 128, 135, 137, 150, 180, 182, 188, 189, 218, 224, 250, 254, 256, 257], "xyz": [4, 68, 98, 99, 180, 189, 250, 252, 255], "header": [4, 38, 237, 238], "why": [4, 10, 12, 18, 38, 56, 189, 196, 202, 212, 215, 244, 275, 277, 278], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 33, 34, 36, 37, 38, 43, 47, 48, 55, 56, 57, 63, 66, 71, 81, 87, 89, 92, 96, 150, 159, 163, 164, 165, 173, 189, 195, 196, 198, 200, 202, 213, 215, 218, 221, 222, 223, 224, 234, 237, 238, 239, 240, 241, 243, 244, 246, 261, 262, 269, 274, 276, 277], "warns_deprecated_sympi": [4, 234, 239, 241], "pr": [4, 10, 55, 196, 198, 199, 201, 224], "merg": [4, 38, 47, 48, 56, 178, 205, 213, 225, 236, 243, 244], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 27, 30, 32, 33, 34, 36, 37, 38, 44, 45, 47, 48, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 72, 73, 74, 83, 84, 85, 86, 87, 89, 92, 96, 104, 106, 109, 139, 141, 142, 143, 145, 146, 147, 151, 152, 153, 156, 158, 159, 168, 170, 174, 180, 182, 187, 191, 201, 208, 212, 213, 214, 218, 221, 224, 225, 238, 243, 250, 252, 256, 258, 260, 278, 279], "decor": [4, 20, 47, 56, 64, 234, 236, 241, 242, 245, 246, 269], "sympydeprecationwarn": [4, 10, 234, 236, 239, 241], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 23, 26, 27, 30, 31, 32, 33, 34, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 98, 99, 102, 103, 104, 106, 111, 114, 115, 116, 117, 119, 120, 124, 125, 130, 131, 135, 137, 138, 139, 141, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 183, 184, 185, 187, 192, 194, 195, 196, 198, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 215, 217, 221, 222, 223, 224, 225, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 248, 251, 254, 255, 257, 258, 260, 261, 265, 267, 272, 274, 277, 282], "context": [4, 6, 7, 10, 14, 18, 20, 24, 31, 32, 33, 56, 58, 64, 83, 86, 120, 175, 195, 198, 200, 213, 234, 236, 241, 250], "manag": [4, 10, 28, 32, 33, 98, 150, 198, 217, 231, 234, 236, 241], "filter": [4, 10, 15, 23, 56, 57, 81, 142, 201, 234, 236, 241, 243], "emit": [4, 205, 234, 241], "assert": [4, 37, 45, 46, 47, 48, 56, 66, 68, 98, 134, 205, 213, 221, 222, 234, 241, 243], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 25, 37, 44, 56, 57, 62, 64, 81, 83, 92, 107, 114, 119, 134, 135, 138, 143, 167, 170, 179, 180, 191, 193, 196, 198, 201, 202, 205, 214, 217, 218, 221, 222, 224, 229, 234, 236, 240, 244, 246, 250, 274], "block": [4, 6, 10, 26, 38, 45, 47, 57, 87, 92, 114, 119, 120, 122, 125, 180, 189, 194, 218, 244, 254], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 38, 56, 58, 64, 83, 90, 108, 134, 166, 167, 191, 205, 277, 281], "ignore_warn": [4, 234, 239, 241, 244], "prevent": [4, 12, 23, 26, 38, 56, 62, 93, 96, 110, 194, 196, 201, 205, 217, 225, 234, 241, 273], "trigger": [4, 20, 48, 98, 170, 234], "twice": [4, 12, 38, 56, 58, 70, 96, 180, 182, 188, 201, 205, 240, 241, 250, 252, 272], "similar": [4, 5, 10, 12, 16, 18, 20, 48, 55, 56, 57, 60, 61, 62, 64, 67, 72, 73, 77, 86, 92, 97, 106, 120, 122, 124, 134, 135, 168, 186, 188, 189, 193, 195, 196, 198, 202, 212, 214, 215, 217, 221, 223, 226, 231, 234, 237, 240, 241, 250, 252, 254, 255, 259, 271, 276, 277, 278, 280, 282], "somewher": [4, 6, 7, 11, 38], "sign": [4, 6, 7, 11, 23, 26, 30, 35, 38, 52, 56, 57, 61, 62, 66, 72, 81, 83, 92, 96, 99, 100, 102, 106, 122, 143, 155, 180, 186, 188, 190, 198, 205, 210, 212, 217, 218, 223, 243, 257, 260, 275], "readi": [4, 18, 119, 195, 205, 221], "paragraph": [4, 6, 7, 20, 37], "metadata": [4, 37, 239, 241], "link": [4, 6, 7, 11, 12, 22, 38, 57, 66, 72, 83, 107, 114, 123, 131, 237, 240, 241, 280], "rememb": [4, 6, 12, 20, 86, 92, 107, 110, 137, 188, 189, 205, 217, 223, 226, 244, 277, 282], "shown": [4, 6, 10, 11, 18, 19, 20, 45, 48, 55, 56, 60, 62, 64, 81, 98, 100, 104, 106, 110, 115, 117, 123, 124, 125, 131, 132, 133, 135, 179, 180, 188, 189, 191, 194, 195, 196, 201, 205, 221, 225, 241, 243, 254, 255, 275], "plain": [4, 6, 18, 64, 84, 185, 201, 205], "rst": [4, 6, 7, 11, 39, 221, 236], "markdown": [4, 8, 11], "markup": [4, 205], "clearli": [4, 6, 20, 96, 189, 195, 215, 278], "delin": 4, "newlin": [4, 92, 246], "charact": [4, 6, 7, 56, 57, 81, 84, 98, 150, 180, 185, 205, 221, 236, 238, 241, 246, 274, 276, 281], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 27, 34, 36, 38, 47, 48, 56, 60, 64, 68, 69, 83, 89, 92, 98, 132, 133, 180, 195, 198, 199, 201, 205, 207, 217, 218, 276, 279, 282], "abc": [4, 6, 12, 14, 15, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 38, 45, 47, 49, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 79, 80, 81, 83, 84, 86, 87, 89, 92, 95, 97, 104, 106, 108, 141, 143, 145, 146, 151, 168, 170, 171, 192, 194, 196, 198, 200, 201, 202, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 237, 238, 239, 240, 241, 243, 244, 246, 250, 253, 254, 255, 260, 262, 274, 277, 281], "func": [4, 6, 11, 17, 20, 32, 36, 38, 56, 58, 61, 64, 75, 77, 83, 96, 159, 180, 198, 201, 205, 206, 217, 221, 222, 223, 234, 239, 241, 243, 244, 246, 249], "larger": [4, 7, 11, 20, 38, 47, 48, 55, 56, 57, 64, 81, 89, 92, 96, 124, 128, 196, 202, 206, 212, 217, 223, 238, 240, 274, 282], "easier": [4, 11, 19, 25, 56, 100, 120, 122, 188, 196, 200, 202, 215, 221, 224, 238, 244, 254, 276, 282, 283], "exactli": [4, 6, 7, 10, 11, 12, 20, 26, 34, 40, 47, 56, 59, 60, 92, 98, 135, 190, 215, 217, 221, 224, 226, 240, 243, 244, 272, 274, 276, 281, 282], "direct": [4, 6, 7, 10, 11, 17, 30, 32, 33, 37, 41, 44, 47, 52, 55, 56, 58, 60, 62, 65, 69, 70, 71, 72, 86, 87, 92, 99, 100, 102, 110, 111, 114, 122, 124, 128, 137, 156, 180, 186, 188, 189, 192, 194, 195, 198, 202, 212, 215, 231, 234, 243, 250, 255, 256, 259], "syntax": [4, 6, 7, 10, 11, 12, 20, 31, 33, 48, 56, 83, 98, 120, 137, 167, 191, 195, 204, 205, 217, 223, 227, 246, 272, 274, 276, 281, 283], "paramet": [4, 7, 10, 11, 12, 24, 25, 30, 31, 33, 36, 38, 39, 47, 48, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 79, 81, 83, 84, 86, 87, 89, 92, 93, 95, 96, 98, 99, 102, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 137, 139, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 180, 181, 182, 184, 185, 186, 189, 190, 191, 193, 194, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 217, 218, 220, 221, 222, 223, 225, 226, 227, 230, 231, 234, 236, 237, 238, 240, 241, 243, 244, 250, 252, 253, 254, 255, 260, 272, 277], "short": [4, 7, 12, 29, 39, 46, 48, 52, 56, 57, 58, 59, 62, 90, 96, 110, 156, 175, 179, 189, 192, 199, 226, 236, 246, 277, 281], "renam": [4, 38, 83], "rest": [4, 10, 81, 84, 86, 90, 100, 108, 120, 124, 130, 175, 192, 195, 225, 243, 274, 275, 282], "left": [4, 7, 10, 16, 18, 20, 22, 36, 38, 39, 47, 48, 52, 56, 57, 58, 61, 62, 64, 72, 73, 79, 81, 83, 84, 86, 87, 92, 95, 96, 106, 111, 119, 135, 142, 149, 154, 158, 159, 162, 167, 180, 186, 190, 191, 192, 194, 201, 202, 203, 204, 205, 207, 208, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 236, 237, 238, 240, 243, 257, 272, 276, 278, 282], "imaginari": [4, 6, 12, 18, 20, 23, 24, 30, 34, 35, 56, 60, 62, 64, 87, 137, 195, 196, 201, 205, 206, 213, 217, 224], "simplify_thi": [4, 6, 239], "expr": [4, 6, 11, 12, 18, 20, 23, 24, 26, 32, 33, 35, 36, 38, 48, 55, 58, 60, 62, 64, 66, 78, 81, 83, 86, 89, 92, 97, 98, 106, 110, 112, 120, 134, 147, 151, 153, 155, 159, 162, 165, 167, 168, 170, 177, 180, 182, 185, 191, 193, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 214, 217, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 237, 238, 239, 241, 244, 250, 252, 253, 254, 255, 257, 271, 272, 274, 276, 277, 281, 282, 283], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 24, 31, 33, 35, 36, 55, 56, 58, 60, 61, 62, 64, 68, 73, 78, 81, 83, 86, 87, 88, 89, 92, 99, 106, 107, 112, 114, 116, 123, 124, 127, 128, 129, 134, 142, 149, 154, 169, 170, 177, 180, 186, 192, 200, 202, 204, 206, 211, 213, 214, 215, 218, 221, 222, 223, 224, 225, 239, 241, 244, 254, 256, 262, 271, 273, 274, 276, 277, 278], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 32, 33, 37, 56, 61, 68, 86, 92, 96, 98, 128, 165, 195, 201, 205, 214, 217, 224, 239, 241, 243, 244, 247, 271, 274, 277, 278, 282], "ref": [4, 47, 62, 92, 104, 137, 210, 225, 239, 278], "is_this_zero": [4, 241], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 36, 38, 39, 47, 48, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 81, 83, 84, 85, 86, 87, 88, 89, 92, 96, 97, 98, 99, 100, 102, 104, 106, 111, 112, 114, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 135, 137, 138, 147, 148, 151, 154, 159, 165, 167, 168, 170, 171, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 237, 238, 241, 243, 244, 246, 250, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 281, 282, 283], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 107, 108, 109, 111, 112, 114, 115, 117, 120, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 146, 149, 154, 155, 156, 159, 164, 165, 166, 167, 168, 169, 170, 171, 175, 177, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 239, 240, 241, 243, 244, 245, 250, 252, 253, 254, 255, 256, 257, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "zero": [4, 11, 12, 14, 18, 19, 20, 24, 30, 34, 35, 38, 46, 47, 48, 52, 55, 56, 59, 60, 61, 62, 64, 66, 70, 71, 72, 81, 83, 85, 86, 87, 89, 91, 92, 95, 96, 98, 99, 106, 114, 117, 120, 122, 125, 128, 131, 132, 133, 137, 142, 164, 168, 170, 172, 184, 186, 188, 189, 190, 192, 193, 194, 195, 196, 200, 201, 203, 205, 208, 212, 213, 215, 217, 218, 221, 222, 223, 224, 225, 226, 241, 243, 244, 254, 256, 257, 277, 283], "is_zero": [4, 18, 20, 71, 92, 192, 196, 201, 241, 278], "mail": [4, 10, 23, 24, 25, 28, 205, 275], "summar": [4, 236, 282], "idea": [4, 11, 18, 19, 20, 41, 47, 54, 56, 57, 68, 74, 81, 83, 96, 107, 120, 170, 174, 175, 192, 194, 195, 214, 217, 218, 221, 224, 238, 244, 282], "fit": [4, 11, 37, 81, 92, 95, 96, 189, 205, 221, 246, 277], "put": [4, 6, 10, 11, 12, 16, 20, 38, 52, 53, 56, 57, 58, 62, 86, 87, 92, 142, 147, 151, 166, 167, 201, 205, 206, 214, 215, 217, 221, 226, 232, 237, 278, 282], "word": [4, 7, 11, 20, 34, 52, 55, 56, 57, 62, 64, 86, 106, 120, 135, 192, 195, 200, 217, 218, 221, 223, 238, 250, 255, 274], "global": [4, 6, 10, 31, 32, 33, 36, 38, 39, 56, 68, 81, 98, 154, 160, 180, 182, 191, 192, 195, 196, 198, 205, 218, 221, 222, 225, 236, 238, 239, 244, 253], "uniqu": [4, 10, 11, 36, 37, 39, 47, 50, 52, 56, 57, 58, 61, 64, 71, 74, 79, 83, 85, 86, 92, 96, 114, 159, 168, 180, 189, 192, 193, 195, 198, 200, 201, 206, 210, 217, 218, 221, 223, 224, 225, 229, 238, 243, 246, 254, 259, 274, 277], "across": [4, 7, 47, 54, 56, 67, 83, 100, 169, 170, 177, 191, 205, 240, 242, 243, 244, 280], "level": [4, 6, 7, 10, 11, 12, 18, 19, 23, 38, 47, 54, 56, 62, 64, 83, 86, 92, 96, 110, 124, 137, 165, 170, 175, 179, 182, 189, 191, 194, 195, 203, 205, 214, 218, 224, 225, 229, 237, 238, 243, 277, 278, 280], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 36, 37, 38, 39, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 59, 62, 66, 67, 69, 70, 71, 72, 79, 81, 85, 86, 87, 92, 95, 96, 99, 100, 106, 112, 114, 115, 119, 120, 122, 124, 138, 142, 146, 160, 164, 165, 167, 171, 172, 175, 180, 184, 186, 190, 191, 193, 194, 195, 196, 198, 200, 201, 205, 211, 212, 215, 217, 218, 221, 222, 223, 224, 225, 227, 229, 230, 231, 238, 239, 240, 241, 243, 244, 246, 250, 252, 254, 255, 257, 259, 277, 283], "share": [4, 18, 20, 57, 96, 196, 200, 205, 225, 238], "__init__": [4, 6, 20, 56, 115, 200, 250, 252, 277], "func_nam": [4, 38, 62, 87, 246], "help": [4, 5, 6, 7, 18, 23, 29, 38, 46, 56, 64, 81, 83, 92, 96, 97, 99, 104, 120, 137, 145, 155, 189, 191, 200, 202, 205, 214, 215, 218, 221, 222, 225, 236, 237, 238, 244, 267, 275, 278], "rais": [4, 10, 12, 14, 18, 19, 20, 31, 33, 36, 38, 45, 48, 56, 57, 58, 60, 62, 65, 66, 69, 71, 72, 73, 81, 83, 87, 89, 92, 93, 95, 96, 104, 106, 144, 156, 186, 189, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 207, 213, 217, 220, 221, 222, 223, 224, 225, 229, 231, 234, 236, 238, 241, 243, 244, 246, 247, 257, 278], "been": [4, 12, 18, 20, 36, 38, 39, 47, 48, 49, 52, 55, 56, 57, 62, 68, 81, 83, 92, 96, 97, 98, 115, 120, 122, 130, 134, 135, 143, 155, 165, 167, 175, 179, 186, 187, 188, 189, 192, 195, 196, 200, 202, 203, 205, 207, 212, 215, 217, 222, 223, 224, 226, 235, 236, 238, 239, 241, 243, 246, 254, 257, 274, 275, 277, 278, 282], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 34, 37, 39, 46, 47, 48, 54, 56, 57, 61, 62, 72, 79, 85, 87, 89, 92, 107, 109, 114, 135, 154, 156, 159, 175, 192, 193, 194, 198, 199, 200, 201, 205, 214, 217, 221, 224, 229, 231, 236, 243, 244, 246, 255, 274, 278, 282], "much": [4, 6, 10, 16, 18, 19, 20, 24, 37, 38, 41, 52, 60, 64, 78, 81, 83, 134, 178, 179, 188, 189, 190, 192, 195, 198, 201, 212, 215, 217, 221, 222, 223, 224, 238, 240, 274, 276, 282], "trivial": [4, 39, 47, 52, 55, 56, 57, 62, 71, 86, 89, 92, 96, 132, 170, 192, 193, 198, 201, 215, 218, 221, 224, 229], "furthermor": [4, 10, 20, 34, 56, 57, 86, 200, 214, 274, 276, 277], "particular": [4, 6, 10, 11, 12, 18, 19, 22, 34, 39, 47, 56, 57, 60, 64, 67, 81, 83, 86, 89, 92, 96, 99, 102, 130, 154, 165, 193, 194, 195, 196, 198, 200, 201, 211, 213, 215, 217, 218, 221, 223, 224, 236, 238, 240, 278, 280, 282], "expr1": [4, 18, 106, 191, 223, 277], "expr2": [4, 18, 106, 191, 277], "dozen": [4, 11, 20, 282], "search": [4, 6, 36, 47, 48, 52, 54, 56, 62, 92, 96, 120, 192, 200, 201, 205, 214, 215, 217, 222, 225, 237], "upcom": 4, "bot": 4, "push": [5, 81], "respect": [5, 6, 10, 11, 12, 20, 31, 33, 34, 36, 37, 38, 39, 46, 47, 48, 51, 52, 54, 55, 56, 58, 61, 62, 64, 66, 68, 72, 73, 78, 79, 81, 83, 86, 87, 89, 92, 96, 98, 99, 100, 102, 106, 111, 112, 114, 117, 124, 131, 133, 135, 137, 144, 159, 172, 173, 174, 179, 180, 184, 186, 189, 190, 191, 192, 195, 198, 200, 201, 202, 205, 207, 208, 211, 213, 217, 221, 222, 223, 224, 225, 226, 230, 231, 236, 238, 250, 252, 253, 254, 255, 256, 257, 258, 259, 272, 282], "handbook": [5, 6, 39, 46, 47, 54, 64, 96], "internet": 5, "practic": [5, 8, 16, 18, 24, 26, 45, 47, 57, 66, 131, 134, 137, 191, 192, 193, 195, 200, 202, 229, 274, 275], "project": [5, 7, 10, 38, 69, 70, 71, 85, 92, 136, 237, 238, 250], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 37, 38, 47, 53, 56, 57, 83, 92, 120, 137, 175, 179, 189, 195, 198, 202, 204, 205, 212, 221, 224, 230, 240, 242, 244, 254, 255, 272, 282], "nn": 5, "brows": 5, "clone": [5, 28, 198], "download": [5, 7, 28, 37, 78, 199, 214, 221, 225, 250, 276], "origin": [5, 11, 12, 16, 18, 28, 30, 47, 48, 49, 52, 55, 56, 57, 60, 61, 62, 64, 65, 67, 69, 71, 81, 83, 87, 92, 96, 104, 106, 107, 114, 124, 134, 137, 162, 165, 175, 181, 186, 191, 192, 196, 200, 201, 204, 205, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 231, 236, 243, 244, 250, 253, 254, 255, 256, 257, 259, 260, 282], "77": [5, 45, 64, 92, 96, 204, 205, 238], "mib": 5, "remot": [5, 56], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 36, 56, 61, 62, 63, 64, 202, 215, 224, 277, 282], "checkout": [5, 37], "advantag": [5, 10, 14, 18, 20, 33, 36, 38, 56, 57, 61, 83, 86, 92, 96, 103, 174, 194, 195, 202, 213, 218, 221, 224, 240, 274, 276, 278, 282], "isol": [5, 36, 62, 196, 200, 201, 202, 223, 238], "wide": [5, 18, 84, 92, 137, 185, 195, 201, 205, 225], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 56, 192, 195, 218, 244, 255, 271, 277, 282], "consult": [5, 39], "kwarg": [5, 12, 32, 33, 34, 38, 47, 48, 55, 56, 57, 58, 62, 64, 66, 67, 69, 70, 71, 72, 73, 78, 81, 83, 87, 88, 89, 90, 92, 94, 95, 104, 106, 112, 115, 124, 139, 148, 150, 154, 155, 159, 161, 163, 164, 166, 167, 168, 180, 184, 185, 191, 194, 196, 201, 205, 207, 211, 212, 213, 217, 221, 222, 223, 225, 226, 231, 236, 237, 239, 246, 255], "test_bas": [5, 236], "similari": 5, "qualiti": [5, 97, 205], "code_qu": 5, "liter": [6, 12, 20, 38, 46, 56, 84, 86, 98, 170, 177, 217], "occur": [6, 10, 11, 12, 47, 48, 56, 60, 64, 73, 81, 87, 98, 110, 114, 134, 179, 180, 188, 200, 208, 217, 222, 223, 226, 236, 243, 277], "definit": [6, 10, 11, 12, 19, 30, 34, 38, 39, 47, 48, 53, 55, 56, 58, 59, 61, 62, 64, 69, 72, 79, 81, 83, 87, 88, 89, 92, 96, 98, 114, 122, 127, 128, 135, 172, 175, 178, 180, 188, 189, 192, 193, 196, 201, 202, 205, 212, 225, 226, 237, 238, 239, 243, 244, 250, 254, 255, 256, 257, 272, 282], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 32, 33, 37, 38, 47, 48, 56, 64, 65, 66, 69, 70, 71, 72, 89, 92, 98, 100, 106, 111, 114, 115, 116, 117, 119, 127, 135, 138, 159, 164, 168, 175, 179, 180, 186, 189, 191, 192, 195, 196, 200, 205, 213, 217, 218, 230, 231, 237, 239, 243, 244, 247, 254, 277], "fdiff": [6, 20, 38, 56, 62, 63, 64], "self": [6, 18, 20, 30, 32, 33, 37, 38, 47, 48, 53, 55, 56, 58, 62, 65, 66, 67, 69, 70, 71, 72, 83, 87, 92, 96, 111, 122, 165, 170, 180, 182, 184, 192, 194, 196, 198, 200, 201, 205, 207, 212, 213, 231, 250], "argindex": [6, 20, 38, 56, 62, 63, 64], "heavisid": [6, 64, 81, 83, 205], "diff": [6, 10, 11, 16, 20, 23, 36, 38, 56, 61, 62, 63, 64, 73, 78, 89, 92, 110, 112, 123, 124, 137, 168, 180, 182, 185, 186, 189, 191, 196, 201, 204, 205, 215, 221, 222, 223, 226, 227, 232, 254, 257, 272, 276, 283], "diracdelta": [6, 64, 83, 165, 170, 205], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 27, 36, 38, 48, 50, 55, 56, 57, 58, 62, 63, 66, 67, 71, 81, 83, 85, 92, 96, 98, 111, 114, 115, 117, 120, 124, 131, 137, 169, 170, 173, 175, 180, 188, 189, 196, 198, 201, 204, 205, 206, 212, 214, 215, 217, 218, 221, 223, 230, 234, 236, 238, 239, 244, 254, 255, 260, 272, 274, 275, 277, 281, 282], "scope": [6, 38, 130, 134, 234, 282], "high": [6, 7, 12, 16, 18, 23, 38, 56, 60, 61, 84, 96, 137, 185, 195, 200, 203, 205, 218, 223, 267, 278], "od": [6, 11, 20, 79, 115, 119, 130, 137, 219, 222, 262, 283], "seen": [6, 16, 18, 30, 48, 81, 83, 98, 102, 114, 119, 131, 175, 188, 192, 195, 198, 201, 221, 224, 241, 243, 254, 274, 277, 281], "hand": [6, 10, 16, 18, 20, 37, 38, 48, 49, 56, 62, 64, 83, 86, 87, 92, 96, 99, 115, 119, 120, 134, 138, 142, 159, 162, 180, 186, 189, 190, 192, 195, 196, 198, 200, 203, 215, 224, 236, 238, 240, 244, 247, 257, 259, 276], "less": [6, 7, 10, 11, 16, 34, 38, 39, 47, 48, 55, 56, 57, 60, 61, 62, 64, 70, 71, 72, 87, 92, 96, 104, 106, 120, 122, 170, 195, 198, 200, 201, 214, 215, 217, 218, 221, 223, 224, 225, 236, 238], "understand": [6, 12, 18, 19, 20, 26, 56, 57, 81, 120, 130, 132, 133, 137, 175, 188, 191, 194, 195, 200, 205, 215, 218, 237, 244, 273, 274, 281, 282], "clear": [6, 10, 18, 32, 46, 56, 81, 85, 111, 188, 189, 191, 196, 198, 201, 215, 223, 224, 231, 236, 240, 259, 274], "begin": [6, 10, 12, 18, 20, 22, 56, 57, 61, 62, 64, 81, 87, 89, 92, 96, 124, 132, 133, 134, 135, 166, 175, 180, 189, 190, 194, 205, 215, 218, 221, 222, 224, 225, 236, 246, 274, 276, 278, 282], "convers": [6, 7, 10, 18, 38, 56, 76, 98, 134, 174, 193, 194, 195, 196, 198, 200, 202, 205, 218, 230, 237, 250], "aim": [6, 7, 74, 81, 175, 192, 215, 221, 224, 275, 276], "comment": [6, 7, 38, 47, 120, 122, 202, 205, 238, 243], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 23, 30, 36, 39, 52, 56, 57, 59, 60, 61, 62, 70, 83, 85, 86, 92, 96, 98, 103, 104, 106, 110, 114, 116, 119, 120, 122, 123, 124, 134, 137, 138, 143, 166, 180, 182, 184, 195, 196, 198, 201, 202, 203, 204, 205, 206, 213, 217, 218, 221, 223, 225, 227, 237, 238, 240, 241, 243, 244, 246, 271, 277, 278, 282], "consum": [6, 38, 64, 116, 134], "human": [6, 14, 81, 172, 201, 205], "beings": 6, "english": [6, 57], "likewis": [6, 18, 37, 99, 123, 124], "reader": [6, 7, 20, 37, 39, 135, 192, 205, 240, 275, 280], "machineri": [6, 56, 200, 244], "mind": [6, 12, 15, 18, 23, 56, 92, 135, 191, 212, 213, 259, 277], "platform": [6, 56, 170, 189, 221, 237], "anyon": [6, 7, 10, 27, 201, 205, 270, 280, 281], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 34, 38, 47, 48, 56, 57, 61, 68, 81, 83, 92, 96, 137, 178, 185, 191, 193, 196, 198, 200, 201, 202, 205, 212, 214, 218, 220, 221, 224, 225, 226, 238, 240, 274, 276], "concis": [6, 137], "quick": [6, 7, 20, 56, 92, 96, 217, 223, 244], "depth": [6, 7, 9, 12, 13, 27, 47, 56, 122, 191, 192, 205], "tripl": [6, 73, 92, 189, 190, 192, 200, 246], "quot": [6, 12, 38, 86, 205, 246], "raw": [6, 7, 38, 56, 57, 62, 97, 98, 164, 169, 195, 196, 201, 213, 217, 281], "backslash": [6, 56, 205], "blank": [6, 98, 116, 191], "close": [6, 11, 24, 38, 55, 56, 60, 61, 64, 72, 74, 81, 83, 85, 106, 123, 191, 192, 193, 199, 200, 213, 223, 224, 238, 272, 282], "rare": [6, 20, 56, 221, 225, 234, 274], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 32, 33, 38, 56, 58, 64, 86, 137, 164, 175, 180, 189, 192, 197, 200, 201, 202, 212, 225, 254, 271, 274, 277], "consist": [6, 7, 10, 11, 16, 18, 23, 25, 37, 47, 48, 52, 56, 57, 61, 62, 64, 66, 72, 74, 81, 86, 99, 102, 114, 131, 135, 144, 164, 170, 175, 178, 184, 191, 193, 195, 196, 198, 213, 221, 223, 224, 225, 229, 234, 237, 238, 243, 275, 277], "review": [6, 7, 136], "head": [6, 15, 37, 56, 223, 225, 231, 246, 277], "plural": [6, 7], "length": [6, 10, 38, 40, 46, 47, 48, 50, 54, 56, 57, 59, 61, 62, 64, 65, 69, 71, 72, 73, 86, 87, 92, 95, 96, 99, 100, 110, 115, 119, 123, 124, 125, 135, 139, 143, 167, 172, 173, 175, 180, 184, 189, 200, 201, 205, 211, 215, 217, 221, 225, 236, 237, 243, 246, 250, 252, 260], "equal": [6, 10, 11, 14, 18, 19, 20, 26, 30, 34, 37, 38, 39, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 69, 70, 71, 72, 73, 75, 81, 86, 87, 89, 92, 96, 99, 102, 106, 107, 111, 115, 117, 122, 132, 133, 154, 155, 170, 175, 180, 184, 189, 192, 193, 194, 195, 196, 198, 200, 201, 203, 205, 211, 213, 215, 218, 221, 222, 223, 224, 225, 231, 236, 237, 238, 243, 246, 250, 255, 260, 272, 275, 283], "clutter": 6, "harder": [6, 10, 18, 56, 81, 195, 236], "minim": [6, 18, 20, 36, 47, 48, 52, 55, 56, 57, 81, 83, 86, 96, 111, 124, 139, 194, 195, 196, 198, 201, 204, 214, 217, 218, 223, 243, 247], "amount": [6, 37, 56, 57, 68, 114, 130, 180, 186, 189, 198, 208, 236, 250, 252], "deprec": [6, 8, 13, 31, 48, 56, 69, 83, 87, 109, 114, 134, 201, 205, 225, 231, 234, 235, 239, 241, 244, 248], "notifi": 6, "awai": [6, 37, 39, 57, 99, 100, 102, 122, 200, 205], "encourag": [6, 10, 37, 132, 133, 200], "label": [6, 37, 38, 50, 56, 66, 79, 83, 102, 143, 150, 154, 159, 168, 170, 191, 205, 206, 208, 217, 230, 231, 281], "elabor": [6, 21, 186, 257], "suffic": [6, 193, 223], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 24, 38, 47, 55, 57, 58, 60, 61, 62, 64, 81, 83, 89, 130, 132, 170, 189, 195, 198, 202, 204, 215, 217, 224, 225, 229, 230, 238, 240, 244, 246, 272, 274, 277, 278], "demonstr": [6, 7, 12, 18, 20, 23, 24, 47, 48, 56, 83, 96, 111, 114, 120, 124, 125, 134, 192, 195, 256, 282], "api": [6, 7, 10, 18, 21, 38, 56, 68, 76, 97, 98, 105, 130, 137, 166, 179, 187, 191, 198, 218, 220, 244, 247, 254, 255, 258, 265, 267, 268, 275, 276, 279], "simpl": [6, 11, 12, 16, 18, 20, 24, 28, 37, 38, 47, 55, 56, 60, 64, 68, 72, 74, 81, 83, 85, 92, 96, 97, 99, 100, 106, 107, 110, 114, 115, 117, 119, 122, 124, 125, 127, 129, 130, 134, 138, 144, 158, 159, 167, 168, 169, 180, 188, 189, 195, 196, 197, 201, 202, 205, 207, 212, 214, 215, 217, 218, 221, 224, 231, 237, 238, 243, 247, 249, 250, 252, 253, 257, 271, 274, 277, 278, 282], "too": [6, 12, 20, 26, 47, 48, 56, 62, 64, 66, 69, 71, 81, 86, 95, 96, 97, 132, 139, 212, 213, 217, 218, 221, 223, 224, 225, 236, 237, 253, 254], "thought": [6, 11, 56, 212, 221, 274, 277], "perfect": [6, 20, 47, 56, 96, 218, 224, 276, 277], "tell": [6, 7, 18, 19, 23, 38, 48, 57, 60, 64, 87, 98, 119, 175, 195, 200, 204, 212, 215, 221, 237, 274], "think": [6, 10, 11, 18, 19, 20, 23, 28, 36, 47, 122, 175, 240, 244, 274, 282], "test_": [6, 236], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 221, 222, 223, 272, 276, 283], "co": [6, 10, 12, 20, 22, 23, 24, 25, 26, 30, 36, 38, 55, 56, 58, 60, 61, 62, 64, 65, 66, 69, 70, 72, 74, 78, 79, 80, 81, 83, 87, 92, 96, 98, 111, 112, 114, 120, 122, 123, 125, 127, 128, 129, 134, 137, 142, 144, 180, 182, 184, 186, 188, 189, 190, 191, 195, 198, 201, 202, 204, 205, 206, 207, 208, 212, 213, 214, 215, 217, 221, 223, 224, 225, 226, 232, 244, 250, 252, 253, 254, 255, 260, 271, 272, 274, 276, 282, 283], "sin": [6, 7, 10, 11, 12, 18, 20, 22, 23, 24, 26, 28, 30, 36, 38, 55, 56, 58, 60, 61, 62, 64, 65, 66, 70, 74, 75, 78, 79, 80, 81, 83, 84, 87, 92, 97, 98, 108, 111, 112, 114, 119, 120, 122, 123, 125, 127, 128, 129, 134, 137, 142, 144, 168, 180, 182, 184, 186, 188, 189, 190, 191, 193, 195, 201, 202, 204, 205, 206, 207, 208, 212, 213, 214, 215, 217, 220, 221, 223, 224, 226, 232, 238, 244, 250, 252, 253, 254, 255, 260, 271, 272, 274, 276, 277, 282, 283], "hint": [6, 20, 37, 40, 47, 56, 59, 62, 83, 87, 92, 96, 106, 137, 147, 151, 167, 169, 170, 180, 201, 212, 215, 223, 282], "1st_exact": [6, 221], "eq": [6, 11, 12, 14, 18, 20, 26, 34, 36, 38, 56, 61, 62, 64, 66, 69, 73, 81, 86, 173, 191, 192, 196, 201, 203, 205, 207, 211, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 237, 238, 244, 250, 274, 276, 283], "c1": [6, 16, 57, 66, 73, 87, 89, 114, 156, 170, 213, 218, 221, 223, 256, 283], "comma": [6, 7, 12, 38, 56, 205, 244, 274], "readabl": [6, 29, 37, 84, 110, 201, 204, 205, 212, 214, 247], "accept": [6, 11, 20, 26, 37, 38, 47, 56, 62, 70, 83, 86, 87, 89, 92, 95, 98, 120, 164, 180, 185, 191, 200, 201, 204, 205, 206, 213, 215, 217, 223, 237, 244, 250, 252, 255, 278], "rang": [6, 10, 11, 16, 20, 23, 36, 38, 45, 46, 47, 48, 50, 52, 56, 57, 61, 62, 64, 70, 87, 92, 96, 100, 104, 108, 139, 170, 191, 195, 196, 197, 198, 200, 201, 202, 207, 208, 211, 213, 214, 217, 221, 224, 225, 226, 230, 236, 243, 271, 282], "30": [6, 30, 36, 38, 42, 56, 57, 59, 60, 61, 64, 70, 72, 83, 87, 92, 93, 96, 99, 100, 120, 143, 194, 196, 200, 201, 205, 211, 214, 217, 225, 226, 282], "7": [6, 12, 18, 20, 30, 32, 33, 36, 38, 40, 42, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 78, 81, 83, 86, 87, 89, 90, 92, 96, 98, 99, 104, 106, 122, 129, 132, 133, 137, 170, 175, 177, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 230, 231, 236, 237, 240, 243, 244, 250, 260, 272, 277, 278, 281], "8": [6, 16, 24, 28, 30, 31, 36, 38, 40, 47, 48, 49, 52, 54, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 72, 78, 81, 83, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 104, 106, 108, 122, 137, 142, 143, 154, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 207, 208, 211, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 230, 236, 238, 240, 243, 250, 253, 254, 260, 271, 272, 276, 278, 282], "9": [6, 14, 26, 28, 36, 38, 44, 46, 47, 48, 52, 54, 55, 56, 57, 59, 61, 62, 64, 65, 66, 69, 70, 72, 78, 81, 83, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 104, 106, 107, 108, 109, 111, 120, 122, 125, 131, 137, 139, 143, 175, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 211, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 236, 240, 243, 250, 253, 276, 278, 283], "11": [6, 18, 32, 33, 38, 47, 50, 52, 54, 56, 57, 59, 61, 64, 68, 69, 70, 72, 73, 81, 83, 86, 87, 88, 92, 96, 98, 106, 120, 122, 135, 154, 164, 190, 191, 193, 194, 196, 198, 199, 200, 201, 202, 204, 205, 212, 214, 218, 221, 223, 224, 225, 226, 237, 243, 254], "12": [6, 12, 20, 30, 36, 37, 38, 42, 44, 45, 47, 48, 49, 52, 54, 55, 56, 57, 59, 61, 62, 64, 66, 69, 70, 72, 81, 83, 87, 92, 93, 96, 99, 100, 104, 106, 108, 114, 122, 123, 135, 167, 180, 190, 193, 194, 195, 198, 200, 201, 202, 204, 205, 211, 213, 214, 218, 220, 221, 225, 226, 237, 240, 243, 253, 278, 282], "13": [6, 30, 38, 45, 47, 52, 56, 57, 59, 61, 64, 68, 69, 70, 71, 81, 86, 92, 96, 100, 104, 106, 120, 135, 191, 198, 200, 201, 202, 204, 205, 211, 218, 220, 222, 223, 225, 226, 236, 237, 260], "14": [6, 38, 45, 47, 51, 52, 54, 56, 57, 61, 62, 64, 81, 92, 93, 96, 97, 99, 104, 120, 190, 191, 194, 196, 198, 199, 200, 201, 202, 204, 205, 214, 217, 218, 221, 223, 225, 226, 272], "15": [6, 12, 20, 36, 42, 45, 47, 52, 54, 56, 57, 59, 60, 61, 64, 66, 69, 70, 72, 73, 81, 83, 86, 87, 88, 92, 93, 96, 99, 111, 143, 190, 191, 193, 194, 195, 196, 200, 201, 202, 204, 205, 207, 211, 212, 214, 217, 218, 222, 223, 224, 225, 226, 243, 271, 272, 277, 278], "16": [6, 26, 30, 36, 38, 47, 48, 51, 55, 56, 57, 61, 64, 65, 66, 70, 81, 83, 86, 92, 93, 95, 96, 100, 186, 193, 194, 195, 198, 199, 200, 201, 204, 205, 211, 213, 214, 215, 218, 225, 226, 243, 250, 259, 278], "17": [6, 10, 24, 26, 45, 47, 48, 56, 57, 60, 61, 62, 66, 69, 72, 81, 92, 96, 106, 195, 196, 200, 201, 204, 205, 212, 214, 218, 221, 226, 240, 244, 276], "18": [6, 24, 47, 48, 59, 61, 64, 66, 69, 72, 88, 92, 96, 99, 100, 104, 106, 108, 181, 190, 198, 199, 204, 205, 213, 214, 218, 221, 223, 224, 225, 226, 253], "19": [6, 24, 47, 56, 59, 64, 66, 69, 72, 92, 96, 98, 99, 190, 196, 200, 201, 204, 214, 218, 220, 223, 237, 271], "20": [6, 12, 24, 26, 34, 38, 45, 47, 48, 55, 56, 57, 60, 61, 64, 72, 73, 83, 92, 96, 99, 100, 102, 106, 117, 175, 177, 190, 191, 195, 199, 200, 201, 202, 204, 205, 211, 212, 213, 214, 217, 218, 221, 224, 225, 250, 272], "21": [6, 10, 42, 47, 56, 59, 61, 69, 70, 78, 92, 96, 98, 99, 135, 191, 196, 198, 199, 200, 202, 204, 205, 211, 221, 225, 226, 282], "22": [6, 12, 47, 56, 59, 60, 61, 64, 92, 96, 99, 100, 135, 199, 204, 217, 218, 223, 225], "23": [6, 36, 47, 48, 56, 59, 62, 64, 70, 72, 92, 96, 99, 135, 196, 201, 204, 211, 218, 243], "24": [6, 24, 30, 36, 44, 48, 49, 56, 59, 61, 64, 70, 78, 83, 92, 96, 99, 100, 104, 106, 167, 177, 190, 196, 198, 200, 201, 202, 204, 207, 212, 218, 221, 225, 240, 243, 260, 272, 278], "25": [6, 12, 24, 47, 48, 57, 59, 61, 64, 66, 69, 71, 88, 92, 95, 96, 99, 100, 106, 111, 117, 184, 190, 198, 200, 201, 204, 205, 211, 212, 214, 218, 220, 221, 222, 225, 237], "26": [6, 45, 56, 57, 59, 64, 68, 92, 96, 99, 100, 201, 218, 225], "27": [6, 23, 38, 39, 47, 51, 61, 66, 92, 96, 99, 100, 106, 108, 198, 201, 223], "28": [6, 38, 47, 55, 59, 60, 64, 92, 96, 99, 122, 214, 218, 221, 277], "29": [6, 30, 45, 47, 48, 56, 57, 59, 61, 62, 69, 70, 92, 96, 106, 159, 195, 213, 225], "assumpt": [6, 11, 12, 17, 19, 21, 23, 31, 32, 34, 35, 37, 38, 47, 48, 50, 55, 58, 60, 62, 63, 83, 86, 87, 92, 93, 99, 106, 110, 137, 177, 182, 194, 204, 205, 213, 214, 217, 221, 223, 224, 230, 238, 243, 261, 262, 282], "parenthes": [6, 12, 56, 98, 110, 158, 159, 189, 205, 229, 246], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 23, 26, 32, 33, 36, 47, 48, 52, 55, 56, 57, 58, 59, 60, 62, 66, 67, 68, 69, 70, 71, 74, 81, 83, 84, 85, 86, 87, 88, 89, 92, 96, 97, 98, 99, 100, 102, 104, 106, 110, 114, 115, 120, 131, 137, 142, 156, 164, 165, 166, 168, 180, 184, 185, 189, 191, 192, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 213, 214, 215, 217, 218, 220, 221, 223, 229, 230, 231, 234, 236, 237, 238, 243, 244, 246, 254, 257, 260, 272, 274, 276, 277, 278, 281, 282, 283], "enclos": [6, 66, 67, 72, 95, 107, 205, 215, 244], "colon": [6, 56], "preced": [6, 7, 12, 39, 48, 56, 57, 60, 61, 150, 217, 244], "space": [6, 12, 20, 36, 37, 38, 56, 57, 58, 65, 66, 67, 69, 71, 72, 85, 92, 98, 99, 108, 114, 115, 116, 117, 139, 141, 144, 154, 157, 159, 165, 167, 174, 180, 184, 186, 189, 190, 191, 192, 200, 224, 225, 236, 240, 250, 252, 254, 255, 256, 257, 259, 260, 267, 274, 277], "omit": [6, 10, 18, 20, 38, 48, 55, 56, 57, 61, 81, 83, 86, 92, 172, 205, 206, 213, 215, 223, 229, 238, 243, 272], "absent": [6, 40, 223], "specifi": [6, 7, 10, 14, 18, 20, 24, 25, 26, 37, 38, 39, 51, 55, 56, 57, 58, 59, 62, 64, 65, 69, 72, 81, 83, 85, 86, 87, 89, 92, 96, 98, 99, 100, 106, 111, 114, 115, 119, 120, 122, 124, 125, 127, 130, 132, 133, 134, 135, 137, 138, 154, 159, 164, 165, 167, 168, 173, 179, 180, 182, 184, 186, 188, 189, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 207, 208, 211, 212, 213, 215, 217, 221, 222, 223, 224, 225, 226, 230, 231, 232, 236, 237, 238, 243, 244, 250, 252, 253, 256, 259, 278], "displai": [6, 7, 12, 18, 19, 56, 57, 60, 81, 85, 99, 100, 104, 141, 174, 180, 184, 185, 191, 195, 196, 205, 213, 229, 236], "signatur": [6, 20, 32, 33, 48, 56, 92, 238, 239, 243, 244], "brace": [6, 61, 120, 205], "appear": [6, 7, 11, 12, 14, 37, 38, 40, 45, 47, 56, 57, 61, 62, 65, 66, 69, 72, 75, 79, 81, 83, 87, 92, 96, 98, 120, 124, 154, 170, 172, 175, 191, 193, 195, 198, 200, 201, 205, 214, 217, 221, 222, 223, 225, 229, 231, 236, 243, 244, 250, 255], "shape": [6, 10, 38, 72, 87, 89, 92, 94, 95, 104, 106, 114, 119, 120, 180, 191, 192, 194, 205, 208, 215, 225, 226, 227, 229, 230, 231, 244, 281], "combin": [6, 10, 12, 20, 25, 37, 56, 60, 61, 64, 83, 85, 86, 87, 96, 100, 106, 114, 119, 123, 130, 138, 149, 156, 164, 165, 167, 168, 169, 173, 175, 176, 192, 193, 195, 196, 198, 200, 201, 205, 206, 214, 215, 217, 218, 221, 223, 225, 226, 240, 243, 271, 274, 277], "incorrectli": [6, 10, 20, 65, 66, 92, 193], "opt_cs": [6, 217], "canon": [6, 11, 18, 38, 40, 45, 47, 48, 52, 56, 57, 58, 62, 72, 81, 86, 92, 96, 98, 115, 147, 151, 170, 172, 175, 177, 198, 206, 213, 214, 217, 221, 223, 225, 231, 243, 282], "find": [6, 11, 12, 14, 16, 17, 20, 22, 23, 25, 26, 30, 33, 36, 38, 39, 47, 50, 51, 52, 55, 56, 60, 62, 64, 66, 68, 69, 70, 73, 78, 81, 83, 85, 92, 96, 98, 112, 121, 128, 135, 137, 139, 155, 162, 164, 165, 166, 170, 173, 175, 188, 191, 192, 193, 194, 195, 196, 198, 202, 204, 205, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 223, 224, 225, 231, 240, 243, 244, 246, 250, 260, 272, 274, 276, 278, 283], "optim": [6, 11, 24, 38, 40, 47, 60, 86, 96, 110, 137, 150, 154, 201, 205, 206, 214, 217, 225, 237], "mul": [6, 10, 11, 12, 15, 20, 30, 81, 83, 87, 96, 150, 154, 164, 165, 194, 195, 196, 200, 201, 205, 206, 207, 214, 217, 221, 222, 223, 224, 229, 277], "pow": [6, 10, 11, 12, 30, 35, 38, 56, 57, 62, 81, 87, 96, 169, 194, 195, 196, 201, 205, 207, 214, 217, 223, 224, 277, 281], "neg": [6, 11, 12, 18, 19, 23, 34, 35, 38, 39, 51, 55, 56, 61, 62, 64, 66, 68, 69, 72, 81, 83, 85, 86, 87, 92, 95, 96, 99, 100, 102, 103, 104, 106, 170, 180, 190, 193, 194, 196, 198, 200, 201, 202, 205, 211, 213, 214, 215, 217, 218, 221, 223, 224, 225], "coeffici": [6, 14, 16, 18, 33, 36, 38, 55, 56, 58, 60, 61, 64, 69, 74, 75, 78, 79, 81, 85, 86, 89, 92, 93, 96, 107, 115, 120, 143, 157, 167, 175, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 207, 208, 211, 212, 215, 217, 218, 220, 221, 222, 223, 224, 225, 231, 237, 254, 257, 267, 277, 282], "none": [6, 7, 10, 11, 18, 19, 20, 30, 31, 32, 33, 34, 36, 37, 38, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 83, 84, 86, 87, 89, 92, 93, 96, 97, 98, 99, 106, 111, 112, 114, 115, 116, 117, 119, 120, 139, 141, 143, 144, 150, 155, 160, 165, 167, 170, 172, 176, 177, 178, 180, 182, 184, 185, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 234, 236, 237, 238, 239, 243, 244, 246, 249, 250, 253, 278, 282, 283], "process": [6, 7, 10, 11, 12, 18, 35, 38, 47, 48, 54, 56, 57, 62, 64, 72, 81, 83, 92, 96, 106, 116, 120, 122, 128, 131, 132, 134, 137, 191, 192, 198, 205, 206, 213, 217, 221, 223, 236, 240, 282], "concern": [6, 11, 18, 36, 39, 55, 60, 96, 186, 191, 193, 194, 195, 204, 205, 206, 217, 218, 223, 237, 238, 240, 246], "item": [6, 7, 11, 12, 14, 38, 45, 46, 48, 56, 61, 67, 73, 87, 92, 96, 115, 191, 195, 198, 201, 205, 213, 221, 222, 225, 236, 237, 240, 243, 244, 282], "fragment": [6, 57], "desir": [6, 10, 12, 16, 20, 26, 29, 47, 48, 56, 57, 59, 60, 61, 62, 66, 70, 72, 86, 87, 92, 95, 96, 97, 115, 116, 117, 119, 130, 134, 155, 180, 188, 189, 194, 196, 198, 200, 201, 202, 205, 206, 208, 213, 217, 221, 223, 224, 237, 239, 240, 243, 257, 271], "span": [6, 10, 85, 92, 99, 100, 114, 200, 205, 241, 278], "subsequ": [6, 12, 56, 62, 180, 196, 198, 201, 240, 243, 254, 257], "indent": [6, 12, 246], "embed": [6, 7, 36, 48, 56, 84, 200], "hyperlink": 6, "classnam": 6, "erf": [6, 64, 81, 83, 205, 215, 225], "gauss": [6, 64, 83, 92, 139, 193, 200, 203, 223, 224], "erfc": [6, 64, 81, 205, 225], "complementari": [6, 64, 106], "erfi": [6, 64, 81, 205], "erf2": [6, 64, 205], "erfinv": [6, 64, 205, 225], "invers": [6, 30, 47, 48, 56, 57, 58, 64, 83, 89, 92, 96, 114, 115, 159, 163, 164, 167, 172, 175, 192, 193, 194, 196, 198, 201, 202, 205, 207, 215, 217, 221, 223, 224, 225, 243, 278, 282], "erfcinv": [6, 64, 205], "erf2inv": [6, 64, 205], "besselj": [6, 64, 78, 205, 217, 221, 276], "besselbas": [6, 64], "bessel": [6, 7, 62, 74, 83, 201, 217, 221, 225, 276], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 37, 38, 58, 61, 64, 76, 83, 87, 99, 102, 115, 120, 133, 186, 193, 195, 196, 201, 206, 207, 213, 221, 222, 225, 243, 257, 259, 272, 282], "bess": [6, 64, 205, 217, 221, 225], "besselk": [6, 64, 205, 225], "cite": [6, 21], "citat": [6, 55, 199], "meant": [6, 7, 10, 12, 18, 20, 38, 56, 64, 69, 83, 96, 120, 137, 191, 196, 213, 217, 222, 255, 277], "augment": [6, 38, 92, 115, 132, 133, 137, 203, 223, 224, 241, 244, 283], "freeli": [6, 29, 90, 114, 192], "wikipedia": [6, 11, 18, 20, 30, 32, 33, 34, 36, 37, 38, 44, 45, 47, 48, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 72, 73, 74, 83, 85, 86, 87, 89, 92, 96, 104, 106, 109, 139, 141, 142, 143, 145, 146, 147, 151, 152, 153, 156, 158, 159, 168, 170, 173, 180, 182, 187, 201, 208, 212, 213, 214, 221, 224, 225, 238, 243, 250, 252, 256, 258, 260, 276, 278, 280], "wolfram": [6, 34, 49, 50, 56, 57, 59, 61, 62, 64, 66, 72, 83, 92, 96, 98, 199, 205, 207, 208, 210, 213, 218, 225, 243, 278], "mathworld": [6, 11, 34, 49, 50, 56, 57, 59, 61, 62, 64, 66, 72, 83, 92, 96, 199, 208, 213, 218, 225, 243], "nist": [6, 62, 64, 175], "digit": [6, 11, 12, 24, 38, 56, 57, 59, 60, 66, 83, 86, 96, 130, 180, 195, 201, 212, 217, 243, 271], "dlmf": [6, 62, 64], "suffer": 6, "rot": [6, 72, 167], "publish": [6, 81, 215], "identifi": [6, 10, 18, 19, 36, 49, 56, 59, 60, 83, 92, 102, 132, 158, 159, 192, 195, 196, 206, 214, 217, 221, 222, 224, 225, 244, 247], "clickabl": 6, "kozen89": [6, 198, 199], "kozen": [6, 199], "landau": [6, 199, 272], "polynomi": [6, 7, 11, 16, 18, 22, 26, 34, 47, 55, 56, 57, 60, 61, 74, 75, 77, 79, 83, 86, 87, 89, 92, 96, 100, 106, 135, 137, 192, 194, 199, 203, 207, 212, 214, 215, 217, 218, 220, 221, 224, 236, 261, 268, 273, 278, 283], "decomposit": [6, 47, 54, 88, 89, 92, 194, 196, 198, 199, 207, 282], "1989": [6, 199, 223], "pp": [6, 47, 48, 54, 55, 56, 57, 61, 62, 83, 87, 92, 124, 134, 190, 193, 198, 199, 221, 222, 225], "445": [6, 199], "456": [6, 56, 199], "abramowitz": [6, 64], "milton": [6, 64], "stegun": [6, 64], "iren": [6, 64], "chapter": [6, 47, 64, 96, 120, 199], "formula": [6, 16, 36, 50, 55, 56, 60, 61, 62, 64, 69, 86, 92, 96, 190, 192, 198, 201, 205, 207, 211, 214, 217, 218, 221, 276, 282], "tabl": [6, 18, 39, 47, 56, 61, 64, 77, 83, 92, 96, 114, 137, 190, 200, 227], "ed": [6, 48, 64, 92, 199, 223, 225], "1965": [6, 64, 87], "luke": [6, 64, 81, 215], "l": [6, 10, 12, 36, 37, 38, 39, 45, 47, 48, 55, 57, 64, 67, 68, 69, 70, 71, 73, 74, 79, 81, 83, 85, 88, 89, 92, 96, 99, 100, 106, 108, 114, 115, 117, 119, 120, 123, 124, 125, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 142, 168, 171, 172, 173, 175, 188, 189, 190, 192, 194, 196, 198, 199, 205, 207, 208, 214, 215, 218, 221, 223, 225, 229, 230, 231, 232, 236, 238, 243, 260, 282], "Their": [6, 56, 64, 81, 190, 191, 195, 198, 215], "approxim": [6, 12, 17, 26, 36, 47, 55, 56, 57, 60, 64, 66, 72, 81, 83, 92, 96, 100, 103, 139, 173, 191, 195, 196, 201, 208, 212, 215, 225, 272, 276], "1969": [6, 57, 64, 81, 199, 215], "en": [6, 7, 18, 20, 30, 32, 33, 34, 36, 37, 38, 44, 45, 47, 48, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 72, 73, 74, 83, 84, 85, 86, 87, 89, 92, 96, 104, 106, 109, 139, 141, 142, 143, 145, 146, 147, 151, 152, 153, 156, 158, 159, 168, 170, 180, 182, 187, 201, 202, 208, 212, 213, 214, 221, 224, 225, 238, 243, 244, 250, 252, 256, 258, 260, 278], "bessel_funct": [6, 64], "typefunct": [6, 64], "gamma": [6, 7, 12, 20, 55, 56, 58, 60, 61, 81, 83, 109, 137, 167, 189, 190, 205, 215, 217, 221, 225, 282], "infti": [6, 11, 18, 34, 55, 56, 57, 61, 62, 64, 81, 83, 192, 201, 208, 212, 215, 221, 224, 225, 272, 276, 282], "mathrm": [6, 28, 46, 55, 56, 57, 64, 81, 83, 92, 196, 198, 205, 213, 215, 221, 224, 225, 272, 276], "factori": [6, 16, 20, 55, 56, 60, 61, 64, 92, 96, 98, 190, 196, 198, 200, 201, 205, 207, 217, 223, 225, 238, 239, 243, 244, 282], "z": [6, 10, 11, 12, 14, 18, 20, 24, 25, 34, 35, 38, 39, 47, 48, 55, 56, 57, 58, 59, 61, 62, 64, 68, 69, 70, 71, 72, 81, 83, 86, 87, 89, 92, 98, 99, 100, 108, 111, 112, 114, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 135, 137, 138, 139, 148, 150, 154, 164, 165, 167, 171, 175, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 204, 205, 206, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 237, 238, 244, 250, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 281, 282, 283], "whole": [6, 10, 18, 56, 58, 64, 83, 100, 108, 191, 192, 200, 201, 205, 208, 213, 215, 221, 224, 243], "complex": [6, 10, 11, 12, 15, 18, 20, 23, 26, 30, 34, 35, 36, 38, 47, 56, 57, 59, 60, 61, 64, 68, 78, 81, 87, 88, 92, 96, 97, 98, 104, 106, 110, 120, 137, 139, 143, 153, 156, 158, 159, 170, 179, 180, 189, 193, 194, 196, 200, 201, 205, 206, 210, 213, 215, 217, 221, 223, 224, 225, 238, 246, 282, 283], "plane": [6, 30, 56, 64, 66, 68, 69, 71, 72, 83, 104, 114, 122, 142, 143, 188, 189, 213, 224, 260, 268, 282], "pole": [6, 11, 64, 81, 106, 114, 143, 212, 215, 221], "pi": [6, 10, 11, 12, 15, 18, 20, 23, 26, 29, 30, 31, 33, 34, 35, 36, 38, 48, 55, 56, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 75, 81, 83, 92, 96, 108, 122, 137, 139, 141, 142, 143, 144, 146, 154, 165, 167, 168, 171, 173, 180, 190, 191, 193, 195, 196, 201, 205, 208, 212, 213, 214, 215, 217, 220, 221, 223, 224, 225, 243, 250, 253, 260, 271, 276, 282], "oo": [6, 11, 14, 18, 19, 34, 36, 55, 56, 60, 61, 62, 64, 69, 81, 83, 86, 92, 106, 108, 156, 168, 171, 196, 198, 201, 210, 211, 212, 213, 217, 220, 221, 223, 224, 225, 230, 243, 246, 272, 276], "known": [6, 11, 18, 19, 20, 33, 37, 38, 39, 45, 47, 48, 56, 57, 60, 61, 64, 66, 69, 74, 81, 83, 84, 93, 96, 104, 106, 107, 109, 111, 117, 134, 173, 180, 188, 194, 195, 196, 200, 201, 205, 208, 211, 213, 214, 215, 217, 220, 221, 222, 223, 225, 243, 244, 250, 257, 259, 282], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 25, 26, 30, 34, 35, 36, 38, 56, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 83, 84, 87, 88, 92, 96, 98, 99, 102, 106, 108, 122, 139, 141, 143, 144, 149, 154, 164, 165, 167, 168, 170, 171, 173, 180, 186, 189, 190, 193, 195, 196, 198, 200, 201, 204, 205, 206, 211, 214, 215, 217, 218, 220, 221, 223, 224, 225, 243, 244, 246, 250, 259, 260, 271, 276, 281, 282, 283], "obei": [6, 64, 190, 205, 215], "mirror": [6, 64, 83, 143], "symmetri": [6, 10, 44, 49, 52, 64, 87, 149, 190, 221, 229, 231, 271, 282], "conjug": [6, 34, 45, 46, 47, 56, 62, 64, 87, 92, 108, 139, 153, 156, 170, 201, 205, 221, 231], "differenti": [6, 7, 10, 11, 22, 36, 56, 61, 62, 64, 73, 74, 76, 79, 106, 114, 115, 119, 120, 122, 124, 127, 130, 131, 132, 133, 134, 137, 138, 159, 165, 179, 180, 182, 184, 186, 189, 192, 198, 202, 204, 205, 210, 215, 217, 221, 222, 250, 257, 258, 261, 268, 272, 273, 276], "polygamma": [6, 61, 64, 205], "seri": [6, 16, 36, 37, 38, 39, 46, 47, 55, 56, 58, 60, 61, 62, 64, 79, 80, 81, 85, 96, 103, 106, 120, 127, 129, 137, 184, 188, 197, 198, 205, 210, 211, 215, 221, 224, 262, 268, 273], "expans": [6, 16, 20, 38, 56, 58, 61, 62, 64, 83, 92, 96, 134, 149, 151, 201, 202, 207, 208, 209, 214, 216, 217, 221, 223, 224, 262, 273, 282], "eulergamma": [6, 56, 60, 61, 64], "zeta": [6, 11, 12, 55, 56, 60, 61, 196, 200, 205, 212, 225], "40": [6, 26, 38, 59, 61, 64, 66, 73, 87, 92, 96, 99, 191, 202, 204, 205, 225, 246, 271], "288037795340032417959588909060233922890": [6, 64], "49801566811835604271": [6, 64], "15494982830181068512": [6, 64], "lowergamma": [6, 64, 225], "lower": [6, 10, 11, 18, 34, 36, 38, 47, 48, 55, 56, 58, 64, 65, 67, 72, 73, 83, 87, 88, 89, 92, 104, 109, 114, 170, 184, 190, 192, 194, 196, 198, 201, 205, 214, 215, 217, 221, 230, 231, 240, 250, 272, 280], "uppergamma": [6, 61, 64, 205, 225], "upper": [6, 34, 55, 57, 60, 64, 65, 72, 73, 87, 88, 89, 92, 95, 96, 104, 114, 163, 170, 190, 194, 196, 198, 200, 201, 205, 215, 223, 230, 250], "loggamma": [6, 7, 64, 205], "log": [6, 7, 12, 20, 28, 30, 36, 38, 47, 55, 56, 60, 61, 62, 64, 74, 78, 80, 81, 83, 87, 92, 96, 191, 196, 205, 207, 212, 215, 217, 221, 224, 225, 232, 272, 282, 283], "digamma": [6, 61, 64, 205], "trigamma": [6, 64, 205], "beta": [6, 12, 38, 47, 56, 83, 167, 180, 190, 200, 202, 205, 221, 225], "euler": [6, 36, 37, 55, 56, 57, 60, 61, 64, 72, 78, 84, 96, 114, 167, 180, 185, 189, 190, 201, 205, 221, 225, 250, 252], "gamma_funct": [6, 64], "gov": [6, 62, 64], "gammafunct": [6, 64], "gammabetaerf": [6, 61, 64], "unusu": [6, 18, 122, 236], "inlin": [6, 84, 185, 205, 238], "pretti": [6, 11, 20, 37, 38, 64, 83, 84, 92, 96, 100, 106, 122, 185, 215, 217, 224, 259, 273, 276, 278, 282], "As": [6, 10, 15, 16, 19, 20, 24, 29, 38, 47, 48, 56, 57, 60, 61, 62, 64, 80, 81, 86, 92, 95, 96, 98, 114, 119, 120, 122, 124, 131, 134, 135, 170, 175, 188, 192, 193, 195, 196, 198, 201, 202, 204, 205, 212, 213, 215, 221, 224, 225, 243, 244, 254, 255, 271, 272, 274, 276, 277, 278, 281, 282], "literatur": [6, 11, 81, 197, 268], "fact": [6, 10, 11, 18, 19, 20, 23, 33, 34, 56, 61, 64, 74, 81, 96, 102, 122, 134, 175, 192, 193, 195, 198, 200, 202, 204, 215, 217, 221, 224, 236, 244, 259, 271, 274, 275, 276, 277, 282], "eval": [6, 10, 18, 32, 33, 38, 56, 62, 64, 156, 170, 196, 201, 205, 238, 271], "illumin": 6, "tone": 6, "narr": [6, 8, 275], "excerpt": 6, "geometri": [6, 65, 66, 67, 69, 70, 71, 72, 73, 83, 130, 143, 197, 253, 260, 261, 268, 276], "autofunct": 6, "intersect": [6, 18, 23, 36, 37, 47, 66, 67, 69, 70, 71, 72, 73, 143, 192, 201, 205, 211, 212, 213, 224], "convex_hul": [6, 68, 72, 73], "are_similar": [6, 67, 68, 73], "autoclass": 6, "linearent": [6, 66, 69, 70, 71, 72], "rai": [6, 66, 68, 69, 70, 72, 73, 139, 143], "segment": [6, 10, 47, 66, 68, 69, 70, 71, 72, 73, 188, 191, 221, 236], "curv": [6, 37, 58, 68, 83, 96, 99, 139, 191, 192, 221, 250, 260, 268, 272], "ellips": [6, 67, 68, 72, 142, 191, 205, 268, 281], "circl": [6, 20, 56, 66, 67, 68, 70, 71, 72, 73, 81, 143, 150, 191, 224, 250, 253, 260], "polygon": [6, 66, 67, 68, 73, 191, 260, 268], "regularpolygon": [6, 67, 68, 72, 191], "triangl": [6, 20, 37, 61, 67, 68, 72, 73, 83, 87, 96, 190, 191, 253, 260], "rel": [6, 7, 10, 37, 38, 46, 47, 48, 49, 53, 54, 55, 56, 57, 60, 67, 81, 96, 111, 114, 117, 125, 134, 135, 142, 169, 180, 184, 188, 189, 192, 194, 195, 198, 200, 213, 215, 220, 223, 225, 236, 243, 254, 255, 259, 276], "cumbersom": [6, 26], "viewcod": 6, "aco": [6, 12, 30, 62, 69, 72, 122, 137, 143, 180, 205, 221, 250, 282], "obj": [6, 10, 18, 56, 196, 201, 205, 239], "qualifi": [6, 247], "elementari": [6, 18, 19, 20, 47, 56, 57, 60, 63, 64, 78, 81, 83, 87, 92, 96, 135, 163, 166, 201, 202, 243, 244, 254, 262], "trigonometr": [6, 20, 26, 56, 83, 202, 208, 216, 217, 220, 221, 224, 244, 262, 273, 283], "trail": [6, 48, 96, 196, 198, 201, 241, 246], "pair": [6, 12, 16, 37, 38, 47, 48, 56, 57, 62, 68, 73, 80, 92, 96, 120, 124, 160, 162, 164, 165, 170, 179, 190, 192, 195, 198, 200, 201, 206, 211, 212, 214, 215, 217, 218, 221, 224, 225, 238, 243, 254, 271, 278], "www": [6, 7, 30, 36, 47, 48, 57, 59, 61, 64, 78, 83, 84, 96, 104, 185, 199, 204, 205, 214, 217, 218, 221, 225, 243, 278, 281], "master": [6, 7, 28, 83, 236], "usag": [6, 7, 11, 12, 18, 19, 20, 29, 32, 58, 62, 83, 167, 186, 191, 192, 198, 205, 213, 215, 218, 221, 222, 226, 240, 244, 245, 257, 258, 265, 277], "expect": [6, 7, 12, 18, 20, 37, 39, 41, 56, 62, 64, 68, 86, 96, 97, 106, 120, 164, 195, 198, 200, 202, 203, 212, 217, 220, 223, 224, 225, 234, 236, 237, 240, 243, 244, 276, 277], "vector": [6, 16, 30, 34, 38, 40, 47, 48, 56, 58, 64, 69, 70, 71, 78, 79, 85, 87, 92, 97, 99, 102, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 142, 143, 156, 165, 167, 172, 175, 180, 182, 184, 185, 192, 200, 205, 215, 221, 223, 225, 230, 231, 236, 237, 252, 256, 261, 265, 267, 278], "dynamicsymbol": [6, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 180, 182, 184, 185, 186, 188, 189], "custom": [6, 10, 21, 38, 48, 56, 60, 63, 84, 87, 92, 112, 114, 179, 185, 186, 207, 211, 218, 225, 231, 237, 244, 250, 259, 276, 278], "sine": [6, 20, 56, 62, 64, 81, 83, 144, 202, 208, 214, 271], "expand": [6, 10, 11, 12, 16, 18, 38, 56, 58, 60, 61, 62, 64, 81, 83, 87, 106, 120, 122, 137, 151, 159, 162, 169, 170, 193, 195, 198, 200, 201, 202, 205, 208, 212, 214, 215, 217, 221, 224, 225, 229, 237, 244, 256, 271, 276], "troubleshoot": [6, 134], "spell": [6, 10, 11, 221], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 24, 26, 48, 55, 56, 60, 64, 66, 71, 81, 83, 86, 89, 92, 95, 96, 160, 162, 169, 170, 191, 195, 200, 205, 210, 212, 213, 214, 215, 217, 218, 221, 223, 244, 246, 271, 274, 277, 278, 282], "referencefram": [6, 10, 111, 112, 114, 115, 117, 120, 122, 123, 124, 127, 128, 129, 132, 133, 134, 135, 137, 138, 180, 181, 182, 184, 185, 186, 187, 188, 267], "though": [6, 11, 12, 18, 19, 20, 24, 25, 26, 29, 39, 56, 57, 58, 68, 72, 81, 83, 87, 92, 96, 110, 115, 122, 132, 134, 165, 179, 180, 188, 189, 193, 195, 196, 201, 202, 214, 215, 217, 221, 222, 223, 224, 236, 257, 272, 277, 282], "frame": [6, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 137, 138, 179, 180, 181, 182, 184, 186, 188, 240, 250, 257], "notimplementederror": [6, 23, 25, 26, 36, 55, 66, 69, 73, 83, 92, 104, 194, 200, 204, 213, 220, 221, 222, 223, 224], "outsid": [6, 23, 34, 47, 56, 64, 67, 72, 87, 96, 110, 175, 189, 201, 217, 272, 277], "plot": [6, 20, 28, 65, 66, 68, 69, 72, 79, 84, 92, 99, 100, 105, 137, 154, 157, 163, 208, 261, 267, 268, 276, 281], "ahead": [6, 96], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 23, 24, 38, 55, 56, 62, 64, 65, 66, 67, 68, 69, 70, 72, 83, 86, 87, 89, 92, 96, 98, 99, 100, 106, 110, 112, 120, 122, 123, 124, 127, 128, 134, 137, 167, 168, 173, 180, 190, 192, 194, 195, 196, 201, 205, 212, 213, 217, 218, 221, 222, 223, 225, 236, 237, 239, 271, 272, 274], "common": [6, 7, 10, 11, 12, 18, 19, 20, 22, 23, 36, 38, 47, 48, 56, 57, 62, 67, 70, 73, 83, 89, 91, 92, 96, 97, 104, 106, 111, 114, 116, 123, 130, 135, 137, 142, 175, 180, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 207, 213, 214, 215, 217, 218, 221, 223, 224, 225, 237, 238, 241, 243, 244, 257, 259, 265, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283], "matrixcommon": [6, 87, 89, 92], "dyadic": [6, 59, 111, 117, 120, 122, 127, 129, 137, 180, 182, 185, 187, 250, 253, 258], "shorten": 6, "highli": [7, 56, 60, 103, 195, 201, 210, 238], "aspect": [7, 18, 92, 195], "teach": [7, 48, 57, 225], "conduct": 7, "accord": [7, 12, 38, 44, 47, 48, 52, 55, 56, 57, 64, 86, 89, 92, 96, 98, 114, 121, 130, 164, 170, 191, 196, 198, 200, 202, 218, 223, 224, 231, 236, 238, 243, 259], "survei": 7, "commonli": [7, 11, 48, 61, 64, 83, 92, 110, 188, 193, 221, 257], "encount": [7, 12, 16, 56, 83, 92, 162, 193, 198, 201, 223, 224, 238, 250, 278], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 26, 40, 50, 52, 56, 57, 68, 81, 83, 87, 92, 96, 99, 101, 102, 107, 110, 120, 124, 125, 128, 130, 132, 179, 188, 189, 192, 193, 198, 215, 217, 218, 221, 224, 240, 243, 267, 272, 274, 278], "offer": [7, 37, 38, 47, 56, 97, 110, 137, 179, 189, 195, 200, 240, 258], "bring": [7, 81, 115, 128, 194, 208, 217, 278], "greater": [7, 34, 48, 56, 61, 62, 64, 81, 85, 96, 106, 198, 201, 204, 212, 217, 221, 223, 225, 240, 243, 257, 272], "clariti": [7, 47, 184], "mission": [7, 37, 90], "ca": [7, 28, 57, 64, 83, 204, 205, 243], "dedic": [7, 38, 197, 220, 238, 255, 257], "essenti": [7, 40, 51, 56, 60, 62, 63, 64, 81, 117, 122, 183, 186, 187, 189, 192, 193, 196, 200, 212, 215, 251, 254, 257, 258, 259, 265, 267], "element": [7, 10, 11, 12, 15, 18, 30, 34, 37, 38, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 72, 79, 81, 83, 85, 86, 87, 88, 89, 92, 95, 96, 97, 99, 100, 106, 107, 117, 137, 139, 142, 156, 167, 175, 184, 187, 189, 191, 192, 193, 194, 196, 198, 201, 203, 204, 205, 211, 212, 213, 215, 217, 218, 221, 223, 224, 225, 226, 230, 237, 239, 240, 243, 244, 245, 253, 272, 277, 278, 281, 282], "deviat": [7, 143, 225], "advanc": [7, 15, 17, 20, 32, 47, 56, 60, 61, 92, 93, 130, 135, 187, 191, 194, 195, 197, 199, 200, 207, 214, 221, 236, 237, 238, 243, 267, 271, 273, 275, 279, 280, 281, 282], "docutil": 7, "sourceforg": [7, 37], "net": [7, 37, 72, 199, 221, 225, 243], "ext": [7, 192, 196], "autodoc": 7, "associ": [7, 10, 11, 18, 37, 39, 54, 56, 57, 63, 64, 78, 79, 81, 85, 135, 137, 160, 168, 179, 180, 188, 189, 193, 194, 195, 196, 198, 200, 205, 213, 215, 218, 231, 245], "graphic": [7, 104], "info": [7, 12, 106, 205, 221, 222], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 84, 244], "subset": [7, 16, 18, 20, 36, 37, 40, 43, 47, 48, 54, 61, 62, 68, 79, 81, 83, 85, 96, 192, 194, 198, 200, 205, 213, 243, 262], "modifi": [7, 11, 12, 37, 38, 47, 56, 62, 64, 96, 98, 133, 142, 191, 198, 200, 201, 202, 205, 217, 223, 224, 225, 236, 239, 240, 243, 244, 271, 276, 278], "sphinx_math_dollar": 7, "delimit": [7, 56, 205], "dollar": [7, 276], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 179, 180, 181, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 234, 236, 237, 238, 239, 240, 243, 244, 246, 250, 252, 253, 254, 255, 256, 257, 259, 260, 271, 272, 274, 276, 277, 278, 281, 282, 283], "sphinxext": 7, "plot_direct": 7, "figur": [7, 56, 57, 66, 67, 69, 71, 72, 83, 100, 120, 165, 188, 189, 190, 191, 202, 205, 260, 282], "devel": [7, 190], "supersed": [7, 120, 137], "pep": [7, 38, 56, 86], "257": [7, 96, 223], "our": [7, 9, 10, 16, 20, 28, 38, 56, 64, 81, 92, 96, 123, 175, 188, 189, 191, 192, 194, 200, 201, 202, 205, 212, 215, 218, 221, 224, 236, 271, 274, 275, 277, 282], "introduct": [7, 10, 17, 47, 48, 61, 64, 196, 198, 199, 201, 205, 218, 221, 224, 258, 265, 275, 281], "four": [7, 38, 48, 56, 60, 64, 86, 89, 96, 102, 107, 121, 130, 135, 143, 180, 191, 192, 198, 201, 205, 213, 218, 221, 223, 225, 226, 250, 252, 255, 267], "locat": [7, 10, 48, 56, 70, 92, 96, 99, 100, 102, 114, 124, 131, 134, 138, 184, 186, 200, 201, 205, 217, 225, 239, 248, 250, 254, 256, 259], "websit": [7, 280], "advertis": 7, "serv": [7, 11, 16, 20, 32, 33, 38, 53, 56, 63, 79, 200, 221, 222, 246, 275], "initi": [7, 11, 18, 24, 32, 47, 51, 56, 57, 58, 61, 64, 72, 74, 75, 78, 79, 80, 81, 84, 96, 98, 100, 102, 104, 106, 111, 115, 117, 119, 120, 122, 124, 129, 132, 133, 134, 137, 138, 142, 150, 159, 181, 182, 185, 189, 190, 198, 200, 201, 205, 211, 215, 217, 221, 223, 224, 230, 238, 245, 246, 250, 252, 253, 254, 255], "obtain": [7, 11, 12, 14, 16, 23, 26, 32, 33, 37, 39, 40, 47, 48, 49, 52, 56, 57, 59, 60, 61, 62, 64, 66, 67, 69, 70, 72, 78, 81, 83, 85, 87, 92, 95, 96, 103, 106, 130, 133, 135, 143, 165, 170, 175, 192, 193, 196, 198, 200, 201, 204, 206, 213, 214, 215, 217, 218, 221, 222, 223, 224, 243, 246, 254, 255], "technic": [7, 10, 13, 20, 27, 37, 56, 137, 156, 192, 221, 238, 243, 257, 274, 277], "place": [7, 8, 10, 11, 12, 18, 20, 23, 27, 37, 48, 49, 56, 57, 62, 72, 88, 92, 95, 96, 98, 106, 137, 138, 199, 200, 205, 206, 212, 214, 217, 221, 240, 243, 270, 271, 278, 282], "site": [7, 96, 239], "upload": [7, 96], "belong": [7, 18, 34, 37, 47, 52, 56, 79, 92, 170, 180, 188, 191, 192, 194, 195, 198, 200, 201, 212, 213, 217, 218, 224, 231], "insid": [7, 10, 11, 12, 20, 47, 48, 53, 56, 66, 67, 72, 99, 110, 112, 124, 134, 169, 170, 175, 185, 189, 201, 205, 213, 215, 218, 223, 224, 225, 227, 229, 240, 277, 278], "spars": [7, 11, 89, 91, 92, 164, 194, 200, 201, 202, 225, 226, 265, 277], "substanti": [7, 97], "edit": [7, 83, 92, 96, 198, 199, 201], "arg": [7, 11, 18, 20, 23, 30, 32, 33, 34, 35, 36, 37, 38, 40, 47, 48, 50, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 73, 78, 81, 83, 86, 87, 88, 89, 90, 92, 94, 96, 98, 106, 139, 145, 148, 150, 153, 154, 155, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 180, 185, 189, 191, 194, 196, 198, 200, 201, 202, 205, 207, 208, 211, 212, 213, 214, 217, 221, 223, 224, 225, 226, 230, 231, 236, 237, 238, 239, 243, 244, 246, 250, 252], "invari": [7, 10, 20, 47, 52, 103, 106, 190, 196, 200, 201, 215, 221], "polici": [7, 8, 10, 239, 241], "5": [7, 12, 14, 18, 20, 22, 23, 24, 26, 30, 32, 33, 34, 36, 38, 39, 40, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 102, 104, 106, 108, 109, 111, 117, 120, 122, 123, 127, 128, 129, 130, 132, 139, 143, 164, 165, 168, 170, 177, 179, 181, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 230, 231, 236, 237, 243, 244, 250, 253, 255, 257, 259, 260, 271, 272, 274, 277, 278, 281, 282], "center": [7, 10, 16, 36, 47, 55, 56, 66, 70, 72, 73, 83, 92, 111, 114, 117, 120, 122, 127, 129, 131, 135, 137, 143, 188, 191, 200, 205, 213, 260], "resid": 7, "standalon": [7, 137], "restructur": 7, "appli": [7, 10, 11, 19, 20, 26, 30, 31, 32, 33, 34, 38, 47, 48, 49, 54, 55, 56, 57, 58, 59, 62, 63, 66, 71, 72, 74, 83, 86, 87, 88, 92, 96, 98, 99, 100, 102, 106, 107, 111, 112, 122, 125, 132, 134, 136, 147, 151, 154, 155, 159, 162, 163, 167, 170, 180, 189, 191, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 211, 212, 213, 214, 217, 221, 222, 223, 224, 225, 226, 229, 236, 239, 243, 250, 252, 255, 278, 281, 282], "surround": [7, 56, 73, 143, 213, 246], "nu": [7, 12, 64, 83, 96, 171, 193, 205, 217, 225, 231, 276], "equat": [7, 11, 12, 14, 16, 21, 36, 38, 52, 55, 56, 58, 62, 64, 66, 69, 70, 74, 78, 79, 80, 81, 84, 87, 92, 99, 102, 106, 108, 110, 114, 115, 116, 119, 120, 122, 123, 124, 125, 127, 129, 130, 131, 136, 137, 138, 139, 143, 179, 184, 185, 188, 189, 190, 191, 192, 198, 199, 200, 203, 204, 205, 211, 215, 217, 220, 221, 222, 230, 250, 255, 256, 260, 272, 273, 276], "strip": [7, 57, 83, 96, 198, 241, 246], "out": [7, 12, 18, 19, 20, 37, 38, 47, 48, 56, 57, 58, 61, 64, 72, 81, 83, 89, 92, 96, 99, 106, 107, 120, 122, 124, 127, 137, 147, 151, 162, 165, 167, 169, 170, 192, 193, 195, 196, 200, 201, 202, 203, 205, 206, 212, 215, 217, 221, 226, 236, 238, 243, 244, 274, 276, 277, 281, 282], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 38, 39, 56, 57, 62, 81, 83, 86, 92, 95, 98, 124, 134, 164, 188, 189, 193, 195, 201, 205, 206, 213, 217, 221, 223, 225, 229, 238, 241, 244, 274, 275], "whitespac": [7, 56, 241], "invalid": [7, 12, 26, 56, 57, 98, 122, 195, 198, 213], "dx": [7, 10, 11, 16, 20, 36, 38, 52, 56, 58, 60, 64, 73, 75, 78, 79, 80, 81, 83, 92, 99, 109, 115, 116, 159, 189, 201, 202, 208, 218, 221, 222, 226, 272, 276, 281, 283], "meta": [7, 56, 221, 222], "stackexchang": [7, 66], "5020": 7, "wikibook": [7, 83, 84], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 205], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 26, 56, 92, 120, 202, 215, 221, 222, 224, 237, 260, 276, 282], "sentenc": [7, 86], "thumb": [7, 86, 243], "greek": [7, 11, 29, 56, 96, 98, 192, 205], "letter": [7, 11, 12, 29, 49, 56, 57, 96, 170, 205, 243, 272, 274], "\u03b1": [7, 190, 204], "alpha": [7, 12, 47, 56, 64, 83, 85, 142, 146, 149, 167, 184, 188, 189, 190, 196, 198, 200, 201, 204, 205, 217, 221, 225], "logarithm": [7, 12, 30, 36, 38, 56, 57, 62, 81, 83, 92, 96, 196, 198, 202, 205, 215, 217, 224, 225, 273], "italic": 7, "emphasi": [7, 195], "asterisk": 7, "stirl": [7, 48, 61, 243], "fals": [7, 11, 12, 18, 19, 20, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 81, 83, 84, 86, 87, 88, 89, 92, 93, 96, 98, 99, 100, 104, 106, 108, 109, 112, 115, 116, 117, 120, 122, 123, 127, 128, 129, 131, 132, 133, 134, 135, 138, 142, 154, 155, 159, 162, 167, 168, 169, 170, 173, 177, 180, 181, 182, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 230, 231, 234, 236, 237, 238, 239, 243, 244, 246, 250, 253, 274, 277, 278, 281], "permut": [7, 39, 41, 43, 44, 46, 49, 52, 53, 54, 57, 61, 64, 87, 89, 92, 116, 170, 190, 194, 196, 201, 218, 226, 227, 231, 243, 262, 282], "cycl": [7, 10, 38, 44, 47, 48, 54, 56, 59, 61, 87, 96, 144, 213, 243], "partit": [7, 43, 47, 61, 96, 124, 134, 136, 218, 225, 240, 262], "reduc": [7, 12, 19, 25, 31, 33, 35, 39, 52, 56, 57, 59, 61, 62, 64, 71, 72, 81, 83, 92, 96, 106, 107, 134, 152, 170, 192, 194, 195, 196, 198, 199, 200, 201, 202, 206, 211, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 243, 278], "ge": [7, 18, 56, 61, 62, 64, 81, 87, 92, 96, 190, 193, 198, 201, 215, 243], "consecut": [7, 38, 47, 52, 55, 57, 61, 72, 217, 223], "group": [7, 37, 42, 43, 48, 49, 52, 53, 54, 56, 59, 61, 85, 86, 96, 149, 158, 159, 170, 190, 191, 192, 200, 201, 217, 221, 223, 224, 231, 243, 262], "pairwis": [7, 34, 37, 56, 61, 73, 92, 96, 218, 223], "ital": [7, 205], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 31, 32, 33, 37, 38, 39, 46, 47, 48, 52, 55, 56, 57, 60, 66, 83, 86, 87, 88, 89, 90, 92, 94, 95, 96, 98, 106, 119, 142, 175, 190, 191, 192, 193, 195, 196, 198, 201, 204, 205, 212, 213, 218, 221, 223, 224, 225, 226, 231, 234, 236, 237, 238, 239, 241, 243, 244, 246, 272, 274, 277, 278], "talk": [7, 13, 27, 57, 192, 200, 254], "handl": [7, 16, 18, 19, 20, 36, 44, 48, 56, 62, 83, 84, 86, 91, 96, 97, 98, 99, 107, 110, 120, 134, 150, 153, 159, 160, 165, 195, 201, 202, 211, 217, 221, 223, 226, 229, 237, 243, 244, 246, 277, 282], "referenc": [7, 8, 40, 45, 96, 119, 122, 167, 200], "overlin": [7, 18, 64], "normal": [7, 10, 12, 18, 19, 20, 26, 30, 34, 38, 47, 55, 56, 60, 62, 66, 69, 70, 71, 83, 84, 86, 90, 91, 92, 96, 98, 108, 110, 114, 120, 122, 128, 137, 143, 154, 164, 167, 168, 169, 170, 171, 175, 178, 180, 189, 192, 194, 195, 196, 198, 200, 201, 205, 206, 208, 213, 214, 218, 221, 225, 230, 236, 241, 243, 250, 265], "assign": [7, 18, 37, 38, 39, 52, 56, 61, 72, 83, 85, 86, 92, 98, 115, 120, 127, 137, 175, 186, 189, 191, 193, 198, 205, 223, 224, 231, 238, 254, 257, 274], "structur": [7, 10, 11, 15, 18, 20, 35, 37, 38, 44, 47, 48, 54, 56, 81, 83, 86, 87, 92, 99, 100, 102, 119, 168, 170, 191, 192, 195, 198, 200, 201, 202, 217, 221, 223, 224, 225, 229, 230, 238, 240, 243, 244, 274, 282], "suggest": [7, 10, 22, 39, 47, 83, 92, 96, 120, 203, 278], "american": [7, 42, 57], "color": [7, 84, 104, 185, 205, 236, 243, 281], "colour": 7, "quotat": 7, "line_color": [7, 191, 208], "aesthet": [7, 11, 191], "ariti": [7, 191], "term": [7, 10, 11, 12, 16, 18, 20, 26, 38, 47, 56, 57, 58, 60, 61, 62, 64, 75, 79, 80, 81, 83, 86, 87, 92, 96, 100, 104, 106, 112, 115, 122, 124, 127, 130, 132, 134, 135, 149, 154, 166, 167, 170, 172, 175, 180, 182, 186, 188, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 207, 208, 210, 211, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 229, 230, 243, 250, 253, 257, 262, 272, 274, 276, 277, 282], "unrestrict": [7, 45, 243], "necklac": [7, 243], "bracelet": [7, 243], "impli": [7, 11, 12, 18, 30, 34, 38, 47, 86, 102, 170, 191, 196, 198, 205, 213, 215, 221, 223, 226, 229, 230, 243, 257], "turn": [7, 10, 11, 18, 26, 38, 56, 62, 64, 71, 81, 90, 128, 132, 186, 192, 200, 202, 205, 212, 213, 215, 217, 218, 221, 236, 243, 259, 274, 276], "sequenc": [7, 12, 36, 38, 40, 43, 46, 47, 48, 52, 54, 55, 56, 57, 59, 61, 64, 66, 69, 70, 71, 72, 73, 80, 86, 87, 89, 92, 95, 96, 137, 143, 169, 170, 196, 199, 205, 207, 209, 212, 214, 215, 217, 218, 221, 222, 224, 231, 234, 237, 238, 243, 245, 246, 262], "revers": [7, 40, 45, 48, 55, 56, 57, 62, 83, 84, 86, 92, 96, 106, 169, 180, 185, 192, 194, 198, 201, 202, 205, 206, 213, 217, 221, 243, 282], "ambigu": [7, 10, 12, 14, 56, 158, 164, 217, 229, 234], "person": [7, 11], "chebyshev": [7, 36, 56, 83, 198, 201], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 37, 39, 40, 45, 48, 55, 56, 57, 62, 66, 70, 72, 73, 79, 83, 86, 92, 96, 117, 132, 142, 165, 175, 181, 182, 186, 189, 193, 194, 196, 200, 201, 212, 213, 217, 221, 222, 223, 225, 231, 236, 240, 243, 244, 250, 253, 255, 257], "transliter": 7, "russian": 7, "chebyshevt": [7, 64, 205], "orthogonalpolynomi": 7, "t_n": [7, 61, 64, 83, 198, 201, 255], "tens": 7, "inclus": [7, 55, 102, 163, 192, 211, 212, 213, 224], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 61, 81, 198], "she": [7, 224], "extran": [7, 221], "belittl": 7, "obvious": [7, 39, 47, 173, 188, 195, 215], "easili": [7, 10, 18, 20, 28, 56, 57, 79, 81, 92, 96, 97, 114, 132, 168, 188, 201, 204, 205, 210, 217, 218, 221, 223, 224, 237, 276], "straightforward": [7, 20, 47, 57, 92, 215], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 57], "friendli": [7, 38, 81, 223, 224, 238, 283], "mistak": [7, 12, 47, 244], "goe": [8, 20, 27, 92, 212, 215, 224, 274, 277], "content": [8, 13, 38, 56, 57, 91, 193, 196, 198, 201, 204, 205, 233, 238, 241, 242, 262, 263, 264, 265, 266, 267, 268, 269, 273, 275], "setup": [8, 10, 38, 56, 123, 124, 125, 139, 180, 198, 201, 203, 204, 215, 236, 237, 239, 249, 281], "depend": [8, 10, 11, 12, 14, 18, 20, 24, 28, 36, 38, 39, 47, 48, 55, 56, 57, 58, 61, 62, 64, 68, 73, 80, 81, 83, 84, 85, 92, 96, 97, 98, 104, 108, 111, 115, 116, 119, 120, 122, 124, 130, 132, 142, 143, 144, 159, 168, 170, 172, 175, 185, 186, 191, 193, 196, 198, 200, 201, 202, 204, 205, 206, 211, 215, 217, 218, 221, 222, 223, 224, 225, 236, 237, 238, 239, 243, 244, 257, 259, 260, 274, 276], "document": [8, 10, 11, 17, 20, 32, 33, 34, 47, 52, 56, 57, 62, 63, 64, 68, 78, 81, 82, 84, 89, 92, 97, 100, 110, 115, 130, 132, 133, 135, 137, 145, 159, 165, 179, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 198, 201, 205, 215, 219, 221, 223, 224, 234, 236, 238, 239, 241, 243, 250, 257, 258, 261, 272, 274, 275, 281, 282], "auto": [8, 10, 12, 36, 56, 57, 84, 191, 198, 201, 205, 217, 221, 225], "rebuild": [8, 11, 20, 56, 201, 277], "live": [8, 29, 39, 137, 200, 218], "server": 8, "debug": [8, 38, 56, 83, 122, 159, 236, 237, 246], "incompat": 8, "pick": [9, 18, 57, 61, 134, 164, 166, 282], "ignor": [10, 12, 14, 20, 38, 47, 56, 57, 61, 62, 66, 71, 81, 86, 92, 96, 106, 112, 122, 167, 170, 180, 191, 201, 205, 206, 217, 223, 224, 237, 282], "regex": 10, "categori": [10, 192, 261, 268], "lead": [10, 11, 18, 19, 20, 26, 55, 56, 62, 66, 83, 86, 92, 96, 108, 116, 154, 180, 189, 193, 196, 198, 200, 201, 202, 205, 212, 214, 217, 221, 224, 238, 241, 246, 275, 282], "against": [10, 18, 20, 26, 57, 99, 120, 237], "unrel": [10, 56, 63, 193, 274], "capabl": [10, 11, 18, 24, 36, 38, 56, 60, 68, 81, 96, 99, 100, 130, 137, 191, 202, 205, 224, 275, 276, 282, 283], "w": [10, 12, 26, 38, 40, 46, 55, 56, 57, 58, 59, 62, 64, 81, 83, 86, 92, 93, 114, 117, 128, 135, 136, 139, 144, 155, 159, 168, 184, 186, 187, 190, 191, 193, 194, 198, 199, 200, 201, 202, 206, 212, 213, 215, 217, 218, 221, 222, 224, 225, 236, 244, 246, 257, 283], "pythonwarn": 10, "NOT": [10, 86, 106, 150, 154, 169, 172, 234, 237], "blog": [10, 20, 38, 61, 87, 218, 224], "post": [10, 18, 23, 24, 25, 38, 50, 56, 205, 206, 217, 236, 277], "ned": 10, "batcheld": 10, "kanesmethod": [10, 114, 115, 120, 122, 123, 124, 125, 127, 128, 131, 132, 134, 137], "pinjoint": [10, 114, 123, 125, 131], "prismaticjoint": [10, 114, 125, 131], "q_": [10, 56, 114, 185, 218, 221], "u_": [10, 92, 114], "had": [10, 20, 23, 48, 56, 57, 92, 96, 120, 134, 200, 201, 202, 205, 213, 215, 221, 223, 224, 239, 244, 271, 274, 277, 278], "templat": [10, 243], "axi": [10, 30, 49, 61, 62, 66, 67, 69, 70, 72, 78, 81, 83, 89, 92, 99, 104, 109, 114, 120, 122, 124, 127, 128, 129, 131, 134, 137, 138, 139, 142, 143, 167, 180, 182, 184, 186, 188, 189, 191, 196, 224, 250, 252, 255, 257, 260], "parent_axi": [10, 114], "child_axi": [10, 114], "parent": [10, 47, 56, 79, 114, 131, 180, 184, 191, 195, 196, 200, 236, 240, 250, 254, 255], "child": [10, 11, 114, 131, 180, 195, 240], "bodi": [10, 12, 38, 81, 98, 109, 110, 113, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 130, 131, 132, 137, 138, 173, 179, 180, 184, 188, 189, 250, 252, 267], "parent_interfram": [10, 114, 131], "child_interfram": [10, 114, 131], "rotat": [10, 30, 44, 47, 49, 56, 65, 66, 67, 69, 71, 72, 87, 92, 99, 100, 114, 122, 125, 127, 129, 131, 135, 138, 154, 167, 180, 184, 186, 188, 189, 190, 191, 243, 250, 252, 255, 257, 259], "joint_axi": [10, 114, 123, 125, 131], "transform": [10, 11, 26, 30, 35, 38, 52, 55, 56, 57, 58, 60, 61, 64, 71, 89, 92, 104, 106, 114, 122, 131, 142, 163, 165, 167, 172, 190, 193, 196, 198, 200, 201, 207, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 230, 238, 244, 250, 257, 276], "suppos": [10, 19, 20, 48, 55, 56, 57, 81, 192, 194, 198, 200, 201, 205, 212, 215, 221, 223, 234, 243, 255, 260, 274, 276, 282], "pin": [10, 30, 99, 100, 102, 114], "dcm": [10, 111, 114, 120, 122, 137, 180, 188, 189, 250], "q_pin": 10, "inspect": [10, 18, 92, 200, 211, 242, 244, 269], "notic": [10, 12, 20, 47, 48, 54, 56, 92, 158, 179, 195, 215, 231, 232, 243, 244, 274, 276, 277, 282], "theta_pin": 10, "rad": [10, 57, 104, 120, 200], "int_fram": 10, "orient_axi": [10, 111, 114, 180, 182], "align": [10, 38, 66, 92, 114, 189, 190, 205, 223, 236], "orient": [10, 30, 68, 72, 87, 114, 120, 122, 124, 127, 131, 135, 137, 180, 184, 186, 188, 189, 198, 243, 250, 251, 258, 259, 265], "parent_joint_po": [10, 114], "child_joint_po": [10, 114], "parent_point": [10, 114, 123, 125, 131], "child_point": [10, 114, 123, 125, 131], "mass": [10, 73, 108, 109, 110, 111, 113, 114, 115, 119, 120, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 137, 138, 146, 171, 173, 174, 175, 186, 188, 236, 259, 267], "pos_from": [10, 114, 120, 122, 123, 124, 131, 137, 184, 188], "masscent": [10, 111, 114, 117, 123, 131, 135, 137], "parent_fram": [10, 131], "child_fram": [10, 131], "locatenew": [10, 111, 117, 122, 124, 127, 128, 129, 134, 135, 137, 138, 181, 184, 186, 188], "pars": [10, 48, 56, 89, 120, 131, 202, 204, 261, 269], "comprehens": [10, 18, 23, 199, 213, 225, 271], "additional_transl": 10, "recogn": [10, 12, 56, 57, 61, 71, 96, 99, 107, 193, 196, 204, 213, 214, 223, 230, 274], "logic": [10, 11, 18, 20, 31, 32, 33, 34, 37, 56, 58, 81, 83, 96, 162, 164, 165, 169, 205, 207, 213, 221, 225, 243, 274, 275, 276, 278], "node": [10, 11, 36, 50, 56, 83, 98, 102, 112, 146, 171, 180, 190, 195, 205, 212, 224, 229, 240, 277, 281], "maximum": [10, 12, 23, 36, 38, 39, 47, 48, 56, 62, 83, 92, 96, 99, 122, 167, 175, 191, 196, 198, 201, 205, 212, 213, 217, 218, 221, 224, 225, 240, 243], "multipli": [10, 12, 30, 34, 38, 47, 56, 67, 71, 78, 85, 87, 92, 96, 115, 124, 133, 134, 135, 147, 156, 170, 175, 176, 192, 193, 194, 196, 198, 200, 201, 205, 207, 214, 215, 218, 221, 226, 243, 254, 274, 277], "max": [10, 38, 47, 48, 56, 62, 64, 66, 83, 92, 96, 98, 99, 190, 191, 200, 201, 205, 212, 214, 215, 244], "min": [10, 48, 52, 56, 61, 62, 92, 98, 190, 191, 200, 205, 211, 221], "is_perfect_squar": 10, "ntheori": [10, 34, 47, 56, 57, 198, 201, 218, 243], "primetest": [10, 56, 96], "is_squar": [10, 56, 87, 96], "is_prim": [10, 18, 56, 192], "isprim": [10, 34, 57, 96], "divid": [10, 11, 47, 55, 56, 57, 72, 92, 96, 174, 175, 193, 195, 196, 198, 200, 201, 205, 221, 240, 277], "bottom_up": [10, 56], "interactive_travers": 10, "postorder_travers": [10, 56, 277], "preorder_travers": [10, 56, 277], "refactor": [10, 221, 229, 240], "tr": [10, 39, 47, 205, 214], "quantum": [10, 108, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 190, 267], "ever": [10, 11, 20, 62, 189, 192, 201, 215, 221, 238, 241, 277], "helper": [10, 36, 38, 47, 51, 54, 56, 81, 84, 85, 155, 157, 166, 202, 212, 215, 218, 221, 222, 224, 237, 267], "default_sort_kei": [10, 37, 45, 56, 229], "matrixel": [10, 38], "matrixsymbol": [10, 15, 18, 34, 35, 38, 56, 87, 89, 92, 205, 225, 227], "layer": [10, 106, 198, 244], "imprecis": 10, "free_symbol": [10, 11, 38, 56, 65, 83, 87, 159, 177, 180, 201, 211, 218], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 31, 36, 38, 39, 47, 48, 49, 52, 53, 54, 56, 57, 59, 61, 62, 64, 65, 66, 68, 69, 72, 74, 80, 81, 83, 85, 86, 87, 92, 96, 109, 114, 122, 135, 137, 146, 170, 171, 175, 179, 186, 189, 192, 193, 195, 196, 198, 200, 201, 205, 208, 213, 214, 215, 217, 218, 221, 223, 224, 225, 231, 235, 239, 240, 241, 243, 244, 248, 254, 256, 257, 259, 271, 276, 278, 281, 282, 283], "atomicexpr": [10, 56], "concept": [10, 11, 18, 47, 122, 189, 195, 197, 200, 205, 224, 229, 259, 275, 280], "misappli": 10, "noth": [10, 37, 47, 56, 69, 83, 154, 170, 192, 196, 204, 205, 217, 221, 223, 234, 236, 244, 246, 274], "introduc": [10, 19, 52, 55, 56, 64, 81, 92, 97, 100, 120, 122, 127, 128, 129, 133, 170, 175, 189, 196, 197, 201, 202, 205, 212, 215, 218, 225, 241, 268, 275, 278, 280, 282], "21494": 10, "size": [10, 16, 38, 39, 40, 45, 47, 48, 49, 50, 51, 52, 56, 57, 59, 61, 84, 87, 89, 92, 95, 96, 104, 122, 132, 133, 134, 143, 165, 166, 185, 191, 194, 198, 205, 217, 218, 221, 225, 243, 272], "die": [10, 200, 225], "histor": [10, 11, 14, 20, 57, 221, 225], "21563": 10, "revert": [10, 196, 201], "sample_it": [10, 225], "consequ": [10, 20, 34, 56, 193, 195, 274, 282], "subclass": [10, 11, 18, 20, 32, 33, 38, 56, 63, 67, 69, 83, 86, 139, 145, 154, 158, 159, 160, 165, 167, 168, 191, 192, 194, 195, 196, 200, 201, 205, 225, 236, 237, 238, 241, 244, 250, 254, 277], "kei": [10, 11, 12, 14, 31, 34, 37, 45, 47, 48, 56, 57, 58, 61, 72, 85, 87, 92, 95, 96, 99, 119, 120, 162, 165, 170, 189, 191, 193, 195, 196, 197, 198, 200, 201, 202, 203, 205, 217, 221, 222, 223, 225, 229, 240, 243, 244, 246, 278, 279, 282], "domainmatrix": [10, 88, 92, 197, 200, 203, 268], "switch": [10, 47, 54, 83, 96, 106, 198, 201], "21402": 10, "earlier": [10, 110, 202, 206, 215, 217, 244, 255, 257, 277], "could": [10, 11, 12, 16, 18, 20, 23, 24, 25, 33, 38, 49, 56, 68, 81, 83, 86, 114, 117, 120, 130, 134, 170, 173, 175, 192, 195, 198, 200, 202, 205, 213, 215, 217, 221, 222, 223, 224, 225, 226, 229, 230, 237, 241, 255, 256, 274, 277, 282], "traceback": [10, 12, 15, 18, 19, 20, 23, 24, 25, 26, 31, 32, 33, 38, 39, 48, 56, 57, 60, 66, 83, 86, 87, 88, 89, 90, 92, 94, 95, 98, 106, 190, 192, 195, 196, 198, 201, 204, 212, 213, 221, 223, 224, 234, 236, 237, 239, 241, 243, 244, 246, 274, 278], "typeerror": [10, 12, 19, 20, 23, 31, 32, 33, 48, 56, 66, 71, 86, 88, 90, 94, 106, 144, 212, 213, 237, 244], "unsupport": [10, 12, 15, 106, 205], "operand": [10, 12, 48, 56, 181, 200, 253], "dict": [10, 12, 14, 18, 23, 25, 26, 38, 48, 56, 57, 58, 72, 73, 86, 87, 92, 96, 98, 115, 116, 150, 162, 165, 176, 178, 180, 191, 194, 195, 196, 198, 200, 201, 202, 203, 205, 217, 218, 221, 222, 223, 224, 225, 229, 236, 237, 243, 250, 283], "solve_lin_si": [10, 203], "heurisch": [10, 83], "smith_normal_form": [10, 93, 194], "newmatrix": 10, "holonom": [10, 77, 80, 121, 122, 123, 124, 130, 132, 133, 261, 267, 268], "polymatrix": 10, "risch": [10, 83, 272], "broken": [10, 45, 56, 188, 205, 221, 246], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 68, 89, 92, 96, 115, 116, 117, 119, 129, 130, 181, 187, 195, 200, 205, 212, 215, 217, 221, 239, 240, 253, 259, 267], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 37, 110, 138, 200, 202, 236, 237, 239, 275, 276], "perhap": [10, 14, 38, 56, 86, 96, 155, 195, 223, 238, 271], "tableform": [10, 223, 246], "isn": [10, 20, 83, 110, 120, 224, 276], "advis": [10, 18, 26, 37, 114, 120], "usecas": 10, "unclear": [10, 18, 110], "line2dbaseseri": [10, 191], "linecollect": [10, 191], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 191], "get_point": [10, 191], "uniformli": [10, 16, 47, 72, 73, 99, 104, 191, 239], "adapt": [10, 104, 191, 211, 223, 243, 249], "get_data": [10, 191, 247], "dft": [10, 59, 109], "fourier": [10, 56, 64, 83, 109, 163, 209, 262], "as_explicit": [10, 89, 92, 109, 227], "exp": [10, 11, 12, 14, 18, 20, 24, 26, 30, 36, 38, 46, 55, 56, 58, 60, 61, 62, 64, 74, 75, 78, 81, 83, 87, 89, 92, 96, 108, 146, 149, 165, 171, 190, 195, 196, 201, 202, 205, 207, 212, 215, 217, 221, 222, 223, 224, 225, 226, 243, 260, 272, 276, 278, 283], "discret": [10, 36, 38, 39, 46, 48, 56, 57, 64, 96, 170, 175, 207, 210, 221, 223, 224, 262, 271], "unevalu": [10, 11, 18, 19, 20, 32, 33, 36, 48, 55, 56, 62, 64, 73, 83, 96, 106, 147, 151, 158, 159, 170, 201, 204, 212, 213, 217, 221, 223, 224, 225, 272, 276, 277, 283], "represent": [10, 11, 20, 23, 30, 37, 38, 39, 47, 50, 56, 57, 62, 64, 68, 76, 78, 80, 81, 83, 85, 86, 87, 88, 89, 95, 96, 103, 104, 109, 110, 111, 119, 130, 134, 135, 139, 159, 164, 165, 167, 168, 170, 172, 179, 185, 186, 188, 191, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 207, 215, 217, 218, 221, 224, 225, 230, 231, 246, 250, 253, 260, 268, 272, 274, 277], "21626": 10, "expos": [10, 37, 225], "mutat": [10, 106, 194, 196, 225], "flat": [10, 70, 87, 237], "todok": [10, 87], "ey": [10, 87, 88, 89, 90, 91, 92, 94, 194, 200, 226, 246, 278], "converg": [10, 38, 55, 60, 64, 83, 96, 139, 201, 208, 212, 215, 272], "legacy_matrix": [10, 83], "discontinu": [10, 36, 60, 62, 83, 99, 208, 223], "theano_cod": 10, "aesara_cod": [10, 205], "theanoprint": 10, "aesaraprint": [10, 205], "predic": [10, 11, 31, 32, 36, 98, 201, 217, 243, 262], "experienc": [10, 39], "big": [10, 12, 16, 18, 40, 56, 58, 96, 137, 150, 190, 204, 205, 212, 246, 272, 274], "registr": 10, "add_handl": 10, "remove_handl": [10, 31], "multipledispatch": [10, 31], "regist": [10, 31, 32, 33, 57, 166], "register_mani": [10, 32, 33], "askprimehandl": 10, "staticmethod": [10, 236], "register_handl": [10, 31], "prime": [10, 18, 31, 32, 33, 34, 47, 54, 55, 56, 57, 59, 61, 64, 96, 141, 192, 193, 195, 196, 198, 201, 215, 217, 218, 225, 240], "Not": [10, 11, 19, 20, 56, 61, 86, 106, 205, 224, 225, 243, 276, 283], "primepred": [10, 34], "q": [10, 11, 12, 15, 18, 29, 30, 31, 32, 33, 34, 35, 38, 48, 52, 55, 56, 57, 64, 73, 78, 79, 81, 83, 85, 87, 92, 98, 99, 106, 107, 114, 115, 116, 119, 120, 122, 124, 129, 131, 132, 133, 134, 137, 138, 139, 150, 164, 170, 173, 180, 181, 182, 184, 185, 186, 188, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 207, 215, 218, 221, 223, 225, 230, 231, 246, 250, 253, 254, 256, 259, 278, 282], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 225], "normaldistribut": [10, 225], "20078": 10, "misspel": 10, "absorbing_prob": [10, 225], "absorb": [10, 11, 81, 221, 225, 272], "probabilit": [10, 225], "shutil": 10, "power": [10, 12, 30, 35, 38, 46, 47, 48, 57, 59, 60, 62, 78, 79, 81, 83, 85, 87, 89, 96, 97, 106, 120, 137, 142, 153, 156, 169, 172, 175, 176, 180, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 209, 212, 214, 217, 218, 221, 223, 224, 225, 229, 238, 243, 262, 271, 272, 273, 274, 275, 277, 278, 281], "immut": [10, 11, 56, 88, 91, 94, 189, 196, 221, 226, 265, 271, 278], "coordsystem": [10, 58], "explicit": [10, 11, 18, 20, 23, 48, 55, 56, 60, 72, 73, 83, 95, 96, 119, 120, 124, 134, 138, 189, 192, 201, 204, 205, 207, 213, 215, 221, 222, 223, 224, 240], "appropi": 10, "patch": [10, 58, 205], "real": [10, 11, 12, 15, 16, 18, 19, 20, 23, 30, 32, 34, 35, 36, 38, 48, 56, 57, 58, 60, 61, 62, 63, 64, 68, 72, 73, 78, 81, 83, 86, 87, 89, 92, 96, 98, 102, 108, 120, 137, 139, 142, 143, 150, 168, 182, 190, 193, 196, 200, 201, 202, 205, 206, 208, 212, 213, 215, 217, 220, 221, 223, 224, 225, 230, 234, 238, 247, 276, 282, 283], "similarli": [10, 18, 52, 56, 57, 64, 68, 92, 99, 100, 106, 115, 135, 191, 192, 195, 200, 202, 212, 213, 215, 221, 236, 244, 255, 256, 278], "manifold": [10, 58], "track": [10, 12, 47, 56, 60, 64, 119, 131, 135, 154, 189, 212, 231, 272], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 58], "constructor": [10, 11, 20, 32, 33, 37, 38, 43, 47, 48, 49, 56, 63, 64, 85, 90, 92, 124, 163, 164, 168, 172, 191, 192, 194, 195, 196, 205, 213, 221, 230, 238, 254, 262, 273, 277], "str": [10, 11, 20, 32, 37, 38, 39, 48, 56, 57, 58, 60, 65, 66, 69, 72, 73, 84, 86, 89, 96, 98, 104, 114, 115, 117, 137, 154, 164, 170, 180, 182, 184, 191, 196, 200, 205, 217, 221, 225, 241, 243, 244, 246, 250], "unord": [10, 12, 56, 96, 196, 224, 243, 244], "lambidfi": 10, "guess": [10, 14, 37, 57, 60, 81, 84, 185, 198, 201, 215, 218, 277], "construct": [10, 16, 32, 33, 37, 38, 56, 58, 62, 64, 66, 70, 72, 84, 89, 92, 97, 100, 110, 111, 115, 117, 120, 122, 155, 159, 168, 169, 172, 176, 192, 195, 196, 198, 200, 201, 205, 218, 223, 225, 226, 230, 238, 240, 241, 254, 256, 257, 274, 277, 278, 282], "superclass": [10, 11, 18, 55, 56, 83, 89, 196], "scalar": [10, 24, 30, 56, 58, 71, 85, 87, 89, 92, 97, 117, 120, 169, 180, 181, 182, 187, 189, 192, 194, 198, 205, 221, 226, 238, 244, 250, 252, 253, 254, 255, 256, 258, 260, 265, 267], "boolean": [10, 11, 20, 21, 31, 32, 33, 34, 35, 36, 38, 56, 62, 66, 70, 71, 72, 73, 84, 87, 92, 93, 96, 99, 104, 106, 155, 180, 182, 185, 191, 194, 196, 198, 200, 202, 205, 217, 221, 223, 225, 243, 253, 278], "sens": [10, 11, 16, 18, 20, 30, 34, 36, 37, 56, 58, 61, 64, 81, 86, 115, 122, 175, 180, 189, 192, 198, 200, 214, 215, 217, 224, 225, 237, 238, 243, 259, 282], "exponenti": [10, 12, 18, 30, 38, 47, 52, 56, 57, 61, 83, 86, 87, 92, 96, 98, 156, 172, 202, 217, 221, 224, 225, 273, 274, 278], "trick": [10, 11, 12, 52, 215, 231], "treat": [10, 11, 18, 19, 20, 25, 46, 47, 54, 56, 61, 64, 71, 72, 92, 98, 117, 120, 143, 180, 186, 193, 195, 196, 198, 200, 201, 202, 204, 205, 212, 213, 215, 217, 218, 221, 223, 229, 237, 240, 257, 274, 278], "cdot": [10, 18, 39, 55, 61, 64, 74, 78, 79, 81, 87, 89, 92, 96, 107, 109, 135, 175, 186, 188, 189, 190, 192, 193, 201, 208, 212, 215, 221, 223, 226, 227, 256, 257, 276, 277, 282], "attributeerror": [10, 18, 56, 92, 224, 244, 278], "as_coeff_mul": [10, 56, 81, 89], "tri": [10, 11, 12, 18, 23, 37, 56, 64, 72, 81, 83, 122, 134, 165, 192, 193, 200, 205, 207, 217, 221, 222, 224, 236, 274, 282], "benchmark": [10, 122, 136], "runtest": [10, 236], "tmpfile": 10, "random_complex_numb": [10, 56], "verify_numer": [10, 56], "test_derivative_numer": [10, 56], "_randrang": [10, 56, 57], "_randint": [10, 56, 198], "as_poli": [10, 56, 193, 201], "as_expr": [10, 56, 92, 195, 200, 201, 202, 278], "combintor": 10, "perm_cycl": [10, 48, 205], "printer": [10, 11, 20, 48, 56, 64, 84, 92, 97, 185, 230, 237, 238, 244, 273, 277], "init_print": [10, 28, 38, 48, 60, 83, 84, 92, 100, 185, 192, 193, 204, 272, 276, 278, 281, 282, 283], "problemat": [10, 20, 195], "affect": [10, 18, 20, 55, 56, 92, 179, 201, 223, 224, 255], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 60], "significantli": [10, 38, 60, 110, 132, 196, 207, 237, 240], "slower": [10, 20, 52, 92, 195, 200, 244, 271], "_sympifi": [10, 56, 89, 277], "strict": [10, 11, 47, 48, 56, 60, 61, 87, 92, 198, 201, 223, 224, 243, 246, 282], "lot": [10, 47, 56, 74, 81, 83, 92, 120, 137, 191, 204, 208, 218, 224, 236, 282], "secur": 10, "whatev": [10, 12, 20, 47, 56, 57, 217, 221, 222, 224, 244], "__repr__": [10, 205], "12524": 10, "repr": [10, 38, 83, 164, 195, 200, 205, 236, 281], "plenti": 10, "_sympy_": [10, 56], "disabl": [10, 11, 56, 57, 81, 83, 96, 198, 201, 205, 213, 221, 223, 234, 236, 239, 243], "constant": [10, 11, 25, 36, 38, 55, 56, 60, 62, 64, 80, 81, 83, 99, 100, 106, 119, 120, 122, 137, 138, 147, 151, 157, 173, 174, 176, 177, 178, 181, 184, 186, 191, 193, 196, 198, 200, 201, 202, 205, 207, 212, 215, 217, 218, 221, 222, 223, 224, 225, 236, 238, 243, 244, 253, 257, 260, 267, 272, 278, 283], "lh": [10, 14, 38, 46, 56, 203, 205, 221, 223, 224, 256], "tensexpr": [10, 107, 231], "substitute_indic": 10, "danger": [10, 193], "tensor_head": [10, 107, 231], "shorter": [10, 26, 56, 66, 110, 132, 179, 192, 196, 205, 238, 246], "creation": [10, 12, 20, 56, 58, 92, 111, 117, 127, 130, 131, 132, 133, 134, 144, 154, 158, 159, 160, 170, 188, 189, 205, 225, 230, 238, 244], "_dummy_fmt": 10, "l_": [10, 83, 92, 190], "obsolet": 10, "dummy_nam": [10, 231], "clearer": [10, 254], "metric_symmetri": [10, 231], "set_metr": [10, 231], "delta": [10, 12, 38, 40, 50, 61, 79, 81, 85, 104, 134, 142, 170, 190, 205, 212, 218, 221, 225, 226, 231], "epsilon": [10, 12, 55, 57, 64, 81, 83, 141, 205, 231], "latter": [10, 15, 20, 38, 47, 56, 61, 64, 81, 96, 192, 196, 200, 205, 215, 218, 231, 238, 243, 244, 274], "involv": [10, 12, 16, 18, 23, 33, 35, 47, 55, 56, 57, 61, 68, 69, 81, 83, 96, 106, 111, 115, 120, 149, 159, 165, 167, 177, 188, 189, 192, 193, 196, 198, 200, 201, 202, 206, 207, 212, 213, 214, 215, 217, 218, 221, 223, 226, 244, 282], "obscur": [10, 18], "young": [10, 99, 231], "tableau": 10, "favor": 10, "tensorindex": [10, 231], "tensor_indic": [10, 107, 231], "denot": [10, 11, 12, 16, 47, 48, 56, 58, 64, 78, 79, 81, 83, 85, 86, 87, 92, 96, 98, 106, 175, 180, 186, 191, 192, 193, 198, 200, 208, 212, 213, 215, 221, 225, 230, 231, 250, 252, 254, 255, 257, 259], "set_dimens": 10, "unit_system": [10, 177], "set_quantity_dimens": [10, 173], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 173], "set_global_relative_scale_factor": [10, 177], "get_dimensional_expr": 10, "unitsystem": [10, 178], "dimension": [10, 36, 38, 40, 58, 68, 69, 70, 71, 72, 89, 92, 100, 107, 137, 144, 146, 156, 172, 186, 187, 191, 192, 198, 200, 201, 204, 205, 223, 224, 226, 227, 231, 237, 259, 283], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 27, 201], "emptyset": [10, 18, 23, 36, 37, 86, 205, 213, 224, 250, 283], "is_empti": [10, 18, 48], "unknown": [10, 11, 15, 18, 19, 20, 25, 30, 56, 57, 100, 155, 203, 220, 221, 222, 223, 224, 243, 283], "empti": [10, 11, 18, 23, 25, 32, 36, 37, 38, 39, 47, 51, 55, 56, 68, 71, 72, 73, 86, 87, 92, 96, 115, 134, 165, 178, 196, 200, 201, 205, 211, 212, 213, 215, 221, 223, 224, 236, 238, 243, 246, 277], "individu": [10, 18, 20, 56, 62, 67, 72, 73, 85, 87, 89, 92, 106, 135, 142, 160, 164, 190, 213, 221, 236, 278], "denest": [10, 56, 201, 217, 223, 243], "particl": [10, 111, 113, 114, 115, 120, 124, 125, 130, 132, 134, 137, 138, 146, 149, 156, 157, 168, 170, 173, 175, 188, 231, 267], "rigidbodi": [10, 111, 113, 115, 119, 122, 127, 128, 129, 130, 135, 137, 267], "potential_energi": [10, 114, 115, 117, 129, 135], "energi": [10, 108, 111, 115, 117, 120, 129, 146, 171, 175, 186, 231, 257, 267], "setter": [10, 120, 137], "getter": [10, 56, 120, 137], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 23, 38, 47, 48, 56, 68, 72, 83, 92, 96, 99, 106, 115, 119, 134, 135, 138, 158, 159, 175, 180, 190, 192, 198, 200, 203, 205, 222, 224, 225, 229, 236, 238, 260, 272], "unpack": [10, 56, 87, 92, 243, 244], "emul": [10, 217, 224, 226, 244], "is_deriv": [10, 56], "as_finite_differ": [10, 36, 56, 272], "17881": 10, "get_matrix": [10, 231], "__getitem__": [10, 56, 87, 230], "__iter__": [10, 48, 56, 217], "_components_data_full_destroi": 10, "__pow__": [10, 87, 196, 202], "flaw": 10, "replace_with_arrai": [10, 231, 232], "cach": [10, 18, 61, 81, 192, 201, 205, 234, 239, 240], "safe": [10, 56, 96, 195, 201, 223, 229, 272], "squar": [10, 12, 18, 23, 26, 30, 34, 38, 47, 56, 57, 62, 72, 73, 81, 83, 87, 88, 92, 95, 96, 99, 106, 108, 132, 133, 156, 172, 180, 190, 194, 196, 198, 200, 201, 202, 205, 213, 217, 218, 221, 224, 225, 276], "jordan": [10, 81, 87, 92, 203, 221, 223, 224], "band": [10, 87, 95], "eigenvalu": [10, 87, 92, 120, 122, 164, 167, 276], "elif": [10, 18, 19, 20, 62], "getsourc": [10, 244, 248], "sum": [10, 16, 18, 38, 45, 48, 55, 56, 59, 61, 64, 69, 71, 79, 81, 83, 85, 86, 87, 89, 92, 96, 102, 117, 132, 149, 153, 156, 164, 167, 169, 170, 190, 192, 193, 195, 196, 200, 201, 202, 205, 207, 208, 210, 212, 214, 215, 217, 218, 221, 223, 224, 225, 226, 227, 229, 231, 240, 243, 282], "meter": [10, 99, 100, 141, 144, 173, 175, 176, 177], "si": [10, 20, 64, 80, 81, 143, 172, 173, 175, 176, 177, 205], "cg": [10, 149, 167], "aris": [10, 18, 19, 56, 61, 81, 83, 167, 189, 195, 200], "scale": [10, 65, 66, 67, 71, 72, 73, 84, 99, 150, 171, 173, 175, 177, 178, 185, 189, 191, 201, 208, 225, 257, 259], "kilomet": [10, 176, 177], "1000": [10, 12, 38, 40, 56, 57, 60, 89, 96, 137, 175, 176, 177, 190, 204, 205, 214], "dimensionsystem": [10, 172], "14318": 10, "duplic": [10, 12, 47, 50, 57, 62, 64, 92, 96, 213, 221, 243, 275], "flatten": [10, 37, 56, 195, 227, 232, 243, 244], "neither": [10, 18, 19, 34, 56, 144, 165, 191, 201, 212, 213, 214, 221, 231, 244, 250, 259, 282], "polymorph": 10, "anymor": [10, 191], "temporarili": [10, 56], "point3d": [10, 69, 70, 71, 143], "p1": [10, 39, 47, 48, 52, 55, 66, 68, 69, 70, 71, 72, 99, 106, 111, 114, 124, 137, 139, 184, 191, 195, 196, 198, 202, 214, 225, 226], "p2": [10, 19, 47, 48, 55, 66, 68, 69, 70, 71, 72, 99, 106, 111, 114, 137, 184, 191, 195, 196, 198, 202, 214, 225], "conflict": [10, 62, 96, 106, 120, 238], "throughout": [11, 81, 86, 198, 208, 224, 274], "elsewher": [11, 18, 61, 85, 122, 194, 236], "termnam": 11, "antideriv": [11, 62, 64, 83, 221, 272], "frac": [11, 16, 18, 20, 36, 55, 56, 57, 58, 61, 62, 64, 81, 83, 92, 96, 98, 106, 124, 135, 173, 185, 186, 188, 189, 190, 194, 198, 201, 205, 207, 208, 212, 215, 218, 221, 222, 224, 225, 226, 243, 257, 259, 272, 276, 277, 281, 282], "indefinit": [11, 30, 62, 80, 81, 83, 92, 196, 198, 199, 201, 210, 272], "integr": [11, 12, 15, 22, 28, 30, 36, 48, 55, 56, 58, 61, 62, 74, 75, 76, 79, 85, 87, 92, 95, 96, 106, 108, 115, 120, 130, 137, 156, 165, 168, 171, 174, 179, 181, 186, 190, 192, 195, 196, 198, 201, 202, 205, 207, 208, 215, 221, 222, 225, 238, 246, 250, 253, 254, 257, 258, 262, 265, 273, 276, 281], "primit": [11, 47, 56, 57, 64, 96, 164, 168, 192, 193, 195, 196, 198, 200, 201, 204, 205, 218, 272], "terminologi": [11, 22, 231], "tupl": [11, 20, 24, 25, 30, 32, 33, 36, 37, 38, 39, 47, 48, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 78, 81, 83, 87, 92, 95, 96, 98, 99, 100, 104, 111, 114, 115, 117, 119, 132, 133, 135, 137, 139, 154, 155, 156, 159, 164, 167, 168, 169, 170, 180, 184, 189, 191, 192, 194, 195, 196, 198, 202, 203, 205, 206, 207, 211, 213, 217, 218, 221, 222, 223, 224, 225, 226, 230, 231, 236, 237, 238, 239, 243, 244, 246, 250, 254, 272, 277, 278, 281], "subexpress": [11, 20, 38, 56, 62, 87, 110, 112, 200, 201, 205, 212, 217, 224, 238, 244, 271], "togeth": [11, 12, 16, 38, 47, 56, 60, 85, 92, 96, 130, 156, 167, 175, 189, 192, 196, 198, 200, 201, 204, 205, 217, 221, 223, 225, 236, 237, 243, 276, 282], "walk": [11, 38, 40, 56, 162, 165, 215], "extract": [11, 23, 25, 26, 36, 56, 83, 87, 89, 92, 96, 107, 122, 130, 179, 189, 198, 200, 201, 223, 224, 225, 236, 238, 243], "rebuilt": [11, 277], "atom": [11, 38, 48, 56, 83, 86, 87, 108, 171, 195, 202, 205, 223, 224, 230], "queri": [11, 18, 19, 20, 31, 34, 35, 36, 38, 56, 68, 201, 217, 225], "is_real": [11, 18, 20, 23, 56, 58, 62, 63, 92, 182, 205, 230], "restrict": [11, 18, 20, 38, 45, 56, 57, 64, 92, 99, 100, 170, 192, 195, 200, 202, 220], "never": [11, 18, 20, 56, 62, 83, 172, 201, 202, 205, 213, 223, 225, 234, 254, 274, 275], "is_": [11, 20, 56], "leav": [11, 18, 20, 24, 25, 38, 56, 83, 92, 96, 116, 130, 154, 170, 212, 240, 271, 277, 282], "recurs": [11, 12, 15, 18, 20, 36, 56, 61, 81, 83, 86, 87, 96, 122, 191, 198, 201, 202, 205, 206, 210, 212, 217, 223, 224, 229, 234, 236, 240, 241, 243, 273, 282], "canonic": [11, 43, 56, 214, 231, 262], "excess": 11, "discourag": [11, 18, 56, 217], "expens": [11, 20, 56, 134, 214, 221, 222, 223, 239, 278], "matrix": [11, 15, 16, 18, 22, 24, 25, 30, 38, 45, 48, 56, 57, 58, 64, 71, 81, 83, 85, 87, 88, 90, 91, 94, 95, 97, 98, 106, 107, 109, 111, 114, 115, 116, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 137, 138, 139, 142, 143, 145, 153, 154, 159, 164, 165, 167, 169, 170, 172, 175, 179, 180, 189, 190, 192, 194, 198, 200, 203, 205, 206, 213, 215, 217, 218, 221, 223, 224, 226, 227, 229, 230, 231, 232, 237, 238, 243, 244, 246, 250, 252, 253, 255, 259, 265, 273, 276, 277, 282, 283], "sympifi": [11, 12, 18, 19, 38, 60, 66, 86, 135, 143, 168, 170, 180, 181, 195, 196, 271, 277], "bound": [11, 34, 38, 39, 55, 56, 65, 66, 67, 69, 71, 72, 83, 96, 168, 196, 198, 200, 201, 205, 211, 221, 223, 224, 225, 230, 240, 246, 250], "dummi": [11, 38, 52, 55, 56, 62, 81, 83, 92, 120, 137, 165, 170, 195, 196, 200, 201, 202, 211, 212, 213, 215, 217, 221, 224, 229, 231, 234, 238, 243, 244], "ration": [11, 18, 20, 31, 33, 34, 36, 38, 55, 56, 60, 61, 62, 64, 66, 69, 71, 73, 77, 81, 83, 84, 89, 92, 96, 98, 106, 139, 172, 190, 193, 198, 199, 200, 202, 205, 210, 213, 214, 215, 217, 218, 220, 223, 224, 225, 243, 250, 273, 274, 277, 281], "unequ": [11, 12, 14, 56, 99, 205], "accident": 11, "clash": [11, 29, 56, 92], "contrast": [11, 20, 55, 56, 124, 195, 215, 221, 276], "_eval_": 11, "_eval_deriv": [11, 20, 56, 64], "overrid": [11, 12, 38, 56, 65, 66, 72, 98, 168, 205, 230, 237, 238, 243, 244], "pre": [11, 37, 38, 56, 190, 191, 206, 214, 217, 223, 224, 236, 255, 259, 277], "dispatch": [11, 32, 33, 34, 56, 57, 165, 205, 224, 240], "shorthand": [11, 12, 18, 20, 56, 86, 164, 200, 213, 234], "stand": [11, 55, 56, 137, 193, 195, 196, 202], "reserv": [11, 18, 120, 231, 238, 278], "smaller": [11, 38, 47, 48, 56, 57, 61, 64, 72, 83, 89, 96, 132, 193, 195, 198, 201, 208, 214, 215, 223, 243, 271, 282], "children": [11, 56, 57, 195, 240], "leaf": [11, 195, 205, 214, 277], "strictli": [11, 12, 15, 17, 18, 34, 36, 56, 64, 92, 96, 106, 198, 217, 223], "dag": 11, "map": [11, 18, 20, 36, 37, 38, 46, 47, 48, 56, 57, 68, 72, 79, 81, 83, 86, 87, 96, 104, 115, 124, 148, 159, 160, 165, 180, 189, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 212, 217, 221, 222, 223, 224, 225, 229, 230, 237, 240, 243, 244, 246, 250], "colloqui": [11, 22], "lambda": [11, 12, 20, 24, 32, 33, 36, 38, 47, 48, 56, 57, 58, 62, 83, 87, 88, 89, 92, 95, 96, 98, 120, 133, 134, 137, 138, 155, 191, 198, 200, 201, 205, 206, 213, 214, 217, 221, 223, 224, 225, 226, 234, 243, 244, 250, 252, 255, 271, 278], "hyper": [11, 56, 61, 64, 75, 78, 205, 207, 215, 217, 223, 225, 282], "primepi": [11, 20, 96], "divisor_sigma": [11, 96], "undefin": [11, 20, 23, 32, 33, 36, 56, 62, 63, 64, 83, 89, 98, 111, 189, 200, 211, 212, 215, 244, 272, 283], "interchang": [11, 52, 55, 81, 221], "memori": [11, 38, 56, 96, 201, 226, 237, 240], "maintain": [11, 12, 56, 57, 96, 100, 205, 213, 214, 221, 224, 240], "mental": 11, "hidden": [11, 179], "state": [11, 16, 18, 47, 54, 56, 64, 96, 99, 106, 108, 114, 115, 116, 119, 122, 124, 138, 142, 146, 147, 149, 150, 151, 153, 154, 155, 159, 162, 164, 165, 166, 167, 169, 170, 201, 205, 214, 215, 217, 225, 240, 267, 278], "hashabl": [11, 53, 81, 243], "repl": [11, 231], "intermedi": [11, 38, 39, 79, 87, 114, 120, 122, 127, 131, 154, 164, 172, 173, 180, 184, 188, 224, 238, 279], "execut": [11, 18, 28, 38, 84, 87, 137, 191, 205, 221, 224, 234, 236, 238, 239, 244, 246, 249, 261, 276, 281], "idiom": [11, 247, 274, 275], "anti": [11, 30, 34, 52, 62, 83, 87, 142, 147, 231], "frown": 11, "upon": [11, 18, 38, 56, 96, 119, 122, 132, 133, 134, 137, 164, 170, 186, 188, 189, 213, 221, 230, 237, 257, 282], "lowercas": [11, 12, 221, 236, 272], "is_integ": [11, 18, 20, 56, 182, 205, 230], "capit": [11, 55, 57, 106, 221], "wherea": [11, 16, 18, 34, 38, 57, 66, 72, 81, 86, 106, 175, 192, 195, 201, 205, 223, 224, 243, 282], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 56, 60, 64, 89, 96, 120, 137, 204, 212, 215, 217, 224, 239, 255], "isinst": [11, 15, 18, 20, 38, 56, 87, 89, 106, 195, 196, 205, 206, 217, 226, 229, 238, 277], "ship": [11, 97], "session": [11, 29, 38, 56, 68, 83, 185, 189, 195, 241, 274, 281], "sort": [11, 32, 33, 37, 38, 45, 48, 52, 81, 83, 86, 92, 95, 96, 107, 110, 115, 154, 170, 175, 179, 191, 198, 201, 202, 212, 217, 218, 221, 222, 223, 229, 231, 236, 238, 243, 254, 274, 276, 277], "numberkind": [11, 15, 56, 87, 213], "matrixkind": [11, 15, 56, 87, 213], "booleankind": [11, 56], "ring": [11, 59, 79, 92, 93, 188, 193, 194, 198, 200, 201, 202, 203, 204, 205, 243], "classif": [11, 17, 56, 221, 222], "lamda": [11, 89, 205, 213, 225, 278], "\u03bb": [11, 278], "lambdifi": [11, 20, 24, 38, 64, 122, 205, 223, 237, 242, 269, 273], "matrixexpr": [11, 20, 87, 89, 90], "mutabl": [11, 12, 39, 56, 88, 89, 90, 99, 196, 205, 206, 217, 226, 278], "dens": [11, 87, 89, 91, 92, 194, 200, 201, 226, 265, 277], "underli": [11, 38, 48, 54, 56, 85, 92, 104, 120, 165, 178, 223, 224, 225], "quit": [11, 16, 20, 64, 92, 96, 122, 188, 191, 202, 204, 215, 223, 243, 259, 274, 277], "rung": [11, 36, 78], "kutta": [11, 78], "condit": [11, 18, 19, 38, 47, 56, 58, 62, 64, 74, 75, 78, 79, 80, 83, 86, 92, 96, 98, 99, 100, 102, 106, 112, 116, 122, 130, 134, 137, 139, 184, 190, 202, 205, 208, 215, 218, 220, 221, 223, 224, 225, 230, 282], "loss": [11, 38, 81, 170, 237, 256], "stabil": [11, 47, 52, 54, 60, 106, 134, 229], "focus": [11, 24, 198, 223, 224, 283], "is_numb": [11, 18, 56, 64, 83], "infin": [11, 18, 34, 55, 56, 61, 62, 64, 69, 81, 83, 92, 143, 196, 198, 201, 205, 210, 211, 212, 213, 217, 220, 221, 225], "resembl": [11, 58, 64, 83, 230], "zoo": [11, 14, 18, 34, 56, 61, 62, 64, 83, 212, 214, 217], "data": [11, 16, 38, 47, 56, 57, 64, 83, 92, 97, 104, 115, 149, 191, 192, 195, 196, 198, 201, 202, 205, 217, 230, 231, 236, 238, 240, 243, 247], "effici": [11, 16, 18, 36, 38, 40, 47, 52, 56, 59, 60, 61, 72, 73, 89, 92, 96, 97, 106, 114, 115, 137, 190, 193, 194, 195, 196, 198, 201, 202, 203, 204, 217, 218, 223, 237, 244, 271, 277, 278, 282], "act": [11, 37, 46, 47, 48, 52, 56, 64, 72, 85, 86, 92, 99, 102, 111, 114, 119, 120, 125, 133, 142, 154, 159, 162, 163, 213, 224, 226, 255, 259, 271], "pprint": [11, 12, 20, 23, 36, 37, 58, 64, 83, 92, 96, 106, 142, 190, 205, 206, 213, 217, 221, 222, 224, 225, 243, 281], "inequ": [11, 18, 19, 20, 22, 56, 191, 198, 213, 215, 219, 262], "neq": [11, 20, 56, 62, 64, 81, 83, 87, 175, 189, 190, 198, 201, 218, 221, 223, 282], "ne": [11, 14, 18, 56, 57, 61, 62, 69, 81, 96, 193, 195, 198, 215, 221, 225], "hold": [11, 12, 20, 33, 37, 47, 52, 56, 57, 58, 62, 64, 78, 81, 92, 95, 98, 106, 108, 114, 116, 117, 135, 166, 201, 215, 217, 221, 225, 238, 282], "singleton": [11, 48, 86, 224, 277], "gotcha": [11, 13, 56, 189, 244, 275, 283], "somehow": [11, 20], "simpler": [11, 19, 20, 56, 60, 64, 80, 81, 127, 189, 198, 214, 215, 217, 221, 223, 224, 282], "adject": [11, 225], "heurist": [11, 18, 48, 81, 83, 87, 198, 199, 212, 214, 217, 223, 224, 236, 272, 282], "appar": [11, 12, 56, 246, 282], "commut": [11, 18, 30, 34, 37, 47, 48, 52, 56, 58, 79, 83, 92, 147, 154, 157, 158, 159, 169, 170, 175, 182, 189, 193, 196, 197, 198, 199, 201, 205, 212, 213, 215, 221, 231, 267, 268, 277], "law": [11, 37, 130, 173, 189, 193], "xreplac": [11, 56, 87, 92, 180], "knowledg": [11, 55, 56, 57, 200, 221, 277, 280], "round": [11, 20, 24, 36, 38, 56, 60, 61, 62, 92, 143, 200, 201, 212, 214, 225], "analyt": [11, 28, 61, 64, 81, 92, 130, 221, 272], "implicitli": [11, 18, 19, 20, 48, 56, 83, 192, 195, 223], "independ": [11, 12, 20, 34, 36, 38, 47, 55, 56, 58, 64, 73, 81, 83, 85, 92, 106, 115, 116, 120, 122, 124, 132, 134, 168, 175, 186, 191, 193, 195, 200, 201, 207, 208, 215, 217, 218, 221, 222, 223, 224, 225, 231, 236, 237, 257, 276, 277], "nativ": [11, 56, 106, 196, 201, 236], "parsabl": 11, "iter": [11, 23, 26, 36, 38, 45, 47, 48, 51, 52, 56, 57, 58, 59, 61, 64, 72, 86, 96, 111, 112, 114, 115, 116, 119, 134, 138, 155, 170, 184, 191, 192, 193, 194, 196, 198, 201, 205, 206, 207, 208, 211, 217, 218, 221, 223, 224, 225, 226, 229, 237, 238, 239, 240, 242, 244, 250, 255, 269], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 36, 59, 86, 198], "One": [11, 12, 15, 18, 20, 36, 37, 38, 46, 48, 55, 56, 61, 62, 64, 75, 78, 80, 81, 83, 86, 92, 96, 99, 100, 120, 135, 137, 146, 175, 196, 198, 199, 201, 204, 207, 213, 217, 223, 224, 225, 226, 231, 244, 257, 271, 272, 274, 277, 278, 282], "care": [11, 12, 19, 20, 47, 56, 64, 83, 86, 92, 99, 110, 120, 134, 180, 189, 195, 200, 217, 218, 221, 223, 224, 229, 232, 237, 271, 274, 276], "falsi": 11, "is_posit": [11, 18, 19, 20, 56, 182, 196], "unevaluatedexpr": [11, 56, 205, 277], "surpris": [11, 18, 224], "north": 11, "riemann": [11, 58, 61, 62, 81, 192, 217, 231], "sphere": [11, 142, 250, 260], "behav": [12, 34, 36, 56, 57, 62, 64, 96, 201, 213, 217, 223, 226, 232, 278], "mapl": [12, 83, 221, 276], "mathematica": [12, 38, 48, 98, 276, 278], "faq": 12, "introductori": [12, 16, 27, 28, 137, 195, 196, 201], "remaind": [12, 55, 56, 57, 96, 193, 195, 196, 199, 201, 221], "familiar": [12, 20, 83, 120, 135, 154, 202, 272, 274, 280], "java": 12, "minut": [12, 110, 122, 179], "subtract": [12, 23, 38, 48, 56, 60, 71, 96, 106, 114, 172, 193, 194, 195, 196, 198, 200, 201, 277, 282], "proper": [12, 47, 56, 83, 96, 110, 120, 179, 195, 196, 200, 205, 213, 221, 226, 237, 238, 257, 278], "trigsimp": [12, 30, 56, 92, 114, 120, 128, 180, 214, 217, 254], "fill": [12, 17, 47, 57, 87, 89, 92, 95, 170, 191, 236, 239, 243, 246, 278], "alter": [12, 39, 47, 56, 180, 195, 205, 207, 224], "afterward": [12, 38, 56, 117, 124], "quantiti": [12, 48, 56, 61, 64, 68, 73, 100, 110, 115, 128, 135, 149, 172, 174, 178, 186, 188, 189, 200, 217, 225, 254, 259, 267], "simultan": [12, 56, 62, 69, 87, 96, 191, 214], "var": [12, 36, 38, 55, 56, 60, 61, 79, 83, 86, 92, 106, 180, 191, 200, 204, 205, 217, 218, 244, 283], "rate": [12, 122, 188, 225, 257, 272], "short_lif": 12, "haven": 12, "160": [12, 99, 199], "ctimesd": 12, "circular": [12, 18, 104, 142, 198], "relationship": [12, 14, 18, 38, 56, 61, 63, 83, 96, 131, 154, 180, 186, 189, 195, 223], "runtimeerror": [12, 36, 213, 224, 243], "compileflag": [12, 236], "glob": [12, 236], "exceed": [12, 122], "stdin": [12, 239, 241], "nameerror": [12, 84, 239, 274], "__future__": [12, 16, 274, 281], "divis": [12, 20, 56, 92, 96, 172, 192, 195, 196, 197, 198, 201, 203, 205, 218, 221, 223, 236, 244, 274, 277, 281], "cl": [12, 18, 20, 38, 47, 56, 83, 87, 170, 184, 196, 200, 221, 230, 239, 243, 256, 272, 281, 283], "dir": [12, 56, 99, 207, 212, 243], "__builtins__": 12, "__file__": [12, 247], "__name__": [12, 205, 247], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 64, 81, 142, 205, 215, 221, 225, 231], "eta": [12, 64, 81, 200, 205, 221, 222, 225], "iota": [12, 205], "kappa": [12, 190, 205, 225], "mu": [12, 64, 81, 96, 107, 109, 141, 205, 225, 231], "omega": [12, 38, 39, 47, 81, 96, 111, 117, 119, 135, 138, 144, 146, 171, 180, 184, 185, 188, 190, 205, 212, 225], "omicron": [12, 205], "phi": [12, 47, 56, 57, 61, 64, 81, 85, 92, 96, 108, 137, 144, 153, 155, 190, 192, 200, 205, 221, 250, 260], "psi": [12, 61, 64, 81, 142, 153, 154, 160, 168, 200, 205, 231], "rho": [12, 58, 81, 92, 96, 123, 164, 205, 225, 231, 260], "sigma": [12, 48, 79, 81, 87, 92, 205, 208, 225], "tau": [12, 38, 81, 83, 92, 200, 205, 221], "theta": [12, 56, 58, 62, 64, 81, 84, 92, 98, 108, 119, 138, 142, 180, 189, 190, 196, 200, 205, 208, 213, 224, 225, 250, 252, 255, 257, 260], "upsilon": [12, 205], "xi": [12, 20, 58, 81, 205, 221, 222, 223], "lastli": [12, 83, 100, 138, 221], "unit": [12, 20, 30, 34, 37, 56, 57, 61, 69, 70, 71, 83, 92, 96, 99, 104, 106, 108, 109, 114, 120, 135, 137, 146, 171, 172, 173, 177, 179, 180, 186, 189, 191, 193, 196, 198, 200, 201, 203, 205, 213, 215, 218, 224, 226, 250, 252, 254, 259, 260, 267], "mnemon": [12, 214, 243], "osineq": 12, "reimport": 12, "restor": [12, 195, 217], "__": [12, 64, 83, 205, 225, 230], "press": [12, 37, 39, 40, 48, 57, 83, 87, 190, 199, 218, 223], "autocomplet": 12, "lose": [12, 192], "abil": [12, 18, 36, 92, 130, 200, 204, 221, 224, 276, 282], "past": [12, 62, 96, 204, 205, 281], "f1": [12, 24, 47, 81, 83, 92, 106, 111, 120, 128, 137, 191, 196, 198, 201, 205, 207, 223], "f2": [12, 24, 56, 81, 92, 106, 111, 120, 128, 137, 173, 191, 198, 201, 205, 207, 223], "6": [12, 14, 16, 25, 26, 30, 32, 33, 36, 38, 39, 40, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 70, 71, 72, 78, 79, 81, 83, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 102, 104, 106, 107, 108, 122, 123, 127, 128, 129, 139, 143, 149, 167, 179, 180, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 207, 210, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 236, 237, 240, 243, 244, 250, 253, 255, 260, 272, 278, 282, 283], "accuraci": [12, 16, 36, 56, 201, 278], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 56, 277], "reus": [12, 20, 38, 170, 276], "142857142857143": 12, "receiv": [12, 26, 56, 57, 96, 111, 165, 200, 230], "fraction": [12, 56, 57, 60, 62, 72, 83, 92, 96, 112, 176, 195, 196, 198, 199, 202, 205, 207, 217, 218, 221, 223, 273], "interpret": [12, 19, 26, 38, 47, 55, 56, 61, 62, 64, 69, 72, 83, 87, 89, 92, 96, 98, 110, 175, 191, 193, 200, 201, 205, 212, 218, 223, 224, 225, 230, 236, 237, 240, 246, 278], "100": [12, 20, 38, 40, 45, 55, 56, 57, 60, 64, 72, 79, 86, 87, 92, 96, 99, 191, 195, 200, 202, 204, 205, 212, 223, 224, 243, 271], "000000000000": 12, "00": [12, 56, 96, 154, 164, 218, 243], "null": [12, 56, 92], "34": [12, 38, 48, 61, 69, 92, 96, 111, 152, 199, 204, 211, 217, 218], "3400000000000": 12, "250": [12, 96, 218], "143": [12, 149, 190], "next": [12, 16, 18, 20, 29, 38, 39, 40, 45, 47, 48, 50, 51, 56, 57, 62, 81, 83, 86, 92, 96, 110, 111, 115, 123, 124, 125, 127, 129, 130, 131, 138, 188, 189, 192, 196, 200, 201, 205, 213, 215, 218, 221, 240, 241, 243, 275, 276, 277], "binari": [12, 19, 20, 34, 38, 40, 51, 56, 57, 83, 86, 96, 97, 164, 176, 192, 195, 201, 218, 237, 240, 243], "decim": [12, 20, 38, 56, 59, 60, 96, 98, 104, 195, 201, 276], "far": [12, 37, 56, 70, 83, 190, 192, 195, 205, 215, 244, 271, 272, 274], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 41, 47, 58, 86, 96, 124, 192, 193, 198, 225], "pad": [12, 38, 57, 58, 59, 71, 96], "inexact": [12, 26, 56, 196], "low": [12, 18, 19, 38, 56, 57, 64, 96, 195, 198, 203, 205, 217, 237, 238, 243], "higher": [12, 16, 36, 38, 56, 58, 60, 64, 67, 92, 184, 190, 192, 195, 198, 201, 207, 208, 212, 214, 217, 221, 223, 226, 244, 272], "engin": [12, 102, 136, 137, 187, 221, 281], "increas": [12, 36, 37, 48, 54, 55, 56, 59, 60, 64, 87, 96, 97, 110, 121, 154, 179, 180, 182, 188, 189, 195, 198, 200, 201, 207, 210, 214, 221, 225, 241, 243], "2000061035": 12, "highest": [12, 38, 50, 85, 110, 192, 201, 208, 218, 221], "hopefulli": [12, 17, 81], "unsimplifi": [12, 214], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 35, 38, 39, 55, 56, 57, 60, 61, 62, 64, 68, 79, 81, 86, 87, 92, 102, 108, 137, 170, 193, 196, 200, 201, 205, 218, 220, 223, 224, 225, 231, 240, 243, 246, 256, 282], "gave": [12, 56, 243], "gain": [12, 57, 106, 132, 133, 137], "impress": 12, "91": [12, 39, 199, 204, 211, 225], "compar": [12, 18, 26, 36, 38, 48, 53, 56, 61, 62, 73, 86, 92, 96, 97, 122, 149, 173, 177, 195, 198, 201, 202, 205, 210, 212, 217, 221, 224, 226, 230, 236, 243, 274, 277, 282], "4e": [12, 223], "nearli": [12, 96, 214], "snippet": [12, 38], "expr_modifi": 12, "__main__": [12, 38, 278], "declar": [12, 18, 23, 38, 69, 81, 92, 98, 107, 120, 122, 137, 149, 194, 205, 212, 215, 220, 221, 222, 225, 238], "asid": [12, 86, 221, 222, 276], "2x": [12, 56, 64, 81, 98, 217, 218, 224, 225, 271, 274, 282], "syntaxerror": [12, 98], "asin": [12, 62, 64, 70, 202, 205, 215, 217, 221, 225, 282], "arcsin": [12, 62, 202, 205, 225], "arcco": [12, 62, 205], "root": [12, 18, 20, 22, 23, 26, 36, 38, 55, 56, 57, 62, 64, 78, 79, 80, 81, 83, 85, 88, 92, 96, 137, 175, 190, 192, 193, 196, 200, 202, 204, 205, 215, 217, 221, 223, 224, 225, 236, 240, 243, 276, 278, 281, 283], "expon": [12, 26, 35, 38, 56, 57, 62, 63, 64, 81, 83, 89, 96, 104, 106, 176, 193, 194, 195, 201, 202, 205, 214, 217, 221, 224, 229, 240, 282], "half": [12, 20, 38, 56, 57, 61, 62, 64, 66, 72, 83, 85, 92, 96, 98, 99, 139, 142, 167, 190, 196, 198, 200, 201, 213, 214, 215, 217, 225, 236, 243], "denomin": [12, 56, 60, 64, 83, 96, 106, 112, 193, 195, 196, 198, 200, 201, 204, 205, 214, 215, 217, 218, 221, 223, 282], "wild": [12, 56, 217, 243], "interest": [12, 14, 20, 26, 52, 56, 58, 61, 62, 72, 81, 83, 92, 96, 121, 122, 170, 175, 189, 192, 196, 200, 201, 202, 204, 212, 215, 217, 218, 223, 224, 237, 238, 255, 272, 275, 277, 278, 279, 282], "sq": [12, 218], "is_pow": [12, 38, 56, 62], "is_rat": [12, 18, 200, 243], "bracket": [12, 20, 24, 25, 48, 56, 64, 168, 170, 180, 205], "notat": [12, 16, 23, 26, 44, 48, 49, 55, 56, 57, 61, 64, 81, 89, 92, 98, 106, 168, 179, 180, 185, 189, 192, 205, 212, 217, 224, 230, 231, 243, 257, 272], "curli": [12, 120, 205], "suppli": [12, 24, 36, 37, 38, 47, 48, 56, 58, 66, 70, 92, 96, 111, 114, 115, 117, 122, 124, 127, 132, 133, 143, 170, 179, 184, 189, 191, 200, 202, 207, 214, 221, 237, 243, 244, 250, 252, 255], "powsimp": [12, 56, 62, 214, 217], "deep": [12, 20, 56, 62, 86, 87, 201, 212, 217, 225, 277], "measur": [12, 30, 62, 64, 72, 88, 110, 150, 159, 164, 172, 175, 177, 179, 180, 184, 186, 189, 201, 213, 214, 217, 225, 249, 250, 253, 254, 256, 257, 259], "count_op": [12, 56, 214, 217], "radic": [12, 56, 57, 92, 192, 200, 201, 217, 223, 224], "join": [12, 48, 56, 57, 69, 87, 99, 100, 205, 217, 221, 223, 226, 243, 247], "autoexpand": [12, 217], "violat": [12, 120, 190, 202, 217], "naiv": [12, 15, 47, 53, 56, 81, 87, 92, 175, 215, 223, 224, 231], "strategi": [12, 39, 56, 83, 198, 199, 212, 215, 217, 222], "radsimp": [12, 56, 217], "logcombin": [12, 217, 221, 224], "robust": [12, 53, 56, 60, 197, 217, 221], "cancel": [12, 16, 20, 38, 56, 60, 64, 72, 81, 83, 92, 96, 106, 107, 195, 196, 198, 201, 204, 217, 223, 276], "topic": [13, 21, 27, 38, 130, 135, 187, 188, 189, 190, 192, 194, 195, 200, 224, 267, 274, 279], "behind": [13, 27, 107, 120, 134, 174, 194, 214, 217, 221, 224, 267, 274], "decis": [13, 27, 56, 62, 83, 214, 223, 238], "opinion": [13, 27], "pitfal": [13, 20, 189, 195, 274, 279, 282], "glossari": 13, "seem": [14, 18, 20, 80, 81, 120, 175, 192, 217, 221, 282], "unwieldi": 14, "arbitrarili": [14, 36, 56, 69, 96, 198, 200, 212, 215, 221, 222, 225], "six": [14, 100, 205, 218, 224, 225], "bias": 14, "toward": [14, 38, 56, 64, 192, 212, 224], "enter": [14, 48, 56, 57, 61, 69, 96, 98, 99, 115, 119, 122, 132, 205, 215, 223, 236, 277, 281], "attempt": [14, 16, 19, 20, 26, 38, 47, 52, 54, 56, 60, 61, 68, 81, 83, 92, 96, 110, 112, 165, 195, 200, 205, 207, 214, 217, 218, 221, 223, 224, 225, 236, 274, 282], "unambigu": [14, 205, 221, 246], "univari": [14, 26, 36, 55, 56, 62, 79, 83, 192, 193, 195, 196, 199, 200, 201, 202, 207, 218, 220, 223, 225], "linear": [14, 20, 22, 24, 25, 26, 37, 38, 48, 55, 56, 57, 59, 60, 64, 69, 79, 81, 83, 85, 87, 89, 91, 99, 103, 106, 113, 114, 115, 117, 122, 124, 125, 130, 132, 136, 137, 142, 164, 167, 168, 184, 191, 192, 196, 198, 200, 201, 203, 211, 213, 215, 218, 221, 222, 223, 224, 243, 265, 267, 283], "undetermin": [14, 56, 92, 201, 207, 221, 223], "nonlinear": [14, 22, 26, 55, 137, 201, 221, 223, 224], "sol": [14, 24, 92, 218, 221, 222, 223], "insuffici": [14, 87], "elimin": [14, 16, 38, 52, 56, 86, 88, 92, 110, 196, 203, 204, 206, 208, 217, 221, 223, 224, 231, 238, 278], "nsolv": [14, 24, 25, 26, 137, 223], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 220, 223], "rh": [14, 38, 46, 48, 56, 87, 88, 92, 114, 115, 120, 127, 128, 129, 194, 203, 205, 207, 221, 223, 224, 256], "classifi": [15, 92, 195, 221, 222, 224, 225], "distinguish": [15, 18, 19, 37, 47, 60, 85, 120, 169, 175, 192], "former": [15, 38, 56, 61, 120, 198, 200, 201, 218, 243], "retriev": [15, 54, 87, 201, 217, 231], "guarante": [15, 18, 24, 38, 47, 48, 56, 68, 81, 83, 92, 195, 198, 200, 201, 221, 223, 224, 241, 246, 278, 282], "catch": [15, 56, 221, 236, 278], "theori": [15, 20, 39, 45, 46, 47, 48, 54, 56, 57, 61, 64, 85, 93, 115, 120, 134, 136, 149, 167, 170, 180, 184, 194, 198, 199, 200, 204, 218, 240, 250, 268, 276], "is_subset": [15, 213], "valueerror": [15, 18, 24, 31, 33, 36, 38, 39, 48, 56, 57, 65, 66, 69, 71, 72, 83, 87, 89, 92, 95, 96, 99, 104, 106, 144, 184, 186, 190, 192, 194, 198, 200, 213, 221, 223, 224, 243, 246, 257], "odd": [15, 18, 31, 33, 34, 35, 44, 48, 56, 57, 61, 62, 64, 86, 95, 96, 107, 190, 200, 201, 205, 223], "appliedpred": [15, 31, 32, 33], "analysi": [16, 38, 39, 47, 56, 57, 62, 103, 122, 134, 135, 138, 192, 201, 215, 218, 225], "vari": [16, 36, 38, 56, 70, 72, 99, 104, 110, 115, 135, 168, 189, 212, 223, 243, 257], "hope": [16, 47, 110, 192], "research": [16, 48, 202, 217], "establish": [16, 52, 81, 114, 125, 215], "envis": 16, "along": [16, 20, 38, 47, 56, 57, 58, 62, 64, 65, 66, 70, 71, 74, 76, 79, 81, 87, 89, 92, 99, 100, 102, 109, 110, 114, 115, 122, 124, 127, 128, 129, 132, 133, 134, 137, 139, 167, 179, 180, 186, 189, 191, 194, 195, 200, 201, 221, 224, 253, 257, 259], "small": [16, 38, 39, 47, 48, 56, 60, 61, 83, 86, 92, 96, 106, 124, 128, 137, 167, 190, 191, 198, 199, 200, 217, 218, 223, 243, 271, 274, 276], "x_": [16, 38, 46, 56, 57, 61, 98, 196, 198, 201, 207, 218, 221, 226], "taylor": [16, 56, 62, 120, 134, 137, 196, 198, 201, 202, 212, 221], "let": [16, 18, 19, 20, 36, 38, 47, 52, 56, 57, 66, 74, 79, 81, 85, 89, 92, 93, 96, 98, 111, 120, 137, 175, 180, 188, 192, 193, 194, 198, 200, 201, 202, 205, 212, 215, 217, 218, 221, 223, 224, 231, 234, 237, 241, 244, 255, 256, 260, 271, 274, 276, 277, 282], "df": [16, 58, 221], "c_": [16, 22, 57, 79, 81, 189, 193, 221], "grid": [16, 36, 37, 104, 191], "f_": [16, 56, 61, 64, 83, 132, 133, 134, 198, 204, 205, 215, 221], "constraint": [16, 92, 100, 106, 114, 115, 116, 119, 120, 122, 123, 124, 126, 130, 132, 133, 134, 137, 202, 267], "formul": [16, 114, 123, 124, 130, 132, 133, 170, 189], "assess": 16, "brute": [16, 214, 218], "frequent": [16, 47, 200, 212, 224], "cover": [16, 62, 96, 98, 110, 120, 179, 188, 231, 238, 272, 274], "treatment": [16, 81, 201], "shall": [16, 47, 81, 120, 137, 212, 215, 277], "job": [16, 20, 48, 150, 202, 205], "truncat": [16, 48, 56, 92, 96, 100, 175, 191, 202, 204, 207, 208], "approx": [16, 22, 24, 56, 83], "lowest": [16, 38, 47, 52, 96, 192, 207, 224], "2h": 16, "print_funct": 16, "x0": [16, 36, 38, 46, 56, 64, 75, 77, 79, 80, 96, 142, 195, 206, 207, 212, 217, 221, 223, 225, 243, 272], "x_0": [16, 46, 47, 57, 78, 79, 80, 198, 207, 218, 221, 225, 272], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 57, 79], "c_1": [16, 57, 79, 81, 212, 215, 221], "c_2": [16, 81, 212, 221], "2f": [16, 283], "c_i": [16, 81, 212, 215, 221], "nth": [16, 56, 61, 64, 85, 96, 196, 201, 202, 211, 217, 221, 225], "degre": [16, 39, 47, 54, 55, 61, 64, 72, 83, 87, 92, 99, 102, 104, 106, 114, 115, 120, 121, 124, 130, 138, 142, 189, 192, 193, 196, 198, 200, 201, 204, 208, 211, 214, 215, 217, 218, 221, 223, 225, 250, 267], "x_i": [16, 20, 46, 64, 83, 92, 193, 196, 198, 201, 202, 205, 224], "m11": [16, 225], "m12": [16, 225], "m13": 16, "m21": [16, 225], "m22": [16, 225], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 96], "3x3": [16, 71, 92, 255], "invert": [16, 26, 34, 56, 57, 87, 89, 92, 106, 124, 172, 193, 195, 196, 200, 201, 221, 223, 224, 231, 278], "inv": [16, 48, 88, 92, 114, 115, 122, 127, 128, 137, 159, 194, 221], "fim1": 16, "eight": [16, 26, 205], "dfdxcheck": 16, "c3": [16, 59, 85, 87, 89, 96, 221, 225, 256, 283], "c5": [16, 221], "120": [16, 55, 56, 61, 62, 78, 96, 99, 100, 202, 204, 205, 207, 221, 272], "c7": [16, 47], "5040": [16, 61, 78, 201, 202], "quickli": [16, 20, 47, 48, 56, 57, 60, 96, 198, 201, 214, 224, 240], "tediou": [16, 83], "certainli": [16, 68, 98, 240], "fine": [16, 20, 56, 60, 84, 185, 195, 205, 217], "devis": 16, "xn": [16, 20, 196], "x_n": [16, 20, 39, 46, 57, 78, 92, 193, 196, 198, 201, 218, 224], "fn": [16, 83, 92, 192, 201], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 55, 81, 92, 221, 224, 243, 282], "cours": [16, 18, 40, 47, 55, 64, 81, 83, 92, 93, 96, 186, 194, 195, 199, 200, 212, 214, 215, 257, 282], "etc": [16, 18, 19, 33, 36, 38, 52, 56, 57, 61, 62, 74, 85, 86, 91, 96, 120, 141, 150, 154, 167, 170, 174, 182, 186, 188, 189, 191, 192, 193, 195, 198, 200, 205, 206, 213, 214, 215, 217, 221, 224, 225, 229, 237, 238, 243, 255, 259], "discrit": 16, "bengt": [16, 36], "fornberg": [16, 36], "weight": [16, 56, 64, 71, 73, 83, 85, 92, 154, 217, 272], "gap": [17, 47, 96, 120, 202], "matur": [17, 18, 223, 224], "finit": [17, 18, 23, 34, 38, 42, 43, 44, 47, 55, 56, 57, 59, 60, 83, 85, 86, 156, 180, 190, 193, 196, 199, 201, 202, 205, 207, 208, 211, 213, 218, 220, 221, 224, 243, 250, 252, 262, 273, 276, 282], "concret": [18, 37, 48, 56, 61, 62, 83, 85, 92, 96, 120, 175, 196, 200, 205, 262], "obviou": [18, 19, 20, 47, 55, 192, 195, 204, 218, 276], "situat": [18, 26, 60, 81, 189, 221, 223, 225, 241, 274], "refus": [18, 282], "roughli": [18, 56, 57, 97, 121, 221, 244], "possibli": [18, 38, 48, 54, 56, 81, 83, 96, 173, 174, 198, 212, 213, 223, 238, 272, 278], "infinit": [18, 20, 34, 55, 56, 57, 60, 61, 62, 69, 70, 83, 92, 96, 106, 126, 156, 175, 192, 200, 205, 206, 207, 210, 211, 212, 213, 217, 218, 220, 223, 230, 243, 282, 283], "is_neg": [18, 20, 196], "interprett": 18, "unknow": 18, "resolv": [18, 19, 23, 24, 25, 56, 214, 217, 223], "undecid": [18, 20, 23, 92, 195, 224, 278], "conclud": [18, 64, 79, 122, 186, 212, 223, 259], "particularli": [18, 60, 83, 195, 196, 215, 282, 283], "mix": [18, 29, 55, 62, 87, 92, 98, 179, 195, 196, 201, 205, 224, 227, 229, 231, 244], "ideal": [18, 38, 93, 117, 120, 130, 180, 188, 194, 196, 198, 199, 200, 201, 202, 217, 224, 250], "slow": [18, 20, 52, 56, 60, 83, 97, 110, 122, 142, 179, 189, 195, 196, 205, 206, 207, 208, 217, 221, 223, 224, 236, 237, 282], "indetermin": [18, 19, 56, 92, 198, 210, 223], "contradict": 18, "infer": [18, 32, 33, 48, 56, 83, 195, 204, 205, 210, 215, 221, 237], "prepar": [18, 115, 203], "presum": [18, 81, 195, 215, 238], "singletonregistri": [18, 56], "x1": [18, 20, 24, 46, 56, 61, 137, 142, 195, 196, 206, 207, 217, 221, 223, 225, 243], "x2": [18, 24, 46, 56, 61, 137, 142, 195, 207, 221, 223, 225], "posifi": [18, 217], "_x": [18, 20, 92, 131, 135, 185, 188, 189, 196, 202, 217, 221, 237], "rep": [18, 47, 52, 56, 154, 192, 194, 195, 196, 199, 200, 201, 214, 217, 246], "feel": [18, 28, 137, 138, 217, 221, 223], "among": [18, 37, 38, 39, 40, 47, 48, 57, 84, 97, 201, 221, 226, 229, 231, 254], "behaviour": [18, 81, 86, 111, 198, 202, 208, 211], "symbolc": 18, "implicit": [18, 38, 54, 56, 98, 119, 138, 191, 221, 223, 227, 230, 237, 238, 250, 253, 260, 274], "tailor": 18, "assumptions0": [18, 56], "extended_neg": [18, 56], "extended_nonneg": [18, 56], "extended_nonposit": [18, 56], "extended_nonzero": [18, 56, 205], "extended_posit": [18, 56], "extended_r": [18, 34, 56, 205, 220, 224], "hermitian": [18, 34, 56, 87, 88, 92, 153, 159, 170, 205], "irrat": [18, 34, 36, 56, 96, 195, 201, 205, 213, 276], "noninteg": [18, 34, 56, 195, 205], "nonneg": [18, 20, 34, 56, 57, 58, 61, 64, 89, 137, 193, 195, 201, 218, 225, 282], "nonposit": [18, 34, 56, 61, 64, 137], "nonzero": [18, 20, 34, 35, 55, 56, 71, 92, 108, 193, 194, 195, 196, 205, 208, 224], "transcendent": [18, 23, 25, 26, 34, 56, 64, 83, 195, 200, 205, 223, 224, 278, 283], "field": [18, 30, 34, 38, 56, 57, 58, 64, 74, 83, 142, 143, 182, 183, 187, 192, 193, 194, 196, 197, 199, 201, 202, 203, 218, 223, 236, 250, 253, 255, 256, 258, 260, 265, 267, 268], "antihermitian": [18, 34, 56], "mathbb": [18, 20, 34, 39, 47, 55, 56, 57, 62, 64, 81, 87, 92, 134, 190, 192, 193, 195, 196, 198, 200, 201, 204, 212, 213, 215, 218, 224, 225, 282], "ii": [18, 62, 81, 83, 96, 201, 205, 213, 221, 224], "cup": [18, 201, 213, 224], "pm": [18, 55, 81, 83, 193, 204, 212, 218, 221], "yi": 18, "composit": [18, 34, 37, 45, 47, 48, 56, 57, 74, 76, 83, 96, 99, 196, 198, 201, 204, 217, 224, 239], "2k": [18, 56, 61, 81, 96, 218], "pariti": [18, 48, 201], "product": [18, 30, 41, 44, 47, 48, 52, 54, 55, 56, 57, 58, 60, 61, 64, 66, 69, 71, 72, 79, 81, 83, 85, 86, 87, 89, 92, 96, 97, 106, 107, 108, 110, 114, 122, 135, 137, 145, 149, 150, 153, 155, 156, 157, 159, 162, 164, 165, 167, 168, 170, 175, 176, 179, 180, 182, 187, 188, 189, 190, 192, 193, 194, 196, 198, 200, 201, 202, 205, 206, 207, 210, 213, 214, 217, 218, 221, 222, 223, 224, 225, 227, 229, 230, 231, 237, 240, 243, 250, 254, 267], "le": [18, 39, 52, 56, 64, 81, 87, 96, 129, 198, 215, 225], "commutative_properti": [18, 56], "skew": [18, 79, 96, 225], "hermitian_matrix": 18, "complex_numb": [18, 34, 56], "algebraic_numb": [18, 34, 56], "transcendental_numb": [18, 56], "extended_real_number_lin": 18, "real_numb": [18, 34], "imaginary_numb": [18, 34, 56], "rational_numb": [18, 34], "irrational_numb": [18, 34, 56], "parity_": [18, 56], "prime_numb": [18, 56, 96], "composite_numb": [18, 56], "positive_real_numb": 18, "negative_numb": [18, 56], "inconsist": [18, 20, 31, 33, 55, 175, 180, 184, 188, 217, 221, 224], "inconsistentassumpt": 18, "deal": [18, 38, 55, 56, 60, 68, 76, 81, 83, 103, 110, 115, 116, 120, 186, 188, 189, 193, 198, 201, 218, 223, 234, 244, 246, 254, 259, 274, 276, 282], "is_zero_matrix": [18, 87, 194], "generalis": [18, 64, 81, 192], "gaussian": [18, 64, 83, 92, 96, 140, 198, 201, 218, 223, 225, 267, 278], "notion": [18, 37, 175, 178, 192, 224, 254, 259], "chain": [18, 20, 38, 47, 52, 56, 64, 73, 97, 188, 200, 225], "superset": [18, 36, 45, 51, 59, 137, 195, 213, 223], "vanilla": 18, "attach": [18, 50, 81, 97, 99, 114, 115, 131, 189, 237, 239, 244], "is_commut": [18, 83, 159, 168, 243], "is_complex": [18, 56], "is_finit": [18, 56], "permit": [18, 48, 58, 62, 86, 96, 191], "formal": [18, 37, 55, 56, 64, 81, 86, 139, 175, 195, 198, 209, 212, 262], "littl": [18, 20, 37, 48, 66, 92, 96, 97, 122, 175, 199, 201, 205, 215, 217, 225, 240, 254], "n1": [18, 38, 47, 56, 57, 120, 137, 139, 143, 179, 218, 225, 250], "n2": [18, 38, 47, 56, 57, 137, 139, 143, 218, 225], "misunderstand": 18, "is_nonneg": [18, 20, 196], "intent": [18, 38, 55, 56, 98, 238], "meaning": [18, 31, 33, 37, 57], "alon": [18, 57, 84, 198, 221, 223, 230, 243, 276, 277], "tempt": [18, 20, 56, 96], "meet": [18, 57, 212], "criteria": [18, 56, 277], "noncommut": [18, 56, 79, 277], "finiteset": [18, 23, 36, 37, 213, 224, 225, 283], "s1": [18, 47, 55, 69, 72, 79, 106, 181, 192, 201, 208, 218, 243, 253], "s2": [18, 47, 48, 55, 69, 72, 106, 181, 192, 201, 208, 212, 218, 243, 253], "bool": [18, 36, 38, 52, 54, 56, 57, 59, 62, 83, 84, 86, 87, 89, 92, 96, 98, 116, 154, 182, 185, 191, 200, 201, 203, 205, 206, 207, 212, 213, 217, 220, 225, 237, 238, 243, 244, 250, 253, 274], "plai": [18, 55, 122, 132, 218, 274, 276, 277], "role": [18, 62, 203], "connect": [18, 50, 57, 58, 71, 72, 92, 97, 99, 102, 111, 114, 122, 125, 131, 192, 193, 194, 203, 221, 225, 243, 250], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 56], "capitalis": 18, "4142135623731": [18, 24, 205, 223], "predict": [18, 170, 217, 243], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 30, 32, 33, 38, 40, 45, 47, 48, 50, 51, 56, 62, 63, 64, 71, 87, 92, 106, 156, 167, 168, 170, 194, 196, 200, 201, 205, 213, 231, 236], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 71], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 38, 47, 56, 277], "verifi": [18, 28, 36, 47, 53, 57, 58, 120, 192, 198, 204, 221, 223, 224, 226, 227, 282], "importantli": [18, 20, 202, 240], "reject": [18, 19, 96, 218, 246], "_eval_is_": 18, "is_algebra": [18, 56, 196], "interfer": [18, 205], "determinist": [18, 47, 83, 96, 198, 199], "reach": [18, 96, 106, 200, 201, 221], "claus": [18, 86], "flow": [18, 200], "inner": [18, 55, 81, 92, 153, 156, 157, 162, 164, 165, 168, 170, 180, 184, 194, 200, 207, 250, 267], "optimis": [18, 221], "stage": [18, 37, 55, 96, 212, 282], "briefli": [18, 193, 198], "managedproperti": [18, 56], "metaclass": [18, 56], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 27, 40, 45, 48, 51, 59, 63, 81, 86, 96, 200, 201, 215, 240, 243, 262], "randomis": [18, 233, 269], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 83, 203], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 56, 243], "precomput": [18, 61, 96, 244], "static": [18, 30, 38, 47, 48, 50, 56, 62, 69, 70, 71, 72, 89, 100, 122, 130, 191, 205, 211, 213, 225, 237], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 201], "_assumpt": [18, 56], "amongst": [18, 223], "indirectli": 18, "manifest": [18, 193], "jointli": 18, "fundament": [18, 20, 36, 39, 46, 74, 81, 83, 92, 175, 195, 200, 218, 221, 225, 278], "theoret": [18, 37, 39, 47, 57, 61, 199, 200, 215, 274], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 56, 205], "analogu": [19, 34, 55, 70, 195, 196], "piecewis": [19, 20, 38, 55, 61, 64, 83, 86, 99, 168, 205, 207, 208, 223, 224, 225, 244, 272], "nonetyp": [19, 38], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 34, 56, 62, 86, 106, 180, 194, 196, 198, 201], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 60, 96, 237], "carefulli": [19, 56, 180, 198, 207], "truth": [19, 31, 32, 33, 34, 35, 56, 87, 217], "bitwis": [19, 59, 86], "footnot": [19, 175, 277, 278, 281], "combinatori": [20, 40, 48, 55, 56, 63, 64, 201, 207, 217, 243, 245, 262, 282], "dig": [20, 38, 277], "th": [20, 30, 39, 47, 48, 54, 57, 58, 60, 61, 62, 64, 85, 86, 92, 96, 115, 196, 198, 200, 201, 207, 210, 215, 218, 221, 223, 225, 226, 231], "handler": [20, 31, 32, 33, 34, 35, 56, 63, 92], "spectrum": 20, "matter": [20, 36, 45, 48, 55, 56, 61, 81, 83, 135, 212, 243, 276, 277], "use_unicod": [20, 36, 37, 38, 60, 64, 83, 84, 92, 100, 106, 142, 185, 190, 192, 193, 204, 205, 206, 224, 225, 272, 276, 278, 281, 282, 283], "np": [20, 61, 79, 96, 120, 237, 244], "arang": [20, 237, 271], "arrai": [20, 22, 24, 38, 47, 48, 52, 53, 57, 64, 83, 87, 89, 92, 96, 97, 104, 137, 167, 191, 194, 196, 201, 205, 224, 225, 228, 230, 231, 232, 237, 238, 240, 244, 265, 278], "ultim": [20, 62, 175], "cosin": [20, 56, 62, 64, 71, 83, 111, 114, 180, 189, 201, 202, 208, 214, 225, 250, 282], "todai": [20, 192], "operatornam": [20, 61, 62, 64, 81, 83, 190, 193, 201, 205, 208, 213, 215, 223], "modern": [20, 38, 192, 199, 205], "recal": [20, 56, 92, 198, 200, 215, 274, 276, 277, 283], "redefin": [20, 48, 56, 132, 134, 193, 244], "antipattern": [20, 275], "stai": [20, 200], "trig": [20, 56, 83, 201, 205, 214, 217, 282], "wouldn": 20, "cheap": [20, 56, 96], "as_two_term": [20, 56], "split": [20, 38, 56, 57, 60, 81, 83, 98, 198, 200, 203, 204, 205, 223, 225, 231, 236, 243, 248, 277, 282], "hadn": 20, "wors": [20, 86, 217], "expand_trig": [20, 56, 271], "mid": [20, 39, 57, 60, 100, 213, 218], "troubl": [20, 64], "bigger": [20, 38, 56, 61, 215, 221, 282], "deduc": [20, 38, 81, 86, 215, 276], "disallow": [20, 56, 201, 206, 217, 239], "great": [20, 139, 202, 205, 218, 244], "simplest": [20, 37, 86, 92, 96, 97, 190, 191, 202, 206, 214, 217, 221, 272, 282], "\u03c0": [20, 60, 142, 205, 224, 272, 276, 282, 283], "as_independ": [20, 56, 224], "coeff": [20, 56, 58, 86, 137, 196, 200, 201, 211, 217, 221, 223, 231, 282], "apart": [20, 30, 47, 52, 56, 60, 62, 83, 186, 193, 196, 198, 201, 204, 207, 218, 224, 231, 255, 257, 277], "is_even": [20, 44, 47, 48], "nonreal": [20, 24, 223], "cosh": [20, 56, 62, 64, 75, 81, 202, 205, 206, 215, 217, 223, 278, 282], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 47, 240, 275, 282], "_eval_is_posit": 20, "as_add": [20, 56], "pi_": 20, "fuzzy_": 20, "deduct": [20, 38], "subtl": [20, 214], "nontrivi": [20, 47, 56, 96], "_eval_evalf": [20, 201], "prec": [20, 24, 56, 66, 72, 96, 104, 190, 196, 201, 202, 217, 223], "dp": [20, 38, 56, 59, 64, 96, 195, 196, 223, 239], "53": [20, 57, 59, 92, 139, 193, 195, 196], "459697694131860": 20, "hook": [20, 97, 205], "_eval_rewrit": [20, 56], "rewritten": [20, 56, 61, 62, 64, 83, 120, 167, 212, 217, 221, 223, 282], "caller": 20, "ve": [20, 122], "nonintegr": 20, "iff": [20, 34, 48, 57, 86, 92, 189, 192, 200, 215, 218, 236], "isint": 20, "xy": [20, 36, 37, 70, 92, 117, 189, 191, 192, 198, 205, 217, 224, 260, 277, 282], "happi": 20, "demand": [20, 29], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 58, 137, 195, 205, 206, 217, 224, 231, 250, 255], "expand_log": [20, 38, 56, 217], "_eval_expand_trig": 20, "sophist": [20, 97, 223], "x_1": [20, 39, 46, 47, 57, 61, 78, 92, 165, 193, 196, 198, 201, 207, 218, 224], "ldot": [20, 39, 46, 47, 55, 56, 57, 61, 64, 81, 96, 100, 175, 190, 192, 193, 196, 198, 200, 205, 208, 212, 215, 218, 223, 226, 282], "x_k": [20, 57, 198], "dy": [20, 38, 58, 73, 92, 99, 109, 137, 201, 205, 218, 221, 222, 272], "dz": [20, 99, 109, 215], "argumentindexerror": 20, "varion": 20, "middl": [20, 64, 72, 81, 92, 100, 150, 191, 215, 282], "iverson": 20, "printmethod": [20, 205], "latexprint": 20, "_latex": [20, 205], "_print": [20, 205], "_m": [20, 64], "_n": [20, 57, 61, 64, 83, 201, 215, 224], "arcversin": 20, "aversin": 20, "im": [20, 35, 56, 62, 81, 90, 192, 205, 206, 213, 221, 278], "sinh": [20, 36, 56, 60, 62, 64, 75, 81, 202, 205, 206, 215, 282], "expand_complex": [20, 56], "analog": [20, 49, 55, 57, 61, 135, 188, 189, 192, 193, 194, 198, 210, 226, 243], "vers": 20, "geometr": [20, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 92, 139, 189, 192, 199, 225, 278], "angl": [20, 30, 62, 64, 65, 66, 67, 69, 70, 71, 72, 102, 108, 114, 119, 120, 122, 123, 124, 125, 131, 134, 139, 142, 143, 144, 167, 175, 180, 188, 189, 190, 205, 214, 224, 250, 252, 255, 282], "horizont": [20, 26, 37, 66, 69, 71, 87, 102, 142, 191, 194, 205], "distanc": [20, 37, 40, 48, 66, 69, 70, 71, 72, 99, 100, 109, 110, 114, 124, 125, 139, 143, 173, 184, 186, 259], "rightmost": [20, 170], "scientificamerican": 20, "uniti": [20, 62, 64, 81, 165, 200], "secret": [20, 57], "teacher": 20, "taught": [20, 83], "nr": 20, "sake": [20, 61, 218], "simplic": [20, 215, 217, 221], "divisor": [20, 34, 47, 56, 57, 92, 96, 192, 193, 195, 196, 198, 199, 200, 201, 204], "hardwar": [20, 38], "regard": [20, 39, 57, 64, 84, 138, 170, 192, 193, 207, 223, 224], "c99codeprint": [20, 38, 205], "cxx11codeprint": [20, 205], "cfunction": 20, "e2": [20, 36, 56, 59, 66, 73, 83, 92, 96, 104, 120, 195, 200, 212, 221, 224, 225, 243], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 38, 205, 230, 238], "cxxcode": [20, 38, 205], "_ccode": [20, 205], "_y": [20, 131, 135, 185, 188, 189], "_z": [20, 83, 131, 135, 188, 189, 225], "_cxxcode": [20, 205], "std": [20, 205, 225], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 221], "fragil": 20, "tend": [20, 29, 38, 56, 61, 198, 200, 210, 212, 215, 275, 282], "prone": [20, 38, 56], "move": [20, 47, 48, 56, 57, 70, 72, 99, 114, 122, 124, 130, 158, 184, 188, 189, 217, 226, 235, 257], "task": [21, 22, 27, 62, 130, 131, 137, 195, 200, 272, 279], "deeper": [21, 229, 277], "explor": [21, 132, 133, 191, 200, 240, 282], "diophantin": [22, 96, 198, 219, 262], "2z": [22, 25, 64, 224, 225], "4z": [22, 25, 224], "6z": [22, 25], "739085133215161": [22, 24, 25, 26, 223], "9y": 22, "3x": [22, 56, 98, 198, 224, 274], "cc": [22, 57, 72, 190, 193, 195, 201, 278], "4xy": [22, 186, 259], "8y": 22, "7y": [22, 218], "yield": [23, 25, 36, 38, 47, 56, 57, 61, 64, 80, 81, 96, 99, 106, 112, 164, 190, 193, 198, 200, 201, 206, 207, 212, 213, 214, 217, 218, 223, 240, 243, 278], "rearrang": [23, 107, 115, 132, 133, 154, 221], "eqn": [23, 36, 224], "solutions_set": 23, "solution_set": 23, "256": [23, 38, 47, 96, 201, 205], "techniqu": [23, 39, 51, 81, 83, 205, 207, 217, 221, 224, 278], "solution_outside_2_3": 23, "interv": [23, 34, 36, 47, 56, 60, 62, 64, 65, 66, 69, 72, 81, 83, 86, 96, 156, 165, 196, 198, 200, 201, 208, 211, 213, 220, 224, 225, 283], "calculu": [23, 56, 61, 83, 92, 137, 186, 214, 225, 256, 257, 258, 261, 262, 273, 275, 280], "critic": [23, 36, 143, 188, 200, 224], "minima": [23, 224], "critical_point": 23, "point1": [23, 181, 253], "point2": [23, 181, 253], "curvatur": [23, 139, 143], "solution_list": 23, "membership": [23, 54, 200, 213], "candid": [23, 56, 92, 96, 198, 217], "solution_set_arg": 23, "overli": 24, "float64": [24, 38, 97, 225], "fsolv": 24, "linalg": [24, 38], "findroot": [24, 64, 223], "overdetermin": [24, 223, 224], "toler": [24, 38, 56, 60, 196, 217, 223], "18466446988997098217": 24, "16840434497100886801e": 24, "tweak": [24, 205, 223], "closest": [24, 56, 69], "closer": [24, 122, 224, 277], "00000000000000": [24, 56, 60, 171, 205, 225], "bisect": [24, 96, 201, 223], "multidimension": [24, 199, 236], "19287309935246": [24, 223], "27844411169911": [24, 223], "192873099352460791205211": 24, "278444111699106966687122": 24, "root_scalar": 24, "lam_f": [24, 244], "3416277185114782": 24, "slightli": [24, 29, 38, 52, 96, 98, 122, 191, 192, 196, 198, 201, 205, 215, 217], "x_valu": 24, "12757857962640e": 24, "73908513321516": 24, "4877893607115270300540019e": 24, "6543612251060553497428174e": 24, "interrog": 25, "overconstrain": 25, "solvabl": [26, 47, 102, 218, 221, 224, 283], "abel": [26, 92], "ruffini": [26, 92], "theorem": [26, 44, 57, 64, 66, 72, 83, 87, 92, 96, 109, 110, 122, 170, 179, 188, 192, 195, 198, 212, 215, 218, 224], "groebnerbasi": [26, 193, 201, 204], "lambert": [26, 62, 83, 202], "decompos": [26, 47, 48, 54, 56, 58, 62, 67, 92, 96, 154, 163, 164, 166, 196, 201, 204, 225], "reflect": [26, 40, 44, 48, 56, 66, 67, 72, 85, 102, 139, 142, 143, 180], "lack": [26, 38, 58, 60, 117, 205, 272], "crootof": [26, 56, 201, 221, 223], "765": 26, "352": 26, "181": 26, "08": [26, 122], "total": [26, 39, 45, 47, 56, 61, 72, 85, 86, 87, 89, 122, 124, 132, 139, 143, 149, 154, 167, 176, 190, 196, 198, 201, 214, 217, 221, 229, 231, 260], "scroll": 26, "56": [26, 59, 83, 96, 201], "1307": 26, "432": [26, 69, 200], "434607": 26, "144": [26, 61, 83, 190], "0509758447494279": 26, "313552108895239": 26, "14751999969868": 26, "estim": [26, 36, 55, 56, 60, 81, 272], "preserv": [26, 37, 38, 47, 56, 92, 168, 196, 201, 206, 207, 217], "77245385090552": 26, "4142135623730951": 26, "varieti": [26, 38, 39, 48, 56, 97, 100, 135, 192, 199, 201, 225, 243], "exclud": [26, 38, 55, 56, 83, 92, 112, 137, 193, 196, 198, 201, 211, 221, 223, 236, 239, 243], "risk": 26, "parse_latex": [26, 98], "central": [27, 47, 53, 64, 66, 72, 111, 117, 135, 191, 200, 201, 218, 225], "pypi": 28, "continuum": [28, 267], "qtconsol": [28, 281], "nicer": [28, 56, 128], "setupegg": 28, "enthought": 28, "canopi": 28, "activepython": 28, "spack": 28, "freshli": 28, "starter": 28, "sy": [28, 38, 58, 120, 137, 205, 236, 247, 256, 274], "wherev": [28, 120, 217, 224, 254], "visit": [28, 40, 47, 56, 61, 279], "chat": 28, "gitter": [28, 278], "excel": [28, 60, 200, 280], "ticket": 28, "export": [29, 205], "latin": 29, "clunki": 29, "collid": [29, 231], "win": 29, "throwawai": 29, "surviv": 29, "foo": [29, 36, 38, 56, 165, 185, 243, 246], "report": [29, 36, 47, 56, 69, 87, 96, 202, 213, 224, 236, 278, 283], "stick": 29, "_clash1": [29, 56], "_clash2": [29, 56], "multi": [29, 56, 57, 121, 130, 137, 150, 154, 164, 191, 205, 224, 267], "_clash": [29, 56], "union": [29, 34, 36, 38, 45, 47, 54, 86, 98, 192, 200, 205, 211, 212, 213, 220, 224, 225, 243], "sympif": [29, 56], "real_field": 30, "instanti": [30, 37, 38, 48, 56, 64, 69, 71, 72, 89, 92, 160, 168, 180, 191, 192, 196, 200, 225, 250, 254], "q1": [30, 92, 99, 110, 120, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 138, 179, 180, 182, 184, 185, 188, 189, 195, 250, 252], "q2": [30, 99, 110, 120, 122, 123, 124, 125, 127, 128, 129, 132, 133, 138, 179, 180, 182, 184, 185, 188, 189, 195, 250, 252], "r1": [30, 66, 69, 85, 99, 100, 143, 180, 186, 201, 250], "euclideanspac": 30, "realnormedalgebra": 30, "r2": [30, 58, 69, 85, 87, 99, 100, 143, 180, 201, 205, 217, 250], "q3": [30, 110, 122, 123, 125, 127, 128, 129, 132, 180, 182, 184, 189, 250, 252], "bi": [30, 56, 62, 64, 83, 189, 212, 221], "cj": 30, "dk": [30, 99, 200], "atan2": [30, 35, 58, 62, 144, 205, 250], "atan": [30, 35, 58, 60, 62, 67, 72, 80, 83, 124, 138, 139, 202, 205, 207], "arc_coplanar": 30, "arc": [30, 62, 282], "coplanar": [30, 70, 189], "ax": [30, 57, 60, 66, 69, 81, 88, 92, 99, 104, 114, 142, 167, 180, 189, 190, 191, 194, 202, 218, 221, 224, 226, 227, 230, 250, 252, 254, 257, 259, 282], "parallel": [30, 66, 69, 70, 72, 83, 103, 106, 109, 188, 189, 198, 256, 260], "vector_coplanar": 30, "is_pur": 30, "mathbf": [30, 89, 130, 132, 133, 135, 175, 179, 180, 185, 186, 188, 189, 205, 215, 226, 254, 255, 257, 259, 260], "versor": 30, "0i": 30, "0j": [30, 195], "0k": 30, "vector_part": 30, "from_axis_angl": 30, "radian": [30, 62, 65, 66, 67, 69, 70, 71, 92, 104, 120, 143, 144, 180], "from_rotation_matrix": 30, "orthogon": [30, 34, 71, 85, 92, 168, 180, 189, 250, 252], "det": [30, 92, 93, 137, 189, 194, 278], "index_vector": 30, "mod": [30, 57, 62, 86, 92, 93, 96, 166, 192, 194, 195, 196, 198, 200, 201, 205, 207, 215, 218], "magnitud": [30, 38, 55, 56, 60, 64, 97, 99, 100, 102, 104, 124, 137, 168, 177, 180, 186, 189, 191, 250, 257, 259], "norm": [30, 92, 168, 180, 196, 198, 200, 201], "scalar_part": 30, "is_zero_quaternion": 30, "mensor": 30, "60": [30, 42, 47, 49, 55, 56, 61, 64, 83, 92, 96, 99, 100, 204, 205, 218, 221, 243], "pth": 30, "668": 30, "224": [30, 173, 199], "336": 30, "448": 30, "pow_cos_sin": 30, "900": 30, "1800": [30, 57], "2700": [30, 99], "3600": [30, 61], "rotate_point": 30, "coordin": [30, 38, 57, 58, 62, 64, 65, 67, 71, 73, 89, 92, 99, 102, 104, 108, 114, 115, 116, 119, 120, 121, 122, 123, 125, 127, 130, 131, 132, 133, 136, 138, 146, 148, 167, 168, 171, 179, 180, 181, 182, 184, 186, 189, 192, 200, 201, 213, 221, 250, 252, 253, 256, 258, 260, 265, 267], "to_axis_angl": 30, "to_rotation_matrix": 30, "assumptionkei": 31, "proposit": [31, 33, 86], "is_tru": [31, 33, 34], "assumptionscontext": [31, 32, 33], "global_assumpt": [31, 32, 33], "discern": [31, 33], "refin": [31, 33, 56, 87, 192, 196, 200, 201, 217, 238, 262], "progress": [31, 33, 96, 238], "inherit": [31, 56, 63, 86, 89, 90, 114, 159, 168, 190, 205, 225, 230, 238, 239], "askhandl": 31, "mere": [32, 33, 38, 60, 165], "thin": [32, 92, 126, 139], "undefinedpred": [32, 33], "sexi": [32, 33], "sexyprimepred": [32, 33], "sexyprim": [32, 33], "int1": [32, 33], "int2": [32, 33], "assump": [32, 33], "r3": [32, 85, 99, 100, 217], "predicate_": [32, 33], "mathematical_log": [32, 33], "r4": [32, 85, 99], "sexy_prim": [32, 33], "resolut": [32, 33, 218], "askpredicatehandl": [32, 33], "r5": [33, 217], "r6": 33, "notabl": [33, 38, 59, 64, 81, 97, 195], "truth_maintenance_system": 33, "istruepred": 34, "gt": [34, 38, 56, 225, 243], "istruehandl": 34, "commutativepred": 34, "commutativehandl": 34, "finitepred": 34, "nor": [34, 36, 56, 86, 96, 144, 191, 201, 212, 214, 221, 231, 250], "nan": [34, 35, 56, 62, 64, 112, 217, 225, 272], "finitehandl": 34, "r7": 34, "infinitepred": 34, "infinitehandl": 34, "symmetricpred": 34, "symmetr": [34, 35, 39, 44, 47, 48, 52, 72, 87, 88, 89, 92, 96, 179, 190, 196, 198, 201, 204, 213, 215, 231, 243], "transpos": [34, 37, 87, 89, 92, 106, 137, 153, 180, 189, 194, 200, 218, 226, 231, 232, 278], "diagon": [34, 61, 87, 88, 89, 92, 95, 119, 142, 194, 227], "symmetrichandl": 34, "r8": 34, "symmetric_matrix": 34, "invertiblepred": 34, "fullrank": [34, 38], "invertiblehandl": 34, "r9": 34, "invertible_matrix": 34, "orthogonalpred": 34, "tm": [34, 143], "mm": [34, 37, 96, 115, 122, 127, 128, 168, 194], "orthogonalhandl": 34, "r10": 34, "orthogonal_matrix": 34, "unitarypred": 34, "unitari": [34, 83, 96, 154, 159, 190], "unitaryhandl": 34, "r11": 34, "unitary_matrix": 34, "positivedefinitepred": 34, "tmz": 34, "column": [34, 37, 38, 39, 84, 86, 87, 89, 92, 93, 95, 106, 115, 119, 122, 135, 165, 172, 180, 185, 190, 194, 200, 205, 221, 224, 230, 250], "positive_definit": 34, "positivedefinitehandl": 34, "r12": 34, "definite_matrix": 34, "uppertriangularpred": 34, "triangular": [34, 87, 88, 92, 194, 200, 223, 225, 260], "m_": [34, 133, 190, 198], "ij": [34, 170, 175, 190, 225], "zeromatrix": [34, 89], "upper_triangular": [34, 87], "uppertriangularhandl": 34, "r13": 34, "uppertriangularmatrix": 34, "lowertriangularpred": 34, "lower_triangular": [34, 87], "lowertriangularhandl": 34, "r14": 34, "lowertriangularmatrix": 34, "diagonalpred": 34, "diagonalhandl": 34, "r15": 34, "diagonal_matrix": 34, "fullrankpred": 34, "rank": [34, 38, 39, 40, 45, 47, 48, 50, 51, 52, 71, 85, 92, 93, 180, 182, 192, 194, 196, 198, 200, 226, 230, 231, 278], "row": [34, 37, 38, 39, 45, 48, 56, 61, 87, 88, 89, 92, 93, 95, 96, 106, 119, 120, 122, 135, 137, 138, 165, 180, 189, 194, 200, 205, 215, 224, 225, 230, 244, 250, 252], "linearli": [34, 38, 64, 80, 92, 198, 221, 223, 231], "fullrankhandl": 34, "squarepred": 34, "squarehandl": 34, "r16": 34, "square_matrix": 34, "integerelementspred": 34, "integer_el": 34, "integerelementshandl": 34, "realelementspred": 34, "real_el": 34, "realelementshandl": 34, "complexelementspred": 34, "complex_el": 34, "complexelementshandl": 34, "singularpred": 34, "singular": [34, 38, 48, 56, 60, 62, 63, 64, 78, 79, 81, 83, 92, 99, 101, 134, 180, 192, 199, 212, 221, 224, 250, 267, 272], "singularhandl": 34, "fore": 34, "r17": 34, "singularmatrix": 34, "normalpred": 34, "normalhandl": 34, "r18": 34, "normal_matrix": 34, "triangularpred": 34, "triangularhandl": 34, "r19": 34, "triangular_matrix": 34, "unittriangularpred": 34, "unit_triangular": 34, "unittriangularhandl": 34, "evenpred": 34, "evenhandl": 34, "oddpred": 34, "oddhandl": 34, "primehandl": 34, "subject": [34, 66, 72, 100, 110, 138, 200], "compositepred": 34, "compositehandl": 34, "positivepred": 34, "positivehandl": 34, "negativepred": 34, "negativehandl": 34, "zeropred": 34, "zerohandl": 34, "nonzeropred": 34, "nonzerohandl": 34, "nonpositivepred": 34, "nonpositivehandl": 34, "nonnegativepred": 34, "nonnegativehandl": 34, "integerpred": 34, "integerhandl": 34, "r20": 34, "rationalpred": 34, "rationalhandl": 34, "r21": 34, "irrationalpred": 34, "ratio": [34, 46, 47, 55, 56, 60, 61, 64, 66, 69, 70, 71, 72, 88, 96, 106, 143, 175, 205, 214, 217, 223], "irrationalhandl": 34, "r22": 34, "realpred": 34, "disjoint": [34, 37, 45, 48, 201, 213, 243], "realhandl": 34, "r23": 34, "extendedrealpred": 34, "extendedrealhandl": 34, "hermitianpred": 34, "hermitianhandl": 34, "r24": 34, "hermitianoper": [34, 159], "complexpred": 34, "complexhandl": 34, "r25": 34, "imaginarypred": 34, "imaginaryhandl": 34, "r26": 34, "antihermitianpred": 34, "antihermitianhandl": 34, "r27": 34, "algebraicpred": 34, "askalgebraicpredicatehandl": 34, "r28": 34, "algebraichandl": 34, "transcendentalpred": 34, "transcedent": 34, "refine_pow": 35, "refine_ab": 35, "refine_arg": 35, "refine_atan2": 35, "refine_im": 35, "refine_matrixel": 35, "refine_r": 35, "refine_sign": 35, "lagrang": [36, 56, 113, 114, 126, 130, 201, 218, 267], "lagrangian": [36, 115, 117, 124, 129, 133, 134], "euler_equ": 36, "r29": 36, "93lagrange_equ": 36, "decreas": [36, 38, 48, 198], "monoton": [36, 38, 73], "is_decreas": 36, "lopen": [36, 56, 213, 220, 225], "ropen": [36, 62, 213, 225], "is_increas": 36, "72": [36, 56, 69, 92, 96, 99, 190, 204], "is_monoton": 36, "is_strictly_decreas": 36, "is_strictly_increas": 36, "monotonicity_help": 36, "held": [36, 57, 134, 229, 282], "r30": 36, "mathematical_singular": 36, "interpol": [36, 61, 65, 137, 198, 201], "finite_diff_weight": [36, 56, 272], "apply_finite_diff": [36, 56, 272], "differentiate_finit": [36, 56, 272], "finite_diff": [36, 56], "x_list": [36, 272], "y_list": [36, 272], "cube": [36, 38, 40, 47, 49, 62, 83, 198, 199, 218, 224, 260], "xlist": 36, "55271367880050e": 36, "indexedbas": [36, 38, 55, 56, 205, 223, 229, 230, 237], "idx": [36, 38, 205, 229, 230, 237], "zip": [36, 46, 57, 86, 96, 201, 211, 218, 221, 240, 243], "region": [36, 64, 73, 83, 191, 213, 221, 224, 225, 250, 253, 260], "bewar": [36, 64], "phenomenon": [36, 175, 198, 208, 277], "90": [36, 47, 54, 64, 87, 92, 98, 99, 102, 110, 120, 138, 205, 207, 217, 225, 238], "finitediff": 36, "wrt": [36, 38, 56, 58, 64, 73, 92, 120, 137, 180, 181, 198, 201, 250, 252, 253, 257], "len": [36, 44, 45, 46, 47, 48, 52, 54, 56, 57, 61, 64, 71, 81, 86, 124, 139, 143, 154, 164, 201, 217, 221, 230, 243], "nearest": [36, 200], "furthest": [36, 57], "sublist": [36, 52, 57, 83, 167, 272], "fd": [36, 38, 170], "0th": [36, 48, 57, 64], "1st": [36, 48, 96, 106, 221, 222, 246, 272], "classic": [36, 62, 64, 92, 156, 172, 180, 189, 192, 267], "forward": [36, 38, 87, 106, 122, 130, 163, 188, 217, 236], "pai": 36, "attent": [36, 47, 62], "gridpoint": 36, "plan": [36, 110, 196, 281], "mycoeff": 36, "3rd": [36, 48, 62, 96, 137, 201, 223, 226, 243], "2nd": [36, 48, 57, 96, 106, 137, 221, 226, 243], "cost": [36, 38, 96, 124, 224, 276], "poorer": 36, "grand": 36, "r31": 36, "51": [36, 92, 96], "184": [36, 221], "1988": [36, 149, 167, 198, 199], "699": 36, "706": [36, 92], "1090": [36, 201], "s0025": [36, 96], "5718": [36, 96], "0935077": 36, "continuous_domain": [36, 220], "tan": [36, 56, 61, 62, 83, 98, 112, 127, 128, 129, 134, 202, 204, 205, 212, 214, 221, 224, 282], "function_rang": 36, "is_convex": [36, 72], "sym": [36, 46, 47, 52, 56, 61, 180, 205, 208, 213, 217, 218, 223, 225, 231, 243, 282], "convex": [36, 72, 73, 83], "unspecifi": [36, 56, 71, 272], "multivari": [36, 56, 64, 192, 193, 195, 196, 197, 199, 201, 202, 212, 217, 223, 224, 225, 282], "concav": [36, 139], "r32": 36, "convex_funct": 36, "r33": 36, "ifp": 36, "illinoi": 36, "edu": [36, 40, 47, 48, 57, 59, 61, 83, 92, 96, 199, 204, 214, 217, 218, 221, 225, 250], "angelia": 36, "l3_convfunc": 36, "r34": 36, "logarithmically_convex_funct": 36, "r35": 36, "logarithmically_concave_funct": 36, "r36": 36, "concave_funct": 36, "lcim": 36, "mixtur": [36, 38, 73, 192, 238], "incommensur": 36, "not_empty_in": [36, 224], "finset_intersect": 36, "finite_set": [36, 213], "tracker": [36, 213, 224, 278], "aperiod": 36, "smallest": [36, 50, 62, 69, 71, 78, 86, 92, 96, 167, 180, 196, 241, 243], "verif": [36, 194, 223], "reliabl": [36, 56, 221, 241, 272], "henc": [36, 38, 46, 47, 56, 58, 62, 64, 68, 81, 84, 86, 96, 102, 186, 191, 192, 193, 198, 205, 215, 218, 222, 224, 236, 240, 255, 256, 257, 277, 282], "stationary_point": 36, "stationari": [36, 225], "tikz": 37, "joyofcat": 37, "adamek": 37, "herrlich": 37, "strecker": 37, "joi": 37, "cat": [37, 179], "book": [37, 47, 57, 62, 115, 120, 123, 131, 135, 136, 155, 199, 204, 205, 275], "katmat": 37, "uni": [37, 83, 243], "bremen": 37, "de": [37, 57, 61, 96, 175, 190, 191, 202, 207, 218, 221, 243], "acc": [37, 137, 184, 188], "embryon": 37, "morphism": [37, 192], "codomain": [37, 192, 200], "arrow": [37, 85, 99, 191, 205], "namedmorph": 37, "prohibit": [37, 48, 49, 180], "identitymorph": 37, "compositemorph": 37, "compos": [37, 56, 57, 124, 134, 172, 174, 175, 188, 192, 196, 200, 201, 202, 205, 207, 217], "circ": [37, 56, 67, 73, 81, 89], "compon": [37, 38, 52, 56, 58, 71, 83, 89, 92, 107, 114, 117, 130, 131, 135, 142, 167, 172, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 201, 203, 225, 227, 230, 231, 240, 243, 250, 253, 256, 257], "new_nam": 37, "forget": [37, 282], "id_a": 37, "id_b": 37, "commutative_diagram": 37, "quadrupl": [37, 201], "mbox": 37, "hom": 37, "id": [37, 52, 62], "rightarrow": [37, 48, 52, 57, 61, 62, 64, 78, 79, 81, 83, 86, 87, 96, 191, 200, 212, 224, 243, 272], "monoid": 37, "pare1970": 37, "accompani": 37, "premis": 37, "conclus": [37, 56], "carri": [37, 38, 56, 162, 168, 175, 192, 195, 198, 200, 202, 203, 244], "premises_kei": 37, "et": [37, 83, 149, 198, 201, 202, 214, 217], "pareigi": 37, "functor": 37, "1970": [37, 92], "is_subdiagram": 37, "subdiagram": 37, "d1": [37, 52, 180, 192, 212, 225, 250], "subdiagram_from_object": 37, "veryuniqu": 37, "diagram_draw": 37, "diagramgrid": 37, "analys": [37, 104, 106, 137, 225], "drawn": [37, 47, 85, 191, 195, 203], "moprhism": 37, "strive": 37, "nevertheless": 37, "laid": [37, 120, 167], "width": [37, 38, 84, 185, 191, 201, 205, 236], "height": [37, 38, 72, 89, 139, 191, 192, 205, 212, 260], "emploi": [37, 55, 60, 83, 96, 201, 204, 221, 225], "lai": 37, "layout": 37, "sequenti": [37, 40, 57, 62, 250, 252], "test_draw": 37, "five": [37, 45, 81, 102, 205, 218], "lemma": [37, 47, 81, 193], "fivelemma": 37, "five_lemma": 37, "arrowstringdescript": 37, "curving_amount": 37, "looping_start": 37, "looping_end": 37, "horizontal_direct": 37, "vertical_direct": 37, "label_posit": 37, "pic": 37, "princip": [37, 57, 62, 64, 81, 83, 93, 108, 122, 143, 192, 193, 194, 195, 196, 198, 200, 201, 202], "offset": [37, 38, 56, 61, 64, 230], "cell": 37, "vertic": [37, 40, 49, 50, 66, 67, 69, 71, 72, 73, 83, 85, 87, 92, 100, 119, 125, 142, 150, 190, 191, 194, 200, 205, 213, 243, 260], "disregard": 37, "unexplain": 37, "astr": 37, "dr": [37, 58, 205, 221], "12mm": 37, "loop": [37, 38, 96, 106, 123, 180, 191, 202, 205, 221, 240, 243, 277], "correspondingli": 37, "label_displac": 37, "arrow_styl": 37, "dash": 37, "xypicdiagramdraw": 37, "formatt": 37, "utilis": 37, "xypic": 37, "drawer": 37, "xymatrix": 37, "ld": 37, "arrow_formatt": 37, "therebi": 37, "default_arrow_formatt": 37, "farther": 37, "centr": [37, 53, 191], "default_formatt": 37, "45": [37, 56, 61, 72, 92, 96, 102, 201, 202, 218], "_3mm": 37, "default_curving_amount": 37, "cm": [37, 137, 225], "_1cm": 37, "default_curving_step": 37, "h1": [37, 117], "1cm": 37, "rr": [37, 56, 74, 194, 195, 201, 202], "h_": [37, 47, 52, 61, 64, 83], "_2cm": 37, "mask": [37, 205], "diagram_format": 37, "proceed": [37, 39, 81, 83, 136, 199, 215], "xypic_draw_diagram": 37, "shortcut": [37, 56, 88, 189, 205, 213, 217, 282], "insert": [37, 39, 87, 98, 99, 165, 170, 205, 225, 246], "preview_diagram": 37, "png": [37, 84, 92, 99, 100, 104, 185, 191, 205, 208], "brief": [38, 224, 236, 259], "fab": [38, 205], "cse_main": [38, 206, 217], "cse": [38, 97, 110, 159, 206, 217, 238, 244], "meat": 38, "lightweight": [38, 200, 276], "pycod": [38, 205], "lambdarepr": [38, 205, 244], "aesara_funct": [38, 97, 205], "float80": [38, 205], "assign_to": [38, 205], "type_alias": [38, 205], "0l": [38, 205], "powl": [38, 205], "c99": [38, 205, 238], "expm1": [38, 205], "ternari": [38, 56, 205, 218], "thrown": [38, 205], "fcode": [38, 205], "contract": [38, 58, 107, 170, 205, 214, 227, 229, 230, 231, 232], "len_i": [38, 205], "mat_1": 38, "mat_2": 38, "jscode": [38, 205], "user_funct": [38, 205], "argument_test": [38, 205], "cfunction_str": [38, 205], "octav": [38, 137, 238], "custom_funct": [38, 205], "existing_octave_fcn": [38, 205], "is_matrix": [38, 205], "my_mat_fcn": [38, 205], "my_fcn": [38, 205], "mat": [38, 89, 139, 164, 205], "octave_cod": [38, 205], "summat": [38, 55, 56, 60, 61, 64, 170, 199, 201, 205, 208, 217, 225, 226, 229, 230, 231, 237], "mathematica_cod": [38, 205], "g1": [38, 41, 46, 47, 81, 92, 106], "g2": [38, 41, 46, 47, 81, 85, 92, 106], "gamma_1": [38, 109], "gamma_2": [38, 109], "\u03b3\u2081": 38, "\u03b3\u2082": 38, "\u03b2": [38, 190], "h_i": [38, 52], "c89": [38, 205, 238], "julia_cod": [38, 205], "rust_cod": [38, 205], "powi": [38, 205], "make_routin": [38, 238], "f95": [38, 237, 238], "matlab": [38, 110, 137, 238, 278], "breadth": [38, 56, 225], "c_name": [38, 238], "c_code": [38, 238], "h_name": [38, 238], "c_header": [38, 238], "volume_result": 38, "ifndef": [38, 238], "project__test__h": [38, 238], "endif": [38, 238], "preprocessor": [38, 206, 217, 238], "global_var": [38, 238], "insensit": [38, 92, 137, 205, 236, 238], "argument_sequ": [38, 238], "routin": [38, 45, 55, 56, 57, 58, 81, 86, 87, 92, 96, 142, 170, 194, 198, 201, 204, 205, 206, 217, 218, 221, 222, 223, 224, 237, 243, 257], "name_expr": [38, 238], "to_fil": [38, 238], "f_name": [38, 238], "f_code": [38, 238], "choic": [38, 48, 61, 64, 81, 83, 97, 134, 166, 175, 179, 180, 188, 196, 198, 201, 205, 217, 221, 243, 276], "hydrogen": [38, 267], "r_nl": [38, 108, 171], "my_routin": 38, "result_var": [38, 238], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 38, "__________": [38, 193], "\u212f": [38, 142, 190, 205, 272, 276, 278, 282, 283], "assoc_laguerr": [38, 64, 205], "fcn": [38, 238], "result_5397460570204848505": [38, 238], "out_8598435338387848786": [38, 238], "examin": [38, 57, 159, 236, 238, 282], "inputargu": [38, 238], "outputargu": [38, 238], "inoutargu": [38, 238], "disk": [38, 57, 213, 224, 244], "binary_funct": [38, 97, 237], "tensor": [38, 43, 58, 92, 107, 117, 135, 149, 155, 156, 157, 167, 170, 179, 180, 205, 226, 227, 229, 230, 237, 244, 254, 255, 261, 262, 265, 267], "binary_func": [38, 237], "servic": [38, 225], "tempdir": [38, 237], "qho_1d": [38, 146], "psi_n": [38, 146], "y_": [38, 64, 81, 108, 190], "qho": 38, "tmp": 38, "reveal": [38, 96, 224, 277], "subroutin": [38, 47, 166, 198], "autofunc": 38, "dimens": [38, 40, 57, 58, 64, 65, 67, 69, 70, 71, 73, 85, 87, 89, 92, 95, 99, 107, 124, 144, 154, 156, 159, 164, 173, 174, 177, 178, 180, 191, 194, 205, 218, 221, 223, 225, 226, 230, 231, 238, 250, 253, 255, 267], "hbar": [38, 146, 152, 165, 171, 175, 177, 190], "05457162d": 38, "14159265358979d0": 38, "0d0": [38, 205], "74126166983329d": 38, "33": [38, 56, 59, 92, 135, 143, 198, 202, 205, 225], "verbos": [38, 56, 87, 96, 205, 236, 237, 281], "mute": [38, 237], "backend": [38, 84, 97, 98, 104, 123, 125, 131, 185, 202, 237, 244], "auxiliari": [38, 83, 115, 120, 132, 221, 237], "function_nam": [38, 237], "sympy_express": [38, 237], "mandatori": [38, 205, 237], "illustr": [38, 92, 121, 124, 175, 195, 208, 212], "psi_nl": 38, "766": 38, "incur": [38, 97], "get_numpy_arrai": 38, "tight": 38, "temp": [38, 122], "alloc": [38, 62], "fuse": 38, "wise": [38, 39, 62, 87, 194, 198, 205, 211, 237], "unabl": [38, 69, 73, 98, 223, 250, 271, 272], "fortun": [38, 97, 124, 201, 202], "reconnect": 38, "autom": [38, 62, 97, 214, 237, 276], "ideologi": [38, 224], "fashion": [38, 56, 62, 89, 122, 132, 133, 135, 189, 192, 243], "broadcast": [38, 97, 205, 230, 237], "outperform": 38, "jensen": 38, "quantit": [38, 172], "leverag": [38, 97, 205], "ufunc": [38, 97, 237, 244], "fn_numpi": 38, "fn_fortran": 38, "linspac": [38, 79, 97, 120, 137], "xx": [38, 92, 117, 189, 243], "21306132": 38, "98101184": 38, "44626032": 38, "timeit": [38, 202], "10000": [38, 60, 96, 97, 99, 223], "18891601900395472": 38, "004707066000264604": 38, "facil": 38, "comparison": [38, 55, 56, 86, 92, 120, 192, 200, 204, 223, 236, 243], "thereof": [38, 56, 192, 198, 200], "optims_c99": 38, "log1p": [38, 205], "expm1_opt": 38, "log1p_opt": 38, "exp2_opt": 38, "log2_opt": 38, "log2const_opt": 38, "funcminusoneoptim": 38, "func_m_1": 38, "opportunist": 38, "replaceoptim": 38, "catastroph": 38, "replace_in_add": 38, "cost_funct": 38, "prioriti": [38, 79, 110, 120, 189, 244], "__call__": [38, 48, 56, 200], "exp2": [38, 205], "create_expand_pow_optim": 38, "base_req": 38, "is_symbol": [38, 87], "expand_opt": 38, "opt2": 38, "is_funct": 38, "log2": [38, 64, 205], "matin_opt": 38, "matinv_opt": 38, "matrixsolv": [38, 205], "matrix_nod": 38, "numpyprint": 38, "doprint": [38, 205], "seriesapprox": 38, "reltol": 38, "max_ord": 38, "n_point_check": 38, "threshold": [38, 96], "largest": [38, 48, 50, 56, 62, 64, 92, 95, 96, 150, 192, 196, 223, 243], "series_approx2": 38, "1e": [38, 56, 60, 92, 104, 139, 201, 223], "series_approx3": 38, "series_approx8": 38, "sumapprox": 38, "neglect": 38, "2000": [38, 42, 83, 96, 199], "sum_approx3": 38, "sum_approx2": 38, "sum_approx1": 38, "token": [38, 81, 84, 98], "diagram": [38, 45, 85, 99, 123, 124, 125, 130, 150, 230, 255, 277], "codegenast": 38, "assignmentbas": 38, "augmentedassign": 38, "addaugmentedassign": 38, "subaugmentedassign": 38, "mulaugmentedassign": 38, "divaugmentedassign": 38, "modaugmentedassign": 38, "codeblock": [38, 98], "quotedstr": 38, "intbasetyp": 38, "_sizedinttyp": 38, "signedinttyp": 38, "unsignedinttyp": 38, "floatbasetyp": 38, "floattyp": 38, "complexbasetyp": 38, "complextyp": 38, "pointer": [38, 238, 239], "functionprototyp": 38, "functiondefinit": [38, 98], "stream": [38, 57, 206, 217, 243], "functioncal": 38, "breaktoken": 38, "continuetoken": 38, "nonetoken": 38, "float32": [38, 97, 98, 244], "codeprint": 38, "complex_": 38, "bool_": 38, "intc": [38, 98], "intp": 38, "unsign": [38, 61, 217], "int8": 38, "int16": 38, "int32": 38, "int64": [38, 225], "uint8": 38, "uint16": 38, "uint32": 38, "uint64": 38, "x86": 38, "amd64": 38, "complex64": 38, "complex128": 38, "newton": [38, 64, 130, 173, 177, 198, 202], "aug_assign": 38, "tol": [38, 56, 196], "val": [38, 56, 68, 196, 200, 244], "whl": 38, "py_str": 38, "inf": [38, 48, 56, 92, 196, 201, 213, 221, 225], "exec": [38, 56, 84, 244], "1121416371": 38, "909672693737": 38, "867263818209": 38, "865477135298": 38, "865474033111": 38, "1g": 38, "3e": 38, "2003": [38, 190, 199, 205, 218], "source_format": [38, 205], "op": [38, 56, 92, 159, 170, 184, 188, 214, 243, 244], "parametr": [38, 64, 65, 69, 92, 191, 218, 224, 250, 253, 260], "volatil": 38, "binop": 38, "exit": [38, 96, 236], "premad": 38, "break_": 38, "lift": [38, 52, 62, 64, 81, 196, 198, 201], "left_hand_sid": 38, "topological_sort": [38, 243], "postprocess": [38, 201, 206, 217], "topolog": [38, 56, 58, 194, 243], "continue_": 38, "untyp": 38, "compliant": 38, "ok": [38, 48, 205, 221], "elem": [38, 47, 192], "ijk": [38, 230], "stride": [38, 230], "lmn": 38, "cast_nocheck": 38, "alia": [38, 49, 56, 66, 72, 87, 88, 90, 94, 154, 163, 170, 192, 195, 196, 200, 204, 213, 236, 246, 282], "nbit": 38, "storag": [38, 56, 92, 164, 190, 198], "nmant": 38, "mantissa": 38, "nexp": 38, "half_precis": 38, "f16": 38, "65504": 38, "tini": [38, 56], "ep": [38, 47, 55, 196, 200, 201], "decimal_dig": 38, "cast_check": 38, "1e5": 38, "cast": [38, 89, 274], "subnorm": [38, 47], "idempot": 38, "loos": [38, 56], "overflow": [38, 240], "max_expon": 38, "min_expon": 38, "for_i": 38, "for_ji": 38, "for_kji": 38, "function_arg": [38, 236], "fcall": 38, "bar": [38, 64, 121, 130, 159, 165, 246, 267], "baz": 38, "return_typ": 38, "fp": [38, 39, 56, 201, 207], "from_functionprototyp": 38, "prototyp": [38, 97, 238], "value_const": 38, "pointer_const": 38, "attr_param": 38, "looking_for": 38, "as_declar": 38, "formatstr": 38, "5g": 38, "stdout": [38, 236], "stderr": 38, "oppos": [38, 244, 272], "_field": 38, "_construct_": 38, "not_in_arg": 38, "float16": 38, "inttyp": 38, "super": [38, 64, 196, 205, 250, 252], "from_expr": [38, 201], "42": [38, 45, 56, 59, 61, 69, 70, 72, 87, 88, 90, 92, 94, 96, 196, 201, 218, 236], "v6": 38, "123456": [38, 56, 96], "v10": 38, "12345": [38, 60], "67894": 38, "boost_mp50": 38, "boost": 38, "multiprecis": [38, 195], "cpp_dec_float_50": 38, "r37": 38, "rtol": 38, "atol": 38, "precision_target": 38, "v18": 38, "123456789012345646": 38, "123456789012345649": 38, "Will": [38, 92, 98, 200, 205, 236], "decl1": 38, "decl2": 38, "alt": 38, "secondarili": [38, 201], "mathcin": 38, "cbrt": [38, 62, 205], "minu": [38, 55, 56, 186, 198, 205, 257], "0e": [38, 56], "fma": [38, 205], "cpu": [38, 97, 137], "hypot": [38, 205], "hypotenus": [38, 72], "log10": [38, 205], "ten": [38, 97], "plu": [38, 55, 92, 98, 137, 150, 201, 205, 215, 244], "famili": [38, 40, 74, 83, 193], "commaoper": 38, "goto": 38, "preincrement": 38, "postdecr": 38, "decrement": [38, 240], "postincr": 38, "increment": [38, 47, 48, 49, 55, 72, 96, 225], "predecr": 38, "alignof": 38, "sizeof": 38, "struct": [38, 190], "dsign": 38, "arrayconstructor": 38, "ac": [38, 48, 68, 102, 117, 135, 147, 218, 225, 243, 246], "95": [38, 54, 96, 198, 205, 221, 223, 238], "do1": 38, "1d0": 38, "do2": 38, "extent": 38, "intent_out": 38, "dim": [38, 58, 71, 97, 172, 178, 205, 228, 231, 265], "arr": 38, "fortranreturn": 38, "aid": [38, 122], "implieddoloop": 38, "idl": 38, "signallib": 38, "prog": [38, 149], "myprogram": 38, "mysub": 38, "subroutinecal": 38, "passs": 38, "inout": 38, "bind_c": 38, "sum_": [38, 55, 56, 57, 61, 64, 81, 83, 87, 89, 96, 190, 201, 202, 207, 208, 215, 221, 225], "cmplx": [38, 205], "intent_in": 38, "intrins": 38, "isign": 38, "lbound": 38, "lb": [38, 78, 240], "literal_dp": 38, "num": [38, 47, 56, 96, 106, 196, 217, 221, 240, 246], "literal_sp": 38, "reshap": [38, 87, 120, 137, 226, 232, 243], "arrayexpr": 38, "shp": 38, "metric": [38, 48, 52, 58, 107, 217, 221, 224, 231], "snr": 38, "convolution2d": 38, "use_renam": 38, "ren": 38, "thingi": 38, "newtons_method": 38, "itermax": 38, "counter": [38, 56, 62, 68, 87, 100, 102], "raphson": 38, "criterion": [38, 47, 136, 193, 198], "netwon": 38, "algo": [38, 48], "r38": 38, "27s_method": 38, "newtons_method_funct": 38, "param": [38, 58, 92, 218], "render_as_modul": 38, "py_mod": 38, "865474033102": 38, "render_as_source_fil": 38, "printer_set": 38, "fcodeprint": [38, 205], "fpgroup": [39, 47], "studi": [39, 46, 55, 58, 92, 189, 192, 198, 201, 218, 225], "combinator": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 89, 96, 207, 226, 231, 240, 243, 262, 276, 282], "free_group": [39, 46, 47], "vfree_group": 39, "xfree_group": 39, "fp_group": [39, 47], "coset_enumeration_r": 39, "fall": [39, 55, 56, 61, 84, 185, 200, 205, 218, 222, 225], "famou": [39, 64, 83, 96, 218], "langl": [39, 47, 149, 190], "rangl": [39, 47, 149, 167, 190], "gen0": 39, "gen1": 39, "gen_": 39, "freegroup": 39, "x_2": [39, 46, 61, 78, 165, 193, 198, 201, 207, 218, 224], "x_3": [39, 46, 78, 165], "s_1": 39, "r_1": [39, 192, 202], "s_2": 39, "r_2": 39, "s_k": 39, "r_k": [39, 163], "s_i": [39, 52, 83, 85], "r_i": [39, 202], "reduct": [39, 92, 116, 198, 200, 218], "ho05": [39, 46], "cdhw73": 39, "hav91": 39, "coset_enumeration_c": 39, "coset_enumer": 39, "relator_bas": 39, "coset_table_bas": 39, "influenc": [39, 99, 192, 193], "coset_table_max_limit": 39, "4096000": 39, "safeti": [39, 48, 90], "max_coset": 39, "cox": [39, 199, 201], "c_r": [39, 215], "50": [39, 47, 59, 60, 61, 64, 72, 92, 96, 99, 100, 143, 201, 205, 214, 223], "max_stack_s": 39, "500": [39, 60, 117], "deduction_stack": 39, "stack": [39, 73, 87, 137, 194, 200, 205, 234, 240, 278], "occurr": [39, 56, 96, 120, 180, 217, 225], "exce": [39, 96, 231], "modest": 39, "low_index_subgroup": 39, "conjugaci": [39, 47], "coset_t": [39, 47], "reidemeister_present": 39, "y_1": [39, 218, 225], "y_2": [39, 218, 225], "john": [39, 47, 64, 201, 218, 221], "cannon": 39, "lucien": 39, "dimino": [39, 47], "georg": [39, 192, 221, 243], "hava": 39, "jane": 39, "watson": [39, 217], "comp": [39, 221], "463": [39, 136], "490": [39, 48], "1973": [39, 57, 187], "derek": [39, 46], "holt": [39, 46, 47, 54], "chapman": [39, 46], "hall": [39, 46, 225], "crc": [39, 46, 48], "2005": [39, 46, 83, 96, 201], "xvi": [39, 46], "514": [39, 46, 199], "symposium": [39, 81, 198, 199, 215], "issac": [39, 83, 199, 223], "bonn": 39, "1991": [39, 199], "191": [39, 224], "199": 39, "acm": [39, 55, 81, 83, 199, 215, 221, 223], "graycod": 40, "kw_arg": [40, 50, 170, 230, 231], "hamiltonian": [40, 161], "edg": [40, 49, 50, 85, 194, 205, 224, 243, 281], "hamilton": [40, 87], "vertex": [40, 50, 67, 72, 83, 194], "000": [40, 60, 83, 86, 164, 243], "110": [40, 86, 221, 223, 237, 243], "010": [40, 86, 243], "011": [40, 86, 164, 243], "111": [40, 59, 66, 86, 96, 243], "101": [40, 64, 86, 96, 164, 243], "001": [40, 60, 86, 139, 243], "delet": [40, 85, 87, 92, 202, 246, 282], "statist": [40, 57, 64, 225, 236, 276], "manner": [40, 57, 64, 134, 168, 186, 218, 221, 226, 243, 259], "generate_grai": 40, "0000": 40, "0001": [40, 60], "0011": [40, 51], "0010": 40, "0110": 40, "0111": [40, 164], "0101": [40, 164], "0100": 40, "1100": 40, "1101": 40, "1111": 40, "1110": 40, "1010": 40, "1011": 40, "1001": 40, "r39": 40, "nijenhui": 40, "wilf": [40, 55, 223], "1978": [40, 47, 175, 199], "r40": 40, "knuth": [40, 48, 240], "2011": [40, 48, 81, 96, 187, 214], "art": [40, 48, 192, 205, 207, 240], "vol": [40, 48, 57, 61, 64, 81, 92, 107, 200, 201, 215, 240, 243], "addison": [40, 48, 96, 199], "weslei": [40, 48, 96, 199], "r41": 40, "brgc": 40, "6th": [40, 96], "unrank": [40, 45, 47, 48, 50], "r42": 40, "statweb": 40, "stanford": 40, "susan": 40, "s208": 40, "node12": 40, "tail": [40, 55, 56, 196, 225], "00010": 40, "random_bitstr": 40, "bitlist": [40, 51], "gray_to_bin": 40, "endian": 40, "bin_to_grai": 40, "get_subset_from_bitstr": 40, "bitstr": 40, "graycode_subset": 40, "group_construct": 41, "directproduct": [41, 44], "__mul__": [41, 47, 87, 92, 196, 200], "shift": [41, 47, 48, 50, 57, 64, 67, 71, 73, 86, 191, 196, 198, 201, 208, 215, 223, 225], "gn": 41, "named_group": [41, 44, 46, 47, 53, 54], "cyclicgroup": [41, 44, 47], "perm_group": [41, 46, 47, 48, 53, 54], "permutationgroup": [41, 44, 46, 47, 48, 53, 54], "group_numb": 42, "is_nilpotent_numb": 42, "r43": 42, "randprim": [42, 96], "pakianathan": 42, "shankar": 42, "monthli": [42, 57, 92], "107": [42, 199], "631": 42, "634": 42, "is_abelian_numb": 42, "r44": 42, "is_cyclic_numb": 42, "r45": 42, "polyhedron": [43, 47, 83, 243, 262], "prufer": [43, 262], "grai": [43, 51, 84, 139, 185, 191, 262], "nilpot": [43, 47, 92, 262], "abelian": [43, 44, 47, 85, 175, 192, 262], "cyclic": [43, 44, 47, 48, 49, 59, 87, 96, 231, 243, 262], "polycycl": [43, 47, 262], "symmetricgroup": [44, 46, 47, 53, 54], "transposit": [44, 47, 48, 57, 87, 89, 227], "is_group": [44, 47], "generate_schreier_sim": [44, 47], "af": [44, 47, 53, 137], "dihedralgroup": [44, 47, 54], "alternatinggroup": [44, 47, 53], "r46": 44, "symmetric_group": 44, "generators_and_rel": 44, "dihedr": [44, 48], "d_n": [44, 85, 201], "gon": 44, "bab": 44, "generate_dimino": [44, 47], "perm": [44, 46, 47, 48, 49, 54, 61, 87, 89, 92, 226], "cyclic_form": [44, 48, 49], "r47": 44, "dihedral_group": 44, "31": [44, 56, 59, 60, 72, 96, 135, 190, 201, 218], "ex": [44, 83, 107, 119, 195, 200, 201, 231, 239], "r48": 44, "armstrong": 44, "abeliangroup": [44, 47], "cyclic_ord": 44, "r49": 44, "groupprop": [44, 47], "subwiki": [44, 47], "structure_theorem_for_finitely_generated_abelian_group": 44, "multiset_partit": [45, 61, 81, 240, 243], "rg": 45, "growth": [45, 96, 198, 272], "from_rg": 45, "abcd": [45, 49, 170, 243, 246], "cbead": 45, "sort_kei": [45, 56, 221], "ti": [45, 48, 56, 96], "integerpartit": [45, 243], "summand": [45, 200], "r50": 45, "partition_": [45, 61], "28number_theori": 45, "as_dict": [45, 195, 201], "as_ferr": 45, "char": 45, "ferrer": 45, "next_lex": [45, 48], "lexic": [45, 150, 243], "prev_lex": 45, "random_integer_partit": 45, "seed": [45, 47, 56, 57, 66, 69, 70, 92, 96, 198, 225, 236, 243], "85": [45, 60, 61, 92, 96, 122, 168, 190, 225], "rgs_gener": 45, "37": [45, 57, 62, 66, 92, 96, 100, 190, 205, 218], "52": [45, 61, 96, 99, 100, 190, 204, 218, 221, 243, 272], "151": 45, "203": [45, 61], "rgs_enum": 45, "rgs_unrank": 45, "rgs_rank": 45, "pcgroup": 46, "pcg": 46, "pc_seri": [46, 47], "polycyl": 46, "pc_present": 46, "pc_sequenc": [46, 47], "miss": [46, 47, 73, 205, 223, 238, 282], "adjac": [46, 47, 48, 56, 61, 106, 142, 194, 243], "der": [46, 47], "relative_ord": [46, 47], "polycyclic_group": [46, 47], "gen": [46, 47, 52, 53, 54, 56, 92, 192, 195, 196, 198, 200, 201, 202, 203, 211, 217, 220, 223], "is_ident": [46, 48, 56], "poss": [46, 122, 189], "pc_group": 46, "a_j": [46, 64, 81, 175, 198, 207, 215], "notin": [46, 81, 213], "_order": 46, "minimal_uncollected_subword": 46, "subword_index": 46, "i_1": [46, 170, 201, 226], "a_1": [46, 47, 57, 64, 78, 81, 87, 92, 107, 170, 175, 193, 198, 215, 218, 221, 225, 282], "i_r": 46, "a_r": [46, 215], "i_2": [46, 170, 201], "s_": [46, 52, 120, 198], "s_j": [46, 85, 198], "x3": [46, 56, 61, 195, 221, 225], "collected_word": 46, "free_to_perm": 46, "bottom": [46, 47, 56, 57, 72, 87, 92, 95, 119, 200, 205, 214, 260], "pictur": [46, 205], "x_3x_2": 46, "x_3x_1": 46, "x_2x_1": 46, "x_3x_0": 46, "x_2x_0": 46, "x_1x_0": 46, "varii": 46, "derived_seri": [46, 47], "pc_resent": 46, "k_arrai": 46, "array_form": [46, 48, 49], "v_arrai": 46, "e_1": [46, 92, 192, 198, 201], "e_n": [46, 61, 85, 92, 146, 192, 201], "exponent_vector": 46, "leading_expon": 46, "dup": [47, 196], "pn": [47, 124, 134], "motion": [47, 110, 114, 115, 116, 119, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 137, 138, 184, 185, 188, 189, 225], "front": [47, 56, 122, 123, 139, 169, 196, 198, 201, 205, 217, 282], "face": [47, 49, 69, 83, 120, 198, 202, 205, 218, 260, 278], "rubik": 47, "3674160": 47, "pgroup": [47, 49], "corner": [47, 49, 87, 201, 221, 224, 244], "reset": [47, 49, 191, 198, 201, 236, 239, 241], "p10": 47, "make_perm": 47, "r51": 47, "eick": [47, 54], "brien": [47, 54], "r52": 47, "seress": 47, "r53": 47, "schreier_vector": 47, "r54": 47, "nielsen_transform": 47, "product_replacement_algorithm": 47, "r55": 47, "frank": [47, 48, 92], "celler": 47, "charl": 47, "leedham": 47, "green": [47, 131, 191], "scott": 47, "murrai": 47, "alic": [47, 57], "niemey": 47, "r56": 47, "block_": 47, "28permutation_group_theori": 47, "r57": 47, "algorithmist": 47, "php": [47, 64, 96, 218, 225], "union_find": 47, "r58": 47, "multiply_transitive_group": 47, "r59": 47, "center_": 47, "28group_theori": 47, "centralizer_and_norm": 47, "derived_subgroup": 47, "nilpotent_group": 47, "colost": 47, "hulpk": 47, "cgt": 47, "cgtnote": 47, "__contains__": 47, "__weakref__": [47, 87], "weak": [47, 56, 87, 195, 198], "_coset_repres": 47, "hg": 47, "transvers": [47, 52, 54, 143, 144], "coset_transvers": 47, "_distinct_primes_lemma": 47, "_element": 47, "_eval_is_alt_sym_monte_carlo": 47, "05": [47, 78, 104, 187, 190], "mont": 47, "carlo": 47, "candidat": 47, "randomli": [47, 56, 57, 96, 164], "n_ep": 47, "_check_cycles_alt_sym": [47, 54], "_eval_is_alt_sym_na": 47, "only_sym": 47, "only_alt": 47, "_p_elements_group": 47, "subgroup": [47, 48, 52, 54, 85, 96], "_random_pr_init": 47, "_random_prec_n": 47, "modif": [47, 62, 92, 224, 225, 240], "69": [47, 92, 223, 240], "71": [47, 72, 92, 173], "_random_gen": 47, "append": [47, 56, 57, 92, 100, 137, 165, 191, 196, 205, 223, 226, 238, 239, 243, 282], "accumul": [47, 236, 240], "random_pr": 47, "chosen": [47, 48, 57, 58, 69, 70, 92, 96, 99, 138, 172, 175, 191, 192, 196, 198, 200, 205, 212, 215, 221, 225, 236, 250], "gh": [47, 193, 224, 231], "eventu": [47, 64, 83, 191, 192, 212, 238, 243], "_sylow_alt_sym": 47, "sylow": 47, "p_1": [47, 52, 57, 74, 96, 188, 215, 218], "p_2": [47, 57, 74, 96, 188, 215], "p_p": 47, "sylow_subgroup": 47, "is_alt_sym": [47, 54], "_union_find_merg": 47, "not_rep": 47, "atkinson": 47, "83": [47, 204], "87": [47, 62, 92, 96], "minimal_block": 47, "_union_find_rep": 47, "r60": 47, "r66": 47, "compress": [47, 92, 95, 102], "r62": 47, "r68": [47, 48], "_verifi": 47, "_h": [47, 224], "gens_k": 47, "rels_k": 47, "gens_h": 47, "inject": [47, 56, 192, 196, 201, 278], "homomorph": 47, "rels_h": 47, "strong_present": 47, "abelian_invari": 47, "isomorph": [47, 50, 192, 195, 198, 200], "t_1": [47, 61, 218], "t_2": [47, 61, 218], "t_r": [47, 135, 231], "542": 47, "adopt": [47, 231], "schreier": [47, 52, 54], "sim": [47, 52, 54, 81], "b_1": [47, 54, 64, 78, 81, 192, 215, 218, 221, 282], "b_2": [47, 54, 64, 78, 215, 221], "dot": [47, 48, 52, 54, 57, 69, 71, 78, 87, 92, 106, 122, 123, 124, 127, 128, 129, 132, 133, 134, 135, 137, 154, 180, 182, 185, 188, 189, 190, 192, 193, 198, 201, 205, 224, 225, 243, 250, 254, 256, 257], "b_k": [47, 54, 57, 61, 64, 207, 208], "strong": [47, 52, 53, 54, 96, 97], "89": [47, 54, 83], "55": [47, 59, 61, 92, 190, 191, 201, 218], "57": [47, 92, 96, 225], "coset": [47, 52, 200], "strong_gen": [47, 53, 54], "basic_transvers": [47, 54], "basic_orbit": [47, 54], "basic_stabil": 47, "baseswap": 47, "po": [47, 81, 86, 87, 117, 135, 137, 196, 223], "strong_gens_distr": [47, 54], "swap": [47, 48, 49, 87, 92, 150, 154, 163, 225, 243], "orbit": [47, 54, 170, 171, 173], "b_": [47, 52, 54, 56, 61, 64, 81, 89, 106, 207, 215, 218, 226], "b_i": [47, 52, 54, 81, 192, 215], "la": [47, 137, 175], "vega": 47, "testutil": [47, 53, 54], "_verify_bsg": [47, 53, 54], "schreier_sim": [47, 53, 54], "bsg": [47, 52, 54, 231], "102": [47, 92], "98": [47, 57, 136, 201, 221], "pseudocod": 47, "beta_": 47, "g_": [47, 54, 55, 64, 81, 218], "foral": [47, 55, 58, 175], "zg": 47, "gz": 47, "c_g": 47, "sg": [47, 225, 231], "is_subgroup": 47, "subgroup_search": 47, "hgh": 47, "closur": [47, 53, 79, 150, 200, 213], "composition_seri": 47, "h_0": [47, 52], "h_1": [47, 52, 224], "h_2": [47, 224], "1024": [47, 205, 225], "512": [47, 64], "128": [47, 61, 64, 66, 96, 199, 205], "32": [47, 59, 62, 64, 66, 92, 96, 99, 104, 135, 199, 201, 202, 214, 215, 218, 225, 236], "243": [47, 64, 223], "81": [47, 61, 66, 87, 92, 96, 120, 122, 190, 204], "conjugacy_class": 47, "xax": 47, "s_3": 47, "s3": [47, 55, 106, 208, 218], "feasibl": [47, 106], "resiz": [47, 48, 87, 89], "coset_factor": 47, "factor_index": 47, "_basic_orbit": 47, "u1": [47, 96, 120, 122, 123, 124, 125, 127, 128, 132, 134, 137, 180, 182, 184, 185, 188, 221], "u2": [47, 95, 96, 120, 122, 123, 124, 125, 127, 128, 132, 137, 180, 184, 188, 221], "_strip": [47, 54], "coset_rank": 47, "lexicograph": [47, 48, 51, 52, 56, 198, 201, 243], "coset_unrank": 47, "standardis": [47, 195], "subsect": [47, 257], "compris": [47, 57, 89, 117, 135, 138, 201, 243], "g_0": [47, 218], "g_1": [47, 201, 212, 218, 221], "g_2": [47, 85, 212, 221], "g_i": [47, 212], "g_k": 47, "tetrahedron": [47, 49], "r64": 47, "axiom": [47, 192], "doy": 47, "sc": [47, 83], "thesi": [47, 56, 212, 250], "generator_product": 47, "sn": [47, 48, 55, 78], "is_abelian": 47, "_random_prec": 47, "probabl": [47, 56, 61, 64, 68, 96, 120, 164, 168, 215, 221, 224, 225, 237, 274, 280], "transit": [47, 137, 198, 225], "82": [47, 83, 92, 225], "proport": [47, 57, 212], "226": 47, "227": 47, "is_altern": 47, "quicker": [47, 96], "taxonomi": 47, "is_cycl": 47, "p_": [47, 52, 56, 83, 175, 218, 221, 226], "p_i": [47, 52, 96], "equiv": [47, 57, 61, 96, 200, 215, 218], "pmod": [47, 56, 57, 61, 92, 215], "p_j": [47, 52], "r65": 47, "35": [47, 50, 59, 61, 69, 70, 83, 92, 96, 122, 200, 205, 218, 221, 225], "rose": 47, "is_elementari": 47, "is_nilpot": [47, 92], "lower_central_seri": 47, "is_solv": 47, "is_norm": [47, 168], "gr": 47, "is_perfect": [47, 96], "is_polycycl": 47, "is_primit": [47, 196, 201], "cardin": [47, 48, 51, 192, 213], "badli": 47, "random_stab": 47, "g3": [47, 106], "s5": 47, "is_symmetr": [47, 87], "is_transit": 47, "is_trivi": 47, "cba": [47, 226, 243], "mainli": [47, 64, 92, 97, 175, 185, 198, 215, 218, 221], "max_div": 47, "siev": [47, 96], "nonempti": 47, "gb": 47, "moreov": [47, 57, 81, 174, 186, 192, 193, 198, 206, 255], "congruenc": [47, 56, 96, 215, 218], "p_0": [47, 52, 74, 215, 218], "maxim": [47, 57, 85, 192, 196, 200, 212, 214], "intransit": 47, "normal_closur": 47, "adjoin": [47, 193], "yx": [47, 189], "73": [47, 55, 56, 69, 96, 221], "74": [47, 61, 96], "orb": 47, "78": [47, 70, 92, 96, 100, 175, 221, 225], "orbit_transvers": 47, "orbit_rep": 47, "send": [47, 56, 57, 62, 96, 192, 221, 223], "proof": [47, 50, 81, 83, 224], "79": [47, 48, 100], "pointwise_stabil": 47, "pointwis": [47, 54], "p_k": [47, 96], "p20": 47, "stab": 47, "schreier_sims_increment": [47, 54], "polycyclicgroup": 47, "eliminate_gen": 47, "gen_count": 47, "b1": [47, 52, 64, 96, 99, 100, 111, 120, 137, 180, 196, 205, 215, 218, 221, 256], "b_r": 47, "slp_dict": 47, "seq": [47, 56, 59, 92, 196, 198, 201, 211, 223, 243], "93": [47, 199], "schreier_sims_random": [47, 54], "consec_succ": 47, "consec": 47, "_succ": 47, "97": [47, 57, 96, 198], "sift": [47, 54, 243], "amend": 47, "unsuccess": [47, 54], "accordingli": [47, 193, 200], "halt": 47, "signifi": [47, 56, 99, 201, 225], "g_t": 47, "leq": [47, 55, 57, 64, 81, 92, 96, 190, 198, 200, 211, 212, 218, 225], "prop": [47, 200], "init_subgroup": 47, "supergroup": 47, "sought": [47, 96, 155, 165, 217, 223, 224], "prune": 47, "prop_even": 47, "lengthi": 47, "114": [47, 96], "117": [47, 64], "terribl": 47, "crucial": [47, 55, 195], "len1": 47, "len2": 47, "len3": 47, "transitivity_degre": 47, "fold": [47, 56, 62, 205, 212, 217], "a_2": [47, 57, 78, 92, 198, 215, 218, 221, 225, 282], "a_k": [47, 57, 202, 208], "arrang": [48, 106, 115, 135, 137, 214, 218, 231], "r69": 48, "reorder": [48, 55, 62, 170, 201, 221, 225, 243], "pretty_print": [48, 84, 117, 122, 123, 127, 128, 129, 131, 132, 133, 135, 138, 180, 182, 184, 185, 188, 189, 205], "understood": [48, 96, 175, 192, 196], "economi": 48, "caution": [48, 56, 62, 205, 217], "indexerror": [48, 92, 201], "autos": [48, 95], "watch": 48, "print_cycl": 48, "econom": [48, 83, 243], "retain": [48, 56, 62, 64, 83, 98, 201, 206, 214, 217], "biject": [48, 50, 57, 87, 192], "full_cyclic_form": 48, "rmul": 48, "unrank_lex": 48, "r73": 48, "zo42": 48, "from_sequ": 48, "a1": [48, 52, 56, 84, 87, 96, 100, 120, 137, 144, 221, 225, 226, 256, 282], "a2": [48, 52, 56, 85, 87, 96, 100, 120, 137, 144, 194, 225, 226, 256, 282], "a3": [48, 52, 56, 85, 87, 137, 256, 282], "perfectli": [48, 55, 56, 57, 198, 201, 204], "skiena": 48, "ma": [48, 55, 125], "1990": [48, 81, 215, 250], "r70": 48, "wendi": 48, "myrvold": 48, "ruskei": 48, "2001": [48, 96, 199], "lett": 48, "septemb": [48, 240], "281": 48, "284": [48, 96], "1016": 48, "s0020": 48, "0190": 48, "01": [48, 56, 60, 120, 164, 199, 217, 243], "00141": 48, "r71": 48, "kreher": 48, "stinson": 48, "1999": [48, 92, 199, 204, 221], "r72": 48, "graham": [48, 61, 62, 96], "patashnik": 48, "foundat": [48, 199, 200], "1994": [48, 198, 199, 201], "product_and_invers": 48, "r74": 48, "lehmer_cod": 48, "appliedpermut": 48, "magic": [48, 217, 236, 274], "attatch": 48, "_array_form": 48, "ascent": 48, "ie": [48, 218], "descent": [48, 218], "fg": [48, 58, 221, 224], "gf": [48, 57, 192, 194, 195, 198, 200], "r75": 48, "commutes_with": [48, 231], "cycle_structur": 48, "from_inversion_vector": 48, "get_adjacency_dist": 48, "n_adj": 48, "reev": 48, "colin": 48, "landscap": 48, "annal": 48, "86": [48, 92, 136, 204, 214], "473": 48, "josephu": 48, "get_precedence_matrix": 48, "get_precedence_dist": 48, "get_adjacency_matrix": 48, "get_positional_dist": 48, "subscript": [48, 196, 205, 215, 218, 243], "inversion_vector": 48, "lesser": [48, 102, 201], "lie": [48, 58, 70, 71, 72, 201, 225, 261, 268], "lehmer": 48, "ith": [48, 85, 96, 196, 202, 224, 225], "variat": [48, 56, 198, 212, 221], "r76": 48, "eng": 48, "chula": 48, "piak": 48, "algo2008": 48, "htm": [48, 64, 83, 218], "is_singleton": 48, "is_odd": 48, "shuffl": [48, 92, 282], "012345": 48, "345": 48, "253": 48, "2531": 48, "25314": 48, "253140": 48, "r77": 48, "flavius_josephu": 48, "r78": 48, "josephus_problem": 48, "r79": 48, "wou": 48, "burtonl": 48, "trim": [48, 134], "unmov": 48, "mul_inv": 48, "next_nonlex": 48, "nonlex": 48, "rank_nonlex": 48, "unrank_nonlex": 48, "next_trotterjohnson": [48, 243], "trotter": 48, "johnson": [48, 92], "generate_bel": [48, 243], "rank_trotterjohnson": 48, "unrank_trotterjohnson": 48, "_af_par": 48, "pseudo": [48, 92, 96, 196, 198, 201], "inv_perm": 48, "enforc": [48, 122], "rmul_with_af": 48, "ascend": [48, 243], "r80": 48, "transposition_": 48, "28mathemat": [48, 56, 213], "flexibl": [48, 56, 120, 137, 188, 191, 195, 224, 272], "investig": [48, 81, 190, 192, 215, 243, 274], "cn": [48, 205, 281], "2n": [48, 55, 61, 64, 83, 87, 102, 107, 133, 190, 208, 215], "dn": [48, 225], "klein": 48, "s4": [48, 106], "polyhedr": 49, "psg": 49, "platon": 49, "solid": [49, 70, 114, 191, 260], "tetrahedr": 49, "octahedr": 49, "icosahedr": 49, "r81": 49, "polyhedralgroup": 49, "polyhedra": 49, "shadow": 49, "h5": 49, "heinz": 50, "caylei": [50, 87], "r82": 50, "labeledtre": 50, "tree_repr": 50, "prufer_rank": 50, "prev": [50, 56], "36": [50, 57, 61, 72, 83, 87, 92, 96, 100, 201, 205, 218, 221, 225, 260], "prufer_repr": 50, "record": [50, 56, 200, 205, 236], "to_pruf": 50, "778": 50, "779": 50, "777": [50, 59], "1296": 50, "to_tre": 50, "r83": 50, "hamberg": 50, "erlend": 50, "2010": [50, 222, 243], "06": [50, 56, 122, 190, 225], "compact": [50, 56, 103, 137, 168, 185, 201, 205, 223, 240], "next_binari": 51, "prev_binari": 51, "bitlist_from_subset": 51, "subset_from_bitlist": 51, "superset_s": 51, "iterate_binari": 51, "iterate_graycod": 51, "prev_grai": 51, "next_grai": 51, "next_lexicograph": 51, "prev_lexicograph": 51, "rank_binari": 51, "unrank_binari": 51, "rank_grai": 51, "unrank_grai": 51, "rank_lexicograph": 51, "43": [51, 92, 96, 99, 100, 225, 282], "super_set": 51, "subset_indic": 51, "ksubset": 51, "itertool": [51, 243], "tensor_can": [52, 231], "msym": 52, "contravari": [52, 92, 231, 232], "covari": [52, 58, 92, 225, 231, 232], "d0": 52, "base_i": 52, "gens_i": 52, "n_i": [52, 198, 223], "sym_i": 52, "failur": [52, 60, 73, 81, 96, 225, 236, 282], "canonicalize_na": 52, "exchang": [52, 57, 92, 190, 194, 243], "anticommut": [52, 157, 159, 169, 170, 231, 267], "canonical_fre": 52, "slot": [52, 154, 226, 230, 231, 277], "residu": [52, 57, 96, 198, 215], "tensor_gen": 52, "list_free_indic": 52, "double_coset_can_rep": 52, "reintroduc": 52, "a_": [52, 56, 57, 64, 81, 85, 87, 89, 106, 107, 135, 207, 215, 218, 221, 223, 225, 226], "antisymmetr": [52, 58, 87, 170, 231], "d2": [52, 180, 192, 212, 225, 243, 250], "ord": [52, 57, 92], "t_c": 52, "get_symmetric_group_sg": [52, 231], "bsgs_direct_product": 52, "base2a": 52, "gens2a": 52, "t0": 52, "t1": [52, 72, 73, 96, 111, 117, 218, 225], "a_m": [52, 221], "a_n": [52, 57, 64, 81, 85, 175, 193, 198, 208, 218, 221, 282], "_a": [52, 64, 170, 201], "_b": [52, 64, 170], "base_f": 52, "gens_f": 52, "base1": 52, "gens1": 52, "base_a": 52, "gens_a": 52, "sgen": 52, "s_transvers": 52, "butler": [52, 231], "portug": [52, 231], "grow": [52, 56, 81, 92, 96, 195, 198], "computation": [52, 62, 114, 115, 116], "absenc": [52, 86], "observ": [52, 78, 81, 159, 189, 192, 215, 218, 221, 225, 259, 282], "opposit": [52, 72, 86, 87, 111, 193, 196, 213, 217, 224, 232, 243, 250, 252, 282], "ind": [52, 207, 231], "d3": [52, 212], "a0": [52, 221, 282], "a4": [52, 56, 85, 137, 282], "a5": [52, 56], "leftrightarrow": 52, "_af_rmul": 52, "t_": [52, 61], "b0": [52, 64, 196, 215, 221], "d_": [52, 215], "p0": [52, 66, 200, 221], "dbase": 52, "recomput": [52, 201], "d_i": [52, 81, 175], "s_0": 52, "d_0": [52, 57], "b_0": [52, 57, 61, 215, 218, 221], "b_j": [52, 54, 64, 81, 215], "sx": 52, "trace": [52, 87, 89, 107, 137, 198, 205, 225, 226, 227, 229, 243, 278], "h_n": [52, 64, 83, 201, 224], "tab1": 52, "get_transvers": 52, "antisym": 52, "base2": 52, "gens2": 52, "_cmp_perm_list": 53, "ls1": 53, "ls2": 53, "_naive_list_centr": 53, "_verify_centr": 53, "_verify_normal_closur": 53, "_base_ord": 54, "base_ord": 54, "backtrack": 54, "108": [54, 96, 100], "132": [54, 61, 180], "r84": 54, "_distribute_gens_by_bas": 54, "_strong_gens_from_distr": 54, "_orbits_transversals_from_bsg": 54, "_handle_precomputed_bsg": 54, "transversals_onli": 54, "slp": 54, "_remove_gen": 54, "new_gen": 54, "r85": 54, "r86": 54, "recurr": [55, 61, 78, 92, 200, 211, 217, 221, 225, 245], "annihil": [55, 74, 75, 79, 146, 170, 223], "is_hypergeometr": 55, "binomi": [55, 60, 61, 64, 96, 201, 205, 210, 217, 221, 225, 243, 282], "rf": [55, 61, 201], "ff": [55, 57, 61, 190, 193, 194, 195, 200, 201], "speci": [55, 56], "rise": [55, 61, 64, 190, 217, 221, 225, 254], "hypersimp": [55, 217], "quotient": [55, 56, 59, 62, 96, 192, 193, 195, 198, 201, 215, 217, 221], "dummy_vari": 55, "karr": 55, "quad": [55, 56, 58, 60, 64, 83, 87], "exclus": [55, 56, 62, 86, 92, 198, 274], "emphas": 55, "typeset": [55, 205], "doit": [55, 56, 58, 61, 62, 64, 83, 89, 106, 147, 149, 151, 162, 164, 167, 168, 170, 180, 190, 201, 207, 212, 217, 221, 222, 225, 227, 250, 253, 254, 256, 257, 272, 277], "seemingli": [55, 224], "nonsens": [55, 64], "r87": 55, "michael": [55, 199, 204], "april": 55, "1981": [55, 199], "305": 55, "350": [55, 117], "dl": [55, 189, 199], "cfm": [55, 199], "doid": [55, 199], "322248": 55, "322255": 55, "r88": 55, "sigma_not": 55, "r89": 55, "empty_sum": 55, "euler_maclaurin": [55, 60], "eval_integr": 55, "maclaurin": [55, 60], "endpoint": [55, 56, 60, 186, 213, 257], "28333333333333": 55, "sstr": [55, 185, 205], "full_prec": [55, 205], "26629073187415": 55, "0175000000000000": 55, "soon": [55, 56, 120, 175, 202], "eval_zeta_funct": 55, "is_absolutely_converg": 55, "sequence_term": 55, "is_converg": 55, "r90": 55, "absolute_converg": 55, "analogi": [55, 198], "prod_": [55, 61, 64, 81, 96, 175, 215], "respons": [55, 56, 106, 120, 191, 238], "diverg": [55, 64, 139, 181, 250, 253], "dirichlet": [55, 64, 225], "r91": 55, "convergence_test": 55, "reverse_ord": 55, "selector": [55, 87, 217, 243], "handi": [55, 56, 92, 205, 277], "s0": [55, 79, 81, 142], "expr_with_intlimit": [55, 83], "exprwithintlimit": [55, 83], "reorder_limit": 55, "r92": 55, "walli": 55, "w2": [55, 144], "w2e": 55, "risingfactori": [55, 61, 64, 205, 207], "combsimp": [55, 56, 61, 217], "pe": 55, "gammasimp": [55, 56, 217], "rewrit": [55, 56, 58, 61, 62, 64, 81, 83, 86, 99, 106, 167, 201, 212, 213, 214, 217, 221, 222, 223, 224, 225, 262, 276, 278], "r93": 55, "r94": 55, "capital_pi_not": 55, "r95": 55, "empty_product": 55, "r96": 55, "infinite_product": 55, "r97": 55, "expr_with_limit": [55, 83], "exprwithlimit": [55, 83], "change_index": 55, "trafo": 55, "newvar": 55, "mapsto": [55, 81, 87, 200], "p3": [55, 66, 68, 69, 71, 72, 106, 191, 195, 214, 225], "has_empty_sequ": [55, 83], "has_reversed_limit": [55, 83], "has_finite_limit": [55, 83], "____": [55, 60, 83, 142, 193, 206, 225, 243, 283], "___": [55, 60, 83, 84, 92, 193, 217, 225, 230, 243, 281], "rubric": [55, 56], "_____": [55, 225], "gosper": 55, "gosper_norm": 55, "monic": [55, 64, 192, 193, 196, 198, 200, 201, 204], "gcd": [55, 56, 57, 92, 96, 166, 195, 196, 199, 200, 201, 205, 217, 218], "gosper_term": 55, "s_n": [55, 201], "f_k": [55, 132, 198], "g_n": [55, 61, 201], "f_n": [55, 61, 64, 192, 198, 201, 221], "gosper_sum": 55, "r98": 55, "marko": 55, "petkovsek": [55, 223], "herbert": 55, "doron": 55, "zeilberg": [55, 223], "ak": [55, 207], "peter": [55, 61, 64, 96, 136, 187, 201, 243], "ltd": 55, "welleslei": 55, "usa": [55, 199], "1997": [55, 81, 96, 199, 215], "convert_xor": [56, 98], "09": [56, 104, 190], "2e": 56, "xor": [56, 59, 86, 98, 205, 274], "sympifyerror": 56, "coerc": [56, 134, 198], "cooper": 56, "sage": [56, 96, 190, 276], "shouldn": [56, 202], "unsanit": [56, 244, 271], "bitcount": 56, "improperli": 56, "unbound": [56, 230], "23903": 56, "fallback": [56, 84, 170, 185, 195, 205, 223], "ast": [56, 205], "mylist1": 56, "mylist": 56, "mylist2": 56, "xxx": [56, 83, 92, 243, 245], "autosimplif": [56, 214, 217], "kern": 56, "r101": 56, "7649": 56, "r100": 56, "r104": 56, "r102": 56, "r103": 56, "r105": 56, "r106": 56, "r107": 56, "r99": 56, "imaginaryunit": [56, 62, 205], "negativeinfin": [56, 205], "complexinfin": [56, 106], "recreat": [56, 114], "isfinit": 56, "__cacheit": 56, "maxsiz": 56, "cacheit": 56, "noqa": [56, 84, 196, 239], "f811": 56, "sympy_use_cach": 56, "cot": [56, 62, 64, 98, 202, 205, 214], "_arg": [56, 62], "as_mut": [56, 88, 89], "as_content_primit": [56, 92, 193, 201], "stub": 56, "as_dummi": [56, 83], "_0": [56, 61, 81, 87, 92, 201, 244], "_r": [56, 170, 215, 224], "bound_symbol": [56, 83], "besid": [56, 198, 223], "typeinfo": 56, "truli": [56, 64, 175], "piec": [56, 60, 215, 238], "numbersymbol": [56, 205], "scan": 56, "appliedundef": 56, "canonical_vari": 56, "class_kei": 56, "sorted_class": 56, "dummy_eq": 56, "eg": [56, 120, 177, 224], "fromit": 56, "has_fre": 56, "has_xfre": 56, "exp_polar": [56, 62, 64, 215], "dif": 56, "_prec": 56, "r_": [56, 108, 171, 202], "repl_dict": 56, "rcall": [56, 58], "simul": [56, 120, 137, 204], "abus": [56, 231], "succe": [56, 81, 86, 96, 160, 200, 223], "newtyp": 56, "intuit": [56, 175, 221], "is_mul": 56, "is_add": [56, 224], "mysin": [56, 244, 271], "_eval_rewrite_as_": 56, "_eval_rewrite_as_co": 56, "tie": [56, 243], "delai": [56, 104, 134, 214, 236, 272], "unsort": [56, 110, 179], "333333333333333333333": 56, "333333333333333314830": 56, "wildcard": [56, 217], "evalfmixin": 56, "registri": 56, "metaprogram": 56, "address": [56, 205, 224], "mostli": [56, 62, 83, 92, 137, 165, 188, 192, 204, 205, 215, 223, 281], "__truediv__": [56, 196], "class_nam": 56, "mysingleton": 56, "_eval_is_g": 56, "_eval_is_eq": 56, "args_cnc": 56, "cset": 56, "split_1": 56, "suppress": [56, 98, 234, 241], "as_coeff_add": 56, "dep": [56, 221], "as_coeff_expon": 56, "as_coeffici": 56, "zz": [56, 61, 78, 79, 83, 89, 92, 93, 96, 117, 189, 192, 193, 194, 195, 198, 200, 201, 202, 203, 220], "coeff_monomi": [56, 201], "polytool": [56, 201, 224], "monomi": [56, 83, 86, 96, 193, 195, 196, 198, 204, 205, 282], "as_coefficients_dict": 56, "inquiri": 56, "expand_mul": [56, 81], "121": [56, 61, 96, 106, 180, 223], "84": [56, 60, 96], "separatevar": [56, 217, 221], "n3": [56, 120], "as_leading_term": [56, 212], "logx": [56, 212], "cdir": 56, "_eval_as_leading_term": 56, "as_numer_denom": [56, 223], "as_ordered_factor": 56, "as_ordered_term": 56, "as_powers_dict": 56, "lost": 56, "as_real_imag": [56, 62, 87, 206], "as_term": 56, "aseri": 56, "hir": 56, "asymptot": [56, 81, 106, 272], "hierarch": 56, "normalis": [56, 207], "induc": [56, 87, 200, 214, 243], "gruntz": [56, 207], "majorli": 56, "mrv": [56, 212], "overal": [56, 177, 191, 223], "rapidli": [56, 60, 81, 212], "till": [56, 99, 100, 120, 221], "r108": 56, "dominik": [56, 207], "proc": [56, 223], "1993": [56, 199], "symp": 56, "239": 56, "244": [56, 198], "r109": 56, "p90": 56, "r110": 56, "asymptotic_expans": 56, "_first": [56, 62], "factor_term": [56, 128, 201, 214, 217], "distribute_order_term": [56, 217], "compute_leading_term": 56, "could_extract_minus_sign": 56, "signsimp": [56, 128, 217], "failing_express": 56, "modulu": [56, 57, 59, 64, 66, 72, 87, 96, 99, 100, 192, 196, 198, 200, 201, 204, 224], "power_bas": [56, 87], "power_exp": [56, 87], "multinomi": [56, 87, 96, 225], "expr_free_symbol": 56, "extract_addit": 56, "extract_multipl": 56, "extract_branch_factor": 56, "allow_half": 56, "fourier_seri": [56, 208], "geto": 56, "getn": 56, "mod_invers": [56, 201], "is_algebraic_expr": 56, "is_rational_funct": 56, "r111": 56, "algebraic_express": 56, "is_const": 56, "constanc": 56, "agre": [56, 57, 64, 71, 81, 215], "test_expr": 56, "prove": [56, 81, 83, 92, 192, 212, 221, 256], "failing_numb": 56, "is_meromorph": 56, "meromorph": [56, 64], "multivalu": [56, 62], "cut": [56, 61, 62, 64, 72, 81, 192, 215, 240, 246, 282], "hit": [56, 277], "is_polynomi": 56, "rational_funct": 56, "leadterm": 56, "xlim": [56, 191], "lseri": 56, "exaxmpl": 56, "nseri": 56, "_eval_nseri": 56, "innermost": 56, "disadvantag": 56, "met": [56, 102, 218, 224, 239, 282], "poleerror": 56, "nsimplifi": [56, 60, 217], "ratsimp": [56, 217], "removeo": [56, 137, 205, 272], "chop": [56, 60, 64, 87, 92, 223, 271], "123": [56, 61, 66, 86, 114, 167, 180, 243, 250, 252], "lazi": [56, 89, 201], "smooth": [56, 60, 96, 207], "taylor_term": [56, 62], "previous_term": [56, 62], "wildfunct": 56, "dummy_index": 56, "temporari": [56, 237], "_dummy_10": 56, "contigu": [56, 215, 238], "x4": [56, 61, 195], "x5": [56, 61, 195], "x6": [56, 195], "x7": [56, 195], "x8": [56, 195], "x9": [56, 195], "x50": 56, "x51": 56, "y0": [56, 75, 77, 79, 221], "y1": [56, 137], "y2": [56, 137, 195], "y3": [56, 195], "y4": 56, "xa": [56, 193, 198], "xb": [56, 246], "xc": [56, 169, 246], "disambigu": 56, "x01": 56, "x02": 56, "x11": 56, "x12": 56, "escap": [56, 98, 191, 205, 246], "newli": [56, 81, 215], "undefinedfunct": [56, 182, 205, 237, 244], "f821": [56, 239], "cofactor": [56, 92, 196, 198, 201], "lcm": [56, 96, 196, 198, 201, 205], "50000000000000": [56, 60], "100000000000000000000": 56, "1e20": 56, "00000000000000e": 56, "23456789123456789": 56, "23456789123457": 56, "00100": 56, "sent": [56, 83, 217, 223], "789": [56, 96], "123_456": 56, "123456789": 56, "12e": 56, "012": 56, "60e2": 56, "6000": 56, "600e": 56, "125": [56, 60, 83, 96, 196, 211, 218], "099609": 56, "12500": 56, "12500000000000000000": 56, "5404319552844595": 56, "54": [56, 92, 100, 198, 204, 243], "29999999999999998890": 56, "30000000000000000000": 56, "_mpf_": [56, 195], "4915": 56, "70": [56, 57, 73, 83, 92, 96, 204, 205, 218, 225, 246], "307": 56, "mpf": [56, 195, 196], "is_float": 56, "unprejud": 56, "3602879701896397": 56, "18014398509481984": [56, 217], "limit_denomin": 56, "320": 56, "75": [56, 59, 225, 250], "use_tri": [56, 96], "use_rho": [56, 96], "use_pm1": [56, 96], "factorint": [56, 96, 200, 201, 240], "trial": [56, 96, 198, 210, 214, 221, 225], "max_denomin": 56, "1000000": [56, 96], "141592653589793": 56, "311": [56, 96], "discard": [56, 200, 205, 224], "99999999999999999999": 56, "algebraicnumb": [56, 196, 200, 204], "hookrightarrow": 56, "minpoli": [56, 195, 196, 200], "dmp": [56, 192, 196, 201], "complexrootof": [56, 92, 196, 201, 221], "anp": [56, 195, 196, 200, 201], "to_list": [56, 194, 196], "minpoly_of_el": 56, "414213562": 56, "scratch": [56, 175], "6x": [56, 198], "to_number_field": [56, 200], "to_root": 56, "primitive_el": [56, 195, 196, 200], "knew": [56, 282], "golden": [56, 60, 96], "5th": [56, 137, 198, 200], "cyclotom": [56, 196, 198, 199, 200, 201], "cyclotomic_poli": [56, 200, 201], "61803398874989": 56, "2i": 56, "a6": 56, "a6_wrong": 56, "309016994374947": 56, "951056516295154": 56, "field_el": 56, "is_alias": 56, "is_primitive_el": 56, "native_coeff": 56, "to_algebraic_integ": 56, "to_primitive_el": 56, "Its": [56, 62, 72, 137, 168, 198, 205, 213], "a_prim": 56, "number_cl": 56, "realnumb": 56, "igcd": [56, 96, 193], "greatest": [56, 61, 66, 96, 193, 195, 196, 198, 199, 201, 204], "euclid": [56, 198, 199], "r112": 56, "euclidean_algorithm": 56, "ilcm": [56, 96], "seterr": 56, "r113": 56, "r114": 56, "1_": 56, "28number": 56, "negativeon": [56, 62, 277], "r115": 56, "88": [56, 92, 96], "921_": 56, "r116": 56, "one_half": 56, "holder": 56, "ieee": [56, 57], "754": 56, "r117": 56, "affin": [56, 57, 71, 192], "compactif": 56, "r118": 56, "tild": [56, 62, 226], "phase": [56, 83, 104, 139, 142, 144, 154, 155, 224], "exp1": [56, 205], "718281828": 56, "napier": 56, "r119": 56, "e_": [56, 61, 92], "28mathematical_const": 56, "r120": 56, "imaginary_unit": [56, 205], "141592654": 56, "circumfer": [56, 66], "diamet": [56, 66], "area": [56, 66, 68, 72, 73, 99, 100], "is_irr": 56, "r121": 56, "mascheroni": [56, 64], "5772157": 56, "recur": 56, "harmon": [56, 61, 96, 108, 149, 190, 205, 267], "lim": [56, 212, 272], "limits_": [56, 190, 207, 276], "ln": [56, 62, 83, 205, 207, 221, 225, 282], "r122": 56, "93mascheroni_const": 56, "catalan": [56, 61, 205], "91596559": 56, "r123": 56, "27s_constant": 56, "goldenratio": [56, 60, 206, 217], "r124": 56, "golden_ratio": 56, "tribonacciconst": 56, "tribonacci": [56, 61], "fibonacci": [56, 60, 61, 96], "predetermin": [56, 236], "8392867552141611326": 56, "r125": 56, "generalizations_of_fibonacci_numb": [56, 61], "tribonacci_numb": [56, 61], "modulo": [56, 57, 93, 96, 166, 192, 194, 195, 196, 198, 200, 201, 202, 204, 205, 208, 217], "r126": 56, "modular_multiplicative_invers": 56, "r127": 56, "extended_euclidean_algorithm": 56, "oscil": [56, 267], "conform": [56, 224, 229, 230], "r128": 56, "r129": 56, "zero_to_the_power_of_zero": 56, "r130": 56, "indeterminate_form": 56, "as_base_exp": [56, 62, 63, 243], "expand_power_bas": [56, 217], "integer_nthroot": [56, 62, 96], "floor": [56, 62, 96, 114, 195, 196, 205, 225], "integer_log": 56, "geq": [56, 57, 64, 92, 201, 218, 225, 282], "factor_": [56, 57, 96, 201, 218], "perfect_pow": [56, 96], "infix": 56, "matmul": [56, 89, 194], "as_coef_mul": 56, "undesir": [56, 110, 120, 134, 193, 196, 215], "4596": 56, "compound": [56, 125, 168], "5728": 56, "suspect": [56, 96], "5706": 56, "moot": 56, "off": [56, 66, 81, 87, 95, 97, 122, 131, 154, 192, 201, 205, 221, 236, 247, 250, 276], "nb": 56, "sensit": [56, 106, 137, 191, 198, 217, 236], "assocop": 56, "prod": [56, 195, 202, 214], "quadrat": [56, 57, 83, 96, 192, 196, 200, 201, 218, 223, 225], "matadd": [56, 89, 205], "as_coef_add": 56, "extract_leading_ord": 56, "commutative_part": 56, "noncommutative_part": 56, "order_symbol": 56, "subprocess": [56, 205, 236, 237], "dividend": [56, 196], "rop": 56, "validrelationoper": 56, "rel_op": 56, "greaterthan": [56, 205], "lessthan": [56, 205], "strictlessthan": [56, 205, 246], "lt": [56, 201, 246], "fourth": [56, 57, 193, 221, 272], "my_equ": 56, "my_inequ": 56, "reversedsign": 56, "_eval_eq": 56, "respond": 56, "boolalg": [56, 86], "client": [56, 240], "counterpart": [56, 57, 221, 272], "litter": 56, "oddbal": 56, "minor": [56, 66, 92, 205, 236], "caveat": [56, 201, 274], "succinctli": 56, "coupl": [56, 92, 134, 149, 164, 167, 190], "annoy": 56, "succinct": 56, "occasion": 56, "r131": 56, "operar": 56, "circuit": [56, 154, 157, 267], "greaterthanobject": 56, "__bool__": 56, "335": 56, "march": 56, "2012": 56, "r132": 56, "r133": 56, "r134": 56, "mdarg": 56, "fgh": 56, "vsin": 56, "vdiff": 56, "narg": [56, 198], "naturals0": [56, 205, 213, 224, 225], "evalul": 56, "fairli": [56, 64, 81, 122, 130, 179, 192], "conserv": [56, 115, 133, 181, 253, 259], "136": [56, 92], "indirect": [56, 58, 64, 96, 170, 221], "implic": [56, 86, 198], "fx": [56, 58, 191, 221, 222], "fxx": 56, "insconsist": 56, "presenc": [56, 62, 86, 102, 119, 124, 134, 221, 229], "nonvanish": 56, "_diff_wrt": 56, "_sort_variable_count": 56, "vc": 56, "vsort": 56, "collaps": [56, 164, 217], "vsort0": 56, "vi": 56, "dfx": 56, "equidist": 56, "sq2": 56, "xl": 56, "d2fdxdy": 56, "doit_numer": 56, "z0": [56, 212], "unifi": [56, 138, 194, 196, 198, 200, 201, 213], "zeroth": [56, 200], "idiff": [56, 73], "r135": 56, "legaci": [56, 83, 92, 225], "v5_2": 56, "infunct": 56, "algebraiccomput": 56, "functionclass": [56, 205, 244], "f_real": [56, 63], "f_real_inherit": [56, 63], "is_singular": [56, 63, 79], "holomorph": [56, 63, 81], "superfici": 56, "unexpect": [56, 236], "ss": [56, 196], "denom": [56, 195, 196, 200, 217], "_eval_expand_bas": 56, "_eval_expand_complex": 56, "shut": [56, 201], "unwant": [56, 223, 243], "alphabet": [56, 57, 106, 175, 193, 218, 238], "expand_hint": 56, "_eval_expand_hint": 56, "liabl": [56, 86], "metahint": 56, "myclass": 56, "_eval_expand_doubl": 56, "expand_multinomi": 56, "expand_power_exp": 56, "expand_func": [56, 61, 64], "hyperexpand": [56, 64, 78, 81, 215, 217], "div": [56, 193, 195, 196, 201, 205, 217, 277], "horner": [56, 137, 198, 201], "untouch": 56, "unexpand": [56, 195, 204, 214, 237], "nfloat": [56, 217], "dkei": 56, "mixin": [56, 243], "maxn": [56, 60, 87], "subresult": [56, 196, 199, 201], "000100000000000000": 56, "precisionexhaust": [56, 60], "maxprec": 56, "quadratur": [56, 60, 83, 221], "tanh": [56, 60, 62, 83, 202, 205, 217, 282], "oscillatori": [56, 60, 210], "osc": [56, 60], "advers": 56, "1e16": 56, "291": 56, "builtin": [56, 196, 205, 213, 246, 281], "speedup": [56, 92, 97, 198, 202, 244], "framework": [56, 113, 120, 130, 230, 236, 238, 244, 267], "slice": [56, 86, 87, 92, 98, 196, 201, 211, 213, 217, 226, 243], "tuplekind": [56, 87, 213], "parametris": [56, 213], "element_kind": [56, 87, 213], "tuple_count": 56, "setkind": [56, 87], "gcd_term": [56, 201], "isprimit": 56, "_gcd_term": 56, "terms_gcd": [56, 196, 201], "entiti": [56, 66, 69, 70, 72, 73, 81, 120, 135, 186, 224, 259, 268, 278], "arguement": 56, "broad": [56, 277], "undefinedkind": [56, 87, 213], "lex": [56, 84, 185, 193, 195, 196, 198, 201, 202, 204, 205, 217], "grlex": [56, 84, 185, 196, 201, 204, 205], "grevlex": [56, 84, 185, 193, 198, 201, 204, 205], "rev": 56, "unaffect": [56, 224], "_node": 56, "fastest": [56, 61, 83, 96, 97, 202], "undecor": 56, "ineffici": [56, 92, 195], "breaker": 56, "hash": [56, 196, 198, 206, 217, 221, 236, 238], "collis": [56, 95, 205], "wast": [56, 93, 194], "rng": 56, "getstat": 56, "intention": 56, "tn": 56, "td": [56, 205, 281], "randrang": 56, "999": [56, 60], "238": [56, 96], "randint": [56, 92, 198], "ri": [56, 205], "rv": [56, 214, 225, 243], "nonbas": 56, "postord": 56, "descend": [56, 192, 200, 238], "subtre": [56, 205, 240], "educ": [57, 92], "cryptograph": 57, "encrypt": 57, "hide": [57, 205], "cipher": 57, "vigener": 57, "hill": [57, 64, 115, 136, 180, 187, 250], "bifid": 57, "rsa": 57, "kid": 57, "feedback": [57, 103, 106, 275], "elgam": 57, "plaintext": [57, 205], "ciphertext": 57, "monoalphabet": 57, "polyalphabet": 57, "crypto": 57, "az": [57, 218], "uppercas": [57, 215], "hello": [57, 243], "world": [57, 102, 124, 134, 243], "helloworld": 57, "check_and_join": 57, "padded_kei": 57, "puppi": 57, "opqrstuvwxi": 57, "puyoqrstvwx": 57, "artist": 57, "aphras": 57, "ara": 57, "hp": 57, "cycle_list": 57, "encipher_shift": 57, "msg": [57, 83], "decipher_shift": 57, "gonavybeatarmi": 57, "ct": [57, 85, 198], "hpobwzcfbubsnz": 57, "deciph": 57, "l1": [57, 66, 68, 69, 114, 117, 123, 135, 196, 198, 201, 218, 225], "l2": [57, 68, 69, 114, 117, 123, 156, 172, 196, 198, 225], "caesar": 57, "juliu": 57, "suetoniu": 57, "protect": [57, 205], "militari": 57, "nephew": 57, "augustu": 57, "reportedli": 57, "r136": 57, "caesar_ciph": 57, "r137": 57, "caesarsmethod": 57, "encipher_rot13": 57, "rot13": 57, "caeser": 57, "midwai": 57, "decipher_rot13": 57, "r138": 57, "decrypt": 57, "tbanilorngnezl": 57, "encipher_affin": 57, "_invers": 57, "cx": [57, 100], "recov": [57, 83, 175, 198, 200, 201, 218, 221], "decipher_affin": 57, "r139": 57, "affine_ciph": 57, "reciph": 57, "navi": 57, "beat": 57, "armi": 57, "trobmvenbgbalv": 57, "encipher_atbash": 57, "enciph": 57, "atbash": 57, "hebrew": 57, "decipher_atbash": 57, "tlmzebyvzgzinb": 57, "r140": 57, "encipher_substitut": 57, "oeyag": 57, "034": 57, "60n": 57, "v4b3": 57, "rm4": 57, "immateri": 57, "anyv": 57, "wherebi": 57, "r141": 57, "substitution_ciph": 57, "encipher_vigener": 57, "me": [57, 120, 137, 180, 205, 227], "mondai": 57, "qrgkkthrzqebpr": 57, "krypto": 57, "sculptur": 57, "cia": 57, "headquart": 57, "r143": 57, "decipher_vigener": 57, "alp": 57, "palimpsest": 57, "emufphzlrfaxyusdjkzldkrnshgnfivj": 57, "betweensubtleshadingandtheabsenc": 57, "blais": 57, "sixteenth": 57, "centuri": [57, 192], "diplomat": 57, "accid": [57, 244], "invent": [57, 200, 223, 276], "giovan": 57, "batista": 57, "belaso": 57, "1553": 57, "civil": [57, 99], "war": 57, "confederaci": 57, "brass": 57, "nsa": 57, "museum": 57, "fort": 57, "mead": 57, "r142": 57, "sender": 57, "assembl": [57, 81, 212], "concaten": [57, 87], "frequenc": [57, 83, 104, 106, 144, 146, 154, 171], "kasiski": 57, "discov": [57, 81, 110, 229, 278], "babbag": 57, "unbreak": 57, "ye": [57, 86, 221], "gonavybeatarmyyesyoucan": 57, "gold": 57, "auto_kei": 57, "goldbuggonavybeatarmyy": 57, "mcydwshkogamkzcelyfgayr": 57, "pt": [57, 65, 66, 67, 69, 70, 71, 72, 211], "vigenere_ciph": 57, "archiv": [57, 136, 218], "20071116100808": 57, "r144": 57, "filebox": 57, "vt": 57, "batman": 57, "goo": 57, "gl": 57, "ijr22d": 57, "decod": 57, "qrgk": 57, "kt": [57, 125], "hrzqe": 57, "bpr": 57, "meetmeonmondai": 57, "encipher_hil": 57, "z_": [57, 217], "r145": 57, "lester": 57, "1920": 57, "r146": 57, "polygraph": 57, "bare": [57, 115], "ceil": [57, 62, 96, 114, 205], "l_1": [57, 61, 107, 190, 215, 231], "l_t": 57, "c_t": 57, "l_i": [57, 190, 215], "decipher_hil": 57, "hill_ciph": 57, "june": [57, 92], "juli": [57, 218], "1929": 57, "306": 57, "312": [57, 180, 223, 250, 252], "ueqdueodoctcwq": 57, "st": [57, 83, 170], "hjeb": 57, "stqq": 57, "ispk": 57, "stzz": 57, "hd": 57, "ormv": 57, "uiki": 57, "encipher_bifid": 57, "polybiu": 57, "printabl": 57, "bifid5": 57, "decipher_bifid": 57, "encipher_bifid5": 57, "encipher_bifid6": 57, "r147": 57, "bifid_ciph": 57, "ieilhhfstsfqy": 57, "ieilh": 57, "hfst": 57, "fqyej": 57, "bmtwmg": 57, "bio": 57, "gold_bug": 57, "hg2sfuei7t": 57, "pug": 57, "heldo": 57, "wor6d": 57, "bifid5_squar": 57, "5x5": 57, "cap": [57, 60, 170, 213, 224], "tradition": [57, 64], "decipher_bifid5": 57, "round_trip": 57, "josi": 57, "osi": 57, "iosi": 57, "qiq": 57, "1901": 57, "felix": 57, "delastel": 57, "onto": [57, 69, 70, 71, 81, 85, 92, 95, 97, 200], "helen": 57, "cryptanalysi": 57, "german": 57, "fridai": 57, "ieilehfstsfxe": 57, "okai": 57, "decipher_bifid6": 57, "8am": 57, "kfkljjhf5mmmktfrgpl": 57, "meetmeonmondayat8am": 57, "bifid6_squar": 57, "6x6": 57, "rsa_public_kei": 57, "totient": [57, 96], "carmichael": [57, 96], "p_n": [57, 61, 64, 83, 201], "multiprim": 57, "land": 57, "reduced_toti": [57, 96], "uniquenss": 57, "rsa_private_kei": 57, "e_0": 57, "canonicalz": 57, "61": [57, 61, 72, 92, 96, 201, 207], "3233": 57, "797": 57, "1577": 57, "multipow": 57, "cryptosystem": 57, "coprim": [57, 83, 96, 166, 198, 218], "30030": 57, "becam": [57, 130], "hardest": 57, "claim": [57, 189, 215, 224], "encipher_rsa": 57, "decipher_rsa": 57, "r148": 57, "rsa_": 57, "28cryptosystem": 57, "r149": 57, "cacr": 57, "uwaterloo": 57, "techreport": 57, "2006": [57, 214], "cacr2006": 57, "r150": 57, "springer": [57, 83, 96, 198, 199, 221], "1007": 57, "2fbfb0055738": 57, "r151": 57, "itii": 57, "manuscript": 57, "1381": 57, "2753": 57, "413": 57, "1193": 57, "823": 57, "r152": 57, "r153": 57, "r154": 57, "r155": 57, "bmod": [57, 201, 205], "vice": [57, 83, 96, 99, 160, 180, 192, 196, 254, 255, 274], "versa": [57, 83, 96, 99, 160, 180, 192, 196, 254, 255, 274], "asymmetr": [57, 72], "puk": 57, "prk": 57, "chines": [57, 96, 198], "k_1": [57, 96, 198, 215], "k_2": 57, "k_n": [57, 64, 198], "p_3": [57, 188], "k_3": 57, "moduli": [57, 96, 198], "2048": [57, 96, 205], "overhead": [57, 97, 202], "modular": [57, 96, 166, 199, 224], "crt": [57, 96, 198], "overcompens": 57, "theorit": 57, "new_msg": 57, "kid_rsa_public_kei": 57, "grade": [57, 84, 185, 201], "school": [57, 214], "bob": [57, 114], "369": 57, "58": [57, 92, 231], "kid_rsa_private_kei": 57, "encipher_kid_rsa": 57, "200": [57, 87, 92, 96, 99, 104, 250], "161": 57, "decipher_kid_rsa": 57, "pub": [57, 250], "pri": 57, "encode_mors": 57, "sep": [57, 205, 222, 236], "mors": 57, "attack": 57, "flank": 57, "r156": 57, "morse_cod": 57, "decode_mors": 57, "word_sep": 57, "mc": [57, 125], "east": 57, "r157": 57, "lfsr_sequenc": 57, "lfsr": 57, "c_k": 57, "golomb": [57, 96], "g157": 57, "autocorrel": 57, "lim_": [57, 62, 64, 81, 83, 212, 272, 276], "balanc": [57, 136, 192, 225, 236], "solomon": 57, "aegean": 57, "park": 57, "laguna": 57, "1967": [57, 199], "lfsr_autocorrel": 57, "lfsr_connection_polynomi": 57, "massei": 57, "m158": 57, "jame": [57, 198], "synthesi": 57, "bch": 57, "tran": 57, "122": [57, 59, 64], "127": [57, 96], "elgamal_public_kei": 57, "elgamal_private_kei": 57, "1031": 57, "636": 57, "212": [57, 83, 199], "mathmat": 57, "dlp": 57, "is_primitive_root": [57, 96], "encipher_elgam": 57, "c2": [57, 66, 73, 87, 89, 114, 156, 170, 213, 221, 225, 253, 256, 283], "encryp": 57, "decipher_elgam": 57, "eucliden": 57, "dh_public_kei": 57, "dh_private_kei": 57, "_p": [57, 170, 196, 198, 200, 212, 215, 223], "_g": 57, "diffi": 57, "hellman": [57, 96], "publicli": 57, "secretli": 57, "dh_shared_kei": 57, "sk": 57, "gm_public_kei": 57, "goldwass": 57, "micali": 57, "gm_private_kei": 57, "b_n": [57, 61, 85, 192, 208], "jacobi_symbol": [57, 96], "reconstruct": [57, 92, 198, 218, 277], "residuos": 57, "entropi": [57, 225], "encipher_gm": 57, "public_kei": 57, "gm": [57, 173], "decipher_gm": 57, "encipher_railf": 57, "rail": 57, "railfenc": 57, "horel": 57, "ollwd": 57, "r160": 57, "rail_fence_ciph": 57, "decipher_railf": 57, "diffgeom": 58, "euclidean": [58, 69, 71, 180, 196, 198, 201], "r161": 58, "chart": [58, 191], "parameter": [58, 65, 66, 69, 72, 218], "r162": 58, "sussman": 58, "wisdom": 58, "farr": 58, "2013": [58, 68, 87, 280], "tranform": 58, "cartesian": [58, 99, 138, 143, 157, 160, 165, 186, 191, 192, 213, 224, 243, 254, 255, 257, 258, 267], "polar": [58, 62, 64, 66, 72, 99, 108, 140, 191, 213, 217, 224, 267], "relation_dict": 58, "car2d": 58, "pol": 58, "coordinatesymbol": 58, "jacobian": [58, 92, 134, 223], "jacobian_determin": 58, "r163": 58, "coordinate_system": 58, "base_oneform": 58, "coord_index": 58, "oneform": 58, "base_scalar": 58, "basescalarfield": 58, "base_vector": [58, 250], "coord_funct": 58, "to_si": 58, "coord": [58, 71, 73, 110, 168, 184], "immutabledensematrix": [58, 87, 88, 89, 90, 225], "rn": 58, "r2_r": 58, "r2_p": 58, "jacobian_matrix": 58, "point_to_coord": 58, "coord_si": [58, 253], "imbu": 58, "difficulti": [58, 121], "arriv": [58, 198, 215, 217, 221, 225, 282], "inappropri": 58, "poin": 58, "unappropri": 58, "fy": [58, 191, 222], "ftheta": 58, "basevectorfield": 58, "point_p": 58, "point_r": 58, "s_field": 58, "dxi": 58, "v1": [58, 69, 92, 117, 137, 180, 181, 184, 225, 244, 250, 253, 254, 255, 256], "v2": [58, 69, 92, 117, 180, 181, 184, 244, 250, 253, 254, 255, 256], "v_1": [58, 200, 223], "v_2": [58, 200], "e_x": [58, 231], "e_i": [58, 192, 215, 231], "e_r": 58, "c_xy": 58, "c_xr": 58, "unfortun": [58, 60, 97, 204, 218], "e_rho": 58, "form_field": 58, "exterior": [58, 72], "dg": 58, "tensorproduct": [58, 167, 169, 226, 227], "multilinear": 58, "wedg": [58, 81], "tp1": 58, "tp": [58, 142, 169, 196], "wedgeproduct": 58, "wp1": 58, "liederiv": 58, "v_field": 58, "transport": 58, "pushforward": 58, "e_theta": 58, "basecovarderivativeop": 58, "christoffel": 58, "metric_to_christoffel_2nd": 58, "ch": [58, 92, 218], "cvd": 58, "covarderivativeop": 58, "intcurve_seri": 58, "vector_field": [58, 257], "start_point": 58, "dt": [58, 64, 124, 137, 179, 180, 182, 188, 189, 201, 221, 282], "f_i": [58, 81, 92, 198, 202], "movement": 58, "intcurve_diffequ": 58, "init_cond": 58, "f_1": [58, 61, 64, 81, 106, 116, 119, 138, 192, 198, 201, 221], "f_0": [58, 61, 116, 198], "vectors_in_basi": 58, "kept": [58, 172, 189, 243, 277], "twoform_to_matrix": 58, "twoform": 58, "e_j": 58, "metric_to_christoffel_1st": 58, "levi": [58, 64, 225, 231], "civita": [58, 64, 231], "metric_to_riemann_compon": 58, "non_trivial_metr": 58, "dtheta": 58, "drho": 58, "metric_to_ricci_compon": 58, "ricci": 58, "fft": [59, 137], "ifft": 59, "ntt": 59, "intt": 59, "fwht": 59, "ifwht": 59, "mobius_transform": 59, "inverse_mobius_transform": 59, "convolution_fft": 59, "convolution_ntt": 59, "convolution_fwht": 59, "convolution_subset": 59, "covering_product": 59, "intersecting_product": 59, "radix": 59, "r164": 59, "coolei": 59, "93tukey_fft_algorithm": 59, "r165": 59, "fastfouriertransform": 59, "r166": 59, "r167": 59, "pz": [59, 104, 231], "643": [59, 96], "767": 59, "387": 59, "415": 59, "384": 59, "353": [59, 92], "r168": 59, "apfloat": 59, "r169": 59, "numbertheoretictransform": 59, "r170": 59, "discrete_fourier_transform_": 59, "r171": 59, "r172": 59, "r173": 59, "wht": 59, "r174": 59, "hadamard_transform": 59, "r175": 59, "fast_walsh": 59, "93hadamard_transform": 59, "r176": 59, "r177": 59, "mobiu": [59, 96], "lattic": [59, 218], "bitmask": 59, "r178": 59, "b6bius_inversion_formula": 59, "r179": 59, "csail": 59, "mit": 59, "rrw": 59, "conv": 59, "r180": 59, "arxiv": [59, 61, 64, 92, 108, 201, 243], "1211": 59, "0189": 59, "r181": 59, "r182": 59, "r183": 59, "888": 59, "444": 59, "1283": 59, "19351": 59, "14219": 59, "15502": 59, "44": [59, 61, 92, 96, 214, 225], "41": [59, 66, 92, 96, 196, 218], "63": [59, 92, 96], "r184": 59, "convolution_theorem": 59, "r185": 59, "333": [59, 96], "555": 59, "222": 59, "666": 59, "15555": 59, "19404": 59, "r186": 59, "r187": 59, "68": [59, 84, 92, 96, 218], "48": [59, 66, 100, 218, 223, 225, 272], "2057": 59, "1870": 59, "r188": 59, "radioeng": 59, "cz": [59, 218], "fulltext": 59, "2002": [59, 192, 199, 202], "02_03_40_42": 59, "r189": 59, "r190": 59, "r191": 59, "AND": [59, 86], "327": [59, 221], "r192": 59, "44288293815837": 60, "4429": 60, "4428829381583662470158809900606936986146216893757": 60, "28902548222223624241": 60, "091999668350375232456": 60, "14159265358979": [60, 64, 223], "333333333333333": [60, 195, 217], "1415926535": 60, "7182818284": 60, "100000": [60, 96, 104], "951": 60, "95678796130331164628399634646042209010610577945815": 60, "gmpy": [60, 195, 196, 281], "googl": [60, 190, 191, 224], "100000000000000": 60, "1000000000": 60, "125000000000000000000000000000": 60, "100000000000000005551115123126": 60, "100000000000000000000000000000": 60, "1415": 60, "uncertainti": [60, 175], "003": 60, "31417": 60, "propag": [60, 69, 141, 144], "5000": [60, 99], "50000000000000000000000000000": 60, "varphi": [60, 64, 200, 205, 221], "erron": 60, "34665576869e": 60, "208": [60, 201], "64613129282185e": 60, "60123853010113e": 60, "210": [60, 96, 218], "thousand": [60, 96, 271], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 60, "binet": 60, "104": 60, "1336": 60, "portion": [60, 72, 87, 92], "meaningless": 60, "012297": 60, "9562288417661": 60, "956": 60, "29128599706266": 60, "2912859970626635404072825905956005414986193682745": 60, "14159265358979323846264338328": 60, "integrand": [60, 64, 80, 81, 83, 215], "struggl": [60, 204], "346": 60, "34635637913639": 60, "dealt": [60, 81], "504067061906928": 60, "50406706190692837199": 60, "wrap_lin": [60, 83, 84, 92, 100, 185, 192, 193, 204, 205, 221], "intgrl": 60, "extrapol": [60, 212], "richardson": [60, 212, 224], "slowli": [60, 212], "64493406684823": 60, "577215664901533": 60, "57721566490153286060651209008240243104215933593992": 60, "10000000": [60, 201], "20000000": [60, 201], "693147255559946": 60, "tune": [60, 84, 185, 205], "worthwhil": 60, "hypergeometr": [60, 61, 74, 80, 81, 199, 216, 217, 221, 223, 225, 262, 282], "ramanujan": [60, 61, 96], "9801": 60, "1103": 60, "26390": 60, "396": [60, 120], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 60, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 60, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 60, "355": [60, 96, 199], "113": [60, 96, 218], "33333": [60, 83], "635": 60, "504": [60, 199], "130198866629986772369127970337": 60, "49": [60, 61, 96, 100, 198, 218], "___________": [60, 100, 221], "bell": [61, 154, 207, 243], "k_sym": 61, "binom": [61, 96, 225, 282], "dotsc": [61, 207], "j_1": [61, 149, 150, 167, 190, 207, 226], "j_2": [61, 149, 150, 167, 190, 207], "dotsb": [61, 207], "atop": [61, 64, 207, 215], "2j_2": [61, 207], "3j_2": [61, 207], "j_": [61, 64, 81, 83, 167, 207, 215, 276], "bernoulli": [61, 64, 201, 205, 221, 223, 225], "877": 61, "4140": 61, "21147": 61, "115975": 61, "846749014511809332450147": 61, "luca": [61, 96, 205, 211], "genocchi": [61, 64, 201], "r193": 61, "bell_numb": 61, "r194": 61, "bellnumb": 61, "r195": 61, "bellpolynomi": 61, "hurwitz": [61, 64], "6k": 61, "appel": [61, 64], "confer": [61, 97, 280], "r200": 61, "66": [61, 87, 92, 201, 205], "1000001": 61, "andr": [61, 201], "appellseq": [61, 201], "bernoulli_poli": [61, 201], "r196": 61, "bernoulli_numb": 61, "r197": 61, "bernoulli_polynomi": [61, 201], "r198": 61, "bernoullinumb": 61, "r199": 61, "bernoullipolynomi": 61, "luschni": [61, 64, 201], "manifesto": 61, "r201": 61, "2009": [61, 64, 96, 190, 201], "06743": [61, 64, 201], "_k": [61, 64, 83, 190, 200, 225], "6435": 61, "pascal": [61, 96], "4th": [61, 62, 78, 92, 96, 137], "195": 61, "r202": 61, "johndcook": 61, "binomial_coeffici": [61, 96], "c_n": [61, 64, 85, 201, 221], "429": [61, 205], "1430": 61, "4862": 61, "39764993382373624267": 61, "020884341620842555705": 61, "r203": 61, "catalan_numb": 61, "r204": 61, "catalannumb": [61, 205], "r205": 61, "r206": 61, "geomet": [61, 192], "mathcircl": 61, "2j": [61, 198, 225], "1385": [61, 201], "272": [61, 201], "7936": [61, 201], "2702765": 61, "4096": 61, "euler_poli": [61, 201], "r207": 61, "euler_numb": 61, "r208": 61, "eulernumb": 61, "r209": 61, "alternating_permut": 61, "r210": 61, "alternatingpermut": 61, "swing": 61, "factorial2": [61, 171, 205], "fallingfactori": [61, 205], "subfactori": [61, 205, 243], "derang": [61, 243], "r212": 61, "generate_derang": [61, 243], "r211": 61, "r213": 61, "double_factori": 61, "texttt": [61, 213], "r214": 61, "r215": 61, "paul": [61, 240], "235": 61, "268": 61, "1995": [61, 199, 217, 223], "f_z": [61, 186, 257], "f_2": [61, 81, 106, 116, 119, 138, 198, 215, 221], "r217": 61, "fibonacci_numb": 61, "r218": 61, "fibonaccinumb": 61, "t_0": [61, 218], "149": [61, 96], "r219": 61, "r220": 61, "tribonaccinumb": 61, "r221": 61, "oei": [61, 64, 96, 201], "a000073": 61, "137": [61, 92, 108], "205": [61, 81, 215], "5269": 61, "761": 61, "280": 61, "83711": 61, "27720": 61, "30247": 61, "9900": 61, "983697455232980674869851942390639915940": 61, "r222": 61, "harmonic_numb": 61, "r223": 61, "harmonicnumb": [61, 205], "r224": 61, "harmonicnumber2": 61, "l_0": [61, 107, 231, 232], "47": [61, 64, 92, 96, 108, 143, 175, 204], "76": [61, 64, 92, 96, 198, 201], "r225": 61, "lucas_numb": 61, "r226": 61, "lucasnumb": 61, "2t": 61, "genocchi_poli": [61, 201], "r227": 61, "genocchi_numb": 61, "r228": 61, "genocchinumb": 61, "r229": 61, "mathcal": [61, 62, 81, 106, 135, 167, 190, 201, 213], "a000111": [61, 201], "zigzag": 61, "li": [61, 64, 72, 83, 96, 170, 205, 260], "50521": [61, 201], "691": 61, "2730": 61, "andre_poli": [61, 201], "r230": 61, "r231": 61, "eulerzigzagnumb": 61, "r232": 61, "irrelev": 61, "r233": 61, "number_theori": 61, "r234": 61, "pentagonal_number_theorem": 61, "multifactori": 61, "pochhamm": [61, 205, 217], "r235": 61, "r236": 61, "pochhammer_symbol": 61, "274": 61, "225": [61, 96, 199], "511": 61, "9330": 61, "34105": 61, "42525": 61, "22827": 61, "5880": 61, "750": 61, "r237": 61, "stirling_numbers_of_the_first_kind": 61, "r238": 61, "stirling_numbers_of_the_second_kind": 61, "multiset": [61, 81, 240, 243], "nc": 61, "nt": [61, 243], "babi": [61, 96, 243], "aa": [61, 190], "bb": [61, 190, 217, 243], "multiset_combin": [61, 243], "aab": [61, 243], "aabc": 61, "aaaabbbbcccc": 61, "m_1": [61, 106, 149, 167, 190, 218], "m_2": [61, 119, 138, 149, 167, 190], "m_k": 61, "r239": 61, "r240": 61, "tinyurl": 61, "cep849r": 61, "ba": [61, 243], "multiset_permut": [61, 243], "r241": 61, "aabbc": 61, "mississippi": [61, 243], "609": 61, "1521": 61, "1768": 61, "1224": [61, 96], "579": 61, "197": 61, "r242": 61, "undergradu": 61, "csse": 61, "uwa": 61, "au": 61, "cits7209": 61, "707106781186548": 62, "tangent": [62, 66, 68, 72, 83, 202, 221], "643501108793284": 62, "r243": 62, "ib": [62, 125], "complex_conjug": 62, "polar_lift": [62, 64, 217], "periodic_argu": 62, "principal_branch": [62, 81], "r247": 62, "csc": [62, 98, 205, 214], "sec": [62, 83, 104, 200, 205, 214, 282], "acsc": [62, 205], "asec": [62, 205], "acot": [62, 205], "r244": 62, "trigonometric_funct": 62, "r245": 62, "r246": 62, "elementaryfunct": 62, "trigonometryangl": 62, "r248": 62, "r249": 62, "r250": 62, "r251": 62, "r252": 62, "r253": 62, "cotang": [62, 202], "r254": 62, "r255": 62, "r256": 62, "secant": [62, 201], "r257": 62, "r258": 62, "r259": 62, "cosec": 62, "r260": 62, "r261": 62, "r262": 62, "unnorm": [62, 64], "qquad": [62, 175, 198], "jn": [62, 64, 167, 201, 205, 276], "spheric": [62, 108, 114, 149, 190, 191, 201, 250, 254, 255, 276], "r263": 62, "sinc_funct": 62, "asinh": [62, 205], "r264": 62, "inverse_trigonometric_funct": 62, "r265": 62, "r266": 62, "r267": 62, "r268": 62, "r269": 62, "r270": 62, "r271": 62, "r272": 62, "arctan": [62, 202, 205], "acoth": [62, 205], "r273": 62, "r274": 62, "arccot": [62, 205], "r278": 62, "r275": 62, "r276": 62, "r277": 62, "arcsec": [62, 205], "r279": 62, "r280": 62, "r281": 62, "arccsc": [62, 205], "quadrant": [62, 196, 224], "clock": [62, 214], "reurn": 62, "r282": 62, "r283": 62, "r284": 62, "arctan2": [62, 205], "hyperbolicfunct": 62, "coth": [62, 205, 217], "acosh": [62, 205], "atanh": [62, 202, 205, 215], "sech": [62, 205], "csch": [62, 205], "asech": [62, 205], "r285": 62, "hyperbolic_funct": 62, "r286": 62, "r287": 62, "arcsech": [62, 205], "acsch": [62, 205], "r288": 62, "r289": 62, "r290": 62, "arccsch": [62, 205], "567": 62, "r291": 62, "r292": 62, "ceilingfunct": 62, "r293": 62, "r294": 62, "floorfunct": 62, "roundfunct": 62, "r295": 62, "lfloor": [62, 196, 224, 225], "rfloor": [62, 196, 224, 225], "fractional_part": 62, "r296": 62, "fractionalpart": 62, "lambertw": [62, 202, 205, 223, 224, 283], "r297": 62, "w_k": 62, "635564016364870": 62, "34747534407696": 62, "41624341514535": 62, "lambert_w_funct": 62, "exprcondpair": 62, "cond": [62, 81, 83, 213], "piecewise_fold": 62, "folded_cond": 62, "ITE": [62, 86, 205], "piecewise_exclus": 62, "_eval_integr": [62, 83], "piecewise_integr": 62, "as_expr_set_pair": 62, "skip_nan": 62, "mutual": [62, 81, 189], "conjunct": [62, 86, 191, 215, 236, 282], "identityfunct": 62, "supremum": [62, 213], "r298": 62, "directed_complete_partial_ord": 62, "r299": 62, "lattice_": 62, "28order": 62, "global_paramet": 62, "rootof": [62, 201], "real_root": [62, 201, 223], "rootoftool": [62, 92, 201], "r300": 62, "square_root": 62, "r301": 62, "r302": 62, "root_of_un": 62, "r303": 62, "principal_valu": [62, 83], "r304": 62, "cuberoot": 62, "powdenest": [62, 217], "misc": [62, 87, 246], "r305": 62, "r306": 62, "r307": 62, "cube_root": 62, "r308": 62, "delta_funct": [64, 83], "int_": [64, 80, 81, 83, 201, 208, 272, 276], "sum_i": [64, 212], "is_simpl": 64, "tensor_funct": 64, "kroneckerdelta": [64, 89, 170, 205, 217], "r309": 64, "deltafunct": [64, 83], "h0": 64, "electron": [64, 108, 214], "signal": [64, 86, 96, 104, 106, 137, 198, 277], "improp": [64, 83], "convolut": [64, 207], "r310": 64, "heavisidestepfunct": 64, "r311": 64, "iv": [64, 202], "105": [64, 96, 201, 218], "parg": 64, "singularity_funct": 64, "singularityfunct": [64, 83, 99], "macaulai": 64, "heavisidediracdelta": 64, "r312": 64, "r313": 64, "r314": 64, "r315": 64, "r316": 64, "setminu": [64, 81], "17805383034794561964694160130": 64, "65092319930185633889": 64, "8724366472624298171": 64, "r317": 64, "r318": 64, "r319": 64, "loggammafunct": 64, "r320": 64, "espinosa": 64, "moll": 64, "r325": 64, "19093197": 64, "5173168": 64, "ni": [64, 96], "r321": 64, "polygamma_funct": 64, "r322": 64, "polygammafunct": 64, "r323": 64, "r324": 64, "polygamma2": 64, "2004": [64, 199, 218], "115": 64, "r326": 64, "digamma_funct": 64, "r327": 64, "digammafunct": 64, "r328": 64, "r329": 64, "trigamma_funct": 64, "r330": 64, "trigammafunct": 64, "r331": 64, "int_x": 64, "_1f_1": 64, "confluent": [64, 215], "xt": 64, "expint": [64, 205], "r332": 64, "incomplete_gamma_funct": 64, "upper_incomplete_gamma_funct": 64, "r333": 64, "r334": 64, "r335": 64, "gamma2": 64, "r336": 64, "gamma3": 64, "r337": 64, "exponential_integr": 64, "relation_with_other_funct": 64, "int_0": [64, 81, 83, 272, 282], "r338": 64, "lower_incomplete_gamma_funct": 64, "r339": 64, "r340": 64, "r341": 64, "r342": 64, "multigamma": 64, "gamma_p": 64, "r343": 64, "multivariate_gamma_funct": 64, "beta_funct": 64, "eulerian": 64, "02671848900111377452242355235388489324562": 64, "2112723729365330143": 64, "7655283165378005676": 64, "r344": 64, "r345": 64, "betafunct": 64, "r346": 64, "error_funct": 64, "999999984582742099719981147840": 64, "1296959": 64, "73071763923152794095062": 64, "r347": 64, "r348": 64, "r349": 64, "r350": 64, "0000000154172579002800188521596734869": 64, "r351": 64, "r352": 64, "r353": 64, "r354": 64, "5648024145755525987042919132": 64, "995322265018952734162069256367": 64, "r355": 64, "r356": 64, "r357": 64, "r358": 64, "179143454621291692285822705344": 64, "r359": 64, "inverse_funct": 64, "r360": 64, "inverseerf": [64, 205], "r361": 64, "r362": 64, "inverseerfc": [64, 205], "r363": 64, "inverseerf2": 64, "fresnelintegr": 64, "343415678363698242195300815958": 64, "fresnelc": [64, 205, 215], "r364": 64, "fresnel_integr": 64, "r365": 64, "r366": 64, "r367": 64, "r368": 64, "wrench": 64, "jr": 64, "vicki": 64, "allei": 64, "488253406075340754500223503357": 64, "r369": 64, "r370": 64, "r371": 64, "r372": 64, "r373": 64, "ei": [64, 81, 200, 205, 215, 218, 221, 231], "background": [64, 84, 185, 188, 280], "cauchi": [64, 81, 83, 196, 221, 225], "219383934395520": 64, "21938393439552": 64, "shi": [64, 81, 205, 215], "e1": [64, 66, 73, 120, 195, 200, 212, 221, 224], "hyperbol": [64, 202, 224, 278, 282], "r374": 64, "r375": 64, "r376": 64, "sfu": [64, 83], "cbm": [64, 83], "aand": [64, 83], "page_228": 64, "int_1": [64, 81], "zt": [64, 81], "unbranch": [64, 81], "meijerg": [64, 75, 81, 83, 205, 225, 282], "postiv": 64, "r377": 64, "r378": 64, "expintegral": [64, 205], "r379": 64, "04516378011749278484458888919": 64, "0652795784357498247001125598": 64, "08346052231061726610939702133": 64, "soldner": 64, "45136923488338": 64, "r380": 64, "logarithmic_integr": 64, "r381": 64, "logarithmicintegr": 64, "r382": 64, "r383": 64, "soldnersconst": 64, "92242131492155809316615998938": 64, "r384": 64, "r385": 64, "r386": 64, "r387": 64, "trigonometric_integr": 64, "_1": [64, 92, 114, 180, 190, 215, 244], "somewhat": [64, 83, 120, 196], "r388": 64, "r389": 64, "r390": 64, "laurent": [64, 196, 202, 221], "j_n": [64, 167], "r391": 64, "r392": 64, "r393": 64, "r394": 64, "yn": [64, 205, 211], "r395": 64, "i_": [64, 81, 215, 225, 226], "iz": 64, "r396": 64, "k_": [64, 81, 132, 133], "r397": 64, "hankel1": [64, 205], "hankel": [64, 83], "iy_": 64, "hankel2": [64, 205], "r398": 64, "hankelh1": [64, 205], "r399": 64, "hankelh2": [64, 205], "orthopoli": [64, 201], "spherical_bessel_fn": [64, 201], "3j": [64, 149, 190], "099419756723640344491": 64, "054525080242173562897": 64, "r400": 64, "y_n": [64, 218], "18525034196069722536": 64, "014895573969924817587": 64, "r401": 64, "jn_zero": 64, "besseljzero": 64, "sph_jn": 64, "7635": 64, "095": 64, "323": [64, 96], "515": 64, "marcumq": 64, "marcum": 64, "q_m": 64, "r402": 64, "marcum_q": 64, "r403": 64, "airybas": 64, "airyai": [64, 205, 221], "ai": [64, 96, 201, 218, 246, 282], "airyaiprim": [64, 205], "22740742820168557599192443603787379946077222541710": 64, "airybi": [64, 205, 221], "airybiprim": [64, 205], "r404": 64, "airy_funct": 64, "r405": 64, "r406": 64, "encyclopediaofmath": 64, "r407": 64, "airyfunct": 64, "41230258795639848808323405461146104203453483447240": 64, "r408": 64, "r409": 64, "r410": 64, "r411": 64, "61825902074169104140626429133247528291577794512415": 64, "r412": 64, "r413": 64, "r414": 64, "r415": 64, "27879516692116952268509756941098324140300059345163": 64, "r416": 64, "r417": 64, "r418": 64, "r419": 64, "bspline": 64, "bspline_basi": 64, "knot": 64, "cubic": [64, 192, 201, 218, 223], "bspline_basis_set": 64, "r420": 64, "interpolating_splin": 64, "131": [64, 180], "39": [64, 96, 204], "interpolating_poli": [64, 201], "zeta_funct": 64, "admit": [64, 221], "lerch": 64, "transcend": 64, "lerchphi": [64, 205], "dirichlet_eta": [64, 205], "20205690315959": 64, "polylog": [64, 205], "r421": 64, "r422": 64, "hurwitz_zeta_funct": 64, "r423": 64, "dirichlet_eta_funct": 64, "r424": 64, "polylogarithm": 64, "sheet": [64, 214], "phi_0": 64, "ze": 64, "r425": 64, "bateman": 64, "erdelyi": 64, "1953": [64, 200], "york": [64, 81, 136, 215, 223], "mcgraw": [64, 115, 136, 180, 187, 250], "r426": 64, "r427": 64, "lerch_transcend": 64, "stieltj": [64, 205], "gamma_": [64, 107, 109], "r428": 64, "stieltjes_const": 64, "ap": [64, 68, 215], "bq": [64, 193, 194, 215], "a_p": [64, 81, 215, 282], "b_q": [64, 81, 215, 282], "_pf_q": [64, 215, 221, 282], "unicod": [64, 84, 92, 185, 205, 236, 276], "r429": 64, "r430": 64, "generalized_hypergeometric_funct": 64, "convergence_stat": 64, "radius_of_converg": 64, "radiu": [64, 66, 70, 72, 127, 129, 139, 143, 191, 224, 225, 260], "meijer": [64, 74, 82, 83, 262, 272, 282], "mellin": [64, 83], "barn": 64, "b_m": [64, 81, 223], "confusingli": 64, "int_l": [64, 81, 215], "contour": [64, 66, 81, 191, 215], "__1": 64, "subvector": 64, "aother": 64, "bm": 64, "bother": [64, 277], "slater": [64, 215], "allow_hyp": [64, 217], "subsum": 64, "r431": 64, "r432": 64, "meijer_g": 64, "get_period": [64, 81], "appellf1": [64, 205], "b2": [64, 96, 99, 100, 111, 120, 137, 180, 194, 196, 205, 215, 218, 221, 256], "0063339426292673": 64, "172870711": 64, "659936": 64, "15605338197184": 64, "r433": 64, "appell_seri": 64, "r434": 64, "hypergeometricfunct": 64, "elliptic_integr": 64, "elliptic_k": [64, 205], "tfrac": [64, 221, 225], "eccentr": [64, 66], "50923695405127": 64, "625146415202697": 64, "elliptic_f": [64, 205], "r435": 64, "r436": 64, "ellipticintegr": 64, "elliptick": [64, 205], "909449841483": 64, "74720545502474": 64, "r437": 64, "r438": 64, "ellipticf": 64, "elliptic_": [64, 66, 205], "55203744279187": 64, "290764986058437": 64, "991052601328069": 64, "81879421395609": 64, "r439": 64, "r440": 64, "elliptice2": 64, "r441": 64, "elliptic": [64, 205], "elliptic_pi": [64, 205], "50232379629182": 64, "760939574180767": 64, "29136443417283": 64, "32555634906645": 64, "r442": 64, "r443": 64, "ellipticpi3": 64, "r444": 64, "ellipticpi": [64, 205], "mathieu_funct": 64, "mathieubas": 64, "mathieusprim": [64, 205], "mathieuc": [64, 205], "mathieucprim": [64, 205], "r445": 64, "r446": 64, "r447": 64, "r448": 64, "mathieuandspheroidalfunct": 64, "r449": 64, "r450": 64, "r451": 64, "r452": 64, "r453": 64, "r454": 64, "r455": 64, "r456": 64, "r457": 64, "r458": 64, "r459": 64, "r460": 64, "chebyshevu": [64, 205], "chebyshevt_root": 64, "chebyshevu_root": 64, "assoc_legendr": [64, 205], "hermite_prob": 64, "jacobi_poli": [64, 201], "gegenbauer_poli": [64, 201], "chebyshevt_poli": [64, 201], "chebyshevu_poli": [64, 201], "hermite_poli": [64, 201], "legendre_poli": [64, 201], "laguerre_poli": [64, 201], "r461": 64, "jacobi_polynomi": 64, "r462": 64, "jacobipolynomi": 64, "r463": 64, "jacobip": [64, 205], "jacobi_norm": 64, "normilz": 64, "p_m": 64, "delta_": [64, 167, 175, 190], "r464": 64, "r465": 64, "r466": 64, "hermite_prob_poli": [64, 201], "r467": 64, "gegenbauer_polynomi": 64, "r468": 64, "gegenbauerpolynomi": 64, "r469": 64, "gegenbauerc3": 64, "r470": 64, "chebyshev_polynomi": 64, "r471": 64, "chebyshevpolynomialofthefirstkind": 64, "r472": 64, "chebyshevpolynomialofthesecondkind": 64, "r473": 64, "r474": 64, "u_n": [64, 83, 198, 200, 201], "r475": 64, "r476": 64, "r477": 64, "r478": 64, "r479": 64, "chebyshev_root": 64, "r480": 64, "legendre_polynomi": 64, "r481": 64, "legendrepolynomi": 64, "r482": 64, "legendrep": [64, 205], "r483": 64, "legendrep2": 64, "r484": 64, "associated_legendre_polynomi": 64, "r485": 64, "r486": 64, "r487": 64, "r488": 64, "hermite_polynomi": 64, "r489": 64, "hermitepolynomi": 64, "r490": 64, "hermiteh": [64, 205], "probabilist": [64, 201, 225], "he_n": [64, 201], "telephon": 64, "a000085": 64, "232": 64, "764": 64, "2620": 64, "9496": 64, "r491": 64, "r492": 64, "l_n": [64, 83, 201], "r493": 64, "laguerre_polynomi": 64, "r494": 64, "laguerrepolynomi": 64, "r495": 64, "laguerrel": [64, 205], "r496": 64, "laguerrel3": 64, "r497": 64, "generalized_laguerre_polynomi": 64, "r498": 64, "associatedlaguerrepolynomi": 64, "r499": 64, "r500": 64, "spherical_harmon": 64, "ynm": [64, 190], "ynm_c": 64, "znm": 64, "r501": 64, "r502": 64, "sphericalharmon": 64, "r503": 64, "sphericalharmonici": 64, "r504": 64, "r505": 64, "r506": 64, "r507": 64, "z_n": [64, 199], "r508": 64, "r509": 64, "r510": 64, "eijk": 64, "levicivita": [64, 92], "eval_levicivita": 64, "pseudotensor": 64, "delta_rang": [64, 170], "kroneck": [64, 169, 170, 190, 226, 231], "r511": 64, "kronecker_delta": [64, 170], "indices_contain_equal_inform": [64, 170], "fermi": [64, 170], "above_fermi": [64, 170], "below_fermi": [64, 170], "is_above_fermi": [64, 170], "is_below_fermi": [64, 170], "is_only_below_fermi": [64, 170], "is_only_above_fermi": [64, 170], "killable_index": [64, 170], "preferred_index": [64, 170], "point2d": [65, 66, 67, 68, 69, 71, 72, 73], "arbitrary_point": [65, 66, 67, 68, 69, 70, 72], "polyfunc": [65, 201], "ambient_dimens": [65, 67, 69, 71], "plot_interv": [65, 66, 69, 72], "lower_bound": [65, 66, 69, 72], "upper_bound": [65, 66, 69, 72], "counterclockwis": [65, 66, 67, 71, 99, 100], "geometryent": [65, 66, 67, 69, 71, 72, 73], "hradiu": 66, "vradiu": 66, "ellipt": [66, 96, 192], "geometryerror": [66, 69, 72, 73], "radii": 66, "foci": 66, "periapsi": 66, "apoapsi": 66, "focus_dist": 66, "shortest": [66, 69, 72, 188, 211, 217, 221, 243], "auxiliary_circl": 66, "xmin": [66, 67, 69, 71, 72, 191], "ymin": [66, 67, 69, 71, 72, 191], "xmax": [66, 67, 69, 71, 72, 191], "ymax": [66, 67, 69, 71, 72, 191], "rectangl": [66, 67, 69, 71, 72, 191, 201], "director_circl": 66, "perpendicular": [66, 69, 70, 72, 85, 114, 128, 143, 189], "director": 66, "130": 66, "r512": 66, "encloses_point": [66, 67, 72], "border": [66, 72], "_slope": 66, "slope": [66, 67, 69, 72, 99, 100, 104, 114], "eq1": [66, 221, 223, 224], "eq2": [66, 86, 221, 224], "r513": 66, "108270": 66, "r514": 66, "equation_of_a_shifted_ellips": 66, "evolut": 66, "focal": [66, 139, 143], "100500": 66, "363": [66, 96, 199], "175": [66, 92, 198, 199], "is_tang": [66, 68], "tangent_lin": 66, "normal_lin": 66, "line2d": [66, 69, 72], "quartic": [66, 201, 223], "2020": [66, 149], "polar_second_moment_of_area": [66, 72], "moment": [66, 72, 99, 100, 122, 130, 133, 179, 191, 201, 218, 225], "constitu": [66, 72, 117, 180, 211, 250], "planar": [66, 72, 100, 114, 143], "resist": [66, 72, 99, 100, 214], "deflect": [66, 72, 99, 100], "bend": [66, 72, 99, 101, 267], "r515": 66, "polar_moment_of_inertia": [66, 72], "random_point": [66, 69, 70], "arb": 66, "364": 66, "notimpl": [66, 200], "second_moment_of_area": [66, 72], "centroid": [66, 72, 73, 99], "i_xx": [66, 72], "i_yi": [66, 72], "i_xi": [66, 72], "ellis": 66, "r516": 66, "list_of_second_moments_of_area": 66, "section_modulu": [66, 72], "sympify": [66, 72, 99, 102, 111, 117, 141, 144, 182], "farthest": [66, 72], "s_x": [66, 72], "s_y": [66, 72], "r517": 66, "semilatus_rectum": 66, "semi": [66, 69, 96], "latu": 66, "rectum": 66, "chord": 66, "conic": [66, 218, 250], "directrix": 66, "r518": 66, "semilatusrectum": 66, "r519": 66, "latus_rectum": 66, "collinear": [66, 68, 70, 71, 72, 191], "gx": 66, "hy": 66, "synonym": [66, 200], "p4": [66, 69, 71, 72, 191], "boundari": [67, 69, 99, 100, 184, 202, 213, 221, 225], "t2": [67, 72, 73, 96, 111, 117, 218, 225, 231], "ordering_of_class": 67, "is_similar": [67, 69, 72, 73], "uniform": [67, 191, 223, 225], "enlarg": 67, "shrink": [67, 81], "parameter_valu": [67, 70], "pent": 67, "rpent": 67, "rcirc": 67, "entity1": 68, "entity2": 68, "zp": 68, "is_collinear": [68, 71], "segment2d": [68, 69, 72, 73], "wikipappu": 68, "bc": [68, 102, 243, 246, 256], "subs_point": 68, "p11": 68, "p12": 68, "p13": 68, "p21": 68, "p22": 68, "p23": 68, "ll1": 68, "ll2": 68, "ll3": 68, "ll4": 68, "ll5": 68, "ll6": 68, "pp1": 68, "pp2": 68, "pp3": 68, "encyclopedia": [68, 187], "apr": 68, "s_hexagon_theorem": 68, "clockwis": [68, 83, 87, 99, 100, 102], "overlap": [68, 73, 95, 192, 213, 246], "infanc": 68, "geometryresult": 68, "fair": [68, 225], "angle_between": [69, 70, 72, 180], "reflex": 69, "eman": 69, "readili": [69, 92], "sw": 69, "obtus": 69, "smallest_angle_between": 69, "line3d": [69, 70, 71], "is_perpendicular": [69, 70, 71, 72], "ray2d": [69, 72], "closing_angl": 69, "are_concurr": [69, 70], "concurr": [69, 70, 202], "l3": [69, 123, 198], "l4": [69, 123], "bisector": [69, 72], "p5": [69, 71, 72, 191], "p6": [69, 72, 191], "p7": [69, 72, 191], "segment3d": [69, 70], "direction_ratio": [69, 71], "is_parallel": [69, 70], "parallel_lin": 69, "perpendicular_lin": [69, 70], "perpendicular_seg": 69, "enpoint": 69, "reform": 69, "92": [69, 199, 221, 225], "ccw": [69, 72], "ray3d": [69, 70, 143], "xdirect": 69, "ydirect": 69, "midpoint": [69, 71, 72, 83, 191, 256], "170": [69, 225], "341": 69, "perpendicular_bisector": 69, "linearentity2d": 69, "linearentity3d": [69, 70], "direction_cosin": [69, 71], "zdirect": 69, "normal_vector": [70, 143], "proce": [70, 134, 198, 200, 215, 223], "147": 70, "321": 70, "is_coplanar": 70, "perpendicualar": 70, "parallel_plan": 70, "on_circl": 70, "off_circl": 70, "perpendicular_plan": 70, "pt1": 70, "projection_lin": 70, "on_morph": 71, "affine_rank": 71, "are_coplanar": 71, "canberra_dist": 71, "canberra": 71, "geometricent": 71, "taxicab_dist": 71, "is_concycl": 71, "concycl": 71, "fewer": [71, 72, 134, 225, 272], "is_scalar_multipl": 71, "ambient": 71, "orthogonal_direct": 71, "taxicab": 71, "_nocheck": 71, "are_collinear": 71, "4x4": [71, 95, 142, 225], "travers": [72, 96, 112, 201, 214, 230, 240, 277], "unrot": 72, "circumscrib": 72, "spin": [72, 108, 122, 156, 157, 165, 267], "perimet": 72, "contact": [72, 122, 126, 127, 128, 129, 188, 229], "38": [72, 92, 96, 205, 218, 220, 225], "cut_sect": 72, "upper_polygon": 72, "lower_polygon": 72, "upper_seg": 72, "lower_seg": 72, "r520": 72, "r521": 72, "paulbourk": 72, "polygonmesh": 72, "insidepoli": 72, "first_moment_of_area": 72, "q_x": [72, 188], "q_y": [72, 188], "625": [72, 260], "3125": [72, 225], "525": 72, "3000": [72, 99], "r522": 72, "skyciv": 72, "beam": [72, 102, 139, 142, 267], "bmd": 72, "r523": 72, "mechanicalc": 72, "poly1": 72, "poly2": 72, "interior": [72, 201, 213], "180": [72, 189, 199], "r524": 72, "r525": 72, "r526": 72, "apothem": 72, "interior_angl": 72, "exterior_angl": 72, "circumcircl": 72, "incircl": 72, "inradiu": 72, "inscrib": 72, "circumcent": 72, "circumradiu": 72, "leg": 72, "square_in_unit_circl": 72, "kite": 72, "asa": 72, "sa": [72, 201], "sss": 72, "altitud": 72, "orthocent": 72, "exradii": 72, "median": [72, 225], "medial": 72, "nine_point_circl": 72, "straight": [72, 78, 104, 124, 188, 221], "eulerlin": 72, "equilater": 72, "coincid": [72, 92, 95, 114, 120, 192, 250, 255, 274], "excent": 72, "excircl": 72, "touch": [72, 122, 214], "r527": 72, "ly": [72, 92, 196], "exradiu": 72, "r528": 72, "r529": 72, "incent": 72, "is_equilater": 72, "is_isoscel": 72, "is_right": 72, "is_scalen": 72, "nine": [72, 205], "feet": 72, "real_num": 73, "hull": 73, "r530": 73, "graham_scan": 73, "r531": 73, "andrew": 73, "1979": [73, 175], "geomalgorithm": 73, "a10": 73, "_hull": 73, "t3": [73, 218], "averag": [73, 83, 96, 198, 225], "qq": [74, 75, 77, 78, 79, 83, 192, 193, 194, 195, 198, 200, 201, 202], "p_r": 74, "holonomic_funct": 74, "from_hyp": [75, 78], "holonomicfunct": [75, 78, 79], "from_meijerg": [75, 78], "initcond": [75, 77, 78], "expr_to_holonom": [75, 78, 79, 80], "lenic": [75, 77], "ground": [75, 114, 122, 126, 127, 128, 129, 192, 195, 196, 198, 200, 201, 223, 281], "meijerint": [75, 77, 81, 83], "_rewrite1": [75, 81], "_convert_poly_rat_alg": [75, 77], "_create_t": [75, 77], "_create_lookup_t": [77, 81], "differentialoper": [78, 79, 159], "old_poly_r": [78, 79, 192, 195, 196], "to_expr": [78, 79, 80, 106], "to_sequ": 78, "n_0": [78, 198, 223, 224], "indici": [78, 79, 80, 221], "c_j": [78, 81, 215], "holonomicsequ": 78, "r532": 78, "hal": 78, "inria": [78, 83], "fr": [78, 83, 96, 115, 120, 122, 124, 127, 128, 132, 134, 137, 225], "00070025": 78, "r533": 78, "risc": [78, 221, 250], "jku": [78, 221, 250], "risc_2244": 78, "diplform": 78, "_recur": 78, "rk4": 78, "71828182845905": 78, "10517083333333": 78, "22140257085069": 78, "34985849706254": 78, "49182424008069": 78, "64872063859684": 78, "82211796209193": 78, "01375162659678": 78, "22553956329232": 78, "45960141378007": 78, "71827974413517": 78, "331": 78, "4641": 78, "61051": 78, "771561": 78, "9487171": 78, "14358881": 78, "357947691": 78, "5937424601": 78, "to_hyp": 78, "as_list": [78, 201], "to_meijerg": 78, "homogen": [79, 83, 92, 106, 196, 198, 201, 218, 221, 222, 225], "1_0": 79, "1_1": 79, "0_0": 79, "0_1": 79, "pyplot": [79, 137], "plt": [79, 137], "list_of_poli": 79, "weyl": [79, 85], "differentialoperatoralgebra": 79, "Ore": 79, "dxa": 79, "endomorph": [79, 200], "frobeniu": [80, 92, 96, 198, 199], "subtleti": 81, "recast": [81, 217, 223, 224], "branchpoint": 81, "crude": [81, 122, 191], "decre": 81, "biholomorph": 81, "topologi": [81, 213], "neighbourhood": 81, "evid": [81, 115, 128, 215], "peculiar": [81, 189], "_split_mul": 81, "_mytyp": 81, "inequival": 81, "_mul_as_two_part": 81, "bx": [81, 225, 231], "twist": 81, "recognis": [81, 195, 215, 217], "anywai": [81, 217, 221], "analyitc": 81, "_rewrite_singl": 81, "_rewrite2": 81, "_rewrite_saxena_1": 81, "_rewrite_saxena": 81, "blogpost": 81, "remedi": 81, "exploit": [81, 237], "transpar": [81, 84, 185], "nessgrh": 81, "wordpress": [81, 218], "07": 81, "stade": 81, "c_u": 81, "d_1": [81, 175, 201, 225], "d_v": 81, "amalgam": 81, "prudnikov1990": [81, 215], "luke1969": [81, 215], "c_3": [81, 221], "c_4": 81, "visibl": [81, 191], "fulfil": [81, 190], "vee": [81, 86], "lceil": 81, "rceil": 81, "d_j": [81, 175, 215], "lambda_c": [81, 133], "lambda_": 81, "z_0": [81, 217], "z_1": 81, "a_i": [81, 175, 180, 189, 193, 198, 215], "c_5": 81, "c_6": 81, "c_7": 81, "c_8": 81, "lvert": 81, "rvert": 81, "c_9": 81, "versatil": 81, "bz": [81, 218, 231], "deform": [81, 100], "encircl": 81, "appeal": 81, "fox": 81, "obstacl": 81, "identif": [81, 224], "domin": [81, 87, 210, 212], "iT": 81, "omega_": 81, "disguis": 81, "meijerint_indefinit": 81, "meijerint_definit": 81, "meijerint_invers": 81, "kelli": [81, 215], "roach": [81, 215], "211": [81, 96, 201, 215, 221], "prudnikov": [81, 215], "yu": [81, 190, 215], "brychkov": [81, 215], "marichev": [81, 215], "gordon": [81, 149, 215], "breach": [81, 215], "_coeffexpvalueerror": 81, "_get_coeff_exp": 81, "_check_anteced": 81, "_check_antecedents_1": 81, "mt": 81, "_check_antecedents_invers": 81, "anteced": [81, 212], "_condsimp": 81, "hoc": 81, "simp": [81, 122, 180], "_dummi": 81, "_dummy_": 81, "_eval_cond": 81, "_expon": 81, "_find_splitting_point": 81, "fsp": 81, "_flip_g": 81, "_function": 81, "_guess_expans": 81, "sensibl": [81, 83], "_inflate_fox_h": 81, "_inflate_g": 81, "_int0oo": 81, "_int0oo_1": 81, "_int_invers": 81, "_is_analyt": 81, "almost": [81, 90, 98, 172, 191, 192, 196, 201, 202, 221, 225, 239, 240, 243, 276], "_meijerint_definite_2": 81, "trigexpand": 81, "_meijerint_definite_3": 81, "_meijerint_definite_4": 81, "only_doubl": 81, "_meijerint_indefinite_1": 81, "_mul_arg": 81, "_my_principal_branch": 81, "full_pb": 81, "nearer": 81, "superflu": 81, "opaqu": [81, 205], "fac": 81, "_rewrite_invers": 81, "costli": [81, 124, 278], "tx": [81, 280], "happili": [83, 229], "nonelementari": 83, "mellin_transform": 83, "bilater": 83, "laplac": [83, 103, 104, 106, 225], "mellintransform": 83, "integraltransform": 83, "nocond": 83, "inverse_mellin_transform": 83, "laplace_transform": [83, 106], "fourier_transform": 83, "hankel_transform": 83, "inverse_hankel_transform": 83, "suitabl": [83, 89, 98, 190, 193, 195, 198, 200, 205, 215, 218, 221, 224, 226, 275], "inversemellintransform": 83, "attemp": 83, "laplacetransform": 83, "inverse_laplace_transform": 83, "singularit": [83, 134], "inverselaplacetransform": 83, "_fast_inverse_laplac": 83, "rootsum": [83, 201, 207], "fouriertransform": 83, "_fourier_transform": 83, "inverse_fourier_transform": 83, "sine_transform": 83, "inverse_sine_transform": 83, "cosine_transform": 83, "inverse_cosine_transform": 83, "bixk": 83, "inversefouriertransform": 83, "sinetransform": 83, "inversesinetransform": 83, "cosinetransform": 83, "inversecosinetransform": 83, "hankeltransform": 83, "ht": 83, "inversehankeltransform": 83, "_compute_transform": 83, "_as_integr": 83, "integraltransformerror": 83, "_name": 83, "_collapse_extra": 83, "needev": 83, "function_vari": 83, "transform_vari": 83, "lazard": [83, 198, 201], "rioboo": 83, "trager": 83, "horowitz": 83, "ostrogradski": 83, "ratint": 83, "rationaltool": [83, 201], "ratint_logpart": 83, "ratint_ratpart": 83, "r534": 83, "bronstein": [83, 199, 201, 207, 223], "verlag": [83, 199], "deg": [83, 104, 120, 193, 198, 200, 201], "q_i": [83, 116, 134], "_t": [83, 120, 123, 137, 170, 179, 180, 184, 215, 225], "trigintegr": 83, "trigonometri": 83, "r535": 83, "integration_techniqu": 83, "deltaintegr": 83, "couldn": 83, "didn": [83, 92, 134], "singularityintegr": 83, "risch_integr": 83, "nonelementaryintegr": 83, "proven": [83, 96, 256, 274], "handle_first": 83, "separate_integr": 83, "rewrite_complex": 83, "forthcom": 83, "5109": 83, "outer": [83, 117, 135, 137, 153, 158, 159, 180, 182, 184, 189, 207, 213, 229, 250, 253, 254], "pop": [83, 218], "manualintegr": 83, "integral_step": 83, "student": [83, 214, 218, 225], "_i": [83, 170, 175, 202], "namedtupl": 83, "substep": 83, "sympy_gamma": 83, "app": 83, "intstep": 83, "urul": 83, "u_var": 83, "_u": [83, 170], "u_func": 83, "arctanrul": 83, "trigrul": 83, "rewriterul": 83, "addrul": 83, "powerrul": 83, "constanttimesrul": 83, "constantrul": 83, "norman": 83, "slowest": [83, 97], "retri": [83, 96], "degree_offset": 83, "unnecessary_permut": 83, "_try_heurisch": 83, "manuel": [83, 210], "poor": [83, 97], "man": [83, 199], "airi": [83, 221], "whittak": 83, "r536": 83, "sop": [83, 86], "cafe": 83, "pmint": 83, "r537": 83, "gedd": [83, 199], "stefanu": 83, "217": [83, 199], "r538": 83, "davenport": [83, 198, 199], "eurocam": 83, "lnc": [83, 199, 223], "157": [83, 96, 100, 199], "r539": 83, "iii": [83, 205, 221], "sigsam": 83, "bulletin": 83, "1982": [83, 190], "r540": 83, "transact": [83, 199], "1985": [83, 115, 136, 180, 250], "356": [83, 200, 223], "362": 83, "lookup": [83, 92, 96, 215], "huge": [83, 96, 201, 241], "entail": 83, "delic": [83, 192], "albeit": [83, 254], "mimic": [83, 84, 185, 244], "moder": 83, "irrespect": [83, 218, 221, 246], "line_integr": 83, "as_sum": 83, "subinterv": 83, "trapezoid": [83, 92, 225], "730": 83, "809": 83, "decai": 83, "r541": 83, "riemann_sum": 83, "r542": 83, "cauchy_principal_valu": 83, "r543": 83, "cauchyprincipalvalu": 83, "int_a": 83, "uvar": 83, "ui": [83, 96, 222], "accomplish": [83, 134, 137, 257], "3aissu": 83, "3aopen": 83, "3aintegr": 83, "gauss_legendr": 83, "n_digit": 83, "legendr": [83, 96, 201, 205, 218], "r544": 83, "w_i": [83, 139, 201, 221], "7746": 83, "55556": 83, "88889": 83, "86114": 83, "33998": 83, "34785": 83, "65215": 83, "gauss_laguerr": 83, "gauss_gen_laguerr": 83, "gauss_hermit": 83, "gauss_chebyshev_t": 83, "gauss_chebyshev_u": 83, "gauss_jacobi": 83, "gauss_lobatto": 83, "gaussian_quadratur": 83, "r545": 83, "fsu": 83, "jburkardt": 83, "cpp_src": 83, "legendre_rul": 83, "laguerr": [83, 201, 205], "r546": 83, "41577": 83, "2943": 83, "2899": 83, "71109": 83, "27852": 83, "010389": 83, "22285": 83, "1889": 83, "9927": 83, "7751": 83, "8375": 83, "983": 83, "45896": 83, "417": [83, 217], "11337": 83, "010399": 83, "00026102": 83, "9855e": 83, "93laguerre_quadratur": 83, "r547": 83, "laguerre_rul": 83, "hermit": [83, 87, 92, 93, 194, 200, 201, 205, 225], "r548": 83, "2247": 83, "29541": 83, "1816": 83, "3506": 83, "3358": 83, "43608": 83, "00453": 83, "15707": 83, "72463": 83, "hermite_quadratur": 83, "r549": 83, "hermite_rul": 83, "r550": 83, "gen_hermite_rul": 83, "r551": 83, "19016": 83, "7845": 83, "5253": 83, "4493": 83, "31413": 83, "00906": 83, "97851": 83, "9904": 83, "3193": 83, "712": 83, "53087": 83, "67721": 83, "11895": 83, "0023152": 83, "r552": 83, "gen_laguerre_rul": 83, "r553": 83, "86602": 83, "0472": 83, "96593": 83, "70711": 83, "25882": 83, "5236": 83, "93gauss_quadratur": 83, "r554": 83, "chebyshev1_rul": 83, "r555": 83, "3927": 83, "7854": 83, "90097": 83, "62349": 83, "22252": 83, "084489": 83, "27433": 83, "42658": 83, "r556": 83, "chebyshev2_rul": 83, "jacobi": [83, 96, 108, 201, 205], "r557": 83, "7063": 83, "0973": 83, "33795": 83, "87174": 83, "5917": 83, "2093": 83, "050584": 83, "22169": 83, "39439": 83, "93jacobi_quadratur": 83, "r558": 83, "jacobi_rul": 83, "r559": 83, "gegenbauer_rul": 83, "lobatto": 83, "r560": 83, "3333": 83, "44721": 83, "16667": 83, "83333": 83, "93lobatto_rul": 83, "r561": 83, "page_888": 83, "intpoli": 83, "chin": 83, "al": [83, 120, 149, 198, 214, 217], "2015": [83, 224], "unit_cub": 83, "polytope_integr": 83, "eric": [83, 199], "jean": 83, "lasserr": 83, "sukumar": 83, "nonconvex": 83, "967": 83, "981": 83, "dilbert": 83, "engr": 83, "ucdavi": 83, "suku": 83, "max_degre": [83, 201], "689": [83, 100], "21875": 83, "octahedron": 83, "trivari": 83, "enable_automatic_int_sympif": 84, "enable_automatic_symbol": 84, "init_ipython_sess": 84, "argv": [84, 236], "init_python_sess": 84, "use_latex": [84, 185, 281], "quiet": 84, "str_printer": [84, 185], "latex_print": [84, 185], "pylab": 84, "stringifi": [84, 185], "sstrrepr": [84, 185, 205], "lexograph": [84, 185], "gui": [84, 185], "statu": 84, "\u03b8": [84, 114, 142, 224], "int_to_integ": 84, "decistmt": 84, "f401": 84, "0x12": 84, "num_column": [84, 185, 205, 221], "no_glob": [84, 185], "ip": [84, 158, 164, 185], "forecolor": [84, 185], "backcolor": [84, 185], "fontsiz": [84, 185, 205], "10pt": [84, 185, 205], "latex_mod": [84, 185], "print_builtin": [84, 185], "interactiveconsol": [84, 185], "preambl": [84, 185, 205], "handwritten": [84, 185], "ctan": [84, 185], "pkg": [84, 185], "dvi": [84, 185, 205], "foreground": [84, 185], "black": [84, 155, 166, 185, 205, 281], "white": [84, 185, 225], "documentclass": [84, 185, 205], "dpi": [84, 185], "u03b8": 84, "dvip": 84, "r562": 84, "r563": 84, "the_68_standard_colors_known_to_dvip": 84, "config": 84, "root_system": 85, "rootsystem": 85, "cartantyp": 85, "cartan": 85, "subalgebra": 85, "adjoint": [85, 87, 92, 147, 151], "hyperplan": 85, "k_y": 85, "r564": 85, "r565": 85, "humphrei": 85, "add_as_root": 85, "root1": 85, "root2": 85, "add_simple_root": 85, "newroot": 85, "all_root": [85, 96, 201], "cartan_matrix": 85, "dynkin_diagram": 85, "dynkin": 85, "root_spac": 85, "simple_root": 85, "type_a": 85, "typea": 85, "basic_root": 85, "iin": 85, "jth": [85, 224], "ijth": 85, "cartan_typ": 85, "highest_root": 85, "lie_algebra": 85, "positive_root": 85, "type_b": 85, "typeb": 85, "b4": 85, "b3": [85, 120, 137, 180, 256], "type_c": 85, "typec": 85, "c4": [85, 87, 89, 221], "type_d": 85, "d4": [85, 225], "dmension": 85, "type_": 85, "e6": 85, "type_f": 85, "typef": 85, "f_4": [85, 116], "f4": [85, 191], "type_g": 85, "typeg": 85, "weyl_group": 85, "weylgroup": 85, "semisimpl": 85, "isometri": 85, "coxet": 85, "coxeter_diagram": 85, "undirect": [85, 243], "s_is_j": 85, "delete_doubl": 85, "element_ord": 85, "weylelt": 85, "group_nam": 85, "group_ord": 85, "192": 85, "matrix_form": 85, "cartantype_gener": 85, "standard_cartan": 85, "dynkindiagram": 85, "cartanmatrix": 85, "sopform": 86, "minterm": 86, "dontcar": 86, "simplified_pair": 86, "combo": 86, "outcom": [86, 173, 225], "posform": 86, "r566": 86, "quin": 86, "mccluskey_algorithm": 86, "r567": 86, "27t": 86, "care_term": 86, "r568": 86, "r569": 86, "anfform": 86, "truthvalu": 86, "anf": 86, "funciton": 86, "zhegalkin": 86, "r570": 86, "zhegalkin_polynomi": 86, "as_set": 86, "booleantru": 86, "doubt": [86, 120], "greet": 86, "booleanfals": 86, "universalset": [86, 213], "nand": 86, "xnor": 86, "gate": [86, 150, 155, 157, 163, 164, 166, 267], "perspect": [86, 96, 106, 175, 191, 238, 255, 259], "multiplex": 86, "disjunct": 86, "to_anf": 86, "oplu": [86, 154], "to_cnf": 86, "cnf": 86, "mccluskei": 86, "to_dnf": 86, "to_nnf": 86, "nnf": 86, "is_anf": 86, "is_cnf": 86, "is_dnf": 86, "is_nnf": 86, "gateinputcount": 86, "simplify_log": 86, "fewest": [86, 164], "conver": 86, "r571": 86, "bool_map": 86, "bool1": 86, "bool2": 86, "function1": 86, "function2": 86, "distribute_and_over_or": 86, "distribute_or_over_and": 86, "distribute_xor_over_and": 86, "eliminate_impl": 86, "truth_tabl": 86, "ibin": [86, 243], "integer_to_term": 86, "0001111011": [86, 243], "1101111000": [86, 243], "term_to_integ": 86, "bool_maxterm": 86, "maxterm": 86, "complement": [86, 89, 201, 213, 224], "r572": 86, "canonical_normal_form": 86, "indexing_maxterm": 86, "bool_minterm": 86, "patter": 86, "r573": 86, "indexing_minterm": 86, "bool_monomi": 86, "enumar": 86, "anf_coeff": 86, "to_int_repr": 86, "all_model": 86, "unsatisfi": 86, "use_model": 86, "unsat": 86, "matrixbas": [87, 88, 89, 92, 194], "dirac": [87, 92, 104, 108, 109, 168, 205], "__abs__": [87, 196], "__add__": [87, 196, 200], "shapeerror": [87, 89, 92], "__len__": 87, "96": [87, 92, 225], "mismatch": 87, "matrix_multiply_elementwis": [87, 92], "applyfunc": [87, 88, 92, 128, 180, 226], "col": [87, 89, 92, 95, 106, 137, 194, 200, 278], "col_del": [87, 92, 278], "col_join": [87, 92, 122], "col_insert": [87, 278], "row_insert": [87, 278], "row_join": [87, 92, 122], "companion": [87, 89], "c0": [87, 89, 212, 221, 223], "sparsematrix": [87, 92, 95, 206, 217], "diag": [87, 89, 92, 95, 137, 194, 231, 278], "immutablematrix": [87, 88, 89, 106, 180, 225, 250, 253, 278], "blockmatrix": [87, 89, 92], "sparsetool": [87, 95], "kth": [87, 96], "rowslist": [87, 194], "colslist": 87, "submatrix": [87, 92, 198, 225], "get_diag_block": [87, 89, 92], "decoupl": 87, "hstack": [87, 194], "is_anti_symmetr": 87, "is_diagon": [87, 92], "is_low": [87, 194], "is_upp": [87, 194], "matrixeigen": [87, 92], "is_diagonaliz": [87, 92], "is_hermitian": [87, 92], "is_lower_hessenberg": 87, "hessenberg": [87, 92], "superdiagon": 87, "is_upper_hessenberg": 87, "is_strongly_diagonally_domin": 87, "strongli": [87, 92, 194, 243], "m1": [87, 92, 96, 99, 100, 141, 149, 167, 169, 173, 218, 221, 226, 231], "subdiagon": [87, 92], "is_weakly_diagonally_domin": 87, "weakli": [87, 243], "vacuou": 87, "jordan_block": [87, 92], "eigenv": [87, 92, 120, 122, 137, 164, 276, 278], "rectangular": [87, 92, 213, 224, 254], "r574": 87, "jordan_matrix": [87, 221], "dotprodsimp": 87, "blowup": 87, "multiply_elementwis": [87, 92], "hadamard": [87, 89, 92, 154, 155, 166, 205], "elementwis": [87, 89, 92, 226], "300": [87, 92, 96, 99, 186, 191, 202, 259], "bmatrix": [87, 89, 92, 124, 132, 133, 134, 135, 180, 189, 218], "a_0": [87, 92, 208, 218, 221, 226, 282], "vdot": [87, 89, 92, 175], "alpha_0": 87, "alpha_1": [87, 96, 200], "alpha_": [87, 190], "permute_col": 87, "permute_row": 87, "mulsimp": 87, "rmultipli": 87, "__rmul__": 87, "rot90": 87, "anticlockwis": 87, "row_del": [87, 92, 278], "todod": 87, "tolist": [87, 226], "vec": [87, 92, 114, 137, 180, 190, 198, 256, 257, 259], "vech": 87, "check_symmetri": 87, "vstack": [87, 194], "wilkinson": 87, "w_": [87, 200], "wminu": 87, "wplu": 87, "r575": 87, "mathwork": [87, 104, 225, 278], "cleve": 87, "04": [87, 225], "r576": 87, "claredon": 87, "oxford": 87, "662": 87, "intm": 87, "mutabledensematrix": [88, 194, 246], "densematrix": [88, 92], "ldldecomposit": [88, 92], "ldl": [88, 92], "choleski": [88, 92], "ludecomposit": [88, 89, 92, 278], "qrdecomposit": [88, 92], "as_immut": 88, "lower_triangular_solv": [88, 92], "upper_triangular_solv": [88, 92], "gauss_jordan_solv": [88, 92], "cholesky_solv": [88, 92], "diagonal_solv": [88, 92], "ldlsolv": [88, 92], "lusolv": [88, 92, 114, 116, 134, 138, 223, 278], "qrsolv": [88, 92], "pinv_solv": [88, 92], "permutedim": [89, 226, 227], "arraytensorproduct": [89, 227], "from_index_summ": 89, "first_index": 89, "last_index": 89, "longrightarrow": 89, "matpow": [89, 205], "hadamard_product": 89, "aka": 89, "hadamardproduct": [89, 205], "hadamardpow": [89, 205], "ddot": [89, 92, 124, 133, 185, 188, 205, 282], "functionmatrix": 89, "lazili": [89, 211], "342923500": 89, "permutationmatrix": [89, 92], "matrixpermut": 89, "companionmatrix": 89, "matrixset": [89, 213], "submatric": [89, 92, 194, 225], "block_collaps": 89, "dat": [89, 243], "irregular": [89, 92], "ldudecomposit": 89, "ldu": 89, "2x2": [89, 95, 139, 194, 221], "noninvertiblematrixerror": [89, 278], "udldecomposit": 89, "lu": [89, 92, 194, 199], "udl": 89, "schur": 89, "penros": [89, 92], "pinv": [89, 92], "r577": 89, "schur_compl": 89, "blockdiagmatrix": [89, 92], "diag_block": 89, "alias": [90, 196], "bridg": [90, 102, 120, 244], "tension": 90, "gramschmidt": 92, "m2": [92, 96, 99, 100, 117, 141, 149, 167, 169, 173, 200, 218, 221, 226, 231], "126": [92, 96, 204], "150": [92, 106, 218], "v3": [92, 180, 184, 256], "glue": 92, "m3": [92, 149, 218, 226], "adj": 92, "qr": 92, "cheat": 92, "soln": 92, "gram": [92, 175, 177], "schmidt": 92, "out1": 92, "out2": 92, "1692": 92, "1551": 92, "423": 92, "6707": 92, "spot": [92, 138], "eigenvector": [92, 120, 164, 165, 190], "nullspac": [92, 194], "matrixdetermin": 92, "adjug": 92, "berkowitz": 92, "bareiss": 92, "cofactor_matrix": 92, "charpoli": [92, 194, 278], "_simplifi": 92, "purepoli": [92, 201], "samuelson": 92, "minor_submatrix": 92, "iszerofunc": [92, 278], "barei": 92, "det_lu": 92, "functiontyp": 92, "_iszero": [92, 278], "_is_zero_after_expand_mul": 92, "unrecogn": 92, "nonsquarematrixerror": [92, 221], "i3": [92, 107, 120, 137, 231], "perman": 92, "ryser": 92, "450": 92, "r578": 92, "prof": 92, "ben": 92, "berkelei": 92, "bernd": 92, "ban275": 92, "r579": 92, "permanent_": 92, "r580": 92, "r581": 92, "0904": 92, "3251": 92, "matrixreduct": 92, "echelon_form": [92, 278], "with_pivot": 92, "echelon": [92, 194, 224, 278], "elementary_col_op": 92, "kn": [92, 99, 100], "col1": 92, "col2": 92, "km": [92, 96, 110, 115, 122, 124, 127, 128, 132, 134, 137, 176], "elementary_row_op": 92, "row1": 92, "row2": 92, "is_echelon": [92, 278], "rref": [92, 194], "pivot": [92, 194, 278], "normalize_last": 92, "rref_matrix": [92, 194], "rref_pivot": [92, 194], "301369863013699": 92, "712328767123288": 92, "noramlize_last": 92, "matrixsubspac": 92, "subspac": [92, 200], "columnspac": [92, 194], "rowspac": [92, 194], "orthonorm": [92, 137, 165, 189, 254], "rankcheck": 92, "r582": 92, "93schmidt_process": 92, "eigen": [92, 146], "bidiagonal_decomposit": 92, "ubv": 92, "bidiagon": 92, "hang": [92, 124, 128, 221, 222], "bidiagn": 92, "r583": 92, "golub": 92, "van": [92, 96, 199], "loan": 92, "r584": 92, "vslobodi": 92, "household": 92, "r585": 92, "r586": 92, "reals_onli": 92, "throw": [92, 98, 120, 200, 218, 224], "error_when_incomplet": 92, "eig": [92, 120, 137], "matrixerror": 92, "got": [92, 192, 195, 198, 201, 204, 236, 237, 243, 244, 274, 276, 277], "eigenvect": [92, 120, 137, 164, 278], "tidi": 92, "artifact": 92, "ret": 92, "eigenspac": 92, "rag": 92, "a_3": 92, "diagonaliz": [92, 278], "is_indefinit": 92, "semidefinit": [92, 225], "plot3d": [92, 191], "is_positive_definit": 92, "is_positive_semidefinit": 92, "hire": [92, 99, 100, 104, 191, 208], "is_negative_definit": 92, "is_negative_semidefinit": 92, "defer": [92, 247], "r587": 92, "definiteness_of_a_matrix": 92, "r588": 92, "positivedefinitematrix": 92, "r589": 92, "amer": 92, "259": 92, "264": [92, 223], "r590": 92, "r591": 92, "r592": 92, "r593": 92, "r594": 92, "r595": 92, "r596": 92, "r597": 92, "r598": 92, "r599": 92, "r600": 92, "r601": 92, "jordan_form": 92, "calc_transform": 92, "left_eigenvect": 92, "singular_valu": 92, "condition_numb": 92, "matrixcalculu": 92, "hessian": 92, "wronskian": [92, 221], "simpfunc": 92, "permutebkwd": 92, "permutefwd": 92, "lucombin": 92, "defici": [92, 96, 224], "matrixi": 92, "ludecomposition_simpl": [92, 278], "ludecompositionff": 92, "pa": [92, 115, 117, 132, 135, 138], "r602": 92, "zhou": 92, "jeffrei": [92, 217], "frontier": [92, 213], "china": 92, "67": [92, 199], "2008": [92, 190, 199, 201, 205], "row_swap": 92, "compres": 92, "permute_backward": 92, "permute_forward": 92, "intiuit": 92, "lu_": 92, "_find_reasonable_pivot": 92, "lu_solv": [92, 194], "qr_solv": 92, "augument": 92, "167": 92, "158": [92, 100], "27261": 92, "30625": 92, "348": 92, "1914": 92, "6125": 92, "30589": 92, "198": 92, "1225": 92, "q_aug": 92, "r_aug": 92, "analytic_func": 92, "connected_compon": [92, 243], "connected_components_decomposit": 92, "relax": [92, 98], "3x1": 92, "1x3": 92, "conjugate_convent": 92, "dual": [92, 162, 168], "anti_symmetr": 92, "speak": [92, 200, 257], "freevar": 92, "underdetermin": [92, 223, 224], "free_var_index": 92, "tau0": [92, 224, 225], "tau1": 92, "taus_zero": 92, "sol_uniqu": 92, "r603": 92, "gaussian_elimin": 92, "try_block_diag": 92, "inverse_g": [92, 278], "inverse_lu": [92, 278], "inverse_adj": [92, 278], "inverse_ch": 92, "inverse_ldl": 92, "inverse_qr": 92, "inv_mod": 92, "cof": 92, "inverse_block": 92, "blockwis": 92, "ntop": 92, "key2bound": 92, "key2ij": 92, "reciproc": [92, 225, 282], "fro": 92, "sing": 92, "spectral": 92, "rd": [92, 120, 205], "pseudoinvers": 92, "r604": 92, "penrose_pseudoinvers": 92, "arbitrary_matrix": 92, "wn_m": 92, "_w0_0": 92, "_w1_0": 92, "_w2_0": 92, "59": [92, 221], "r605": 92, "obtaining_all_solutions_of_a_linear_system": 92, "print_nonzero": [92, 243], "symb": [92, 205], "rank_decomposit": 92, "r606": 92, "rank_factor": 92, "r607": 92, "piziak": 92, "odel": 92, "magazin": 92, "193": [92, 104], "2307": 92, "2690882": 92, "singular_value_decomposit": 92, "condens": [92, 224], "orthogn": 92, "v_aug": 92, "u_aug": 92, "s_aug": 92, "gj": 92, "solve_least_squar": 92, "strongly_connected_compon": [92, 194, 243], "62": [92, 198], "strongly_connected_components_decomposit": 92, "rowstart": 92, "rowend": 92, "rowsep": 92, "colsep": 92, "strprinter": [92, 185], "upper_hessenberg_decomposit": 92, "213": 92, "134": 92, "216": [92, 198], "hessenbergdecomposit": 92, "jordan_cel": 92, "varlist": 92, "r608": 92, "hessian_matrix": 92, "vlist": 92, "r609": 92, "casoratian": 92, "kernel": [92, 192, 198, 200, 223], "vanish": [92, 170, 198, 201, 204, 221, 250], "rsolve_hyp": [92, 223], "randmatrix": 92, "percent": [92, 224], "prng": 92, "percentag": [92, 96], "46": [92, 99, 175, 204, 223, 225], "list2numpi": 92, "dtype": [92, 97, 192, 194, 195, 196, 205, 244], "matrix2numpi": 92, "symarrai": 92, "ndarrai": [92, 225, 231, 237], "prefix_i1_i2_": 92, "_2": [92, 114, 179, 180, 190, 221], "a_0_0": 92, "a_0_1": 92, "a_0_2": 92, "a_1_0": 92, "a_1_1": 92, "a_1_2": 92, "a_0_0_0": 92, "a_0_0_1": 92, "a_0_1_0": 92, "a_0_1_1": 92, "a_0_2_0": 92, "a_0_2_1": 92, "a_1_0_0": 92, "a_1_0_1": 92, "a_1_1_0": 92, "a_1_1_1": 92, "a_1_2_0": 92, "a_1_2_1": 92, "rot_axis1": 92, "rot_axis2": 92, "rot_axis3": 92, "a2idx": 92, "normalform": [93, 194], "hermite_normal_form": [93, 194, 200], "check_rank": [93, 194], "hnf": [93, 194, 200], "explos": [93, 194], "believ": [93, 96, 194], "dmdomainerror": [93, 194], "dmshapeerror": [93, 194], "r610": 93, "cohen": [93, 194, 199, 200], "mutablesparsematrix": 94, "_doktocsr": 95, "csr": 95, "ja": 95, "ia": 95, "_csrtodok": 95, "dok": 95, "1x1": [95, 225], "vert": [95, 186, 189, 259], "saw": [95, 195, 282], "dynam": [96, 103, 104, 106, 110, 112, 115, 116, 119, 122, 130, 132, 133, 134, 135, 136, 137, 138, 179, 180, 182, 184, 188, 189, 240, 241, 250], "eratosthen": 96, "_reset": [96, 201], "_list": 96, "extend_to_no": 96, "mobiusrang": 96, "primerang": 96, "10th": 96, "totientrang": 96, "1e11": 96, "50000": 96, "primal": [96, 192], "1299709": 96, "r611": 96, "prime_number_theorem": 96, "table_of_": 96, "cf": [96, 198], "28x": 96, "2c_x_": 96, "2f_log_x": 96, "2c_and_li": 96, "r612": 96, "approximations_for_the_nth_prime_numb": 96, "r613": 96, "27_number": 96, "arr1": 96, "arr2": 96, "prevprim": 96, "9th": 96, "nextprim": 96, "occupi": [96, 170, 231], "conjectur": [96, 198], "twin": 96, "bertrand": 96, "brocard": 96, "primori": 96, "r614": 96, "r615": 96, "utm": 96, "postul": 96, "r616": 96, "s_postul": 96, "primefactor": 96, "argu": 96, "cycle_length": 96, "nmax": 96, "brent": [96, 240], "floyd": 96, "cycle_detect": 96, "17737": 96, "20000": 96, "compositepi": 96, "831": 96, "smoothness_p": 96, "sm": [96, 120, 137, 192], "psm": 96, "govern": 96, "10431": 96, "annot": [96, 191, 205], "21477639576571": 96, "4410317": 96, "1787": 96, "4869863": 96, "2434931": 96, "multiplicity_in_factori": 96, "nfac": 96, "52818775009509558395695966887": 96, "is2pow": 96, "pollard_rho": 96, "1234": [96, 218], "max_step": 96, "pollard": [96, 221], "leader": 96, "16843009": 96, "32767": 96, "4i": 96, "3i": 96, "2489": 96, "1482": 96, "285": [96, 223], "leadup": 96, "r617": 96, "crandal": 96, "carl": [96, 240], "pomer": [96, 240], "229": 96, "231": [96, 180], "pollard_pm1": 96, "likelihood": 96, "1009": 96, "am": [96, 175, 205], "255": 96, "crack": 96, "617": 96, "1786": 96, "worst": [96, 201, 221], "scenario": [96, 225], "divisisor": 96, "realist": 96, "r618": 96, "236": 96, "r619": 96, "washington": 96, "2007": [96, 136, 240], "spring": [96, 111, 114, 115, 120, 125], "ent": 96, "node81": 96, "r620": 96, "toronto": 96, "yuvalf": 96, "use_ecm": 96, "65537": [96, 204], "1407633717262338957430697921446883": 96, "991": 96, "202916782076162456022877024859": 96, "4200": 96, "1764": 96, "toggl": [96, 191], "12345678910111213141516": 96, "2507191691": 96, "1231026625769": 96, "factorrat": 96, "rat": 96, "987": 96, "10000000001": 96, "99009901": 96, "divisor_count": 96, "tim": [96, 243], "stackoverflow": [96, 243, 246], "1010381": 96, "proper_divisor": 96, "proper_divisor_count": 96, "udivisor": 96, "udivisor_count": 96, "r621": 96, "unitary_divisor": 96, "r622": 96, "unitarydivisor": 96, "r623": 96, "unitarydivisorfunct": 96, "antidivisor": 96, "r624": 96, "margin": [96, 106, 191, 225], "antidivisor_count": 96, "a066272": 96, "a066272a": 96, "r625": 96, "r626": 96, "27s_totient_funct": 96, "r627": 96, "totientfunct": 96, "r628": 96, "carmichael_funct": 96, "r629": 96, "carmichaelfunct": 96, "sigma_k": 96, "m_i": [96, 190, 198], "m_ik": 96, "r630": 96, "divisor_funct": 96, "udivisor_sigma": 96, "47450": 96, "152": 96, "r631": 96, "core_t": 96, "core_2": 96, "squarefre": [96, 200], "cubefre": 96, "9424": 96, "1178": 96, "379238": 96, "square_factor": [96, 218], "r632": 96, "free_integ": 96, "squarefree_cor": 96, "primenu": 96, "r633": 96, "primeomega": 96, "r634": 96, "mersenne_prime_expon": 96, "mersenn": 96, "4423": 96, "r635": 96, "perfectnumb": 96, "r636": 96, "perfect_numb": 96, "is_mersenne_prim": 96, "r637": 96, "mersenneprim": 96, "abund": 96, "is_abund": 96, "r638": 96, "abundantnumb": 96, "is_defici": 96, "r639": 96, "deficientnumb": 96, "is_amic": 96, "amic": 96, "220": [96, 201], "r640": 96, "amicable_numb": 96, "symmetric_residu": 96, "v_i": [96, 200, 223], "65": [96, 106, 198, 225], "639985": [96, 198], "912285": [96, 198], "954": 96, "gf_crt": [96, 198], "solve_congru": [96, 198], "programm": [96, 205], "galoistool": [96, 198], "crt1": 96, "4536": 96, "252": 96, "756": 96, "crt2": 96, "remainder_modulus_pair": 96, "mi": [96, 205], "k1": [96, 137, 168, 195, 196, 198], "k2": [96, 137, 195], "c_kn": 96, "binomial_coefficients_list": 96, "multinomial_coeffici": 96, "k_m": 96, "k_i": [96, 198, 215], "yann": 96, "laigl": 96, "chapui": 96, "permiss": [96, 190], "multinomial_coefficients_iter": 96, "_tupl": 96, "m53": 96, "partitions_": 96, "npartit": 96, "hardi": 96, "rademach": [96, 225], "r641": 96, "1958": [96, 190], "partitionfunctionp": 96, "is_euler_pseudoprim": 96, "pseudoprim": 96, "r642": 96, "euler_pseudoprim": 96, "prep": [96, 221, 222], "r643": 96, "mersenneforum": 96, "showpost": 96, "110896": 96, "mr": 96, "miller": 96, "rabin": 96, "wit": 96, "1373651": 96, "479001599": 96, "r644": 96, "135": 96, "138": 96, "93rabin_primality_test": 96, "deterministic_vari": 96, "is_lucas_prp": 96, "selfridg": 96, "377": 96, "1159": 96, "1829": 96, "3827": 96, "5459": 96, "5777": 96, "9071": 96, "9179": 96, "bailli": 96, "wagstaff": 96, "1980": [96, 243], "mpq": [96, 195], "lucaspseudoprim": 96, "a217120": 96, "lucas_pseudoprim": 96, "is_strong_lucas_prp": 96, "bpsw": 96, "10877": 96, "16109": 96, "18971": 96, "a217255": 96, "psw_primality_test": 96, "is_extra_strong_lucas_prp": 96, "grantham": 96, "mo": [96, 137, 205], "jone": [96, 142], "preprint": 96, "a217719": 96, "perl": 96, "counterexampl": [96, 282], "989": 96, "3239": 96, "jon": 96, "mcom": 96, "234": 96, "01197": 96, "1e3": 96, "1e23": [96, 246], "near_int": 96, "strong_pseudoprim": 96, "is_gaussian_prim": 96, "r645": 96, "gaussian_prim": 96, "residue_ntheori": 96, "n_order": 96, "cong": [96, 198], "primitive_root": [96, 200], "r646": 96, "stein": [96, 221], "r647": 96, "hackman": 96, "sqrt_mod": 96, "sqrt_mod_it": 96, "quadratic_residu": 96, "nthroot_mod": 96, "109": [96, 199, 218], "is_nthpow_residu": 96, "r648": 96, "is_quad_residu": 96, "legendre_symbol": 96, "genfrac": 96, "nonresidu": 96, "alpha_2": [96, 200], "alpha_k": 96, "discrete_log": 96, "prime_ord": 96, "giant": [96, 224], "pohlig": 96, "r649": 96, "discretelogarithm": 96, "r650": 96, "cryptographi": [96, 261, 268], "menez": 96, "vanston": 96, "continued_fract": 96, "continued_fraction_period": 96, "continued_fraction_reduc": 96, "continued_fraction_converg": 96, "continued_fraction_iter": 96, "106": 96, "103993": 96, "33102": 96, "104348": 96, "33215": 96, "208341": 96, "66317": 96, "292": 96, "r651": 96, "discrimin": [96, 196, 198, 200, 201], "r652": 96, "periodic_continued_fract": 96, "r653": 96, "rosen": 96, "379": [96, 201], "381": 96, "januari": 96, "1992": [96, 199, 223], "233": [96, 199, 221], "718281835": 96, "287": 96, "count_digit": 96, "1111339": 96, "0xfa": 96, "c77": 96, "is_palindrom": [96, 243], "palindrom": 96, "0o121": 96, "oct": 96, "0o171": 96, "fermion": [96, 170], "r654": 96, "b6bius_funct": 96, "r655": 96, "thoma": [96, 136], "koshi": 96, "egyptian_fract": 96, "greedi": [96, 198, 214, 217], "egyptian": 96, "r656": 96, "jewett": 96, "takenouchi": 96, "3192": 96, "1118": 96, "2580": 96, "sylvest": [96, 198], "r657": 96, "seldom": 96, "blow": 96, "doubli": 96, "exhibit": [96, 190, 200, 214], "singli": 96, "tendenc": 96, "r658": 96, "1921": 96, "golumb": 96, "1962": 96, "propos": 96, "bleicher": 96, "1972": 96, "r659": 96, "420": [96, 218], "140": 96, "574": 96, "2788": 96, "6460": 96, "11590": 96, "33062": 96, "113820": 96, "greedy_algorithm_for_egyptian_fract": 96, "ic": [96, 221], "uci": 96, "eppstein": 96, "numth": 96, "egypt": 96, "ami": 96, "ektf": 96, "hu": 96, "finalpdf": 96, "ami_42_from129to134": 96, "bbp_pi": 96, "pi_hex_digit": 96, "hex": 96, "3243f6a8885a30": 96, "324": [96, 199], "r660": 96, "numberworld": 96, "subexponenti": 96, "comfort": [96, 97], "15154262241479": 96, "15423094826093": 96, "799333555511111": 96, "809709509409109": 96, "888888877777777": 96, "914148152112161": 96, "factoris": [96, 195, 196, 221], "max_curv": 96, "lenstra": 96, "repeatedli": [96, 107, 237], "ecm_one_factor": 96, "pseudorandom": [96, 243], "25645121643901801": 96, "5394769": 96, "4753701529": 96, "9804659461513846513": 96, "4641991": 96, "2112166839943": 96, "7060005655815754299976961394452809": 96, "6988699669998001": 96, "1010203040506070809": 96, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 96, "2709077133180915240135586837960864768806330782747": 96, "248": 96, "prime_bound": 96, "error_term": 96, "siq": 96, "modn": 96, "mulipl": 96, "r661": 96, "semanticscholar": 96, "5c52": 96, "8a975c1405bd35c65993abf5a4edb667c1db": 96, "r662": 96, "rieselprim": 96, "ziki": 96, "initializing_quadratic_siev": 96, "5915587277": 96, "3267000013": 96, "facilit": [97, 130, 141, 187, 236], "000507214304613640": 97, "microsecond": 97, "000507214304614": 97, "hundr": [97, 276], "nanosecond": 97, "84147098": [97, 244, 271], "84119981": 97, "84092844": 97, "05426074": 97, "05433146": 97, "05440211": 97, "nano": 97, "manufactur": 97, "asnumpi": 97, "compliat": 97, "jnp": 97, "asarrai": 97, "84147096": 97, "8411998": 97, "05426079": 97, "05433151": 97, "autowrap": [97, 230, 238, 242, 269], "implemented_funct": [97, 237, 244], "effort": [97, 196, 198], "50u": 97, "1u": 97, "10n": 97, "sympy_pars": 98, "local_dict": 98, "lambda_not": 98, "repeated_decim": 98, "auto_numb": 98, "factorial_not": 98, "global_dict": 98, "standard_transform": 98, "implicit_multiplication_appl": 98, "implicit_appl": 98, "implicit_multipl": 98, "convert_equals_sign": 98, "function_exponenti": 98, "stringify_expr": 98, "eval_expr": 98, "name_dict": 98, "fullform": 98, "setdelai": 98, "datatyp": [98, 196, 205, 238], "split_symbol": 98, "split_symbols_custom": 98, "_token_splitt": 98, "can_split": 98, "unsplitt": 98, "10sin": 98, "3xyz": 98, "2111": 98, "latex2sympi": 98, "typograph": 98, "stricter": 98, "liber": [98, 110, 276], "618": 98, "latexparsingerror": 98, "sym_expr": 98, "sympyexpress": 98, "source_cod": 98, "return_expr": 98, "definiton": 98, "src2": 98, "convert_to_expr": 98, "convert_to_c": 98, "src3": 98, "convert_to_python": 98, "src_code": 98, "filenam": [98, 205, 236, 237, 238, 246], "convert_to_fortran": 98, "continuum_mechan": [99, 100, 102], "elastic_modulu": 99, "second_mo": 99, "base_char": 99, "withstand": [99, 100], "character": [99, 100, 186, 189, 212, 225, 231, 259], "profil": 99, "shear": [99, 100], "downward": [99, 100, 102, 200], "apply_load": [99, 100, 102], "bc_deflect": [99, 100], "boundary_condit": 99, "solve_for_reaction_load": [99, 100], "shear_forc": [99, 100], "bending_mo": [99, 100], "reaction": [99, 100, 102], "upward": [99, 200], "reaction_load": [99, 100, 102], "applied_load": 99, "nm": [99, 100, 168, 226], "pointload": [99, 100], "ramp": [99, 100], "parabol": 99, "apply_support": [99, 102], "loc": 99, "freedom": [99, 114, 115, 121, 124, 130, 225, 267], "roller": [99, 100, 102], "r_10": 99, "r_30": 99, "4000": [99, 100], "bc_slope": [99, 100], "cross_sect": 99, "elast": [99, 100], "12000": 99, "draw": [99, 150, 205, 225], "pictori": 99, "positv": 99, "ild_moment": 99, "ild_react": 99, "ild_shear": 99, "axial": [99, 139], "hing": [99, 100, 131], "cantilev": [99, 100], "inertia": [99, 100, 109, 110, 111, 113, 119, 120, 122, 123, 125, 127, 128, 129, 130, 137, 180, 188, 189, 200, 267], "666666666666667": [99, 100], "max_bmoment": 99, "max_deflect": 99, "max_shear_forc": 99, "plot_bending_mo": [99, 100], "gpa": 99, "400": [99, 191, 201], "13750": 99, "31250": 99, "plot_deflect": [99, 100], "00138541666666667": 99, "86458333333333e": 99, "04166666666667e": 99, "20833333333333e": 99, "51041666666667e": 99, "plot_ild_mo": 99, "solve_for_ild_mo": 99, "1kn": 99, "r_0": 99, "r_8": 99, "solve_for_ild_react": 99, "plot_ild_react": 99, "5kn": 99, "r_7": 99, "plotgrid": 99, "plot_ild_shear": 99, "solve_for_ild_shear": 99, "plot_loading_result": [99, 100], "subplot": [99, 191], "plot_shear_forc": [99, 100], "plot_shear_stress": 99, "stress": 99, "6875": 99, "2500": 99, "15625": [99, 177], "plot_slop": [99, 100], "59375e": 99, "125e": 99, "08333333333333e": 99, "0001953125": 99, "point_cflexur": 99, "overhang": [99, 100], "10kn": 99, "20kn": [99, 100], "3kn": 99, "remove_load": [99, 102, 111], "shear_stress": 99, "beam3d": 99, "shear_modulu": 99, "apply_moment_load": 99, "solve_slope_deflect": 99, "r663": 99, "home": [99, 200, 218, 225, 236], "aau": 99, "jc": 99, "femtesemest": 99, "beams3d": 99, "angular_deflect": 99, "depict": [99, 186, 224, 259], "angular": [99, 108, 111, 114, 117, 122, 123, 124, 125, 127, 129, 131, 134, 137, 139, 143, 144, 146, 149, 167, 171, 180, 184, 190], "axial_forc": 99, "axial_stress": 99, "load_vector": 99, "max_bending_mo": 99, "16000": 99, "495": 99, "10793": 99, "6400": 99, "301": [99, 215, 218], "560": 99, "2400": 99, "moment_load_vector": 99, "40000": 99, "4013": 99, "90300": 99, "1520": 99, "903": 99, "1600": [99, 100], "172": 99, "polar_mo": 99, "i1": [99, 107, 120, 137, 231], "1350": 99, "solve_for_tors": 99, "torsion": 99, "torqu": [99, 111, 115, 119, 125, 132, 133, 137], "torsional_mo": 99, "_________________": 100, "________________": [100, 221], "_______________v": 100, "_______________": 100, "equilibrium": [100, 102, 122, 134], "20e9": 100, "25e": 100, "______________________________________________": 100, "_______________________________________________": 100, "r\u2081": 100, "r\u2082": 100, "______________________": 100, "________________________": 100, "8kn": 100, "_____________": 100, "1m": 100, "3m": 100, "2m": 100, "5m": [100, 240], "679": 100, "12kn": 100, "________________________________": 100, "____________________________________________________": 100, "o____________________________________________________": 100, "4m": 100, "concentr": [100, 225], "_____________________________________": 100, "m\u2081": 100, "m\u2082": 100, "connector": 100, "_____________________": 100, "_______________________": 100, "_____________________o_______________________": 100, "oooo": [100, 243], "r\u2083": 100, "_______i_______": 100, "flexur": 100, "rigid": [100, 102, 111, 115, 117, 120, 122, 125, 130, 137, 180, 188, 267], "____________": 100, "____________o________________________": 100, "a\u2081": [100, 282], "a\u2082": [100, 282], "assembli": [102, 122], "joint": [102, 113, 123, 125, 130, 267], "add_nod": 102, "node_1": 102, "node_2": 102, "node_3": 102, "node_4": 102, "add_memb": 102, "member_1": 102, "member_2": 102, "member_3": 102, "member_4": 102, "member_5": 102, "270": 102, "360": 102, "change_member_label": 102, "new_label": 102, "change_node_label": 102, "bc_new": 102, "internal_forc": 102, "member_label": 102, "node_label": 102, "node_posit": 102, "remove_memb": 102, "remove_nod": 102, "remove_support": 102, "unstabl": 102, "revolv": 102, "tensil": 102, "r_node_1_x": 102, "r_node_1_i": 102, "r_node_2_i": 102, "lti": [103, 104], "transferfunct": [103, 104, 106], "interconnect": [103, 106, 114], "mimo": [103, 106], "transferfunctionmatrix": [103, 106], "mimoseri": [103, 106], "mimoparallel": [103, 106], "mimofeedback": [103, 106], "control_plot": 104, "pole_zero_plot": 104, "pole_color": 104, "blue": [104, 131, 191, 205], "pole_markers": 104, "zero_color": 104, "orang": 104, "zero_markers": 104, "show_ax": 104, "marker": [104, 191], "sisolineartimeinvari": [104, 106], "markers": 104, "tf1": [104, 106], "pole_zero_numerical_data": 104, "r664": 104, "93zero_plot": 104, "siso": [104, 106], "8660254j": 104, "bode_plot": 104, "initial_exp": 104, "final_exp": 104, "freq_unit": 104, "phase_unit": 104, "semilog": 104, "hz": 104, "hertz": 104, "bode_magnitude_plot": 104, "bode_phase_plot": 104, "bode_magnitude_numerical_data": 104, "5148378120533502e": 104, "68437": 104, "36188804005": 104, "020599914256786": 104, "0205999155219505": 104, "4117304087953": 104, "00000000260573": 104, "bode_phase_numerical_data": 104, "4472354033813751e": 104, "035581932165858e": 104, "47577": 104, "3248186011": 104, "67884": 104, "09326036123": 104, "5000000000291665e": 104, "6180885085e": 104, "08895483066e": 104, "1415085799262523": 104, "14155265358979": 104, "impulse_response_plot": 104, "lower_limit": [104, 272], "upper_limit": [104, 272], "step_response_plot": 104, "ramp_response_plot": 104, "r665": 104, "impulse_response_numerical_data": 104, "nb_of_point": [104, 191], "lineover1drangeseri": [104, 191], "amplitud": [104, 144], "06616480200395854": 104, "854500743565858": 104, "9999999799999999": 104, "7042848373025861": 104, "170748906965121e": 104, "1901263495547205e": 104, "r666": 104, "step_response_numerical_data": 104, "025413462339411542": 104, "0484508722725343": 104, "670250533855183": 104, "844291913708725": 104, "023844582399907256": 104, "042894276802320226": 104, "828770759094287e": 104, "456457160755703e": 104, "mx": [104, 150, 212], "r667": 104, "ramp_funct": 104, "ramp_response_numerical_data": 104, "12166980856813935": 104, "861246379582118": 104, "4504508011325967e": 104, "006046440489058766": 104, "12499999999568202": 104, "12499999999661349": 104, "den": [106, 196, 217, 221], "superscript": [106, 205], "impuls": 106, "tf2": 106, "tf3": 106, "tf4": 106, "tf5": 106, "tf6": 106, "500000000000000": 106, "tf7": 106, "tf8": 106, "tf9": 106, "tf10": 106, "tf11": 106, "tf12": 106, "r668": 106, "transfer_funct": 106, "r669": 106, "dc_gain": 106, "dc": [106, 133], "from_rational_express": 106, "zerodivisionerror": [106, 196, 234, 244], "tf": [106, 244], "is_biprop": 106, "is_prop": 106, "is_stabl": 106, "is_strictly_prop": 106, "sys1": 106, "sys2": 106, "feedforward": 106, "fed": 106, "sit": [106, 189], "plant": 106, "compulsori": 106, "tf_1": 106, "tf_2": 106, "tf_3": 106, "tf_4": 106, "tfm_1": 106, "num_input": 106, "num_output": 106, "tfm_2": 106, "tf_5": 106, "tf_6": 106, "tf_7": 106, "tf_8": 106, "tfm_3": 106, "tfm_4": 106, "tfm_5": 106, "tfm_6": 106, "tf_9": 106, "tf_10": 106, "tfm_7": 106, "tfm_8": 106, "tfm_9": 106, "tfm_10": 106, "tfm_11": 106, "tfm_12": 106, "elem_pol": 106, "elem_zero": 106, "from_matrix": [106, 194], "m_tf": 106, "tfm": 106, "tfm1": 106, "tfm2": 106, "g4": 106, "tfm3": 106, "mimolineartimeinvari": 106, "mat_a": 106, "mat_b": 106, "mat_c": 106, "tfm_a": 106, "tfm_b": 106, "tfm_c": 106, "expr_1": 106, "expr_2": 106, "expr_3": 106, "expr_4": 106, "plant_mat": 106, "controller_mat": 106, "neg_feedback": 106, "hep": 107, "gamma_matric": [107, 109], "gammamatrix": 107, "lorentzindex": 107, "gammamatrixhead": 107, "extract_type_ten": 107, "gamma_trac": 107, "i0": [107, 142, 231], "i2": [107, 120, 137, 231], "i4": [107, 231], "i5": 107, "kahane_simplifi": 107, "spinor": 107, "ta": [107, 214], "tb": [107, 214, 236], "tc": [107, 196, 201, 214], "joseph": [107, 199], "kahan": 107, "octob": 107, "1968": 107, "simplify_gpgp": 107, "e_nl": [108, 171], "hartre": 108, "helium": 108, "2209": 108, "e_nl_dirac": 108, "spin_up": 108, "035999037000": 108, "relativist": 108, "momentum": [108, 117, 120, 137, 148, 149, 167, 171, 190, 231], "light": [108, 142, 175, 185, 192], "035999037": 108, "1012": 108, "3627": 108, "500006656595360": 108, "125002080189006": 108, "125000416028342": 108, "0555562951740285": 108, "0555558020932949": 108, "0555556377366884": 108, "psi_nlm": 108, "wave": [108, 140, 141, 142, 208, 267], "psi_": [108, 146], "nlm": 108, "radial": [108, 124, 171], "nl": [108, 171], "magnet": [108, 141, 186, 259], "azimuth": 108, "wf": [108, 122], "abs_sqrd": 108, "silver": 108, "94": [108, 199], "141": 108, "4418": 108, "mdft": 109, "mgamma": 109, "gamma_5": 109, "gamma_0": 109, "gamma_3": 109, "r670": 109, "msigma": 109, "pauli": [109, 267], "sigma_i": [109, 225], "r671": 109, "pauli_matric": [109, 145], "pat_matrix": 109, "unansw": [110, 179], "kane": [110, 113, 114, 120, 126, 130, 131, 136, 137, 179, 180, 250, 267], "q1d": [110, 120, 122, 124, 127, 128, 129, 132, 133, 134, 135, 179, 185, 189], "q2d": [110, 120, 122, 124, 127, 128, 129, 132, 133, 184, 185], "q3d": [110, 127, 128, 129, 132], "kinemat": [110, 114, 115, 119, 120, 122, 123, 124, 125, 127, 129, 131, 132, 134, 135, 137, 138, 180, 183, 187, 189, 267], "dyad": [110, 137, 254], "mprint": [110, 127, 128, 129, 132], "mpprint": [110, 132], "mlatex": 110, "sub_dict": [110, 112, 122], "msub": [110, 112, 134], "cleaner": [110, 137, 221], "gsl": [110, 238], "lsoda": 110, "penalti": 110, "central_inertia": [111, 117, 123, 125], "possess": [111, 135, 231], "name_of_bodi": 111, "ixx": [111, 117, 180], "body_inertia": 111, "ang_vel_in": [111, 114, 120, 127, 128, 137, 180, 188], "set_ang_vel": [111, 117, 120, 122, 127, 128, 134, 135, 137, 138, 180, 182, 184, 188], "apply_forc": [111, 114, 125], "reaction_bodi": [111, 114, 125], "reaction_point": 111, "oppposit": 111, "desri": 111, "force1": 111, "b_masscent": 111, "b_frame": [111, 114], "newtonion": [111, 114], "spring_forc": 111, "n_frame": 111, "apply_torqu": [111, 125], "torquess": 111, "torque1": 111, "b1_frame": 111, "b2_frame": 111, "clear_load": 111, "kinetic_energi": [111, 117, 135, 137], "kinet": [111, 115, 117], "inerti": [111, 114, 115, 117, 122, 124, 127, 132, 133, 135, 137], "set_vel": [111, 115, 117, 120, 122, 124, 127, 128, 129, 132, 133, 134, 135, 137, 138, 184, 188], "b_ixx": 111, "b_mass": [111, 114], "masscenter_vel": [111, 114], "parallel_axi": [111, 117], "to_matrix": [111, 114, 179, 180, 189, 194, 200, 250, 253, 255], "a_ixx": 111, "a_mass": 111, "a_ixi": 111, "a_izx": 111, "a_iyi": 111, "a_iyz": 111, "a_izz": 111, "smart": [112, 134, 212, 218, 221], "sub1": [112, 205], "sub2": [112, 205], "find_dynamicsymbol": 112, "reference_fram": [112, 180], "symbolicsystem": [113, 130, 267], "interfram": [114, 184], "_generate_coordin": 114, "_generate_spe": 114, "_orient_fram": 114, "_set_angular_veloc": 114, "_set_linear_veloc": 114, "kde": [114, 123, 124, 131, 134], "revolut": 114, "\u03c9": 114, "pc": [114, 202], "p_masscent": 114, "c_masscent": 114, "p_frame": 114, "c_frame": 114, "q_pc": 114, "u_pc": 114, "pendulum": [114, 119, 121, 125, 130, 134, 138, 188, 267], "upper_bob": 114, "lower_bob": 114, "ceiling_joint": 114, "pendulum_joint": 114, "q_p1": 114, "q_p2": 114, "u_fram": 114, "l_frame": 114, "u_p1": 114, "u_p2": 114, "vel": [114, 120, 122, 124, 128, 131, 137, 184, 188, 257], "prismat": 114, "slide": 114, "wall": [114, 125], "part1": 114, "part2": 114, "j1": [114, 123, 125, 149, 167], "j2": [114, 123, 125, 149, 167], "q_j1": 114, "w_frame": 114, "q_j2": 114, "p1_frame": 114, "u_j1": 114, "cylindricaljoint": 114, "rotation_coordin": 114, "translation_coordin": 114, "rotation_spe": 114, "translation_spe": 114, "cylindr": [114, 191, 257], "q0_": 114, "q1_": 114, "u0_": 114, "u1_": 114, "q0_pc": 114, "q1_pc": 114, "u0_pc": 114, "u1_pc": 114, "tube": 114, "floor_joint": 114, "flag_joint": 114, "q0_c1": 114, "q0_c2": 114, "q1_c1": 114, "floor_fram": 114, "q1_c2": 114, "tube_fram": 114, "flag_fram": 114, "u0_c1": 114, "u0_c2": 114, "u1_c1": 114, "planarjoint": 114, "planar_coordin": 114, "planar_spe": 114, "q2_": 114, "u2_": 114, "nonparallel": 114, "q_1": [114, 123, 124, 125, 134, 150, 188, 201, 218], "q_2": [114, 123, 124, 125, 134, 188], "hat": [114, 131, 135, 179, 180, 185, 186, 188, 189, 254, 255, 257, 259, 260], "q_0": [114, 150, 218], "rotation_axi": 114, "planar_vector": 114, "q2_pc": 114, "u2_pc": 114, "parent_vector": 114, "plane_vector": 114, "g_frame": 114, "sphericaljoint": 114, "rot_typ": [114, 180, 184, 186], "rot_ord": [114, 180, 184, 252], "ball": 114, "socket": 114, "tait": [114, 180, 250, 252], "bryan": [114, 180, 250, 252], "joint_point": 114, "zxz": [114, 180, 189, 250, 252], "jointsmethod": [114, 123, 125], "damper": [114, 115, 120, 125], "form_eom": [114, 125, 131], "mass_matrix_ful": [114, 115, 120, 125, 132, 133], "forcing_ful": [114, 115, 120, 125, 132, 133], "mass_matrix": [114, 115, 119, 122, 127, 128, 132, 133, 138], "lagrangesmethod": [114, 115, 124, 129, 133, 134], "qd": [114, 115, 122, 132, 184], "inv_method": [114, 115], "solveabl": 114, "q_ind": [115, 116, 120, 122, 123, 124, 127, 128, 132, 134, 137], "u_ind": [115, 116, 120, 122, 123, 124, 127, 128, 132, 134, 137], "kd_eq": [115, 120, 122, 123, 124, 127, 128, 134, 137], "q_depend": [115, 122, 123, 124, 132, 137], "configuration_constraint": [115, 122, 123, 124, 132], "u_depend": [115, 122, 123, 124, 132, 137], "velocity_constraint": [115, 122, 123, 124, 132, 137], "acceleration_constraint": 115, "u_auxiliari": [115, 128, 132, 137], "forcelist": [115, 120, 123, 124, 127, 128, 133, 134, 137], "levinson": [115, 136, 180, 250], "udot": [115, 122], "ud": [115, 132], "kd": [115, 122, 127, 128, 132], "fl": [115, 122, 132, 133, 137, 199], "bl": [115, 122, 132, 137], "frstar": [115, 120, 122, 124, 127, 128, 132, 134, 137], "kanes_equ": [115, 120, 122, 124, 127, 128, 132, 134, 137], "a_and_b": [115, 116, 124], "auxiliary_eq": [115, 128], "constrain": [115, 124, 133, 137], "kindiffdict": [115, 122, 127, 128, 132, 137], "new_method": [115, 124], "intens": [115, 116, 139, 142], "perm_mat": [115, 116, 134], "op_point": [115, 116, 124, 134], "beforehand": [115, 238], "to_linear": [115, 134], "recalcul": [115, 201], "hol_coneq": [115, 124, 133], "nonhol_coneq": [115, 124, 133], "nonconserv": 115, "form_lagranges_equ": [115, 124, 129, 133, 134], "qdot": [115, 122, 123, 184], "qdoubledot": 115, "lam": [115, 116, 138], "lagranges_equ": 115, "qd_ind": [115, 134], "q_dep": [115, 132, 134], "qd_dep": [115, 134], "solve_multipli": [115, 124], "sol_typ": 115, "array_lik": 115, "f_3": [116, 119, 138, 221], "f_c": [116, 124], "f_v": [116, 124], "f_a": 116, "q_d": 116, "u_i": [116, 134, 188, 198], "u_d": [116, 137], "q_op": [116, 124], "u_op": [116, 124], "qd_op": 116, "ud_op": [116, 124], "spatial": [117, 144, 180, 205], "angular_momentum": [117, 135, 137], "init_vprint": [117, 118, 135, 138, 180, 182, 184, 185, 188, 189], "linear_momentum": [117, 135, 137], "inertia_tupl": 117, "mv": 117, "iyi": [117, 180], "izz": [117, 180], "ixi": [117, 180], "iyz": [117, 180], "izx": 117, "yy": [117, 189, 221], "yz": [117, 189, 191], "zx": [117, 189], "inertia_of_point_mass": 117, "pos_vec": 117, "px": [117, 160, 165, 231], "body1": 117, "body2": 117, "body3": 117, "h2": 117, "multibodi": [117, 120, 130, 136, 137, 138, 188], "vprint": [118, 179, 184, 185, 189], "vpprint": [118, 179, 185, 189], "vlatex": [118, 179, 180, 185, 189], "coord_stat": 119, "right_hand_sid": 119, "coordinate_deriv": [119, 138], "alg_con": [119, 138], "output_eqn": 119, "coord_idx": [119, 138], "speed_idx": [119, 138], "m_3": [119, 138, 149, 190], "exogen": [119, 138], "ref_fram": 119, "graviti": [119, 120, 124, 125, 127, 129, 137, 186, 259], "theta_dot": 119, "kin_explicit_rh": [119, 138], "dyn_implicit_mat": [119, 138], "dyn_implicit_rh": [119, 138], "symsystem": 119, "dae": [119, 138], "adjust": [119, 208, 212], "comb_implicit_mat": [119, 138], "comb_implicit_rh": [119, 138], "kinema": 119, "comb_explicit_rh": [119, 138], "compute_explicit_form": 119, "awhil": 119, "constant_symbol": 119, "dynamic_symbol": 119, "motiongenesi": [120, 137], "double_pendulum": 120, "motionvari": [120, 137], "newtonian": [120, 137], "simprot": [120, 137], "n_a": 120, "n_b": 120, "w_a_n": 120, "w_b_n": [120, 137], "p_o_p": 120, "p_p_r": 120, "v_o_n": [120, 137], "v2pt": [120, 137], "v_p_n": 120, "v_r_n": 120, "force_p": 120, "force_r": 120, "tfinal": 120, "integstp": 120, "some_filenam": 120, "parse_autolev": 120, "sympy_cod": 120, "include_numer": 120, "include_pydi": 120, "pydi": [120, 137, 180], "u1d": [120, 122, 124, 127, 128, 132], "u2d": [120, 122, 124, 127, 128, 132], "frame_n": 120, "frame_a": 120, "frame_b": 120, "point_o": 120, "particle_p": 120, "p_pt": 120, "particle_r": 120, "r_pt": 120, "set_po": [120, 184, 188], "v2pt_theori": [120, 122, 127, 128, 129, 134, 135, 137, 138, 184, 188], "initial_condit": [120, 137], "overwritten": 120, "e2row": 120, "eigvec": [120, 137], "eigenvec": 120, "deg2rad": 120, "0174533": 120, "wo": 120, "coef": [120, 137], "u3": [120, 122, 123, 125, 127, 128, 132, 137, 180, 184, 188], "strai": 120, "reassign": 120, "inher": [120, 244, 274], "rhs_x": 120, "i_b_bo": 120, "body_b": 120, "body_b_f": 120, "b_cm": 120, "b_f": 120, "scene": [120, 217, 274], "i_c_d": 120, "i_p_q": 120, "i_b_o": 120, "e3": [120, 212, 221], "i_p_o": 120, "e4": [120, 212], "p_so_o": 120, "nicheck": 120, "plug": [120, 175], "hurdl": 120, "gitlab": 120, "repo": 120, "ch4": 120, "ch5": 120, "ch6": 120, "cst": 120, "grammar": [120, 217], "roll": [121, 122, 130, 188, 225, 267], "disc": [121, 130, 188, 267], "bicycl": [121, 130, 136, 267], "nonminim": [121, 130, 134, 267], "linkag": [121, 130, 267], "meijaard2007": [122, 136], "steer": [122, 136], "purposefulli": 122, "mechanics_print": [122, 123, 127, 128, 129, 131, 132, 133], "yaw": 122, "ang": 122, "rear": 122, "wheel": 122, "pitch": 122, "q4": [122, 132, 182], "q5": [122, 182], "q4d": [122, 132], "q5d": 122, "u4": [122, 128, 132, 137], "u5": [122, 128], "u6": [122, 128], "u3d": [122, 127, 128], "u4d": 122, "u5d": 122, "u6d": 122, "explanatori": 122, "wfrad": 122, "wrrad": 122, "htangl": 122, "forkoffset": 122, "forklength": 122, "framelength": 122, "forkcg1": 122, "forkcg3": 122, "framecg1": 122, "framecg3": 122, "iwr11": 122, "iwr22": 122, "iwf11": 122, "iwf22": 122, "iframe11": 122, "iframe22": 122, "iframe33": 122, "iframe31": 122, "ifork11": 122, "ifork22": 122, "ifork33": 122, "ifork31": 122, "mframe": 122, "mfork": 122, "mwf": 122, "mwr": 122, "wr": 122, "tempfram": 122, "tempfork": 122, "orientnew": [122, 124, 127, 128, 129, 134, 138, 180, 182, 184, 186, 188, 189], "wr_cont": 122, "wr_mc": 122, "frame_mc": 122, "fork_mc": 122, "wf_mc": 122, "wf_cont": 122, "flip": [122, 155, 164, 225], "frame_i": 122, "fork_i": 122, "wr_i": 122, "wf_i": 122, "bodyfram": 122, "bodyfork": 122, "bodywr": 122, "bodywf": 122, "nonholonom": 122, "slip": [122, 126, 128, 188], "replic": 122, "conlist_spe": 122, "conlist_coord": 122, "gravit": [122, 127, 173, 186, 259], "aforement": [122, 186, 218, 257], "paperradrear": 122, "paperradfront": 122, "hta": 122, "trailpap": 122, "rake": 122, "paperwb": 122, "02": 122, "paperframecgx": 122, "paperframecgz": 122, "paperforkcgx": 122, "paperforkcgz": 122, "framecgnorm": 122, "framecgpar": 122, "tempa": 122, "tempb": 122, "tempc": 122, "paperforkl": 122, "forkcgnorm": 122, "forkcgpar": 122, "upright": 122, "val_dict": 122, "0603": 122, "1405": 122, "05892": 122, "00708": 122, "00756": 122, "kdd": [122, 127, 128], "centripet": 122, "corioli": 122, "forcing_lin": 122, "mm_full": 122, "_k_kqdot": 122, "xdot": 122, "lean": [122, 127, 129], "amat": 122, "summari": [123, 217, 236, 261], "q_3": [123, 125, 188], "u_1": [123, 124, 125, 188, 200, 221], "u_2": [123, 124, 125, 188, 200, 221], "u_3": [123, 125, 188], "densiti": [123, 225, 236, 260], "link1": 123, "link2": 123, "link3": 123, "link4": 123, "joint1": 123, "joint2": 123, "joint3": 123, "j3": [123, 125, 149, 167], "fh": 123, "fhd": 123, "_method": 123, "_form_eom": 123, "eom": [124, 125, 134], "theta1": 124, "dq_dict": 124, "presimplifi": 124, "inp_vec": [124, 134], "lag": [124, 129, 134], "lm": [124, 133, 134, 198, 201], "lag_eq": [124, 134], "lam_op": 124, "mb": [125, 137], "ibzz": 125, "compound_pend": 125, "simple_pend": 125, "slider": 125, "rev1": 125, "rev2": 125, "w_r_n_qd": [127, 128], "dmc": [127, 128, 129], "uv": [127, 128, 170], "bodyd": [127, 128, 129], "bodylist": [127, 128], "revisit": [128, 188], "kane1985": [128, 132, 135, 136], "thorough": [128, 134, 218], "simplifc": 128, "f3": [128, 191, 205], "necessit": 128, "simplify_auxiliary_eq": 128, "lrh": 129, "planet": 130, "robot": 130, "fascin": 130, "trajectori": 130, "challeng": 130, "came": [130, 277], "tackl": [130, 238], "organ": 130, "amen": 130, "arduou": 130, "child_izz": 131, "child_mass": 131, "f_h": 132, "nh": 132, "ku": [132, 205], "k_d": 132, "f_d": [132, 133, 198], "dnh": 132, "f_r": [132, 134, 198], "speed_con": 132, "coord_con": 132, "u_dep": 132, "m_d": 133, "lam1": 133, "0_": 134, "blajer1994": [134, 136], "brought": [134, 225], "vel_p": 134, "a_op": 134, "b_op": 134, "m_op": 134, "a_lin": 134, "hasn": 134, "wikidyad": [135, 187], "wikidyadicproduct": [135, 187], "juxtaposit": [135, 179, 254], "otim": [135, 226], "l_p": 135, "likins1973": [135, 187], "l_b": 135, "requisit": 135, "t_p": 135, "t_b": 135, "t_t": 135, "virtu": [135, 137], "blajer": 136, "wojciech": 136, "werner": 136, "schiehlen": 136, "walter": 136, "schirm": 136, "kane1983": [136, 189], "likin": [136, 187], "david": [136, 201], "spacecraft": 136, "1983": [136, 240], "meijaard": 136, "jim": 136, "papadopoulo": 136, "ruina": 136, "schwab": 136, "royal": 136, "societi": [136, 218], "2084": 136, "1955": 136, "982": 136, "lectur": [137, 199, 225], "rigibodi": 137, "proprietari": 137, "k3": [137, 195], "k4": 137, "b11": 137, "b12": 137, "b21": 137, "b22": 137, "xd": 137, "xd2": 137, "y1d": 137, "y2d": 137, "tina": 137, "overwrit": [137, 179], "dt2": 137, "dy2": 137, "ty": 137, "linsolv": [137, 203, 223, 224, 283], "nonlinsolv": [137, 223, 224, 283], "rowmatrix": 137, "colmatrix": 137, "diagmat": 137, "eigval": 137, "row_matrix": 137, "col_matrix": 137, "ao": 137, "i12": 137, "i23": 137, "i31": 137, "bf": 137, "p_o_q": 137, "mag": 137, "unitvec": 137, "qo": 137, "p_p_q": 137, "partial_veloc": [137, 180, 184], "a_o_n": 137, "set_acc": [137, 184, 188], "qb": [137, 193], "qbd": 137, "alf_b_n": 137, "set_ang_acc": [137, 180], "ang_acc_in": [137, 180], "force_o": 137, "torque_a": 137, "qa": 137, "qad": 137, "a_b": 137, "v1pt": 137, "v1pt_theori": [137, 184, 188], "a1pt": 137, "a1pt_theori": [137, 184], "a2pt": 137, "a2pt_theori": [137, 184, 188], "angvel": 137, "force_vector": 137, "center_of_mass": 137, "kindiff": 137, "ke": 137, "configura": 137, "tion_constraint": 137, "pendent": 137, "velocity_con": 137, "traint": 137, "acceleration_": 137, "u_auxilia": 137, "ry": 137, "matlplotlib": 137, "stiff": 137, "damp": 137, "legend": [137, 191, 208], "introspect": 137, "rich": [137, 217], "media": [137, 143], "histori": 137, "esqu": 137, "cpython": 137, "pertin": [138, 192, 200], "alg_con_ful": 138, "symsystem1": 138, "symsystem2": 138, "symsystem3": 138, "raytransfermatrix": 139, "geometricrai": 139, "beamparamet": 139, "geometric_conj": 139, "gauss_conj": 139, "conjugate_gauss_beam": 139, "lens": 139, "gaussopt": 139, "wavelen": 139, "z_r": 139, "wavelength": [139, 144], "waist": 139, "rayleigh": [139, 225], "refract": [139, 141, 143, 144], "530e": 139, "88679245283019": 139, "92753330865999": 139, "w_0": [139, 218], "00100000000000000": 139, "freespac": 139, "00101413072159615": 139, "00210803120913829": 139, "r672": 139, "complex_beam_paramet": 139, "r673": 139, "gaussian_beam": 139, "spread": [139, 205, 225, 240], "00053": 139, "goui": 139, "55998576005696": 139, "2809": 139, "peak": 139, "waist_approximation_limit": 139, "paraxi": [139, 143], "06e": 139, "curvedmirror": 139, "curvedrefract": 139, "flatmirror": 139, "flatrefract": 139, "2x1": 139, "thinlen": 139, "r674": 139, "ray_transfer_matrix_analysi": 139, "waist_in": 139, "waist_out": 139, "s_in": 139, "s_out": 139, "w_o": 139, "gaussian_conj": 139, "z_r_in": 139, "incid": [139, 143], "z_r_out": 139, "emerg": [139, 193], "geometric_conj_ab": 139, "geometric_conj_af": 139, "geometric_conj_bf": 139, "rayleigh2waist": 139, "waist2rayleigh": 139, "optic": [141, 142, 143, 144, 267], "permitt": 141, "permeabl": 141, "fermat": 141, "electr": [141, 143, 186, 257, 259], "electromagnet": [141, 186, 231, 259], "intrinsic_imped": 141, "149896229": [141, 144], "kilogram": [141, 173, 175, 177], "1250000": 141, "amper": 141, "refractive_index": 141, "299792458": [141, 144, 177], "r675": 141, "optical_medium": 141, "travel": [141, 144, 186, 257, 259], "stoke": 142, "mueller": 142, "jones_vector": 142, "stokes_vector": 142, "half_wave_retard": 142, "polarizing_beam_splitt": 142, "jones_2_stok": 142, "\u2148": [142, 190, 204, 205, 224, 283], "\u03c7": 142, "\u03c8": 142, "i\u2080": 142, "plate": 142, "hwp": 142, "splitter": 142, "transmit": [142, 143], "pb": 142, "transmitted_port": 142, "reflected_port": 142, "transmitted_pow": 142, "reflected_pow": 142, "r676": 142, "jones_calculu": 142, "r677": 142, "mueller_calculu": 142, "r678": 142, "stokes_paramet": 142, "retard": 142, "poincar\u00e9": 142, "tilt": 142, "mayor": 142, "linear_polar": 142, "transmiss": [142, 143], "mueller_matrix": 142, "quarter_wave_retard": 142, "quarter": 142, "phase_retard": 142, "\u03b4": 142, "phia": 142, "phib": 142, "4x1": [142, 225], "phi_a": 142, "phi_b": 142, "qwp": 142, "reflective_filt": 142, "unpolar": 142, "transmissive_filt": 142, "attenu": 142, "transmitt": 142, "ndf": 142, "refraction_angl": 143, "fresnel_coeffici": 143, "brewster_angl": 143, "critical_angl": 143, "lens_makers_formula": 143, "mirror_formula": 143, "lens_formula": 143, "hyperfocal_dist": 143, "transverse_magnif": 143, "medium1": 143, "medium2": 143, "brewster": 143, "926093295503462": 143, "onset": 143, "850908514477849": 143, "02005": 143, "angle_of_incid": 143, "fresnel": [143, 205, 215], "polaris": 143, "te": 143, "undergo": 143, "317843553417859": 143, "348645229818821": 143, "658921776708929": 143, "651354770181179": 143, "235625382192159": 143, "971843958291041": 143, "816477005968898": 143, "577377951366403": 143, "r679": 143, "fresnel_equ": 143, "coc": 143, "0033": 143, "focal_length": 143, "n_len": 143, "n_surr": 143, "thick": 143, "1515151515151": 143, "0000000000000": 143, "3418463277618": 143, "41152": 143, "magnif": 143, "twave": 144, "time_period": 144, "wavenumb": 144, "phi1": 144, "phi2": 144, "w1": [144, 217], "w3": [144, 205], "superposit": [144, 155, 166, 192], "angular_veloc": 144, "tempor": 144, "r680": 145, "paulialgebra": 145, "evaluate_pauli_product": 145, "paulimatric": 145, "sigma3": 145, "nodal": [146, 171, 192], "hw": [146, 171], "coherent_st": 146, "coher": [146, 172, 178], "1d": [146, 148, 161, 180, 230], "wavefunct": [146, 159, 168, 171, 267], "r681": 147, "__cmp__": [147, 151, 170], "dagger": [147, 151, 157, 159, 162, 164, 169, 170, 267], "todo": [148, 150, 154, 155, 159, 160, 162, 163, 164, 165, 166, 198, 205, 212, 230], "operatorset": [148, 160], "positionbra3d": 148, "eigenbra": [148, 161, 167], "positionket3d": 148, "eigenket": [148, 161, 167], "positionstate3d": 148, "eigenst": [148, 160, 165, 167, 168], "position_x": 148, "position_i": 148, "position_z": 148, "pxbra": [148, 160], "pxket": [148, 160, 165], "pxop": [148, 160, 165], "xbra": [148, 160, 165], "xket": [148, 160, 165], "xop": [148, 160, 165], "yop": 148, "zop": 148, "momenta": 149, "uncoupl": [149, 167], "r682": 149, "j_3": [149, 167, 190], "r683": 149, "wigner3j": [149, 190], "wigner": [149, 167, 225, 267], "varshalovich": [149, 167], "zyla": 149, "theor": 149, "phy": [149, 175, 190], "083c01": 149, "r684": 149, "w3j": 149, "715": [149, 190, 205], "wigner6j": [149, 190], "j12": [149, 167], "j23": 149, "6j": [149, 190], "wigner9j": [149, 190], "j4": 149, "j34": 149, "j13": 149, "j24": 149, "9j": [149, 190], "cg_simp": 149, "r685": 149, "clebsh": 149, "rethink": 150, "figsiz": 150, "circuitplot": 150, "nqubit": [150, 154, 155, 164], "control_lin": 150, "gate_idx": [150, 154], "min_wir": 150, "max_wir": 150, "control_point": 150, "wire_idx": 150, "not_point": 150, "one_qubit_box": 150, "box": [150, 155, 157, 166, 168, 260, 267], "qubit": [150, 154, 155, 156, 157, 163, 267], "swap_point": 150, "two_qubit_box": 150, "createcg": 150, "latexnam": 150, "mock": 150, "mz": 150, "circuit_plot": 150, "min_qubit": [150, 154], "autogener": 150, "wire": 150, "j_0": 150, "r686": 151, "comm": [151, 170, 231], "plank": 152, "r687": 152, "05457162000000e": 152, "planck_const": 152, "hermetian": 153, "r688": 153, "r689": 153, "ket": [153, 158, 159, 160, 162, 164, 165, 168, 170], "bra": [153, 158, 159, 160, 162, 164, 165, 168, 170], "innerproduct": [153, 158, 159, 165, 167, 170], "outerproduct": [153, 159], "seamlessli": 153, "hermitian_adjoint": 153, "hermitian_transpos": 153, "_apply_operators_qubit": 154, "gate_sort": 154, "gate_simp": 154, "ugat": 154, "cgate": 154, "control_valu": 154, "cnot": 154, "eval_control": 154, "plot_gat": 154, "circ_plot": 154, "simplify_cg": 154, "cphase": 154, "cnotgat": 154, "qappli": [154, 155, 157, 159, 164, 267], "get_target_matrix": 154, "represen": 154, "hadamardg": 154, "identityg": 154, "onequbitg": 154, "phaseg": 154, "swapgat": 154, "target1": 154, "target2": 154, "tgate": 154, "twoqubitg": 154, "xgate": 154, "ygate": 154, "zgate": 154, "bubbl": 154, "random_circuit": 154, "ngate": 154, "gate_spac": 154, "mermin": 155, "_represent_zg": 155, "oracleg": 155, "oracl": 155, "intqubit": [155, 164], "search_funct": 155, "wgate": 155, "apply_grov": 155, "grover_iter": 155, "qstate": 155, "wv": 155, "superposition_basi": 155, "numqubit": 155, "basis_st": 155, "matt": 156, "complexspac": 156, "directsumhilbertspac": 156, "r690": 156, "hilbertspac": 156, "fockspac": 156, "hilbert_spac": [156, 159, 168], "direct_sum": 156, "quantiz": [156, 267], "r691": 156, "mess": [156, 221, 224, 282], "fock_spac": 156, "r692": 156, "tensorpowerhilbertspac": 156, "r693": 156, "tensor_product": 156, "tensorproducthilbertspac": 156, "r694": 156, "clebsch": [157, 167, 190, 267], "gordan": [157, 167, 190, 267], "hilbert": [157, 159, 165, 267], "grover": [157, 267], "qft": [157, 166, 267], "shor": [157, 267], "brabas": [158, 159, 165, 168], "ketbas": [158, 159, 165, 168], "r695": 158, "inner_product": 158, "apply_oper": [159, 170], "identityoper": 159, "r696": 159, "r697": 159, "polymoni": 159, "operator_": 159, "28physic": 159, "old_assumpt": 159, "r698": 159, "outer_product": 159, "unitaryoper": 159, "operators_to_st": 160, "state_to_oper": 160, "_operators_to_st": 160, "state_map": 160, "_state_to_oper": 160, "statebas": [160, 165, 168], "piab": 161, "piabbra": 161, "piabhamiltonian": 161, "piabket": 161, "ip_doit": 162, "smarter": [163, 214], "rk": 163, "iqft": 163, "rkgate": 163, "qtf": 163, "povm": 164, "as_int": [164, 246], "qubit_valu": 164, "intqubitbra": 164, "00001": 164, "qubitbra": 164, "matrix_to_dens": 164, "matrix_to_qubit": 164, "measure_al": 164, "ensembl": 164, "measure_all_oneshot": 164, "oneshot": 164, "measure_parti": 164, "measure_partial_oneshot": 164, "qubit_to_matrix": 164, "enumerate_st": 165, "_enumerate_st": 165, "foo_1": 165, "foo_2": 165, "foo_3": 165, "test2": 165, "bar_4": 165, "bar_5": 165, "bar_10": 165, "get_basi": 165, "replace_non": 165, "operator_to_st": 165, "qexpr": 165, "integrate_result": 165, "orig_expr": 165, "x_ket": 165, "x_op": 165, "rep_expect": 165, "px_2": 165, "px_1": 165, "rep_innerproduct": 165, "_repres": 165, "_represent_foobasi": 165, "foobasi": 165, "_represent_szop": 165, "szupket": 165, "szop": 165, "sz": 165, "cmod": 166, "reformat": 166, "period_find": 166, "momemtum": 167, "j2op": 167, "jxbra": 167, "jx": 167, "jzket": 167, "jxbracoupl": 167, "jcoupl": 167, "jzketcoupl": 167, "jxket": 167, "jxketcoupl": 167, "jybra": 167, "jy": 167, "jybracoupl": 167, "jyket": 167, "jyketcoupl": 167, "jzbra": 167, "jz": 167, "jzbracoupl": 167, "j_4": [167, 190], "argular": 167, "jzop": 167, "passiv": 167, "r699": 167, "wignerd": 167, "mp": [167, 223, 239], "jm": 167, "jj": 167, "r700": 167, "jcoupling_list": 167, "coupledspinst": 167, "spinstat": 167, "r701": 168, "dual_class": 168, "mn": [168, 205, 225], "ket_not": 168, "r702": 168, "k0": [168, 196, 198, 225], "orthogonalbra": 168, "orthogonalket": 168, "orthogonalst": 168, "_eval_adjoint": 168, "timedepbra": 168, "timedepst": 168, "timedepket": 168, "prob": [168, 225], "412214747707527": 168, "matrix_tensor_product": 169, "axb": 169, "xdagger": 169, "axc": 169, "bxc": 169, "tensor_product_simp": 169, "cxd": 169, "boson": 170, "fetter": 170, "welecka": 170, "secondqu": 170, "annihilateboson": 170, "fockstateket": 170, "bket": 170, "fockstatebosonket": 170, "annihilatefermion": 170, "createboson": 170, "is_only_q_annihil": 170, "destroi": [170, 214], "quasi": 170, "hole": 170, "is_only_q_cr": 170, "is_q_annihil": 170, "is_q_creat": 170, "antisymmetrictensor": 170, "bbra": 170, "fockstatebosonbra": 170, "bd": 170, "bosonicbasi": 170, "fock": 170, "NO": 170, "createfermion": 170, "wick": 170, "fbra": 170, "fockstatefermionbra": 170, "fket": 170, "fockstatefermionket": 170, "fixedbosonicbasi": 170, "n_particl": 170, "n_level": 170, "fockstat": 170, "occup": 170, "bosonbra": 170, "fockstatebra": 170, "fermi_level": 170, "r703": 170, "textwrap": [170, 246], "_q": 170, "get_subno": 170, "fermionicoper": 170, "has_q_annihil": 170, "q_annihil": 170, "has_q_creat": 170, "leftmost": 170, "q_creator": 170, "iter_q_annihil": 170, "iter_q_cr": 170, "0x": 170, "permutationoper": 170, "get_permut": 170, "varbosonicbasi": 170, "n_max": 170, "creator": 170, "evaluate_delta": 170, "einstein": [170, 231], "d_ij": 170, "_j": [170, 175, 190, 207], "d_ip": 170, "d_qp": 170, "matrix_rep": 170, "simplify_index_permut": 170, "permutation_oper": 170, "schemat": [170, 175], "abij": 170, "abji": 170, "baij": 170, "baji": 170, "permutlist": 170, "substitute_dummi": 170, "new_indic": 170, "pretty_indic": 170, "_get_ordered_dummi": 170, "_c": 170, "_d": 170, "index_group": 170, "string_of_lett": 170, "my_dummi": 170, "_v": [170, 189], "_p_0": 170, "_p_1": 170, "keep_only_fully_contract": 170, "sho": 171, "isotrop": 171, "mk": [172, 175], "legal": 172, "temperatur": [172, 186, 259], "dimensions": 172, "dimsys_si": [172, 173], "get_dimensional_depend": [172, 173], "has_integer_pow": 172, "dim_si": 172, "base_dim": 172, "derived_dim": 172, "dimensional_depend": 172, "can_transf_matrix": 172, "useless": [172, 196, 198], "inv_can_transf_matrix": 172, "dim_can_vector": 172, "dim_vector": 172, "is_consist": [172, 178], "is_dimensionless": 172, "list_can_dim": 172, "print_dim_bas": 172, "gravitational_const": [173, 177], "equivalent_dim": 173, "grav_eq": 173, "kepler": [173, 250], "venu": 173, "701": 173, "dai": [173, 177, 221], "venus_a": 173, "108208000e3": 173, "solar": 173, "solar_mass": 173, "9891e30": 173, "convert_to": [173, 177, 194, 200], "5112118495813": 173, "659097795948": 173, "astrophys": 173, "ill": 173, "astrophysicist": 174, "ua": [174, 193], "earth": [174, 186, 259], "sun": 174, "theoricist": 174, "philosophi": [174, 221, 224, 267], "rough": 175, "mole": 175, "dimensionless": 175, "unavoid": 175, "d_3": 175, "d_2": [175, 201, 225], "underbrac": [175, 188], "countabl": [175, 224], "pmatrix": 175, "kg": [175, 260], "glu": 175, "men": 175, "heat": 175, "joul": 175, "calori": 175, "stori": 175, "chemistri": 175, "page52": 175, "1952": 175, "page78": 175, "deboer79": 175, "boer": 175, "818": 175, "levyleblond77": 175, "l\u00e9vy": 175, "leblond": 175, "conceptu": [175, 192, 259], "rivista": 175, "del": [175, 240, 250, 258, 282], "nuovo": [175, 190], "cimento": [175, 190], "1977": 175, "187": [175, 199], "214": 175, "anticip": 175, "bin_prefix": 176, "abbrev": [176, 177, 205], "latex_repr": [176, 177], "encapsul": [176, 198, 224, 238], "kilo": 176, "scale_factor": 177, "pretty_unicode_repr": 177, "pretty_ascii_repr": 177, "mathml_presentation_repr": 177, "is_prefix": 177, "abbrevi": [177, 193, 205, 224, 226], "speed_of_light": 177, "reference_quant": 177, "target_unit": 177, "mile": 177, "atomic_mass_const": 177, "centimet": 177, "25146": 177, "609344": 177, "86400": 177, "660539060e": 177, "300000": 177, "planck": 177, "62963087839509e": 177, "base_unit": 178, "descr": 178, "dimension_system": 178, "derived_unit": 178, "overridden": [178, 192, 207, 282], "get_units_non_prefix": 178, "rigidli": 179, "entireti": 179, "_str": 179, "coordinatesym": [180, 182], "otherfram": [180, 250], "n_alpha_b": 180, "ny": 180, "_3": [180, 190], "orient_body_fix": 180, "orient_space_fix": 180, "orient_quaternion": 180, "quaternion": [180, 184, 189, 250, 252], "userwarn": [180, 234, 241, 278], "rotation_ord": [180, 250, 252], "xzx": 180, "xyx": [180, 250, 252], "yzy": 180, "zyz": 180, "yxy": [180, 189], "yzx": [180, 189], "zxy": 180, "xzy": 180, "zyx": 180, "yxz": 180, "orient_explicit": 180, "lambda_x": [180, 250, 252], "lambda_i": [180, 250, 252], "lambda_z": [180, 250, 252], "q0": [180, 221, 250, 252], "newnam": 180, "gen_spe": [180, 184], "variable_map": 180, "a_x": [180, 189, 205], "b_x": [180, 182, 189, 231], "b_y": [180, 182, 189, 231], "a_z": [180, 189], "b_z": [180, 189, 231], "inlist": 180, "var_in_dcm": 180, "reexpress": [180, 255], "time_deriv": [180, 182, 186], "free_dynamicsymbol": 180, "codirect": 180, "dyadic_tensor": [180, 250], "frame1": 180, "frame2": [180, 182], "second_reference_fram": 180, "ixz": 180, "inertia_dyad": 180, "pertain": [181, 187], "fieldfunct": [181, 186], "curl": [181, 250, 253, 260], "vect": [181, 250, 253], "r_x": [181, 186], "r_y": [181, 186], "r_z": [181, 186], "gradient": [181, 190, 191, 250, 253, 259], "scalar_potenti": [181, 186, 253, 257], "scalar_field": [181, 186, 250, 253, 257], "grad_field": [181, 253], "scalar_potential_differ": [181, 186, 253, 257], "sympyfi": [181, 182, 184, 253], "position2": [181, 253], "vectfield": [181, 186, 253, 257], "is_conserv": [181, 186, 253, 257], "is_solenoid": [181, 186, 253, 257], "solenoid": [181, 253], "q6": 182, "vec1": 182, "vec2": 182, "n_x": 182, "rotating_reference_fram": 182, "time_derivatives_in_the_two_fram": 182, "otherpoint": 184, "outfram": 184, "fixedfram": 184, "get_motion_param": 184, "vectori": [184, 186, 254, 259], "timevalue1": 184, "timevalue2": 184, "313": 184, "vel_vec": 184, "q1dd": 185, "q2dd": 185, "charg": [186, 259], "displac": [186, 188, 259], "temper": 186, "electric_potenti": [186, 257], "r1_x": 186, "r1_y": 186, "infinitesim": [186, 221, 257], "nabla": [186, 250, 256, 257], "f_y": [186, 257], "f_x": [186, 224, 257], "sink": [186, 257], "irrot": [186, 257], "conservative_field": [186, 257], "aug": [187, 224], "dyadic_product": [187, 258], "inc": [187, 199], "w_x": 188, "w_y": 188, "w_z": 188, "w_1": [188, 200], "w_2": [188, 200], "w_3": 188, "textrm": [188, 189, 213], "u_x": 188, "sp": 188, "oq": 188, "qp": 188, "rod": 188, "went": 188, "parallelogram": 189, "c_x": 189, "c_y": 189, "c_z": 189, "train": 189, "friend": 189, "xz": [189, 191], "zy": 189, "undergon": [189, 224], "vastli": 189, "wait": 189, "mold": 189, "bp": [189, 221], "bpp": 189, "zzx": 189, "multifram": 189, "direction": 189, "racah": 190, "gaunt": 190, "rasch03": 190, "regge58": 190, "regg": 190, "544": 190, "regge59": 190, "116": [190, 199], "1959": 190, "edmonds74": 190, "edmond": 190, "princeton": [190, 225], "1957": 190, "rasch": 190, "siam": [190, 243], "sci": 190, "1416": 190, "1428": 190, "liberatodebrito82": 190, "liberato": 190, "brito": 190, "homeier96": 190, "homeier": 190, "steinborn": 190, "mol": 190, "368": 190, "1996": [190, 199, 215, 223, 250], "forum": [190, 224], "m4nzdu": 190, "7o38": 190, "jen": 190, "03": [190, 225], "oscar": 190, "gerardo": 190, "lazo": 190, "arjona": 190, "phil": 190, "adam": [190, 201], "lemaitr": 190, "2022": 190, "jyr2000": 190, "gmail": 190, "clebsch_gordan": 190, "2j_3": 190, "dot_rot_grad_ynm": 190, "_l": 190, "l_2": 190, "l_3": 190, "drastic": 190, "2l_1": 190, "2l_2": 190, "2l_3": 190, "1200": 190, "00689500421922113448": 190, "inflect": 190, "unsuit": 190, "dd": [190, 210], "ee": [190, 200], "j_5": 190, "j_6": 190, "richer": 190, "real_gaunt": 190, "realgaunt": 190, "m0": [190, 231], "00002480019791932209313156167": 190, "wigner_3j": 190, "wigner_6j": 190, "wigner_9j": 190, "j_7": 190, "j_8": 190, "j_9": 190, "05555555": 190, "1666666": 190, "wigner_d": 190, "j_z": 190, "j_y": 190, "\u03b3": [190, 272, 282], "wigner_d_smal": 190, "textbackend": 191, "plot_parametr": 191, "plot_implicit": 191, "plot3d_parametric_lin": 191, "plot3d_parametric_surfac": 191, "xlabel": 191, "ylabel": 191, "zlabel": 191, "aspect_ratio": 191, "ylim": 191, "axis_cent": 191, "xscale": 191, "yscale": 191, "autoscal": 191, "textplot": 191, "_seri": [191, 202], "baseseri": 191, "nonparametr": 191, "basebackend": 191, "parametric2dlineseri": 191, "parametric3dlineseri": 191, "red": 191, "cyan": 191, "grayscal": 191, "integers_onli": 191, "surfaceover2drangeseri": 191, "parametricsurfaceseri": 191, "surface_color": 191, "range1": 191, "range2": 191, "fill_between": 191, "inch": 191, "expr_x": 191, "expr_i": 191, "canva": 191, "range_x": 191, "range_i": 191, "nb_of_points_x": 191, "nb_of_points_i": 191, "expr_z": 191, "range_u": 191, "range_v": 191, "nb_of_points_u": 191, "nb_of_points_v": 191, "x_var": 191, "y_var": 191, "mesh": 191, "p8": 191, "p9": 191, "nrow": [191, 194], "ncolumn": 191, "stuff": [191, 236, 238, 246], "is_2dlin": 191, "oblig": 191, "only_integ": 191, "get_seg": 191, "get_color_arrai": 191, "var_start_end": 191, "r704": 191, "luiz": 191, "henriqu": 191, "figueiredo": 191, "r705": 191, "line3dbaseseri": 191, "surfacebaseseri": 191, "var_start_end_x": 191, "var_start_end_i": 191, "var_start_end_u": 191, "var_start_end_v": 191, "implicitseri": 191, "has_equ": 191, "use_interval_math": 191, "centric": 191, "get_mesh": 191, "process_seri": 191, "_process_seri": 191, "keyboard": 191, "mous": 191, "pyglet_plot": 191, "screenshot": 191, "camera": 191, "zoom": 191, "numpad": 191, "ordin": [191, 221, 246], "f5": 191, "f6": 191, "f8": 191, "drag": 191, "button": [191, 237], "curvilinear": [191, 254, 255], "__setitem__": 191, "zfade4": 191, "key1": 191, "value1": 191, "key2": 191, "value2": 191, "unbound_theta": 191, "wirefram": 191, "saddl": 191, "fz": 191, "_______________________________________________________": 191, "mediterranean": 192, "cultur": 192, "arab": 192, "lighten": 192, "tapestri": 192, "woven": 192, "european": 192, "soil": 192, "plausibl": 192, "teeter": 192, "totter": 192, "outweigh": 192, "excit": 192, "amus": 192, "kempf": 192, "1944": 192, "20th": 192, "dedekind": 192, "intim": 192, "disciplin": 192, "toolset": 192, "atiyah69": [192, 199], "gear": 192, "greuel2008": [192, 199], "interspers": 192, "lr": 192, "ilex": 192, "\u211a": [192, 205], "localis": 192, "abridg": 192, "free_modul": [192, 196], "quotient_r": [192, 196], "overload": [192, 195, 196, 254, 277], "polynomialr": [192, 196, 203], "domain_or_r": [192, 196], "quotientr": [192, 196], "base_id": [192, 196], "elbow": 192, "room": 192, "componentwis": [192, 205], "inclin": 192, "biproduct": 192, "quotient_modul": 192, "is_submodul": 192, "multiply_id": 192, "identity_hom": 192, "freemodul": 192, "freemoduleel": 192, "conicis": 192, "_contain": 192, "_syzygi": 192, "_in_terms_of_gener": 192, "_intersect": 192, "_module_quoti": 192, "reduce_el": [192, 200], "represantit": 192, "in_terms_of_gener": 192, "inclusion_hom": 192, "rela": 192, "relb": 192, "is_full_modul": 192, "module_quoti": 192, "opt": [192, 198, 217, 278], "coincis": 192, "syzygy_modul": 192, "r_n": 192, "_contains_elem": 192, "_contains_id": 192, "_quotient": 192, "_union": 192, "_product": 192, "is_whole_r": 192, "is_maxim": 192, "is_primari": 192, "is_rad": 192, "is_princip": 192, "xj": 192, "satur": 192, "subquoti": 192, "quotientmodul": 192, "subquotientmodul": 192, "killed_modul": 192, "quotientmoduleel": 192, "kill": [192, 196, 236], "quotient_hom": 192, "ker": 192, "surject": 192, "cokernel": 192, "coker": 192, "meaningfulli": 192, "restrict_domain": 192, "homomoprh": 192, "modulehomomorph": [192, 200], "_ker": 192, "_img": 192, "_kernel": 192, "_imag": 192, "_restrict_domain": 192, "_restrict_codomain": 192, "_quotient_domain": 192, "_quotient_codomain": 192, "_appli": 192, "_mul_scalar": 192, "_compos": 192, "_add": [192, 211], "is_inject": 192, "quotient_domain": 192, "is_isomorph": 192, "preimag": 192, "restrict_codomain": 192, "is_surject": 192, "quotient_codomain": 192, "induct": 192, "monogen": 192, "monogenicfiniteextens": [192, 196], "finiteextens": 192, "sqrt2": [192, 195], "_5": 192, "extensionel": [192, 196], "notinvert": [192, 198, 201], "overview": [193, 224, 258, 259], "nu_1": 193, "nu_2": 193, "nu_n": 193, "nu_i": 193, "customarili": 193, "irreduc": [193, 196, 198, 200, 201, 204, 225, 231, 282], "endow": [193, 201], "resp": [193, 196, 221], "divmod": [193, 195, 196], "cb": [193, 243], "sqf_list": [193, 196, 201], "sqf": [193, 196, 201, 218], "buchberg": [193, 198, 199, 201], "solve_poly_system": [193, 201, 223, 224], "ddm": 194, "fmt": [194, 196, 200], "matrix1": 194, "sdm": [194, 198], "dmnonsquarematrixerror": 194, "zz_i": [194, 195], "from_dict_sympi": 194, "ncol": 194, "elemsdict": 194, "from_list_sympi": 194, "from_list": [194, 196, 201, 202], "construct_domain": [194, 195, 196, 201], "from_rep": 194, "drep": 194, "dm": [194, 200], "ownership": 194, "scc": 194, "substract": 194, "to_dens": 194, "to_field": [194, 196, 201], "to_spars": 194, "aq": 194, "ccc": [194, 224], "from_ddm": 194, "domainerror": [194, 198, 201], "to_ddm": 194, "r706": 194, "pythonmpq": [195, 196], "srepr": [195, 277], "strength": 195, "richardon": 195, "dup_factor_list": 195, "factortool": [195, 198], "dup_": [195, 198], "dmp_": [195, 198], "z1": [195, 196, 223], "is_field": [195, 196], "quo": [195, 196, 198, 201], "rem": [195, 196, 198, 201], "exquo": [195, 196, 201], "exactquotientfail": [195, 196, 198, 201], "mpz": [195, 196], "of_typ": [195, 196], "z1_sympi": 195, "to_sympi": [195, 196], "from_sympi": [195, 196], "forth": [195, 200], "z_sympi": 195, "z_zz": 195, "coercionfail": [195, 198], "sum_domain": 195, "expressions_sympi": 195, "expressions_dom": 195, "result_dom": 195, "e_dom": 195, "result_sympi": 195, "qq_i": 195, "gaussianinteg": [195, 196], "gaussianrationalfield": [195, 196], "gaussianr": [195, 196], "galoi": [195, 198, 200], "finitefield": [195, 196], "pythonfinitefield": [195, 196], "gmpyfinitefield": [195, 196], "welcom": [195, 221, 275], "realel": [195, 196], "complexel": [195, 196], "mpc": 195, "xr": [195, 203], "zc": 195, "1j": 195, "_mpc_": 195, "realfield": [195, 196], "rr100": 195, "33333333333333333333333333333": 195, "hack": [195, 221, 234], "algebraic_field": [195, 196, 198, 200], "algebraicfield": [195, 196, 198, 200], "sqrt3": 195, "x_dom": 195, "p_expr": [195, 196], "polyel": [195, 196, 198, 202, 203, 205], "p_dom": 195, "xk": [195, 196, 207], "yk": [195, 196], "poly_r": [195, 196], "old_polynomialr": 195, "globalpolynomialr": 195, "polyclass": [195, 196, 201], "yr": [195, 203], "broader": 195, "get_field": [195, 196], "frac_field": [195, 196], "rationalfield": [195, 196], "old_frac_field": [195, 196], "fractionfield": [195, 196], "old_fractionfield": 195, "xf": 195, "yf": 195, "fracfield": [195, 196], "expressiondomain": [195, 196], "elements_sympi": 195, "elements_k": 195, "convert_from": [195, 196], "num_zz": 195, "num_qq": 195, "domainel": [195, 196, 203], "encompass": 195, "all_coeff": [195, 196, 201], "dom": [195, 196, 198, 213], "strang": 195, "hybrid": 195, "unreli": 195, "usefulli": 196, "pythonr": [196, 203], "p_domain": 196, "ez": [196, 231], "get_r": 196, "has_assoc_field": 196, "has_assoc_r": 196, "alg_field_from_poli": [196, 200], "root_index": 196, "almosteq": 196, "cyclotomic_field": [196, 200], "zeta7": 196, "zeta_": 196, "lexord": [196, 201], "from_algebraicfield": 196, "from_complexfield": 196, "from_expressiondomain": 196, "from_expressionrawdomain": 196, "from_ff": 196, "modularinteg": 196, "from_ff_gmpi": 196, "from_ff_python": 196, "from_fractionfield": 196, "from_globalpolynomialr": 196, "from_monogenicfiniteextens": 196, "from_polynomialr": 196, "from_qq_gmpi": 196, "from_qq_python": 196, "from_realfield": 196, "from_zz_gmpi": 196, "from_zz_python": 196, "gcdex": [196, 201], "get_exact": 196, "half_gcdex": [196, 201], "is_pid": 196, "is_r": 196, "is_nonposit": 196, "is_on": [196, 201], "rersiv": 196, "__neg__": 196, "__pos__": 196, "__sub__": 196, "q_domain": 196, "q_expr": 196, "x_domain": 196, "alg": [196, 200, 204], "trait": 196, "is_unit": 196, "__divmod__": 196, "__floordiv__": 196, "__mod__": [196, 200], "simpledomain": 196, "compositedomain": 196, "from_qq": 196, "from_zz": 196, "gmpyinteg": 196, "pythoninteg": 196, "gmpyrationalfield": 196, "pythonrationalfield": 196, "from_gaussianrationalfield": 196, "gaussianel": 196, "gaussiandomain": 196, "qq_python": 196, "zz_python": 196, "z2": 196, "z3": 196, "z4": 196, "from_gaussianinteg": 196, "as_algebraicfield": 196, "orig_ext": 196, "integral_basi": [196, 200], "maximal_ord": [196, 200], "zeta5": 196, "primes_abov": [196, 200], "primeid": [196, 200], "to_alg_num": [196, 200], "legibl": 196, "to_rat": 196, "mpelement": 196, "complexfield": 196, "lc": [196, 198, 201], "domain_or_field": 196, "dmf": 196, "coercibl": 196, "monomialord": [196, 201], "xring": 196, "vring": 196, "sring": [196, 202, 203], "polyr": [196, 198, 203], "factor_list": [196, 201, 282], "add_gen": 196, "drop_to_ground": 196, "monomial_basi": 196, "206": [196, 201], "744": 196, "945": [196, 202], "is_monomi": [196, 201], "const": [196, 205], "coeffcient": [196, 198], "inplac": 196, "shallow": [196, 212], "zero_monom": 196, "fv": 196, "clo": 196, "p64": 196, "qv": 196, "f0": 196, "imul_num": 196, "itercoeff": 196, "itermonom": 196, "iterterm": 196, "leading_expv": 196, "leading_monom": 196, "leading_term": 196, "listcoeff": 196, "listmonom": 196, "listterm": 196, "monom": [196, 201], "strip_zero": 196, "tail_degre": 196, "xfield": 196, "vfield": [196, 256], "sfield": [196, 256], "fracel": [196, 205], "lev": 196, "add_ground": [196, 201], "all_monom": [196, 201], "all_term": [196, 201], "cauchy_lower_bound": 196, "cauchy_upper_bound": 196, "clear_denom": [196, 201], "count_complex_root": 196, "sup": [196, 201, 205, 212, 213], "count_real_root": 196, "deflat": [196, 201], "y_i": [196, 198, 200, 201, 221], "x_j": [196, 198, 201], "degree_list": [196, 201], "eject": [196, 201], "exquo_ground": [196, 201], "factor_list_includ": [196, 201], "from_dict": [196, 201], "from_sympy_list": 196, "gff_list": [196, 201], "homogeneous_ord": [196, 201, 218, 221], "is_cyclotom": [196, 201], "is_ground": [196, 201], "is_homogen": [196, 201], "is_irreduc": [196, 201], "is_linear": [196, 201], "is_mon": [196, 201], "is_quadrat": [196, 201], "is_sqf": [196, 201], "l1_norm": [196, 201], "l2_norm_squar": 196, "max_norm": [196, 201], "mignotte_sep_bound_squar": 196, "mignott": [196, 198], "mul_ground": [196, 201], "pdiv": [196, 201], "pexquo": [196, 201], "pquo": [196, 201], "prem": [196, 201], "quo_ground": [196, 201], "refine_root": [196, 200, 201], "includepr": [196, 198, 201], "sqf_list_includ": [196, 201], "sqf_norm": [196, 201], "sqf_part": [196, 201], "sqr": [196, 201], "sturm": [196, 201], "sub_ground": [196, 201], "to_dict": 196, "to_exact": [196, 201], "to_r": [196, 201], "to_sympy_dict": 196, "to_sympy_list": 196, "to_tupl": 196, "total_degre": [196, 201, 218], "trunc": [196, 201, 204], "frac_unifi": 196, "half_per": 196, "poly_unifi": 196, "gr\u00f6bner": 197, "wester": [197, 268], "agca": [197, 268], "l0": 198, "legitim": 198, "uninterest": 198, "bulk": [198, 215], "x_u": 198, "dup__": 198, "densebas": 198, "dmp_lc": 198, "poly_lc": 198, "dmp_tc": 198, "poly_tc": 198, "dmp_ground_lc": 198, "dmp_ground_tc": 198, "dmp_true_lt": 198, "n_1": [198, 223, 225], "n_k": 198, "dmp_degre": 198, "dmp_degree_in": 198, "dmp_degree_list": 198, "dmp_strip": 198, "dmp_valid": 198, "dup_revers": 198, "dmp_copi": 198, "dmp_to_tupl": 198, "dmp_normal": 198, "dmp_convert": 198, "to_domain": 198, "dmp_from_sympi": 198, "dmp_nth": 198, "dmp_ground_nth": 198, "dmp_zero_p": 198, "dmp_zero": 198, "dmp_one_p": 198, "dmp_one": 198, "dmp_ground_p": 198, "dmp_ground": 198, "dmp_negative_p": 198, "dmp_positive_p": 198, "dmp_from_dict": 198, "dmp_to_dict": 198, "dmp_swap": 198, "dmp_permut": 198, "dmp_nest": 198, "dmp_rais": 198, "dmp_deflat": 198, "dmp_multi_defl": 198, "dmp_inflat": 198, "dmp_exclud": 198, "dmp_includ": 198, "dmp_inject": 198, "dmp_eject": 198, "dmp_terms_gcd": 198, "dmp_list_term": 198, "dmp_apply_pair": 198, "dmp_slice": 198, "dup_random": 198, "densearith": 198, "dmp_add_term": 198, "dmp_sub_term": 198, "dmp_mul_term": 198, "dmp_add_ground": 198, "dmp_sub_ground": 198, "dmp_mul_ground": 198, "dmp_quo_ground": 198, "dmp_exquo_ground": 198, "dup_lshift": 198, "dup_rshift": 198, "dmp_ab": 198, "dmp_neg": 198, "dmp_add": 198, "dmp_sub": 198, "dmp_add_mul": 198, "dmp_sub_mul": 198, "dmp_mul": 198, "dmp_sqr": 198, "dmp_pow": 198, "dmp_pdiv": 198, "dmp_prem": 198, "dmp_pquo": 198, "dmp_pexquo": 198, "dmp_rr_div": 198, "dmp_ff_div": 198, "dmp_div": 198, "dmp_rem": 198, "dmp_quo": 198, "dmp_exquo": 198, "dmp_max_norm": 198, "dmp_l1_norm": 198, "dmp_expand": 198, "densetool": 198, "dmp_integr": 198, "dmp_integrate_in": 198, "dmp_diff": 198, "dmp_diff_in": 198, "dmp_eval": 198, "dmp_eval_in": 198, "dmp_eval_tail": 198, "dmp_diff_eval_in": 198, "dmp_trunc": 198, "dmp_ground_trunc": 198, "dup_mon": 198, "dmp_ground_mon": 198, "dup_cont": 198, "dmp_ground_cont": 198, "dup_primit": 198, "dmp_ground_primit": 198, "dup_extract": 198, "dmp_ground_extract": 198, "dup_real_imag": 198, "bivari": [198, 204, 221, 225], "dup_mirror": 198, "dup_scal": 198, "dup_shift": 198, "dup_transform": 198, "dmp_compos": 198, "dup_decompos": 198, "t_m": 198, "r707": 198, "dmp_lift": 198, "dup_sign_vari": 198, "dmp_clear_denom": 198, "k_0": 198, "dmp_revert": 198, "gf_": 198, "justifi": 198, "necess": 198, "u_0": 198, "m_0": [198, 218], "m_n": 198, "gf_crt1": 198, "9215": 198, "9405": 198, "9603": 198, "gf_crt2": 198, "gf_int": 198, "gf_degre": 198, "gf_lc": 198, "gf_tc": 198, "gf_strip": 198, "gf_trunc": 198, "gf_normal": 198, "gf_from_dict": 198, "gf_to_dict": 198, "gf_from_int_poli": 198, "gf_to_int_poli": 198, "gf_neg": 198, "gf_add_ground": 198, "gf_sub_ground": 198, "gf_mul_ground": 198, "gf_quo_ground": 198, "gf_add": 198, "gf_sub": 198, "gf_mul": 198, "gf_sqr": 198, "gf_add_mul": 198, "gf_sub_mul": 198, "gf_expand": 198, "gf_div": 198, "r708": 198, "monagan93": [198, 199], "r709": 198, "gathen99": [198, 199], "gf_rem": 198, "gf_quo": 198, "gf_exquo": 198, "gf_lshift": 198, "gf_rshift": 198, "gf_pow": 198, "gf_pow_mod": 198, "r710": 198, "gf_gcd": 198, "gf_lcm": 198, "gf_cofactor": 198, "gf_gcdex": 198, "eea": 198, "r711": 198, "gf_monic": 198, "gf_diff": 198, "gf_eval": 198, "gf_multi_ev": 198, "gf_compos": 198, "gf_compose_mod": 198, "gf_trace_map": 198, "r712": 198, "gathen92": [198, 199], "gf_random": 198, "gf_irreduc": 198, "gf_irreducible_p": 198, "gf_sqf_p": 198, "gf_sqf_part": 198, "gf_sqf_list": 198, "e_2": [198, 201], "e_k": 198, "f_j": [198, 215], "gf_sqf": 198, "r713": 198, "geddes92": [198, 199], "gf_qmatrix": 198, "berlekamp": 198, "gf_qbasi": 198, "gf_berlekamp": 198, "gf_zassenhau": 198, "gf_shoup": 198, "gf_factor_sqf": 198, "gf_factor": 198, "e_d": 198, "cantor": 198, "zassenhau": [198, 200], "shoup": [198, 199], "kaltofen": [198, 199], "gathen": [198, 199], "gf_factor_method": 198, "r714": 198, "gf_valu": 198, "2204": 198, "gf_csolv": 198, "congruent": [198, 215, 218], "189": 198, "112": [198, 202], "139": 198, "r715": 198, "ivan": 198, "niven": 198, "zuckerman": 198, "montgomeri": 198, "infeas": [198, 201], "sdm_": 198, "distributedmodul": 198, "sdm_monomial_mul": 198, "sdm_monomial_deg": 198, "f_5": 198, "sdm_monomial_divid": 198, "sdm_lc": 198, "sdm_to_dict": 198, "sdm_from_dict": 198, "dic": 198, "sdm_add": 198, "2f_1": 198, "3f_1": 198, "yf_1": 198, "xf_1": 198, "sdm_lm": 198, "sdm_lt": 198, "sdm_mul_term": 198, "2xy": [198, 276], "4y": [198, 224, 271], "8xy": 198, "2y": [198, 218, 221, 224, 276], "sdm_zero": 198, "sdm_deg": 198, "sdm_from_vector": 198, "sdm_to_vector": 198, "variant": [198, 221, 224], "qg": 198, "remark": [198, 204, 215, 221], "uf": 198, "vg": 198, "zout": 198, "euclidtool": 198, "dmp_half_gcdex": 198, "dmp_gcdex": 198, "dmp_invert": 198, "dmp_euclidean_pr": 198, "dmp_primitive_pr": 198, "exceedingli": 198, "collin": [198, 199], "collins67": [198, 199], "subdomain": 198, "2l": 198, "remainin": 198, "subdetermin": 198, "n_2": [198, 225], "n_": [198, 218], "abnorm": 198, "gamma_i": 198, "brown": [198, 199, 225], "traub": [198, 199], "browntraub71": [198, 199], "brown78": [198, 199], "discoveri": [198, 278], "dmp_inner_subresult": 198, "729": 198, "sre": 198, "dmp_subresult": 198, "dmp_prs_result": 198, "dmp_zz_modular_result": 198, "dmp_zz_collins_result": 198, "dmp_qq_collins_result": 198, "dmp_result": 198, "dmp_discrimin": 198, "dmp_rr_prs_gcd": 198, "cff": [198, 201], "cfg": [198, 201], "dmp_ff_prs_gcd": 198, "dmp_zz_heu_gcd": 198, "r716": 198, "liao95": [198, 199], "dmp_qq_heu_gcd": 198, "dmp_inner_gcd": 198, "dmp_gcd": 198, "dmp_lcm": 198, "dmp_content": 198, "dmp_primit": 198, "dmp_cancel": 198, "dmp_trial_divis": 198, "dmp_zz_mignotte_bound": 198, "dup_zz_hensel_step": 198, "hensel": 198, "r717": 198, "dup_zz_hensel_lift": 198, "f_list": 198, "multifactor": 198, "r718": 198, "dup_zz_zassenhau": 198, "dup_zz_irreducible_p": 198, "eisenstein": 198, "dup_cyclotomic_p": 198, "bradford": 198, "russel": 198, "251": 198, "berlin": 198, "heidelberg": 198, "dup_zz_cyclotomic_poli": 198, "dup_zz_cyclotomic_factor": 198, "r719": 198, "weisstein09": [198, 199], "dup_zz_factor_sqf": 198, "dup_zz_factor": 198, "r720": 198, "dmp_zz_wang_non_divisor": 198, "wang": [198, 199], "eez": 198, "dmp_zz_wang_test_point": 198, "dmp_zz_wang_lead_coeff": 198, "dmp_zz_diophantin": 198, "dmp_zz_wang_hensel_lift": 198, "dmp_zz_wang": 198, "enhanc": [198, 225], "r721": 198, "wang78": [198, 199], "r722": 198, "dmp_zz_factor": 198, "r723": 198, "dmp_ext_factor": 198, "dup_gf_factor": 198, "dmp_factor_list": 198, "dmp_factor_list_includ": 198, "dmp_irreducible_p": 198, "groebnertool": 198, "polyconfig": [198, 201], "f5b": [198, 201], "spoli": 198, "red_groebn": 198, "beckerweispfenning93": 198, "is_groebn": 198, "is_minim": 198, "is_reduc": 198, "fglmtool": 198, "matrix_fglm": 198, "o_to": 198, "o_from": 198, "r724": 198, "fauger": [198, 201], "gianni": [198, 201, 223], "mora": [198, 199, 201, 223], "sdm_spoli": 198, "phantom": 198, "sca": 198, "defn": 198, "sdm_ecart": 198, "ecart": 198, "sdm_nf_mora": 198, "nf": 198, "sdm_groebner": 198, "sugar": [198, 199, 230], "giovini": [198, 199], "polyopt": [198, 202], "build_opt": 198, "polyerror": [198, 201], "basepolynomialerror": 198, "operationnotsupport": 198, "heuristicgcdfail": 198, "homomorphismfail": 198, "isomorphismfail": [198, 200], "extraneousfactor": 198, "evaluationfail": 198, "refinementfail": 198, "notrevers": [198, 201], "notalgebra": 198, "polynomialerror": [198, 201], "unificationfail": [198, 200], "generatorsneed": 198, "computationfail": 198, "exc": 198, "generatorserror": 198, "univariatepolynomialerror": 198, "multivariatepolynomialerror": [198, 201], "polificationfail": 198, "orig": 198, "optionerror": 198, "flagerror": 198, "modulargcd": 198, "modgcd_univari": 198, "monagan00": [198, 199], "modgcd_bivari": 198, "modgcd_multivari": 198, "_modgcd_multivariate_p": 198, "brown71": [198, 199], "degbound": 198, "contbound": 198, "func_field_modgcd": 198, "reconstuct": 198, "z_p": 198, "spuriou": [198, 223], "hoeij04": [198, 199], "scarc": 198, "hsin": 199, "chao": 199, "liao": 199, "fateman": 199, "montreal": 199, "quebec": 199, "canada": 199, "240": [199, 207, 253], "247": [199, 223], "von": [199, 225], "zur": 199, "gerhard": 199, "cambridg": [199, 218], "weisstein": 199, "cyclotomicpolynomi": 199, "1215": 199, "1231": 199, "czapor": 199, "labahn": 199, "monagan": [199, 217], "disco": 199, "721": 199, "kaltofen98": 199, "subquadrat": 199, "223": 199, "1998": [199, 218], "1179": 199, "1197": 199, "shoup95": 199, "397": 199, "shoup91": 199, "cox97": [199, 201], "shea": [199, 201], "ajwa95": 199, "ajwa": 199, "liu": 199, "groebner": [199, 200, 201, 204, 217, 223, 224], "cites": [199, 217], "ist": [199, 214, 217], "psu": [199, 214, 217], "mycites": 199, "login": 199, "bose03": 199, "bose": 199, "guiver": 199, "giovini91": 199, "bronstein93": [199, 201], "salvi": [199, 202], "kiev": 199, "ukrain": 199, "buchberger01": [199, 201], "theorist": 199, "moreno": 199, "diaz": 199, "freir": 199, "eurocast": 199, "februari": 199, "davenport88": 199, "siret": 199, "tournier": 199, "london": [199, 218], "124": [199, 271], "greuel": 199, "pfister": 199, "atiyah": 199, "macdonald": 199, "142": 199, "1971": [199, 221], "505": 199, "237": 199, "249": 199, "wittkopf": 199, "478": 199, "hoeij": 199, "297": [199, 201], "304": [199, 201], "wang81": 199, "adic": 199, "symsac": 199, "hoeij02": 199, "manwright94": [199, 201], "yiu": 199, "kwong": 199, "franci": 199, "wright": 199, "dispers": [199, 225], "190347": 199, "190413": 199, "koepf98": [199, 201], "koepf": [199, 207, 217], "vieweg": 199, "abramov71": [199, 201], "abramov": [199, 223], "ussr": 199, "330": 199, "man93": [199, 201], "376": 199, "sciencedirect": 199, "pii": 199, "s0747717183710539": 199, "kapur1994": 199, "deepak": 199, "kapur": 199, "tushar": 199, "saxena": 199, "yang": 199, "dixon": 199, "researchg": [199, 225], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 199, "palancz08": 199, "pal\u00e1ncz": 199, "zaletnyik": 199, "jl": [199, 238], "awang": 199, "ew": 199, "grafarend": 199, "geodet": 199, "geodesi": 199, "225607735_dixon_result": 199, "s_solution_of_systems_of_geodetic_polynomial_equ": 199, "bruce97": 199, "bruce": 199, "randal": 199, "donald": [199, 240], "mundi": 199, "artifici": [199, 208], "intellig": [199, 217, 221, 282], "orlando": 199, "www2": 199, "duke": 199, "donaldlab": 199, "symbolicnumericalcomput": 199, "045": 199, "087": 199, "stiller96": 199, "stiller": 199, "citeseerx": [199, 214], "viewdoc": [199, 214, 217], "590": 199, "2021": 199, "rep1": [199, 214], "cohen93": [199, 200], "henri": 199, "olga": 200, "tausski": 200, "zimmer": 200, "pohst": 200, "articul": 200, "numberfield": 200, "mathfrak": 200, "regul": 200, "alpha_m": 200, "round_two": 200, "prime_decomp": 200, "prime_valu": 200, "minimal_polynomi": 200, "field_isomorph": 200, "nilrad": 200, "z_k": 200, "zk": 200, "ordinarili": 200, "503": 200, "r725": 200, "r726": 200, "powerbasisel": 200, "ramif": 200, "as_submodul": 200, "bundl": 200, "test_factor": 200, "deliber": 200, "is_inert": 200, "inert": [200, 221], "reduce_anp": 200, "elt": 200, "reduce_alg_num": 200, "field_gen": 200, "just_gen": 200, "reagent": 200, "kummer": 200, "1847": 200, "ueber": 200, "zerlegung": 200, "crell": 200, "r727": 200, "_minpoly_compos": 200, "stall": 200, "alli": 200, "monomorph": 200, "alpha_i": 200, "alpha_n": 200, "lincomb": 200, "primtiiv": 200, "meanwhil": 200, "moduleel": 200, "powerbasi": 200, "submodule_from_matrix": 200, "ancestor": 200, "to_col": 200, "nca": 200, "circumst": [200, 276], "_mult_tab": 200, "successfulli": 200, "moduleendomorph": 200, "innerendomorph": 200, "endomorphismr": 200, "spec": [200, 201], "i_n": [200, 201, 226], "include_self": 200, "basis_el": 200, "element_from_r": 200, "endomorphism_r": 200, "is_compat_col": 200, "mult_tab": 200, "mult": 200, "closurefailur": 200, "nearest_common_ancestor": 200, "number_field": 200, "power_basis_ancestor": 200, "incom": 200, "halv": 200, "submodule_from_gen": 200, "over_power_basi": 200, "starts_with_un": 200, "hnf_modulu": 200, "whole_submodul": 200, "element_from_anp": 200, "element_from_alg_num": 200, "element_from_poli": 200, "qq_matrix": 200, "basis_element_pullback": 200, "discard_befor": 200, "structureerror": 200, "cohen00": 200, "make_mod_elt": 200, "qq_col": 200, "from_int_list": 200, "is_compat": 200, "reduced_mod_p": 200, "to_ancestor": 200, "anc": 200, "to_par": 200, "to_anp": 200, "inner_endomorph": 200, "event": [200, 225], "find_min_poli": 200, "missingunityerror": 200, "is_int": 200, "get_num_denom": 200, "extract_fundamental_discrimin": 200, "r728": 200, "algintpow": 200, "zeta_pow": 200, "r729": 200, "coeff_search": 200, "supplement_a_subspac": 200, "dmrankerror": 200, "v_n": 200, "w_r": 200, "w_j": 200, "u_j": 200, "r730": 200, "poly_from_expr": 201, "parallel_poly_from_expr": 201, "exprtool": 201, "gcd_list": 201, "lcm_list": 201, "destruct": 201, "2079": 201, "1401": 201, "2715": 201, "6720": 201, "1092": 201, "gff": 201, "check_sqf": 201, "count_root": 201, "nroot": [201, 223], "maxstep": 201, "cleanup": 201, "73205080756888": 201, "73205080756887729352744634151": 201, "ground_root": 201, "nth_power_roots_poli": 201, "r_f": 201, "r_g": 201, "_signsimp": 201, "q_n": 201, "is_zero_dimension": [201, 224], "donal": 201, "230": [201, 223], "ec": 201, "em": 201, "di": 201, "dispersionset": 201, "gp": [201, 221], "free_symbols_in_domain": 201, "from_poli": 201, "get_domain": 201, "get_modulu": 201, "has_only_gen": 201, "vincent": [201, 243], "akrita": 201, "strzebonski": 201, "va": 201, "alkiviadi": 201, "panagioti": 201, "vigkla": 201, "265": 201, "279": 201, "polnomi": 201, "is_multivari": 201, "is_univari": 201, "ltrim": 201, "_only_": 201, "sturmian": 201, "subresultants_qq_zz": 201, "suffix": [201, 238], "_pg": 201, "_amv": 201, "rem_z": 201, "premultipli": 201, "rat_clear_denom": 201, "_ignor": 201, "retract": 201, "same_root": 201, "r0": 201, "set_domain": 201, "set_modulu": 201, "termwis": 201, "fglm": 201, "r731": 201, "horner_schem": 201, "equispac": 201, "viet": 201, "itermonomi": 201, "min_degre": 201, "gib": 201, "monomial_kei": 201, "monomial_count": 201, "gradedlexord": 201, "reversedgradedlexord": 201, "clear_cach": 201, "_get_interv": 201, "165": [201, 225, 243], "169": 201, "eval_approx": 201, "evalf_r": 201, "eval_r": 201, "69629": 201, "71318": 201, "805": 201, "3275": 201, "65536": [201, 204, 205], "414645": 201, "131072": 201, "6545": 201, "104755": 201, "2097152": 201, "6634255": 201, "_all_root": 201, "use_cach": 201, "_complexes_index": 201, "_complexes_sort": 201, "_count_root": 201, "_ensure_complexes_init": 201, "_ensure_reals_init": 201, "_eval_is_imaginari": 201, "_get_complex": 201, "_get_complexes_sqf": 201, "currentfactor": 201, "_get_real": 201, "_get_reals_sqf": 201, "_get_root": 201, "_indexed_root": 201, "_new": 201, "_postprocess_root": 201, "_preprocess_root": 201, "heroic": [201, 223], "_real_root": 201, "_reals_index": 201, "_reals_sort": 201, "_refine_complex": 201, "_roots_trivi": 201, "_set_interv": 201, "861136": 201, "86113631159405258": 201, "polyroot": 201, "quintic": [201, 223], "unread": [201, 241], "casu": 201, "irreducibili": 201, "unsolvablefactorerror": [201, 223], "inexpress": 201, "unsolv": [201, 224], "r732": 201, "cubic_funct": 201, "trigonometric_": 201, "28and_hyperbol": 201, "29_method": 201, "specialpoli": 201, "swinnerton_dyer_poli": 201, "swinnerton": 201, "dyer": 201, "symmetric_poli": 201, "random_poli": 201, "gegenbau": [201, 205], "jakob": 201, "psum": 201, "3144337": 201, "r733": 201, "bernoulli_c_poli": 201, "reindex": 201, "swiss": 201, "knife": 201, "630": 201, "5124": 201, "12465": 201, "155": 201, "r734": 201, "partfrac": [201, 207], "undertermin": 201, "_w": [201, 212], "apart_list": 201, "assemble_partfrac_list": 201, "bunch": 201, "pfd": 201, "r735": 201, "partial_list": 201, "reassembl": 201, "pfda": 201, "r736": 201, "r737": 201, "r738": 201, "r739": 201, "r740": 201, "r741": 201, "r742": 201, "r743": 201, "widen": 202, "ring_seri": 202, "rs_sin": 202, "166666666666667": 202, "puiseux": 202, "rs_co": 202, "rs_tan": 202, "took": [202, 214], "eleg": [202, 204], "rs_exp": 202, "everyon": 202, "blazingli": 202, "promin": 202, "gradual": 202, "rs_": 202, "rs_log": 202, "rs_lambertw": 202, "rs_atan": 202, "arctang": 202, "rs_asin": 202, "_tan1": 202, "rs_cot": 202, "rs_cos_sin": 202, "rs_atanh": 202, "rs_sinh": 202, "rs_cosh": 202, "rs_tanh": 202, "rs_hadamard_exp": 202, "inver": 202, "rs_mul": 202, "rs_squar": 202, "rs_pow": 202, "rs_series_invers": 202, "rs_series_revers": 202, "a_kx_k": 202, "ar_i": 202, "ar_": 202, "ae": 202, "rs_trunc": 202, "rs_nth_root": 202, "160249952256379": 202, "44224957030741": 202, "rs_sub": 202, "rs_diff": 202, "rs_integr": 202, "rs_newton": 202, "rs_compose_add": 202, "r744": 202, "bostan": 202, "flajolet": 202, "schost": 202, "4579": 202, "institut": 202, "nation": 202, "recherch": 202, "informatiqu": 202, "automatiqu": 202, "rs_is_puiseux": 202, "rs_puiseux": 202, "rs_puiseux2": 202, "rs_series_from_list": 202, "concur": 202, "rs_fun": 202, "_tan": 202, "_nth": 202, "_root": 202, "_fun": 202, "mul_xin": 202, "pow_xin": 202, "_raw": 203, "unkown": 203, "sympy_eqs_to_r": 203, "eqs_r": 203, "eqs_to_matrix": 203, "eqs_coeff": 203, "eqs_rh": 203, "_solve_lin_si": 203, "_solve_lin_sys_compon": 203, "critiqu": 204, "wester1999": 204, "systemat": 204, "153": 204, "\u2124": [204, 205, 224, 283], "unm": 204, "driver": [205, 237], "adequ": 205, "emptyprint": 205, "_sympystr": 205, "mathml": 205, "inconveni": 205, "_print_": 205, "expr_class": 205, "hierarchi": [205, 225], "_print_rat": 205, "_print_numb": 205, "_print_atom": 205, "_print_bas": 205, "print_latex": 205, "mylatexprint": 205, "_print_deriv": 205, "print_my_latex": 205, "modop": 205, "subcompon": 205, "outermost": [205, 213, 217, 229], "modopmodewrong": 205, "modopnestedwrong": 205, "modopsettingswrong": 205, "subobject": 205, "infrastructur": [205, 222], "printer_exampl": 205, "set_global_set": 205, "stringpict": 205, "pretty_symbologi": 205, "prettyform": 205, "hline": 205, "vline": 205, "ascii": 205, "_pretti": 205, "use_unicode_sqrt_char": 205, "root_not": 205, "mat_symbol_styl": 205, "prettifi": 205, "bold": 205, "c89codeprint": 205, "print_ccod": 205, "tgamma": 205, "known_functions_c89": 205, "known_functions_c99": 205, "fmax": 205, "fmin": 205, "lgamma": 205, "indent_cod": 205, "cfunction_format": 205, "derefer": 205, "dereferenc": 205, "symbols_to_declar": 205, "not_supported_funct": 205, "code_text": 205, "m_sqrt2": 205, "math_macro": 205, "m_sqrt2l": 205, "cxx": 205, "cxx98codeprint": 205, "print_rcod": 205, "rcode": 205, "known_funct": 205, "_rcode": 205, "rfunction_str": 205, "rfunction_format": 205, "ifels": 205, "type_map": 205, "name_mangl": 205, "mangl": 205, "floor1": 205, "floor2": 205, "print_fcod": 205, "_fcode": 205, "conjg": 205, "32768": 205, "7182818284590452d0": 205, "1415926535897932d0": 205, "718281828459045235360287d0": 205, "141592653589793238462643d0": 205, "869604401089358618834491d0": 205, "mygamma": 205, "allow_unknown_funct": 205, "smtlib": 205, "smtlibprint": 205, "symbol_t": 205, "_smtlib": 205, "_default_set": 205, "known_const": 205, "ite": 205, "known_typ": 205, "smtlib_cod": 205, "auto_assert": 205, "auto_declar": 205, "prefix_express": 205, "suffix_express": 205, "log_warn": 205, "booleanfunct": 205, "dreal": 205, "14159": 205, "my_smt_variable_for_pi": 205, "postfix": [205, 243], "riski": 205, "sound": [205, 282], "noop": 205, "pw": 205, "pythontyp": 205, "smt_builtin_func": 205, "existing_smtlib_fcn": 205, "user_def_func": 205, "fun": [205, 222, 275], "coshintegr": 205, "cosintegr": 205, "expintegralei": 205, "factorialpow": 205, "heavisidetheta": 205, "sinhintegr": 205, "sinintegr": 205, "arccosh": 205, "arccoth": 205, "arcsinh": 205, "arctanh": 205, "dirichleteta": 205, "gegenbauerc": 205, "hypergeometricpfq": 205, "sphericalbesselj": 205, "logintegr": 205, "lucasl": 205, "mathieu": 205, "riemann_xi": 205, "riemannxi": 205, "stieltjesgamma": 205, "sphericalbess": 205, "mcodeprint": 205, "_mcode": 205, "mcode": 205, "maplecodeprint": 205, "_mapl": 205, "maple_cod": 205, "print_maple_cod": 205, "javascriptcodeprint": 205, "_javascript": 205, "js_function_str": 205, "known_fcns_src1": 205, "known_fcns_src2": 205, "conj": 205, "juliacodeprint": 205, "_julia": 205, "harmless": [205, 278], "cosmet": 205, "existing_julia_fcn": 205, "coshint": 205, "cosint": 205, "sinhint": 205, "sinint": 205, "bincoeff": 205, "logint": 205, "gammaln": 205, "octavecodeprint": 205, "_octav": 205, "recip": [205, 243], "powf": 205, "signum": 205, "rustcodeprint": 205, "_rust_cod": 205, "7_f64": 205, "_aesara": 205, "tensorvari": 205, "floatx": 205, "squeez": 205, "dim_handl": 205, "gtkmathview": 205, "widget": 205, "print_gtk": 205, "libgtkmathview": 205, "start_view": 205, "_lambdacod": 205, "accepted_latex_funct": 205, "parenthesize_sup": 205, "fold_frac_pow": 205, "fold_func_bracket": 205, "fold_short_frac": 205, "inv_trig_styl": 205, "itex": 205, "ln_notat": 205, "long_frac_ratio": 205, "mat_delim": 205, "mat_str": 205, "mul_symbol": 205, "symbol_nam": 205, "gothic_re_im": 205, "decimal_separ": 205, "diff_oper": 205, "smallmatrix": [205, 276], "amsmath": 205, "fracton": 205, "semicolon": 205, "monospac": 205, "mathtt": 205, "mathml2": 205, "mathmlprinterbas": 205, "mathmlcontentprint": 205, "mathmlpresentationprint": 205, "chapter4": 205, "_mathml_cont": 205, "mathml_tag": 205, "chapter3": 205, "_mathml_present": 205, "utf": 205, "mul_symbol_mathml_numb": 205, "xb7": 205, "print_mathml": [205, 281], "mrow": 205, "mpmathprint": 205, "fully_qualified_modul": 205, "print_python": 205, "textual": 205, "reprprint": 205, "_sympyrepr": 205, "reprifi": 205, "sympy_integ": 205, "displayhook": [205, 236], "pprint_nod": 205, "nb2": 205, "print_nod": 205, "asssumpt": 205, "determinisit": 205, "backtrac": 205, "print_tre": 205, "outputbuff": 205, "dvioption": 205, "outputtexfil": 205, "extra_preambl": 205, "latex_set": 205, "postscript": 205, "tex": 205, "eulervm": 205, "sty": 205, "debian": 205, "ubuntu": 205, "unset": [205, 217], "gimp": 205, "evinc": 205, "kdvi": 205, "xdvi": 205, "xdg": 205, "system_default_view": 205, "gracefulli": [205, 229], "generet": 205, "bytesio": 205, "usepackag": 205, "amsfont": 205, "renewcommand": 205, "popen": 205, "phidd": 205, "bitmap": 205, "split_super_sub": 205, "var_sub1__sup_sub2": 205, "assignmenterror": 205, "bitwiseand": 205, "bitwiseor": 205, "bitwisexor": 205, "precedence_valu": 205, "kroneckerproduct": 205, "tensadd": [205, 231], "tensmul": [205, 231], "precedence_funct": 205, "precedence_float": 205, "precedence_fracel": 205, "precedence_integ": 205, "precedence_mul": 205, "precedence_polyel": 205, "precedence_r": 205, "precedence_unevaluatedexpr": 205, "databas": [205, 215], "pretty_use_unicod": 205, "pretty_try_use_unicod": 205, "xstr": 205, "greek_lett": 205, "digit_2txt": 205, "ONE": 205, "seven": 205, "symb_2txt": 205, "parenthesi": [205, 229], "\u2080": 205, "\u2081": 205, "\u2082": 205, "\u2083": 205, "\u2084": 205, "\u2085": 205, "\u2086": 205, "\u2087": 205, "\u2088": 205, "\u2089": 205, "\u2090": 205, "\u1d66": 205, "\u1d6a": 205, "\u2091": 205, "\u1d67": 205, "\u2095": 205, "\u1d62": 205, "\u2096": 205, "\u2097": 205, "\u2098": 205, "\u2099": 205, "\u2092": 205, "\u209a": 205, "\u1d69": 205, "\u1d63": 205, "\u1d68": 205, "\u209b": 205, "\u209c": 205, "\u1d64": 205, "\u1d65": 205, "\u2093": 205, "\u2070": 205, "\u00b9": 205, "\u00b2": 205, "\u00b3": 205, "\u2074": 205, "\u2075": 205, "\u2076": 205, "\u2077": 205, "\u2078": 205, "\u2079": 205, "\u2071": 205, "\u207f": 205, "xobj": 205, "vobj": 205, "hobj": 205, "vf": 205, "\u00bd": 205, "\u2153": 205, "\u00bc": 205, "\u2155": 205, "\u2159": 205, "\u215b": 205, "\u2154": 205, "\u2156": 205, "\u00be": 205, "\u2157": 205, "\u215c": 205, "\u2158": 205, "\u215a": 205, "\u215d": 205, "\u215e": 205, "xsym": 205, "symbologi": 205, "atoms_t": 205, "\u2102": [205, 283], "emptysequ": [205, 211], "\u2115": 205, "\u2115\u2080": 205, "\u211d": [205, 283], "symmetricdiffer": [205, 213, 224], "pretty_atom": 205, "atom_nam": 205, "pretty_symbol": 205, "symb_nam": 205, "bold_nam": 205, "stylis": 205, "_print_meijerg": 205, "_print_hyp": 205, "jurjen": 205, "bo": 205, "hate": 205, "spammer": 205, "pietjepuk314": 205, "oc": [205, 256], "oohai": 205, "gedg": 205, "email": 205, "mun": 205, "terminal_str": 205, "baselin": 205, "leftslash": 205, "slash": [205, 236], "paren": 205, "ifascii_nougli": 205, "line_break": 205, "ugli": 205, "terminal_width": 205, "wider": 205, "maxdepth": 205, "labelfunc": 205, "digraph": [205, 243, 281], "rankdir": [205, 281], "_sparse_": 206, "flavor": 206, "________": [206, 225, 243], "x\u2080": 206, "greatli": 206, "numbered_symbol": [206, 217, 221, 243], "postprocessor": [206, 217], "reduced_expr": [206, 217], "formalpowerseri": 207, "coeff_bel": 207, "formalpowerseriescompos": 207, "r745": 207, "comtet": 207, "loui": 207, "reidel": 207, "1974": 207, "720": [207, 221, 243], "formalpowerseriesinvers": 207, "r746": 207, "upto": [207, 212, 221], "formalpowerseriesproduct": 207, "rational_algorithm": 207, "compute_fp": 207, "hyper_algorithm": 207, "omposit": 207, "bell_seq": 207, "finiteformalpowerseri": 207, "rational_independ": 207, "ra": 207, "admiss": [207, 210], "r747": 207, "r748": 207, "simpled": 207, "exp_r": 207, "explik": 207, "hyper_r": 207, "rsolve_hypergeometr": 207, "r749": 207, "r750": 207, "solve_d": 207, "fourierseri": 208, "scalex": 208, "shiftx": 208, "sigma_approxim": 208, "gibb": 208, "bigl": 208, "bigr": 208, "lanczo": 208, "r751": 208, "gibbs_phenomenon": 208, "r752": 208, "sawtooth": 208, "bn": 208, "r753": 208, "limitseq": 210, "difference_delta": 210, "r754": 210, "differencedelta": 210, "limit_seq": [210, 212], "safeguard": 210, "r755": 210, "kauer": 210, "seqper": 211, "seqformula": 211, "seqbas": 211, "coeff_mul": 211, "find_linear_recurr": 211, "gfvar": 211, "seqadd": 211, "seqmul": 211, "_mul": 211, "recursiveseq": 211, "fib": 211, "invok": [212, 236, 237], "workhors": 212, "succ": [212, 225], "asymp": 212, "exposit": 212, "gloss": 212, "wsym": 212, "test_rewrite1": 212, "build_expression_tre": 212, "mrv_leadterm": 212, "e0": 212, "calculate_seri": 212, "limitinf": 212, "constantli": 212, "subsset": 212, "mrv_max1": 212, "mrv_max3": 212, "expsf": 212, "expsg": 212, "expsboth": 212, "o2": 212, "do_sub": 212, "r756": 212, "7048138294": 212, "7182818285": 212, "6349839002": 212, "6449340668": 212, "shank": 212, "6881721793": 212, "6931396564": 212, "6931471806": 212, "6931471805599453094172321215": 212, "r757": 212, "residue_theorem": 212, "neighborhood": 213, "rim": 213, "conditionset": [213, 224, 225, 283], "affirm": 213, "infimum": 213, "imageset": [213, 224, 283], "is_clos": 213, "closed": 213, "is_disjoint": 213, "r758": 213, "disjoint_set": 213, "is_open": 213, "is_proper_subset": 213, "is_proper_superset": 213, "left_open": 213, "is_superset": 213, "isdisjoint": 213, "issubset": 213, "issuperset": 213, "productset": [213, 224], "powerset": 213, "fancyset": 213, "complexregion": [213, 224], "disjointunion": 213, "lebesgu": 213, "r759": 213, "power_set": 213, "symmetric_differ": 213, "r760": 213, "right_open": 213, "mpi": 213, "r761": 213, "interval_": 213, "as_rel": 213, "is_left_unbound": 213, "is_right_unbound": 213, "r762": 213, "r763": 213, "union_": 213, "28set_theori": 213, "r764": 213, "intersection_": 213, "coin": [213, 225], "r765": 213, "cartesian_product": 213, "is_iter": 213, "r766": 213, "complementset": 213, "r767": 213, "disjoint_union": 213, "r768": 213, "empty_set": 213, "r769": 213, "universal_set": 213, "flambda": 213, "square_iter": 213, "base_set": 213, "cartesiancomplexregion": 213, "polarcomplexregion": 213, "unit_disk": 213, "upper_half_unit_disk": 213, "a_interv": 213, "b_interv": 213, "from_real": 213, "pset": 213, "rset": 213, "thetaset": 213, "upper_half_plan": 213, "normalize_theta_set": 213, "r770": 213, "r771": 213, "axiom_of_power_set": 213, "sin_sol": 213, "r772": 213, "element_": 213, "varnoth": 213, "tr0": 214, "tr1": 214, "tr2": 214, "tr2i": 214, "tr3": 214, "tr4": 214, "tr5": 214, "tr6": 214, "tr7": 214, "tr8": 214, "tr9": 214, "tr10": 214, "tr10i": 214, "tr11": 214, "tr12": 214, "tr12i": 214, "tr13": 214, "trmorri": 214, "tr14": 214, "tr15": 214, "tr16": 214, "tr22": 214, "tr111": 214, "ctr1": 214, "ctr4": 214, "rl1": 214, "rl2": 214, "deem": 214, "932": 214, "016": 214, "serendipit": 214, "dead": 214, "newa": 214, "lucki": 214, "sqt": 214, "_tr56": 214, "un": [214, 215], "r773": 214, "morri": 214, "27s_law": 214, "trpower": 214, "r774": 214, "list_of_trigonometric_ident": 214, "reduction_formula": 214, "ctr2": 214, "ctr3": 214, "r775": 214, "657": 214, "2478": 214, "dimitar": 214, "vlahovski": 214, "technolog": 214, "xiuqin": 214, "zhong": 214, "zhenb": 214, "zeng": 214, "1169": 214, "1177": 214, "sosmath": 214, "trig5": 214, "symplifi": [215, 217], "roach1996": 215, "roach1997": 215, "p_q": 215, "reachabl": [215, 225], "f_q": 215, "undo": [215, 282], "whenc": 215, "game": 215, "twofold": 215, "incongru": 215, "wlog": 215, "alpha_r": 215, "beta_r": 215, "blindli": 215, "messi": 215, "k_u": 215, "l_v": 215, "k_j": 215, "c_w": 215, "r_j": 215, "l_u": 215, "res_": 215, "delta_i": 215, "add_formula": 215, "addb": 215, "sum_0": 215, "test_hyperexpand": 215, "test_formula": 215, "typo": 215, "suboptim": 215, "imath": 215, "b1prime": 215, "vital": [215, 225], "308": 215, "hongguang": [216, 262], "fu": [216, 217, 262], "unmodifi": 217, "my_measur": 217, "boolian": 217, "nthroot": 217, "max_len": 217, "surd": 217, "kroneckersimp": 217, "besselsimp": 217, "strigonometr": 217, "399": 217, "hypersimilar": 217, "rational_convers": 217, "base10": 217, "6004799503160655": 217, "eq_x": 217, "max_term": 217, "collect_sqrt": 217, "polish": 217, "rad_ration": 217, "collect_const": 217, "rcollect": 217, "analyz": [217, 230], "ratsimpmodprim": 217, "r776": 217, "pearc": 217, "163": 217, "6984": 217, "trigsimp_groebn": 217, "bb1": 217, "be1": 217, "bb2": 217, "be2": 217, "bei": 217, "sqrtdenest": 217, "max_it": 217, "unrad": [217, 223], "r777": 217, "ibm": 217, "fagin": 217, "symb85": 217, "r778": 217, "cybertest": 217, "opt_sub": 217, "as_unevaluated_bas": 217, "tree_cs": 217, "hyperegeometr": 217, "epathtool": 217, "epath": 217, "ebnf": 217, "za": [217, 225], "xml": 217, "xpath": 217, "hasattr": [217, 239], "diophantu": 218, "mathematician": [218, 224], "citi": 218, "alexandria": 218, "father": 218, "hi": 218, "arithmetica": 218, "a_1x_1": 218, "a_2x_2": 218, "a_nx_n": 218, "bxy": 218, "cy": 218, "dxy": 218, "eyz": 218, "fzx": 218, "pythagorean": 218, "diop_solv": 218, "classify_diop": 218, "diop_linear": 218, "diop_quadrat": 218, "diop_ternary_quadrat": 218, "diop_ternary_quadratic_norm": 218, "diop_general_pythagorean": 218, "diop_general_sum_of_squar": 218, "diop_general_sum_of_even_pow": 218, "merge_solut": 218, "3y": 218, "4ac": 218, "9369318": 218, "find_dn": 218, "diop_dn": 218, "transformation_to_dn": 218, "920": 218, "5y": 218, "BY": 218, "transformation_to_norm": 218, "t4": 218, "t5": 218, "sum_of_squar": 218, "providean": 218, "eqyptian": 218, "thilinaatsympi": 218, "andreescu": 218, "titu": 218, "andrica": 218, "dorin": 218, "cucurezeanu": 218, "ion": 218, "diophantineequ": 218, "alpertron": 218, "20160323033111": 218, "jpr2718": 218, "ax2p": 218, "permute_sign": [218, 243], "signed_permut": [218, 243], "_dict": 218, "base_solution_linear": 218, "r779": 218, "r780": 218, "pell": 218, "lmm": 218, "r781": 218, "393": 218, "13y": 218, "986": 218, "49299": 218, "1570": 218, "diop_bf_dn": 218, "robertson": 218, "20160323033128": 218, "cornacchia": 218, "r782": 218, "nitaj": 218, "r783": 218, "numbertheori": 218, "r784": 218, "r785": 218, "676": 218, "884": 218, "fxz": 218, "3xy": 218, "r786": 218, "fxy": 218, "gyz": 218, "hxz": 218, "r787": 218, "cremona": 218, "rusin": 218, "2x_": 218, "m4": 218, "general_sum_of_squar": 218, "8m": 218, "r788": 218, "2345": 218, "proofwiki": 218, "integer_as_sum_of_three_squar": 218, "general_sum_of_even_pow": 218, "power_represent": 218, "1729": 218, "stopiter": 218, "sum_of_three_squar": 218, "r789": 218, "44542": 218, "207": 218, "schorn": 218, "sum_of_four_squar": 218, "3456": 218, "1294585930293": 218, "2161": 218, "1137796": 218, "r790": 218, "sum_of_pow": 218, "evenli": 218, "var_t": 218, "pqa": 218, "r791": 218, "ur": 218, "dv": 218, "vr": 218, "r792": 218, "parametrize_ternary_quadrat": 218, "r793": 218, "nigel": 218, "ldescent": 218, "y_0": [218, 221], "4x": [218, 224, 271], "5x": 218, "r794": 218, "r795": 218, "eprint": 218, "nottingham": 218, "uk": 218, "kvxefz87": 218, "gaussian_reduc": 218, "r796": 218, "cuhk": 218, "hk": 218, "wkshum": 218, "404": 218, "r797": 218, "holzer": 218, "mordel": 218, "r798": 218, "r799": 218, "prime_as_sum_of_two_squar": 218, "r800": 218, "sqf_normal": 218, "r801": 218, "legrang": 218, "csusm": 218, "aitken_html": 218, "diophantinesolutionset": 218, "symbols_seq": 218, "dict_iter": 218, "diophantineequationtyp": 218, "binaryquadrat": 218, "r802": 218, "r803": 218, "inhomogeneousternaryquadrat": 218, "inhomogen": [218, 221, 223], "homogeneousternaryquadraticnorm": 218, "homogeneousternaryquadrat": 218, "inhomogeneousgeneralquadrat": 218, "homogeneousgeneralquadrat": 218, "generalsumofsquar": 218, "r804": 218, "generalpythagorean": 218, "cubicthu": 218, "thue": 218, "generalsumofevenpow": 218, "pde": [219, 221, 262], "subcategori": [220, 261], "solve_rational_inequ": 220, "solve_poly_inequ": 220, "reduce_rational_inequ": 220, "reduce_abs_inequ": 220, "solve_univariate_inequ": [220, 224], "solvifi": [220, 224], "autodetect": [221, 222], "classify_od": 221, "odesimp": 221, "ode_ord": [221, 222, 223], "deutil": [221, 222], "best_hint": 221, "all_integr": [221, 222], "_integr": [221, 222], "unevaluat": 221, "test_od": 221, "ode_": 221, "hintnam": [221, 222], "classify_sysod": 221, "almost_linear": 221, "dsolve_system": 221, "ode_hintnam": 221, "allhint": [221, 222], "tough": 221, "nth_linear_homogeneous_constant_coeff_integr": 221, "1st_linear": 221, "nth_linear": 221, "indep": 221, "indep_div_dep": 221, "undetermined_coeffici": 221, "_best": 221, "nth_algebra": 221, "1st_homogeneous_coeff_best": 221, "1st_homogeneous_coeff_subs_indep_div_dep": 221, "1st_homogeneous_coeff_subs_dep_div_indep": 221, "1st_power_seri": 221, "lie_group": 221, "nth_linear_constant_coeff_homogen": 221, "nth_linear_euler_eq_homogen": 221, "nth_algebraic_integr": 221, "separable_integr": 221, "1st_exact_integr": 221, "1st_linear_integr": 221, "bernoulli_integr": 221, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 221, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 221, "nth_linear_constant_coeff_undetermined_coeffici": 221, "nth_linear_constant_coeff_variation_of_paramet": 221, "nth_linear_constant_coeff_variation_of_parameters_integr": 221, "checkodesol": 221, "solve_for_func": [221, 222], "homogeneouscoeffsubsdepdivindep": 221, "homogeneouscoeffsubsindepdivdep": 221, "varepsilon": 221, "genform": [221, 222], "starrett": 221, "checkinfsol": 221, "constantsimp": 221, "symbolnam": 221, "startnumb": 221, "endnumb": 221, "renumb": 221, "absorpt": 221, "assist": 221, "constant_renumb": 221, "1st_rational_riccati": 221, "riccati_special_minus2": 221, "linear_coeffici": 221, "separable_reduc": 221, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 221, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 221, "liouvil": 221, "2nd_linear_airi": 221, "2nd_linear_bessel": 221, "2nd_hypergeometr": 221, "2nd_hypergeometric_integr": 221, "nth_order_reduc": 221, "2nd_power_series_ordinari": 221, "2nd_power_series_regular": 221, "almost_linear_integr": 221, "linear_coefficients_integr": 221, "separable_reduced_integr": 221, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 221, "liouville_integr": 221, "2nd_nonlinear_autonomous_conserv": 221, "2nd_nonlinear_autonomous_conserved_integr": 221, "newconst": 221, "ode_sol_simpl": 221, "trysolv": 221, "sola": 221, "solb": 221, "listofsolut": 221, "ode_problem": 221, "firstexact": 221, "exact_differential_equ": 221, "tenenbaum": 221, "dover": 221, "1963": 221, "homogeneouscoeffbest": 221, "ode_1st_homogeneous_coeff_best_integr": 221, "homogeneous_differential_equ": 221, "firstlinear": 221, "linear_differential_equ": 221, "first_order_equ": 221, "rationalriccati": 221, "atleast": 221, "riccati_equ": 221, "thieu": 221, "vo": 221, "www3": [221, 250], "risc_5387": 221, "phdthesisthieu": 221, "secondlinearairi": 221, "secondlinearbessel": 221, "math24": 221, "bernoulli_differential_equ": 221, "goldstein": 221, "braun": 221, "maplesoft": 221, "aspx": 221, "odeadvisor": 221, "riccatispeci": 221, "__________________": 221, "eqworld": 221, "ipmnet": 221, "ru": 221, "ode0106": 221, "ode0123": 221, "nthlinearconstantcoeffhomogen": 221, "nth_linear_constant_coeff_homogeneous_integr": 221, "nonhomogeneous_equation_with_constant_coeffici": 221, "nthlinearconstantcoeffundeterminedcoeffici": 221, "method_of_undetermined_coeffici": 221, "221": 221, "nthlinearconstantcoeffvariationofparamet": 221, "cramer": 221, "variation_of_paramet": 221, "planetmath": 221, "variationofparamet": 221, "nthlineareulereqhomogen": 221, "equidimension": 221, "nth_linear_euler_eq_homogeneous_integr": 221, "sollist": 221, "93euler_equ": 221, "bender": 221, "orszag": 221, "scientist": 221, "nthlineareulereqnonhomogeneousvariationofparamet": 221, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 221, "nthalgebra": 221, "nthorderreduc": 221, "caught": 221, "fault": 221, "almostlinear": 221, "first_linear": 221, "joel": 221, "mose": 221, "stormi": 221, "decad": 221, "august": [221, 240], "558": 221, "linearcoeffici": 221, "separablereduc": 221, "liegroup": 221, "secondhypergeometr": 221, "2f1": 221, "1f1": 221, "0f1": 221, "liouvillian": 221, "pfq": 221, "chan": 221, "cheb": 221, "terrab": 221, "ode_1st_power_seri": 221, "travi": [221, 236], "walker": 221, "ode_2nd_power_series_ordinari": 221, "lamar": 221, "seriessolut": 221, "simmon": 221, "176": 221, "ode_2nd_power_series_regular": 221, "lie_heuristic_abaco1_simpl": 221, "duart": 221, "da": 221, "mota": 221, "lie_heuristic_abaco1_product": 221, "roch": 221, "lie_heuristic_bivari": 221, "329": 221, "lie_heuristic_chi": 221, "lie_heuristic_abaco2_similar": 221, "lie_heuristic_function_sum": 221, "lie_heuristic_abaco2_unique_unknown": 221, "lie_heuristic_abaco2_unique_gener": 221, "lie_heuristic_linear": 221, "gy": 221, "bh": 221, "impract": 221, "riccati_norm": 221, "riccati_inverse_norm": 221, "riccati_reduc": 221, "construct_c": 221, "construct_d": 221, "val_inf": 221, "valuat": 221, "rational_laurent_seri": 221, "compute_m_ybar": 221, "ybar": 221, "solve_aux_eq": 221, "numa": 221, "dena": 221, "numi": 221, "deni": 221, "remove_redundant_sol": 221, "sol1": 221, "sol2": 221, "get_gen_sol_from_part_sol": 221, "part_sol": 221, "haaheim": 221, "solve_riccati": 221, "gensol": 221, "_linear_2eq_order1_type6": 221, "_linear_2eq_order1_type7": 221, "fgp": 221, "ag": 221, "bg": 221, "linear_ode_to_matrix": 221, "odeordererror": 221, "odenonlinearerror": 221, "eqs_mat": 221, "linear_eq_to_matrix": [221, 224], "r805": 221, "matrix_differential_equ": 221, "canonical_od": 221, "canonical_eq": 221, "canonical_system": 221, "linodesolve_typ": 221, "linodesolv": 221, "type1": 221, "type2": 221, "type3": 221, "type4": 221, "type5": 221, "type6": 221, "type_of_equ": 221, "a_t": 221, "a_non_commut": 221, "matrix_exp_jordan_form": 221, "expj": 221, "matrix_exp": 221, "defect": 221, "p_invers": 221, "r806": 221, "defective_matrix": 221, "r807": 221, "r808": 221, "jordan_normal_form": 221, "comupt": 221, "r809": 221, "r810": 221, "matrix_exponenti": 221, "follw": 221, "antiderv": 221, "subscheck": 221, "system_info": 221, "sol_vector": 221, "sol_vector_evalu": 221, "_nonlinear_2eq_order1_type1": 221, "_nonlinear_2eq_order1_type2": 221, "_nonlinear_2eq_order1_type3": 221, "autonom": 221, "_nonlinear_2eq_order1_type4": 221, "_nonlinear_2eq_order1_type5": 221, "clairaut": 221, "envelop": 221, "_nonlinear_3eq_order1_type1": 221, "enspac": [221, 224], "sysod": 221, "sode0401": 221, "_nonlinear_3eq_order1_type2": 221, "sode0402": 221, "_nonlinear_3eq_order1_type3": 221, "sode0404": 221, "_nonlinear_3eq_order1_type4": 221, "sode0405": 221, "_nonlinear_3eq_order1_type5": 221, "sode0406": 221, "_handle_integr": 221, "gather": 221, "unhind": 221, "wolphramalpha": 221, "detool": 221, "hint_integr": 221, "alphanumer": 221, "hinder": 221, "matching_hint": 221, "matchdict": 221, "1st_homogeneous_coeff": 221, "your_hint": 221, "xfail": [221, 234, 236], "pde_separ": 222, "uxt": 222, "pde_separate_add": 222, "pde_separate_mul": 222, "uxi": 222, "pdsolv": 222, "solvefun": 222, "classify_pd": 222, "test_pd": 222, "pde_hintnam": 222, "ux": 222, "1st_linear_constant_coeff_homogen": 222, "checkpdesol": 222, "_preprocess": 222, "inabl": 222, "_xi_1": 222, "pde_1st_linear_constant_coeff_homogen": 222, "viktor": 222, "grigoryan": 222, "124a": 222, "pde_1st_linear_constant_coeff": 222, "substack": 222, "1st_linear_constant_coeff_integr": 222, "pde_1st_linear_variable_coeff": 222, "du": 222, "inspir": [222, 278], "pde_hint": 222, "beginn": [223, 224, 283], "checksol": 223, "ect": 223, "attain": [223, 255], "star": 223, "052": 223, "cov": 223, "pval": 223, "xval": 223, "rsolv": 223, "solve_linear": 223, "solve_linear_system": 223, "msymbol": 223, "degener": [223, 224], "solve_linear_system_lu": 223, "solve_undetermined_coeff": 223, "equ": 223, "73908513321516064165531208767387340401341175890076": 223, "steep": 223, "39267e": 223, "1684e": 223, "588469032184": 223, "315": 223, "730061685774": 223, "46792545969349058": 223, "inconclus": 223, "init": 223, "dissimilar": 223, "v_0": 223, "n_m": 223, "v_m": 223, "rsolve_poli": 223, "rsolve_ratio": 223, "r811": 223, "levelt": 223, "290": [223, 253], "296": 223, "r812": 223, "r813": 223, "revis": 223, "r814": 223, "289": 223, "alembertian": 223, "r815": 223, "r816": 223, "polysi": 223, "solve_triangul": 223, "kalkbrenn": 223, "patrizia": 223, "teo": 223, "aaecc": 223, "argand": 224, "uncount": 224, "bizarr": 224, "her": 224, "sol_f": 224, "solveset_r": 224, "solveset_complex": 224, "methodologi": [224, 275], "_solve_real_trig": 224, "invert_r": 224, "invert_complex": 224, "_solve_rad": 224, "_solve_ab": 224, "_solve_as_r": 224, "_solve_as_poly_r": 224, "_solve_as_poly_complex": 224, "_solve_as_poli": 224, "gsoc": 224, "2014": [224, 225], "iamit": 224, "2948": 224, "6659": 224, "7523": 224, "sibx0afl3q": 224, "9696": 224, "27s_theorem": 224, "inftyright": 224, "nright": 224, "0right": 224, "domain_check": 224, "3z": 224, "9z": 224, "nonlinearerror": 224, "cccc": 224, "eq3": 224, "eq4": 224, "391": 224, "_solve_system": 224, "_solve_using_known_valu": 224, "_transolv": 224, "_tsolv": 224, "tsolv": 224, "outright": 224, "tractabl": 224, "interf": 224, "add_typ": 224, "_is_exponenti": 224, "new_eq": 224, "_solve_exponenti": 224, "_is_class": 224, "_solve_class": 224, "_solve_expo": 224, "9x": 224, "solve_expo": 224, "log_b": 224, "_solve_logarithm": 224, "solve_log": 224, "_is_logarithm": 224, "prebuilt": 225, "finiterv": 225, "varianc": 225, "dice": 225, "continuousrv": 225, "continuousdistributionhandmad": 225, "dist": 225, "discreterv": 225, "discretedistributionhandmad": 225, "pmf": 225, "finitedistributionhandmad": 225, "discreteuniform": 225, "randomsymbol": 225, "r817": 225, "discrete_uniform_distribut": 225, "r818": 225, "discreteuniformdistribut": 225, "d6": 225, "diedistribut": 225, "toss": 225, "r819": 225, "bernoulli_distribut": 225, "r820": 225, "bernoullidistribut": 225, "numeb": 225, "unfair": 225, "r821": 225, "coin_flip": 225, "binomialdistribut": 225, "r822": 225, "binomial_distribut": 225, "r823": 225, "betabinomi": 225, "r824": 225, "r825": 225, "betabinomialdistribut": 225, "popul": 225, "marbl": 225, "r826": 225, "hypergeometric_distribut": 225, "r827": 225, "hypergeometricdistribut": 225, "700000000000000": 225, "r828": 225, "rademacher_distribut": 225, "r829": 225, "geometric_distribut": 225, "r830": 225, "geometricdistribut": 225, "r831": 225, "hermite_distribut": 225, "poisson": 225, "r832": 225, "poisson_distribut": 225, "r833": 225, "poissondistribut": 225, "r834": 225, "logarithmic_distribut": 225, "r835": 225, "logarithmicdistribut": 225, "negativebinomi": 225, "r836": 225, "negative_binomial_distribut": 225, "r837": 225, "negativebinomialdistribut": 225, "skellam": 225, "mu1": 225, "mu2": 225, "mu_1": 225, "mu_2": 225, "i_k": 225, "r838": 225, "skellam_distribut": 225, "yulesimon": 225, "yule": 225, "simon": 225, "r839": 225, "93simon_distribut": 225, "8100": 225, "r840": 225, "zeta_distribut": 225, "cdf": 225, "r841": 225, "arcsine_distribut": 225, "benini": 225, "r842": 225, "benini_distribut": 225, "r843": 225, "v8": 225, "beninidistribut": 225, "r844": 225, "beta_distribut": 225, "r845": 225, "betadistribut": 225, "betanoncentr": 225, "noncentr": 225, "r846": 225, "noncentral_beta_distribut": 225, "r847": 225, "noncentralbetadistribut": 225, "betaprim": 225, "r848": 225, "beta_prime_distribut": 225, "r849": 225, "betaprimedistribut": 225, "boundedpareto": 225, "pareto": 225, "r850": 225, "pareto_distribut": 225, "bounded_pareto_distribut": 225, "r851": 225, "cauchy_distribut": 225, "r852": 225, "cauchydistribut": 225, "r853": 225, "chi_distribut": 225, "r854": 225, "chidistribut": 225, "chinoncentr": 225, "r855": 225, "noncentral_chi_distribut": 225, "chisquar": 225, "r856": 225, "chi_squared_distribut": 225, "r857": 225, "squareddistribut": 225, "dagum": 225, "r858": 225, "dagum_distribut": 225, "erlang": 225, "r859": 225, "erlang_distribut": 225, "r860": 225, "erlangdistribut": 225, "exgaussian": 225, "emg": 225, "r861": 225, "exponentially_modified_gaussian_distribut": 225, "quantil": 225, "r862": 225, "exponential_distribut": 225, "r863": 225, "exponentialdistribut": 225, "fdistribut": 225, "______________________________": 225, "r864": 225, "r865": 225, "fisherz": 225, "fisher": 225, "2d_1": 225, "d_1z": 225, "d_1e": 225, "r866": 225, "27s_z": 225, "r867": 225, "fishersz": 225, "frechet": 225, "r868": 225, "a9chet_distribut": 225, "r869": 225, "gamma_distribut": 225, "r870": 225, "gammadistribut": 225, "gammainvers": 225, "r871": 225, "gompertz": 225, "r872": 225, "gompertz_distribut": 225, "gumbel": 225, "dfrac": 225, "r873": 225, "gumbeldistribut": 225, "r874": 225, "gumbel_distribut": 225, "r875": 225, "mathwav": 225, "easyfit": 225, "gumbel_max": 225, "r876": 225, "gumbel_min": 225, "kumaraswami": 225, "r877": 225, "kumaraswamy_distribut": 225, "r878": 225, "laplace_distribut": 225, "r879": 225, "laplacedistribut": 225, "r880": 225, "a9vy_distribut": 225, "r881": 225, "levydistribut": 225, "logist": 225, "r882": 225, "logistic_distribut": 225, "r883": 225, "logisticdistribut": 225, "loglogist": 225, "unimod": 225, "r884": 225, "lognorm": 225, "r885": 225, "r886": 225, "lognormaldistribut": 225, "lomax": 225, "r887": 225, "lomax_distribut": 225, "maxwel": 225, "2a": 225, "r888": 225, "maxwell_distribut": 225, "r889": 225, "maxwelldistribut": 225, "moyal": 225, "r890": 225, "moyaldistribut": 225, "r891": 225, "rice": 225, "dobelman": 225, "textfil": 225, "distributionshandbook": 225, "nakagami": 225, "r892": 225, "nakagami_distribut": 225, "marginal_distribut": 225, "r893": 225, "normal_distribut": 225, "r894": 225, "normaldistributionfunct": 225, "xm": 225, "x_m": 225, "r895": 225, "r896": 225, "paretodistribut": 225, "powerfunct": 225, "paramat": 225, "r897": 225, "power_func": 225, "quadraticu": 225, "r898": 225, "quadratic_distribut": 225, "raisedcosin": 225, "r899": 225, "raised_cosine_distribut": 225, "r900": 225, "rayleigh_distribut": 225, "r901": 225, "rayleighdistribut": 225, "r902": 225, "reciprocal_distribut": 225, "studentt": 225, "r903": 225, "student_t": 225, "r904": 225, "studentst": 225, "shiftedgompertz": 225, "r905": 225, "shifted_gompertz_distribut": 225, "r906": 225, "trapezoidal_distribut": 225, "r907": 225, "triangular_distribut": 225, "r908": 225, "triangulardistribut": 225, "r909": 225, "uniform_distribution_": 225, "28continu": 225, "r910": 225, "uniformdistribut": 225, "uniformsum": 225, "irwin": 225, "r911": 225, "uniform_sum_distribut": 225, "r912": 225, "uniformsumdistribut": 225, "vonmis": 225, "mise": 225, "i_0": 225, "r913": 225, "von_mises_distribut": 225, "r914": 225, "vonmisesdistribut": 225, "wald": 225, "gaussianinvers": 225, "r915": 225, "inverse_gaussian_distribut": 225, "r916": 225, "inversegaussiandistribut": 225, "weibul": 225, "geq0": 225, "r917": 225, "weibull_distribut": 225, "r918": 225, "weibulldistribut": 225, "wignersemicircl": 225, "semicircl": 225, "frac2": 225, "r919": 225, "wigner_semicircle_distribut": 225, "r920": 225, "wignerssemicirclelaw": 225, "jointrv": 225, "_set": 225, "multivariatenorm": 225, "noninvert": 225, "ob": 225, "r921": 225, "multivariate_normal_distribut": 225, "multivariatelaplac": 225, "r922": 225, "multivariate_laplace_distribut": 225, "generalizedmultivariateloggamma": 225, "joint_rv_typ": 225, "gd": 225, "y_3": 225, "gmvlg": 225, "generalizedmultivariateloggammaomega": 225, "r923": 225, "generalized_multivariate_log": 225, "r924": 225, "234137346_on_a_multivariate_log": 225, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 225, "correl": 225, "gmvlgo": 225, "r925": 225, "r926": 225, "r927": 225, "multinomial_distribut": 225, "r928": 225, "multinomialdistribut": 225, "multivariatebeta": 225, "r929": 225, "dirichlet_distribut": 225, "r930": 225, "dirichletdistribut": 225, "multivariateewen": 225, "ewen": 225, "r931": 225, "27s_sampling_formula": 225, "r932": 225, "rutger": 225, "hcrane": 225, "sts529": 225, "multivariatet": 225, "negativemultinomi": 225, "n_c": 225, "r933": 225, "negative_multinomial_distribut": 225, "r934": 225, "normalgamma": 225, "r935": 225, "discretemarkovchain": 225, "state_spac": 225, "trans_prob": 225, "markov": 225, "characteris": 225, "transitionmatrixof": 225, "transition_prob": 225, "sunni": 225, "cloudi": 225, "raini": 225, "randomindexedsymbol": 225, "409": 225, "6963328": 225, "3096": 225, "query_gt": 225, "64705": 225, "r936": 225, "markov_chain": 225, "time_markov_chain": 225, "r937": 225, "dartmouth": 225, "teaching_aid": 225, "books_articl": 225, "probability_book": 225, "chapter11": 225, "canonical_form": 225, "transient": 225, "p_new": 225, "new_matrix": 225, "communication_class": 225, "r938": 225, "onlinelibrari": 225, "wilei": 225, "1002": 225, "9780470316887": 225, "app1": 225, "r939": 225, "columbia": 225, "ww2040": 225, "6711f12": 225, "lect1023big": 225, "is_recurr": 225, "tarjan": [225, 243], "r940": 225, "4701sum07": 225, "4701": 225, "mcii": 225, "r941": 225, "ceca": 225, "clemson": 225, "shierd": 225, "shier": 225, "r942": 225, "ujcont": 225, "uj": 225, "7506": 225, "content1": 225, "r943": 225, "econ": 225, "dtmc": 225, "reccur": 225, "r944": 225, "absorbing_markov_chain": 225, "r945": 225, "brandei": 225, "igusa": 225, "math56as08": 225, "math56a_s08_notes015": 225, "fixed_row_vector": 225, "stationary_distribut": 225, "fundamental_matrix": 225, "r946": 225, "lip": 225, "limiting_distribut": 225, "condition_set": 225, "wm": 225, "r947": 225, "probabilitycours": 225, "11_2_6_stationary_and_limiting_distribut": 225, "r948": 225, "galton": 225, "uchicago": 225, "yibi": 225, "stat317": 225, "lecture4_6up": 225, "continuousmarkovchain": 225, "gen_mat": 225, "generator_matrix": 225, "45279": 225, "58602": 225, "37933": 225, "34211": 225, "7143": 225, "4002723175": 225, "6832579186": 225, "r949": 225, "r950": 225, "biu": 225, "il": 225, "amirgi": 225, "ctmcnote": 225, "bernoulliprocess": 225, "processs": 225, "joint_distribut": 225, "jointdistributionhandmad": 225, "r951": 225, "bernoulli_process": 225, "r952": 225, "mathc": 225, "clarku": 225, "djoyc": 225, "ma217": 225, "given_condit": 225, "poissonprocess": 225, "648": 225, "r953": 225, "11_0_0_intro": 225, "r954": 225, "poisson_point_process": 225, "wiener": 225, "brownian": 225, "scottish": 225, "botanist": 225, "r955": 225, "11_4_0_brownian_motion_wiener_process": 225, "r956": 225, "wiener_process": 225, "gammaprocess": 225, "jump": [225, 282], "472": 225, "r957": 225, "gamma_process": 225, "matrixgamma": 225, "scale_matrix": 225, "r958": 225, "matrix_gamma_distribut": 225, "wishart": 225, "r959": 225, "wishart_distribut": 225, "matrixnorm": 225, "location_matrix": 225, "scale_matrix_1": 225, "scale_matrix_2": 225, "r960": 225, "matrix_normal_distribut": 225, "compound_rv": 225, "compounddistribut": 225, "crv_type": 225, "r961": 225, "compound_probability_distribut": 225, "numsampl": 225, "evaluate_integr": 225, "r962": 225, "entropy_": 225, "information_theori": 225, "r963": 225, "crmarsh": 225, "charles_marsh_continuous_entropi": 225, "r964": 225, "uconn": 225, "kconrad": 225, "blurb": 225, "entropypost": 225, "arg1": 225, "arg2": 225, "cexpr": 225, "coskew": 225, "sigma_": 225, "r965": 225, "r966": 225, "probability_distribut": 225, "randomst": 225, "die_rol": 225, "samp": 225, "pspace": 225, "samp_list": 225, "sam": 225, "42519758": 225, "40207856": 225, "94991743": 225, "85819627": 225, "83403519": 225, "9412172": 225, "85768055": 225, "38954165": 225, "11163337": 225, "3176591": 225, "79115232": 225, "63232916": 225, "01747268": 225, "96716083": 225, "sampling_p": 225, "sampling_": 225, "factorial_mo": 225, "r967": 225, "r968": 225, "factorialmo": 225, "kurtosi": 225, "outlier": 225, "sigma_x": 225, "r969": 225, "r970": 225, "asymmetri": 225, "pearson": 225, "sampling_dens": 225, "centralmo": 225, "cmoment": 225, "expectationmatrix": 225, "randommatrixsymbol": 225, "n11": 225, "n12": 225, "n21": 225, "n22": 225, "variancematrix": 225, "crosscovariancematrix": 225, "randomdomain": 225, "singledomain": 225, "singlepspac": 225, "productdomain": 225, "productpspac": 225, "conditionaldomain": 225, "frv": 225, "finitedomain": 225, "finitepspac": 225, "crv": 225, "continuousdomain": 225, "continuouspspac": 225, "diepspac": 225, "singlefinitepspac": 225, "normalpspac": 225, "singlecontinuouspspac": 225, "frv_type": 225, "randomvari": 225, "tactic": 225, "random_symbol": 225, "rs_swap": 225, "pspace1": 225, "pspace2": 225, "immutabledensendimarrai": 226, "tomatrix": 226, "j_m": 226, "i_a": 226, "i_b": 226, "sum_k": 226, "tensorcontract": [226, 227], "tensordiagon": [226, 227], "derive_by_arrai": 226, "sum_m": 226, "immutablesparsendimarrai": 226, "mutabledensendimarrai": 226, "mutablesparsendimarrai": 226, "index_order_old": 226, "index_order_new": 226, "cab": 226, "contraction_ax": 226, "diagonal_ax": 226, "arraycontract": 227, "arraydiagon": 227, "arraysymbol": 227, "convert_indexed_to_arrai": 227, "arrayadd": 227, "convert_matrix_to_arrai": 227, "convert_array_to_matrix": 227, "expr_tr": 227, "array_der": 227, "index_method": 229, "get_contraction_structur": [229, 230], "deepest": 229, "nested_contract": 229, "get_indic": [229, 230, 231, 232], "indexconformanceexcept": 229, "______": 230, "stem": 230, "dim1": 230, "dim2": 230, "qwerti": 230, "a_ij": 230, "b_ij": 230, "syntact": 230, "a_real": 230, "c_inherit": 230, "c_explicit": 230, "unrol": 230, "tensorindextyp": [231, 232], "eps_dim": 231, "metric_nam": 231, "su": 231, "lorentz": 231, "tensor_index_typ": 231, "is_up": 231, "tensor_inde_typ": 231, "typ": 231, "tensorhead": [231, 232], "index_typ": 231, "tensorsymmetri": 231, "monoterm": 231, "_tensormanag": 231, "set_comm": 231, "asym2": 231, "fully_symmetr": 231, "tensori": [231, 232], "e_z": 231, "no_symmetri": 231, "p_x": 231, "p_y": 231, "p_z": 231, "ipos1": 231, "ipos2": 231, "icomp1": 231, "icomp2": 231, "nameless": 231, "replacement_dict": 231, "free_arg": 231, "addend": 231, "canon_bp": 231, "contract_metr": 231, "contract_al": 231, "ipo": 231, "icomp": 231, "nonrep": 231, "dum": 231, "ext_rank": 231, "is_canon_bp": 231, "get_free_indic": [231, 232], "perm2tensor": 231, "tid": 231, "sorted_compon": 231, "riemann_cyclic_replac": 231, "riemann_cycl": 231, "cadabra": 231, "multiterm": 231, "bianchi": 231, "sym2": 231, "direct_product": 231, "monotorem": 231, "tableaux": 231, "tensortyp": 231, "repetit": [231, 243], "tensormanag": 231, "comm_i2symbol": 231, "comm_symbols2i": 231, "get_comm": 231, "gcomm": 231, "ghcomm": 231, "toper": 232, "partialderiv": 232, "valenc": 232, "uncontract": 232, "compa": 232, "compb": 232, "derivand": 232, "xpass": [234, 236], "nocache_fail": 234, "expectedexcept": 234, "assertionerror": 234, "exceptioninfo": 234, "abort": 234, "9999": 234, "warningcl": [234, 241], "test_stacklevel": 234, "randtest": 235, "portabl": [236, 237], "pytestreport": 236, "force_color": 236, "readlin": 236, "sympydoctestfind": 236, "doctestpars": 236, "exclude_empti": 236, "sympydoctestrunn": 236, "checker": 236, "optionflag": 236, "5140": 236, "doctestrunn": 236, "clear_glob": 236, "writer": 236, "garbag": 236, "check_output": 236, "report_": 236, "sympyoutputcheck": 236, "outputcheck": 236, "stdlib": 236, "testrunn": 236, "sympytestresult": 236, "convert_to_native_path": 236, "lst": 236, "blacklist": 236, "get_sympy_dir": 236, "raise_on_deprec": 236, "deprecationwarn": [236, 241], "run_all_test": 236, "test_arg": 236, "test_kwarg": 236, "doctest_arg": 236, "doctest_kwarg": 236, "examples_arg": 236, "examples_kwarg": 236, "run_in_subprocess_with_hash_random": 236, "function_kwarg": 236, "virtualenv": 236, "pythonhashse": 236, "_test": 236, "split_list": 236, "sympytestfil": 236, "module_rel": 236, "extraglob": 236, "raise_on_error": 236, "basenam": [236, 237, 238], "slate": 236, "dont_accept_true_for_1": 236, "dont_accept_blanklin": 236, "normalize_whitespac": 236, "ellipsi": 236, "ignore_exception_detail": 236, "report_udiff": 236, "report_cdiff": 236, "report_ndiff": 236, "report_only_first_failur": 236, "mortem": 236, "tomfooleri": 236, "testmod": 236, "tester": 236, "fiddl": [236, 282], "timeout": 236, "keyboardinterrupt": 236, "interrupt": 236, "_basic": 236, "kw": 236, "test_equ": 236, "pdb": 236, "pipe": 236, "time_bal": 236, "tandem": 237, "matvec": 237, "codewrapp": 237, "distutil": 237, "fwrap": 237, "swig": 237, "binary_cal": 237, "22925376": 237, "25165824": 237, "_imp_": [237, 244], "filepath": 237, "cythoncodewrapp": 237, "dump_pyx": 237, "dummywrapp": 237, "f2pycodewrapp": 237, "ufuncifycodewrapp": 237, "dump_c": [237, 238], "funcnam": 237, "code_gen": [237, 238], "argument_tupl": 237, "include_dir": 237, "library_dir": 237, "extra_compile_arg": 237, "extra_link_arg": 237, "symfunc": [237, 244], "funtion_nam": 237, "ndimension": 237, "f_fortran": 237, "f_cython": 237, "r971": 237, "fortran77": 238, "fortran90": 238, "julia": 238, "rust": 238, "mileston": 238, "unsurmount": 238, "pyf": 238, "inputoutput": 238, "tcc": 238, "libtcc": 238, "date": 238, "hostnam": 238, "sha1": 238, "ccodegen": 238, "preprocessor_stat": 238, "dump_h": 238, "guard": 238, "get_prototyp": 238, "codegenerror": 238, "function_prototyp": 238, "dump_cod": 238, "cname": 238, "fname": 238, "pynam": 238, "jlname": 238, "octnam": 238, "rsname": 238, "fcodegen": 238, "f90": 238, "dump_f95": 238, "get_interfac": 238, "juliacodegen": 238, "dump_jl": 238, "octavecodegen": 238, "dump_m": 238, "returnvalu": 238, "destin": 238, "local_var": 238, "result_vari": 238, "ot": 238, "unnam": 238, "rustcodegen": 238, "dump_r": 238, "f_result": 238, "myfcn": 238, "fcn2": 238, "myfcn_result": 238, "void": 238, "get_default_datatyp": 238, "complex_allow": 238, "agnost": 238, "conserve_mpmath_dp": 239, "doctest_depends_on": 239, "disable_view": 239, "python_vers": 239, "memoize_properti": 239, "propfunc": 239, "no_attrs_in_subclass": 239, "__all__": 239, "some_funct": 239, "thread": 239, "xthread": 239, "threaded_factori": 239, "use_add": 239, "multiset_partitions_taocp": 240, "visitor": 240, "pstack": 240, "lpart": 240, "topmost": 240, "partcompon": 240, "peek": [240, 282], "unpredict": 240, "list_visitor": 240, "abb": [240, 243], "factoring_visitor": 240, "multisetpartitiontravers": 240, "aocp": 240, "count_partit": 240, "127750": 240, "686": 240, "4a": 240, "factorisatio": 240, "oppenheim": 240, "numerorum": 240, "canfield": 240, "erdo": 240, "OF": 240, "yorgei": 240, "monad": 240, "persist": 240, "288716": 240, "memoiz": [240, 242, 269], "dramat": 240, "hypothet": 240, "borrow": 240, "coalesc": 240, "_rang": 240, "stretch": 240, "brain": 240, "histogram": 240, "enum_al": 240, "enum_larg": 240, "enum_rang": 240, "enum_smal": 240, "ub": 240, "parti": 241, "catch_warn": 241, "simplefilt": 241, "dedent": [241, 246], "enum": [242, 269], "miscellan": [242, 269], "pkgdata": [242, 269], "notiter": 243, "binary_partit": 243, "r972": 243, "taocp": 243, "nx": 243, "common_prefix": 243, "common_suffix": 243, "unhash": 243, "r973": 243, "connected_component_": 243, "graph_theori": 243, "r974": 243, "27s_strongly_connected_components_algorithm": 243, "dict_merg": 243, "filter_symbol": 243, "myop": 243, "kog": 243, "informatik": 243, "hamburg": 243, "mein": 243, "python_trick": 243, "neighbor": 243, "xxxxxx": 243, "xxxx": 243, "r975": 243, "method_ring": 243, "r976": 243, "4856615": 243, "4857018": 243, "r977": 243, "programminggeek": 243, "r978": 243, "steinhau": 243, "93johnson": 243, "93trotter_algorithm": 243, "r979": 243, "involut": 243, "eco": 243, "vajnovszki": 243, "dmtc": 243, "generate_involut": 243, "r980": 243, "permutationinvolut": 243, "generate_oriented_forest": 243, "forest": 243, "acycl": 243, "r981": 243, "beyer": 243, "hedetniemi": 243, "novemb": 243, "r982": 243, "1633833": 243, "has_dup": 243, "has_varieti": 243, "iproduct": 243, "abcbb": 243, "is_sequ": 243, "generatortyp": 243, "_iter": 243, "kbin": 243, "ordered_flag": 243, "least_rot": 243, "rotate_left": 243, "r983": 243, "lexicographically_minimal_string_rot": 243, "minlex": 243, "acb": 243, "11010011000": 243, "00011010011": 243, "00011001011": 243, "aaa": 243, "abi": 243, "bby": 243, "abracadabra": 243, "banana": 243, "multiset_derang": 243, "uniq": 243, "1233": 243, "3312": 243, "3321": 243, "aba": 243, "baa": 243, "bead": 243, "ooo": 243, "r984": 243, "ordered_partit": 243, "r985": 243, "jeromekelleh": 243, "r986": 243, "jerom": 243, "kelleh": 243, "barri": 243, "sullivan": 243, "0909": 243, "2331v2": 243, "r987": 243, "activest": 243, "218332": 243, "random_derang": 243, "reseed": 243, "rotate_right": 243, "roundrobin": 243, "ef": 243, "credit": 243, "sakki": 243, "keyfunc": 243, "subgraph": 243, "r988": 243, "r989": 243, "longest": 243, "r990": 243, "unflatten": 243, "partion": 243, "bcd": 243, "afunc": 244, "lambdastr": 244, "dummifi": 244, "use_imp": 244, "custom_sin": 244, "38177329": 244, "49315059": 244, "8414709848078965": 244, "eager": 244, "enable_eager_execut": 244, "eagertensor": 244, "__class__": 244, "placehold": 244, "user_guid": 244, "runtimewarn": 244, "sin_cos_sympi": 244, "sin_co": 244, "sin_cos_numpi": 244, "38177329068": 244, "module_dictionari": 244, "_lambdifygener": 244, "__globals__": 244, "lambdaprint": 244, "90929743": [244, 271], "assoc_recurrence_memo": 245, "base_seq": 245, "memo": 245, "pn0": 245, "recurrence_memo": 245, "specfun": 245, "__index__": 246, "sanit": 246, "99999999999999991611392": 246, "debug_decor": 246, "fillded": 246, "strline": 246, "rawlin": 246, "find_execut": 246, "pathsep": 246, "pastabl": 246, "bee": 246, "spamham": 246, "sha": 246, "spam": 246, "egg": 246, "md5": 246, "eggsham": 246, "r991": 246, "6116978": 246, "roken": 246, "deletechar": 246, "multicharact": 246, "oldchar": 246, "newchar": 246, "acquir": 247, "getresourc": 247, "pkgname": 247, "pkgpath": 247, "dirnam": 247, "normpath": 247, "rb": 247, "__loader__": 247, "stringio": 247, "get_resourc": 247, "ioerror": 247, "mydata": 247, "mypkgdata": 247, "jpg": 247, "get_class": 248, "lookup_view": 248, "get_mod_func": 248, "callback": 248, "timeutil": 249, "coordsysrect": 250, "coordsys3d": [250, 252, 253, 254, 256, 257, 260], "rotation_matrix": [250, 252, 255], "vector_nam": 250, "variable_nam": [250, 257], "latex_vect": 250, "pretty_vect": 250, "latex_scalar": 250, "pretty_scalar": 250, "new_system": 250, "create_new": [250, 255], "transformation_to_par": 250, "transformation_from_par": 250, "locate_new": [250, 253, 254, 255, 256, 257], "position_wrt": [250, 254, 255, 256], "orient_new": [250, 252], "axisorient": [250, 252, 255], "axis_orient": [250, 255], "bodyorient": [250, 252, 255], "body_orient": [250, 252, 255], "spaceorient": [250, 252, 255], "space_orient": [250, 252], "quaternionorient": [250, 252, 255], "q_orient": [250, 252], "orient_new_axi": [250, 253, 255], "orient_new_bodi": [250, 255], "angle1": [250, 252], "angle2": [250, 252], "angle3": [250, 252], "euler_angl": [250, 252], "orient_new_quaternion": [250, 255], "orient_new_spac": [250, 255], "coordsyrect": 250, "v_a": 250, "v_b": 250, "scalar_map": 250, "basevector": [250, 254, 255], "delop": [250, 256, 257], "r992": 250, "r993": 250, "basedyad": [250, 254], "second_system": 250, "deloper": [250, 258], "parametricregion": [250, 253, 260], "implicitregion": [250, 253, 260], "parabola": 250, "rational_parametr": 250, "singular_point": 250, "regular_point": 250, "reg_point": 250, "implict": 250, "cubic_curv": 250, "calulc": 250, "hoffmann": 250, "purdu": 250, "lib": 250, "cgi": 250, "viewcont": 250, "1827": 250, "cstech": 250, "erik": 250, "hillgart": 250, "diploma": 250, "linz": 250, "universitat": 250, "availa": 250, "risc_1355": 250, "20point": 250, "20on": 250, "20conic": 250, "parametricintegr": 250, "semispher": [250, 260], "axis_orienter1": 252, "axis_orienter2": 252, "axis_orienter3": 252, "body_orienter1": 252, "body_orienter2": 252, "body_orienter3": 252, "matrix_to_vector": 253, "system2": 253, "vector_integr": [253, 260], "essenc": 254, "vectormul": 254, "vectoradd": 254, "ofcours": 254, "vectorzero": 254, "expressli": 254, "express_coordin": [254, 255], "dyadicmul": 254, "dyadicadd": 254, "cleanest": 255, "orient_new_": 255, "basescalar": [255, 257], "oabc": 256, "oa": 256, "pq": 256, "sr": 256, "wikidel": 256, "ffield": 256, "gradient_field": 257, "instantan": 257, "directional_deriv": 257, "lame": 257, "dyadicproduct": 258, "quantifi": 259, "throughtout": 259, "necesssari": 260, "param_circl": 260, "implicit_circl": 260, "obextj": 260, "solidspher": 260, "lamina": 260, "\ud835\udc45": 260, "cylind": 260, "vectorfield": 260, "hemispher": 260, "top_fac": 260, "bottom_fac": 260, "27_theorem": 260, "cone": 260, "divergence_theorem": 260, "12288": 260, "truss": 267, "str_expr": 271, "82842712474619": 271, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 271, "0874989834394464": 271, "roundoff": 271, "14112001": 271, "7568025": 271, "95892427": 271, "2794155": 271, "6569866": 271, "98935825": 271, "41211849": 271, "0998334166468": 271, "sympy_nam": 271, "numerical_funct": 271, "rephras": 272, "oh": 272, "integration_vari": 272, "dfdx": 272, "equidistantli": 272, "d2fdx2": 272, "django": 274, "oop": 274, "crazi": 274, "abcdef": 274, "reevalu": 274, "infal": 274, "insight": 275, "entertain": 275, "preliminari": 275, "82842712475": 276, "cass": 276, "wrote": [276, 277], "theme": 276, "expanded_expr": 276, "whet": 276, "appetit": 276, "c\u2082": [276, 283], "c\u2081": [276, 283], "\u03bd": 276, "sell": 276, "battl": 276, "confid": 276, "gigabyt": 276, "tear": 277, "dotprint": [277, 281], "stopper": 277, "uexpr": 277, "unevalutedexpr": 277, "downsid": 278, "algebraic_multipl": 278, "pdp": 278, "undertest": 278, "underevalu": 278, "my_iszero": 278, "stronger": 278, "tradeoff": 278, "wonder": 278, "5b7c3e8ee5b40332abdb206c": 278, "15141": 278, "19548": 278, "10120": 278, "10279": 278, "constant_problem": 278, "possiblezeroq": 278, "mupad_ref": 278, "iszero": 278, "congratul": 279, "decent": 280, "austin": 280, "video": 280, "javascript": 281, "bvar": 281, "unnecessarili": 282, "whittl": 282, "catchal": 282, "collected_expr": 282, "cdot1": 282, "undertak": 282, "undon": 282, "cdot2": 282, "nck": 282, "pronounc": 282, "_2f_1": 282, "cfrac": 282, "list_to_frac": 282, "a\u2080": 282, "a\u2083": 282, "a\u2084": 282, "pointless": 282, "orig_frac": 282, "diffeq": 283}, "objects": {"": [[27, 0, 0, "-", "sympy"]], "sympy": [[29, 0, 0, "-", "abc"], [30, 0, 0, "-", "algebras"], [33, 0, 0, "-", "assumptions"], [36, 0, 0, "-", "calculus"], [37, 0, 0, "-", "categories"], [58, 0, 0, "-", "diffgeom"], [59, 0, 0, "-", "discrete"], [63, 0, 0, "-", "functions"], [76, 0, 0, "-", "holonomic"], [83, 0, 0, "-", "integrals"], [84, 0, 0, "-", "interactive"], [85, 0, 0, "-", "liealgebras"], [86, 0, 0, "-", "logic"], [91, 0, 0, "-", "matrices"], [98, 0, 0, "-", "parsing"], [267, 0, 0, "-", "physics"], [201, 0, 0, "-", "polys"], [223, 0, 0, "-", "solvers"], [225, 0, 0, "-", "stats"], [228, 0, 0, "-", "tensor"], [233, 0, 0, "-", "testing"], [242, 0, 0, "-", "utilities"], [258, 0, 0, "-", "vector"]], "sympy.algebras": [[30, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[30, 2, 1, "", "add"], [30, 2, 1, "", "angle"], [30, 2, 1, "", "arc_coplanar"], [30, 2, 1, "", "axis"], [30, 2, 1, "", "exp"], [30, 2, 1, "", "from_axis_angle"], [30, 2, 1, "", "from_rotation_matrix"], [30, 2, 1, "", "index_vector"], [30, 2, 1, "", "integrate"], [30, 2, 1, "", "inverse"], [30, 2, 1, "", "is_pure"], [30, 2, 1, "", "is_zero_quaternion"], [30, 2, 1, "", "mensor"], [30, 2, 1, "", "mul"], [30, 2, 1, "", "norm"], [30, 2, 1, "", "normalize"], [30, 2, 1, "", "orthogonal"], [30, 2, 1, "", "parallel"], [30, 2, 1, "", "pow"], [30, 2, 1, "", "pow_cos_sin"], [30, 2, 1, "", "rotate_point"], [30, 2, 1, "", "scalar_part"], [30, 2, 1, "", "to_axis_angle"], [30, 2, 1, "", "to_rotation_matrix"], [30, 2, 1, "", "vector_coplanar"], [30, 2, 1, "", "vector_part"]], "sympy.assumptions": [[31, 0, 0, "-", "ask"], [32, 0, 0, "-", "assume"], [34, 0, 0, "-", "predicates"], [35, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[31, 1, 1, "", "AssumptionKeys"], [31, 3, 1, "", "ask"], [31, 3, 1, "", "register_handler"], [31, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[32, 1, 1, "", "AppliedPredicate"], [32, 1, 1, "", "AssumptionsContext"], [32, 1, 1, "", "Predicate"], [32, 1, 1, "", "UndefinedPredicate"], [32, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[32, 4, 1, "", "arg"], [32, 4, 1, "", "arguments"], [32, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[32, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[32, 2, 1, "", "eval"], [32, 5, 1, "", "handler"], [32, 2, 1, "", "register"], [32, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[34, 1, 1, "", "FinitePredicate"], [34, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[34, 1, 1, "", "CommutativePredicate"], [34, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[34, 1, 1, "", "ComplexElementsPredicate"], [34, 1, 1, "", "DiagonalPredicate"], [34, 1, 1, "", "FullRankPredicate"], [34, 1, 1, "", "IntegerElementsPredicate"], [34, 1, 1, "", "InvertiblePredicate"], [34, 1, 1, "", "LowerTriangularPredicate"], [34, 1, 1, "", "NormalPredicate"], [34, 1, 1, "", "OrthogonalPredicate"], [34, 1, 1, "", "PositiveDefinitePredicate"], [34, 1, 1, "", "RealElementsPredicate"], [34, 1, 1, "", "SingularPredicate"], [34, 1, 1, "", "SquarePredicate"], [34, 1, 1, "", "SymmetricPredicate"], [34, 1, 1, "", "TriangularPredicate"], [34, 1, 1, "", "UnitTriangularPredicate"], [34, 1, 1, "", "UnitaryPredicate"], [34, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[34, 1, 1, "", "CompositePredicate"], [34, 1, 1, "", "EvenPredicate"], [34, 1, 1, "", "OddPredicate"], [34, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[34, 1, 1, "", "NegativePredicate"], [34, 1, 1, "", "NonNegativePredicate"], [34, 1, 1, "", "NonPositivePredicate"], [34, 1, 1, "", "NonZeroPredicate"], [34, 1, 1, "", "PositivePredicate"], [34, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[34, 1, 1, "", "AlgebraicPredicate"], [34, 1, 1, "", "AntihermitianPredicate"], [34, 1, 1, "", "ComplexPredicate"], [34, 1, 1, "", "ExtendedRealPredicate"], [34, 1, 1, "", "HermitianPredicate"], [34, 1, 1, "", "ImaginaryPredicate"], [34, 1, 1, "", "IntegerPredicate"], [34, 1, 1, "", "IrrationalPredicate"], [34, 1, 1, "", "RationalPredicate"], [34, 1, 1, "", "RealPredicate"], [34, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[34, 5, 1, "", "AlgebraicHandler"], [34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[34, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[35, 3, 1, "", "refine"], [35, 3, 1, "", "refine_Pow"], [35, 3, 1, "", "refine_abs"], [35, 3, 1, "", "refine_arg"], [35, 3, 1, "", "refine_atan2"], [35, 3, 1, "", "refine_im"], [35, 3, 1, "", "refine_matrixelement"], [35, 3, 1, "", "refine_re"], [35, 3, 1, "", "refine_sign"]], "sympy.calculus": [[36, 0, 0, "-", "euler"], [36, 0, 0, "-", "finite_diff"], [36, 0, 0, "-", "singularities"], [36, 0, 0, "-", "util"]], "sympy.calculus.euler": [[36, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[36, 3, 1, "", "apply_finite_diff"], [36, 3, 1, "", "differentiate_finite"], [36, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[36, 3, 1, "", "is_decreasing"], [36, 3, 1, "", "is_increasing"], [36, 3, 1, "", "is_monotonic"], [36, 3, 1, "", "is_strictly_decreasing"], [36, 3, 1, "", "is_strictly_increasing"], [36, 3, 1, "", "monotonicity_helper"], [36, 3, 1, "", "singularities"]], "sympy.calculus.util": [[36, 3, 1, "", "continuous_domain"], [36, 3, 1, "", "function_range"], [36, 3, 1, "", "is_convex"], [36, 3, 1, "", "lcim"], [36, 3, 1, "", "maximum"], [36, 3, 1, "", "minimum"], [36, 3, 1, "", "not_empty_in"], [36, 3, 1, "", "periodicity"], [36, 3, 1, "", "stationary_points"]], "sympy.categories": [[37, 1, 1, "", "Category"], [37, 1, 1, "", "CompositeMorphism"], [37, 1, 1, "", "Diagram"], [37, 1, 1, "", "IdentityMorphism"], [37, 1, 1, "", "Morphism"], [37, 1, 1, "", "NamedMorphism"], [37, 1, 1, "", "Object"], [37, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[37, 4, 1, "", "commutative_diagrams"], [37, 4, 1, "", "name"], [37, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[37, 4, 1, "", "codomain"], [37, 4, 1, "", "components"], [37, 4, 1, "", "domain"], [37, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[37, 4, 1, "", "conclusions"], [37, 2, 1, "", "hom"], [37, 2, 1, "", "is_subdiagram"], [37, 4, 1, "", "objects"], [37, 4, 1, "", "premises"], [37, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[37, 4, 1, "", "codomain"], [37, 2, 1, "", "compose"], [37, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[37, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[37, 1, 1, "", "ArrowStringDescription"], [37, 1, 1, "", "DiagramGrid"], [37, 1, 1, "", "XypicDiagramDrawer"], [37, 3, 1, "", "preview_diagram"], [37, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[37, 4, 1, "", "height"], [37, 4, 1, "", "morphisms"], [37, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[37, 2, 1, "", "draw"]], "sympy.codegen": [[38, 0, 0, "-", "algorithms"], [38, 0, 0, "-", "approximations"], [38, 0, 0, "-", "ast"], [38, 0, 0, "-", "cfunctions"], [38, 0, 0, "-", "cnodes"], [38, 0, 0, "-", "cutils"], [38, 0, 0, "-", "cxxnodes"], [38, 0, 0, "-", "fnodes"], [38, 0, 0, "-", "futils"], [38, 0, 0, "-", "matrix_nodes"], [38, 0, 0, "-", "pyutils"], [38, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[38, 3, 1, "", "newtons_method"], [38, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[38, 1, 1, "", "SeriesApprox"], [38, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[38, 1, 1, "", "Assignment"], [38, 1, 1, "", "AssignmentBase"], [38, 1, 1, "", "Attribute"], [38, 1, 1, "", "AugmentedAssignment"], [38, 1, 1, "", "BreakToken"], [38, 1, 1, "", "CodeBlock"], [38, 1, 1, "", "Comment"], [38, 1, 1, "", "ComplexType"], [38, 1, 1, "", "ContinueToken"], [38, 1, 1, "", "Declaration"], [38, 1, 1, "", "Element"], [38, 1, 1, "", "FloatBaseType"], [38, 1, 1, "", "FloatType"], [38, 1, 1, "", "For"], [38, 1, 1, "", "FunctionCall"], [38, 1, 1, "", "FunctionDefinition"], [38, 1, 1, "", "FunctionPrototype"], [38, 1, 1, "", "IntBaseType"], [38, 1, 1, "", "Node"], [38, 1, 1, "", "NoneToken"], [38, 1, 1, "", "Pointer"], [38, 1, 1, "", "Print"], [38, 1, 1, "", "QuotedString"], [38, 1, 1, "", "Return"], [38, 1, 1, "", "Scope"], [38, 1, 1, "", "SignedIntType"], [38, 1, 1, "", "Stream"], [38, 1, 1, "", "String"], [38, 1, 1, "", "Token"], [38, 1, 1, "", "Type"], [38, 1, 1, "", "UnsignedIntType"], [38, 1, 1, "", "Variable"], [38, 1, 1, "", "While"], [38, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[38, 2, 1, "", "cse"], [38, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[38, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[38, 2, 1, "", "cast_nocheck"], [38, 4, 1, "", "decimal_dig"], [38, 4, 1, "", "dig"], [38, 4, 1, "", "eps"], [38, 4, 1, "", "max"], [38, 4, 1, "", "max_exponent"], [38, 4, 1, "", "min_exponent"], [38, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[38, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[38, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[38, 2, 1, "", "cast_check"], [38, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[38, 2, 1, "", "as_Declaration"], [38, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[38, 1, 1, "", "Cbrt"], [38, 1, 1, "", "Sqrt"], [38, 1, 1, "", "exp2"], [38, 1, 1, "", "expm1"], [38, 1, 1, "", "fma"], [38, 1, 1, "", "hypot"], [38, 1, 1, "", "log10"], [38, 1, 1, "", "log1p"], [38, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[38, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[38, 1, 1, "", "CommaOperator"], [38, 1, 1, "", "Label"], [38, 1, 1, "", "PostDecrement"], [38, 1, 1, "", "PostIncrement"], [38, 1, 1, "", "PreDecrement"], [38, 1, 1, "", "PreIncrement"], [38, 3, 1, "", "alignof"], [38, 1, 1, "", "goto"], [38, 3, 1, "", "sizeof"], [38, 1, 1, "", "struct"], [38, 1, 1, "", "union"]], "sympy.codegen.cutils": [[38, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[38, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[38, 1, 1, "", "ArrayConstructor"], [38, 1, 1, "", "Do"], [38, 1, 1, "", "Extent"], [38, 1, 1, "", "FortranReturn"], [38, 1, 1, "", "GoTo"], [38, 1, 1, "", "ImpliedDoLoop"], [38, 1, 1, "", "Module"], [38, 1, 1, "", "Program"], [38, 1, 1, "", "Subroutine"], [38, 1, 1, "", "SubroutineCall"], [38, 3, 1, "", "allocated"], [38, 3, 1, "", "array"], [38, 3, 1, "", "bind_C"], [38, 1, 1, "", "cmplx"], [38, 3, 1, "", "dimension"], [38, 1, 1, "", "dsign"], [38, 1, 1, "", "isign"], [38, 1, 1, "", "kind"], [38, 3, 1, "", "lbound"], [38, 1, 1, "", "literal_dp"], [38, 1, 1, "", "literal_sp"], [38, 1, 1, "", "merge"], [38, 3, 1, "", "reshape"], [38, 3, 1, "", "shape"], [38, 3, 1, "", "size"], [38, 1, 1, "", "use"], [38, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[38, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[38, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[38, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[38, 1, 1, "", "FuncMinusOneOptim"], [38, 1, 1, "", "Optimization"], [38, 1, 1, "", "ReplaceOptim"], [38, 3, 1, "", "create_expand_pow_optimization"], [38, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[38, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[48, 0, 0, "-", "generators"], [40, 0, 0, "-", "graycode"], [41, 0, 0, "-", "group_constructs"], [42, 0, 0, "-", "group_numbers"], [44, 0, 0, "-", "named_groups"], [45, 0, 0, "-", "partitions"], [47, 0, 0, "-", "perm_groups"], [48, 0, 0, "-", "permutations"], [49, 0, 0, "-", "polyhedron"], [50, 0, 0, "-", "prufer"], [51, 0, 0, "-", "subsets"], [52, 0, 0, "-", "tensor_can"], [53, 0, 0, "-", "testutil"], [54, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[48, 2, 1, "", "alternating"], [48, 2, 1, "", "cyclic"], [48, 2, 1, "", "dihedral"], [48, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[40, 1, 1, "", "GrayCode"], [40, 2, 1, "", "bin_to_gray"], [40, 2, 1, "", "get_subset_from_bitstring"], [40, 2, 1, "", "gray_to_bin"], [40, 2, 1, "", "graycode_subsets"], [40, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[40, 4, 1, "", "current"], [40, 2, 1, "", "generate_gray"], [40, 4, 1, "", "n"], [40, 2, 1, "", "next"], [40, 4, 1, "", "rank"], [40, 4, 1, "", "selections"], [40, 2, 1, "", "skip"], [40, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[41, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[42, 3, 1, "", "is_abelian_number"], [42, 3, 1, "", "is_cyclic_number"], [42, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[44, 3, 1, "", "AbelianGroup"], [44, 3, 1, "", "AlternatingGroup"], [44, 3, 1, "", "CyclicGroup"], [44, 3, 1, "", "DihedralGroup"], [44, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[45, 1, 1, "", "IntegerPartition"], [45, 1, 1, "", "Partition"], [45, 3, 1, "", "RGS_enum"], [45, 3, 1, "", "RGS_generalized"], [45, 3, 1, "", "RGS_rank"], [45, 3, 1, "", "RGS_unrank"], [45, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[45, 2, 1, "", "as_dict"], [45, 2, 1, "", "as_ferrers"], [45, 4, 1, "", "conjugate"], [45, 2, 1, "", "next_lex"], [45, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[45, 4, 1, "", "RGS"], [45, 2, 1, "", "from_rgs"], [45, 4, 1, "", "partition"], [45, 4, 1, "", "rank"], [45, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[47, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[47, 2, 1, "", "__contains__"], [47, 2, 1, "", "__mul__"], [47, 2, 1, "", "__new__"], [47, 5, 1, "", "__weakref__"], [47, 2, 1, "", "_coset_representative"], [47, 2, 1, "", "_distinct_primes_lemma"], [47, 4, 1, "", "_elements"], [47, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [47, 2, 1, "", "_eval_is_alt_sym_naive"], [47, 2, 1, "", "_p_elements_group"], [47, 2, 1, "", "_random_pr_init"], [47, 2, 1, "", "_sylow_alt_sym"], [47, 2, 1, "", "_union_find_merge"], [47, 2, 1, "", "_union_find_rep"], [47, 2, 1, "", "_verify"], [47, 2, 1, "", "abelian_invariants"], [47, 4, 1, "", "base"], [47, 2, 1, "", "baseswap"], [47, 4, 1, "", "basic_orbits"], [47, 4, 1, "", "basic_stabilizers"], [47, 4, 1, "", "basic_transversals"], [47, 2, 1, "", "center"], [47, 2, 1, "", "centralizer"], [47, 2, 1, "", "commutator"], [47, 2, 1, "", "composition_series"], [47, 2, 1, "", "conjugacy_class"], [47, 2, 1, "", "conjugacy_classes"], [47, 2, 1, "", "contains"], [47, 2, 1, "", "coset_factor"], [47, 2, 1, "", "coset_rank"], [47, 2, 1, "", "coset_table"], [47, 2, 1, "", "coset_transversal"], [47, 2, 1, "", "coset_unrank"], [47, 4, 1, "", "degree"], [47, 2, 1, "", "derived_series"], [47, 2, 1, "", "derived_subgroup"], [47, 4, 1, "", "elements"], [47, 2, 1, "", "equals"], [47, 2, 1, "", "generate"], [47, 2, 1, "", "generate_dimino"], [47, 2, 1, "", "generate_schreier_sims"], [47, 2, 1, "", "generator_product"], [47, 4, 1, "", "generators"], [47, 4, 1, "", "identity"], [47, 2, 1, "", "index"], [47, 4, 1, "", "is_abelian"], [47, 2, 1, "", "is_alt_sym"], [47, 4, 1, "", "is_alternating"], [47, 4, 1, "", "is_cyclic"], [47, 2, 1, "", "is_elementary"], [47, 4, 1, "", "is_nilpotent"], [47, 2, 1, "", "is_normal"], [47, 4, 1, "", "is_perfect"], [47, 4, 1, "", "is_polycyclic"], [47, 2, 1, "", "is_primitive"], [47, 4, 1, "", "is_solvable"], [47, 2, 1, "", "is_subgroup"], [47, 4, 1, "", "is_symmetric"], [47, 2, 1, "", "is_transitive"], [47, 4, 1, "", "is_trivial"], [47, 2, 1, "", "lower_central_series"], [47, 2, 1, "", "make_perm"], [47, 4, 1, "", "max_div"], [47, 2, 1, "", "minimal_block"], [47, 2, 1, "", "minimal_blocks"], [47, 2, 1, "", "normal_closure"], [47, 2, 1, "", "orbit"], [47, 2, 1, "", "orbit_rep"], [47, 2, 1, "", "orbit_transversal"], [47, 2, 1, "", "orbits"], [47, 2, 1, "", "order"], [47, 2, 1, "", "pointwise_stabilizer"], [47, 2, 1, "", "polycyclic_group"], [47, 2, 1, "", "presentation"], [47, 2, 1, "", "random"], [47, 2, 1, "", "random_pr"], [47, 2, 1, "", "random_stab"], [47, 2, 1, "", "schreier_sims"], [47, 2, 1, "", "schreier_sims_incremental"], [47, 2, 1, "", "schreier_sims_random"], [47, 2, 1, "", "schreier_vector"], [47, 2, 1, "", "stabilizer"], [47, 4, 1, "", "strong_gens"], [47, 2, 1, "", "strong_presentation"], [47, 2, 1, "", "subgroup"], [47, 2, 1, "", "subgroup_search"], [47, 2, 1, "", "sylow_subgroup"], [47, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[48, 1, 1, "", "Cycle"], [48, 1, 1, "", "Permutation"], [48, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[48, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[48, 2, 1, "", "apply"], [48, 4, 1, "", "array_form"], [48, 2, 1, "", "ascents"], [48, 2, 1, "", "atoms"], [48, 4, 1, "", "cardinality"], [48, 2, 1, "", "commutator"], [48, 2, 1, "", "commutes_with"], [48, 4, 1, "", "cycle_structure"], [48, 4, 1, "", "cycles"], [48, 4, 1, "", "cyclic_form"], [48, 2, 1, "", "descents"], [48, 2, 1, "", "from_inversion_vector"], [48, 2, 1, "", "from_sequence"], [48, 4, 1, "", "full_cyclic_form"], [48, 2, 1, "", "get_adjacency_distance"], [48, 2, 1, "", "get_adjacency_matrix"], [48, 2, 1, "", "get_positional_distance"], [48, 2, 1, "", "get_precedence_distance"], [48, 2, 1, "", "get_precedence_matrix"], [48, 2, 1, "", "index"], [48, 2, 1, "", "inversion_vector"], [48, 2, 1, "", "inversions"], [48, 4, 1, "", "is_Empty"], [48, 4, 1, "", "is_Identity"], [48, 4, 1, "", "is_Singleton"], [48, 4, 1, "", "is_even"], [48, 4, 1, "", "is_odd"], [48, 2, 1, "", "josephus"], [48, 2, 1, "", "length"], [48, 2, 1, "", "list"], [48, 2, 1, "", "max"], [48, 2, 1, "", "min"], [48, 2, 1, "", "mul_inv"], [48, 2, 1, "", "next_lex"], [48, 2, 1, "", "next_nonlex"], [48, 2, 1, "", "next_trotterjohnson"], [48, 2, 1, "", "order"], [48, 2, 1, "", "parity"], [48, 2, 1, "", "random"], [48, 2, 1, "", "rank"], [48, 2, 1, "", "rank_nonlex"], [48, 2, 1, "", "rank_trotterjohnson"], [48, 2, 1, "", "resize"], [48, 2, 1, "", "rmul"], [48, 2, 1, "", "rmul_with_af"], [48, 2, 1, "", "runs"], [48, 2, 1, "", "signature"], [48, 4, 1, "", "size"], [48, 2, 1, "", "support"], [48, 2, 1, "", "transpositions"], [48, 2, 1, "", "unrank_lex"], [48, 2, 1, "", "unrank_nonlex"], [48, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[49, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[49, 4, 1, "", "array_form"], [49, 4, 1, "", "corners"], [49, 4, 1, "", "cyclic_form"], [49, 4, 1, "", "edges"], [49, 4, 1, "", "faces"], [49, 4, 1, "", "pgroup"], [49, 2, 1, "", "reset"], [49, 2, 1, "", "rotate"], [49, 4, 1, "", "size"], [49, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[50, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[50, 2, 1, "", "edges"], [50, 2, 1, "", "next"], [50, 4, 1, "", "nodes"], [50, 2, 1, "", "prev"], [50, 2, 1, "", "prufer_rank"], [50, 4, 1, "", "prufer_repr"], [50, 4, 1, "", "rank"], [50, 4, 1, "", "size"], [50, 2, 1, "", "to_prufer"], [50, 2, 1, "", "to_tree"], [50, 4, 1, "", "tree_repr"], [50, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[51, 1, 1, "", "Subset"], [51, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[51, 2, 1, "", "bitlist_from_subset"], [51, 4, 1, "", "cardinality"], [51, 2, 1, "", "iterate_binary"], [51, 2, 1, "", "iterate_graycode"], [51, 2, 1, "", "next_binary"], [51, 2, 1, "", "next_gray"], [51, 2, 1, "", "next_lexicographic"], [51, 2, 1, "", "prev_binary"], [51, 2, 1, "", "prev_gray"], [51, 2, 1, "", "prev_lexicographic"], [51, 4, 1, "", "rank_binary"], [51, 4, 1, "", "rank_gray"], [51, 4, 1, "", "rank_lexicographic"], [51, 4, 1, "", "size"], [51, 4, 1, "", "subset"], [51, 2, 1, "", "subset_from_bitlist"], [51, 2, 1, "", "subset_indices"], [51, 4, 1, "", "superset"], [51, 4, 1, "", "superset_size"], [51, 2, 1, "", "unrank_binary"], [51, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[52, 3, 1, "", "bsgs_direct_product"], [52, 3, 1, "", "canonicalize"], [52, 3, 1, "", "double_coset_can_rep"], [52, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[53, 3, 1, "", "_cmp_perm_lists"], [53, 3, 1, "", "_naive_list_centralizer"], [53, 3, 1, "", "_verify_bsgs"], [53, 3, 1, "", "_verify_centralizer"], [53, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[54, 3, 1, "", "_base_ordering"], [54, 3, 1, "", "_check_cycles_alt_sym"], [54, 3, 1, "", "_distribute_gens_by_base"], [54, 3, 1, "", "_handle_precomputed_bsgs"], [54, 3, 1, "", "_orbits_transversals_from_bsgs"], [54, 3, 1, "", "_remove_gens"], [54, 3, 1, "", "_strip"], [54, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[55, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[55, 2, 1, "", "change_index"], [55, 4, 1, "", "has_empty_sequence"], [55, 2, 1, "", "index"], [55, 2, 1, "", "reorder"], [55, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[83, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[83, 4, 1, "", "bound_symbols"], [83, 4, 1, "", "free_symbols"], [83, 4, 1, "", "function"], [83, 4, 1, "", "has_finite_limits"], [83, 4, 1, "", "has_reversed_limits"], [83, 4, 1, "", "is_number"], [83, 4, 1, "", "limits"], [83, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[55, 3, 1, "", "gosper_normal"], [55, 3, 1, "", "gosper_sum"], [55, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[55, 1, 1, "", "Product"], [55, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[55, 2, 1, "", "is_convergent"], [55, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[55, 1, 1, "", "Sum"], [55, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[55, 2, 1, "", "euler_maclaurin"], [55, 2, 1, "", "eval_zeta_function"], [55, 2, 1, "", "is_absolutely_convergent"], [55, 2, 1, "", "is_convergent"], [55, 2, 1, "", "reverse_order"]], "sympy.core": [[56, 0, 0, "-", "add"], [56, 0, 0, "-", "assumptions"], [56, 0, 0, "-", "basic"], [56, 0, 0, "-", "cache"], [56, 0, 0, "-", "containers"], [56, 0, 0, "-", "evalf"], [56, 0, 0, "-", "expr"], [56, 0, 0, "-", "exprtools"], [56, 0, 0, "-", "function"], [56, 0, 0, "-", "kind"], [56, 0, 0, "-", "mod"], [56, 0, 0, "-", "mul"], [56, 0, 0, "-", "multidimensional"], [56, 0, 0, "-", "numbers"], [56, 0, 0, "-", "power"], [56, 0, 0, "-", "random"], [56, 0, 0, "-", "relational"], [56, 0, 0, "-", "singleton"], [56, 0, 0, "-", "symbol"], [56, 0, 0, "-", "sympify"], [56, 0, 0, "-", "traversal"]], "sympy.core.add": [[56, 1, 1, "", "Add"]], "sympy.core.add.Add": [[56, 2, 1, "", "as_coeff_Add"], [56, 2, 1, "", "as_coeff_add"], [56, 2, 1, "", "as_content_primitive"], [56, 2, 1, "", "as_numer_denom"], [56, 2, 1, "", "as_real_imag"], [56, 2, 1, "", "as_two_terms"], [56, 2, 1, "", "class_key"], [56, 2, 1, "", "extract_leading_order"], [56, 2, 1, "", "flatten"], [56, 2, 1, "", "primitive"]], "sympy.core.basic": [[56, 1, 1, "", "Atom"], [56, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[56, 4, 1, "", "args"], [56, 2, 1, "", "as_content_primitive"], [56, 2, 1, "", "as_dummy"], [56, 4, 1, "", "assumptions0"], [56, 2, 1, "", "atoms"], [56, 4, 1, "", "canonical_variables"], [56, 2, 1, "", "class_key"], [56, 2, 1, "", "compare"], [56, 2, 1, "", "count"], [56, 2, 1, "", "count_ops"], [56, 2, 1, "", "doit"], [56, 2, 1, "", "dummy_eq"], [56, 2, 1, "", "find"], [56, 4, 1, "", "free_symbols"], [56, 2, 1, "", "fromiter"], [56, 4, 1, "", "func"], [56, 2, 1, "", "has"], [56, 2, 1, "", "has_free"], [56, 2, 1, "", "has_xfree"], [56, 4, 1, "", "is_comparable"], [56, 2, 1, "", "match"], [56, 2, 1, "", "matches"], [56, 2, 1, "", "rcall"], [56, 2, 1, "", "refine"], [56, 2, 1, "", "replace"], [56, 2, 1, "", "rewrite"], [56, 2, 1, "", "simplify"], [56, 2, 1, "", "sort_key"], [56, 2, 1, "", "subs"], [56, 2, 1, "", "xreplace"]], "sympy.core.cache": [[56, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[56, 1, 1, "", "Dict"], [56, 1, 1, "", "Tuple"], [56, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[56, 2, 1, "", "get"], [56, 2, 1, "", "items"], [56, 2, 1, "", "keys"], [56, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[56, 2, 1, "", "index"], [56, 4, 1, "", "kind"], [56, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[56, 1, 1, "", "EvalfMixin"], [56, 3, 1, "", "N"], [56, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[56, 2, 1, "", "evalf"], [56, 2, 1, "", "n"]], "sympy.core.expr": [[56, 1, 1, "", "AtomicExpr"], [56, 1, 1, "", "Expr"], [56, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[56, 2, 1, "", "apart"], [56, 2, 1, "", "args_cnc"], [56, 2, 1, "", "as_coeff_Add"], [56, 2, 1, "", "as_coeff_Mul"], [56, 2, 1, "", "as_coeff_add"], [56, 2, 1, "", "as_coeff_exponent"], [56, 2, 1, "", "as_coeff_mul"], [56, 2, 1, "", "as_coefficient"], [56, 2, 1, "", "as_coefficients_dict"], [56, 2, 1, "", "as_content_primitive"], [56, 2, 1, "", "as_expr"], [56, 2, 1, "", "as_independent"], [56, 2, 1, "", "as_leading_term"], [56, 2, 1, "", "as_numer_denom"], [56, 2, 1, "", "as_ordered_factors"], [56, 2, 1, "", "as_ordered_terms"], [56, 2, 1, "", "as_poly"], [56, 2, 1, "", "as_powers_dict"], [56, 2, 1, "", "as_real_imag"], [56, 2, 1, "", "as_terms"], [56, 2, 1, "", "aseries"], [56, 2, 1, "", "cancel"], [56, 2, 1, "", "coeff"], [56, 2, 1, "", "collect"], [56, 2, 1, "", "combsimp"], [56, 2, 1, "", "compute_leading_term"], [56, 2, 1, "", "conjugate"], [56, 2, 1, "", "could_extract_minus_sign"], [56, 2, 1, "", "count_ops"], [56, 2, 1, "", "equals"], [56, 2, 1, "", "expand"], [56, 4, 1, "", "expr_free_symbols"], [56, 2, 1, "", "extract_additively"], [56, 2, 1, "", "extract_branch_factor"], [56, 2, 1, "", "extract_multiplicatively"], [56, 2, 1, "", "factor"], [56, 2, 1, "", "fourier_series"], [56, 2, 1, "", "fps"], [56, 2, 1, "", "gammasimp"], [56, 2, 1, "", "getO"], [56, 2, 1, "", "getn"], [56, 2, 1, "", "integrate"], [56, 2, 1, "", "invert"], [56, 2, 1, "", "is_algebraic_expr"], [56, 2, 1, "", "is_constant"], [56, 2, 1, "", "is_meromorphic"], [56, 4, 1, "", "is_number"], [56, 2, 1, "", "is_polynomial"], [56, 2, 1, "", "is_rational_function"], [56, 2, 1, "", "leadterm"], [56, 2, 1, "", "limit"], [56, 2, 1, "", "lseries"], [56, 2, 1, "", "normal"], [56, 2, 1, "", "nseries"], [56, 2, 1, "", "nsimplify"], [56, 2, 1, "", "powsimp"], [56, 2, 1, "", "primitive"], [56, 2, 1, "", "radsimp"], [56, 2, 1, "", "ratsimp"], [56, 2, 1, "", "removeO"], [56, 2, 1, "", "round"], [56, 2, 1, "", "separate"], [56, 2, 1, "", "series"], [56, 2, 1, "", "taylor_term"], [56, 2, 1, "", "together"], [56, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[56, 3, 1, "", "factor_terms"], [56, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[56, 1, 1, "", "Derivative"], [56, 1, 1, "", "Function"], [56, 1, 1, "", "FunctionClass"], [56, 1, 1, "", "Lambda"], [56, 1, 1, "", "PoleError"], [56, 1, 1, "", "Subs"], [56, 1, 1, "", "WildFunction"], [56, 3, 1, "", "count_ops"], [56, 3, 1, "", "diff"], [56, 3, 1, "", "expand"], [56, 3, 1, "", "expand_complex"], [56, 3, 1, "", "expand_func"], [56, 3, 1, "", "expand_log"], [56, 3, 1, "", "expand_mul"], [56, 3, 1, "", "expand_multinomial"], [56, 3, 1, "", "expand_power_base"], [56, 3, 1, "", "expand_power_exp"], [56, 3, 1, "", "expand_trig"], [56, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[56, 4, 1, "", "_diff_wrt"], [56, 2, 1, "", "_sort_variable_count"], [56, 2, 1, "", "as_finite_difference"], [56, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[56, 2, 1, "", "as_base_exp"], [56, 2, 1, "", "fdiff"], [56, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[56, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[56, 4, 1, "", "bound_symbols"], [56, 4, 1, "", "expr"], [56, 4, 1, "", "is_identity"], [56, 4, 1, "", "signature"], [56, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[56, 4, 1, "", "bound_symbols"], [56, 4, 1, "", "expr"], [56, 4, 1, "", "point"], [56, 4, 1, "", "variables"]], "sympy.core.kind": [[56, 5, 1, "", "BooleanKind"], [56, 1, 1, "", "Kind"], [56, 5, 1, "", "NumberKind"], [56, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[56, 1, 1, "", "Mod"]], "sympy.core.mul": [[56, 1, 1, "", "Mul"], [56, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[56, 2, 1, "", "as_coeff_Mul"], [56, 2, 1, "", "as_content_primitive"], [56, 2, 1, "", "as_ordered_factors"], [56, 2, 1, "", "as_two_terms"], [56, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[56, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[56, 1, 1, "", "AlgebraicNumber"], [56, 1, 1, "", "Catalan"], [56, 1, 1, "", "ComplexInfinity"], [56, 1, 1, "", "EulerGamma"], [56, 1, 1, "", "Exp1"], [56, 1, 1, "", "Float"], [56, 1, 1, "", "GoldenRatio"], [56, 1, 1, "", "Half"], [56, 1, 1, "", "ImaginaryUnit"], [56, 1, 1, "", "Infinity"], [56, 1, 1, "", "Integer"], [56, 1, 1, "", "NaN"], [56, 1, 1, "", "NegativeInfinity"], [56, 1, 1, "", "NegativeOne"], [56, 1, 1, "", "Number"], [56, 1, 1, "", "NumberSymbol"], [56, 1, 1, "", "One"], [56, 1, 1, "", "Pi"], [56, 1, 1, "", "Rational"], [56, 5, 1, "", "RealNumber"], [56, 1, 1, "", "TribonacciConstant"], [56, 1, 1, "", "Zero"], [56, 3, 1, "", "igcd"], [56, 3, 1, "", "ilcm"], [56, 3, 1, "", "mod_inverse"], [56, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[56, 2, 1, "", "__new__"], [56, 2, 1, "", "as_expr"], [56, 2, 1, "", "as_poly"], [56, 2, 1, "", "coeffs"], [56, 2, 1, "", "field_element"], [56, 4, 1, "", "is_aliased"], [56, 4, 1, "", "is_primitive_element"], [56, 2, 1, "", "minpoly_of_element"], [56, 2, 1, "", "native_coeffs"], [56, 2, 1, "", "primitive_element"], [56, 2, 1, "", "to_algebraic_integer"], [56, 2, 1, "", "to_primitive_element"], [56, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[56, 2, 1, "", "as_coeff_Add"], [56, 2, 1, "", "as_coeff_Mul"], [56, 2, 1, "", "cofactors"], [56, 2, 1, "", "gcd"], [56, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[56, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[56, 2, 1, "", "as_coeff_Add"], [56, 2, 1, "", "as_coeff_Mul"], [56, 2, 1, "", "as_content_primitive"], [56, 2, 1, "", "factors"], [56, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[56, 1, 1, "", "Pow"], [56, 3, 1, "", "integer_log"], [56, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[56, 2, 1, "", "as_base_exp"], [56, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[56, 3, 1, "", "_randint"], [56, 3, 1, "", "_randrange"], [56, 3, 1, "", "random_complex_number"], [56, 3, 1, "", "test_derivative_numerically"], [56, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[56, 5, 1, "", "Eq"], [56, 1, 1, "", "Equality"], [56, 5, 1, "", "Ge"], [56, 1, 1, "", "GreaterThan"], [56, 5, 1, "", "Gt"], [56, 5, 1, "", "Le"], [56, 1, 1, "", "LessThan"], [56, 5, 1, "", "Lt"], [56, 5, 1, "", "Ne"], [56, 5, 1, "", "Rel"], [56, 1, 1, "", "Relational"], [56, 1, 1, "", "StrictGreaterThan"], [56, 1, 1, "", "StrictLessThan"], [56, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[56, 2, 1, "", "as_poly"], [56, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[56, 4, 1, "", "canonical"], [56, 2, 1, "", "equals"], [56, 4, 1, "", "lhs"], [56, 4, 1, "", "negated"], [56, 4, 1, "", "reversed"], [56, 4, 1, "", "reversedsign"], [56, 4, 1, "", "rhs"], [56, 4, 1, "", "strict"], [56, 4, 1, "", "weak"]], "sympy.core.singleton": [[56, 1, 1, "", "Singleton"], [56, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[56, 3, 1, "", "default_sort_key"], [56, 3, 1, "", "ordered"]], "sympy.core.symbol": [[56, 1, 1, "", "Dummy"], [56, 1, 1, "", "Symbol"], [56, 1, 1, "", "Wild"], [56, 3, 1, "", "symbols"], [56, 3, 1, "", "var"]], "sympy.core.sympify": [[56, 3, 1, "", "sympify"]], "sympy.core.traversal": [[56, 3, 1, "", "bottom_up"], [56, 3, 1, "", "postorder_traversal"], [56, 3, 1, "", "preorder_traversal"], [56, 3, 1, "", "use"], [56, 3, 1, "", "walk"]], "sympy.crypto": [[57, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[57, 3, 1, "", "AZ"], [57, 3, 1, "", "bifid5_square"], [57, 3, 1, "", "bifid6_square"], [57, 3, 1, "", "check_and_join"], [57, 3, 1, "", "cycle_list"], [57, 3, 1, "", "decipher_affine"], [57, 3, 1, "", "decipher_atbash"], [57, 3, 1, "", "decipher_bifid"], [57, 3, 1, "", "decipher_bifid5"], [57, 3, 1, "", "decipher_bifid6"], [57, 3, 1, "", "decipher_elgamal"], [57, 3, 1, "", "decipher_gm"], [57, 3, 1, "", "decipher_hill"], [57, 3, 1, "", "decipher_kid_rsa"], [57, 3, 1, "", "decipher_railfence"], [57, 3, 1, "", "decipher_rot13"], [57, 3, 1, "", "decipher_rsa"], [57, 3, 1, "", "decipher_shift"], [57, 3, 1, "", "decipher_vigenere"], [57, 3, 1, "", "decode_morse"], [57, 3, 1, "", "dh_private_key"], [57, 3, 1, "", "dh_public_key"], [57, 3, 1, "", "dh_shared_key"], [57, 3, 1, "", "elgamal_private_key"], [57, 3, 1, "", "elgamal_public_key"], [57, 3, 1, "", "encipher_affine"], [57, 3, 1, "", "encipher_atbash"], [57, 3, 1, "", "encipher_bifid"], [57, 3, 1, "", "encipher_bifid5"], [57, 3, 1, "", "encipher_bifid6"], [57, 3, 1, "", "encipher_elgamal"], [57, 3, 1, "", "encipher_gm"], [57, 3, 1, "", "encipher_hill"], [57, 3, 1, "", "encipher_kid_rsa"], [57, 3, 1, "", "encipher_railfence"], [57, 3, 1, "", "encipher_rot13"], [57, 3, 1, "", "encipher_rsa"], [57, 3, 1, "", "encipher_shift"], [57, 3, 1, "", "encipher_substitution"], [57, 3, 1, "", "encipher_vigenere"], [57, 3, 1, "", "encode_morse"], [57, 3, 1, "", "gm_private_key"], [57, 3, 1, "", "gm_public_key"], [57, 3, 1, "", "kid_rsa_private_key"], [57, 3, 1, "", "kid_rsa_public_key"], [57, 3, 1, "", "lfsr_autocorrelation"], [57, 3, 1, "", "lfsr_connection_polynomial"], [57, 3, 1, "", "lfsr_sequence"], [57, 3, 1, "", "padded_key"], [57, 3, 1, "", "rsa_private_key"], [57, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[58, 1, 1, "", "BaseCovarDerivativeOp"], [58, 1, 1, "", "BaseScalarField"], [58, 1, 1, "", "BaseVectorField"], [58, 1, 1, "", "Commutator"], [58, 1, 1, "", "CoordSystem"], [58, 1, 1, "", "CoordinateSymbol"], [58, 1, 1, "", "CovarDerivativeOp"], [58, 1, 1, "", "Differential"], [58, 1, 1, "", "LieDerivative"], [58, 1, 1, "", "Manifold"], [58, 1, 1, "", "Patch"], [58, 1, 1, "", "Point"], [58, 1, 1, "", "TensorProduct"], [58, 1, 1, "", "WedgeProduct"], [58, 3, 1, "", "intcurve_diffequ"], [58, 3, 1, "", "intcurve_series"], [58, 3, 1, "", "metric_to_Christoffel_1st"], [58, 3, 1, "", "metric_to_Christoffel_2nd"], [58, 3, 1, "", "metric_to_Ricci_components"], [58, 3, 1, "", "metric_to_Riemann_components"], [58, 3, 1, "", "twoform_to_matrix"], [58, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[58, 2, 1, "", "base_oneform"], [58, 2, 1, "", "base_oneforms"], [58, 2, 1, "", "base_scalar"], [58, 2, 1, "", "base_scalars"], [58, 2, 1, "", "base_vector"], [58, 2, 1, "", "base_vectors"], [58, 2, 1, "", "coord_function"], [58, 2, 1, "", "coord_functions"], [58, 2, 1, "", "coord_tuple_transform_to"], [58, 2, 1, "", "jacobian"], [58, 2, 1, "", "jacobian_determinant"], [58, 2, 1, "", "jacobian_matrix"], [58, 2, 1, "", "point"], [58, 2, 1, "", "point_to_coords"], [58, 2, 1, "", "transform"], [58, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[58, 2, 1, "", "coords"]], "sympy.discrete": [[59, 0, 0, "-", "convolutions"], [59, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[59, 3, 1, "", "convolution"], [59, 3, 1, "", "convolution_fft"], [59, 3, 1, "", "convolution_fwht"], [59, 3, 1, "", "convolution_ntt"], [59, 3, 1, "", "convolution_subset"], [59, 3, 1, "", "covering_product"], [59, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[59, 3, 1, "", "fft"], [59, 3, 1, "", "fwht"], [59, 3, 1, "", "ifft"], [59, 3, 1, "", "ifwht"], [59, 3, 1, "", "intt"], [59, 3, 1, "", "inverse_mobius_transform"], [59, 3, 1, "", "mobius_transform"], [59, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[196, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[61, 1, 1, "", "FallingFactorial"], [61, 1, 1, "", "MultiFactorial"], [61, 1, 1, "", "RisingFactorial"], [61, 1, 1, "", "binomial"], [61, 1, 1, "", "factorial"], [61, 1, 1, "", "factorial2"], [61, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[61, 1, 1, "", "andre"], [61, 1, 1, "", "bell"], [61, 1, 1, "", "bernoulli"], [61, 1, 1, "", "catalan"], [61, 1, 1, "", "euler"], [61, 1, 1, "", "fibonacci"], [61, 1, 1, "", "genocchi"], [61, 1, 1, "", "harmonic"], [61, 1, 1, "", "lucas"], [61, 3, 1, "", "nC"], [61, 3, 1, "", "nP"], [61, 3, 1, "", "nT"], [61, 1, 1, "", "partition"], [61, 3, 1, "", "stirling"], [61, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[62, 1, 1, "", "Abs"], [62, 1, 1, "", "arg"], [62, 1, 1, "", "conjugate"], [62, 1, 1, "", "im"], [62, 1, 1, "", "periodic_argument"], [62, 1, 1, "", "polar_lift"], [62, 1, 1, "", "principal_branch"], [62, 1, 1, "", "re"], [62, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[62, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[62, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[62, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[62, 1, 1, "", "LambertW"], [62, 1, 1, "", "exp"], [62, 1, 1, "", "exp_polar"], [62, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[62, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[62, 2, 1, "", "as_real_imag"], [62, 4, 1, "", "base"], [62, 2, 1, "", "fdiff"], [62, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[62, 2, 1, "", "as_base_exp"], [62, 2, 1, "", "as_real_imag"], [62, 2, 1, "", "fdiff"], [62, 2, 1, "", "inverse"], [62, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[62, 1, 1, "", "HyperbolicFunction"], [62, 1, 1, "", "acosh"], [62, 1, 1, "", "acoth"], [62, 1, 1, "", "acsch"], [62, 1, 1, "", "asech"], [62, 1, 1, "", "asinh"], [62, 1, 1, "", "atanh"], [62, 1, 1, "", "cosh"], [62, 1, 1, "", "coth"], [62, 1, 1, "", "csch"], [62, 1, 1, "", "sech"], [62, 1, 1, "", "sinh"], [62, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[62, 2, 1, "", "fdiff"], [62, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[62, 2, 1, "", "as_real_imag"], [62, 2, 1, "", "fdiff"], [62, 2, 1, "", "inverse"], [62, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[62, 1, 1, "", "RoundFunction"], [62, 1, 1, "", "ceiling"], [62, 1, 1, "", "floor"], [62, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[62, 1, 1, "", "IdentityFunction"], [62, 1, 1, "", "Max"], [62, 1, 1, "", "Min"], [62, 3, 1, "", "cbrt"], [62, 3, 1, "", "real_root"], [62, 3, 1, "", "root"], [62, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[62, 1, 1, "", "ExprCondPair"], [62, 1, 1, "", "Piecewise"], [62, 3, 1, "", "piecewise_exclusive"], [62, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[62, 4, 1, "", "cond"], [62, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[62, 2, 1, "", "_eval_integral"], [62, 2, 1, "", "as_expr_set_pairs"], [62, 2, 1, "", "doit"], [62, 2, 1, "", "eval"], [62, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[62, 1, 1, "", "acos"], [62, 1, 1, "", "acot"], [62, 1, 1, "", "acsc"], [62, 1, 1, "", "asec"], [62, 1, 1, "", "asin"], [62, 1, 1, "", "atan"], [62, 1, 1, "", "atan2"], [62, 1, 1, "", "cos"], [62, 1, 1, "", "cot"], [62, 1, 1, "", "csc"], [62, 1, 1, "", "sec"], [62, 1, 1, "", "sin"], [62, 1, 1, "", "sinc"], [62, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[62, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[62, 2, 1, "", "inverse"]], "sympy.functions.special": [[64, 0, 0, "-", "bessel"], [64, 0, 0, "-", "beta_functions"], [64, 0, 0, "-", "elliptic_integrals"], [64, 0, 0, "-", "error_functions"], [64, 0, 0, "-", "gamma_functions"], [64, 0, 0, "-", "mathieu_functions"], [64, 0, 0, "-", "polynomials"], [64, 0, 0, "-", "singularity_functions"], [64, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[64, 1, 1, "", "AiryBase"], [64, 1, 1, "", "BesselBase"], [64, 1, 1, "", "airyai"], [64, 1, 1, "", "airyaiprime"], [64, 1, 1, "", "airybi"], [64, 1, 1, "", "airybiprime"], [64, 1, 1, "", "besseli"], [64, 1, 1, "", "besselj"], [64, 1, 1, "", "besselk"], [64, 1, 1, "", "bessely"], [64, 1, 1, "", "hankel1"], [64, 1, 1, "", "hankel2"], [64, 1, 1, "", "jn"], [64, 3, 1, "", "jn_zeros"], [64, 1, 1, "", "marcumq"], [64, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[64, 4, 1, "", "argument"], [64, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[64, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[64, 3, 1, "", "bspline_basis"], [64, 3, 1, "", "bspline_basis_set"], [64, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[64, 1, 1, "", "DiracDelta"], [64, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[64, 2, 1, "", "eval"], [64, 2, 1, "", "fdiff"], [64, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[64, 2, 1, "", "eval"], [64, 2, 1, "", "fdiff"], [64, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[64, 1, 1, "", "elliptic_e"], [64, 1, 1, "", "elliptic_f"], [64, 1, 1, "", "elliptic_k"], [64, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[64, 1, 1, "", "Chi"], [64, 1, 1, "", "Ci"], [64, 3, 1, "", "E1"], [64, 1, 1, "", "Ei"], [64, 1, 1, "", "FresnelIntegral"], [64, 1, 1, "", "Li"], [64, 1, 1, "", "Shi"], [64, 1, 1, "", "Si"], [64, 1, 1, "", "erf"], [64, 1, 1, "", "erf2"], [64, 1, 1, "", "erf2inv"], [64, 1, 1, "", "erfc"], [64, 1, 1, "", "erfcinv"], [64, 1, 1, "", "erfi"], [64, 1, 1, "", "erfinv"], [64, 1, 1, "", "expint"], [64, 1, 1, "", "fresnelc"], [64, 1, 1, "", "fresnels"], [64, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[64, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[64, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[64, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[64, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[64, 1, 1, "", "digamma"], [64, 1, 1, "", "gamma"], [64, 1, 1, "", "loggamma"], [64, 1, 1, "", "lowergamma"], [64, 1, 1, "", "multigamma"], [64, 1, 1, "", "polygamma"], [64, 1, 1, "", "trigamma"], [64, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[64, 1, 1, "", "appellf1"], [64, 1, 1, "", "hyper"], [64, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[64, 4, 1, "", "ap"], [64, 4, 1, "", "argument"], [64, 4, 1, "", "bq"], [64, 4, 1, "", "convergence_statement"], [64, 4, 1, "", "eta"], [64, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[64, 4, 1, "", "an"], [64, 4, 1, "", "aother"], [64, 4, 1, "", "ap"], [64, 4, 1, "", "argument"], [64, 4, 1, "", "bm"], [64, 4, 1, "", "bother"], [64, 4, 1, "", "bq"], [64, 4, 1, "", "delta"], [64, 2, 1, "", "get_period"], [64, 2, 1, "", "integrand"], [64, 4, 1, "", "is_number"], [64, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[64, 1, 1, "", "MathieuBase"], [64, 1, 1, "", "mathieuc"], [64, 1, 1, "", "mathieucprime"], [64, 1, 1, "", "mathieus"], [64, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[64, 1, 1, "", "assoc_laguerre"], [64, 1, 1, "", "assoc_legendre"], [64, 1, 1, "", "chebyshevt"], [64, 1, 1, "", "chebyshevt_root"], [64, 1, 1, "", "chebyshevu"], [64, 1, 1, "", "chebyshevu_root"], [64, 1, 1, "", "gegenbauer"], [64, 1, 1, "", "hermite"], [64, 1, 1, "", "hermite_prob"], [64, 1, 1, "", "jacobi"], [64, 3, 1, "", "jacobi_normalized"], [64, 1, 1, "", "laguerre"], [64, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[64, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[64, 2, 1, "", "eval"], [64, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[64, 1, 1, "", "Ynm"], [64, 3, 1, "", "Ynm_c"], [64, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[64, 3, 1, "", "Eijk"], [64, 1, 1, "", "KroneckerDelta"], [64, 1, 1, "", "LeviCivita"], [64, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[64, 2, 1, "", "eval"], [64, 4, 1, "", "indices_contain_equal_information"], [64, 4, 1, "", "is_above_fermi"], [64, 4, 1, "", "is_below_fermi"], [64, 4, 1, "", "is_only_above_fermi"], [64, 4, 1, "", "is_only_below_fermi"], [64, 4, 1, "", "killable_index"], [64, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[64, 1, 1, "", "dirichlet_eta"], [64, 1, 1, "", "lerchphi"], [64, 1, 1, "", "polylog"], [64, 1, 1, "", "stieltjes"], [64, 1, 1, "", "zeta"]], "sympy.geometry": [[65, 0, 0, "-", "curve"], [66, 0, 0, "-", "ellipse"], [67, 0, 0, "-", "entity"], [69, 0, 0, "-", "line"], [70, 0, 0, "-", "plane"], [71, 0, 0, "-", "point"], [72, 0, 0, "-", "polygon"], [73, 0, 0, "-", "util"]], "sympy.geometry.curve": [[65, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[65, 4, 1, "", "ambient_dimension"], [65, 2, 1, "", "arbitrary_point"], [65, 4, 1, "", "free_symbols"], [65, 4, 1, "", "functions"], [65, 4, 1, "", "length"], [65, 4, 1, "", "limits"], [65, 4, 1, "", "parameter"], [65, 2, 1, "", "plot_interval"], [65, 2, 1, "", "rotate"], [65, 2, 1, "", "scale"], [65, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[66, 1, 1, "", "Circle"], [66, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[66, 4, 1, "", "circumference"], [66, 2, 1, "", "equation"], [66, 2, 1, "", "intersection"], [66, 4, 1, "", "radius"], [66, 2, 1, "", "reflect"], [66, 2, 1, "", "scale"], [66, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[66, 4, 1, "", "apoapsis"], [66, 2, 1, "", "arbitrary_point"], [66, 4, 1, "", "area"], [66, 2, 1, "", "auxiliary_circle"], [66, 4, 1, "", "bounds"], [66, 4, 1, "", "center"], [66, 4, 1, "", "circumference"], [66, 2, 1, "", "director_circle"], [66, 4, 1, "", "eccentricity"], [66, 2, 1, "", "encloses_point"], [66, 2, 1, "", "equation"], [66, 2, 1, "", "evolute"], [66, 4, 1, "", "foci"], [66, 4, 1, "", "focus_distance"], [66, 4, 1, "", "hradius"], [66, 2, 1, "", "intersection"], [66, 2, 1, "", "is_tangent"], [66, 4, 1, "", "major"], [66, 4, 1, "", "minor"], [66, 2, 1, "", "normal_lines"], [66, 4, 1, "", "periapsis"], [66, 2, 1, "", "plot_interval"], [66, 2, 1, "", "polar_second_moment_of_area"], [66, 2, 1, "", "random_point"], [66, 2, 1, "", "reflect"], [66, 2, 1, "", "rotate"], [66, 2, 1, "", "scale"], [66, 2, 1, "", "second_moment_of_area"], [66, 2, 1, "", "section_modulus"], [66, 4, 1, "", "semilatus_rectum"], [66, 2, 1, "", "tangent_lines"], [66, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[67, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[67, 4, 1, "", "ambient_dimension"], [67, 4, 1, "", "bounds"], [67, 2, 1, "", "encloses"], [67, 2, 1, "", "intersection"], [67, 2, 1, "", "is_similar"], [67, 2, 1, "", "parameter_value"], [67, 2, 1, "", "reflect"], [67, 2, 1, "", "rotate"], [67, 2, 1, "", "scale"], [67, 2, 1, "", "translate"]], "sympy.geometry.line": [[69, 1, 1, "", "Line"], [69, 1, 1, "", "Line2D"], [69, 1, 1, "", "Line3D"], [69, 1, 1, "", "LinearEntity"], [69, 1, 1, "", "LinearEntity2D"], [69, 1, 1, "", "LinearEntity3D"], [69, 1, 1, "", "Ray"], [69, 1, 1, "", "Ray2D"], [69, 1, 1, "", "Ray3D"], [69, 1, 1, "", "Segment"], [69, 1, 1, "", "Segment2D"], [69, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[69, 2, 1, "", "contains"], [69, 2, 1, "", "distance"], [69, 2, 1, "", "equals"], [69, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[69, 4, 1, "", "coefficients"], [69, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[69, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[69, 4, 1, "", "ambient_dimension"], [69, 2, 1, "", "angle_between"], [69, 2, 1, "", "arbitrary_point"], [69, 2, 1, "", "are_concurrent"], [69, 2, 1, "", "bisectors"], [69, 2, 1, "", "contains"], [69, 4, 1, "", "direction"], [69, 2, 1, "", "intersection"], [69, 2, 1, "", "is_parallel"], [69, 2, 1, "", "is_perpendicular"], [69, 2, 1, "", "is_similar"], [69, 4, 1, "", "length"], [69, 4, 1, "", "p1"], [69, 4, 1, "", "p2"], [69, 2, 1, "", "parallel_line"], [69, 2, 1, "", "perpendicular_line"], [69, 2, 1, "", "perpendicular_segment"], [69, 4, 1, "", "points"], [69, 2, 1, "", "projection"], [69, 2, 1, "", "random_point"], [69, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[69, 4, 1, "", "bounds"], [69, 2, 1, "", "perpendicular_line"], [69, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[69, 4, 1, "", "direction_cosine"], [69, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[69, 2, 1, "", "contains"], [69, 2, 1, "", "distance"], [69, 2, 1, "", "equals"], [69, 2, 1, "", "plot_interval"], [69, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[69, 2, 1, "", "closing_angle"], [69, 4, 1, "", "xdirection"], [69, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[69, 4, 1, "", "xdirection"], [69, 4, 1, "", "ydirection"], [69, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[69, 2, 1, "", "contains"], [69, 2, 1, "", "distance"], [69, 2, 1, "", "equals"], [69, 4, 1, "", "length"], [69, 4, 1, "", "midpoint"], [69, 2, 1, "", "perpendicular_bisector"], [69, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[70, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[70, 2, 1, "", "angle_between"], [70, 2, 1, "", "arbitrary_point"], [70, 2, 1, "", "are_concurrent"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "equals"], [70, 2, 1, "", "equation"], [70, 2, 1, "", "intersection"], [70, 2, 1, "", "is_coplanar"], [70, 2, 1, "", "is_parallel"], [70, 2, 1, "", "is_perpendicular"], [70, 4, 1, "", "normal_vector"], [70, 4, 1, "", "p1"], [70, 2, 1, "", "parallel_plane"], [70, 2, 1, "", "parameter_value"], [70, 2, 1, "", "perpendicular_line"], [70, 2, 1, "", "perpendicular_plane"], [70, 2, 1, "", "projection"], [70, 2, 1, "", "projection_line"], [70, 2, 1, "", "random_point"]], "sympy.geometry.point": [[71, 1, 1, "", "Point"], [71, 1, 1, "", "Point2D"], [71, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[71, 2, 1, "", "affine_rank"], [71, 4, 1, "", "ambient_dimension"], [71, 2, 1, "", "are_coplanar"], [71, 2, 1, "", "canberra_distance"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "dot"], [71, 2, 1, "", "equals"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "is_collinear"], [71, 2, 1, "", "is_concyclic"], [71, 4, 1, "", "is_nonzero"], [71, 2, 1, "", "is_scalar_multiple"], [71, 4, 1, "", "is_zero"], [71, 4, 1, "", "length"], [71, 2, 1, "", "midpoint"], [71, 4, 1, "", "origin"], [71, 4, 1, "", "orthogonal_direction"], [71, 2, 1, "", "project"], [71, 2, 1, "", "taxicab_distance"], [71, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[71, 4, 1, "", "bounds"], [71, 4, 1, "", "coordinates"], [71, 2, 1, "", "rotate"], [71, 2, 1, "", "scale"], [71, 2, 1, "", "transform"], [71, 2, 1, "", "translate"], [71, 4, 1, "", "x"], [71, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[71, 2, 1, "", "are_collinear"], [71, 4, 1, "", "coordinates"], [71, 2, 1, "", "direction_cosine"], [71, 2, 1, "", "direction_ratio"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "scale"], [71, 2, 1, "", "transform"], [71, 2, 1, "", "translate"], [71, 4, 1, "", "x"], [71, 4, 1, "", "y"], [71, 4, 1, "", "z"]], "sympy.geometry.polygon": [[72, 1, 1, "", "Polygon"], [72, 1, 1, "", "RegularPolygon"], [72, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[72, 4, 1, "", "angles"], [72, 2, 1, "", "arbitrary_point"], [72, 4, 1, "", "area"], [72, 2, 1, "", "bisectors"], [72, 4, 1, "", "bounds"], [72, 4, 1, "", "centroid"], [72, 2, 1, "", "cut_section"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "encloses_point"], [72, 2, 1, "", "first_moment_of_area"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "is_convex"], [72, 4, 1, "", "perimeter"], [72, 2, 1, "", "plot_interval"], [72, 2, 1, "", "polar_second_moment_of_area"], [72, 2, 1, "", "second_moment_of_area"], [72, 2, 1, "", "section_modulus"], [72, 4, 1, "", "sides"], [72, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[72, 4, 1, "", "angles"], [72, 4, 1, "", "apothem"], [72, 4, 1, "", "area"], [72, 4, 1, "", "args"], [72, 4, 1, "", "center"], [72, 4, 1, "", "centroid"], [72, 4, 1, "", "circumcenter"], [72, 4, 1, "", "circumcircle"], [72, 4, 1, "", "circumradius"], [72, 2, 1, "", "encloses_point"], [72, 4, 1, "", "exterior_angle"], [72, 4, 1, "", "incircle"], [72, 4, 1, "", "inradius"], [72, 4, 1, "", "interior_angle"], [72, 4, 1, "", "length"], [72, 4, 1, "", "radius"], [72, 2, 1, "", "reflect"], [72, 2, 1, "", "rotate"], [72, 4, 1, "", "rotation"], [72, 2, 1, "", "scale"], [72, 2, 1, "", "spin"], [72, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[72, 4, 1, "", "altitudes"], [72, 2, 1, "", "bisectors"], [72, 4, 1, "", "circumcenter"], [72, 4, 1, "", "circumcircle"], [72, 4, 1, "", "circumradius"], [72, 4, 1, "", "eulerline"], [72, 4, 1, "", "excenters"], [72, 4, 1, "", "exradii"], [72, 4, 1, "", "incenter"], [72, 4, 1, "", "incircle"], [72, 4, 1, "", "inradius"], [72, 2, 1, "", "is_equilateral"], [72, 2, 1, "", "is_isosceles"], [72, 2, 1, "", "is_right"], [72, 2, 1, "", "is_scalene"], [72, 2, 1, "", "is_similar"], [72, 4, 1, "", "medial"], [72, 4, 1, "", "medians"], [72, 4, 1, "", "nine_point_circle"], [72, 4, 1, "", "orthocenter"], [72, 4, 1, "", "vertices"]], "sympy.geometry.util": [[73, 3, 1, "", "are_similar"], [73, 3, 1, "", "centroid"], [73, 3, 1, "", "convex_hull"], [73, 3, 1, "", "idiff"], [73, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[79, 1, 1, "", "DifferentialOperator"], [79, 1, 1, "", "DifferentialOperatorAlgebra"], [79, 3, 1, "", "DifferentialOperators"], [79, 1, 1, "", "HolonomicFunction"], [77, 3, 1, "", "_convert_poly_rat_alg"], [77, 3, 1, "", "_create_table"], [75, 3, 1, "", "expr_to_holonomic"], [75, 3, 1, "", "from_hyper"], [75, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[79, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[78, 2, 1, "", "composition"], [78, 2, 1, "", "diff"], [78, 2, 1, "", "evalf"], [78, 2, 1, "", "integrate"], [78, 2, 1, "", "series"], [78, 2, 1, "", "to_expr"], [78, 2, 1, "", "to_hyper"], [78, 2, 1, "", "to_meijerg"], [78, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[83, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[83, 3, 1, "", "components"], [83, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[83, 1, 1, "", "Integral"], [83, 3, 1, "", "integrate"], [83, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[83, 2, 1, "", "as_sum"], [83, 2, 1, "", "doit"], [83, 4, 1, "", "free_symbols"], [83, 6, 1, "", "is_commutative"], [83, 2, 1, "", "principal_value"], [83, 2, 1, "", "transform"]], "sympy.integrals": [[83, 0, 0, "-", "intpoly"], [81, 0, 0, "-", "meijerint"], [81, 0, 0, "-", "meijerint_doc"], [83, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[83, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[83, 3, 1, "", "integral_steps"], [83, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[81, 7, 1, "", "_CoeffExpValueError"], [81, 3, 1, "", "_check_antecedents"], [81, 3, 1, "", "_check_antecedents_1"], [81, 3, 1, "", "_check_antecedents_inversion"], [81, 3, 1, "", "_condsimp"], [81, 3, 1, "", "_create_lookup_table"], [81, 3, 1, "", "_dummy"], [81, 3, 1, "", "_dummy_"], [81, 3, 1, "", "_eval_cond"], [81, 3, 1, "", "_exponents"], [81, 3, 1, "", "_find_splitting_points"], [81, 3, 1, "", "_flip_g"], [81, 3, 1, "", "_functions"], [81, 3, 1, "", "_get_coeff_exp"], [81, 3, 1, "", "_guess_expansion"], [81, 3, 1, "", "_inflate_fox_h"], [81, 3, 1, "", "_inflate_g"], [81, 3, 1, "", "_int0oo"], [81, 3, 1, "", "_int0oo_1"], [81, 3, 1, "", "_int_inversion"], [81, 3, 1, "", "_is_analytic"], [81, 3, 1, "", "_meijerint_definite_2"], [81, 3, 1, "", "_meijerint_definite_3"], [81, 3, 1, "", "_meijerint_definite_4"], [81, 3, 1, "", "_meijerint_indefinite_1"], [81, 3, 1, "", "_mul_args"], [81, 3, 1, "", "_mul_as_two_parts"], [81, 3, 1, "", "_my_principal_branch"], [81, 3, 1, "", "_mytype"], [81, 3, 1, "", "_rewrite1"], [81, 3, 1, "", "_rewrite2"], [81, 3, 1, "", "_rewrite_inversion"], [81, 3, 1, "", "_rewrite_saxena"], [81, 3, 1, "", "_rewrite_saxena_1"], [81, 3, 1, "", "_rewrite_single"], [81, 3, 1, "", "_split_mul"], [81, 3, 1, "", "meijerint_definite"], [81, 3, 1, "", "meijerint_indefinite"], [81, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[83, 3, 1, "", "gauss_chebyshev_t"], [83, 3, 1, "", "gauss_chebyshev_u"], [83, 3, 1, "", "gauss_gen_laguerre"], [83, 3, 1, "", "gauss_hermite"], [83, 3, 1, "", "gauss_jacobi"], [83, 3, 1, "", "gauss_laguerre"], [83, 3, 1, "", "gauss_legendre"], [83, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[83, 3, 1, "", "ratint"], [83, 3, 1, "", "ratint_logpart"], [83, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[83, 1, 1, "", "NonElementaryIntegral"], [83, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[83, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[83, 1, 1, "", "CosineTransform"], [83, 1, 1, "", "FourierTransform"], [83, 1, 1, "", "HankelTransform"], [83, 1, 1, "", "IntegralTransform"], [83, 7, 1, "", "IntegralTransformError"], [83, 1, 1, "", "InverseCosineTransform"], [83, 1, 1, "", "InverseFourierTransform"], [83, 1, 1, "", "InverseHankelTransform"], [83, 1, 1, "", "InverseLaplaceTransform"], [83, 1, 1, "", "InverseMellinTransform"], [83, 1, 1, "", "InverseSineTransform"], [83, 1, 1, "", "LaplaceTransform"], [83, 1, 1, "", "MellinTransform"], [83, 1, 1, "", "SineTransform"], [83, 3, 1, "", "_fast_inverse_laplace"], [83, 3, 1, "", "_fourier_transform"], [83, 3, 1, "", "cosine_transform"], [83, 3, 1, "", "fourier_transform"], [83, 3, 1, "", "hankel_transform"], [83, 3, 1, "", "inverse_cosine_transform"], [83, 3, 1, "", "inverse_fourier_transform"], [83, 3, 1, "", "inverse_hankel_transform"], [83, 3, 1, "", "inverse_laplace_transform"], [83, 3, 1, "", "inverse_mellin_transform"], [83, 3, 1, "", "inverse_sine_transform"], [83, 3, 1, "", "laplace_transform"], [83, 3, 1, "", "mellin_transform"], [83, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[83, 2, 1, "", "doit"], [83, 4, 1, "", "function"], [83, 4, 1, "", "function_variable"], [83, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[83, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[84, 0, 0, "-", "printing"], [84, 0, 0, "-", "session"]], "sympy.interactive.printing": [[84, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[84, 3, 1, "", "enable_automatic_int_sympification"], [84, 3, 1, "", "enable_automatic_symbols"], [84, 3, 1, "", "init_ipython_session"], [84, 3, 1, "", "init_python_session"], [84, 3, 1, "", "init_session"], [84, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[85, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[85, 1, 1, "", "CartanType_generator"], [85, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[85, 2, 1, "", "rank"], [85, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[85, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[85, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[85, 2, 1, "", "add_as_roots"], [85, 2, 1, "", "add_simple_roots"], [85, 2, 1, "", "all_roots"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dynkin_diagram"], [85, 2, 1, "", "root_space"], [85, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[85, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[85, 2, 1, "", "basic_root"], [85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "highest_root"], [85, 2, 1, "", "lie_algebra"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[85, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[85, 2, 1, "", "basic_root"], [85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "lie_algebra"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[85, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[85, 2, 1, "", "basic_root"], [85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "lie_algebra"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[85, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[85, 2, 1, "", "basic_root"], [85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "lie_algebra"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[85, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[85, 2, 1, "", "basic_root"], [85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[85, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[85, 2, 1, "", "basic_root"], [85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[85, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[85, 2, 1, "", "basis"], [85, 2, 1, "", "cartan_matrix"], [85, 2, 1, "", "dimension"], [85, 2, 1, "", "positive_roots"], [85, 2, 1, "", "roots"], [85, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[85, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[85, 2, 1, "", "coxeter_diagram"], [85, 2, 1, "", "delete_doubles"], [85, 2, 1, "", "element_order"], [85, 2, 1, "", "generators"], [85, 2, 1, "", "group_name"], [85, 2, 1, "", "group_order"], [85, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[86, 3, 1, "", "ANFform"], [86, 1, 1, "", "And"], [86, 1, 1, "", "Boolean"], [86, 1, 1, "", "BooleanFalse"], [86, 1, 1, "", "BooleanTrue"], [86, 1, 1, "", "Equivalent"], [86, 1, 1, "", "Exclusive"], [86, 1, 1, "", "ITE"], [86, 1, 1, "", "Implies"], [86, 1, 1, "", "Nand"], [86, 1, 1, "", "Nor"], [86, 1, 1, "", "Not"], [86, 1, 1, "", "Or"], [86, 3, 1, "", "POSform"], [86, 3, 1, "", "SOPform"], [86, 1, 1, "", "Xnor"], [86, 1, 1, "", "Xor"], [86, 3, 1, "", "anf_coeffs"], [86, 3, 1, "", "bool_map"], [86, 3, 1, "", "bool_maxterm"], [86, 3, 1, "", "bool_minterm"], [86, 3, 1, "", "bool_monomial"], [86, 3, 1, "", "distribute_and_over_or"], [86, 3, 1, "", "distribute_or_over_and"], [86, 3, 1, "", "distribute_xor_over_and"], [86, 3, 1, "", "eliminate_implications"], [86, 3, 1, "", "gateinputcount"], [86, 3, 1, "", "integer_to_term"], [86, 3, 1, "", "is_anf"], [86, 3, 1, "", "is_cnf"], [86, 3, 1, "", "is_dnf"], [86, 3, 1, "", "is_nnf"], [86, 3, 1, "", "simplify_logic"], [86, 3, 1, "", "term_to_integer"], [86, 3, 1, "", "to_anf"], [86, 3, 1, "", "to_cnf"], [86, 3, 1, "", "to_dnf"], [86, 3, 1, "", "to_int_repr"], [86, 3, 1, "", "to_nnf"], [86, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[86, 2, 1, "", "as_set"], [86, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[86, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[86, 2, 1, "", "as_set"]], "sympy.logic": [[86, 0, 0, "-", "inference"]], "sympy.logic.inference": [[86, 3, 1, "", "satisfiable"]], "sympy.matrices": [[87, 0, 0, "-", "common"], [89, 0, 0, "-", "expressions"], [90, 0, 0, "-", "immutable"], [92, 0, 0, "-", "matrices"], [94, 0, 0, "-", "sparse"], [95, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[87, 1, 1, "", "MatrixCommon"], [87, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[87, 4, 1, "", "C"], [87, 4, 1, "", "H"], [87, 4, 1, "", "T"], [87, 2, 1, "", "__abs__"], [87, 2, 1, "", "__add__"], [87, 2, 1, "", "__getitem__"], [87, 2, 1, "", "__len__"], [87, 2, 1, "", "__mul__"], [87, 2, 1, "", "__pow__"], [87, 5, 1, "", "__weakref__"], [87, 2, 1, "", "adjoint"], [87, 2, 1, "", "applyfunc"], [87, 2, 1, "", "as_real_imag"], [87, 2, 1, "", "atoms"], [87, 2, 1, "", "col"], [87, 2, 1, "", "col_del"], [87, 2, 1, "", "col_insert"], [87, 2, 1, "", "col_join"], [87, 2, 1, "", "companion"], [87, 2, 1, "", "conjugate"], [87, 2, 1, "", "diag"], [87, 2, 1, "", "diagonal"], [87, 2, 1, "", "evalf"], [87, 2, 1, "", "expand"], [87, 2, 1, "", "extract"], [87, 2, 1, "", "eye"], [87, 4, 1, "", "free_symbols"], [87, 2, 1, "", "get_diag_blocks"], [87, 2, 1, "", "has"], [87, 2, 1, "", "hstack"], [87, 2, 1, "", "is_anti_symmetric"], [87, 2, 1, "", "is_diagonal"], [87, 4, 1, "", "is_hermitian"], [87, 4, 1, "", "is_lower"], [87, 4, 1, "", "is_lower_hessenberg"], [87, 4, 1, "", "is_square"], [87, 4, 1, "", "is_strongly_diagonally_dominant"], [87, 2, 1, "", "is_symbolic"], [87, 2, 1, "", "is_symmetric"], [87, 4, 1, "", "is_upper"], [87, 4, 1, "", "is_upper_hessenberg"], [87, 4, 1, "", "is_weakly_diagonally_dominant"], [87, 4, 1, "", "is_zero_matrix"], [87, 2, 1, "", "jordan_block"], [87, 2, 1, "", "lower_triangular"], [87, 2, 1, "", "multiply"], [87, 2, 1, "", "multiply_elementwise"], [87, 2, 1, "", "n"], [87, 2, 1, "", "ones"], [87, 2, 1, "", "permute"], [87, 2, 1, "", "permute_cols"], [87, 2, 1, "", "permute_rows"], [87, 2, 1, "", "pow"], [87, 2, 1, "", "refine"], [87, 2, 1, "", "replace"], [87, 2, 1, "", "reshape"], [87, 2, 1, "", "rmultiply"], [87, 2, 1, "", "rot90"], [87, 2, 1, "", "row"], [87, 2, 1, "", "row_del"], [87, 2, 1, "", "row_insert"], [87, 2, 1, "", "row_join"], [87, 4, 1, "", "shape"], [87, 2, 1, "", "simplify"], [87, 2, 1, "", "subs"], [87, 2, 1, "", "todod"], [87, 2, 1, "", "todok"], [87, 2, 1, "", "tolist"], [87, 2, 1, "", "trace"], [87, 2, 1, "", "transpose"], [87, 2, 1, "", "upper_triangular"], [87, 2, 1, "", "values"], [87, 2, 1, "", "vec"], [87, 2, 1, "", "vech"], [87, 2, 1, "", "vstack"], [87, 2, 1, "", "wilkinson"], [87, 2, 1, "", "xreplace"], [87, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[88, 1, 1, "", "DenseMatrix"], [92, 3, 1, "", "GramSchmidt"], [88, 5, 1, "", "Matrix"], [88, 1, 1, "", "MutableDenseMatrix"], [92, 3, 1, "", "casoratian"], [92, 3, 1, "", "diag"], [92, 3, 1, "", "eye"], [92, 3, 1, "", "hessian"], [92, 3, 1, "", "jordan_cell"], [92, 3, 1, "", "list2numpy"], [92, 3, 1, "", "matrix2numpy"], [92, 3, 1, "", "matrix_multiply_elementwise"], [92, 3, 1, "", "ones"], [92, 3, 1, "", "randMatrix"], [92, 3, 1, "", "rot_axis1"], [92, 3, 1, "", "rot_axis2"], [92, 3, 1, "", "rot_axis3"], [92, 3, 1, "", "symarray"], [92, 3, 1, "", "wronskian"], [92, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[88, 2, 1, "", "LDLdecomposition"], [88, 2, 1, "", "as_immutable"], [88, 2, 1, "", "as_mutable"], [88, 2, 1, "", "cholesky"], [88, 2, 1, "", "lower_triangular_solve"], [88, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[88, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[89, 1, 1, "", "CompanionMatrix"], [89, 1, 1, "", "FunctionMatrix"], [89, 1, 1, "", "HadamardPower"], [89, 1, 1, "", "HadamardProduct"], [89, 1, 1, "", "Identity"], [89, 1, 1, "", "Inverse"], [89, 1, 1, "", "MatAdd"], [89, 1, 1, "", "MatMul"], [89, 1, 1, "", "MatPow"], [89, 1, 1, "", "MatrixExpr"], [89, 1, 1, "", "MatrixPermute"], [89, 1, 1, "", "MatrixSet"], [89, 1, 1, "", "MatrixSymbol"], [89, 1, 1, "", "PermutationMatrix"], [89, 1, 1, "", "Trace"], [89, 1, 1, "", "Transpose"], [89, 1, 1, "", "ZeroMatrix"], [89, 0, 0, "-", "blockmatrix"], [89, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[89, 4, 1, "", "T"], [89, 2, 1, "", "as_coeff_Mul"], [89, 2, 1, "", "as_explicit"], [89, 2, 1, "", "as_mutable"], [89, 2, 1, "", "equals"], [89, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[89, 1, 1, "", "BlockDiagMatrix"], [89, 1, 1, "", "BlockMatrix"], [89, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[89, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[89, 2, 1, "", "LDUdecomposition"], [89, 2, 1, "", "LUdecomposition"], [89, 2, 1, "", "UDLdecomposition"], [89, 2, 1, "", "schur"], [89, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[90, 1, 1, "", "ImmutableDenseMatrix"], [90, 5, 1, "", "ImmutableMatrix"], [94, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[92, 1, 1, "", "MatrixBase"], [92, 1, 1, "", "MatrixCalculus"], [92, 1, 1, "", "MatrixDeterminant"], [92, 1, 1, "", "MatrixEigen"], [92, 1, 1, "", "MatrixError"], [92, 1, 1, "", "MatrixReductions"], [92, 1, 1, "", "MatrixSubspaces"], [92, 1, 1, "", "NonSquareMatrixError"], [92, 1, 1, "", "ShapeError"], [92, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[92, 4, 1, "", "D"], [92, 2, 1, "", "LDLdecomposition"], [92, 2, 1, "", "LDLsolve"], [92, 2, 1, "", "LUdecomposition"], [92, 2, 1, "", "LUdecompositionFF"], [92, 2, 1, "", "LUdecomposition_Simple"], [92, 2, 1, "", "LUsolve"], [92, 2, 1, "", "QRdecomposition"], [92, 2, 1, "", "QRsolve"], [92, 2, 1, "", "add"], [92, 2, 1, "", "analytic_func"], [92, 2, 1, "", "cholesky"], [92, 2, 1, "", "cholesky_solve"], [92, 2, 1, "", "condition_number"], [92, 2, 1, "", "connected_components"], [92, 2, 1, "", "connected_components_decomposition"], [92, 2, 1, "", "copy"], [92, 2, 1, "", "cross"], [92, 2, 1, "", "diagonal_solve"], [92, 2, 1, "", "dot"], [92, 2, 1, "", "dual"], [92, 2, 1, "", "exp"], [92, 2, 1, "", "gauss_jordan_solve"], [92, 2, 1, "", "inv"], [92, 2, 1, "", "inv_mod"], [92, 2, 1, "", "inverse_ADJ"], [92, 2, 1, "", "inverse_BLOCK"], [92, 2, 1, "", "inverse_CH"], [92, 2, 1, "", "inverse_GE"], [92, 2, 1, "", "inverse_LDL"], [92, 2, 1, "", "inverse_LU"], [92, 2, 1, "", "inverse_QR"], [92, 2, 1, "", "irregular"], [92, 2, 1, "", "is_nilpotent"], [92, 2, 1, "", "key2bounds"], [92, 2, 1, "", "key2ij"], [92, 2, 1, "", "log"], [92, 2, 1, "", "lower_triangular_solve"], [92, 2, 1, "", "norm"], [92, 2, 1, "", "normalized"], [92, 2, 1, "", "pinv"], [92, 2, 1, "", "pinv_solve"], [92, 2, 1, "", "print_nonzero"], [92, 2, 1, "", "project"], [92, 2, 1, "", "rank_decomposition"], [92, 2, 1, "", "singular_value_decomposition"], [92, 2, 1, "", "solve"], [92, 2, 1, "", "solve_least_squares"], [92, 2, 1, "", "strongly_connected_components"], [92, 2, 1, "", "strongly_connected_components_decomposition"], [92, 2, 1, "", "table"], [92, 2, 1, "", "upper_hessenberg_decomposition"], [92, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[92, 2, 1, "", "diff"], [92, 2, 1, "", "integrate"], [92, 2, 1, "", "jacobian"], [92, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[92, 2, 1, "", "adjugate"], [92, 2, 1, "", "charpoly"], [92, 2, 1, "", "cofactor"], [92, 2, 1, "", "cofactor_matrix"], [92, 2, 1, "", "det"], [92, 2, 1, "", "minor"], [92, 2, 1, "", "minor_submatrix"], [92, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[92, 2, 1, "", "bidiagonal_decomposition"], [92, 2, 1, "", "bidiagonalize"], [92, 2, 1, "", "diagonalize"], [92, 2, 1, "", "eigenvals"], [92, 2, 1, "", "eigenvects"], [92, 2, 1, "", "is_diagonalizable"], [92, 4, 1, "", "is_indefinite"], [92, 4, 1, "", "is_negative_definite"], [92, 4, 1, "", "is_negative_semidefinite"], [92, 4, 1, "", "is_positive_definite"], [92, 4, 1, "", "is_positive_semidefinite"], [92, 2, 1, "", "jordan_form"], [92, 2, 1, "", "left_eigenvects"], [92, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[92, 2, 1, "", "echelon_form"], [92, 2, 1, "", "elementary_col_op"], [92, 2, 1, "", "elementary_row_op"], [92, 4, 1, "", "is_echelon"], [92, 2, 1, "", "rank"], [92, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[92, 2, 1, "", "columnspace"], [92, 2, 1, "", "nullspace"], [92, 2, 1, "", "orthogonalize"], [92, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[93, 3, 1, "", "hermite_normal_form"], [93, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[94, 1, 1, "", "MutableSparseMatrix"], [94, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[95, 2, 1, "", "_csrtodok"], [95, 2, 1, "", "_doktocsr"], [95, 2, 1, "", "banded"]], "sympy.ntheory": [[96, 0, 0, "-", "bbp_pi"], [96, 0, 0, "-", "continued_fraction"], [96, 0, 0, "-", "digits"], [96, 0, 0, "-", "ecm"], [96, 0, 0, "-", "egyptian_fraction"], [96, 0, 0, "-", "factor_"], [96, 0, 0, "-", "generate"], [96, 1, 1, "", "mobius"], [96, 0, 0, "-", "modular"], [96, 0, 0, "-", "multinomial"], [96, 0, 0, "-", "partitions_"], [96, 0, 0, "-", "primetest"], [96, 0, 0, "-", "qs"], [96, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[96, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[96, 3, 1, "", "continued_fraction"], [96, 3, 1, "", "continued_fraction_convergents"], [96, 3, 1, "", "continued_fraction_iterator"], [96, 3, 1, "", "continued_fraction_periodic"], [96, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[96, 3, 1, "", "count_digits"], [96, 3, 1, "", "digits"], [96, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[96, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[96, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[96, 3, 1, "", "abundance"], [96, 3, 1, "", "antidivisor_count"], [96, 3, 1, "", "antidivisors"], [96, 3, 1, "", "core"], [96, 3, 1, "", "digits"], [96, 3, 1, "", "divisor_count"], [96, 1, 1, "", "divisor_sigma"], [96, 3, 1, "", "divisors"], [96, 3, 1, "", "factorint"], [96, 3, 1, "", "factorrat"], [96, 3, 1, "", "is_abundant"], [96, 3, 1, "", "is_amicable"], [96, 3, 1, "", "is_deficient"], [96, 3, 1, "", "is_mersenne_prime"], [96, 3, 1, "", "is_perfect"], [96, 3, 1, "", "mersenne_prime_exponent"], [96, 3, 1, "", "multiplicity"], [96, 3, 1, "", "perfect_power"], [96, 3, 1, "", "pollard_pm1"], [96, 3, 1, "", "pollard_rho"], [96, 3, 1, "", "primefactors"], [96, 1, 1, "", "primenu"], [96, 1, 1, "", "primeomega"], [96, 3, 1, "", "proper_divisor_count"], [96, 3, 1, "", "proper_divisors"], [96, 1, 1, "", "reduced_totient"], [96, 3, 1, "", "smoothness"], [96, 3, 1, "", "smoothness_p"], [96, 1, 1, "", "totient"], [96, 3, 1, "", "trailing"], [96, 3, 1, "", "udivisor_count"], [96, 1, 1, "", "udivisor_sigma"], [96, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[96, 1, 1, "", "Sieve"], [96, 3, 1, "", "composite"], [96, 3, 1, "", "compositepi"], [96, 3, 1, "", "cycle_length"], [96, 3, 1, "", "nextprime"], [96, 3, 1, "", "prevprime"], [96, 3, 1, "", "prime"], [96, 3, 1, "", "primepi"], [96, 3, 1, "", "primerange"], [96, 3, 1, "", "primorial"], [96, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[96, 2, 1, "", "extend"], [96, 2, 1, "", "extend_to_no"], [96, 2, 1, "", "mobiusrange"], [96, 2, 1, "", "primerange"], [96, 2, 1, "", "search"], [96, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[96, 3, 1, "", "crt"], [96, 3, 1, "", "crt1"], [96, 3, 1, "", "crt2"], [96, 3, 1, "", "solve_congruence"], [96, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[96, 3, 1, "", "binomial_coefficients"], [96, 3, 1, "", "binomial_coefficients_list"], [96, 3, 1, "", "multinomial_coefficients"], [96, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[96, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[96, 3, 1, "", "is_euler_pseudoprime"], [96, 3, 1, "", "is_extra_strong_lucas_prp"], [96, 3, 1, "", "is_gaussian_prime"], [96, 3, 1, "", "is_lucas_prp"], [96, 3, 1, "", "is_square"], [96, 3, 1, "", "is_strong_lucas_prp"], [96, 3, 1, "", "isprime"], [96, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[96, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[96, 3, 1, "", "discrete_log"], [96, 3, 1, "", "is_nthpow_residue"], [96, 3, 1, "", "is_primitive_root"], [96, 3, 1, "", "is_quad_residue"], [96, 3, 1, "", "jacobi_symbol"], [96, 3, 1, "", "legendre_symbol"], [96, 3, 1, "", "n_order"], [96, 3, 1, "", "nthroot_mod"], [96, 3, 1, "", "primitive_root"], [96, 3, 1, "", "quadratic_residues"], [96, 3, 1, "", "sqrt_mod"], [96, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[98, 1, 1, "", "LaTeXParsingError"], [98, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[98, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[98, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[98, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[98, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[98, 2, 1, "", "convert_to_c"], [98, 2, 1, "", "convert_to_expr"], [98, 2, 1, "", "convert_to_fortran"], [98, 2, 1, "", "convert_to_python"], [98, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[98, 3, 1, "", "auto_number"], [98, 3, 1, "", "auto_symbol"], [98, 3, 1, "", "convert_xor"], [98, 3, 1, "", "eval_expr"], [98, 3, 1, "", "factorial_notation"], [98, 3, 1, "", "function_exponentiation"], [98, 3, 1, "", "implicit_application"], [98, 3, 1, "", "implicit_multiplication"], [98, 3, 1, "", "implicit_multiplication_application"], [98, 3, 1, "", "lambda_notation"], [98, 3, 1, "", "parse_expr"], [98, 3, 1, "", "rationalize"], [98, 3, 1, "", "repeated_decimals"], [98, 3, 1, "", "split_symbols"], [98, 3, 1, "", "split_symbols_custom"], [98, 6, 1, "", "standard_transformations"], [98, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[99, 0, 0, "-", "beam"], [102, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[99, 1, 1, "", "Beam"], [99, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[99, 4, 1, "", "applied_loads"], [99, 2, 1, "", "apply_load"], [99, 2, 1, "", "apply_support"], [99, 4, 1, "", "area"], [99, 2, 1, "", "bending_moment"], [99, 4, 1, "", "boundary_conditions"], [99, 4, 1, "", "cross_section"], [99, 2, 1, "", "deflection"], [99, 2, 1, "", "draw"], [99, 4, 1, "", "elastic_modulus"], [99, 4, 1, "", "ild_moment"], [99, 4, 1, "", "ild_reactions"], [99, 4, 1, "", "ild_shear"], [99, 2, 1, "", "join"], [99, 4, 1, "", "length"], [99, 4, 1, "", "load"], [99, 2, 1, "", "max_bmoment"], [99, 2, 1, "", "max_deflection"], [99, 2, 1, "", "max_shear_force"], [99, 2, 1, "", "plot_bending_moment"], [99, 2, 1, "", "plot_deflection"], [99, 2, 1, "", "plot_ild_moment"], [99, 2, 1, "", "plot_ild_reactions"], [99, 2, 1, "", "plot_ild_shear"], [99, 2, 1, "", "plot_loading_results"], [99, 2, 1, "", "plot_shear_force"], [99, 2, 1, "", "plot_shear_stress"], [99, 2, 1, "", "plot_slope"], [99, 2, 1, "", "point_cflexure"], [99, 4, 1, "", "reaction_loads"], [99, 2, 1, "", "remove_load"], [99, 4, 1, "", "second_moment"], [99, 2, 1, "", "shear_force"], [99, 2, 1, "", "shear_stress"], [99, 2, 1, "", "slope"], [99, 2, 1, "", "solve_for_ild_moment"], [99, 2, 1, "", "solve_for_ild_reactions"], [99, 2, 1, "", "solve_for_ild_shear"], [99, 2, 1, "", "solve_for_reaction_loads"], [99, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[99, 2, 1, "", "angular_deflection"], [99, 2, 1, "", "apply_load"], [99, 2, 1, "", "apply_moment_load"], [99, 4, 1, "", "area"], [99, 2, 1, "", "axial_force"], [99, 2, 1, "", "axial_stress"], [99, 2, 1, "", "bending_moment"], [99, 4, 1, "", "boundary_conditions"], [99, 2, 1, "", "deflection"], [99, 4, 1, "", "load_vector"], [99, 2, 1, "", "max_bending_moment"], [99, 2, 1, "", "max_bmoment"], [99, 2, 1, "", "max_deflection"], [99, 2, 1, "", "max_shear_force"], [99, 4, 1, "", "moment_load_vector"], [99, 2, 1, "", "plot_bending_moment"], [99, 2, 1, "", "plot_deflection"], [99, 2, 1, "", "plot_loading_results"], [99, 2, 1, "", "plot_shear_force"], [99, 2, 1, "", "plot_shear_stress"], [99, 2, 1, "", "plot_slope"], [99, 2, 1, "", "polar_moment"], [99, 4, 1, "", "second_moment"], [99, 2, 1, "", "shear_force"], [99, 4, 1, "", "shear_modulus"], [99, 2, 1, "", "shear_stress"], [99, 2, 1, "", "slope"], [99, 2, 1, "", "solve_for_reaction_loads"], [99, 2, 1, "", "solve_for_torsion"], [99, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[102, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[102, 2, 1, "", "add_member"], [102, 2, 1, "", "add_node"], [102, 2, 1, "", "apply_load"], [102, 2, 1, "", "apply_support"], [102, 2, 1, "", "change_member_label"], [102, 2, 1, "", "change_node_label"], [102, 4, 1, "", "internal_forces"], [102, 4, 1, "", "loads"], [102, 4, 1, "", "member_labels"], [102, 4, 1, "", "members"], [102, 4, 1, "", "node_labels"], [102, 4, 1, "", "node_positions"], [102, 4, 1, "", "nodes"], [102, 4, 1, "", "reaction_loads"], [102, 2, 1, "", "remove_load"], [102, 2, 1, "", "remove_member"], [102, 2, 1, "", "remove_node"], [102, 2, 1, "", "remove_support"], [102, 2, 1, "", "solve"], [102, 4, 1, "", "supports"]], "sympy.physics": [[105, 0, 0, "-", "control"], [108, 0, 0, "-", "hydrogen"], [109, 0, 0, "-", "matrices"], [130, 0, 0, "-", "mechanics"], [145, 0, 0, "-", "paulialgebra"], [146, 0, 0, "-", "qho_1d"], [170, 0, 0, "-", "secondquant"], [171, 0, 0, "-", "sho"], [187, 0, 0, "-", "vector"], [190, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[104, 2, 1, "", "bode_magnitude_numerical_data"], [104, 2, 1, "", "bode_magnitude_plot"], [104, 2, 1, "", "bode_phase_numerical_data"], [104, 2, 1, "", "bode_phase_plot"], [104, 2, 1, "", "bode_plot"], [104, 2, 1, "", "impulse_response_numerical_data"], [104, 2, 1, "", "impulse_response_plot"], [104, 2, 1, "", "pole_zero_numerical_data"], [104, 2, 1, "", "pole_zero_plot"], [104, 2, 1, "", "ramp_response_numerical_data"], [104, 2, 1, "", "ramp_response_plot"], [104, 2, 1, "", "step_response_numerical_data"], [104, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[106, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[106, 1, 1, "", "Feedback"], [106, 1, 1, "", "MIMOFeedback"], [106, 1, 1, "", "MIMOParallel"], [106, 1, 1, "", "MIMOSeries"], [106, 1, 1, "", "Parallel"], [106, 1, 1, "", "Series"], [106, 1, 1, "", "TransferFunction"], [106, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[106, 2, 1, "", "doit"], [106, 4, 1, "", "sensitivity"], [106, 4, 1, "", "sign"], [106, 4, 1, "", "sys1"], [106, 4, 1, "", "sys2"], [106, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[106, 2, 1, "", "doit"], [106, 4, 1, "", "sensitivity"], [106, 4, 1, "", "sign"], [106, 4, 1, "", "sys1"], [106, 4, 1, "", "sys2"], [106, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[106, 2, 1, "", "doit"], [106, 4, 1, "", "num_inputs"], [106, 4, 1, "", "num_outputs"], [106, 4, 1, "", "shape"], [106, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[106, 2, 1, "", "doit"], [106, 4, 1, "", "num_inputs"], [106, 4, 1, "", "num_outputs"], [106, 4, 1, "", "shape"], [106, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[106, 2, 1, "", "doit"], [106, 4, 1, "", "is_biproper"], [106, 4, 1, "", "is_proper"], [106, 4, 1, "", "is_strictly_proper"], [106, 2, 1, "", "to_expr"], [106, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[106, 2, 1, "", "doit"], [106, 4, 1, "", "is_biproper"], [106, 4, 1, "", "is_proper"], [106, 4, 1, "", "is_strictly_proper"], [106, 2, 1, "", "to_expr"], [106, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[106, 2, 1, "", "dc_gain"], [106, 4, 1, "", "den"], [106, 2, 1, "", "expand"], [106, 2, 1, "", "from_rational_expression"], [106, 4, 1, "", "is_biproper"], [106, 4, 1, "", "is_proper"], [106, 2, 1, "", "is_stable"], [106, 4, 1, "", "is_strictly_proper"], [106, 4, 1, "", "num"], [106, 2, 1, "", "poles"], [106, 2, 1, "", "to_expr"], [106, 4, 1, "", "var"], [106, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[106, 2, 1, "", "elem_poles"], [106, 2, 1, "", "elem_zeros"], [106, 2, 1, "", "expand"], [106, 2, 1, "", "from_Matrix"], [106, 4, 1, "", "num_inputs"], [106, 4, 1, "", "num_outputs"], [106, 4, 1, "", "shape"], [106, 2, 1, "", "transpose"], [106, 4, 1, "", "var"]], "sympy.physics.hep": [[107, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[107, 3, 1, "", "extract_type_tens"], [107, 3, 1, "", "gamma_trace"], [107, 3, 1, "", "kahane_simplify"], [107, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[108, 3, 1, "", "E_nl"], [108, 3, 1, "", "E_nl_dirac"], [108, 3, 1, "", "Psi_nlm"], [108, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[109, 3, 1, "", "mdft"], [109, 3, 1, "", "mgamma"], [109, 3, 1, "", "msigma"], [109, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[111, 0, 0, "-", "body"], [112, 3, 1, "", "find_dynamicsymbols"], [114, 0, 0, "-", "joint"], [114, 0, 0, "-", "jointsmethod"], [115, 0, 0, "-", "kane"], [115, 0, 0, "-", "lagrange"], [116, 0, 0, "-", "linearize"], [112, 3, 1, "", "msubs"], [117, 0, 0, "-", "particle"], [117, 0, 0, "-", "rigidbody"], [119, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[111, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[111, 2, 1, "", "ang_vel_in"], [111, 2, 1, "", "apply_force"], [111, 2, 1, "", "apply_torque"], [111, 2, 1, "", "clear_loads"], [111, 2, 1, "", "dcm"], [111, 4, 1, "", "inertia"], [111, 2, 1, "", "kinetic_energy"], [111, 2, 1, "", "masscenter_vel"], [111, 2, 1, "", "parallel_axis"], [111, 2, 1, "", "remove_load"], [111, 4, 1, "", "x"], [111, 4, 1, "", "y"], [111, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[117, 3, 1, "", "Lagrangian"], [117, 3, 1, "", "angular_momentum"], [117, 3, 1, "", "inertia"], [117, 3, 1, "", "inertia_of_point_mass"], [117, 3, 1, "", "kinetic_energy"], [117, 3, 1, "", "linear_momentum"], [117, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[114, 1, 1, "", "CylindricalJoint"], [114, 1, 1, "", "Joint"], [114, 1, 1, "", "PinJoint"], [114, 1, 1, "", "PlanarJoint"], [114, 1, 1, "", "PrismaticJoint"], [114, 1, 1, "", "SphericalJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[114, 4, 1, "", "joint_axis"], [114, 4, 1, "", "rotation_coordinate"], [114, 4, 1, "", "rotation_speed"], [114, 4, 1, "", "translation_coordinate"], [114, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[114, 4, 1, "", "child"], [114, 4, 1, "", "child_axis"], [114, 4, 1, "", "child_point"], [114, 4, 1, "", "coordinates"], [114, 4, 1, "", "kdes"], [114, 4, 1, "", "name"], [114, 4, 1, "", "parent"], [114, 4, 1, "", "parent_axis"], [114, 4, 1, "", "parent_point"], [114, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[114, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[114, 4, 1, "", "planar_coordinates"], [114, 4, 1, "", "planar_speeds"], [114, 4, 1, "", "planar_vectors"], [114, 4, 1, "", "rotation_axis"], [114, 4, 1, "", "rotation_coordinate"], [114, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[114, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[114, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[114, 4, 1, "", "bodies"], [114, 4, 1, "", "forcing"], [114, 4, 1, "", "forcing_full"], [114, 2, 1, "", "form_eoms"], [114, 4, 1, "", "kdes"], [114, 4, 1, "", "loads"], [114, 4, 1, "", "mass_matrix"], [114, 4, 1, "", "mass_matrix_full"], [114, 4, 1, "", "method"], [114, 4, 1, "", "q"], [114, 2, 1, "", "rhs"], [114, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[115, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[115, 4, 1, "", "auxiliary_eqs"], [115, 4, 1, "", "forcing"], [115, 4, 1, "", "forcing_full"], [115, 2, 1, "", "kanes_equations"], [115, 2, 1, "", "kindiffdict"], [115, 2, 1, "", "linearize"], [115, 4, 1, "", "mass_matrix"], [115, 4, 1, "", "mass_matrix_full"], [115, 2, 1, "", "rhs"], [115, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[115, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[115, 4, 1, "", "forcing"], [115, 4, 1, "", "forcing_full"], [115, 2, 1, "", "form_lagranges_equations"], [115, 2, 1, "", "linearize"], [115, 4, 1, "", "mass_matrix"], [115, 4, 1, "", "mass_matrix_full"], [115, 2, 1, "", "rhs"], [115, 2, 1, "", "solve_multipliers"], [115, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[116, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[116, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[117, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[117, 2, 1, "", "angular_momentum"], [117, 2, 1, "", "kinetic_energy"], [117, 2, 1, "", "linear_momentum"], [117, 4, 1, "", "mass"], [117, 2, 1, "", "parallel_axis"], [117, 4, 1, "", "point"], [117, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[117, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[117, 2, 1, "", "angular_momentum"], [117, 4, 1, "", "central_inertia"], [117, 4, 1, "", "frame"], [117, 4, 1, "", "inertia"], [117, 2, 1, "", "kinetic_energy"], [117, 2, 1, "", "linear_momentum"], [117, 4, 1, "", "mass"], [117, 4, 1, "", "masscenter"], [117, 2, 1, "", "parallel_axis"], [117, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[119, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[119, 4, 1, "", "alg_con"], [119, 4, 1, "", "bodies"], [119, 4, 1, "", "comb_explicit_rhs"], [119, 4, 1, "", "comb_implicit_mat"], [119, 4, 1, "", "comb_implicit_rhs"], [119, 2, 1, "", "compute_explicit_form"], [119, 2, 1, "", "constant_symbols"], [119, 4, 1, "", "coordinates"], [119, 4, 1, "", "dyn_implicit_mat"], [119, 4, 1, "", "dyn_implicit_rhs"], [119, 2, 1, "", "dynamic_symbols"], [119, 4, 1, "", "kin_explicit_rhs"], [119, 4, 1, "", "loads"], [119, 4, 1, "", "speeds"], [119, 4, 1, "", "states"]], "sympy.physics.optics": [[139, 0, 0, "-", "gaussopt"], [141, 0, 0, "-", "medium"], [142, 0, 0, "-", "polarization"], [143, 0, 0, "-", "utils"], [144, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[139, 1, 1, "", "BeamParameter"], [139, 1, 1, "", "CurvedMirror"], [139, 1, 1, "", "CurvedRefraction"], [139, 1, 1, "", "FlatMirror"], [139, 1, 1, "", "FlatRefraction"], [139, 1, 1, "", "FreeSpace"], [139, 1, 1, "", "GeometricRay"], [139, 1, 1, "", "RayTransferMatrix"], [139, 1, 1, "", "ThinLens"], [139, 3, 1, "", "conjugate_gauss_beams"], [139, 3, 1, "", "gaussian_conj"], [139, 3, 1, "", "geometric_conj_ab"], [139, 3, 1, "", "geometric_conj_af"], [139, 3, 1, "", "geometric_conj_bf"], [139, 3, 1, "", "rayleigh2waist"], [139, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[139, 4, 1, "", "divergence"], [139, 4, 1, "", "gouy"], [139, 4, 1, "", "q"], [139, 4, 1, "", "radius"], [139, 4, 1, "", "w"], [139, 4, 1, "", "w_0"], [139, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[139, 4, 1, "", "angle"], [139, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[139, 4, 1, "", "A"], [139, 4, 1, "", "B"], [139, 4, 1, "", "C"], [139, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[141, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[141, 4, 1, "", "refractive_index"], [141, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[142, 3, 1, "", "half_wave_retarder"], [142, 3, 1, "", "jones_2_stokes"], [142, 3, 1, "", "jones_vector"], [142, 3, 1, "", "linear_polarizer"], [142, 3, 1, "", "mueller_matrix"], [142, 3, 1, "", "phase_retarder"], [142, 3, 1, "", "polarizing_beam_splitter"], [142, 3, 1, "", "quarter_wave_retarder"], [142, 3, 1, "", "reflective_filter"], [142, 3, 1, "", "stokes_vector"], [142, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[143, 3, 1, "", "brewster_angle"], [143, 3, 1, "", "critical_angle"], [143, 3, 1, "", "deviation"], [143, 3, 1, "", "fresnel_coefficients"], [143, 3, 1, "", "hyperfocal_distance"], [143, 3, 1, "", "lens_formula"], [143, 3, 1, "", "lens_makers_formula"], [143, 3, 1, "", "mirror_formula"], [143, 3, 1, "", "refraction_angle"], [143, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[144, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[144, 4, 1, "", "amplitude"], [144, 4, 1, "", "angular_velocity"], [144, 4, 1, "", "frequency"], [144, 4, 1, "", "n"], [144, 4, 1, "", "phase"], [144, 4, 1, "", "speed"], [144, 4, 1, "", "time_period"], [144, 4, 1, "", "wavelength"], [144, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[145, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[146, 3, 1, "", "E_n"], [146, 3, 1, "", "coherent_state"], [146, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[147, 0, 0, "-", "anticommutator"], [148, 0, 0, "-", "cartesian"], [149, 0, 0, "-", "cg"], [150, 0, 0, "-", "circuitplot"], [151, 0, 0, "-", "commutator"], [152, 0, 0, "-", "constants"], [153, 0, 0, "-", "dagger"], [154, 0, 0, "-", "gate"], [155, 0, 0, "-", "grover"], [156, 0, 0, "-", "hilbert"], [158, 0, 0, "-", "innerproduct"], [159, 0, 0, "-", "operator"], [160, 0, 0, "-", "operatorset"], [161, 0, 0, "-", "piab"], [162, 0, 0, "-", "qapply"], [163, 0, 0, "-", "qft"], [164, 0, 0, "-", "qubit"], [165, 0, 0, "-", "represent"], [166, 0, 0, "-", "shor"], [167, 0, 0, "-", "spin"], [168, 0, 0, "-", "state"], [169, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[147, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[147, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[148, 1, 1, "", "PositionBra3D"], [148, 1, 1, "", "PositionKet3D"], [148, 1, 1, "", "PositionState3D"], [148, 1, 1, "", "PxBra"], [148, 1, 1, "", "PxKet"], [148, 1, 1, "", "PxOp"], [148, 1, 1, "", "XBra"], [148, 1, 1, "", "XKet"], [148, 1, 1, "", "XOp"], [148, 1, 1, "", "YOp"], [148, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[148, 4, 1, "", "position_x"], [148, 4, 1, "", "position_y"], [148, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[148, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[148, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[148, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[148, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[149, 1, 1, "", "CG"], [149, 1, 1, "", "Wigner3j"], [149, 1, 1, "", "Wigner6j"], [149, 1, 1, "", "Wigner9j"], [149, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[150, 1, 1, "", "CircuitPlot"], [150, 3, 1, "", "CreateCGate"], [150, 1, 1, "", "Mx"], [150, 1, 1, "", "Mz"], [150, 3, 1, "", "circuit_plot"], [150, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[150, 2, 1, "", "control_line"], [150, 2, 1, "", "control_point"], [150, 2, 1, "", "not_point"], [150, 2, 1, "", "one_qubit_box"], [150, 2, 1, "", "swap_point"], [150, 2, 1, "", "two_qubit_box"], [150, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[151, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[151, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[152, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[153, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[154, 1, 1, "", "CGate"], [154, 1, 1, "", "CGateS"], [154, 5, 1, "", "CNOT"], [154, 1, 1, "", "CNotGate"], [154, 1, 1, "", "Gate"], [154, 5, 1, "", "H"], [154, 1, 1, "", "HadamardGate"], [154, 1, 1, "", "IdentityGate"], [154, 1, 1, "", "OneQubitGate"], [154, 5, 1, "", "Phase"], [154, 1, 1, "", "PhaseGate"], [154, 5, 1, "", "S"], [154, 5, 1, "", "SWAP"], [154, 1, 1, "", "SwapGate"], [154, 5, 1, "", "T"], [154, 1, 1, "", "TGate"], [154, 1, 1, "", "TwoQubitGate"], [154, 1, 1, "", "UGate"], [154, 5, 1, "", "X"], [154, 1, 1, "", "XGate"], [154, 5, 1, "", "Y"], [154, 1, 1, "", "YGate"], [154, 5, 1, "", "Z"], [154, 1, 1, "", "ZGate"], [154, 3, 1, "", "gate_simp"], [154, 3, 1, "", "gate_sort"], [154, 3, 1, "", "normalized"], [154, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[154, 4, 1, "", "controls"], [154, 2, 1, "", "decompose"], [154, 2, 1, "", "eval_controls"], [154, 4, 1, "", "gate"], [154, 4, 1, "", "min_qubits"], [154, 4, 1, "", "nqubits"], [154, 2, 1, "", "plot_gate"], [154, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[154, 4, 1, "", "controls"], [154, 4, 1, "", "gate"], [154, 4, 1, "", "min_qubits"], [154, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[154, 2, 1, "", "get_target_matrix"], [154, 4, 1, "", "min_qubits"], [154, 4, 1, "", "nqubits"], [154, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[154, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[154, 2, 1, "", "get_target_matrix"], [154, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[155, 1, 1, "", "OracleGate"], [155, 1, 1, "", "WGate"], [155, 3, 1, "", "apply_grover"], [155, 3, 1, "", "grover_iteration"], [155, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[155, 4, 1, "", "search_function"], [155, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[156, 1, 1, "", "ComplexSpace"], [156, 1, 1, "", "DirectSumHilbertSpace"], [156, 1, 1, "", "FockSpace"], [156, 1, 1, "", "HilbertSpace"], [156, 1, 1, "", "L2"], [156, 1, 1, "", "TensorPowerHilbertSpace"], [156, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[156, 2, 1, "", "eval"], [156, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[156, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[156, 2, 1, "", "eval"], [156, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[158, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[159, 1, 1, "", "DifferentialOperator"], [159, 1, 1, "", "HermitianOperator"], [159, 1, 1, "", "IdentityOperator"], [159, 1, 1, "", "Operator"], [159, 1, 1, "", "OuterProduct"], [159, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[159, 4, 1, "", "expr"], [159, 4, 1, "", "free_symbols"], [159, 4, 1, "", "function"], [159, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[159, 4, 1, "", "bra"], [159, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[160, 3, 1, "", "operators_to_state"], [160, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[161, 1, 1, "", "PIABBra"], [161, 1, 1, "", "PIABHamiltonian"], [161, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[162, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[163, 1, 1, "", "IQFT"], [163, 1, 1, "", "QFT"], [163, 5, 1, "", "Rk"], [163, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[163, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[163, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[164, 1, 1, "", "IntQubit"], [164, 1, 1, "", "IntQubitBra"], [164, 1, 1, "", "Qubit"], [164, 1, 1, "", "QubitBra"], [164, 3, 1, "", "matrix_to_density"], [164, 3, 1, "", "matrix_to_qubit"], [164, 3, 1, "", "measure_all"], [164, 3, 1, "", "measure_all_oneshot"], [164, 3, 1, "", "measure_partial"], [164, 3, 1, "", "measure_partial_oneshot"], [164, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[165, 3, 1, "", "enumerate_states"], [165, 3, 1, "", "get_basis"], [165, 3, 1, "", "integrate_result"], [165, 3, 1, "", "rep_expectation"], [165, 3, 1, "", "rep_innerproduct"], [165, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[166, 1, 1, "", "CMod"], [166, 3, 1, "", "period_find"], [166, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[166, 4, 1, "", "N"], [166, 4, 1, "", "a"], [166, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[167, 1, 1, "", "J2Op"], [167, 1, 1, "", "JxBra"], [167, 1, 1, "", "JxBraCoupled"], [167, 1, 1, "", "JxKet"], [167, 1, 1, "", "JxKetCoupled"], [167, 1, 1, "", "JyBra"], [167, 1, 1, "", "JyBraCoupled"], [167, 1, 1, "", "JyKet"], [167, 1, 1, "", "JyKetCoupled"], [167, 1, 1, "", "JzBra"], [167, 1, 1, "", "JzBraCoupled"], [167, 1, 1, "", "JzKet"], [167, 1, 1, "", "JzKetCoupled"], [167, 1, 1, "", "JzOp"], [167, 1, 1, "", "Rotation"], [167, 1, 1, "", "WignerD"], [167, 3, 1, "", "couple"], [167, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[167, 2, 1, "", "D"], [167, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[168, 1, 1, "", "Bra"], [168, 1, 1, "", "BraBase"], [168, 1, 1, "", "Ket"], [168, 1, 1, "", "KetBase"], [168, 1, 1, "", "OrthogonalBra"], [168, 1, 1, "", "OrthogonalKet"], [168, 1, 1, "", "OrthogonalState"], [168, 1, 1, "", "State"], [168, 1, 1, "", "StateBase"], [168, 1, 1, "", "TimeDepBra"], [168, 1, 1, "", "TimeDepKet"], [168, 1, 1, "", "TimeDepState"], [168, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[168, 4, 1, "", "dual"], [168, 2, 1, "", "dual_class"], [168, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[168, 4, 1, "", "label"], [168, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[168, 4, 1, "", "expr"], [168, 4, 1, "", "is_commutative"], [168, 4, 1, "", "is_normalized"], [168, 4, 1, "", "limits"], [168, 4, 1, "", "norm"], [168, 2, 1, "", "normalize"], [168, 2, 1, "", "prob"], [168, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[169, 1, 1, "", "TensorProduct"], [169, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[170, 1, 1, "", "AnnihilateBoson"], [170, 1, 1, "", "AnnihilateFermion"], [170, 1, 1, "", "AntiSymmetricTensor"], [170, 5, 1, "", "B"], [170, 5, 1, "", "BBra"], [170, 5, 1, "", "BKet"], [170, 5, 1, "", "Bd"], [170, 1, 1, "", "BosonicBasis"], [170, 1, 1, "", "Commutator"], [170, 1, 1, "", "CreateBoson"], [170, 1, 1, "", "CreateFermion"], [170, 1, 1, "", "Dagger"], [170, 5, 1, "", "F"], [170, 5, 1, "", "FBra"], [170, 5, 1, "", "FKet"], [170, 5, 1, "", "Fd"], [170, 1, 1, "", "FixedBosonicBasis"], [170, 1, 1, "", "FockState"], [170, 1, 1, "", "FockStateBosonBra"], [170, 1, 1, "", "FockStateBosonKet"], [170, 1, 1, "", "FockStateBra"], [170, 1, 1, "", "FockStateFermionBra"], [170, 1, 1, "", "FockStateFermionKet"], [170, 1, 1, "", "FockStateKet"], [170, 1, 1, "", "InnerProduct"], [170, 1, 1, "", "KroneckerDelta"], [170, 1, 1, "", "NO"], [170, 1, 1, "", "PermutationOperator"], [170, 1, 1, "", "VarBosonicBasis"], [170, 3, 1, "", "apply_operators"], [170, 3, 1, "", "contraction"], [170, 3, 1, "", "evaluate_deltas"], [170, 3, 1, "", "matrix_rep"], [170, 3, 1, "", "simplify_index_permutations"], [170, 3, 1, "", "substitute_dummies"], [170, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[170, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[170, 2, 1, "", "apply_operator"], [170, 4, 1, "", "is_only_q_annihilator"], [170, 4, 1, "", "is_only_q_creator"], [170, 4, 1, "", "is_q_annihilator"], [170, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[170, 4, 1, "", "lower"], [170, 4, 1, "", "symbol"], [170, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[170, 2, 1, "", "doit"], [170, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[170, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[170, 2, 1, "", "apply_operator"], [170, 4, 1, "", "is_only_q_annihilator"], [170, 4, 1, "", "is_only_q_creator"], [170, 4, 1, "", "is_q_annihilator"], [170, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[170, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[170, 2, 1, "", "index"], [170, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[170, 4, 1, "", "bra"], [170, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[170, 2, 1, "", "eval"], [170, 4, 1, "", "indices_contain_equal_information"], [170, 4, 1, "", "is_above_fermi"], [170, 4, 1, "", "is_below_fermi"], [170, 4, 1, "", "is_only_above_fermi"], [170, 4, 1, "", "is_only_below_fermi"], [170, 4, 1, "", "killable_index"], [170, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[170, 2, 1, "", "doit"], [170, 2, 1, "", "get_subNO"], [170, 4, 1, "", "has_q_annihilators"], [170, 4, 1, "", "has_q_creators"], [170, 2, 1, "", "iter_q_annihilators"], [170, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[170, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[170, 2, 1, "", "index"], [170, 2, 1, "", "state"]], "sympy.physics.sho": [[171, 3, 1, "", "E_nl"], [171, 3, 1, "", "R_nl"]], "sympy.physics.units": [[172, 0, 0, "-", "dimensions"], [176, 0, 0, "-", "prefixes"], [177, 0, 0, "-", "quantities"], [178, 0, 0, "-", "unitsystem"], [177, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[172, 1, 1, "", "Dimension"], [172, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[172, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[172, 4, 1, "", "can_transf_matrix"], [172, 4, 1, "", "dim"], [172, 2, 1, "", "dim_can_vector"], [172, 2, 1, "", "dim_vector"], [172, 4, 1, "", "inv_can_transf_matrix"], [172, 4, 1, "", "is_consistent"], [172, 2, 1, "", "is_dimensionless"], [172, 4, 1, "", "list_can_dims"], [172, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[176, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[177, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[177, 4, 1, "", "abbrev"], [177, 2, 1, "", "convert_to"], [177, 4, 1, "", "free_symbols"], [177, 4, 1, "", "is_prefixed"], [177, 4, 1, "", "scale_factor"], [177, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[178, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[178, 4, 1, "", "dim"], [178, 2, 1, "", "extend"], [178, 2, 1, "", "get_units_non_prefixed"], [178, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[177, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[180, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[180, 2, 1, "", "applyfunc"], [180, 2, 1, "", "cross"], [180, 2, 1, "", "doit"], [180, 2, 1, "", "dot"], [180, 2, 1, "", "dt"], [180, 2, 1, "", "express"], [180, 4, 1, "", "func"], [180, 2, 1, "", "simplify"], [180, 2, 1, "", "subs"], [180, 2, 1, "", "to_matrix"], [180, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[182, 3, 1, "", "dynamicsymbols"], [184, 0, 0, "-", "functions"], [184, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[181, 3, 1, "", "curl"], [181, 3, 1, "", "divergence"], [181, 3, 1, "", "gradient"], [181, 3, 1, "", "is_conservative"], [181, 3, 1, "", "is_solenoidal"], [181, 3, 1, "", "scalar_potential"], [181, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[180, 1, 1, "", "CoordinateSym"], [180, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[180, 2, 1, "", "ang_acc_in"], [180, 2, 1, "", "ang_vel_in"], [180, 2, 1, "", "dcm"], [180, 2, 1, "", "orient"], [180, 2, 1, "", "orient_axis"], [180, 2, 1, "", "orient_body_fixed"], [180, 2, 1, "", "orient_explicit"], [180, 2, 1, "", "orient_quaternion"], [180, 2, 1, "", "orient_space_fixed"], [180, 2, 1, "", "orientnew"], [180, 2, 1, "", "partial_velocity"], [180, 2, 1, "", "set_ang_acc"], [180, 2, 1, "", "set_ang_vel"], [180, 2, 1, "", "variable_map"], [180, 4, 1, "", "x"], [180, 4, 1, "", "y"], [180, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[182, 3, 1, "", "cross"], [182, 3, 1, "", "dot"], [182, 3, 1, "", "express"], [184, 3, 1, "", "get_motion_params"], [184, 3, 1, "", "kinematic_equations"], [182, 3, 1, "", "outer"], [184, 3, 1, "", "partial_velocity"], [182, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[184, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[184, 2, 1, "", "a1pt_theory"], [184, 2, 1, "", "a2pt_theory"], [184, 2, 1, "", "acc"], [184, 2, 1, "", "locatenew"], [184, 2, 1, "", "partial_velocity"], [184, 2, 1, "", "pos_from"], [184, 2, 1, "", "set_acc"], [184, 2, 1, "", "set_pos"], [184, 2, 1, "", "set_vel"], [184, 2, 1, "", "v1pt_theory"], [184, 2, 1, "", "v2pt_theory"], [184, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[185, 3, 1, "", "init_vprinting"], [185, 3, 1, "", "vlatex"], [185, 3, 1, "", "vpprint"], [185, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[180, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[180, 2, 1, "", "angle_between"], [180, 2, 1, "", "applyfunc"], [180, 2, 1, "", "cross"], [180, 2, 1, "", "diff"], [180, 2, 1, "", "doit"], [180, 2, 1, "", "dot"], [180, 2, 1, "", "dt"], [180, 2, 1, "", "express"], [180, 2, 1, "", "free_dynamicsymbols"], [180, 2, 1, "", "free_symbols"], [180, 4, 1, "", "func"], [180, 2, 1, "", "magnitude"], [180, 2, 1, "", "normalize"], [180, 2, 1, "", "outer"], [180, 2, 1, "", "separate"], [180, 2, 1, "", "simplify"], [180, 2, 1, "", "subs"], [180, 2, 1, "", "to_matrix"], [180, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[190, 3, 1, "", "clebsch_gordan"], [190, 3, 1, "", "dot_rot_grad_Ynm"], [190, 3, 1, "", "gaunt"], [190, 3, 1, "", "racah"], [190, 3, 1, "", "real_gaunt"], [190, 3, 1, "", "wigner_3j"], [190, 3, 1, "", "wigner_6j"], [190, 3, 1, "", "wigner_9j"], [190, 3, 1, "", "wigner_d"], [190, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[191, 0, 0, "-", "plot"], [191, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[191, 1, 1, "", "BaseBackend"], [191, 1, 1, "", "BaseSeries"], [191, 1, 1, "", "Line2DBaseSeries"], [191, 1, 1, "", "Line3DBaseSeries"], [191, 1, 1, "", "LineOver1DRangeSeries"], [191, 1, 1, "", "MatplotlibBackend"], [191, 1, 1, "", "Parametric2DLineSeries"], [191, 1, 1, "", "Parametric3DLineSeries"], [191, 1, 1, "", "ParametricSurfaceSeries"], [191, 1, 1, "", "Plot"], [191, 1, 1, "", "PlotGrid"], [191, 1, 1, "", "SurfaceBaseSeries"], [191, 1, 1, "", "SurfaceOver2DRangeSeries"], [191, 1, 1, "", "TextBackend"], [191, 3, 1, "", "plot"], [191, 3, 1, "", "plot3d"], [191, 3, 1, "", "plot3d_parametric_line"], [191, 3, 1, "", "plot3d_parametric_surface"], [191, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[191, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[191, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[191, 2, 1, "", "get_segments"], [191, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[191, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[191, 2, 1, "", "append"], [191, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[191, 1, 1, "", "ImplicitSeries"], [191, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[191, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[192, 1, 1, "", "ExtensionElement"], [192, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[192, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[192, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[192, 1, 1, "", "ModuleHomomorphism"], [192, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[192, 2, 1, "", "image"], [192, 2, 1, "", "is_injective"], [192, 2, 1, "", "is_isomorphism"], [192, 2, 1, "", "is_surjective"], [192, 2, 1, "", "is_zero"], [192, 2, 1, "", "kernel"], [192, 2, 1, "", "quotient_codomain"], [192, 2, 1, "", "quotient_domain"], [192, 2, 1, "", "restrict_codomain"], [192, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[192, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[192, 2, 1, "", "contains"], [192, 2, 1, "", "depth"], [192, 2, 1, "", "height"], [192, 2, 1, "", "intersect"], [192, 2, 1, "", "is_maximal"], [192, 2, 1, "", "is_primary"], [192, 2, 1, "", "is_prime"], [192, 2, 1, "", "is_principal"], [192, 2, 1, "", "is_radical"], [192, 2, 1, "", "is_whole_ring"], [192, 2, 1, "", "is_zero"], [192, 2, 1, "", "product"], [192, 2, 1, "", "quotient"], [192, 2, 1, "", "radical"], [192, 2, 1, "", "reduce_element"], [192, 2, 1, "", "saturate"], [192, 2, 1, "", "subset"], [192, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[192, 1, 1, "", "FreeModule"], [192, 1, 1, "", "FreeModuleElement"], [192, 1, 1, "", "Module"], [192, 1, 1, "", "QuotientModule"], [192, 1, 1, "", "QuotientModuleElement"], [192, 1, 1, "", "SubModule"], [192, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[192, 2, 1, "", "basis"], [192, 2, 1, "", "convert"], [192, 5, 1, "", "dtype"], [192, 2, 1, "", "identity_hom"], [192, 2, 1, "", "is_submodule"], [192, 2, 1, "", "is_zero"], [192, 2, 1, "", "multiply_ideal"], [192, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[192, 2, 1, "", "contains"], [192, 2, 1, "", "convert"], [192, 2, 1, "", "identity_hom"], [192, 2, 1, "", "is_submodule"], [192, 2, 1, "", "is_zero"], [192, 2, 1, "", "multiply_ideal"], [192, 2, 1, "", "quotient_module"], [192, 2, 1, "", "submodule"], [192, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[192, 2, 1, "", "convert"], [192, 5, 1, "", "dtype"], [192, 2, 1, "", "identity_hom"], [192, 2, 1, "", "is_submodule"], [192, 2, 1, "", "is_zero"], [192, 2, 1, "", "quotient_hom"], [192, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[192, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[192, 2, 1, "", "convert"], [192, 2, 1, "", "identity_hom"], [192, 2, 1, "", "in_terms_of_generators"], [192, 2, 1, "", "inclusion_hom"], [192, 2, 1, "", "intersect"], [192, 2, 1, "", "is_full_module"], [192, 2, 1, "", "is_submodule"], [192, 2, 1, "", "is_zero"], [192, 2, 1, "", "module_quotient"], [192, 2, 1, "", "multiply_ideal"], [192, 2, 1, "", "quotient_module"], [192, 2, 1, "", "reduce_element"], [192, 2, 1, "", "submodule"], [192, 2, 1, "", "syzygy_module"], [192, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[192, 2, 1, "", "is_full_module"], [192, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[201, 3, 1, "", "andre_poly"], [201, 3, 1, "", "bernoulli_c_poly"], [201, 3, 1, "", "bernoulli_poly"], [201, 3, 1, "", "euler_poly"], [201, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[201, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[198, 3, 1, "", "dmp_abs"], [198, 3, 1, "", "dmp_add"], [198, 3, 1, "", "dmp_add_ground"], [198, 3, 1, "", "dmp_add_mul"], [198, 3, 1, "", "dmp_add_term"], [198, 3, 1, "", "dmp_div"], [198, 3, 1, "", "dmp_expand"], [198, 3, 1, "", "dmp_exquo"], [198, 3, 1, "", "dmp_exquo_ground"], [198, 3, 1, "", "dmp_ff_div"], [198, 3, 1, "", "dmp_l1_norm"], [198, 3, 1, "", "dmp_max_norm"], [198, 3, 1, "", "dmp_mul"], [198, 3, 1, "", "dmp_mul_ground"], [198, 3, 1, "", "dmp_mul_term"], [198, 3, 1, "", "dmp_neg"], [198, 3, 1, "", "dmp_pdiv"], [198, 3, 1, "", "dmp_pexquo"], [198, 3, 1, "", "dmp_pow"], [198, 3, 1, "", "dmp_pquo"], [198, 3, 1, "", "dmp_prem"], [198, 3, 1, "", "dmp_quo"], [198, 3, 1, "", "dmp_quo_ground"], [198, 3, 1, "", "dmp_rem"], [198, 3, 1, "", "dmp_rr_div"], [198, 3, 1, "", "dmp_sqr"], [198, 3, 1, "", "dmp_sub"], [198, 3, 1, "", "dmp_sub_ground"], [198, 3, 1, "", "dmp_sub_mul"], [198, 3, 1, "", "dmp_sub_term"], [198, 3, 1, "", "dup_lshift"], [198, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[198, 3, 1, "", "dmp_LC"], [198, 3, 1, "", "dmp_TC"], [198, 3, 1, "", "dmp_apply_pairs"], [198, 3, 1, "", "dmp_convert"], [198, 3, 1, "", "dmp_copy"], [198, 3, 1, "", "dmp_deflate"], [198, 3, 1, "", "dmp_degree"], [198, 3, 1, "", "dmp_degree_in"], [198, 3, 1, "", "dmp_degree_list"], [198, 3, 1, "", "dmp_eject"], [198, 3, 1, "", "dmp_exclude"], [198, 3, 1, "", "dmp_from_dict"], [198, 3, 1, "", "dmp_from_sympy"], [198, 3, 1, "", "dmp_ground"], [198, 3, 1, "", "dmp_ground_LC"], [198, 3, 1, "", "dmp_ground_TC"], [198, 3, 1, "", "dmp_ground_nth"], [198, 3, 1, "", "dmp_ground_p"], [198, 3, 1, "", "dmp_grounds"], [198, 3, 1, "", "dmp_include"], [198, 3, 1, "", "dmp_inflate"], [198, 3, 1, "", "dmp_inject"], [198, 3, 1, "", "dmp_list_terms"], [198, 3, 1, "", "dmp_multi_deflate"], [198, 3, 1, "", "dmp_negative_p"], [198, 3, 1, "", "dmp_nest"], [198, 3, 1, "", "dmp_normal"], [198, 3, 1, "", "dmp_nth"], [198, 3, 1, "", "dmp_one"], [198, 3, 1, "", "dmp_one_p"], [198, 3, 1, "", "dmp_permute"], [198, 3, 1, "", "dmp_positive_p"], [198, 3, 1, "", "dmp_raise"], [198, 3, 1, "", "dmp_slice"], [198, 3, 1, "", "dmp_strip"], [198, 3, 1, "", "dmp_swap"], [198, 3, 1, "", "dmp_terms_gcd"], [198, 3, 1, "", "dmp_to_dict"], [198, 3, 1, "", "dmp_to_tuple"], [198, 3, 1, "", "dmp_true_LT"], [198, 3, 1, "", "dmp_validate"], [198, 3, 1, "", "dmp_zero"], [198, 3, 1, "", "dmp_zero_p"], [198, 3, 1, "", "dmp_zeros"], [198, 3, 1, "", "dup_random"], [198, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[198, 3, 1, "", "dmp_clear_denoms"], [198, 3, 1, "", "dmp_compose"], [198, 3, 1, "", "dmp_diff"], [198, 3, 1, "", "dmp_diff_eval_in"], [198, 3, 1, "", "dmp_diff_in"], [198, 3, 1, "", "dmp_eval"], [198, 3, 1, "", "dmp_eval_in"], [198, 3, 1, "", "dmp_eval_tail"], [198, 3, 1, "", "dmp_ground_content"], [198, 3, 1, "", "dmp_ground_extract"], [198, 3, 1, "", "dmp_ground_monic"], [198, 3, 1, "", "dmp_ground_primitive"], [198, 3, 1, "", "dmp_ground_trunc"], [198, 3, 1, "", "dmp_integrate"], [198, 3, 1, "", "dmp_integrate_in"], [198, 3, 1, "", "dmp_lift"], [198, 3, 1, "", "dmp_revert"], [198, 3, 1, "", "dmp_trunc"], [198, 3, 1, "", "dup_content"], [198, 3, 1, "", "dup_decompose"], [198, 3, 1, "", "dup_extract"], [198, 3, 1, "", "dup_mirror"], [198, 3, 1, "", "dup_monic"], [198, 3, 1, "", "dup_primitive"], [198, 3, 1, "", "dup_real_imag"], [198, 3, 1, "", "dup_scale"], [198, 3, 1, "", "dup_shift"], [198, 3, 1, "", "dup_sign_variations"], [198, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[201, 3, 1, "", "dispersion"], [201, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[198, 3, 1, "", "sdm_LC"], [198, 3, 1, "", "sdm_LM"], [198, 3, 1, "", "sdm_LT"], [198, 3, 1, "", "sdm_add"], [198, 3, 1, "", "sdm_deg"], [198, 3, 1, "", "sdm_ecart"], [198, 3, 1, "", "sdm_from_dict"], [198, 3, 1, "", "sdm_from_vector"], [198, 3, 1, "", "sdm_groebner"], [198, 3, 1, "", "sdm_monomial_deg"], [198, 3, 1, "", "sdm_monomial_divides"], [198, 3, 1, "", "sdm_monomial_mul"], [198, 3, 1, "", "sdm_mul_term"], [198, 3, 1, "", "sdm_nf_mora"], [198, 3, 1, "", "sdm_spoly"], [198, 3, 1, "", "sdm_to_dict"], [198, 3, 1, "", "sdm_to_vector"], [198, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[196, 1, 1, "", "AlgebraicField"], [196, 1, 1, "", "ComplexField"], [196, 1, 1, "", "ExpressionDomain"], [196, 1, 1, "", "FiniteField"], [196, 1, 1, "", "FractionField"], [196, 1, 1, "", "GMPYFiniteField"], [196, 1, 1, "", "GMPYIntegerRing"], [196, 1, 1, "", "GMPYRationalField"], [196, 1, 1, "", "IntegerRing"], [196, 1, 1, "", "PolynomialRing"], [196, 1, 1, "", "PythonFiniteField"], [196, 1, 1, "", "PythonIntegerRing"], [196, 1, 1, "", "PythonRationalField"], [196, 1, 1, "", "RationalField"], [196, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[196, 2, 1, "", "algebraic_field"], [196, 2, 1, "", "denom"], [196, 2, 1, "", "discriminant"], [196, 5, 1, "", "dtype"], [196, 5, 1, "", "ext"], [196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_GaussianIntegerRing"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "integral_basis"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "maximal_order"], [196, 5, 1, "", "mod"], [196, 2, 1, "", "numer"], [196, 5, 1, "", "orig_ext"], [196, 2, 1, "", "primes_above"], [196, 2, 1, "", "to_alg_num"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[196, 2, 1, "", "almosteq"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "get_exact"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[196, 1, 1, "", "Expression"], [196, 2, 1, "", "denom"], [196, 5, 1, "", "dtype"], [196, 2, 1, "", "from_ExpressionDomain"], [196, 2, 1, "", "from_FractionField"], [196, 2, 1, "", "from_GaussianIntegerRing"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "from_PolynomialRing"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[196, 2, 1, "", "characteristic"], [196, 2, 1, "", "from_FF"], [196, 2, 1, "", "from_FF_gmpy"], [196, 2, 1, "", "from_FF_python"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[196, 2, 1, "", "denom"], [196, 2, 1, "", "factorial"], [196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_ComplexField"], [196, 2, 1, "", "from_FractionField"], [196, 2, 1, "", "from_GaussianIntegerRing"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "from_PolynomialRing"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[196, 2, 1, "", "factorial"], [196, 2, 1, "", "from_FF_gmpy"], [196, 2, 1, "", "from_FF_python"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "gcdex"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "sqrt"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[196, 2, 1, "", "denom"], [196, 2, 1, "", "div"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "factorial"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "rem"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[196, 2, 1, "", "algebraic_field"], [196, 2, 1, "", "factorial"], [196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_FF"], [196, 2, 1, "", "from_FF_gmpy"], [196, 2, 1, "", "from_FF_python"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "gcdex"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "log"], [196, 2, 1, "", "sqrt"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[196, 2, 1, "", "factorial"], [196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_ComplexField"], [196, 2, 1, "", "from_FractionField"], [196, 2, 1, "", "from_GaussianIntegerRing"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "from_GlobalPolynomialRing"], [196, 2, 1, "", "from_PolynomialRing"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "gcdex"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "is_unit"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[196, 2, 1, "", "algebraic_field"], [196, 2, 1, "", "denom"], [196, 2, 1, "", "div"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "rem"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[196, 2, 1, "", "almosteq"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "get_exact"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "to_rational"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[196, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[196, 2, 1, "", "drop"], [196, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[196, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[196, 2, 1, "", "abs"], [196, 2, 1, "", "add"], [196, 2, 1, "", "alg_field_from_poly"], [196, 2, 1, "", "algebraic_field"], [196, 2, 1, "", "almosteq"], [196, 2, 1, "", "characteristic"], [196, 2, 1, "", "cofactors"], [196, 2, 1, "", "convert"], [196, 2, 1, "", "convert_from"], [196, 2, 1, "", "cyclotomic_field"], [196, 2, 1, "", "denom"], [196, 2, 1, "", "div"], [196, 2, 1, "", "drop"], [196, 5, 1, "", "dtype"], [196, 2, 1, "", "evalf"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "frac_field"], [196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_ComplexField"], [196, 2, 1, "", "from_ExpressionDomain"], [196, 2, 1, "", "from_ExpressionRawDomain"], [196, 2, 1, "", "from_FF"], [196, 2, 1, "", "from_FF_gmpy"], [196, 2, 1, "", "from_FF_python"], [196, 2, 1, "", "from_FractionField"], [196, 2, 1, "", "from_GlobalPolynomialRing"], [196, 2, 1, "", "from_MonogenicFiniteExtension"], [196, 2, 1, "", "from_PolynomialRing"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_RealField"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "gcdex"], [196, 2, 1, "", "get_exact"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "half_gcdex"], [196, 5, 1, "", "has_assoc_Field"], [196, 5, 1, "", "has_assoc_Ring"], [196, 2, 1, "", "inject"], [196, 2, 1, "", "invert"], [196, 5, 1, "", "is_Field"], [196, 5, 1, "", "is_PID"], [196, 5, 1, "", "is_Ring"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_one"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "log"], [196, 2, 1, "", "map"], [196, 2, 1, "", "mul"], [196, 2, 1, "", "n"], [196, 2, 1, "", "neg"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "of_type"], [196, 2, 1, "", "old_frac_field"], [196, 2, 1, "", "old_poly_ring"], [196, 5, 1, "", "one"], [196, 2, 1, "", "poly_ring"], [196, 2, 1, "", "pos"], [196, 2, 1, "", "pow"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "rem"], [196, 2, 1, "", "revert"], [196, 2, 1, "", "sqrt"], [196, 2, 1, "", "sub"], [196, 2, 1, "", "to_sympy"], [196, 4, 1, "", "tp"], [196, 2, 1, "", "unify"], [196, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[196, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[196, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[196, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[196, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[196, 2, 1, "", "div"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "is_unit"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "rem"], [196, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[196, 1, 1, "", "GaussianDomain"], [196, 1, 1, "", "GaussianElement"], [196, 1, 1, "", "GaussianInteger"], [196, 1, 1, "", "GaussianIntegerRing"], [196, 1, 1, "", "GaussianRational"], [196, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[196, 2, 1, "", "from_AlgebraicField"], [196, 2, 1, "", "from_QQ"], [196, 2, 1, "", "from_QQ_gmpy"], [196, 2, 1, "", "from_QQ_python"], [196, 2, 1, "", "from_ZZ"], [196, 2, 1, "", "from_ZZ_gmpy"], [196, 2, 1, "", "from_ZZ_python"], [196, 2, 1, "", "from_sympy"], [196, 2, 1, "", "inject"], [196, 2, 1, "", "is_negative"], [196, 2, 1, "", "is_nonnegative"], [196, 2, 1, "", "is_nonpositive"], [196, 2, 1, "", "is_positive"], [196, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[196, 2, 1, "", "new"], [196, 2, 1, "", "parent"], [196, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[196, 5, 1, "", "dtype"], [196, 2, 1, "", "from_GaussianIntegerRing"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[196, 2, 1, "", "as_AlgebraicField"], [196, 2, 1, "", "denom"], [196, 5, 1, "", "dtype"], [196, 2, 1, "", "from_GaussianIntegerRing"], [196, 2, 1, "", "from_GaussianRationalField"], [196, 2, 1, "", "get_field"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[196, 1, 1, "", "ComplexElement"], [196, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[196, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[196, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[196, 2, 1, "", "denom"], [196, 2, 1, "", "div"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "free_module"], [196, 2, 1, "", "get_ring"], [196, 2, 1, "", "ideal"], [196, 2, 1, "", "invert"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "quotient_ring"], [196, 2, 1, "", "rem"], [196, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[196, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[196, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[198, 3, 1, "", "dmp_cancel"], [198, 3, 1, "", "dmp_content"], [198, 3, 1, "", "dmp_discriminant"], [198, 3, 1, "", "dmp_euclidean_prs"], [198, 3, 1, "", "dmp_ff_prs_gcd"], [198, 3, 1, "", "dmp_gcd"], [198, 3, 1, "", "dmp_gcdex"], [198, 3, 1, "", "dmp_half_gcdex"], [198, 3, 1, "", "dmp_inner_gcd"], [198, 3, 1, "", "dmp_inner_subresultants"], [198, 3, 1, "", "dmp_invert"], [198, 3, 1, "", "dmp_lcm"], [198, 3, 1, "", "dmp_primitive"], [198, 3, 1, "", "dmp_primitive_prs"], [198, 3, 1, "", "dmp_prs_resultant"], [198, 3, 1, "", "dmp_qq_collins_resultant"], [198, 3, 1, "", "dmp_qq_heu_gcd"], [198, 3, 1, "", "dmp_resultant"], [198, 3, 1, "", "dmp_rr_prs_gcd"], [198, 3, 1, "", "dmp_subresultants"], [198, 3, 1, "", "dmp_zz_collins_resultant"], [198, 3, 1, "", "dmp_zz_heu_gcd"], [198, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[198, 3, 1, "", "dmp_ext_factor"], [198, 3, 1, "", "dmp_factor_list"], [198, 3, 1, "", "dmp_factor_list_include"], [198, 3, 1, "", "dmp_irreducible_p"], [198, 3, 1, "", "dmp_trial_division"], [198, 3, 1, "", "dmp_zz_diophantine"], [198, 3, 1, "", "dmp_zz_factor"], [198, 3, 1, "", "dmp_zz_mignotte_bound"], [198, 3, 1, "", "dmp_zz_wang"], [198, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [198, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [198, 3, 1, "", "dmp_zz_wang_non_divisors"], [198, 3, 1, "", "dmp_zz_wang_test_points"], [198, 3, 1, "", "dup_cyclotomic_p"], [198, 3, 1, "", "dup_gf_factor"], [198, 3, 1, "", "dup_zz_cyclotomic_factor"], [198, 3, 1, "", "dup_zz_cyclotomic_poly"], [198, 3, 1, "", "dup_zz_factor"], [198, 3, 1, "", "dup_zz_factor_sqf"], [198, 3, 1, "", "dup_zz_hensel_lift"], [198, 3, 1, "", "dup_zz_hensel_step"], [198, 3, 1, "", "dup_zz_irreducible_p"], [198, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[198, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[196, 1, 1, "", "FracElement"], [196, 1, 1, "", "FracField"], [196, 3, 1, "", "field"], [196, 3, 1, "", "sfield"], [196, 3, 1, "", "vfield"], [196, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[196, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[198, 3, 1, "", "gf_LC"], [198, 3, 1, "", "gf_Qbasis"], [198, 3, 1, "", "gf_Qmatrix"], [198, 3, 1, "", "gf_TC"], [198, 3, 1, "", "gf_add"], [198, 3, 1, "", "gf_add_ground"], [198, 3, 1, "", "gf_add_mul"], [198, 3, 1, "", "gf_berlekamp"], [198, 3, 1, "", "gf_cofactors"], [198, 3, 1, "", "gf_compose"], [198, 3, 1, "", "gf_compose_mod"], [198, 3, 1, "", "gf_crt"], [198, 3, 1, "", "gf_crt1"], [198, 3, 1, "", "gf_crt2"], [198, 3, 1, "", "gf_csolve"], [198, 3, 1, "", "gf_degree"], [198, 3, 1, "", "gf_diff"], [198, 3, 1, "", "gf_div"], [198, 3, 1, "", "gf_eval"], [198, 3, 1, "", "gf_expand"], [198, 3, 1, "", "gf_exquo"], [198, 3, 1, "", "gf_factor"], [198, 3, 1, "", "gf_factor_sqf"], [198, 3, 1, "", "gf_from_dict"], [198, 3, 1, "", "gf_from_int_poly"], [198, 3, 1, "", "gf_gcd"], [198, 3, 1, "", "gf_gcdex"], [198, 3, 1, "", "gf_int"], [198, 3, 1, "", "gf_irreducible"], [198, 3, 1, "", "gf_irreducible_p"], [198, 3, 1, "", "gf_lcm"], [198, 3, 1, "", "gf_lshift"], [198, 3, 1, "", "gf_monic"], [198, 3, 1, "", "gf_mul"], [198, 3, 1, "", "gf_mul_ground"], [198, 3, 1, "", "gf_multi_eval"], [198, 3, 1, "", "gf_neg"], [198, 3, 1, "", "gf_normal"], [198, 3, 1, "", "gf_pow"], [198, 3, 1, "", "gf_pow_mod"], [198, 3, 1, "", "gf_quo"], [198, 3, 1, "", "gf_quo_ground"], [198, 3, 1, "", "gf_random"], [198, 3, 1, "", "gf_rem"], [198, 3, 1, "", "gf_rshift"], [198, 3, 1, "", "gf_shoup"], [198, 3, 1, "", "gf_sqf_list"], [198, 3, 1, "", "gf_sqf_p"], [198, 3, 1, "", "gf_sqf_part"], [198, 3, 1, "", "gf_sqr"], [198, 3, 1, "", "gf_strip"], [198, 3, 1, "", "gf_sub"], [198, 3, 1, "", "gf_sub_ground"], [198, 3, 1, "", "gf_sub_mul"], [198, 3, 1, "", "gf_to_dict"], [198, 3, 1, "", "gf_to_int_poly"], [198, 3, 1, "", "gf_trace_map"], [198, 3, 1, "", "gf_trunc"], [198, 3, 1, "", "gf_value"], [198, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[198, 3, 1, "", "groebner"], [198, 3, 1, "", "is_groebner"], [198, 3, 1, "", "is_minimal"], [198, 3, 1, "", "is_reduced"], [198, 3, 1, "", "red_groebner"], [198, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[194, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[194, 2, 1, "", "add"], [194, 2, 1, "", "charpoly"], [194, 2, 1, "", "det"], [194, 2, 1, "", "hstack"], [194, 2, 1, "", "inv"], [194, 2, 1, "", "is_lower"], [194, 2, 1, "", "is_upper"], [194, 2, 1, "", "is_zero_matrix"], [194, 2, 1, "", "lu"], [194, 2, 1, "", "lu_solve"], [194, 2, 1, "", "matmul"], [194, 2, 1, "", "neg"], [194, 2, 1, "", "rref"], [194, 2, 1, "", "scc"], [194, 2, 1, "", "sub"], [194, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[194, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[194, 2, 1, "", "add"], [194, 2, 1, "", "charpoly"], [194, 2, 1, "", "columnspace"], [194, 2, 1, "", "convert_to"], [194, 2, 1, "", "det"], [194, 2, 1, "", "diag"], [194, 2, 1, "", "eye"], [194, 2, 1, "", "from_Matrix"], [194, 2, 1, "", "from_dict_sympy"], [194, 2, 1, "", "from_list"], [194, 2, 1, "", "from_list_sympy"], [194, 2, 1, "", "from_rep"], [194, 2, 1, "", "hstack"], [194, 2, 1, "", "inv"], [194, 4, 1, "", "is_lower"], [194, 4, 1, "", "is_upper"], [194, 2, 1, "", "lu"], [194, 2, 1, "", "lu_solve"], [194, 2, 1, "", "matmul"], [194, 2, 1, "", "mul"], [194, 2, 1, "", "neg"], [194, 2, 1, "", "nullspace"], [194, 2, 1, "", "ones"], [194, 2, 1, "", "pow"], [194, 2, 1, "", "rowspace"], [194, 2, 1, "", "rref"], [194, 2, 1, "", "scc"], [194, 2, 1, "", "sub"], [194, 2, 1, "", "to_Matrix"], [194, 2, 1, "", "to_dense"], [194, 2, 1, "", "to_field"], [194, 2, 1, "", "to_sparse"], [194, 2, 1, "", "transpose"], [194, 2, 1, "", "unify"], [194, 2, 1, "", "vstack"], [194, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[194, 3, 1, "", "hermite_normal_form"], [194, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[194, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[194, 2, 1, "", "add"], [194, 2, 1, "", "charpoly"], [194, 2, 1, "", "convert_to"], [194, 2, 1, "", "copy"], [194, 2, 1, "", "det"], [194, 2, 1, "", "eye"], [194, 2, 1, "", "from_ddm"], [194, 2, 1, "", "from_list"], [194, 2, 1, "", "hstack"], [194, 2, 1, "", "inv"], [194, 2, 1, "", "is_lower"], [194, 2, 1, "", "is_upper"], [194, 2, 1, "", "is_zero_matrix"], [194, 2, 1, "", "lu"], [194, 2, 1, "", "lu_solve"], [194, 2, 1, "", "matmul"], [194, 2, 1, "", "mul"], [194, 2, 1, "", "neg"], [194, 2, 1, "", "new"], [194, 2, 1, "", "nullspace"], [194, 2, 1, "", "rref"], [194, 2, 1, "", "scc"], [194, 2, 1, "", "sub"], [194, 2, 1, "", "to_ddm"], [194, 2, 1, "", "to_list"], [194, 2, 1, "", "transpose"], [194, 2, 1, "", "vstack"], [194, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[198, 3, 1, "", "_modgcd_multivariate_p"], [198, 3, 1, "", "func_field_modgcd"], [198, 3, 1, "", "modgcd_bivariate"], [198, 3, 1, "", "modgcd_multivariate"], [198, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[201, 1, 1, "", "Monomial"], [201, 3, 1, "", "itermonomials"], [201, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[201, 2, 1, "", "as_expr"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[200, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[200, 3, 1, "", "minimal_polynomial"], [200, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[200, 0, 0, "-", "modules"], [200, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[200, 1, 1, "", "EndomorphismRing"], [200, 1, 1, "", "InnerEndomorphism"], [200, 1, 1, "", "Module"], [200, 1, 1, "", "ModuleElement"], [200, 1, 1, "", "ModuleEndomorphism"], [200, 1, 1, "", "ModuleHomomorphism"], [200, 1, 1, "", "PowerBasis"], [200, 1, 1, "", "PowerBasisElement"], [200, 1, 1, "", "Submodule"], [200, 3, 1, "", "find_min_poly"], [200, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[200, 2, 1, "", "__init__"], [200, 2, 1, "", "inner_endomorphism"], [200, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[200, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[200, 2, 1, "", "__call__"], [200, 2, 1, "", "ancestors"], [200, 2, 1, "", "basis_elements"], [200, 2, 1, "", "element_from_rational"], [200, 2, 1, "", "endomorphism_ring"], [200, 2, 1, "", "is_compat_col"], [200, 2, 1, "", "mult_tab"], [200, 4, 1, "", "n"], [200, 2, 1, "", "nearest_common_ancestor"], [200, 4, 1, "", "number_field"], [200, 2, 1, "", "one"], [200, 4, 1, "", "parent"], [200, 2, 1, "", "power_basis_ancestor"], [200, 2, 1, "", "represent"], [200, 2, 1, "", "starts_with_unity"], [200, 2, 1, "", "submodule_from_gens"], [200, 2, 1, "", "submodule_from_matrix"], [200, 2, 1, "", "whole_submodule"], [200, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[200, 4, 1, "", "QQ_col"], [200, 2, 1, "", "__add__"], [200, 2, 1, "", "__init__"], [200, 2, 1, "", "__mod__"], [200, 2, 1, "", "__mul__"], [200, 2, 1, "", "column"], [200, 2, 1, "", "equiv"], [200, 2, 1, "", "from_int_list"], [200, 2, 1, "", "is_compat"], [200, 4, 1, "", "n"], [200, 2, 1, "", "over_power_basis"], [200, 2, 1, "", "reduced"], [200, 2, 1, "", "reduced_mod_p"], [200, 2, 1, "", "to_ancestor"], [200, 2, 1, "", "to_parent"], [200, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[200, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[200, 2, 1, "", "__init__"], [200, 2, 1, "", "kernel"], [200, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[200, 2, 1, "", "__init__"], [200, 2, 1, "", "element_from_ANP"], [200, 2, 1, "", "element_from_alg_num"], [200, 2, 1, "", "element_from_poly"], [200, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[200, 4, 1, "", "T"], [200, 2, 1, "", "as_expr"], [200, 4, 1, "", "generator"], [200, 4, 1, "", "is_rational"], [200, 2, 1, "", "norm"], [200, 2, 1, "", "numerator"], [200, 2, 1, "", "poly"], [200, 2, 1, "", "to_ANP"], [200, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[200, 4, 1, "", "QQ_matrix"], [200, 2, 1, "", "__init__"], [200, 2, 1, "", "add"], [200, 2, 1, "", "basis_element_pullbacks"], [200, 2, 1, "", "discard_before"], [200, 2, 1, "", "mul"], [200, 2, 1, "", "reduce_element"], [200, 2, 1, "", "reduced"], [200, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[200, 1, 1, "", "PrimeIdeal"], [200, 3, 1, "", "prime_decomp"], [200, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[200, 2, 1, "", "__add__"], [200, 2, 1, "", "__init__"], [200, 2, 1, "", "__mul__"], [200, 2, 1, "", "as_submodule"], [200, 4, 1, "", "is_inert"], [200, 2, 1, "", "reduce_ANP"], [200, 2, 1, "", "reduce_alg_num"], [200, 2, 1, "", "reduce_element"], [200, 2, 1, "", "repr"], [200, 2, 1, "", "test_factor"], [200, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[200, 3, 1, "", "field_isomorphism"], [200, 3, 1, "", "primitive_element"], [200, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[200, 1, 1, "", "AlgIntPowers"], [200, 3, 1, "", "coeff_search"], [200, 3, 1, "", "extract_fundamental_discriminant"], [200, 3, 1, "", "get_num_denom"], [200, 3, 1, "", "is_int"], [200, 3, 1, "", "is_rat"], [200, 3, 1, "", "isolate"], [200, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[200, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[201, 1, 1, "", "GradedLexOrder"], [201, 1, 1, "", "LexOrder"], [201, 1, 1, "", "MonomialOrder"], [201, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[201, 3, 1, "", "chebyshevt_poly"], [201, 3, 1, "", "chebyshevu_poly"], [201, 3, 1, "", "gegenbauer_poly"], [201, 3, 1, "", "hermite_poly"], [201, 3, 1, "", "hermite_prob_poly"], [201, 3, 1, "", "jacobi_poly"], [201, 3, 1, "", "laguerre_poly"], [201, 3, 1, "", "legendre_poly"], [201, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[201, 3, 1, "", "apart"], [201, 3, 1, "", "apart_list"], [201, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[196, 1, 1, "", "ANP"], [196, 1, 1, "", "DMF"], [196, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[196, 2, 1, "", "LC"], [196, 2, 1, "", "TC"], [196, 4, 1, "", "is_ground"], [196, 4, 1, "", "is_one"], [196, 4, 1, "", "is_zero"], [196, 2, 1, "", "pow"], [196, 2, 1, "", "to_dict"], [196, 2, 1, "", "to_list"], [196, 2, 1, "", "to_sympy_dict"], [196, 2, 1, "", "to_sympy_list"], [196, 2, 1, "", "to_tuple"], [196, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[196, 2, 1, "", "add"], [196, 2, 1, "", "cancel"], [196, 2, 1, "", "denom"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "frac_unify"], [196, 2, 1, "", "half_per"], [196, 2, 1, "", "invert"], [196, 4, 1, "", "is_one"], [196, 4, 1, "", "is_zero"], [196, 2, 1, "", "mul"], [196, 2, 1, "", "neg"], [196, 2, 1, "", "numer"], [196, 2, 1, "", "per"], [196, 2, 1, "", "poly_unify"], [196, 2, 1, "", "pow"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[196, 2, 1, "", "LC"], [196, 2, 1, "", "TC"], [196, 2, 1, "", "abs"], [196, 2, 1, "", "add"], [196, 2, 1, "", "add_ground"], [196, 2, 1, "", "all_coeffs"], [196, 2, 1, "", "all_monoms"], [196, 2, 1, "", "all_terms"], [196, 2, 1, "", "cancel"], [196, 2, 1, "", "cauchy_lower_bound"], [196, 2, 1, "", "cauchy_upper_bound"], [196, 2, 1, "", "clear_denoms"], [196, 2, 1, "", "coeffs"], [196, 2, 1, "", "cofactors"], [196, 2, 1, "", "compose"], [196, 2, 1, "", "content"], [196, 2, 1, "", "convert"], [196, 2, 1, "", "count_complex_roots"], [196, 2, 1, "", "count_real_roots"], [196, 2, 1, "", "decompose"], [196, 2, 1, "", "deflate"], [196, 2, 1, "", "degree"], [196, 2, 1, "", "degree_list"], [196, 2, 1, "", "diff"], [196, 2, 1, "", "discriminant"], [196, 2, 1, "", "div"], [196, 2, 1, "", "eject"], [196, 2, 1, "", "eval"], [196, 2, 1, "", "exclude"], [196, 2, 1, "", "exquo"], [196, 2, 1, "", "exquo_ground"], [196, 2, 1, "", "factor_list"], [196, 2, 1, "", "factor_list_include"], [196, 2, 1, "", "from_dict"], [196, 2, 1, "", "from_list"], [196, 2, 1, "", "from_sympy_list"], [196, 2, 1, "", "gcd"], [196, 2, 1, "", "gcdex"], [196, 2, 1, "", "gff_list"], [196, 2, 1, "", "half_gcdex"], [196, 2, 1, "", "homogeneous_order"], [196, 2, 1, "", "homogenize"], [196, 2, 1, "", "inject"], [196, 2, 1, "", "integrate"], [196, 2, 1, "", "intervals"], [196, 2, 1, "", "invert"], [196, 4, 1, "", "is_cyclotomic"], [196, 4, 1, "", "is_ground"], [196, 4, 1, "", "is_homogeneous"], [196, 4, 1, "", "is_irreducible"], [196, 4, 1, "", "is_linear"], [196, 4, 1, "", "is_monic"], [196, 4, 1, "", "is_monomial"], [196, 4, 1, "", "is_one"], [196, 4, 1, "", "is_primitive"], [196, 4, 1, "", "is_quadratic"], [196, 4, 1, "", "is_sqf"], [196, 4, 1, "", "is_zero"], [196, 2, 1, "", "l1_norm"], [196, 2, 1, "", "l2_norm_squared"], [196, 2, 1, "", "lcm"], [196, 2, 1, "", "lift"], [196, 2, 1, "", "max_norm"], [196, 2, 1, "", "mignotte_sep_bound_squared"], [196, 2, 1, "", "monic"], [196, 2, 1, "", "monoms"], [196, 2, 1, "", "mul"], [196, 2, 1, "", "mul_ground"], [196, 2, 1, "", "neg"], [196, 2, 1, "", "norm"], [196, 2, 1, "", "nth"], [196, 2, 1, "", "pdiv"], [196, 2, 1, "", "per"], [196, 2, 1, "", "permute"], [196, 2, 1, "", "pexquo"], [196, 2, 1, "", "pow"], [196, 2, 1, "", "pquo"], [196, 2, 1, "", "prem"], [196, 2, 1, "", "primitive"], [196, 2, 1, "", "quo"], [196, 2, 1, "", "quo_ground"], [196, 2, 1, "", "refine_root"], [196, 2, 1, "", "rem"], [196, 2, 1, "", "resultant"], [196, 2, 1, "", "revert"], [196, 2, 1, "", "shift"], [196, 2, 1, "", "slice"], [196, 2, 1, "", "sqf_list"], [196, 2, 1, "", "sqf_list_include"], [196, 2, 1, "", "sqf_norm"], [196, 2, 1, "", "sqf_part"], [196, 2, 1, "", "sqr"], [196, 2, 1, "", "sturm"], [196, 2, 1, "", "sub"], [196, 2, 1, "", "sub_ground"], [196, 2, 1, "", "subresultants"], [196, 2, 1, "", "terms"], [196, 2, 1, "", "terms_gcd"], [196, 2, 1, "", "to_dict"], [196, 2, 1, "", "to_exact"], [196, 2, 1, "", "to_field"], [196, 2, 1, "", "to_list"], [196, 2, 1, "", "to_ring"], [196, 2, 1, "", "to_sympy_dict"], [196, 2, 1, "", "to_sympy_list"], [196, 2, 1, "", "to_tuple"], [196, 2, 1, "", "total_degree"], [196, 2, 1, "", "transform"], [196, 2, 1, "", "trunc"], [196, 2, 1, "", "unify"]], "sympy.polys": [[198, 0, 0, "-", "polyconfig"], [198, 0, 0, "-", "polyoptions"], [203, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[198, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[198, 1, 1, "", "BasePolynomialError"], [198, 1, 1, "", "CoercionFailed"], [198, 1, 1, "", "ComputationFailed"], [198, 1, 1, "", "DomainError"], [198, 1, 1, "", "EvaluationFailed"], [198, 1, 1, "", "ExactQuotientFailed"], [198, 1, 1, "", "ExtraneousFactors"], [198, 1, 1, "", "FlagError"], [198, 1, 1, "", "GeneratorsError"], [198, 1, 1, "", "GeneratorsNeeded"], [198, 1, 1, "", "HeuristicGCDFailed"], [198, 1, 1, "", "HomomorphismFailed"], [198, 1, 1, "", "IsomorphismFailed"], [198, 1, 1, "", "MultivariatePolynomialError"], [198, 1, 1, "", "NotAlgebraic"], [198, 1, 1, "", "NotInvertible"], [198, 1, 1, "", "NotReversible"], [198, 1, 1, "", "OperationNotSupported"], [198, 1, 1, "", "OptionError"], [198, 1, 1, "", "PolificationFailed"], [198, 1, 1, "", "PolynomialError"], [198, 1, 1, "", "RefinementFailed"], [198, 1, 1, "", "UnificationFailed"], [198, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[201, 3, 1, "", "horner"], [201, 3, 1, "", "interpolate"], [201, 3, 1, "", "symmetrize"], [201, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[198, 1, 1, "", "Options"], [198, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[198, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[201, 3, 1, "", "roots"]], "sympy.polys.polytools": [[201, 1, 1, "", "GroebnerBasis"], [201, 3, 1, "", "LC"], [201, 3, 1, "", "LM"], [201, 3, 1, "", "LT"], [201, 1, 1, "", "Poly"], [201, 1, 1, "", "PurePoly"], [201, 3, 1, "", "cancel"], [201, 3, 1, "", "cofactors"], [201, 3, 1, "", "compose"], [201, 3, 1, "", "content"], [201, 3, 1, "", "count_roots"], [201, 3, 1, "", "decompose"], [201, 3, 1, "", "degree"], [201, 3, 1, "", "degree_list"], [201, 3, 1, "", "discriminant"], [201, 3, 1, "", "div"], [201, 3, 1, "", "exquo"], [201, 3, 1, "", "factor"], [201, 3, 1, "", "factor_list"], [201, 3, 1, "", "gcd"], [201, 3, 1, "", "gcd_list"], [201, 3, 1, "", "gcdex"], [201, 3, 1, "", "gff"], [201, 3, 1, "", "gff_list"], [201, 3, 1, "", "groebner"], [201, 3, 1, "", "ground_roots"], [201, 3, 1, "", "half_gcdex"], [201, 3, 1, "", "intervals"], [201, 3, 1, "", "invert"], [201, 3, 1, "", "is_zero_dimensional"], [201, 3, 1, "", "lcm"], [201, 3, 1, "", "lcm_list"], [201, 3, 1, "", "monic"], [201, 3, 1, "", "nroots"], [201, 3, 1, "", "nth_power_roots_poly"], [201, 3, 1, "", "parallel_poly_from_expr"], [201, 3, 1, "", "pdiv"], [201, 3, 1, "", "pexquo"], [201, 3, 1, "", "poly"], [201, 3, 1, "", "poly_from_expr"], [201, 3, 1, "", "pquo"], [201, 3, 1, "", "prem"], [201, 3, 1, "", "primitive"], [201, 3, 1, "", "quo"], [201, 3, 1, "", "real_roots"], [201, 3, 1, "", "reduced"], [201, 3, 1, "", "refine_root"], [201, 3, 1, "", "rem"], [201, 3, 1, "", "resultant"], [201, 3, 1, "", "sqf"], [201, 3, 1, "", "sqf_list"], [201, 3, 1, "", "sqf_norm"], [201, 3, 1, "", "sqf_part"], [201, 3, 1, "", "sturm"], [201, 3, 1, "", "subresultants"], [201, 3, 1, "", "terms_gcd"], [201, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[201, 2, 1, "", "contains"], [201, 2, 1, "", "fglm"], [201, 4, 1, "", "is_zero_dimensional"], [201, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[201, 2, 1, "", "EC"], [201, 2, 1, "", "EM"], [201, 2, 1, "", "ET"], [201, 2, 1, "", "LC"], [201, 2, 1, "", "LM"], [201, 2, 1, "", "LT"], [201, 2, 1, "", "TC"], [201, 2, 1, "", "abs"], [201, 2, 1, "", "add"], [201, 2, 1, "", "add_ground"], [201, 2, 1, "", "all_coeffs"], [201, 2, 1, "", "all_monoms"], [201, 2, 1, "", "all_roots"], [201, 2, 1, "", "all_terms"], [201, 2, 1, "", "as_dict"], [201, 2, 1, "", "as_expr"], [201, 2, 1, "", "as_list"], [201, 2, 1, "", "as_poly"], [201, 2, 1, "", "cancel"], [201, 2, 1, "", "clear_denoms"], [201, 2, 1, "", "coeff_monomial"], [201, 2, 1, "", "coeffs"], [201, 2, 1, "", "cofactors"], [201, 2, 1, "", "compose"], [201, 2, 1, "", "content"], [201, 2, 1, "", "count_roots"], [201, 2, 1, "", "decompose"], [201, 2, 1, "", "deflate"], [201, 2, 1, "", "degree"], [201, 2, 1, "", "degree_list"], [201, 2, 1, "", "diff"], [201, 2, 1, "", "discriminant"], [201, 2, 1, "", "dispersion"], [201, 2, 1, "", "dispersionset"], [201, 2, 1, "", "div"], [201, 4, 1, "", "domain"], [201, 2, 1, "", "eject"], [201, 2, 1, "", "eval"], [201, 2, 1, "", "exclude"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "exquo_ground"], [201, 2, 1, "", "factor_list"], [201, 2, 1, "", "factor_list_include"], [201, 4, 1, "", "free_symbols"], [201, 4, 1, "", "free_symbols_in_domain"], [201, 2, 1, "", "from_dict"], [201, 2, 1, "", "from_expr"], [201, 2, 1, "", "from_list"], [201, 2, 1, "", "from_poly"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "gcdex"], [201, 4, 1, "", "gen"], [201, 2, 1, "", "get_domain"], [201, 2, 1, "", "get_modulus"], [201, 2, 1, "", "gff_list"], [201, 2, 1, "", "ground_roots"], [201, 2, 1, "", "half_gcdex"], [201, 2, 1, "", "has_only_gens"], [201, 2, 1, "", "homogeneous_order"], [201, 2, 1, "", "homogenize"], [201, 2, 1, "", "inject"], [201, 2, 1, "", "integrate"], [201, 2, 1, "", "intervals"], [201, 2, 1, "", "invert"], [201, 4, 1, "", "is_cyclotomic"], [201, 4, 1, "", "is_ground"], [201, 4, 1, "", "is_homogeneous"], [201, 4, 1, "", "is_irreducible"], [201, 4, 1, "", "is_linear"], [201, 4, 1, "", "is_monic"], [201, 4, 1, "", "is_monomial"], [201, 4, 1, "", "is_multivariate"], [201, 4, 1, "", "is_one"], [201, 4, 1, "", "is_primitive"], [201, 4, 1, "", "is_quadratic"], [201, 4, 1, "", "is_sqf"], [201, 4, 1, "", "is_univariate"], [201, 4, 1, "", "is_zero"], [201, 2, 1, "", "l1_norm"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "length"], [201, 2, 1, "", "lift"], [201, 2, 1, "", "ltrim"], [201, 2, 1, "", "match"], [201, 2, 1, "", "max_norm"], [201, 2, 1, "", "monic"], [201, 2, 1, "", "monoms"], [201, 2, 1, "", "mul"], [201, 2, 1, "", "mul_ground"], [201, 2, 1, "", "neg"], [201, 2, 1, "", "new"], [201, 2, 1, "", "norm"], [201, 2, 1, "", "nroots"], [201, 2, 1, "", "nth"], [201, 2, 1, "", "nth_power_roots_poly"], [201, 4, 1, "", "one"], [201, 2, 1, "", "pdiv"], [201, 2, 1, "", "per"], [201, 2, 1, "", "pexquo"], [201, 2, 1, "", "pow"], [201, 2, 1, "", "pquo"], [201, 2, 1, "", "prem"], [201, 2, 1, "", "primitive"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "quo_ground"], [201, 2, 1, "", "rat_clear_denoms"], [201, 2, 1, "", "real_roots"], [201, 2, 1, "", "refine_root"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "reorder"], [201, 2, 1, "", "replace"], [201, 2, 1, "", "resultant"], [201, 2, 1, "", "retract"], [201, 2, 1, "", "revert"], [201, 2, 1, "", "root"], [201, 2, 1, "", "same_root"], [201, 2, 1, "", "set_domain"], [201, 2, 1, "", "set_modulus"], [201, 2, 1, "", "shift"], [201, 2, 1, "", "slice"], [201, 2, 1, "", "sqf_list"], [201, 2, 1, "", "sqf_list_include"], [201, 2, 1, "", "sqf_norm"], [201, 2, 1, "", "sqf_part"], [201, 2, 1, "", "sqr"], [201, 2, 1, "", "sturm"], [201, 2, 1, "", "sub"], [201, 2, 1, "", "sub_ground"], [201, 2, 1, "", "subresultants"], [201, 2, 1, "", "terms"], [201, 2, 1, "", "terms_gcd"], [201, 2, 1, "", "termwise"], [201, 2, 1, "", "to_exact"], [201, 2, 1, "", "to_field"], [201, 2, 1, "", "to_ring"], [201, 2, 1, "", "total_degree"], [201, 2, 1, "", "transform"], [201, 2, 1, "", "trunc"], [201, 2, 1, "", "unify"], [201, 4, 1, "", "unit"], [201, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[201, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[201, 3, 1, "", "together"]], "sympy.polys.ring_series": [[202, 3, 1, "", "_tan1"], [202, 3, 1, "", "mul_xin"], [202, 3, 1, "", "pow_xin"], [202, 3, 1, "", "rs_LambertW"], [202, 3, 1, "", "rs_asin"], [202, 3, 1, "", "rs_atan"], [202, 3, 1, "", "rs_atanh"], [202, 3, 1, "", "rs_compose_add"], [202, 3, 1, "", "rs_cos"], [202, 3, 1, "", "rs_cos_sin"], [202, 3, 1, "", "rs_cosh"], [202, 3, 1, "", "rs_cot"], [202, 3, 1, "", "rs_diff"], [202, 3, 1, "", "rs_exp"], [202, 3, 1, "", "rs_fun"], [202, 3, 1, "", "rs_hadamard_exp"], [202, 3, 1, "", "rs_integrate"], [202, 3, 1, "", "rs_is_puiseux"], [202, 3, 1, "", "rs_log"], [202, 3, 1, "", "rs_mul"], [202, 3, 1, "", "rs_newton"], [202, 3, 1, "", "rs_nth_root"], [202, 3, 1, "", "rs_pow"], [202, 3, 1, "", "rs_puiseux"], [202, 3, 1, "", "rs_puiseux2"], [202, 3, 1, "", "rs_series_from_list"], [202, 3, 1, "", "rs_series_inversion"], [202, 3, 1, "", "rs_series_reversion"], [202, 3, 1, "", "rs_sin"], [202, 3, 1, "", "rs_sinh"], [202, 3, 1, "", "rs_square"], [202, 3, 1, "", "rs_subs"], [202, 3, 1, "", "rs_tan"], [202, 3, 1, "", "rs_tanh"], [202, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[196, 1, 1, "", "PolyElement"], [196, 1, 1, "", "PolyRing"], [196, 3, 1, "", "ring"], [196, 3, 1, "", "sring"], [196, 3, 1, "", "vring"], [196, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[196, 2, 1, "", "almosteq"], [196, 2, 1, "", "cancel"], [196, 2, 1, "", "coeff"], [196, 2, 1, "", "coeffs"], [196, 2, 1, "", "const"], [196, 2, 1, "", "content"], [196, 2, 1, "", "copy"], [196, 2, 1, "", "degree"], [196, 2, 1, "", "degrees"], [196, 2, 1, "", "diff"], [196, 2, 1, "", "div"], [196, 2, 1, "", "imul_num"], [196, 2, 1, "", "itercoeffs"], [196, 2, 1, "", "itermonoms"], [196, 2, 1, "", "iterterms"], [196, 2, 1, "", "leading_expv"], [196, 2, 1, "", "leading_monom"], [196, 2, 1, "", "leading_term"], [196, 2, 1, "", "listcoeffs"], [196, 2, 1, "", "listmonoms"], [196, 2, 1, "", "listterms"], [196, 2, 1, "", "monic"], [196, 2, 1, "", "monoms"], [196, 2, 1, "", "primitive"], [196, 2, 1, "", "square"], [196, 2, 1, "", "strip_zero"], [196, 2, 1, "", "tail_degree"], [196, 2, 1, "", "tail_degrees"], [196, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[196, 2, 1, "", "add"], [196, 2, 1, "", "add_gens"], [196, 2, 1, "", "compose"], [196, 2, 1, "", "drop"], [196, 2, 1, "", "drop_to_ground"], [196, 2, 1, "", "index"], [196, 2, 1, "", "monomial_basis"], [196, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[201, 1, 1, "", "ComplexRootOf"], [201, 1, 1, "", "RootOf"], [201, 1, 1, "", "RootSum"], [201, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[201, 2, 1, "", "_all_roots"], [201, 2, 1, "", "_complexes_index"], [201, 2, 1, "", "_complexes_sorted"], [201, 2, 1, "", "_count_roots"], [201, 2, 1, "", "_ensure_complexes_init"], [201, 2, 1, "", "_ensure_reals_init"], [201, 2, 1, "", "_eval_evalf"], [201, 2, 1, "", "_eval_is_imaginary"], [201, 2, 1, "", "_eval_is_real"], [201, 2, 1, "", "_get_complexes"], [201, 2, 1, "", "_get_complexes_sqf"], [201, 2, 1, "", "_get_interval"], [201, 2, 1, "", "_get_reals"], [201, 2, 1, "", "_get_reals_sqf"], [201, 2, 1, "", "_get_roots"], [201, 2, 1, "", "_indexed_root"], [201, 2, 1, "", "_new"], [201, 2, 1, "", "_postprocess_root"], [201, 2, 1, "", "_preprocess_roots"], [201, 2, 1, "", "_real_roots"], [201, 2, 1, "", "_reals_index"], [201, 2, 1, "", "_reals_sorted"], [201, 2, 1, "", "_refine_complexes"], [201, 2, 1, "", "_reset"], [201, 2, 1, "", "_roots_trivial"], [201, 2, 1, "", "_set_interval"], [201, 2, 1, "", "all_roots"], [201, 2, 1, "", "clear_cache"], [201, 2, 1, "", "eval_approx"], [201, 2, 1, "", "eval_rational"], [201, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[201, 2, 1, "", "new"]], "sympy.polys.solvers": [[203, 3, 1, "", "_solve_lin_sys"], [203, 3, 1, "", "_solve_lin_sys_component"], [203, 3, 1, "", "eqs_to_matrix"], [203, 3, 1, "", "solve_lin_sys"], [203, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[201, 3, 1, "", "cyclotomic_poly"], [201, 3, 1, "", "interpolating_poly"], [201, 3, 1, "", "random_poly"], [201, 3, 1, "", "swinnerton_dyer_poly"], [201, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[205, 0, 0, "-", "aesaracode"], [205, 0, 0, "-", "c"], [205, 0, 0, "-", "codeprinter"], [205, 0, 0, "-", "conventions"], [205, 0, 0, "-", "cxx"], [205, 0, 0, "-", "fortran"], [205, 0, 0, "-", "gtk"], [205, 0, 0, "-", "jscode"], [205, 0, 0, "-", "julia"], [205, 0, 0, "-", "lambdarepr"], [205, 0, 0, "-", "latex"], [205, 0, 0, "-", "maple"], [205, 0, 0, "-", "mathematica"], [205, 0, 0, "-", "mathml"], [205, 0, 0, "-", "octave"], [205, 0, 0, "-", "precedence"], [205, 0, 0, "-", "pretty"], [205, 0, 0, "-", "preview"], [205, 0, 0, "-", "printer"], [205, 0, 0, "-", "pycode"], [205, 0, 0, "-", "python"], [205, 0, 0, "-", "rcode"], [205, 0, 0, "-", "repr"], [205, 0, 0, "-", "rust"], [205, 0, 0, "-", "smtlib"], [205, 0, 0, "-", "str"], [205, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[205, 1, 1, "", "AesaraPrinter"], [205, 3, 1, "", "aesara_code"], [205, 3, 1, "", "aesara_function"], [205, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[205, 2, 1, "", "doprint"], [205, 5, 1, "", "printmethod"]], "sympy.printing.c": [[205, 1, 1, "", "C89CodePrinter"], [205, 1, 1, "", "C99CodePrinter"], [205, 3, 1, "", "ccode"], [205, 6, 1, "", "known_functions_C89"], [205, 6, 1, "", "known_functions_C99"], [205, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[205, 7, 1, "", "AssignmentError"], [205, 1, 1, "", "CodePrinter"], [205, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[205, 2, 1, "", "doprint"], [205, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[205, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[205, 1, 1, "", "CXX11CodePrinter"], [205, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[205, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[205, 1, 1, "", "FCodePrinter"], [205, 3, 1, "", "fcode"], [205, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[205, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[205, 1, 1, "", "JavascriptCodePrinter"], [205, 3, 1, "", "jscode"], [205, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[205, 1, 1, "", "JuliaCodePrinter"], [205, 3, 1, "", "julia_code"], [205, 6, 1, "", "known_fcns_src1"], [205, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[205, 1, 1, "", "LambdaPrinter"], [205, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[205, 1, 1, "", "LatexPrinter"], [205, 6, 1, "", "accepted_latex_functions"], [205, 3, 1, "", "latex"], [205, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[205, 2, 1, "", "parenthesize_super"], [205, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[205, 1, 1, "", "MapleCodePrinter"], [205, 3, 1, "", "maple_code"], [205, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[205, 1, 1, "", "MCodePrinter"], [205, 6, 1, "", "known_functions"], [205, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[205, 1, 1, "", "MathMLContentPrinter"], [205, 1, 1, "", "MathMLPresentationPrinter"], [205, 1, 1, "", "MathMLPrinterBase"], [205, 3, 1, "", "mathml"], [205, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[205, 2, 1, "", "mathml_tag"], [205, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[205, 2, 1, "", "mathml_tag"], [205, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[205, 2, 1, "", "doprint"]], "sympy.printing.octave": [[205, 1, 1, "", "OctaveCodePrinter"], [205, 6, 1, "", "known_fcns_src1"], [205, 6, 1, "", "known_fcns_src2"], [205, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[205, 6, 1, "", "PRECEDENCE"], [205, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [205, 6, 1, "", "PRECEDENCE_VALUES"], [205, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[205, 0, 0, "-", "pretty"], [205, 0, 0, "-", "pretty_symbology"], [205, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[205, 1, 1, "", "PrettyPrinter"], [205, 3, 1, "", "pretty"], [205, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[205, 3, 1, "", "G"], [205, 3, 1, "", "U"], [205, 3, 1, "", "VF"], [205, 3, 1, "", "annotated"], [205, 6, 1, "", "atoms_table"], [205, 6, 1, "", "digit_2txt"], [205, 6, 1, "", "frac"], [205, 3, 1, "", "g"], [205, 6, 1, "", "greek_letters"], [205, 3, 1, "", "hobj"], [205, 3, 1, "", "pretty_atom"], [205, 3, 1, "", "pretty_symbol"], [205, 3, 1, "", "pretty_try_use_unicode"], [205, 3, 1, "", "pretty_use_unicode"], [205, 6, 1, "", "root"], [205, 6, 1, "", "sub"], [205, 6, 1, "", "sup"], [205, 6, 1, "", "symb_2txt"], [205, 3, 1, "", "vobj"], [205, 3, 1, "", "xobj"], [205, 3, 1, "", "xstr"], [205, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[205, 1, 1, "", "prettyForm"], [205, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[205, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[205, 2, 1, "", "above"], [205, 2, 1, "", "below"], [205, 2, 1, "", "height"], [205, 2, 1, "", "left"], [205, 2, 1, "", "leftslash"], [205, 2, 1, "", "next"], [205, 2, 1, "", "parens"], [205, 2, 1, "", "render"], [205, 2, 1, "", "right"], [205, 2, 1, "", "root"], [205, 2, 1, "", "stack"], [205, 2, 1, "", "terminal_width"], [205, 2, 1, "", "width"]], "sympy.printing.preview": [[205, 3, 1, "", "preview"]], "sympy.printing.printer": [[205, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[205, 2, 1, "", "_print"], [205, 2, 1, "", "doprint"], [205, 5, 1, "", "printmethod"], [205, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[205, 1, 1, "", "MpmathPrinter"], [205, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[205, 1, 1, "", "RCodePrinter"], [205, 6, 1, "", "known_functions"], [205, 3, 1, "", "print_rcode"], [205, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[205, 1, 1, "", "ReprPrinter"], [205, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[205, 2, 1, "", "emptyPrinter"], [205, 5, 1, "", "printmethod"], [205, 2, 1, "", "reprify"]], "sympy.printing.rust": [[205, 1, 1, "", "RustCodePrinter"], [205, 6, 1, "", "known_functions"], [205, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[205, 2, 1, "", "indent_code"], [205, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[205, 1, 1, "", "SMTLibPrinter"], [205, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[205, 5, 1, "", "_default_settings"], [205, 5, 1, "", "printmethod"]], "sympy.printing.str": [[205, 1, 1, "", "StrPrinter"], [205, 3, 1, "", "sstr"], [205, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[205, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[205, 3, 1, "", "pprint_nodes"], [205, 3, 1, "", "print_node"], [205, 3, 1, "", "print_tree"], [205, 3, 1, "", "tree"]], "sympy.series.acceleration": [[212, 3, 1, "", "richardson"], [212, 3, 1, "", "shanks"]], "sympy.series.formal": [[207, 1, 1, "", "FiniteFormalPowerSeries"], [207, 1, 1, "", "FormalPowerSeries"], [207, 1, 1, "", "FormalPowerSeriesCompose"], [207, 1, 1, "", "FormalPowerSeriesInverse"], [207, 1, 1, "", "FormalPowerSeriesProduct"], [207, 3, 1, "", "compute_fps"], [207, 3, 1, "", "exp_re"], [207, 3, 1, "", "fps"], [207, 3, 1, "", "hyper_algorithm"], [207, 3, 1, "", "hyper_re"], [207, 3, 1, "", "rational_algorithm"], [207, 3, 1, "", "rational_independent"], [207, 3, 1, "", "rsolve_hypergeometric"], [207, 3, 1, "", "simpleDE"], [207, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[207, 2, 1, "", "coeff_bell"], [207, 2, 1, "", "compose"], [207, 4, 1, "", "infinite"], [207, 2, 1, "", "integrate"], [207, 2, 1, "", "inverse"], [207, 2, 1, "", "polynomial"], [207, 2, 1, "", "product"], [207, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[207, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[207, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[207, 4, 1, "", "function"]], "sympy.series.fourier": [[208, 1, 1, "", "FourierSeries"], [208, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[208, 2, 1, "", "scale"], [208, 2, 1, "", "scalex"], [208, 2, 1, "", "shift"], [208, 2, 1, "", "shiftx"], [208, 2, 1, "", "sigma_approximation"], [208, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[212, 1, 1, "", "SubsSet"], [212, 3, 1, "", "build_expression_tree"], [212, 3, 1, "", "calculate_series"], [212, 3, 1, "", "compare"], [212, 3, 1, "", "gruntz"], [212, 3, 1, "", "limitinf"], [212, 3, 1, "", "mrv"], [212, 3, 1, "", "mrv_leadterm"], [212, 3, 1, "", "mrv_max1"], [212, 3, 1, "", "mrv_max3"], [212, 3, 1, "", "rewrite"], [212, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[212, 2, 1, "", "copy"], [212, 2, 1, "", "do_subs"], [212, 2, 1, "", "meets"], [212, 2, 1, "", "union"]], "sympy.series.limits": [[212, 1, 1, "", "Limit"], [212, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[212, 2, 1, "", "doit"]], "sympy.series.limitseq": [[210, 3, 1, "", "difference_delta"], [210, 3, 1, "", "dominant"], [210, 3, 1, "", "limit_seq"]], "sympy.series.order": [[212, 1, 1, "", "Order"]], "sympy.series.order.Order": [[212, 2, 1, "", "contains"]], "sympy.series.residues": [[212, 3, 1, "", "residue"]], "sympy.series.sequences": [[211, 1, 1, "", "EmptySequence"], [211, 1, 1, "", "RecursiveSeq"], [211, 1, 1, "", "SeqAdd"], [211, 1, 1, "", "SeqBase"], [211, 1, 1, "", "SeqFormula"], [211, 1, 1, "", "SeqMul"], [211, 1, 1, "", "SeqPer"], [211, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[211, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[211, 4, 1, "", "initial"], [211, 4, 1, "", "interval"], [211, 4, 1, "", "n"], [211, 4, 1, "", "recurrence"], [211, 4, 1, "", "start"], [211, 4, 1, "", "stop"], [211, 4, 1, "", "y"], [211, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[211, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[211, 2, 1, "", "coeff"], [211, 2, 1, "", "coeff_mul"], [211, 2, 1, "", "find_linear_recurrence"], [211, 4, 1, "", "free_symbols"], [211, 4, 1, "", "gen"], [211, 4, 1, "", "interval"], [211, 4, 1, "", "length"], [211, 4, 1, "", "start"], [211, 4, 1, "", "stop"], [211, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[211, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[211, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[211, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[212, 3, 1, "", "series"]], "sympy.sets": [[213, 0, 0, "-", "conditionset"], [213, 0, 0, "-", "fancysets"], [213, 0, 0, "-", "powerset"], [213, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[213, 1, 1, "", "ConditionSet"], [213, 1, 1, "", "Contains"], [213, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[213, 1, 1, "", "CartesianComplexRegion"], [213, 1, 1, "", "ComplexRegion"], [213, 1, 1, "", "Complexes"], [213, 1, 1, "", "ImageSet"], [213, 1, 1, "", "Integers"], [213, 1, 1, "", "Naturals"], [213, 1, 1, "", "Naturals0"], [213, 1, 1, "", "PolarComplexRegion"], [213, 1, 1, "", "Range"], [213, 1, 1, "", "Rationals"], [213, 1, 1, "", "Reals"], [213, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[213, 4, 1, "", "a_interval"], [213, 4, 1, "", "b_interval"], [213, 2, 1, "", "from_real"], [213, 4, 1, "", "psets"], [213, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[213, 2, 1, "", "as_relational"], [213, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[213, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[213, 1, 1, "", "Complement"], [213, 1, 1, "", "DisjointUnion"], [213, 1, 1, "", "EmptySet"], [213, 1, 1, "", "FiniteSet"], [213, 1, 1, "", "Intersection"], [213, 1, 1, "", "Interval"], [213, 1, 1, "", "ProductSet"], [213, 1, 1, "", "Set"], [213, 1, 1, "", "SymmetricDifference"], [213, 1, 1, "", "Union"], [213, 1, 1, "", "UniversalSet"], [213, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[213, 2, 1, "", "as_relational"], [213, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[213, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[213, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[213, 2, 1, "", "Lopen"], [213, 2, 1, "", "Ropen"], [213, 2, 1, "", "as_relational"], [213, 4, 1, "", "end"], [213, 4, 1, "", "is_left_unbounded"], [213, 4, 1, "", "is_right_unbounded"], [213, 4, 1, "", "left_open"], [213, 2, 1, "", "open"], [213, 4, 1, "", "right_open"], [213, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[213, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[213, 4, 1, "", "boundary"], [213, 4, 1, "", "closure"], [213, 2, 1, "", "complement"], [213, 2, 1, "", "contains"], [213, 4, 1, "", "inf"], [213, 4, 1, "", "interior"], [213, 2, 1, "", "intersect"], [213, 2, 1, "", "intersection"], [213, 4, 1, "", "is_closed"], [213, 2, 1, "", "is_disjoint"], [213, 4, 1, "", "is_open"], [213, 2, 1, "", "is_proper_subset"], [213, 2, 1, "", "is_proper_superset"], [213, 2, 1, "", "is_subset"], [213, 2, 1, "", "is_superset"], [213, 2, 1, "", "isdisjoint"], [213, 2, 1, "", "issubset"], [213, 2, 1, "", "issuperset"], [213, 4, 1, "", "kind"], [213, 4, 1, "", "measure"], [213, 2, 1, "", "powerset"], [213, 4, 1, "", "sup"], [213, 2, 1, "", "symmetric_difference"], [213, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[213, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[213, 2, 1, "", "as_relational"]], "sympy.simplify": [[217, 0, 0, "-", "combsimp"], [217, 0, 0, "-", "cse_main"], [217, 0, 0, "-", "epathtools"], [217, 0, 0, "-", "hyperexpand"], [215, 0, 0, "-", "hyperexpand_doc"], [217, 0, 0, "-", "powsimp"], [217, 0, 0, "-", "radsimp"], [217, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [217, 0, 0, "-", "sqrtdenest"], [217, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[217, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[217, 3, 1, "", "cse"], [217, 3, 1, "", "opt_cse"], [217, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[217, 1, 1, "", "EPath"], [217, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[217, 2, 1, "", "apply"], [217, 2, 1, "", "select"]], "sympy.simplify.fu": [[214, 3, 1, "", "TR0"], [214, 3, 1, "", "TR1"], [214, 3, 1, "", "TR10"], [214, 3, 1, "", "TR10i"], [214, 3, 1, "", "TR11"], [214, 3, 1, "", "TR111"], [214, 3, 1, "", "TR12"], [214, 3, 1, "", "TR12i"], [214, 3, 1, "", "TR13"], [214, 3, 1, "", "TR14"], [214, 3, 1, "", "TR15"], [214, 3, 1, "", "TR16"], [214, 3, 1, "", "TR2"], [214, 3, 1, "", "TR22"], [214, 3, 1, "", "TR2i"], [214, 3, 1, "", "TR3"], [214, 3, 1, "", "TR4"], [214, 3, 1, "", "TR5"], [214, 3, 1, "", "TR6"], [214, 3, 1, "", "TR7"], [214, 3, 1, "", "TR8"], [214, 3, 1, "", "TR9"], [214, 3, 1, "", "TRmorrie"], [214, 3, 1, "", "TRpower"], [214, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[217, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[217, 3, 1, "", "powdenest"], [217, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[217, 3, 1, "", "collect"], [217, 3, 1, "", "collect_const"], [217, 3, 1, "", "collect_sqrt"], [217, 3, 1, "", "fraction"], [217, 3, 1, "", "rad_rationalize"], [217, 3, 1, "", "radsimp"], [217, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[217, 3, 1, "", "ratsimp"], [217, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[217, 3, 1, "", "besselsimp"], [217, 3, 1, "", "hypersimilar"], [217, 3, 1, "", "hypersimp"], [217, 3, 1, "", "kroneckersimp"], [217, 3, 1, "", "logcombine"], [217, 3, 1, "", "nsimplify"], [217, 3, 1, "", "nthroot"], [217, 3, 1, "", "posify"], [217, 3, 1, "", "separatevars"], [217, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[217, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[217, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[223, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[218, 1, 1, "", "BinaryQuadratic"], [218, 1, 1, "", "CubicThue"], [218, 1, 1, "", "DiophantineEquationType"], [218, 1, 1, "", "DiophantineSolutionSet"], [218, 1, 1, "", "GeneralPythagorean"], [218, 1, 1, "", "GeneralSumOfEvenPowers"], [218, 1, 1, "", "GeneralSumOfSquares"], [218, 1, 1, "", "HomogeneousGeneralQuadratic"], [218, 1, 1, "", "HomogeneousTernaryQuadratic"], [218, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [218, 1, 1, "", "InhomogeneousGeneralQuadratic"], [218, 1, 1, "", "InhomogeneousTernaryQuadratic"], [218, 1, 1, "", "Linear"], [218, 3, 1, "", "PQa"], [218, 1, 1, "", "Univariate"], [218, 3, 1, "", "base_solution_linear"], [218, 3, 1, "", "classify_diop"], [218, 3, 1, "", "cornacchia"], [218, 3, 1, "", "descent"], [218, 3, 1, "", "diop_DN"], [218, 3, 1, "", "diop_bf_DN"], [218, 3, 1, "", "diop_general_pythagorean"], [218, 3, 1, "", "diop_general_sum_of_even_powers"], [218, 3, 1, "", "diop_general_sum_of_squares"], [218, 3, 1, "", "diop_linear"], [218, 3, 1, "", "diop_quadratic"], [218, 3, 1, "", "diop_solve"], [218, 3, 1, "", "diop_ternary_quadratic"], [218, 3, 1, "", "diop_ternary_quadratic_normal"], [218, 3, 1, "", "diophantine"], [218, 3, 1, "", "divisible"], [218, 3, 1, "", "equivalent"], [218, 3, 1, "", "find_DN"], [218, 3, 1, "", "gaussian_reduce"], [218, 3, 1, "", "holzer"], [218, 3, 1, "", "ldescent"], [218, 3, 1, "", "merge_solution"], [218, 3, 1, "", "parametrize_ternary_quadratic"], [218, 3, 1, "", "partition"], [218, 3, 1, "", "power_representation"], [218, 3, 1, "", "prime_as_sum_of_two_squares"], [218, 3, 1, "", "reconstruct"], [218, 3, 1, "", "sqf_normal"], [218, 3, 1, "", "square_factor"], [218, 3, 1, "", "sum_of_four_squares"], [218, 3, 1, "", "sum_of_powers"], [218, 3, 1, "", "sum_of_squares"], [218, 3, 1, "", "sum_of_three_squares"], [218, 3, 1, "", "transformation_to_DN"], [218, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[218, 2, 1, "", "matches"]], "sympy.solvers": [[220, 0, 0, "-", "inequalities"], [221, 0, 0, "-", "ode"], [222, 0, 0, "-", "pde"], [223, 0, 0, "-", "recurr"], [224, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[220, 3, 1, "", "reduce_abs_inequalities"], [220, 3, 1, "", "reduce_abs_inequality"], [220, 3, 1, "", "reduce_inequalities"], [220, 3, 1, "", "reduce_rational_inequalities"], [220, 3, 1, "", "solve_poly_inequalities"], [220, 3, 1, "", "solve_poly_inequality"], [220, 3, 1, "", "solve_rational_inequalities"], [220, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[221, 6, 1, "", "allhints"], [221, 3, 1, "", "checkinfsol"], [221, 3, 1, "", "checkodesol"], [221, 3, 1, "", "classify_ode"], [221, 3, 1, "", "constantsimp"], [221, 3, 1, "", "dsolve"], [221, 3, 1, "", "homogeneous_order"], [221, 3, 1, "", "infinitesimals"], [221, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[221, 3, 1, "", "lie_heuristic_abaco1_product"], [221, 3, 1, "", "lie_heuristic_abaco1_simple"], [221, 3, 1, "", "lie_heuristic_abaco2_similar"], [221, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [221, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [221, 3, 1, "", "lie_heuristic_bivariate"], [221, 3, 1, "", "lie_heuristic_chi"], [221, 3, 1, "", "lie_heuristic_function_sum"], [221, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[221, 3, 1, "", "_handle_Integral"], [221, 3, 1, "", "_linear_2eq_order1_type6"], [221, 3, 1, "", "_linear_2eq_order1_type7"], [221, 3, 1, "", "_nonlinear_2eq_order1_type1"], [221, 3, 1, "", "_nonlinear_2eq_order1_type2"], [221, 3, 1, "", "_nonlinear_2eq_order1_type3"], [221, 3, 1, "", "_nonlinear_2eq_order1_type4"], [221, 3, 1, "", "_nonlinear_2eq_order1_type5"], [221, 3, 1, "", "_nonlinear_3eq_order1_type1"], [221, 3, 1, "", "_nonlinear_3eq_order1_type2"], [221, 3, 1, "", "_nonlinear_3eq_order1_type3"], [221, 3, 1, "", "_nonlinear_3eq_order1_type4"], [221, 3, 1, "", "_nonlinear_3eq_order1_type5"], [221, 3, 1, "", "constant_renumber"], [221, 3, 1, "", "ode_1st_power_series"], [221, 3, 1, "", "ode_2nd_power_series_ordinary"], [221, 3, 1, "", "ode_2nd_power_series_regular"], [221, 3, 1, "", "ode_sol_simplicity"], [221, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[221, 3, 1, "", "compute_m_ybar"], [221, 3, 1, "", "construct_c"], [221, 3, 1, "", "construct_d"], [221, 3, 1, "", "get_gen_sol_from_part_sol"], [221, 3, 1, "", "rational_laurent_series"], [221, 3, 1, "", "remove_redundant_sols"], [221, 3, 1, "", "riccati_inverse_normal"], [221, 3, 1, "", "riccati_normal"], [221, 3, 1, "", "riccati_reduced"], [221, 3, 1, "", "solve_aux_eq"], [221, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[221, 1, 1, "", "AlmostLinear"], [221, 1, 1, "", "Bernoulli"], [221, 1, 1, "", "Factorable"], [221, 1, 1, "", "FirstExact"], [221, 1, 1, "", "FirstLinear"], [221, 1, 1, "", "HomogeneousCoeffBest"], [221, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [221, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [221, 1, 1, "", "LieGroup"], [221, 1, 1, "", "LinearCoefficients"], [221, 1, 1, "", "Liouville"], [221, 1, 1, "", "NthAlgebraic"], [221, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [221, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [221, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [221, 1, 1, "", "NthLinearEulerEqHomogeneous"], [221, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [221, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [221, 1, 1, "", "NthOrderReducible"], [221, 1, 1, "", "RationalRiccati"], [221, 1, 1, "", "RiccatiSpecial"], [221, 1, 1, "", "SecondHypergeometric"], [221, 1, 1, "", "SecondLinearAiry"], [221, 1, 1, "", "SecondLinearBessel"], [221, 1, 1, "", "Separable"], [221, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[221, 3, 1, "", "canonical_odes"], [221, 3, 1, "", "dsolve_system"], [221, 3, 1, "", "linear_ode_to_matrix"], [221, 3, 1, "", "linodesolve"], [221, 3, 1, "", "linodesolve_type"], [221, 3, 1, "", "matrix_exp"], [221, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[222, 3, 1, "", "checkpdesol"], [222, 3, 1, "", "classify_pde"], [222, 3, 1, "", "pde_1st_linear_constant_coeff"], [222, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [222, 3, 1, "", "pde_1st_linear_variable_coeff"], [222, 3, 1, "", "pde_separate"], [222, 3, 1, "", "pde_separate_add"], [222, 3, 1, "", "pde_separate_mul"], [222, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[223, 3, 1, "", "solve_poly_system"], [223, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[223, 3, 1, "", "rsolve"], [223, 3, 1, "", "rsolve_hyper"], [223, 3, 1, "", "rsolve_poly"], [223, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[223, 3, 1, "", "checksol"], [223, 3, 1, "", "nsolve"], [223, 3, 1, "", "solve"], [223, 3, 1, "", "solve_linear"], [223, 3, 1, "", "solve_linear_system"], [223, 3, 1, "", "solve_linear_system_LU"], [223, 3, 1, "", "solve_undetermined_coeffs"], [223, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[224, 3, 1, "", "_is_exponential"], [224, 3, 1, "", "_is_logarithmic"], [224, 3, 1, "", "_solve_exponential"], [224, 3, 1, "", "_solve_logarithm"], [224, 3, 1, "", "_transolve"], [224, 3, 1, "", "domain_check"], [224, 3, 1, "", "invert_complex"], [224, 3, 1, "", "invert_real"], [224, 3, 1, "", "linear_eq_to_matrix"], [224, 3, 1, "", "linsolve"], [224, 3, 1, "", "nonlinsolve"], [224, 3, 1, "", "solveset"], [224, 3, 1, "", "solveset_complex"], [224, 3, 1, "", "solveset_real"], [224, 3, 1, "", "solvify"]], "sympy.stats": [[225, 3, 1, "", "Arcsin"], [225, 3, 1, "", "Benini"], [225, 3, 1, "", "Bernoulli"], [225, 1, 1, "", "BernoulliProcess"], [225, 3, 1, "", "Beta"], [225, 3, 1, "", "BetaBinomial"], [225, 3, 1, "", "BetaNoncentral"], [225, 3, 1, "", "BetaPrime"], [225, 3, 1, "", "Binomial"], [225, 3, 1, "", "BoundedPareto"], [225, 3, 1, "", "Cauchy"], [225, 1, 1, "", "CentralMoment"], [225, 3, 1, "", "Chi"], [225, 3, 1, "", "ChiNoncentral"], [225, 3, 1, "", "ChiSquared"], [225, 3, 1, "", "Coin"], [225, 1, 1, "", "ContinuousMarkovChain"], [225, 3, 1, "", "ContinuousRV"], [225, 1, 1, "", "Covariance"], [225, 1, 1, "", "CrossCovarianceMatrix"], [225, 3, 1, "", "Dagum"], [225, 3, 1, "", "Die"], [225, 1, 1, "", "DiscreteMarkovChain"], [225, 3, 1, "", "DiscreteUniform"], [225, 3, 1, "", "E"], [225, 3, 1, "", "Erlang"], [225, 3, 1, "", "ExGaussian"], [225, 1, 1, "", "Expectation"], [225, 1, 1, "", "ExpectationMatrix"], [225, 3, 1, "", "Exponential"], [225, 3, 1, "", "FDistribution"], [225, 3, 1, "", "FiniteRV"], [225, 3, 1, "", "FisherZ"], [225, 3, 1, "", "Frechet"], [225, 3, 1, "", "Gamma"], [225, 3, 1, "", "GammaInverse"], [225, 1, 1, "", "GammaProcess"], [225, 3, 1, "", "GeneralizedMultivariateLogGamma"], [225, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [225, 3, 1, "", "Geometric"], [225, 3, 1, "", "Gompertz"], [225, 3, 1, "", "Gumbel"], [225, 3, 1, "", "Hermite"], [225, 3, 1, "", "Hypergeometric"], [225, 3, 1, "", "JointRV"], [225, 3, 1, "", "Kumaraswamy"], [225, 3, 1, "", "Laplace"], [225, 3, 1, "", "Levy"], [225, 3, 1, "", "LogLogistic"], [225, 3, 1, "", "LogNormal"], [225, 3, 1, "", "Logarithmic"], [225, 3, 1, "", "Logistic"], [225, 3, 1, "", "Lomax"], [225, 3, 1, "", "MatrixGamma"], [225, 3, 1, "", "MatrixNormal"], [225, 3, 1, "", "Maxwell"], [225, 1, 1, "", "Moment"], [225, 3, 1, "", "Moyal"], [225, 3, 1, "", "Multinomial"], [225, 3, 1, "", "MultivariateBeta"], [225, 3, 1, "", "MultivariateEwens"], [225, 3, 1, "", "MultivariateLaplace"], [225, 3, 1, "", "MultivariateNormal"], [225, 3, 1, "", "MultivariateT"], [225, 3, 1, "", "Nakagami"], [225, 3, 1, "", "NegativeBinomial"], [225, 3, 1, "", "NegativeMultinomial"], [225, 3, 1, "", "Normal"], [225, 3, 1, "", "NormalGamma"], [225, 3, 1, "", "P"], [225, 3, 1, "", "Pareto"], [225, 3, 1, "", "Poisson"], [225, 1, 1, "", "PoissonProcess"], [225, 3, 1, "", "PowerFunction"], [225, 1, 1, "", "Probability"], [225, 3, 1, "", "QuadraticU"], [225, 3, 1, "", "Rademacher"], [225, 3, 1, "", "RaisedCosine"], [225, 3, 1, "", "Rayleigh"], [225, 3, 1, "", "Reciprocal"], [225, 3, 1, "", "ShiftedGompertz"], [225, 3, 1, "", "Skellam"], [225, 3, 1, "", "StudentT"], [225, 3, 1, "", "Trapezoidal"], [225, 3, 1, "", "Triangular"], [225, 3, 1, "", "Uniform"], [225, 3, 1, "", "UniformSum"], [225, 1, 1, "", "Variance"], [225, 1, 1, "", "VarianceMatrix"], [225, 3, 1, "", "VonMises"], [225, 3, 1, "", "Wald"], [225, 3, 1, "", "Weibull"], [225, 1, 1, "", "WienerProcess"], [225, 3, 1, "", "WignerSemicircle"], [225, 3, 1, "", "Wishart"], [225, 3, 1, "", "YuleSimon"], [225, 3, 1, "", "Zeta"], [225, 3, 1, "", "cmoment"], [225, 3, 1, "", "correlation"], [225, 3, 1, "", "coskewness"], [225, 3, 1, "", "covariance"], [225, 0, 0, "-", "crv"], [225, 0, 0, "-", "crv_types"], [225, 3, 1, "", "density"], [225, 3, 1, "", "entropy"], [225, 3, 1, "", "factorial_moment"], [225, 0, 0, "-", "frv"], [225, 0, 0, "-", "frv_types"], [225, 3, 1, "", "given"], [225, 3, 1, "", "kurtosis"], [225, 3, 1, "", "marginal_distribution"], [225, 3, 1, "", "median"], [225, 3, 1, "", "moment"], [225, 3, 1, "", "quantile"], [225, 0, 0, "-", "rv"], [225, 3, 1, "", "sample"], [225, 3, 1, "", "sample_iter"], [225, 3, 1, "", "skewness"], [225, 3, 1, "", "std"], [225, 3, 1, "", "variance"], [225, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[225, 2, 1, "", "expectation"], [225, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[225, 2, 1, "", "absorbing_probabilities"], [225, 2, 1, "", "canonical_form"], [225, 2, 1, "", "communication_classes"], [225, 2, 1, "", "decompose"], [225, 2, 1, "", "fixed_row_vector"], [225, 2, 1, "", "fundamental_matrix"], [225, 4, 1, "", "limiting_distribution"], [225, 2, 1, "", "sample"], [225, 2, 1, "", "stationary_distribution"], [225, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[225, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[225, 1, 1, "", "ContinuousDomain"], [225, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[225, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[225, 3, 1, "", "Die"], [225, 3, 1, "", "Normal"]], "sympy.stats.frv": [[225, 1, 1, "", "FiniteDomain"], [225, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[225, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[225, 1, 1, "", "ConditionalDomain"], [225, 1, 1, "", "PSpace"], [225, 1, 1, "", "ProductDomain"], [225, 1, 1, "", "ProductPSpace"], [225, 1, 1, "", "RandomDomain"], [225, 1, 1, "", "RandomSymbol"], [225, 1, 1, "", "SingleDomain"], [225, 1, 1, "", "SinglePSpace"], [225, 3, 1, "", "pspace"], [225, 3, 1, "", "random_symbols"], [225, 3, 1, "", "rs_swap"], [225, 3, 1, "", "sampling_E"], [225, 3, 1, "", "sampling_P"], [225, 3, 1, "", "sampling_density"]], "sympy.tensor": [[226, 0, 0, "-", "array"], [229, 0, 0, "-", "index_methods"], [230, 0, 0, "-", "indexed"], [231, 0, 0, "-", "tensor"], [232, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[226, 1, 1, "", "ImmutableDenseNDimArray"], [226, 1, 1, "", "ImmutableSparseNDimArray"], [226, 1, 1, "", "MutableDenseNDimArray"], [226, 1, 1, "", "MutableSparseNDimArray"], [226, 3, 1, "", "derive_by_array"], [227, 0, 0, "-", "expressions"], [226, 3, 1, "", "permutedims"], [226, 3, 1, "", "tensorcontraction"], [226, 3, 1, "", "tensordiagonal"], [226, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[229, 3, 1, "", "get_contraction_structure"], [229, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[230, 1, 1, "", "Idx"], [230, 1, 1, "", "Indexed"], [230, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[230, 4, 1, "", "label"], [230, 4, 1, "", "lower"], [230, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[230, 4, 1, "", "base"], [230, 4, 1, "", "indices"], [230, 4, 1, "", "ranges"], [230, 4, 1, "", "rank"], [230, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[230, 4, 1, "", "label"], [230, 4, 1, "", "offset"], [230, 4, 1, "", "shape"], [230, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[231, 1, 1, "", "TensAdd"], [231, 1, 1, "", "TensExpr"], [231, 1, 1, "", "TensMul"], [231, 1, 1, "", "TensorHead"], [231, 1, 1, "", "TensorIndex"], [231, 1, 1, "", "TensorIndexType"], [231, 1, 1, "", "TensorSymmetry"], [231, 1, 1, "", "TensorType"], [231, 1, 1, "", "_TensorManager"], [231, 3, 1, "", "canon_bp"], [231, 3, 1, "", "riemann_cyclic"], [231, 3, 1, "", "riemann_cyclic_replace"], [231, 3, 1, "", "tensor_heads"], [231, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[231, 2, 1, "", "canon_bp"], [231, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[231, 2, 1, "", "get_matrix"], [231, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[231, 2, 1, "", "canon_bp"], [231, 2, 1, "", "contract_metric"], [231, 2, 1, "", "get_free_indices"], [231, 2, 1, "", "get_indices"], [231, 2, 1, "", "perm2tensor"], [231, 2, 1, "", "sorted_components"], [231, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[231, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[231, 2, 1, "", "direct_product"], [231, 2, 1, "", "fully_symmetric"], [231, 2, 1, "", "no_symmetry"], [231, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[231, 2, 1, "", "clear"], [231, 2, 1, "", "comm_i2symbol"], [231, 2, 1, "", "comm_symbols2i"], [231, 2, 1, "", "get_comm"], [231, 2, 1, "", "set_comm"], [231, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[232, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[234, 0, 0, "-", "pytest"], [235, 0, 0, "-", "randtest"], [236, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[234, 3, 1, "", "SKIP"], [234, 3, 1, "", "nocache_fail"], [234, 3, 1, "", "raises"], [234, 3, 1, "", "warns"], [234, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[236, 1, 1, "", "PyTestReporter"], [236, 1, 1, "", "Reporter"], [236, 1, 1, "", "SymPyDocTestFinder"], [236, 1, 1, "", "SymPyDocTestRunner"], [236, 1, 1, "", "SymPyOutputChecker"], [236, 1, 1, "", "SymPyTestResults"], [236, 3, 1, "", "convert_to_native_paths"], [236, 3, 1, "", "doctest"], [236, 3, 1, "", "get_sympy_dir"], [236, 3, 1, "", "raise_on_deprecated"], [236, 3, 1, "", "run_all_tests"], [236, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [236, 3, 1, "", "split_list"], [236, 3, 1, "", "sympytestfile"], [236, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[236, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[236, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[236, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[236, 5, 1, "", "attempted"], [236, 5, 1, "", "failed"]], "sympy.utilities": [[237, 0, 0, "-", "autowrap"], [238, 0, 0, "-", "codegen"], [239, 0, 0, "-", "decorator"], [240, 0, 0, "-", "enumerative"], [241, 0, 0, "-", "exceptions"], [243, 0, 0, "-", "iterables"], [244, 0, 0, "-", "lambdify"], [245, 0, 0, "-", "memoization"], [246, 0, 0, "-", "misc"], [247, 0, 0, "-", "pkgdata"], [248, 0, 0, "-", "source"], [249, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[237, 1, 1, "", "CodeWrapper"], [237, 1, 1, "", "CythonCodeWrapper"], [237, 1, 1, "", "DummyWrapper"], [237, 1, 1, "", "F2PyCodeWrapper"], [237, 1, 1, "", "UfuncifyCodeWrapper"], [237, 3, 1, "", "autowrap"], [237, 3, 1, "", "binary_function"], [237, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[237, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[237, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[238, 1, 1, "", "Argument"], [238, 1, 1, "", "CCodeGen"], [238, 1, 1, "", "CodeGen"], [238, 1, 1, "", "DataType"], [238, 1, 1, "", "FCodeGen"], [238, 1, 1, "", "JuliaCodeGen"], [238, 1, 1, "", "OctaveCodeGen"], [238, 1, 1, "", "OutputArgument"], [238, 1, 1, "", "Result"], [238, 1, 1, "", "Routine"], [238, 1, 1, "", "RustCodeGen"], [238, 3, 1, "", "codegen"], [238, 3, 1, "", "get_default_datatype"], [238, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[238, 2, 1, "", "dump_c"], [238, 2, 1, "", "dump_h"], [238, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[238, 2, 1, "", "dump_code"], [238, 2, 1, "", "routine"], [238, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[238, 2, 1, "", "dump_f95"], [238, 2, 1, "", "dump_h"], [238, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[238, 2, 1, "", "dump_jl"], [238, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[238, 2, 1, "", "dump_m"], [238, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[238, 4, 1, "", "result_variables"], [238, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[238, 2, 1, "", "dump_rs"], [238, 2, 1, "", "get_prototype"], [238, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[239, 3, 1, "", "conserve_mpmath_dps"], [239, 3, 1, "", "deprecated"], [239, 3, 1, "", "doctest_depends_on"], [239, 3, 1, "", "memoize_property"], [239, 1, 1, "", "no_attrs_in_subclass"], [239, 3, 1, "", "public"], [239, 3, 1, "", "threaded"], [239, 3, 1, "", "threaded_factory"], [239, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[240, 1, 1, "", "MultisetPartitionTraverser"], [240, 3, 1, "", "factoring_visitor"], [240, 3, 1, "", "list_visitor"], [240, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[240, 2, 1, "", "count_partitions"], [240, 2, 1, "", "enum_all"], [240, 2, 1, "", "enum_large"], [240, 2, 1, "", "enum_range"], [240, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[241, 7, 1, "", "SymPyDeprecationWarning"], [241, 3, 1, "", "ignore_warnings"], [241, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[243, 1, 1, "", "NotIterable"], [243, 3, 1, "", "binary_partitions"], [243, 3, 1, "", "bracelets"], [243, 3, 1, "", "capture"], [243, 3, 1, "", "common_prefix"], [243, 3, 1, "", "common_suffix"], [243, 3, 1, "", "connected_components"], [243, 3, 1, "", "dict_merge"], [243, 3, 1, "", "filter_symbols"], [243, 3, 1, "", "flatten"], [243, 3, 1, "", "generate_bell"], [243, 3, 1, "", "generate_derangements"], [243, 3, 1, "", "generate_involutions"], [243, 3, 1, "", "generate_oriented_forest"], [243, 3, 1, "", "group"], [243, 3, 1, "", "has_dups"], [243, 3, 1, "", "has_variety"], [243, 3, 1, "", "ibin"], [243, 3, 1, "", "iproduct"], [243, 3, 1, "", "is_palindromic"], [243, 3, 1, "", "is_sequence"], [243, 3, 1, "", "iterable"], [243, 3, 1, "", "kbins"], [243, 3, 1, "", "least_rotation"], [243, 3, 1, "", "minlex"], [243, 3, 1, "", "multiset"], [243, 3, 1, "", "multiset_combinations"], [243, 3, 1, "", "multiset_derangements"], [243, 3, 1, "", "multiset_partitions"], [243, 3, 1, "", "multiset_permutations"], [243, 3, 1, "", "necklaces"], [243, 3, 1, "", "numbered_symbols"], [243, 3, 1, "", "ordered_partitions"], [243, 3, 1, "", "partitions"], [243, 3, 1, "", "permute_signs"], [243, 3, 1, "", "postfixes"], [243, 3, 1, "", "prefixes"], [243, 3, 1, "", "random_derangement"], [243, 3, 1, "", "reshape"], [243, 3, 1, "", "rotate_left"], [243, 3, 1, "", "rotate_right"], [243, 3, 1, "", "rotations"], [243, 3, 1, "", "roundrobin"], [243, 3, 1, "", "runs"], [243, 3, 1, "", "sift"], [243, 3, 1, "", "signed_permutations"], [243, 3, 1, "", "strongly_connected_components"], [243, 3, 1, "", "subsets"], [243, 3, 1, "", "take"], [243, 3, 1, "", "topological_sort"], [243, 3, 1, "", "unflatten"], [243, 3, 1, "", "uniq"], [243, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[244, 3, 1, "", "implemented_function"], [244, 3, 1, "", "lambdastr"], [244, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[245, 3, 1, "", "assoc_recurrence_memo"], [245, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[246, 3, 1, "", "as_int"], [246, 3, 1, "", "debug"], [246, 3, 1, "", "debug_decorator"], [246, 3, 1, "", "filldedent"], [246, 3, 1, "", "find_executable"], [246, 3, 1, "", "func_name"], [246, 3, 1, "", "ordinal"], [246, 3, 1, "", "rawlines"], [246, 3, 1, "", "replace"], [246, 3, 1, "", "strlines"], [246, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[247, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[248, 3, 1, "", "get_class"], [248, 3, 1, "", "get_mod_func"], [248, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[249, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[250, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[250, 2, 1, "", "__init__"], [250, 2, 1, "", "create_new"], [250, 2, 1, "", "locate_new"], [250, 2, 1, "", "orient_new"], [250, 2, 1, "", "orient_new_axis"], [250, 2, 1, "", "orient_new_body"], [250, 2, 1, "", "orient_new_quaternion"], [250, 2, 1, "", "orient_new_space"], [250, 2, 1, "", "position_wrt"], [250, 2, 1, "", "rotation_matrix"], [250, 2, 1, "", "scalar_map"]], "sympy.vector": [[253, 3, 1, "", "curl"], [253, 3, 1, "", "divergence"], [253, 3, 1, "", "express"], [253, 3, 1, "", "gradient"], [253, 3, 1, "", "is_conservative"], [253, 3, 1, "", "is_solenoidal"], [253, 3, 1, "", "matrix_to_vector"], [253, 3, 1, "", "scalar_potential"], [253, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[250, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[250, 2, 1, "", "cross"], [250, 2, 1, "", "dot"], [250, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[250, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[250, 4, 1, "", "components"], [250, 2, 1, "", "cross"], [250, 2, 1, "", "dot"], [250, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[250, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[250, 2, 1, "", "multiplicity"], [250, 2, 1, "", "rational_parametrization"], [250, 2, 1, "", "regular_point"], [250, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[250, 1, 1, "", "ParametricIntegral"], [253, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[252, 1, 1, "", "AxisOrienter"], [252, 1, 1, "", "BodyOrienter"], [252, 1, 1, "", "Orienter"], [252, 1, 1, "", "QuaternionOrienter"], [252, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[252, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[252, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[252, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[252, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[250, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[250, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[250, 4, 1, "", "components"], [250, 2, 1, "", "cross"], [250, 2, 1, "", "dot"], [250, 2, 1, "", "magnitude"], [250, 2, 1, "", "normalize"], [250, 2, 1, "", "outer"], [250, 2, 1, "", "projection"], [250, 2, 1, "", "separate"], [250, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 23, 25, 27, 28, 38, 79, 98, 137, 186, 195, 250, 253, 254, 257, 271, 273, 276], "build": [1, 3], "document": [1, 3, 4, 6, 7, 27], "requir": [1, 4], "depend": [1, 3, 134, 195, 255], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 191], "10": [1, 10, 100], "doc": [1, 196], "local": 1, "instal": [1, 27, 28, 98, 280], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 23, 25, 26, 198], "recommend": [3, 7], "interact": [3, 84, 191], "us": [3, 7, 10, 16, 23, 24, 25, 26, 38, 59, 80, 81, 97, 100, 129, 134, 135, 189, 191, 202, 224, 255], "print": [3, 10, 20, 38, 84, 110, 118, 179, 185, 205, 281], "pars": [3, 26, 98], "logic": [3, 19, 86, 261, 264], "plot": [3, 10, 104, 150, 191], "lambdifi": [3, 10, 97, 244, 271], "code": [3, 4, 5, 7, 10, 38, 40, 110, 189, 205, 248, 261, 263], "gener": [3, 6, 7, 38, 46, 48, 195, 200, 224, 256, 261, 263], "autowrap": [3, 38, 237], "printer": [3, 38, 205, 281], "test": [3, 5, 10, 53, 86, 204, 233, 235, 236, 278], "onli": [3, 224], "statist": 3, "symengin": 3, "backend": [3, 191], "experiment": [3, 98], "rubi": 3, "integr": [3, 10, 60, 64, 78, 80, 81, 82, 83, 110, 193, 200, 260, 272], "sage": 3, "develop": [3, 5, 56], "get": [3, 5, 12], "sourc": [3, 10, 12, 248], "run": [3, 5, 28, 236], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 134, 194, 195, 224, 276, 279], "i": [4, 12, 24, 81, 97, 134, 194, 205, 224, 276], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 26, 81], "doe": [4, 12, 224], "public": 4, "api": [4, 27, 77, 81, 83, 106, 113, 183, 224, 237, 238, 251, 261], "Not": [4, 23, 24, 25, 26], "The": [4, 10, 18, 20, 39, 46, 81, 134, 175, 187, 200, 212, 215, 256, 257, 276], "purpos": 4, "technic": 4, "possibl": [4, 23, 278], "how": [4, 21, 27, 81, 189, 224], "long": 4, "should": [4, 97], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 56, 68, 134, 212, 214, 274, 283], "entri": [4, 92], "environ": 5, "setup": 5, "git": [5, 28], "virtual": 5, "docstr": [6, 7, 99, 102, 111, 112, 114, 115, 116, 117, 118, 119, 181, 182, 184, 185, 250, 252, 253], "style": [6, 7], "guid": [6, 7, 21, 27, 130, 187, 258], "guidelin": [6, 7], "format": [6, 7, 10, 26], "section": 6, "1": [6, 10, 81, 100, 120, 134, 146], "singl": [6, 12, 14], "sentenc": 6, "summari": 6, "2": [6, 10, 81, 100, 120, 134], "explan": [6, 13, 27], "3": [6, 10, 83, 100, 120, 171], "exampl": [6, 20, 24, 25, 29, 56, 68, 80, 83, 96, 100, 107, 121, 134, 138, 142, 173, 175, 189, 204, 205, 212, 215, 225, 226, 227, 230, 256, 276, 282], "4": [6, 10, 100], "paramet": [6, 215, 224], "5": [6, 10, 100], "see": [6, 56, 243, 256], "also": [6, 56, 243], "6": [6, 10, 100], "refer": [6, 18, 27, 30, 37, 55, 56, 58, 68, 74, 81, 83, 89, 90, 92, 94, 96, 98, 113, 136, 142, 145, 175, 187, 189, 190, 191, 192, 196, 198, 200, 201, 202, 212, 214, 215, 218, 224, 237, 238, 258, 261], "sampl": [6, 10], "class": [6, 15, 37, 38, 55, 58, 90, 92, 94, 96, 134, 180, 191, 200, 205, 218, 226, 250, 252], "ar": [6, 189, 195, 224], "mathemat": [6, 12, 137], "function": [6, 10, 12, 20, 24, 26, 38, 46, 55, 56, 62, 63, 64, 74, 75, 78, 79, 81, 86, 92, 96, 98, 100, 110, 135, 157, 160, 181, 182, 186, 191, 193, 195, 196, 201, 204, 205, 215, 218, 221, 222, 226, 253, 257, 281, 282], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 38, 64, 181, 224, 225], "narr": 7, "markdown": 7, "prefer": [7, 26], "math": [7, 38], "latex": [7, 98, 281], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 27, 202], "make": [9, 23, 26], "list": [10, 12, 14], "activ": 10, "silenc": 10, "warn": [10, 241], "version": 10, "12": 10, "new": [10, 255], "joint": [10, 114, 131, 225], "coordin": [10, 110, 124, 134, 191, 254, 255, 257, 259], "intermedi": 10, "frame": [10, 189], "attach": 10, "point": [10, 20, 60, 71, 110, 179, 188, 254], "argument": [10, 12, 224], "11": [10, 100], "mathematica": [10, 205], "parser": [10, 120], "redund": 10, "static": 10, "method": [10, 16, 20, 28, 115, 124, 127, 128, 129, 132, 133, 134, 205, 222, 224, 229, 255, 278], "carmichael": 10, "check": [10, 181], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 137, 224], "travers": [10, 56], "have": [10, 23, 25, 204], "been": 10, "move": [10, 215], "core": [10, 56, 89], "trace": 10, "compat": [10, 227], "submodul": [10, 68], "9": [10, 100], "expr_free_symbol": 10, "stat": [10, 225], "numsampl": 10, "n": [10, 226, 227], "poli": [10, 194, 195, 196, 203], "solver": [10, 203, 219, 220, 221, 223, 224, 283], "rawmatrix": 10, "non": 10, "expr": [10, 56], "object": [10, 15, 230], "matrix": [10, 34, 89, 92, 93, 134, 225, 278], "get_seg": 10, "attribut": [10, 39, 46], "mdft": 10, "physic": [10, 107, 110, 121, 131, 132, 133, 134, 135, 136, 137, 138, 177, 179, 183, 186, 187, 188, 189, 261, 267], "matric": [10, 16, 87, 88, 89, 90, 91, 92, 94, 107, 109, 227, 261, 265, 278], "privat": 10, "sparsematrix": [10, 94], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 100], "theanocod": 10, "assumpt": [10, 15, 18, 20, 33, 56], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 56, 64, 86, 186, 189, 257], "7": [10, 100], "call": [10, 26], "stochasticprocess": 10, "distribut": [10, 198, 225], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 38, 53, 54, 73, 92, 143, 200, 223, 242, 249, 261, 269], "misc": [10, 33], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 281], "pretti": [10, 205, 281], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 23, 25, 34, 68, 189, 213, 224, 281], "oper": [10, 12, 78, 92, 148, 157, 159, 160, 181, 186, 189, 215, 226, 232, 254, 256, 257, 271, 278], "longer": 10, "accept": 10, "arg": [10, 277], "variou": [10, 204], "randtest": 10, "mix": 10, "polynomi": [10, 64, 78, 193, 195, 196, 197, 198, 200, 201, 202, 204, 223, 282], "express": [10, 12, 23, 24, 38, 68, 75, 78, 86, 89, 98, 112, 195, 204, 227, 255, 271, 277], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 43], "permut": [10, 47, 48], "string": [10, 18, 26, 271], "fallback": 10, "sympifi": [10, 56], "creat": [10, 12, 20, 24, 92], "an": [10, 23, 24, 68, 120, 175, 215, 224, 277], "indefinit": 10, "eq": [10, 23], "tensor": [10, 52, 64, 169, 228, 231, 232], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 174, 175, 176, 178], "quantiti": [10, 173, 175, 177, 255], "is_emptyset": 10, "productset": 10, "iter": [10, 213, 243], "set_potential_energi": 10, "mechan": [10, 18, 101, 110, 113, 121, 130, 131, 132, 133, 134, 135, 136, 137, 138, 157, 225], "condit": [10, 81, 213], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 192], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 201], "lambda": 10, "evalu": [10, 12, 20, 60, 78, 137, 277], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 278], "col": 10, "jordan_block": 10, "dimens": [10, 68, 172, 175], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 23, 26, 204, 227], "dot": [10, 281], "product": [10, 59, 158, 169, 226, 256], "column": [10, 278], "vector": [10, 46, 130, 179, 181, 183, 186, 187, 188, 189, 198, 250, 251, 253, 254, 255, 257, 258, 259, 260], "geometri": [10, 58, 68, 192], "line3d": 10, "equat": [10, 22, 23, 24, 25, 26, 132, 133, 134, 173, 193, 218, 223, 224, 283], "need": [10, 175], "k": [10, 196], "modul": [10, 105, 140, 179, 187, 192, 193, 194, 195, 198, 200, 201, 218, 221, 222, 224, 237], "arrai": [10, 226, 227], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 120, 274], "pitfal": 12, "introduct": [12, 16, 30, 37, 38, 39, 46, 58, 68, 86, 120, 137, 175, 186, 188, 191, 192, 193, 200, 204, 259, 276], "equal": [12, 23, 274], "sign": [12, 274], "doubl": 12, "variabl": [12, 26, 191, 225, 255], "assign": 12, "between": [12, 18, 177, 195], "symbol": [12, 18, 19, 20, 56, 75, 134, 138, 190, 195, 201, 204, 224, 274, 276], "python": [12, 38], "number": [12, 34, 42, 56, 59, 60, 81, 96, 195, 200, 204, 261, 266], "v": [12, 19, 195], "float": [12, 60], "ration": [12, 195, 196, 201, 204, 207, 221, 282], "immut": [12, 90], "invers": [12, 20, 62, 81], "trig": 12, "sqrt": 12, "special": [12, 17, 38, 64, 201, 213, 282], "dictionari": [12, 14, 25], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 26, 100, 193, 200, 223, 224, 283], "output": [14, 110, 224], "empti": 14, "Of": 14, "valu": [14, 19, 26], "boolean": [14, 19, 86], "classif": 15, "kind": [15, 56], "func": [15, 277], "finit": [16, 36, 39, 192, 195, 198, 200, 204, 215, 225, 272], "differ": [16, 18, 36, 137, 195, 255, 272], "approxim": [16, 38], "deriv": [16, 189, 226, 257, 272], "A": [16, 122, 123, 126, 127, 128, 129, 134, 276, 283], "direct": [16, 257], "topic": [17, 110, 179, 261, 268], "old": [18, 195], "system": [18, 24, 25, 104, 125, 138, 172, 174, 175, 178, 221, 223, 254, 255, 257, 259], "appli": [18, 81, 215], "input": [18, 224], "predic": [18, 33, 34], "abov": 18, "definit": [18, 20, 74], "implic": 18, "interpret": 18, "other": [18, 20, 28, 75, 186, 255], "is_": 18, "implement": [18, 81, 186, 205, 215, 237, 238, 254, 257], "limit": [18, 80, 120, 210, 212, 272], "combin": [18, 78], "fuzzi": 19, "three": [19, 68], "bool": 19, "custom": [20, 191, 205], "easi": 20, "case": [20, 224], "fulli": 20, "defin": 20, "automat": [20, 204], "eval": 20, "remind": 20, "kei": [20, 137, 277], "numer": [20, 24, 26, 60, 78, 83, 97, 110, 137], "evalf": [20, 56, 97, 271], "rewrit": [20, 38, 206, 282], "simplif": [20, 60, 86, 214, 282], "doit": 20, "expand": [20, 204, 206, 282], "differenti": [20, 58, 78, 110, 223, 224, 283], "as_real_imag": 20, "miscellan": [20, 62, 68, 246], "_eval_": 20, "complet": [20, 120], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 56], "fma": 20, "addit": [20, 78], "tip": [20, 271, 272, 274, 277, 278], "algebra": [23, 25, 30, 85, 92, 145, 189, 192, 195, 200, 204, 223, 283], "guidanc": [23, 24, 25, 26], "your": 23, "Into": [23, 24, 25], "That": [23, 24, 25, 26], "zero": [23, 26, 104, 198, 204, 278], "put": 23, "form": [23, 25, 26, 86, 93, 134, 227], "restrict": 23, "domain": [23, 193, 195, 196, 201, 204, 224], "solut": [23, 24, 25, 26, 157, 224, 256], "explicitli": 23, "repres": [23, 26, 81, 165, 195, 200], "infinit": [23, 224], "result": [23, 24, 25, 204], "substitut": [23, 24, 110, 179, 271], "solveset": [23, 224], "cannot": [23, 25], "necessarili": 23, "Be": [23, 24], "interrog": 23, "programmat": 23, "can": [23, 24, 25, 26], "speed": [23, 25, 26, 110, 134], "up": [23, 25, 26, 281], "all": [23, 24, 25], "With": [23, 24, 25, 26], "No": 23, "close": [23, 25, 26], "which": [23, 25, 97, 205], "One": 24, "altern": [24, 25, 189], "consid": [24, 25], "find": [24, 200, 201], "complex": [24, 62, 195], "root": [24, 201], "real": [24, 195], "ensur": [24, 26, 224], "found": 24, "given": [24, 25], "interv": [24, 191], "increas": 24, "precis": 24, "scipi": 24, "report": 24, "problem": [24, 100, 200, 256], "you": 26, "might": 26, "exact": 26, "includ": 26, "consist": 26, "ani": [26, 224], "denomin": 26, "do": [26, 224], "simplifi": [26, 38, 198, 216, 217, 282], "welcom": 27, "": [27, 115, 124, 127, 128, 129, 132, 133, 134, 155, 166, 204, 214, 223, 224, 255, 260, 279], "tutori": [27, 218, 270, 275], "anaconda": 28, "mpmath": 28, "question": 28, "abc": 29, "caveat": [29, 98], "quaternion": 30, "ask": 31, "assum": 32, "queri": 33, "content": [33, 43, 63, 76, 82, 197, 209, 219, 228], "perform": 33, "improv": [33, 120], "common": [34, 87, 110, 179, 204, 205, 206], "calculu": [34, 36, 189, 272], "theori": [34, 37, 96, 261, 266], "order": [34, 201, 212, 215], "refin": 35, "singular": [36, 100], "weight": 36, "categori": 37, "base": [37, 58, 92, 192, 193, 204, 211, 224], "diagram": 37, "draw": 37, "codegen": [38, 238], "tool": [38, 95], "abstract": [38, 101, 105, 107, 130, 140, 157, 187, 196], "syntax": 38, "tree": [38, 195, 205, 277], "ast": [38, 120], "predefin": 38, "node": 38, "c": [38, 205], "cfunction": 38, "specif": 38, "cnode": 38, "cxxnode": 38, "fortran": [38, 205], "fnode": 38, "algorithm": [38, 39, 155, 166, 198, 201, 207, 212, 215], "pyutil": 38, "cutil": 38, "futil": 38, "present": [39, 46], "group": [39, 41, 44, 46, 47, 175], "overview": [39, 46, 81], "facil": 39, "construct": [39, 46, 227], "free": [39, 193], "word": [39, 46], "coset": 39, "enumer": [39, 61], "todd": 39, "coxet": 39, "cosett": 39, "compress": 39, "standard": 39, "subgroup": 39, "index": [39, 46, 227, 230], "low": 39, "reidemeist": 39, "schreier": 39, "bibliographi": [39, 46], "grai": 40, "constructor": [41, 201, 278], "nilpot": 42, "abelian": 42, "cyclic": 42, "name": 44, "partit": [45, 243], "polycycl": 46, "polycyclicgroup": 46, "collector": 46, "comput": [46, 81, 97, 157, 204, 276], "minim": [46, 200], "uncollect": 46, "subword": 46, "collect": [46, 206, 282], "expon": [46, 204], "depth": [46, 68], "lead": 46, "polyhedron": 49, "prufer": 50, "sequenc": [50, 78, 198, 201, 210, 211], "subset": [51, 59], "canonic": 52, "concret": 55, "hypergeometr": [55, 64, 75, 78, 207, 215], "term": [55, 204, 206, 212], "cach": 56, "basic": [56, 60, 92, 181, 193, 195, 201, 213, 254, 261, 262, 271, 278], "singleton": [56, 211, 213], "power": [56, 207, 213, 276, 282], "mul": 56, "mod": 56, "multidimension": 56, "contain": 56, "exprtool": 56, "sort": 56, "random": [56, 225], "cryptographi": 57, "discret": [59, 225], "transform": [59, 81, 83, 98, 255], "fast": 59, "fourier": [59, 208], "theoret": 59, "walsh": 59, "hadamard": 59, "m\u00f6biu": 59, "convolut": 59, "cover": 59, "intersect": [59, 68], "accuraci": 60, "error": [60, 64], "handl": [60, 224], "sum": 60, "combinatori": 61, "elementari": [62, 192, 211, 213], "trigonometr": [62, 64, 214, 282], "hyperbol": 62, "integ": [62, 195], "exponenti": [62, 64, 282], "piecewis": 62, "dirac": 64, "delta": 64, "discontinu": 64, "gamma": [64, 107], "beta": 64, "fresnel": 64, "logarithm": [64, 282], "bessel": 64, "airi": 64, "b": 64, "spline": 64, "riemann": 64, "zeta": 64, "ellipt": 64, "mathieu": 64, "orthogon": [64, 201, 257], "jacobi": 64, "gegenbau": 64, "chebyshev": 64, "legendr": 64, "hermit": 64, "laguerr": 64, "spheric": 64, "harmon": [64, 146, 171], "curv": 65, "ellips": 66, "entiti": [67, 68, 191], "avail": 68, "usag": [68, 120, 138, 195, 256], "median": 68, "pappu": 68, "hexagon": 68, "theorem": [68, 81, 260], "futur": [68, 110, 120, 179], "work": [68, 204], "truth": [68, 86], "beyond": 68, "visual": [68, 137], "line": 69, "plane": [70, 81], "polygon": [72, 83], "about": [74, 224, 255, 283], "holonom": [74, 75, 76, 78, 79, 125], "convert": [75, 78, 195, 271], "represent": [75, 79, 175, 189, 195], "meijer": [75, 78, 81, 215], "g": [75, 78, 81, 215], "intern": [77, 81, 83, 195, 198, 200, 218], "multipl": [78, 189, 200], "composit": 78, "seri": [78, 191, 202, 207, 208, 209, 212, 272], "expans": [78, 212, 215, 272], "linear": [78, 92, 110, 116, 134, 135, 175, 204], "current": 80, "polar": [81, 142], "branch": 81, "argand": 81, "tabl": [81, 86, 215], "lookup": 81, "mellin": 81, "converg": 81, "laplac": 81, "thi": [81, 224], "valid": 81, "exist": 81, "formula": [81, 215], "todo": 83, "bug": 83, "over": [83, 204, 213], "polytop": 83, "For": 83, "2d": 83, "polyhedra": 83, "session": 84, "lie": [85, 221], "equival": [86, 137], "manipul": [86, 92, 112, 197, 198, 201, 202, 224, 277], "infer": 86, "dens": [88, 195, 196, 198], "block": 89, "immutablematrix": 90, "except": [92, 98, 198, 241], "numpi": 92, "normal": [93, 204], "spars": [94, 95, 195, 196, 198], "immutablesparsematrix": 94, "ntheori": 96, "ecm": 96, "q": 96, "sub": 97, "ufuncifi": 97, "aesara": [97, 205], "so": 97, "mathrm": [98, 281], "runtim": 98, "beam": [99, 100, 101], "bend": 100, "continuum": 101, "truss": [101, 102], "control": [103, 104, 105, 106, 191], "pole": 104, "bode": 104, "impuls": 104, "respons": [104, 205], "step": [104, 224], "ramp": 104, "lti": 106, "high": 107, "energi": [107, 135], "hydrogen": 108, "wavefunct": 108, "potenti": [110, 134, 135, 179, 186, 257], "issu": [110, 120, 134, 179, 278], "advanc": [110, 179, 204, 277, 278], "featur": [110, 179, 273], "choic": 110, "acceler": [110, 179, 188, 212], "interfac": [110, 179, 191, 225], "bodi": [111, 135, 260], "framework": [114, 131], "kane": [115, 124, 127, 128, 132, 134], "lagrang": [115, 124, 129, 133, 134], "mass": [117, 135, 260], "inertia": [117, 135, 179], "particl": [117, 135, 161], "rigidbodi": 117, "mechanics_print": 118, "mprint": 118, "mpprint": 118, "mlatex": 118, "symbolicsystem": [119, 138], "autolev": [120, 137], "dynam": 120, "onlin": 120, "fix": 120, "switch": 120, "bicycl": 122, "four": 123, "bar": 123, "linkag": 123, "nonminim": 124, "pendulum": 124, "multi": 125, "degre": 125, "freedom": 125, "roll": [126, 127, 128, 129], "disc": [126, 127, 128, 129], "constraint": 128, "forc": 128, "classic": [130, 198], "jointsmethod": 131, "structur": [132, 133, 175, 218], "background": 134, "directli": [134, 255], "new_method": 134, "kwarg": 134, "a_and_b": 134, "true": 134, "slow": 134, "ha": 134, "nan": 134, "zoo": 134, "oo": 134, "element": [134, 195, 200], "further": [134, 274], "rigid": 135, "dyadic": [135, 179, 254, 255], "momentum": 135, "angular": [135, 188], "momenta": 135, "kinet": 135, "lagrangian": 135, "user": [137, 218, 221, 222], "rough": 137, "link": 137, "gaussian": [139, 195, 196, 204], "optic": [139, 140], "medium": 141, "wave": 144, "pauli": 145, "quantum": [146, 157, 171], "oscil": [146, 171], "d": [146, 171], "anticommut": 147, "cartesian": 148, "state": [148, 157, 160, 168], "clebsch": 149, "gordan": 149, "coeffici": [149, 198], "circuit": 150, "commut": [151, 192], "constant": [152, 175], "dagger": 153, "gate": 154, "grover": 155, "hilbert": 156, "space": [156, 175, 215], "analyt": 157, "inner": 158, "helper": [160, 205], "box": 161, "qappli": 162, "qft": 163, "qubit": 164, "shor": 166, "spin": 167, "second": 170, "quantiz": 170, "dimension": 173, "analysi": 173, "philosophi": 175, "behind": 175, "literatur": [175, 199, 204], "prefix": 176, "convers": 177, "referencefram": [179, 189], "dynamicsymbol": 179, "essenti": [180, 182, 250, 253], "field": [181, 186, 195, 198, 200, 204, 257, 259], "kinemat": [184, 188], "kinematic_equ": 184, "scalar": [186, 257, 259], "curl": [186, 257], "diverg": [186, 257, 260], "gradient": [186, 257], "conserv": [186, 257], "solenoid": [186, 257], "veloc": 188, "basi": [189, 198, 200], "wigner": 190, "credit": 190, "copyright": 190, "author": 190, "plotgrid": 191, "pyglet": 191, "mode": 191, "specifi": 191, "color": 191, "geometr": 191, "ascii": [191, 281], "art": 191, "agca": 192, "ring": [192, 195, 196], "ideal": 192, "homomorph": [192, 200], "syzygi": 192, "extens": [192, 204], "concept": 193, "divis": 193, "factori": 193, "euclidean": 193, "gcd": [193, 198, 204], "lcm": 193, "squar": 193, "factor": [193, 198, 204, 282], "groebner": [193, 198], "introduc": [194, 195], "domainmatrix": 194, "dup": 195, "dmp": 195, "polyr": 195, "polynomialr": 195, "choos": 195, "unifi": 195, "gf": 196, "p": [196, 200], "zz": 196, "qq": 196, "mpq": 196, "zz_i": 196, "qq_i": 196, "rr": 196, "cc": 196, "x": 196, "ex": 196, "quotient": 196, "level": 198, "multivari": [198, 204], "univari": [198, 204], "remaind": 198, "subresult": 198, "configur": 198, "modular": 198, "undocu": 198, "main": 200, "prime": 200, "decomposit": [200, 201, 204], "adic": 200, "valuat": 200, "subfield": 200, "As": 200, "arithmet": 200, "extra": 201, "monomi": 201, "encod": 201, "formal": [201, 207], "appel": 201, "partial": [201, 204, 223, 224], "fraction": [201, 204, 282], "dispers": 201, "rs_seri": 202, "wester": 204, "articl": 204, "simpl": 204, "support": 204, "back": 204, "cyclotom": 204, "reduc": 204, "gr\u00f6bner": 204, "mistak": 205, "prettyprint": 205, "rcodeprint": 205, "smt": 205, "lib": 205, "mapl": 205, "javascript": 205, "julia": 205, "octav": 205, "matlab": 205, "rust": 205, "gtk": 205, "lambdaprint": 205, "latexprint": 205, "mathmlprint": 205, "pythoncodeprint": 205, "pythonprint": 205, "srepr": [205, 281], "strprinter": 205, "preview": 205, "codeprint": 205, "preced": 205, "dotprint": 205, "subexpress": 206, "detect": 206, "compound": [211, 213, 225], "recurs": [211, 277], "gruntz": 212, "more": [212, 255, 276], "intuit": 212, "residu": 212, "setkind": 213, "hongguang": 214, "fu": 214, "rule": [214, 256], "notat": 215, "increment": 215, "decrement": 215, "indic": 215, "reduct": 215, "around": 215, "loos": 215, "end": 215, "confluenc": 215, "extend": 215, "diophantin": [218, 223, 224], "inequ": [220, 223, 224], "od": [221, 223, 224], "hint": [221, 222], "heurist": 221, "riccati": 221, "inform": [221, 222], "pde": [222, 223, 224], "ordinari": [223, 224], "deutil": 223, "recurr": 223, "de": [223, 224], "wrong": 224, "why": [224, 276], "we": 224, "emploi": 224, "return": 224, "search": 224, "deal": 224, "where": 224, "known": 224, "plan": 224, "transolv": 224, "continu": [225, 282], "stochast": 225, "process": 225, "dim": [226, 227], "contract": 226, "diagon": [226, 278], "explicit": 227, "pytest": 234, "randomis": 235, "detail": [237, 238, 254], "routin": 238, "decor": 239, "enum": 240, "variat": 243, "memoiz": 245, "pkgdata": 247, "inspect": 248, "time": 249, "orient": [252, 255], "locat": 255, "coordsys3d": 255, "orient_new": 255, "AND": 255, "quadrilater": 256, "third": 256, "del": [256, 257], "curvilinear": 257, "applic": 260, "calcul": 260, "perimet": 260, "surfac": 260, "area": 260, "volum": 260, "flux": 260, "verifi": 260, "stoke": 260, "introductori": [270, 275], "quick": [271, 272, 274, 277, 278], "two": 274, "final": 274, "read": 274, "interest": 276, "understand": 277, "through": 277, "invari": 277, "walk": 277, "prevent": 277, "shape": 278, "access": 278, "delet": 278, "insert": 278, "determin": 278, "rref": 278, "nullspac": 278, "columnspac": 278, "eigenvalu": 278, "eigenvector": 278, "next": 279, "preliminari": 280, "exercis": 280, "str": 281, "mathml": 281, "cancel": 282, "apart": 282, "trigsimp": 282, "expand_trig": 282, "powsimp": 282, "expand_power_exp": 282, "expand_power_bas": 282, "powdenest": 282, "expand_log": 282, "logcombin": 282, "expand_func": 282, "hyperexpand": 282, "combsimp": 282, "gammasimp": 282}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [84, "module-sympy.interactive.printing"], [110, "printing"], [179, "printing"], [205, "printing"], [281, "printing"]], "Parsing": [[3, "parsing"], [98, "module-sympy.parsing"]], "Logic": [[3, "logic"], [86, "module-sympy.logic"], [261, "logic"], [264, "logic"]], "Plotting": [[3, "plotting"], [191, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [271, "lambdify"]], "Code Generation": [[3, "code-generation"], [38, "code-generation"], [261, "code-generation"], [263, "code-generation"]], "Autowrap": [[3, "autowrap"], [38, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [27, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [30, "introduction"], [37, "introduction"], [38, "introduction"], [39, "introduction"], [46, "introduction"], [58, "introduction"], [68, "introduction"], [86, "introduction"], [120, "introduction"], [137, "introduction"], [175, "introduction"], [186, "introduction"], [191, "introduction"], [192, "introduction"], [193, "introduction"], [200, "introduction"], [204, "introduction"], [259, "introduction"], [276, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [274, "symbols"]], "Functions": [[12, "functions"], [63, "functions"], [226, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [27, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [56, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [277, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [33, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [34, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [80, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [28, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [74, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [29, "examples"], [56, "examples"], [56, "id47"], [80, "examples"], [83, "examples"], [83, "id37"], [96, "examples"], [96, "id61"], [100, "examples"], [107, "examples"], [142, "examples"], [173, "examples"], [189, "examples"], [189, "id1"], [204, "examples"], [212, "examples"], [212, "id3"], [225, "examples"], [226, "examples"], [227, "examples"], [230, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [27, "how-to-guides"]], "Solve Equations": [[22, "solve-equations"]], "Solve an Equation Algebraically": [[23, "solve-an-equation-algebraically"], [23, "id1"]], "Guidance": [[23, "guidance"], [24, "guidance"], [25, "guidance"]], "Make Your Equation Into an Expression That Equals Zero": [[23, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[23, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[23, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[23, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Use the Solution Result": [[23, "use-the-solution-result"], [24, "use-the-solution-result"]], "Substitute Solutions From solve() Into an Expression": [[23, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[23, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[23, "options-that-can-speed-up-solve"], [25, "options-that-can-speed-up-solve"], [26, "options-that-can-speed-up-solve"]], "Not All Equations Can Be Solved": [[23, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[23, "equations-with-no-closed-form-solution"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[23, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [25, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve One or a System of Equations Numerically": [[24, "solve-one-or-a-system-of-equations-numerically"]], "Alternatives to Consider": [[24, "alternatives-to-consider"], [25, "alternatives-to-consider"]], "Example of Numerically Solving an Equation": [[24, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[24, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[24, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[24, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[24, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[24, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[24, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[24, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[24, "equations-with-no-solution"]], "Report a Problem": [[24, "report-a-problem"]], "Solve a System of Equations Algebraically": [[25, "solve-a-system-of-equations-algebraically"]], "Example of Solving a System of Equations Algebraically": [[25, "example-of-solving-a-system-of-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[25, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[25, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[25, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[25, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[25, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[25, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[25, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[26, "solving-guidance"]], "Numeric Solutions": [[26, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[26, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[26, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[26, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[26, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[26, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[26, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[26, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[26, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[27, "welcome-to-sympy-s-documentation"]], "Installation": [[27, "installation"], [28, "installation"], [280, "installation"]], "Tutorials": [[27, "tutorials"], [270, "tutorials"]], "API Reference": [[27, "api-reference"], [237, "module-sympy.utilities.autowrap"], [238, "module-sympy.utilities.codegen"], [261, "api-reference"]], "Anaconda": [[28, "anaconda"]], "Git": [[28, "git"]], "Run SymPy": [[28, "run-sympy"]], "mpmath": [[28, "mpmath"]], "Questions": [[28, "questions"]], "abc": [[29, "module-sympy.abc"]], "Caveats": [[29, "caveats"]], "Algebras": [[30, "algebras"]], "Quaternion Reference": [[30, "module-sympy.algebras"]], "Ask": [[31, "module-sympy.assumptions.ask"]], "Assume": [[32, "module-sympy.assumptions.assume"]], "Predicate": [[33, "predicate"]], "Querying": [[33, "querying"]], "Contents": [[33, "contents"], [43, "contents"], [63, "contents"], [76, "contents"], [82, "contents"], [197, "contents"], [209, "contents"], [219, "contents"], [228, "contents"]], "Performance improvements": [[33, "performance-improvements"]], "Misc": [[33, "misc"]], "Common": [[34, "common"]], "Calculus": [[34, "calculus"], [36, "module-sympy.calculus"], [272, "calculus"]], "Matrix": [[34, "matrix"]], "Number Theory": [[34, "number-theory"], [96, "module-sympy.ntheory.generate"], [261, "number-theory"], [266, "number-theory"]], "Order": [[34, "order"]], "Sets": [[34, "sets"], [213, "sets"]], "Refine": [[35, "module-sympy.assumptions.refine"]], "Singularities": [[36, "singularities"]], "Finite difference weights": [[36, "finite-difference-weights"]], "Category Theory": [[37, "category-theory"]], "Base Class Reference": [[37, "module-sympy.categories"], [58, "base-class-reference"]], "Diagram Drawing": [[37, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[38, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[38, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[38, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[38, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[38, "module-sympy.codegen.ast"]], "AST Type Tree": [[38, "ast-type-tree"]], "Predefined types": [[38, "predefined-types"]], "Using the nodes": [[38, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[38, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[38, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[38, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[38, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[38, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[38, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[38, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[38, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[39, "finitely-presented-groups"]], "Overview of Facilities": [[39, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[39, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[39, "free-groups-and-words"]], "Construction of a Free Group": [[39, "construction-of-a-free-group"]], "Construction of words": [[39, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[39, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[39, "cosettable"]], "Attributes of CosetTable": [[39, "attributes-of-cosettable"]], "Compression and Standardization": [[39, "compression-and-standardization"]], "Subgroups of Finite Index": [[39, "subgroups-of-finite-index"]], "Low Index Subgroups": [[39, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[39, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[39, "reidemeister-schreier-algorithm"]], "Bibliography": [[39, "bibliography"], [46, "bibliography"]], "Gray Code": [[40, "module-sympy.combinatorics.graycode"]], "Group constructors": [[41, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[42, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[43, "combinatorics"]], "Named Groups": [[44, "module-sympy.combinatorics.named_groups"]], "Partitions": [[45, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[46, "polycyclic-groups"]], "Overview of functionalities": [[46, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[46, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[46, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[46, "the-construction-of-collector"]], "Attributes of Collector": [[46, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[46, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[46, "computation-of-subword-index"]], "Computation of Collected Word": [[46, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[46, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[46, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[46, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[46, "computation-of-leading-exponent"]], "Permutation Groups": [[47, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[48, "module-sympy.combinatorics.permutations"]], "Generators": [[48, "module-sympy.combinatorics.generators"]], "Polyhedron": [[49, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[50, "module-sympy.combinatorics.prufer"]], "Subsets": [[51, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[52, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[53, "module-sympy.combinatorics.testutil"]], "Utilities": [[54, "module-sympy.combinatorics.util"], [143, "module-sympy.physics.optics.utils"], [200, "utilities"], [242, "module-sympy.utilities"], [261, "utilities"], [269, "utilities"]], "Concrete": [[55, "concrete"]], "Hypergeometric terms": [[55, "hypergeometric-terms"]], "Concrete Class Reference": [[55, "concrete-class-reference"]], "Concrete Functions Reference": [[55, "concrete-functions-reference"]], "Core": [[56, "core"]], "sympify": [[56, "module-sympy.core.sympify"]], "assumptions": [[56, "module-sympy.core.assumptions"]], "See Also": [[56, "see-also"], [243, "see-also"]], "Notes": [[56, "notes"], [212, "notes"], [214, "notes"]], "Developers Notes": [[56, "developers-notes"]], "References": [[56, "references"], [68, "references"], [74, "references"], [83, "references"], [142, "references"], [145, "references"], [190, "references"], [214, "references"], [215, "references"], [218, "references"], [224, "references"]], "cache": [[56, "module-sympy.core.cache"]], "basic": [[56, "module-sympy.core.basic"]], "singleton": [[56, "module-sympy.core.singleton"]], "expr": [[56, "module-sympy.core.expr"]], "symbol": [[56, "module-sympy.core.symbol"]], "numbers": [[56, "module-sympy.core.numbers"]], "power": [[56, "module-sympy.core.power"]], "mul": [[56, "module-sympy.core.mul"]], "add": [[56, "module-sympy.core.add"]], "mod": [[56, "module-sympy.core.mod"]], "relational": [[56, "module-sympy.core.relational"]], "multidimensional": [[56, "module-sympy.core.multidimensional"]], "function": [[56, "module-sympy.core.function"]], "evalf": [[56, "module-sympy.core.evalf"], [271, "evalf"]], "containers": [[56, "module-sympy.core.containers"]], "exprtools": [[56, "module-sympy.core.exprtools"]], "Sorting": [[56, "sorting"]], "Random": [[56, "module-sympy.core.random"]], "Traversal": [[56, "module-sympy.core.traversal"]], "Cryptography": [[57, "cryptography"]], "Differential Geometry": [[58, "module-sympy.diffgeom"]], "Discrete": [[59, "discrete"]], "Transforms": [[59, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[59, "fast-fourier-transform"]], "Number Theoretic Transform": [[59, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[59, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[59, "mobius-transform"]], "Convolutions": [[59, "module-sympy.discrete.convolutions"]], "Convolution": [[59, "convolution"]], "Convolution using Fast Fourier Transform": [[59, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[59, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[59, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[59, "subset-convolution"]], "Covering Product": [[59, "covering-product"]], "Intersecting Product": [[59, "intersecting-product"]], "Numerical Evaluation": [[60, "numerical-evaluation"]], "Basics": [[60, "basics"], [261, "basics"], [262, "basics"]], "Floating-point numbers": [[60, "floating-point-numbers"]], "Accuracy and error handling": [[60, "accuracy-and-error-handling"]], "Sums and integrals": [[60, "sums-and-integrals"]], "Numerical simplification": [[60, "numerical-simplification"]], "Combinatorial": [[61, "combinatorial"]], "Enumeration": [[61, "enumeration"]], "Elementary": [[62, "elementary"]], "Complex Functions": [[62, "complex-functions"]], "Trigonometric": [[62, "trigonometric"]], "Trigonometric Functions": [[62, "trigonometric-functions"]], "Trigonometric Inverses": [[62, "trigonometric-inverses"]], "Hyperbolic": [[62, "hyperbolic"]], "Hyperbolic Functions": [[62, "hyperbolic-functions"]], "Hyperbolic Inverses": [[62, "hyperbolic-inverses"]], "Integer Functions": [[62, "integer-functions"]], "Exponential": [[62, "exponential"]], "Piecewise": [[62, "piecewise"]], "Miscellaneous": [[62, "miscellaneous"], [246, "module-sympy.utilities.misc"]], "Special": [[64, "special"]], "Dirac Delta and Related Discontinuous Functions": [[64, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[64, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[64, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[64, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[64, "module-sympy.functions.special.bessel"]], "Airy Functions": [[64, "airy-functions"]], "B-Splines": [[64, "b-splines"]], "Riemann Zeta and Related Functions": [[64, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[64, "hypergeometric-functions"]], "Elliptic integrals": [[64, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[64, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[64, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[64, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[64, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[64, "chebyshev-polynomials"]], "Legendre Polynomials": [[64, "legendre-polynomials"]], "Hermite Polynomials": [[64, "hermite-polynomials"]], "Laguerre Polynomials": [[64, "laguerre-polynomials"]], "Spherical Harmonics": [[64, "spherical-harmonics"]], "Tensor Functions": [[64, "tensor-functions"]], "Curves": [[65, "module-sympy.geometry.curve"]], "Ellipses": [[66, "module-sympy.geometry.ellipse"]], "Entities": [[67, "module-sympy.geometry.entity"]], "Geometry": [[68, "geometry"]], "Available Entities": [[68, "available-entities"]], "Example Usage": [[68, "example-usage"]], "Intersection of medians": [[68, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[68, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[68, "miscellaneous-notes"]], "Future Work": [[68, "future-work"]], "Truth Setting Expressions": [[68, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[68, "three-dimensions-and-beyond"]], "Geometry Visualization": [[68, "geometry-visualization"]], "Submodules": [[68, "submodules"]], "Lines": [[69, "module-sympy.geometry.line"]], "Plane": [[70, "module-sympy.geometry.plane"]], "Points": [[71, "module-sympy.geometry.point"], [254, "points"]], "Polygons": [[72, "module-sympy.geometry.polygon"]], "Utils": [[73, "module-sympy.geometry.util"]], "About Holonomic Functions": [[74, "about-holonomic-functions"]], "Converting other representations to holonomic": [[75, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[75, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[75, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[75, "converting-symbolic-expressions"]], "Holonomic": [[76, "module-sympy.holonomic"]], "Internal API": [[77, "internal-api"]], "Operations on holonomic functions": [[78, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[78, "addition-and-multiplication"]], "Integration and Differentiation": [[78, "integration-and-differentiation"]], "Composition with polynomials": [[78, "composition-with-polynomials"]], "Convert to holonomic sequence": [[78, "convert-to-holonomic-sequence"]], "Series expansion": [[78, "series-expansion"]], "Numerical evaluation": [[78, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[78, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[78, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[78, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[79, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[80, "uses-and-current-limitations"]], "Integration": [[80, "integration"]], "Computing Integrals using Meijer G-Functions": [[81, "computing-integrals-using-meijer-g-functions"]], "Overview": [[81, "overview"]], "Polar Numbers and Branched Functions": [[81, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[81, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[81, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[81, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[81, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[81, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[81, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[81, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[81, "how-to-compute-the-integral"]], "When this computation is valid": [[81, "when-this-computation-is-valid"]], "When the integral exists": [[81, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[81, "implemented-g-function-formulae"]], "Internal API Reference": [[81, "module-sympy.integrals.meijerint"]], "Integrals": [[82, "integrals"], [83, "module-sympy.integrals"], [272, "integrals"]], "Integral Transforms": [[83, "module-sympy.integrals.transforms"]], "Internals": [[83, "internals"], [200, "internals"]], "API reference": [[83, "api-reference"], [83, "id38"]], "TODO and Bugs": [[83, "todo-and-bugs"]], "Numeric Integrals": [[83, "numeric-integrals"]], "Integration over Polytopes": [[83, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[83, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[83, "for-3-polytopes-polyhedra"]], "Interactive": [[84, "module-sympy.interactive"]], "Session": [[84, "module-sympy.interactive.session"]], "Lie Algebra": [[85, "module-sympy.liealgebras"]], "Forming logical expressions": [[86, "forming-logical-expressions"]], "Boolean functions": [[86, "boolean-functions"]], "Simplification and equivalence-testing": [[86, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[86, "manipulating-expressions"]], "Truth tables and related functions": [[86, "truth-tables-and-related-functions"]], "Inference": [[86, "module-sympy.logic.inference"]], "Common Matrices": [[87, "module-sympy.matrices.common"]], "Dense Matrices": [[88, "dense-matrices"]], "Matrix Expressions": [[89, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[89, "matrix-expressions-core-reference"]], "Block Matrices": [[89, "block-matrices"]], "Immutable Matrices": [[90, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[90, "module-sympy.matrices.immutable"]], "Matrices": [[91, "module-sympy.matrices"], [109, "module-sympy.physics.matrices"], [261, "matrices"], [265, "matrices"], [278, "matrices"]], "Matrices (linear algebra)": [[92, "module-sympy.matrices.matrices"]], "Creating Matrices": [[92, "creating-matrices"]], "Basic Manipulation": [[92, "basic-manipulation"]], "Operations on entries": [[92, "operations-on-entries"]], "Linear algebra": [[92, "linear-algebra"]], "Reference": [[92, "reference"], [192, "reference"], [198, "reference"], [202, "reference"], [212, "reference"], [212, "id2"], [212, "id4"], [212, "id7"], [212, "id8"]], "Matrix Base Classes": [[92, "matrix-base-classes"]], "Matrix Exceptions": [[92, "matrix-exceptions"]], "Matrix Functions": [[92, "matrix-functions"]], "Numpy Utility Functions": [[92, "numpy-utility-functions"]], "Matrix Normal Forms": [[93, "matrix-normal-forms"]], "Sparse Matrices": [[94, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[94, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[94, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[95, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[96, "ntheory-class-reference"]], "Ntheory Functions Reference": [[96, "ntheory-functions-reference"]], "ECM function": [[96, "ecm-function"]], "QS function": [[96, "qs-function"]], "Numeric Computation": [[97, "numeric-computation"]], "Subs/evalf": [[97, "subs-evalf"]], "Lambdify": [[97, "lambdify"], [244, "module-sympy.utilities.lambdify"]], "uFuncify": [[97, "ufuncify"]], "Aesara": [[97, "aesara"]], "So Which Should I Use?": [[97, "so-which-should-i-use"]], "Parsing Functions Reference": [[98, "parsing-functions-reference"]], "Parsing Transformations Reference": [[98, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[98, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[98, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[98, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[98, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[98, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[98, "runtime-installation"]], "Beam (Docstrings)": [[99, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[100, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[100, "beam"], [101, "beam"]], "Example 1": [[100, "example-1"]], "Example 2": [[100, "example-2"]], "Example 3": [[100, "example-3"]], "Example 4": [[100, "example-4"]], "Example 5": [[100, "example-5"]], "Example 6": [[100, "example-6"]], "Example 7": [[100, "example-7"]], "Example 8": [[100, "example-8"]], "Example 9": [[100, "example-9"]], "Example 10": [[100, "example-10"]], "Example 11": [[100, "example-11"]], "Continuum Mechanics": [[101, "continuum-mechanics"]], "Abstract": [[101, null], [105, null], [107, null], [130, null], [140, null], [157, null], [187, null]], "Truss": [[101, "truss"]], "Truss (Docstrings)": [[102, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[103, "control"]], "Control System Plots": [[104, "control-system-plots"]], "Pole-Zero Plot": [[104, "pole-zero-plot"]], "Bode Plot": [[104, "bode-plot"]], "Impulse-Response Plot": [[104, "impulse-response-plot"]], "Step-Response Plot": [[104, "step-response-plot"]], "Ramp-Response Plot": [[104, "ramp-response-plot"]], "Control Module": [[105, "module-sympy.physics.control"]], "Control API": [[106, "control-api"]], "lti": [[106, "module-sympy.physics.control.lti"]], "High energy physics": [[107, "high-energy-physics"]], "Gamma matrices": [[107, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[108, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[110, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[110, "common-issues"], [179, "common-issues"]], "Numerically Integrating Code": [[110, "numerically-integrating-code"]], "Differentiating": [[110, "differentiating"]], "Choice of Coordinates and Speeds": [[110, "choice-of-coordinates-and-speeds"]], "Substitution": [[110, "substitution"], [179, "substitution"], [271, "substitution"]], "Linearization": [[110, "linearization"]], "Acceleration of Points": [[110, "acceleration-of-points"], [179, "acceleration-of-points"]], "Advanced Interfaces": [[110, "advanced-interfaces"], [179, "advanced-interfaces"]], "Advanced Functionality": [[110, "advanced-functionality"]], "Future Features": [[110, "future-features"]], "Code Output": [[110, "code-output"]], "Body (Docstrings)": [[111, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[112, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[113, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[114, "joints-framework-docstrings"]], "Joint (Docstrings)": [[114, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[115, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[116, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[117, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[118, "printing-docstrings"], [185, "printing-docstrings"]], "mechanics_printing": [[118, "mechanics-printing"]], "mprint": [[118, "mprint"]], "mpprint": [[118, "mpprint"]], "mlatex": [[118, "mlatex"]], "SymbolicSystem (Docstrings)": [[119, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[120, "autolev-parser"]], "Usage": [[120, "usage"]], "Gotchas": [[120, "gotchas"], [274, "gotchas"]], "Limitations and Issues": [[120, "limitations-and-issues"]], "Future Improvements": [[120, "future-improvements"]], "1. Completing Dynamics Online": [[120, "completing-dynamics-online"]], "2. Fixing Issues": [[120, "fixing-issues"]], "3. Switching to an AST": [[120, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[121, "examples-for-physics-mechanics"]], "A bicycle": [[122, "a-bicycle"]], "A four bar linkage": [[123, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[124, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[124, "kane-s-method"]], "Lagrange\u2019s Method": [[124, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[125, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[126, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[127, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[128, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[129, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[130, "classical-mechanics"]], "Vector": [[130, "vector"], [189, "vector"], [258, "vector"]], "Mechanics": [[130, "mechanics"], [225, "module-sympy.stats.rv"]], "Guide to Mechanics": [[130, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[131, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[131, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[131, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[132, "kane-s-method-in-physics-mechanics"], [132, "id2"]], "Structure of Equations": [[132, "structure-of-equations"], [133, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[133, "lagrange-s-method-in-physics-mechanics"], [133, "id1"]], "Linearization in Physics/Mechanics": [[134, "linearization-in-physics-mechanics"]], "Background": [[134, "background"]], "A Note on Dependent Coordinates and Speeds": [[134, null]], "Linearizing Kane\u2019s Equations": [[134, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[134, "using-the-linearizer-class-directly"], [134, "id2"]], "2. Using the linearize class method:": [[134, "using-the-linearize-class-method"], [134, "id3"]], "What\u2019s with the new_method kwarg?": [[134, null]], "Linearizing Lagrange\u2019s Equations": [[134, "linearizing-lagrange-s-equations"]], "Potential Issues": [[134, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[134, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[134, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[134, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[135, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[135, "mass"]], "Particle": [[135, "particle"]], "Inertia": [[135, "inertia"]], "Rigid Body": [[135, "rigid-body"]], "Dyadic": [[135, "dyadic"]], "Linear Momentum": [[135, "linear-momentum"]], "Angular Momentum": [[135, "angular-momentum"]], "Using momenta functions in Mechanics": [[135, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[135, "kinetic-energy"]], "Potential Energy": [[135, "potential-energy"]], "Lagrangian": [[135, "lagrangian"]], "Using energy functions in Mechanics": [[135, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[136, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[137, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[137, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[137, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[137, "mathematical-equivalents"]], "Physical Equivalents": [[137, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[137, "numerical-evaluation-and-visualization"]], "Links": [[137, "links"]], "Symbolic Systems in Physics/Mechanics": [[138, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[138, "symbolicsystem-example-usage"]], "Gaussian Optics": [[139, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[140, "optics-module"]], "Medium": [[141, "module-sympy.physics.optics.medium"]], "Polarization": [[142, "module-sympy.physics.optics.polarization"]], "Waves": [[144, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[145, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[146, "module-sympy.physics.qho_1d"]], "Anticommutator": [[147, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[148, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[149, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[150, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[151, "module-sympy.physics.quantum.commutator"]], "Constants": [[152, "module-sympy.physics.quantum.constants"], [175, "constants"]], "Dagger": [[153, "module-sympy.physics.quantum.dagger"]], "Gates": [[154, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[155, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[156, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[157, "quantum-mechanics"]], "Quantum Functions": [[157, "quantum-functions"]], "States and Operators": [[157, "states-and-operators"]], "Quantum Computation": [[157, "quantum-computation"]], "Analytic Solutions": [[157, "analytic-solutions"]], "Inner Product": [[158, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[159, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[160, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[161, "module-sympy.physics.quantum.piab"]], "Qapply": [[162, "module-sympy.physics.quantum.qapply"]], "QFT": [[163, "module-sympy.physics.quantum.qft"]], "Qubit": [[164, "module-sympy.physics.quantum.qubit"]], "Represent": [[165, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[166, "module-sympy.physics.quantum.shor"]], "Spin": [[167, "module-sympy.physics.quantum.spin"]], "State": [[168, "module-sympy.physics.quantum.state"]], "Tensor Product": [[169, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[170, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[171, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[172, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[173, "dimensional-analysis"]], "Equation with quantities": [[173, "equation-with-quantities"]], "Unit systems": [[174, "unit-systems"]], "Philosophy behind unit systems": [[175, "philosophy-behind-unit-systems"]], "Dimensions": [[175, "dimensions"]], "Group structure": [[175, "group-structure"]], "Linear space representation": [[175, "linear-space-representation"]], "An example": [[175, "an-example"], [215, "an-example"]], "Quantities": [[175, "quantities"]], "Units": [[175, "units"]], "The need for a reference": [[175, "the-need-for-a-reference"]], "Literature": [[175, "literature"], [199, "literature"], [204, "literature"]], "Unit prefixes": [[176, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[177, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[177, "module-sympy.physics.units.util"]], "Units and unit systems": [[178, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[179, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[179, "inertia-dyadics"]], "ReferenceFrame": [[179, "referenceframe"]], "dynamicsymbols": [[179, "dynamicsymbols"]], "Essential Classes": [[180, "essential-classes"]], "Docstrings for basic field functions": [[181, "docstrings-for-basic-field-functions"]], "Field operation functions": [[181, "field-operation-functions"]], "Checking the type of vector field": [[181, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[182, "essential-functions-docstrings"]], "Physics Vector API": [[183, "physics-vector-api"]], "Kinematics (Docstrings)": [[184, "module-sympy.physics.vector.point"]], "kinematic_equations": [[184, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[186, "scalar-and-vector-field-functionality"], [257, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[186, "vectors-and-scalars"], [259, "vectors-and-scalars"]], "Fields": [[186, "fields"], [259, "fields"]], "Implementation of fields in sympy.physics.vector": [[186, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[186, "field-operators-and-other-related-functions"]], "Curl": [[186, "curl"], [257, "curl"]], "Divergence": [[186, "divergence"], [257, "divergence"]], "Gradient": [[186, "gradient"], [257, "gradient"]], "Conservative and Solenoidal fields": [[186, "conservative-and-solenoidal-fields"], [257, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[186, "scalar-potential-functions"], [257, "scalar-potential-functions"]], "The Physics Vector Module": [[187, "the-physics-vector-module"]], "References for Physics/Vector": [[187, "references-for-physics-vector"]], "Guide to Vector": [[187, "guide-to-vector"], [258, "guide-to-vector"]], "Vector: Kinematics": [[188, "vector-kinematics"]], "Introduction to Kinematics": [[188, "introduction-to-kinematics"]], "Angular Velocity": [[188, "angular-velocity"]], "Angular Acceleration": [[188, "angular-acceleration"]], "Point Velocity & Acceleration": [[188, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[188, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[189, "vector-referenceframe"]], "Vector Algebra": [[189, "vector-algebra"]], "Vector Operations": [[189, "vector-operations"]], "Alternative Representation": [[189, "alternative-representation"]], "Vector Calculus": [[189, "vector-calculus"]], "Derivatives of Vectors": [[189, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[189, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[189, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[189, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[189, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[189, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[189, "how-vectors-are-coded"]], "Wigner Symbols": [[190, "module-sympy.physics.wigner"]], "Credits and Copyright": [[190, "credits-and-copyright"]], "Authors": [[190, "authors"]], "Plot Class": [[191, "plot-class"]], "Plotting Function Reference": [[191, "plotting-function-reference"]], "PlotGrid Class": [[191, "plotgrid-class"]], "Series Classes": [[191, "series-classes"]], "Backends": [[191, "backends"]], "Pyglet Plotting": [[191, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[191, "plot-window-controls"]], "Coordinate Modes": [[191, "coordinate-modes"]], "Specifying Intervals for Variables": [[191, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[191, "using-the-interactive-interface"]], "Using Custom Color Functions": [[191, "using-custom-color-functions"]], "Plotting Geometric Entities": [[191, "plotting-geometric-entities"]], "Plotting with ASCII art": [[191, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[192, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[192, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[192, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[192, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[192, "finite-extensions"]], "Basic functionality of the module": [[193, "basic-functionality-of-the-module"]], "Basic concepts": [[193, "basic-concepts"]], "Polynomials": [[193, "polynomials"]], "Divisibility": [[193, "divisibility"]], "Integral domains": [[193, "integral-domains"]], "Factorial domains": [[193, "factorial-domains"]], "Euclidean domains": [[193, "euclidean-domains"]], "Divisibility of polynomials": [[193, "divisibility-of-polynomials"]], "Basic functionality": [[193, "basic-functionality"]], "Division": [[193, "division"]], "GCD and LCM": [[193, "gcd-and-lcm"]], "Square-free factorization": [[193, "square-free-factorization"]], "Factorization": [[193, "factorization"]], "Groebner bases": [[193, "groebner-bases"]], "Solving Equations": [[193, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[194, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[194, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[195, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[195, "what-are-the-domains"]], "Representing expressions symbolically": [[195, "representing-expressions-symbolically"]], "Tree representation": [[195, "tree-representation"]], "DUP representation": [[195, "dup-representation"]], "DMP representation": [[195, "dmp-representation"]], "Sparse polynomial representation": [[195, "sparse-polynomial-representation"]], "Basic usage of domains": [[195, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[195, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[195, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[195, "finite-fields"]], "Real and complex fields": [[195, "real-and-complex-fields"]], "Algebraic number fields": [[195, "algebraic-number-fields"], [200, "algebraic-number-fields"]], "Polynomial ring domains": [[195, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[195, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[195, "polyring-vs-polynomialring"]], "Rational function fields": [[195, "rational-function-fields"]], "Expression domain": [[195, "expression-domain"]], "Choosing a domain": [[195, "choosing-a-domain"]], "Converting elements between different domains": [[195, "converting-elements-between-different-domains"]], "Unifying domains": [[195, "unifying-domains"]], "Internals of a Poly": [[195, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[195, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[195, "choosing-generators"]], "Algebraically dependent generators": [[195, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[196, "reference-docs-for-the-poly-domains"]], "Domains": [[196, "domains"]], "Abstract Domains": [[196, "abstract-domains"]], "GF(p)": [[196, "gf-p"]], "ZZ": [[196, "zz"]], "QQ": [[196, "qq"]], "MPQ": [[196, "mpq"]], "Gaussian domains": [[196, "gaussian-domains"]], "ZZ_I": [[196, "zz-i"]], "QQ_I": [[196, "qq-i"]], "QQ<a>": [[196, "qq-a"]], "RR": [[196, "rr"]], "CC": [[196, "cc"]], "K[x]": [[196, "k-x"]], "K(x)": [[196, "id11"]], "EX": [[196, "ex"]], "Quotient ring": [[196, "quotient-ring"]], "Sparse polynomials": [[196, "sparse-polynomials"]], "Sparse rational functions": [[196, "sparse-rational-functions"]], "Dense polynomials": [[196, "dense-polynomials"]], "Polynomial Manipulation": [[197, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[198, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[198, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[198, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[198, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[198, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[198, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[198, "classical-remainder-sequence"]], "Simplified remainder sequences": [[198, "simplified-remainder-sequences"]], "Subresultant sequence": [[198, "subresultant-sequence"]], "Groebner basis algorithms": [[198, "groebner-basis-algorithms"]], "Options": [[198, "module-sympy.polys.polyoptions"]], "Configuration": [[198, "module-sympy.polys.polyconfig"]], "Exceptions": [[198, "exceptions"]], "Modular GCD": [[198, "modular-gcd"]], "Undocumented": [[198, "undocumented"]], "Number Fields": [[200, "number-fields"]], "Solving the Main Problems": [[200, "solving-the-main-problems"]], "Integral Basis": [[200, "integral-basis"]], "Prime Decomposition": [[200, "prime-decomposition"]], "p-adic Valuation": [[200, "p-adic-valuation"]], "Finding Minimal Polynomials": [[200, "finding-minimal-polynomials"]], "The Subfield Problem": [[200, "the-subfield-problem"]], "Representing algebraic numbers": [[200, "representing-algebraic-numbers"]], "As number field elements": [[200, "as-number-field-elements"]], "As elements of finitely-generated modules": [[200, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[200, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[200, "arithmetic-with-module-elements"]], "Multiplication": [[200, "multiplication"]], "Module Homomorphisms": [[200, "module-homomorphisms"]], "Class Reference": [[200, "class-reference"]], "Polynomials Manipulation Module Reference": [[201, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[201, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[201, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[201, "domain-constructors"]], "Monomials encoded as tuples": [[201, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[201, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[201, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[201, "symbolic-root-finding-algorithms"]], "Special polynomials": [[201, "special-polynomials"]], "Orthogonal polynomials": [[201, "orthogonal-polynomials"]], "Appell sequences": [[201, "appell-sequences"]], "Manipulation of rational functions": [[201, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[201, "partial-fraction-decomposition"], [204, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[201, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[202, "series-manipulation-using-polynomials"]], "rs_series": [[202, "rs-series"]], "Contribute": [[202, "contribute"]], "Poly solvers": [[203, "poly-solvers"]], "Examples from Wester\u2019s Article": [[204, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[204, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[204, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[204, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[204, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[204, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[204, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[204, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[204, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[204, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[204, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[204, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[204, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[204, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[204, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[204, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[204, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[205, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[205, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[205, "example-of-custom-printer"]], "Example of Custom Printing Method": [[205, "example-of-custom-printing-method"]], "Common mistakes": [[205, "common-mistakes"]], "PrettyPrinter Class": [[205, "prettyprinter-class"]], "C code printers": [[205, "module-sympy.printing.c"]], "C++ code printers": [[205, "module-sympy.printing.cxx"]], "RCodePrinter": [[205, "module-sympy.printing.rcode"]], "Fortran Printing": [[205, "fortran-printing"]], "SMT-Lib printing": [[205, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[205, "module-sympy.printing.mathematica"]], "Maple code printing": [[205, "module-sympy.printing.maple"]], "Javascript Code printing": [[205, "module-sympy.printing.jscode"]], "Julia code printing": [[205, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[205, "module-sympy.printing.octave"]], "Rust code printing": [[205, "module-sympy.printing.rust"]], "Aesara Code printing": [[205, "module-sympy.printing.aesaracode"]], "Gtk": [[205, "module-sympy.printing.gtk"]], "LambdaPrinter": [[205, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[205, "module-sympy.printing.latex"]], "MathMLPrinter": [[205, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[205, "module-sympy.printing.pycode"]], "PythonPrinter": [[205, "module-sympy.printing.python"]], "srepr": [[205, "module-sympy.printing.repr"], [281, "srepr"]], "StrPrinter": [[205, "module-sympy.printing.str"]], "Tree Printing": [[205, "module-sympy.printing.tree"]], "Preview": [[205, "preview"]], "Implementation - Helper Classes/Functions": [[205, "module-sympy.printing.conventions"]], "CodePrinter": [[205, "module-sympy.printing.codeprinter"]], "Precedence": [[205, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[205, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[205, "dotprint"]], "Term Rewriting": [[206, "term-rewriting"]], "Expanding": [[206, "expanding"]], "Common Subexpression Detection and Collection": [[206, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[207, "formal-power-series"]], "Rational Algorithm": [[207, "rational-algorithm"]], "Hypergeometric Algorithm": [[207, "hypergeometric-algorithm"]], "Fourier Series": [[208, "fourier-series"]], "Series": [[209, "series"]], "Limits of Sequences": [[210, "limits-of-sequences"]], "Sequences": [[211, "sequences"]], "Sequences Base": [[211, "sequences-base"]], "Elementary Sequences": [[211, "elementary-sequences"]], "Singleton Sequences": [[211, "singleton-sequences"]], "Compound Sequences": [[211, "compound-sequences"]], "Recursive Sequences": [[211, "recursive-sequences"]], "Series Expansions": [[212, "series-expansions"]], "Limits": [[212, "limits"], [272, "limits"]], "The Gruntz Algorithm": [[212, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[212, "more-intuitive-series-expansion"]], "Order Terms": [[212, "order-terms"]], "Series Acceleration": [[212, "series-acceleration"]], "Residues": [[212, "residues"]], "Basic Sets": [[213, "module-sympy.sets.sets"]], "Elementary Sets": [[213, "elementary-sets"]], "Compound Sets": [[213, "compound-sets"]], "Singleton Sets": [[213, "singleton-sets"]], "Special Sets": [[213, "module-sympy.sets.fancysets"]], "Power sets": [[213, "module-sympy.sets.powerset"]], "Condition Sets": [[213, "module-sympy.sets.conditionset"]], "SetKind": [[213, "setkind"]], "Iteration over sets": [[213, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[214, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[214, "rules"]], "Hypergeometric Expansion": [[215, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[215, "hypergeometric-function-expansion-algorithm"]], "Notation": [[215, "notation"]], "Incrementing and decrementing indices": [[215, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[215, "reduction-of-order"]], "Moving Around in the Parameter Space": [[215, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[215, "applying-the-operators"]], "Loose Ends": [[215, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[215, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[215, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[215, "implemented-hypergeometric-formulae"]], "Simplify": [[216, "simplify"], [217, "simplify"]], "Diophantine": [[218, "diophantine"]], "Diophantine equations": [[218, "diophantine-equations"]], "Module structure": [[218, "module-structure"]], "Tutorial": [[218, "tutorial"]], "User Functions": [[218, "user-functions"], [221, "user-functions"], [222, "user-functions"]], "Internal Functions": [[218, "internal-functions"]], "Internal Classes": [[218, "internal-classes"]], "Solvers": [[219, "solvers"], [223, "module-sympy.solvers"], [283, "solvers"]], "Inequality Solvers": [[220, "inequality-solvers"]], "ODE": [[221, "ode"]], "Hint Functions": [[221, "hint-functions"]], "Lie heuristics": [[221, "lie-heuristics"]], "Rational Riccati Solver": [[221, "rational-riccati-solver"]], "System of ODEs": [[221, "system-of-odes"]], "Information on the ode module": [[221, "module-sympy.solvers.ode.ode"]], "PDE": [[222, "pde"]], "Hint Methods": [[222, "hint-methods"]], "Information on the pde module": [[222, "module-sympy.solvers.pde"]], "Algebraic equations": [[223, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[223, "ordinary-differential-equations-odes"], [224, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[223, "partial-differential-equations-pdes"], [224, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[223, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[223, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[223, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[223, "diophantine-equations-des"], [224, "diophantine-equations-des"]], "Inequalities": [[223, "inequalities"], [224, "inequalities"]], "Solveset": [[224, "solveset"]], "What\u2019s wrong with solve():": [[224, "what-s-wrong-with-solve"]], "Why Solveset?": [[224, "why-solveset"]], "Why do we use Sets as an output type?": [[224, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[224, "input-api-of-solveset"]], "What is this domain argument about?": [[224, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[224, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[224, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[224, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[224, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[224, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[224, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[224, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[224, "solveset-module-reference"]], "transolve": [[224, "transolve"]], "Stats": [[225, "module-sympy.stats"]], "Random Variable Types": [[225, "random-variable-types"]], "Finite Types": [[225, "finite-types"]], "Discrete Types": [[225, "discrete-types"]], "Continuous Types": [[225, "continuous-types"]], "Joint Types": [[225, "joint-types"]], "Stochastic Processes": [[225, "stochastic-processes"]], "Matrix Distributions": [[225, "matrix-distributions"]], "Compound Distribution": [[225, "compound-distribution"]], "Interface": [[225, "interface"]], "N-dim array": [[226, "module-sympy.tensor.array"]], "Products and contractions": [[226, "products-and-contractions"]], "Diagonal operator": [[226, "diagonal-operator"]], "Derivatives by array": [[226, "derivatives-by-array"]], "Classes": [[226, "classes"]], "N-dim array expressions": [[227, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[227, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[227, "compatibility-with-matrices"]], "Tensor": [[228, "module-sympy.tensor"], [231, "module-sympy.tensor.tensor"]], "Methods": [[229, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[230, "module-sympy.tensor.indexed"]], "Tensor Operators": [[232, "module-sympy.tensor.toperators"]], "Testing": [[233, "testing"]], "pytest": [[234, "module-sympy.testing.pytest"]], "Randomised Testing": [[235, "module-sympy.testing.randtest"]], "Run Tests": [[236, "module-sympy.testing.runtests"]], "Autowrap Module": [[237, "autowrap-module"]], "Implementation details": [[237, "implementation-details"]], "Codegen": [[238, "codegen"]], "Implementation Details": [[238, "implementation-details"]], "Routine": [[238, "routine"]], "Decorator": [[239, "module-sympy.utilities.decorator"]], "Enumerative": [[240, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[241, "module-sympy.utilities.exceptions"]], "Iterables": [[243, "module-sympy.utilities.iterables"]], "variations": [[243, "variations"]], "partitions": [[243, "partitions"]], "Memoization": [[245, "module-sympy.utilities.memoization"]], "PKGDATA": [[247, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[248, "module-sympy.utilities.source"]], "Timing Utilities": [[249, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[250, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[251, "vector-api"]], "Orienter classes (docstrings)": [[252, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[253, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[254, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[254, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[254, "sympy-operations-on-vectors"]], "Dyadics": [[254, "dyadics"]], "More about Coordinate Systems": [[255, "more-about-coordinate-systems"]], "Locating new systems": [[255, "locating-new-systems"]], "Orienting new systems": [[255, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[255, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[255, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[255, "orienting-and-locating-new-systems"]], "Transforming new system": [[255, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[255, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[255, "vectors-and-dyadics"]], "Coordinate Variables": [[255, "coordinate-variables"]], "Other expression-dependent methods": [[255, "other-expression-dependent-methods"]], "General examples of usage": [[256, "general-examples-of-usage"]], "Quadrilateral problem": [[256, "quadrilateral-problem"]], "The Problem": [[256, "the-problem"], [256, "id1"]], "Solution": [[256, "solution"], [256, "id2"]], "Third product rule for Del operator": [[256, "third-product-rule-for-del-operator"]], "See": [[256, "see"]], "Implementation in sympy.vector": [[257, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[257, "scalar-and-vector-fields"]], "The Del operator": [[257, "the-del-operator"]], "Field operators and related functions": [[257, "field-operators-and-related-functions"]], "Directional Derivative": [[257, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[257, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[258, "references-for-vector"]], "Coordinate Systems": [[259, "coordinate-systems"]], "Applications of Vector Integrals": [[260, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[260, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[260, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[260, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[260, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[260, "verifying-divergence-theorem"]], "Physics": [[261, "physics"], [267, "module-sympy.physics"]], "Topics": [[261, "topics"], [268, "topics"]], "Introductory Tutorial": [[270, "introductory-tutorial"], [275, "introductory-tutorial"]], "Basic Operations": [[271, "basic-operations"], [278, "basic-operations"]], "Quick Tip": [[271, null], [272, null], [274, null], [277, null], [278, null]], "Converting Strings to SymPy Expressions": [[271, "converting-strings-to-sympy-expressions"]], "Derivatives": [[272, "derivatives"]], "Series Expansion": [[272, "series-expansion"]], "Finite differences": [[272, "finite-differences"]], "SymPy Features": [[273, "sympy-features"]], "Equals signs": [[274, "equals-signs"]], "Two Final Notes: ^ and /": [[274, "two-final-notes-and"]], "Further Reading": [[274, "further-reading"]], "What is Symbolic Computation?": [[276, "what-is-symbolic-computation"]], "A More Interesting Example": [[276, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[276, "the-power-of-symbolic-computation"]], "Why SymPy?": [[276, "why-sympy"]], "Advanced Expression Manipulation": [[277, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[277, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[277, "recursing-through-an-expression-tree"]], "args": [[277, "args"]], "Key Invariant": [[277, null]], "Walking the Tree": [[277, "walking-the-tree"]], "Prevent expression evaluation": [[277, "prevent-expression-evaluation"]], "Shape": [[278, "shape"]], "Accessing Rows and Columns": [[278, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[278, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[278, "basic-methods"]], "Matrix Constructors": [[278, "matrix-constructors"]], "Advanced Methods": [[278, "advanced-methods"]], "Determinant": [[278, "determinant"]], "RREF": [[278, "rref"]], "Nullspace": [[278, "nullspace"]], "Columnspace": [[278, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[278, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[278, "possible-issues"]], "Zero Testing": [[278, "zero-testing"]], "What\u2019s Next": [[279, "whats-next"]], "Preliminaries": [[280, "preliminaries"]], "Exercises": [[280, "exercises"]], "Printers": [[281, "printers"]], "Setting up Pretty Printing": [[281, "setting-up-pretty-printing"]], "Printing Functions": [[281, "printing-functions"]], "str": [[281, "str"]], "ASCII Pretty Printer": [[281, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[281, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[281, "mathrm-latex"]], "MathML": [[281, "mathml"]], "Dot": [[281, "dot"]], "Simplification": [[282, "simplification"]], "simplify": [[282, "simplify"]], "Polynomial/Rational Function Simplification": [[282, "polynomial-rational-function-simplification"]], "expand": [[282, "expand"]], "factor": [[282, "factor"]], "collect": [[282, "collect"]], "cancel": [[282, "cancel"]], "apart": [[282, "apart"]], "Trigonometric Simplification": [[282, "trigonometric-simplification"]], "trigsimp": [[282, "trigsimp"]], "expand_trig": [[282, "expand-trig"]], "Powers": [[282, "powers"]], "powsimp": [[282, "powsimp"]], "expand_power_exp / expand_power_base": [[282, "expand-power-exp-expand-power-base"]], "powdenest": [[282, "powdenest"]], "Exponentials and logarithms": [[282, "exponentials-and-logarithms"]], "expand_log": [[282, "expand-log"]], "logcombine": [[282, "logcombine"]], "Special Functions": [[282, "special-functions"]], "rewrite": [[282, "rewrite"]], "expand_func": [[282, "expand-func"]], "hyperexpand": [[282, "hyperexpand"]], "combsimp": [[282, "combsimp"]], "gammasimp": [[282, "gammasimp"]], "Example: Continued Fractions": [[282, "example-continued-fractions"]], "A Note about Equations": [[283, "a-note-about-equations"]], "Solving Equations Algebraically": [[283, "solving-equations-algebraically"]], "Solving Differential Equations": [[283, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [27, "module-sympy"], [29, "module-sympy.abc"], [30, "module-sympy.algebras"], [31, "module-sympy.assumptions.ask"], [32, "module-sympy.assumptions.assume"], [33, "module-sympy.assumptions"], [34, "module-sympy.assumptions.predicates"], [35, "module-sympy.assumptions.refine"], [36, "module-sympy.calculus"], [36, "module-sympy.calculus.euler"], [36, "module-sympy.calculus.finite_diff"], [36, "module-sympy.calculus.singularities"], [36, "module-sympy.calculus.util"], [37, "module-sympy.categories"], [37, "module-sympy.categories.diagram_drawing"], [38, "module-sympy.codegen.algorithms"], [38, "module-sympy.codegen.approximations"], [38, "module-sympy.codegen.ast"], [38, "module-sympy.codegen.cfunctions"], [38, "module-sympy.codegen.cnodes"], [38, "module-sympy.codegen.cutils"], [38, "module-sympy.codegen.cxxnodes"], [38, "module-sympy.codegen.fnodes"], [38, "module-sympy.codegen.futils"], [38, "module-sympy.codegen.matrix_nodes"], [38, "module-sympy.codegen.pyutils"], [38, "module-sympy.codegen.rewriting"], [40, "module-sympy.combinatorics.graycode"], [41, "module-sympy.combinatorics.group_constructs"], [42, "module-sympy.combinatorics.group_numbers"], [44, "module-sympy.combinatorics.named_groups"], [45, "module-sympy.combinatorics.partitions"], [47, "module-sympy.combinatorics.perm_groups"], [48, "module-sympy.combinatorics.generators"], [48, "module-sympy.combinatorics.permutations"], [49, "module-sympy.combinatorics.polyhedron"], [50, "module-sympy.combinatorics.prufer"], [51, "module-sympy.combinatorics.subsets"], [52, "module-sympy.combinatorics.tensor_can"], [53, "module-sympy.combinatorics.testutil"], [54, "module-sympy.combinatorics.util"], [56, "module-sympy.core.add"], [56, "module-sympy.core.assumptions"], [56, "module-sympy.core.basic"], [56, "module-sympy.core.cache"], [56, "module-sympy.core.containers"], [56, "module-sympy.core.evalf"], [56, "module-sympy.core.expr"], [56, "module-sympy.core.exprtools"], [56, "module-sympy.core.function"], [56, "module-sympy.core.kind"], [56, "module-sympy.core.mod"], [56, "module-sympy.core.mul"], [56, "module-sympy.core.multidimensional"], [56, "module-sympy.core.numbers"], [56, "module-sympy.core.power"], [56, "module-sympy.core.random"], [56, "module-sympy.core.relational"], [56, "module-sympy.core.singleton"], [56, "module-sympy.core.symbol"], [56, "module-sympy.core.sympify"], [56, "module-sympy.core.traversal"], [57, "module-sympy.crypto.crypto"], [58, "module-sympy.diffgeom"], [59, "module-sympy.discrete"], [59, "module-sympy.discrete.convolutions"], [59, "module-sympy.discrete.transforms"], [63, "module-sympy.functions"], [64, "module-sympy.functions.special.bessel"], [64, "module-sympy.functions.special.beta_functions"], [64, "module-sympy.functions.special.elliptic_integrals"], [64, "module-sympy.functions.special.error_functions"], [64, "module-sympy.functions.special.gamma_functions"], [64, "module-sympy.functions.special.mathieu_functions"], [64, "module-sympy.functions.special.polynomials"], [64, "module-sympy.functions.special.singularity_functions"], [64, "module-sympy.functions.special.zeta_functions"], [65, "module-sympy.geometry.curve"], [66, "module-sympy.geometry.ellipse"], [67, "module-sympy.geometry.entity"], [69, "module-sympy.geometry.line"], [70, "module-sympy.geometry.plane"], [71, "module-sympy.geometry.point"], [72, "module-sympy.geometry.polygon"], [73, "module-sympy.geometry.util"], [76, "module-sympy.holonomic"], [81, "module-sympy.integrals.meijerint"], [81, "module-sympy.integrals.meijerint_doc"], [83, "module-sympy.integrals"], [83, "module-sympy.integrals.intpoly"], [83, "module-sympy.integrals.transforms"], [84, "module-sympy.interactive"], [84, "module-sympy.interactive.printing"], [84, "module-sympy.interactive.session"], [85, "module-sympy.liealgebras"], [86, "module-sympy.logic"], [86, "module-sympy.logic.inference"], [87, "module-sympy.matrices.common"], [89, "module-sympy.matrices.expressions"], [89, "module-sympy.matrices.expressions.blockmatrix"], [90, "module-sympy.matrices.immutable"], [91, "module-sympy.matrices"], [92, "module-sympy.matrices.matrices"], [94, "module-sympy.matrices.sparse"], [95, "module-sympy.matrices.sparsetools"], [96, "module-sympy.ntheory.bbp_pi"], [96, "module-sympy.ntheory.continued_fraction"], [96, "module-sympy.ntheory.digits"], [96, "module-sympy.ntheory.ecm"], [96, "module-sympy.ntheory.egyptian_fraction"], [96, "module-sympy.ntheory.factor_"], [96, "module-sympy.ntheory.generate"], [96, "module-sympy.ntheory.modular"], [96, "module-sympy.ntheory.multinomial"], [96, "module-sympy.ntheory.partitions_"], [96, "module-sympy.ntheory.primetest"], [96, "module-sympy.ntheory.qs"], [96, "module-sympy.ntheory.residue_ntheory"], [98, "module-sympy.parsing"], [98, "module-sympy.parsing.sym_expr"], [99, "module-sympy.physics.continuum_mechanics.beam"], [102, "module-sympy.physics.continuum_mechanics.truss"], [105, "module-sympy.physics.control"], [106, "module-sympy.physics.control.lti"], [107, "module-sympy.physics.hep.gamma_matrices"], [108, "module-sympy.physics.hydrogen"], [109, "module-sympy.physics.matrices"], [111, "module-sympy.physics.mechanics.body"], [114, "module-sympy.physics.mechanics.joint"], [114, "module-sympy.physics.mechanics.jointsmethod"], [115, "module-sympy.physics.mechanics.kane"], [115, "module-sympy.physics.mechanics.lagrange"], [116, "module-sympy.physics.mechanics.linearize"], [117, "module-sympy.physics.mechanics.particle"], [117, "module-sympy.physics.mechanics.rigidbody"], [119, "module-sympy.physics.mechanics.system"], [130, "module-sympy.physics.mechanics"], [139, "module-sympy.physics.optics.gaussopt"], [141, "module-sympy.physics.optics.medium"], [142, "module-sympy.physics.optics.polarization"], [143, "module-sympy.physics.optics.utils"], [144, "module-sympy.physics.optics.waves"], [145, "module-sympy.physics.paulialgebra"], [146, "module-sympy.physics.qho_1d"], [147, "module-sympy.physics.quantum.anticommutator"], [148, "module-sympy.physics.quantum.cartesian"], [149, "module-sympy.physics.quantum.cg"], [150, "module-sympy.physics.quantum.circuitplot"], [151, "module-sympy.physics.quantum.commutator"], [152, "module-sympy.physics.quantum.constants"], [153, "module-sympy.physics.quantum.dagger"], [154, "module-sympy.physics.quantum.gate"], [155, "module-sympy.physics.quantum.grover"], [156, "module-sympy.physics.quantum.hilbert"], [158, "module-sympy.physics.quantum.innerproduct"], [159, "module-sympy.physics.quantum.operator"], [160, "module-sympy.physics.quantum.operatorset"], [161, "module-sympy.physics.quantum.piab"], [162, "module-sympy.physics.quantum.qapply"], [163, "module-sympy.physics.quantum.qft"], [164, "module-sympy.physics.quantum.qubit"], [165, "module-sympy.physics.quantum.represent"], [166, "module-sympy.physics.quantum.shor"], [167, "module-sympy.physics.quantum.spin"], [168, "module-sympy.physics.quantum.state"], [169, "module-sympy.physics.quantum.tensorproduct"], [170, "module-sympy.physics.secondquant"], [171, "module-sympy.physics.sho"], [172, "module-sympy.physics.units.dimensions"], [176, "module-sympy.physics.units.prefixes"], [177, "module-sympy.physics.units.quantities"], [177, "module-sympy.physics.units.util"], [178, "module-sympy.physics.units.unitsystem"], [184, "module-sympy.physics.vector.functions"], [184, "module-sympy.physics.vector.point"], [187, "module-sympy.physics.vector"], [190, "module-sympy.physics.wigner"], [191, "module-sympy.plotting.plot"], [191, "module-sympy.plotting.pygletplot"], [198, "module-sympy.polys.polyconfig"], [198, "module-sympy.polys.polyoptions"], [200, "module-sympy.polys.numberfields.modules"], [200, "module-sympy.polys.numberfields.subfield"], [201, "module-sympy.polys"], [203, "module-sympy.polys.solvers"], [205, "module-sympy.printing.aesaracode"], [205, "module-sympy.printing.c"], [205, "module-sympy.printing.codeprinter"], [205, "module-sympy.printing.conventions"], [205, "module-sympy.printing.cxx"], [205, "module-sympy.printing.fortran"], [205, "module-sympy.printing.gtk"], [205, "module-sympy.printing.jscode"], [205, "module-sympy.printing.julia"], [205, "module-sympy.printing.lambdarepr"], [205, "module-sympy.printing.latex"], [205, "module-sympy.printing.maple"], [205, "module-sympy.printing.mathematica"], [205, "module-sympy.printing.mathml"], [205, "module-sympy.printing.octave"], [205, "module-sympy.printing.precedence"], [205, "module-sympy.printing.pretty"], [205, "module-sympy.printing.pretty.pretty"], [205, "module-sympy.printing.pretty.pretty_symbology"], [205, "module-sympy.printing.pretty.stringpict"], [205, "module-sympy.printing.preview"], [205, "module-sympy.printing.printer"], [205, "module-sympy.printing.pycode"], [205, "module-sympy.printing.python"], [205, "module-sympy.printing.rcode"], [205, "module-sympy.printing.repr"], [205, "module-sympy.printing.rust"], [205, "module-sympy.printing.smtlib"], [205, "module-sympy.printing.str"], [205, "module-sympy.printing.tree"], [213, "module-sympy.sets.conditionset"], [213, "module-sympy.sets.fancysets"], [213, "module-sympy.sets.powerset"], [213, "module-sympy.sets.sets"], [215, "module-sympy.simplify.hyperexpand_doc"], [217, "module-sympy.simplify.combsimp"], [217, "module-sympy.simplify.cse_main"], [217, "module-sympy.simplify.epathtools"], [217, "module-sympy.simplify.hyperexpand"], [217, "module-sympy.simplify.powsimp"], [217, "module-sympy.simplify.radsimp"], [217, "module-sympy.simplify.ratsimp"], [217, "module-sympy.simplify.sqrtdenest"], [217, "module-sympy.simplify.trigsimp"], [220, "module-sympy.solvers.inequalities"], [221, "module-sympy.solvers.ode"], [221, "module-sympy.solvers.ode.ode"], [222, "module-sympy.solvers.pde"], [223, "module-sympy.solvers"], [223, "module-sympy.solvers.recurr"], [224, "module-sympy.solvers.solveset"], [225, "module-sympy.stats"], [225, "module-sympy.stats.crv"], [225, "module-sympy.stats.crv_types"], [225, "module-sympy.stats.frv"], [225, "module-sympy.stats.frv_types"], [225, "module-sympy.stats.rv"], [226, "module-sympy.tensor.array"], [227, "module-sympy.tensor.array.expressions"], [228, "module-sympy.tensor"], [229, "module-sympy.tensor.index_methods"], [230, "module-sympy.tensor.indexed"], [231, "module-sympy.tensor.tensor"], [232, "module-sympy.tensor.toperators"], [233, "module-sympy.testing"], [234, "module-sympy.testing.pytest"], [235, "module-sympy.testing.randtest"], [236, "module-sympy.testing.runtests"], [237, "module-sympy.utilities.autowrap"], [238, "module-sympy.utilities.codegen"], [239, "module-sympy.utilities.decorator"], [240, "module-sympy.utilities.enumerative"], [241, "module-sympy.utilities.exceptions"], [242, "module-sympy.utilities"], [243, "module-sympy.utilities.iterables"], [244, "module-sympy.utilities.lambdify"], [245, "module-sympy.utilities.memoization"], [246, "module-sympy.utilities.misc"], [247, "module-sympy.utilities.pkgdata"], [248, "module-sympy.utilities.source"], [249, "module-sympy.utilities.timeutils"], [258, "module-sympy.vector"], [267, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[27, "module-sympy"]], "sympy.abc": [[29, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[30, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[30, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[30, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[30, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[30, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[30, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[30, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[31, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[31, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[31, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[31, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[31, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[32, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[32, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[32, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[32, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[32, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[32, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[32, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[32, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[32, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[32, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[32, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[32, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[32, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[32, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[33, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[34, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[34, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[34, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[34, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[34, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[34, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[34, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[34, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[34, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[34, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[34, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[34, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[34, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[34, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[34, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[34, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[34, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[34, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[34, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[34, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[34, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[34, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[34, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[34, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[34, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[34, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[34, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[34, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[34, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[34, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[34, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[34, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[34, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[34, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[35, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[35, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[36, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[36, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[36, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[36, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[36, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[36, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[36, "module-sympy.calculus"]], "sympy.calculus.euler": [[36, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[36, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[36, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[36, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[37, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[37, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[37, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[37, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[37, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[37, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[37, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[37, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[37, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[37, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[37, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[37, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[37, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[37, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[37, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[37, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[37, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[37, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[37, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[37, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[37, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[37, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[37, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[37, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[37, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[37, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[37, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[37, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[37, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[37, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[37, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[37, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[37, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[37, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[37, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[38, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[38, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[38, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[38, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[38, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[38, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[38, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[38, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[38, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[38, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[38, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[38, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[38, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[38, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[38, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[38, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[38, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[38, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[38, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[38, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[38, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[38, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[38, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[38, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[38, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[38, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[38, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[38, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[38, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[38, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[38, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[38, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[38, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[38, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[38, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[38, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[38, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[38, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[38, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[38, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[38, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[38, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[38, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[38, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[38, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[38, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[38, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[38, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[38, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[38, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[38, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[38, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[40, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[40, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[40, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[40, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[40, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[40, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[40, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[40, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[40, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[40, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[40, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[40, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[40, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[40, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[40, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[41, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[41, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[42, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[42, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[42, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[42, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[44, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[44, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[44, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[44, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[44, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[44, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[45, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[45, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[45, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[45, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[45, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[45, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[45, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[45, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[45, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[45, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[45, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[45, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[47, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[47, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[48, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[48, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[48, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[48, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[48, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[48, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[48, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[48, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[48, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[48, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[48, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[48, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[48, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[48, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[49, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[49, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[49, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[50, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[50, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[50, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[50, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[50, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[50, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[50, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[50, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[50, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[50, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[50, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[50, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[50, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[50, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[51, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[51, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[51, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[51, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[51, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[51, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[51, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[51, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[51, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[51, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[52, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[52, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[52, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[52, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[52, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[53, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[53, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[53, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[53, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[53, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[53, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[54, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[54, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[55, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[55, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[55, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[55, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[55, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[55, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[55, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[55, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[55, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[55, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[55, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[55, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[55, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[55, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[55, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[55, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[55, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[55, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[55, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[55, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[56, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[56, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[56, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[56, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[56, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[56, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[56, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[56, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[56, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[56, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[56, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[56, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[56, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[56, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[56, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[56, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[56, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[56, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[56, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[56, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[56, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[56, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[56, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[56, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[56, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[56, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[56, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[56, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[56, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[56, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[56, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[56, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[56, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[56, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[56, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[56, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[56, "sympy.core.numbers.One"]], "pep 335": [[56, "index-0"], [56, "index-1"], [56, "index-2"], [56, "index-3"]], "pi (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[56, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[56, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[56, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[56, "index-0"], [56, "index-1"], [56, "index-2"], [56, "index-3"]], "rational (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[56, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[56, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[56, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[56, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[56, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[56, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[56, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[56, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[56, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[56, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[56, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[56, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[56, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[56, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[56, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[56, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[56, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[56, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[56, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[56, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[56, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[56, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[56, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[56, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[56, "term-algebraic"]], "antihermitian": [[56, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[56, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[56, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[56, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[56, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.as_coeff_Add"], [56, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_coeff_Add"], [56, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[56, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[56, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_coeff_Mul"], [56, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[56, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[56, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[56, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[56, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[56, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[56, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[56, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[56, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[56, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[56, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[56, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[56, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[56, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[56, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[56, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[56, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[56, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[56, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.combsimp"]], "commutative": [[56, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.compare"]], "complex": [[56, "term-complex"]], "composite": [[56, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[56, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[56, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[56, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[56, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[56, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[56, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[56, "term-even"]], "expand() (in module sympy.core.function)": [[56, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[56, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[56, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[56, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[56, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[56, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[56, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[56, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[56, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[56, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[56, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[56, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[56, "term-extended_negative"]], "extended_nonnegative": [[56, "term-extended_nonnegative"]], "extended_nonpositive": [[56, "term-extended_nonpositive"]], "extended_nonzero": [[56, "term-extended_nonzero"]], "extended_positive": [[56, "term-extended_positive"]], "extended_real": [[56, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[56, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[56, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[56, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.find"]], "finite": [[56, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[56, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[56, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[56, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[56, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[56, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[56, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[56, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[56, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[56, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[56, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[56, "sympy.core.numbers.ilcm"]], "imaginary": [[56, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[56, "sympy.core.containers.Tuple.index"]], "infinite": [[56, "term-infinite"]], "integer": [[56, "term-integer"]], "integer_log() (in module sympy.core.power)": [[56, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[56, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[56, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.invert"]], "irrational": [[56, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[56, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[56, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[56, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[56, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[56, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[56, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[56, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[56, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[56, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[56, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[56, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[56, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[56, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[56, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.negated"]], "negative": [[56, "term-negative"]], "nfloat() (in module sympy.core.function)": [[56, "sympy.core.function.nfloat"]], "nonnegative": [[56, "term-nonnegative"]], "nonpositive": [[56, "term-nonpositive"]], "nonzero": [[56, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.nsimplify"]], "odd": [[56, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[56, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[56, "sympy.core.function.Subs.point"]], "positive": [[56, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[56, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[56, "sympy.core.traversal.preorder_traversal"]], "prime": [[56, "term-prime"]], "primitive() (sympy.core.add.add method)": [[56, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[56, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[56, "sympy.core.random.random_complex_number"]], "rational": [[56, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.rcall"]], "real": [[56, "term-real"]], "refine() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[56, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[56, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[56, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[56, "sympy.core.sympify.sympify"]], "sympy.core.add": [[56, "module-sympy.core.add"]], "sympy.core.assumptions": [[56, "module-sympy.core.assumptions"]], "sympy.core.basic": [[56, "module-sympy.core.basic"]], "sympy.core.cache": [[56, "module-sympy.core.cache"]], "sympy.core.containers": [[56, "module-sympy.core.containers"]], "sympy.core.evalf": [[56, "module-sympy.core.evalf"]], "sympy.core.expr": [[56, "module-sympy.core.expr"]], "sympy.core.exprtools": [[56, "module-sympy.core.exprtools"]], "sympy.core.function": [[56, "module-sympy.core.function"]], "sympy.core.kind": [[56, "module-sympy.core.kind"]], "sympy.core.mod": [[56, "module-sympy.core.mod"]], "sympy.core.mul": [[56, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[56, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[56, "module-sympy.core.numbers"]], "sympy.core.power": [[56, "module-sympy.core.power"]], "sympy.core.random": [[56, "module-sympy.core.random"]], "sympy.core.relational": [[56, "module-sympy.core.relational"]], "sympy.core.singleton": [[56, "module-sympy.core.singleton"]], "sympy.core.symbol": [[56, "module-sympy.core.symbol"]], "sympy.core.sympify": [[56, "module-sympy.core.sympify"]], "sympy.core.traversal": [[56, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[56, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[56, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.together"]], "transcendental": [[56, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[56, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[56, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[56, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[56, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[56, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[56, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[56, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[56, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[56, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[56, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[56, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[56, "sympy.core.basic.Basic.xreplace"]], "zero": [[56, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[57, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[57, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[58, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[58, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[58, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[58, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[58, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[58, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[58, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[58, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[58, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[58, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[58, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[58, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[58, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[58, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[58, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[58, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[58, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[58, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[59, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[59, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[59, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[59, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[59, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[61, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[61, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[62, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[62, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[62, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[62, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[62, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[62, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[62, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[62, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[62, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[62, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[62, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[62, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[62, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[62, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[62, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[62, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[62, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[62, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[62, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[62, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[62, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[62, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[62, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[62, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[62, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[62, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[62, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[62, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[62, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[62, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[62, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[62, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[62, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[62, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[62, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[62, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[62, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[62, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[62, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[62, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[62, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[62, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[62, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[62, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[62, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[62, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[62, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[62, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[62, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[62, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[62, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[62, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[62, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[62, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[62, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[62, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[62, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[62, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[63, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[64, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[64, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[64, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[64, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.Li"], [64, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[64, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[64, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[64, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[64, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[64, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[64, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[64, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[64, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[64, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[64, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[64, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[64, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[64, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[64, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[64, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[64, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[64, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[64, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[64, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[64, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[64, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[64, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[64, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[64, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[64, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[64, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[64, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[64, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[64, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[64, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[64, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[64, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[64, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[64, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[64, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[64, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[64, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[64, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[64, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[64, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[64, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[64, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[64, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[64, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[64, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[64, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[64, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[64, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[64, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[64, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[64, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[64, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[64, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[64, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[64, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[64, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[64, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[64, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[64, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[64, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[64, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[64, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[64, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[65, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[65, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[65, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[65, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[65, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[65, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[65, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[65, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[65, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[65, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[65, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[65, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[65, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[66, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[66, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[66, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[66, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[66, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[66, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[66, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[66, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[66, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[66, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[66, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[66, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[67, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[67, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[67, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[67, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[67, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[69, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[69, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[69, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[69, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[69, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[69, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[69, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[69, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[69, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[69, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[69, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[69, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[69, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[69, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[69, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[69, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[69, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[69, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[69, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[69, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[69, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[69, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[69, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[69, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[69, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[69, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[69, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[69, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[69, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[69, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[69, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[69, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[69, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[69, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[69, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[69, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[69, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[69, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[69, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[69, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[69, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[70, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[70, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[70, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[70, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[70, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[70, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[71, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[71, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[71, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[71, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[71, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[71, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[71, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[71, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[71, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[71, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[71, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[71, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[71, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[71, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[71, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[71, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[71, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[71, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[71, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[71, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[71, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[71, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[71, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[71, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[71, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[71, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[71, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[71, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[72, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[72, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[72, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[72, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[72, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[72, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[72, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[72, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[72, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[72, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[72, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[72, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[72, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[72, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[72, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[72, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[72, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[72, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[72, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[73, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[73, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[73, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[73, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[73, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[73, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[75, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[75, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[75, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[76, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[77, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[77, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[78, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[79, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[81, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[81, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[81, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[81, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[83, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[83, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[83, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[83, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[83, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[83, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[83, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[83, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[83, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[83, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[83, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[83, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[83, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[83, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[83, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[83, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[83, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[83, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[83, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[83, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[83, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[83, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[83, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[83, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[83, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[83, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[83, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[83, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[83, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[83, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[83, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[83, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[83, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[84, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[84, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[84, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[84, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[84, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[84, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[84, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[84, "module-sympy.interactive"]], "sympy.interactive.printing": [[84, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[84, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[85, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[85, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[85, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[85, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[85, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[85, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[85, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[85, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[85, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[85, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[85, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[85, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[85, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[85, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[85, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[85, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[85, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[85, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[85, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[85, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[85, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[85, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[85, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[85, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[85, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[85, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[85, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[85, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[85, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[85, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[86, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[86, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[86, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[86, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[86, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[86, "module-sympy.logic"]], "sympy.logic.inference": [[86, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[86, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[87, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[87, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[87, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[87, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[87, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[87, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[87, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[88, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[88, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[88, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[88, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[88, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[88, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[88, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[88, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[88, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[88, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[89, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[89, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[89, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[89, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[89, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[89, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[89, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[89, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[89, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[89, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[89, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[89, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[89, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[89, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[89, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[89, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[89, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[89, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[90, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[90, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[90, "module-sympy.matrices.immutable"]], "sympy.matrices": [[91, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[92, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[92, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[92, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[92, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[92, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[92, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[92, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[92, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[92, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[92, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[92, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[92, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[92, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[92, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[92, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[92, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[92, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[92, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[92, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[92, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[92, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[92, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[92, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[92, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[92, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[92, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[93, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[93, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[94, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[94, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[94, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[94, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[95, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[95, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[95, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[95, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[96, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[96, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[96, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[96, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[96, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[96, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[96, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[96, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[96, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[96, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[96, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[96, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[96, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[96, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[96, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[96, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[96, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[96, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[96, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[96, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[96, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[96, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[96, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[96, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[96, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[96, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[96, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[96, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[96, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[96, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[96, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[96, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[96, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[96, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[96, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[96, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[96, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[96, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[96, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[96, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[96, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[96, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[96, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[96, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[96, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[96, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[98, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[98, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[98, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[98, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[98, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[98, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[98, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[98, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[98, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[98, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[98, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[98, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[98, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[99, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[99, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[99, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[99, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[102, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[102, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[102, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[104, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[105, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[106, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[106, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[106, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[106, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[106, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[106, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[106, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[106, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[106, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[106, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[106, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[106, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[106, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[106, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[106, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[106, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[106, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[106, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[106, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[106, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[106, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[106, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[106, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[106, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[106, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[106, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[106, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[106, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[106, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[106, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[106, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[106, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[106, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[106, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[106, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[106, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[106, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[106, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[106, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[106, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[106, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[106, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[106, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[106, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[106, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[106, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[106, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[106, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[106, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[107, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[107, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[107, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[107, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[107, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[108, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[108, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[108, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[108, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[108, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[109, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[109, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[109, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[109, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[109, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[111, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[111, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[111, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[111, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[111, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[111, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[111, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[112, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[112, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[114, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[114, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[114, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[114, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[114, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[114, "sympy.physics.mechanics.joint.SphericalJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[114, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[114, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[114, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[114, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[114, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[114, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[114, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[114, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[114, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[114, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[114, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[114, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[114, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[114, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[114, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[114, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[114, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[115, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[115, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[115, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[115, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[115, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[115, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[115, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[115, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[115, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[115, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[115, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[115, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[115, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[115, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[116, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[116, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[116, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[117, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[117, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[117, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[117, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[117, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[117, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[117, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[117, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[117, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[117, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[117, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[117, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[119, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[119, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[119, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[130, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[139, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[139, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[139, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[139, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[139, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[139, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[139, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[139, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[139, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[141, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[141, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[141, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[141, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[142, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[142, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[143, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[143, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[144, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[144, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[144, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[145, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[145, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[146, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[146, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[146, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[146, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[147, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[147, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[147, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[148, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[148, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[148, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[148, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[148, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[148, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[148, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[148, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[148, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[149, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[149, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[149, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[149, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[149, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[149, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[150, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[150, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[150, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[150, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[150, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[150, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[150, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[151, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[151, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[151, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[152, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[152, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[153, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[153, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[154, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[154, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[154, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[154, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[154, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[154, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[154, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[154, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[154, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[154, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[154, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[154, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[154, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[154, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[154, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[154, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[154, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[154, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[154, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[154, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[154, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[155, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[155, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[155, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[155, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[155, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[155, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[155, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[155, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[156, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[156, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[156, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[156, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[156, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[156, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[156, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[158, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[158, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[159, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[159, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[159, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[159, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[159, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[159, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[159, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[159, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[159, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[159, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[159, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[159, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[159, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[160, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[160, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[160, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[161, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[161, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[161, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[161, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[162, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[162, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[163, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[163, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[163, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[163, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[163, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[163, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[163, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[164, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[164, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[165, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[165, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[165, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[165, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[165, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[165, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[165, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[166, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[166, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[166, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[166, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[166, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[166, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[166, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[167, "sympy.physics.quantum.spin.Rotation.D"], [167, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[167, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[167, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[168, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[168, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[168, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[168, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[168, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[168, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[168, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[168, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[168, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[168, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[168, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[168, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[168, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[168, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[168, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[169, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[169, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[169, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[170, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[170, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[170, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[170, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[170, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[170, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[170, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[170, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[170, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[170, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[170, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[170, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[170, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[170, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[170, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[170, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[170, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[170, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[170, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[170, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[170, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[170, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[170, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[170, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[170, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[170, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[170, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[170, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[170, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[170, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[170, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[170, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[170, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[170, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[170, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[171, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[171, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[171, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[172, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[172, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[172, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[172, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[172, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[172, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[172, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[172, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[172, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[172, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[172, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[172, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[172, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[176, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[176, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[177, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[177, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[177, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[177, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[177, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[177, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[177, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[177, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[177, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[177, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[178, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[178, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[178, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[178, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[178, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[178, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[180, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[180, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[180, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[180, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[180, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[180, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[180, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[180, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[180, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[180, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[180, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[180, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[181, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[182, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[182, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[182, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[182, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[182, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[182, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[184, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[184, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[184, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[184, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[184, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[185, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[185, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[185, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[185, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[187, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[190, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[190, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[191, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[191, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[191, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[191, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[191, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[191, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[191, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[191, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[191, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[191, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[191, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[191, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[191, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[191, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[191, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[191, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[191, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[191, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[192, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[192, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[192, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[192, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[192, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[192, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[192, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[192, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[192, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[192, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[192, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[192, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[192, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[192, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[192, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[192, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[192, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[192, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[192, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[192, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[192, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[192, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[192, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[194, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[194, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[194, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[194, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[194, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[194, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[194, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[194, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[194, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[194, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[194, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[194, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[196, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[196, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[196, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[196, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[196, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[196, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[196, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[196, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[196, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[196, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[196, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[196, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[196, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[196, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[196, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[196, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[196, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[196, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[196, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[196, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[196, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[196, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[196, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[196, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[196, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[196, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[196, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[196, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[196, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[196, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[196, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[196, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[196, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[196, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[196, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[196, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[196, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[196, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[196, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[196, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[196, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[196, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[196, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[196, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[196, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[196, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[196, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[196, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[196, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[196, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[196, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[196, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[196, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[196, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[196, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[196, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[196, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[196, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[196, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[196, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[196, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[196, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[196, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[196, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[196, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[196, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[196, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[196, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[196, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[196, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[196, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[196, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[196, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[196, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[196, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[196, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[198, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[198, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[198, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[198, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[198, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[198, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[198, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[198, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[198, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[198, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[198, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[198, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[198, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[198, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[198, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[198, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[198, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[198, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[198, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[198, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[198, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[198, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[198, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[198, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[198, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[198, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[200, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[200, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[200, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[200, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[200, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[200, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[200, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[200, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[200, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[200, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[200, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[200, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[200, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[200, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[200, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[200, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[200, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[200, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[200, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[200, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[200, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[200, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[200, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[200, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[200, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[200, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[200, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[200, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[200, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[200, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[200, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[200, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[200, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[200, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[200, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[200, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[200, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[201, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[201, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[201, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[201, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[201, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[201, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[201, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[201, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[201, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[201, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[201, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[201, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[201, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[201, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[201, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[201, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[201, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[201, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[201, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[201, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[201, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[201, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[201, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[201, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[201, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[201, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[201, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[201, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[201, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[201, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[201, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[201, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[201, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[201, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[201, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[201, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[201, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[201, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[201, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[201, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[201, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[201, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[201, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[201, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[201, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[201, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[201, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[201, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[201, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[201, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[201, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[201, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[201, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[201, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[201, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[201, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[201, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[202, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[203, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[203, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[203, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[203, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[203, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[203, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[205, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[205, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[205, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[205, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[205, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[205, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[205, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[205, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.G"], [205, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[205, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[205, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[205, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[205, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[205, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[205, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[205, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[205, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[205, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[205, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[205, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[205, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[205, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[205, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[205, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[205, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[205, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[205, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[205, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[205, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[205, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[205, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[205, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[205, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[205, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[205, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[205, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[205, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[205, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[205, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[205, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[205, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[205, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[205, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[205, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[205, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[205, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[205, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[205, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[205, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[205, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[205, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[205, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[205, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[205, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[205, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[205, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[205, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[205, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[205, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[205, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[205, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[205, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[205, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[205, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[205, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[205, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[205, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[205, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[205, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[205, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[205, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[205, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[205, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[205, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[205, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[205, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[205, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[205, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[205, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[205, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[205, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[205, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[205, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[205, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[205, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[205, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[205, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[205, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[205, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[205, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[205, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[205, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[205, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[205, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[205, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[205, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[205, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[205, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[205, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[205, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[205, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[205, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[205, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[205, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[205, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[205, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[205, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[205, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[205, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[205, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[205, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[205, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[205, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[205, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[205, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[205, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[205, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[205, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[205, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[205, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[205, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[205, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[205, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[205, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[205, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[205, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[205, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[205, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[205, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[205, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[205, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[205, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[205, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[205, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[205, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[205, "module-sympy.printing.latex"]], "sympy.printing.maple": [[205, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[205, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[205, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[205, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[205, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[205, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[205, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[205, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[205, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[205, "module-sympy.printing.preview"]], "sympy.printing.printer": [[205, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[205, "module-sympy.printing.pycode"]], "sympy.printing.python": [[205, "module-sympy.printing.python"]], "sympy.printing.rcode": [[205, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[205, "module-sympy.printing.repr"]], "sympy.printing.rust": [[205, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[205, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[205, "module-sympy.printing.str"]], "sympy.printing.tree": [[205, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[205, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[205, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[205, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[207, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[207, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[207, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[207, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[207, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[207, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[207, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[207, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[207, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[207, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[207, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[207, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[207, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[207, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[207, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[207, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[207, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[207, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[207, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[207, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[208, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[208, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[208, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[208, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[208, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[208, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[208, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[208, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[210, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[210, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[210, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[211, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[211, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[211, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[211, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[211, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[211, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[211, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[211, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[211, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[211, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[211, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[211, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[211, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[211, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[211, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[211, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[211, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[211, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[212, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[212, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[212, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[212, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[212, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[212, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[212, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[212, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[212, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[212, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[212, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[212, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[212, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[212, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[212, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[213, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[213, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[213, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[213, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[213, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[213, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[213, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[213, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[213, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[213, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[213, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[213, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[213, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[213, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[213, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[213, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[213, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[213, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[213, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[213, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[213, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[213, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[213, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[213, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[213, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[213, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[213, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[213, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[213, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[213, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[213, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[213, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[213, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[213, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[213, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[213, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[213, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[213, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[213, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[213, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[213, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[213, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[213, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[213, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[213, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[213, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[213, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[214, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[215, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[217, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[217, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[217, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[217, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[217, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[217, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[217, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[217, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[217, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[217, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[217, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[217, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[217, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[217, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[217, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[217, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[217, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[217, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[217, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[217, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[217, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[217, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[217, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[217, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[217, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[217, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[218, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[218, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[220, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[220, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[221, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[221, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[221, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[221, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[221, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[221, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[221, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[221, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[222, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[222, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[223, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[223, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[223, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[223, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[223, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[223, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[223, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[223, "module-sympy.solvers"]], "sympy.solvers.recurr": [[223, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[223, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[224, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[224, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[225, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[225, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[225, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[225, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[225, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[225, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[225, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[225, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[225, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[225, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[225, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[225, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[225, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[225, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[225, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[225, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[225, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[225, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[225, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[225, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[225, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[225, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[225, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[225, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[225, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[225, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[225, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[225, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[225, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[225, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[225, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[225, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[225, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[225, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[225, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[225, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[225, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[225, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[225, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[225, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[225, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[225, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[225, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[225, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[225, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[225, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[225, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[225, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[225, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[225, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[225, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[225, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[225, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[225, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[225, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[225, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[225, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[225, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[225, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[225, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[225, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[225, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[225, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[225, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[225, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[225, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[225, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[225, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[225, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[225, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[225, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[225, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[225, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[225, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[225, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[225, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[225, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[225, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[225, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[225, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[225, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[225, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[225, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[225, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[225, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[225, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[225, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[225, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[225, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[225, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[225, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[225, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[225, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[225, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[225, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[225, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[225, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[225, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[225, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[225, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[225, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[225, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[225, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[225, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[225, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[225, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[225, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[225, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[225, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[225, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[225, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[225, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[225, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[225, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[225, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[225, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[225, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[225, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[225, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[225, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[225, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[225, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[225, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[225, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[225, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[225, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[225, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[225, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[225, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[225, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[225, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[225, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[225, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[225, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[225, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[225, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[225, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[225, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[225, "sympy.stats.std"]], "sympy.stats": [[225, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[225, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[225, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[225, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[225, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[225, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[225, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[225, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[225, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[225, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[225, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[226, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[226, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[226, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[226, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[226, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[226, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[226, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[226, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[226, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[226, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[227, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[228, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[229, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[229, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[229, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[230, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[230, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[230, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[230, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[230, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[230, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[230, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[230, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[230, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[230, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[230, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[230, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[230, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[230, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[230, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[230, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[231, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[231, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[231, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[231, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[231, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[231, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[231, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[231, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[231, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[231, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[231, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[231, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[231, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[231, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[231, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[231, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[231, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[231, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[231, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[232, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[232, "module-sympy.tensor.toperators"]], "sympy.testing": [[233, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[234, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[234, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[234, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[234, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[234, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[234, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[235, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[236, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[236, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[236, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[236, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[236, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[236, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[236, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[236, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[236, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[236, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[236, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[236, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[236, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[237, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[237, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[237, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[237, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[238, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[238, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[238, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[238, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[238, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[238, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[238, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[238, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[238, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[238, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[238, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[238, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[238, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[238, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[238, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[238, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[238, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[238, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[238, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[238, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[239, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[239, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[240, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[240, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[240, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[240, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[240, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[240, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[240, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[240, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[240, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[240, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[241, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[241, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[241, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[241, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[242, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[243, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[243, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[244, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[244, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[244, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[244, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[245, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[245, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[245, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[246, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[246, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[247, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[247, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[248, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[248, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[248, "sympy.utilities.source.source"]], "sympy.utilities.source": [[248, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[249, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[249, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[250, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[250, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[250, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[250, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[250, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[250, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[250, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[250, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[250, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[250, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[250, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[250, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[250, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[250, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[250, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[250, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[250, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[250, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[250, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[250, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[250, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[252, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[252, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[252, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[252, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[252, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[252, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[252, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[252, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[252, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[252, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[252, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[253, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[253, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[253, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[253, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[253, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[253, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[253, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[253, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[253, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[253, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[258, "module-sympy.vector"]], "sympy.physics": [[267, "module-sympy.physics"]]}})