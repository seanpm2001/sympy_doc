Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-equation-algebraically", "guides/solving/solve-numerically", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-numerically.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve an Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 23, 24, 25, 26, 27, 29, 30, 33, 34, 37, 38, 39, 40, 47, 48, 49, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 70, 80, 82, 84, 86, 87, 88, 90, 93, 97, 99, 100, 101, 105, 107, 108, 110, 112, 115, 116, 134, 135, 138, 148, 152, 165, 174, 176, 180, 187, 190, 192, 194, 196, 197, 199, 201, 202, 203, 205, 206, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 230, 231, 235, 237, 238, 241, 242, 244, 245, 251, 253, 255, 256, 258, 260, 261, 272, 273, 275, 276, 278, 279, 282, 283, 284], "public": [0, 6, 39, 57, 58, 79, 196, 197, 199, 200, 204, 219, 222, 226, 240, 251], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 22, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 138, 139, 140, 143, 144, 146, 148, 150, 151, 152, 155, 157, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 254, 255, 257, 258, 260, 261, 263, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 99, 100, 101, 103, 105, 107, 111, 112, 113, 115, 116, 117, 118, 121, 122, 125, 126, 131, 132, 133, 136, 137, 138, 139, 140, 143, 145, 148, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 244, 245, 251, 253, 255, 256, 257, 258, 260, 261, 268, 274, 276, 278, 279, 283], "smith": [0, 10, 94, 195], "cp": [0, 49, 98, 194], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 31, 35, 39, 40, 45, 46, 48, 49, 53, 56, 57, 58, 59, 60, 62, 65, 67, 69, 73, 74, 82, 84, 86, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 101, 103, 107, 109, 110, 112, 115, 116, 117, 118, 120, 121, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 154, 168, 169, 172, 174, 176, 187, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 219, 222, 224, 225, 226, 227, 228, 231, 232, 238, 239, 241, 244, 246, 251, 254, 256, 260, 261, 273, 279, 282, 283, 284], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 30, 38, 39, 48, 49, 55, 57, 58, 63, 65, 67, 68, 70, 71, 73, 79, 82, 97, 101, 112, 116, 118, 120, 121, 133, 134, 135, 136, 138, 139, 161, 171, 182, 185, 187, 189, 191, 199, 200, 202, 203, 206, 208, 213, 216, 222, 226, 231, 237, 244, 247, 248, 254, 257, 273], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 225], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 82, 84, 85, 86, 87, 88, 90, 91, 93, 96, 97, 98, 99, 100, 101, 105, 107, 109, 111, 112, 114, 115, 118, 121, 123, 127, 131, 132, 136, 138, 142, 143, 144, 150, 151, 153, 155, 157, 158, 161, 165, 166, 168, 169, 171, 174, 176, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 226, 232, 237, 238, 239, 240, 241, 242, 244, 245, 247, 251, 253, 257, 258, 260, 263, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 283, 284], "moor": [0, 90, 93], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 31, 34, 35, 37, 39, 40, 41, 48, 49, 50, 51, 53, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 81, 82, 84, 86, 87, 88, 89, 90, 93, 97, 98, 99, 103, 107, 108, 111, 112, 113, 115, 116, 117, 118, 120, 121, 124, 125, 126, 133, 134, 135, 136, 138, 139, 143, 145, 151, 155, 167, 169, 171, 173, 174, 176, 180, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 209, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 232, 235, 237, 240, 244, 245, 251, 254, 256, 260, 272, 273, 277, 278, 279, 282, 283, 284], "vig": 0, "granger": [0, 157], "BE": 0, "muller": 0, "rp": [0, 73, 143], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 24, 25, 37, 38, 39, 40, 47, 48, 49, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 75, 80, 81, 82, 84, 86, 88, 90, 93, 97, 98, 99, 101, 105, 115, 116, 120, 126, 131, 133, 134, 138, 140, 144, 145, 156, 157, 160, 169, 171, 174, 181, 186, 187, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 231, 232, 237, 238, 239, 240, 241, 244, 245, 247, 257, 258, 261, 272, 273, 278, 282, 283, 284], "gupta": [0, 225], "h": [0, 12, 16, 37, 38, 39, 40, 41, 48, 53, 56, 57, 58, 62, 65, 79, 82, 84, 88, 89, 93, 94, 99, 107, 115, 118, 136, 140, 143, 155, 157, 160, 165, 169, 176, 191, 192, 193, 194, 195, 199, 200, 201, 202, 205, 206, 214, 218, 222, 224, 225, 226, 227, 232, 239, 261, 273, 282], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 157], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 148, 150, 152, 155, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 241, 242, 243, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 260, 262, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 157, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 276, 278, 279, 281, 282, 283, 284], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 31, 38, 39, 40, 41, 48, 49, 57, 58, 59, 61, 62, 63, 70, 71, 73, 75, 79, 80, 82, 84, 93, 97, 99, 101, 103, 107, 109, 112, 115, 116, 117, 118, 120, 121, 123, 125, 128, 129, 130, 135, 136, 137, 138, 139, 140, 143, 167, 168, 171, 172, 174, 181, 182, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 213, 214, 216, 218, 219, 222, 224, 225, 226, 232, 237, 239, 241, 251, 254, 256, 257, 258, 261, 283], "scopatz": 0, "2017": [0, 191], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 47, 49, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 84, 85, 87, 88, 90, 93, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 136, 138, 140, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 166, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 238, 244, 245, 251, 253, 254, 256, 257, 258, 261, 268, 272, 273, 276, 278, 279, 282, 283, 284], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 24, 25, 29, 31, 37, 39, 40, 41, 46, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 72, 76, 79, 80, 81, 83, 84, 86, 88, 90, 93, 94, 96, 97, 99, 100, 101, 105, 107, 111, 115, 116, 117, 120, 121, 123, 124, 128, 131, 138, 155, 156, 157, 165, 170, 171, 173, 175, 176, 180, 181, 182, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 209, 211, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 228, 238, 241, 244, 245, 251, 253, 254, 255, 256, 257, 258, 260, 263, 272, 273, 275, 276, 279, 283], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 24, 27, 28, 29, 32, 33, 34, 37, 49, 57, 58, 61, 63, 69, 85, 87, 88, 90, 93, 97, 98, 99, 100, 111, 121, 138, 181, 192, 193, 194, 196, 197, 203, 205, 206, 214, 218, 222, 225, 227, 237, 238, 239, 240, 241, 244, 245, 247, 251, 275, 276, 277, 278, 279, 281, 282, 283], "peerj": 0, "scienc": [0, 49, 82, 93, 137, 138, 193, 200, 216, 273], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 27, 29, 31, 32, 34, 35, 36, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 107, 108, 109, 110, 112, 113, 115, 118, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 142, 144, 148, 150, 151, 152, 156, 160, 165, 166, 168, 170, 171, 174, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 237, 238, 240, 241, 242, 244, 245, 247, 249, 251, 253, 254, 255, 256, 258, 260, 261, 268, 272, 273, 275, 277, 278, 279, 282, 283, 284], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 29, 31, 33, 34, 35, 37, 38, 39, 41, 45, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 73, 74, 75, 79, 82, 84, 85, 86, 87, 88, 90, 93, 97, 100, 105, 107, 109, 110, 140, 142, 143, 144, 146, 147, 148, 152, 153, 154, 157, 159, 160, 169, 171, 181, 183, 186, 188, 191, 200, 202, 205, 206, 209, 211, 213, 214, 215, 218, 219, 222, 225, 226, 238, 239, 240, 242, 244, 245, 247, 251, 253, 257, 259, 261, 279, 282], "doi": [0, 6, 37, 49, 93, 200, 215, 218, 226], "org": [0, 3, 6, 7, 12, 18, 20, 31, 33, 34, 35, 37, 38, 39, 45, 46, 48, 49, 56, 57, 58, 59, 60, 62, 63, 65, 67, 69, 73, 74, 75, 84, 85, 86, 87, 88, 90, 93, 97, 105, 107, 109, 110, 140, 142, 143, 144, 146, 147, 148, 152, 153, 154, 157, 159, 160, 169, 171, 181, 183, 186, 188, 200, 202, 206, 209, 213, 214, 215, 219, 222, 225, 226, 238, 239, 240, 242, 244, 251, 253, 257, 259, 261, 279, 282], "10": [0, 3, 6, 12, 20, 25, 27, 29, 31, 37, 39, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 73, 74, 82, 84, 85, 87, 88, 90, 93, 94, 97, 98, 99, 100, 103, 105, 107, 108, 113, 118, 121, 123, 138, 140, 144, 155, 165, 166, 177, 181, 182, 183, 185, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 209, 212, 213, 214, 215, 218, 219, 222, 225, 226, 227, 236, 237, 242, 244, 245, 247, 251, 254, 272, 279, 283], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 30, 31, 37, 38, 41, 42, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 80, 82, 84, 86, 87, 88, 90, 93, 97, 98, 99, 100, 101, 103, 107, 109, 111, 113, 115, 116, 121, 126, 128, 129, 130, 132, 134, 135, 136, 138, 140, 144, 150, 151, 152, 155, 157, 160, 165, 168, 170, 171, 176, 181, 185, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 231, 232, 238, 239, 241, 244, 247, 248, 251, 253, 254, 255, 256, 257, 258, 261, 273, 275, 282, 283, 284], "103": [0, 48], "bibtex": 0, "entri": [0, 10, 35, 40, 47, 49, 55, 58, 69, 82, 86, 88, 89, 90, 96, 116, 121, 123, 136, 143, 195, 199, 201, 202, 216, 226, 245], "latex": [0, 1, 3, 6, 11, 20, 27, 29, 65, 85, 180, 181, 186, 190, 192, 197, 206, 277, 278], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 38, 39, 40, 48, 49, 56, 57, 58, 59, 65, 69, 82, 86, 90, 93, 99, 100, 101, 105, 107, 111, 121, 131, 134, 136, 139, 159, 160, 169, 175, 176, 180, 181, 185, 189, 193, 196, 199, 201, 203, 204, 205, 206, 207, 215, 218, 224, 225, 226, 235, 238, 239, 241, 242, 245, 251, 255, 256, 261, 268, 272, 275, 276, 278, 279, 280], "articl": [0, 57, 58, 90, 93, 198, 200, 201, 206, 251, 269, 277], "titl": [0, 6, 7, 192], "author": [0, 6, 97, 157, 201], "aaron": 0, "christoph": [0, 251], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 31, 33, 34, 35, 39, 40, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 79, 80, 82, 84, 88, 90, 93, 97, 99, 100, 101, 103, 107, 108, 112, 115, 116, 117, 118, 120, 121, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 150, 169, 171, 176, 182, 185, 187, 189, 191, 192, 194, 195, 196, 199, 200, 202, 203, 206, 208, 209, 213, 214, 216, 218, 219, 222, 224, 225, 226, 227, 231, 232, 244, 251, 254, 255, 256, 257, 258, 260, 279, 283], "mateusz": 0, "v": [0, 1, 5, 14, 24, 27, 31, 39, 47, 53, 56, 57, 58, 59, 60, 61, 65, 71, 82, 86, 88, 93, 97, 101, 112, 113, 115, 118, 123, 135, 136, 138, 139, 143, 144, 156, 171, 176, 181, 183, 185, 187, 189, 190, 192, 199, 200, 201, 202, 206, 216, 218, 219, 222, 224, 226, 237, 244, 251, 254, 255, 256, 257, 258, 260], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 31, 37, 38, 39, 40, 41, 43, 47, 48, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 75, 82, 84, 87, 88, 90, 93, 97, 115, 116, 126, 133, 135, 136, 138, 145, 159, 160, 163, 167, 169, 171, 180, 187, 191, 193, 195, 196, 199, 200, 201, 202, 203, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 222, 224, 226, 227, 228, 230, 231, 232, 233, 237, 241, 244, 251, 253, 254, 255, 256, 257, 258, 260, 261, 282, 283], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 31, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 80, 82, 84, 86, 87, 88, 89, 90, 93, 97, 99, 100, 101, 103, 105, 107, 112, 113, 115, 116, 117, 118, 121, 125, 126, 135, 136, 138, 140, 143, 148, 150, 152, 154, 159, 160, 163, 168, 169, 170, 171, 181, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 237, 240, 241, 244, 247, 251, 253, 254, 255, 256, 257, 273, 275, 279, 283, 284], "matthew": 0, "amit": [0, 225], "sergiu": 0, "jason": [0, 206], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 157], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 25, 27, 30, 31, 35, 37, 38, 39, 40, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 79, 80, 82, 84, 86, 87, 88, 93, 97, 99, 100, 101, 103, 107, 108, 112, 115, 116, 118, 120, 121, 134, 135, 138, 139, 140, 143, 150, 151, 155, 160, 161, 163, 166, 168, 170, 171, 176, 177, 181, 186, 187, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 251, 255, 258, 260, 261, 272, 273, 277, 278, 283], "richard": [0, 97], "francesco": 0, "harsh": [0, 225], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 31, 35, 37, 39, 40, 43, 47, 48, 49, 53, 55, 56, 58, 59, 61, 62, 65, 79, 82, 84, 86, 88, 90, 93, 97, 105, 108, 115, 136, 137, 138, 143, 150, 151, 168, 171, 176, 180, 187, 191, 193, 195, 197, 199, 200, 201, 202, 203, 205, 206, 208, 214, 216, 218, 219, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 238, 244, 251, 253, 254, 255, 256, 257, 258, 260, 261], "andi": [0, 137], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 24, 30, 35, 37, 39, 40, 41, 43, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 79, 80, 82, 84, 86, 87, 88, 90, 93, 94, 97, 99, 100, 101, 103, 107, 109, 110, 112, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 142, 144, 145, 147, 151, 156, 157, 160, 165, 167, 168, 169, 171, 172, 174, 176, 178, 180, 181, 183, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 229, 231, 232, 235, 238, 244, 246, 247, 251, 253, 254, 255, 256, 260, 266, 273, 279, 282, 283, 284], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 226], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 58], "keyword": [0, 4, 6, 11, 14, 20, 38, 39, 40, 48, 49, 57, 58, 61, 62, 70, 72, 73, 74, 88, 93, 97, 100, 105, 107, 116, 133, 134, 165, 171, 186, 192, 194, 196, 197, 199, 201, 202, 205, 206, 207, 213, 218, 219, 224, 231, 237, 238, 240, 242, 245, 247, 256, 279], "algebra": [0, 7, 11, 12, 14, 18, 22, 25, 27, 35, 40, 48, 57, 58, 61, 63, 75, 78, 79, 80, 82, 84, 87, 88, 92, 94, 97, 98, 99, 120, 131, 138, 139, 191, 194, 195, 197, 198, 199, 200, 202, 203, 206, 208, 216, 219, 221, 222, 225, 262, 263, 266, 268, 269, 274, 275, 277, 279], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 32, 34, 48, 57, 58, 59, 63, 82, 85, 86, 87, 88, 93, 98, 99, 100, 103, 104, 106, 107, 111, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 138, 149, 150, 165, 168, 169, 171, 174, 178, 181, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 214, 215, 221, 225, 226, 237, 238, 251, 253, 254, 257, 259, 261, 266, 268, 275, 277, 279, 283, 284], "abstract": [0, 10, 37, 38, 46, 57, 59, 63, 65, 70, 75, 90, 115, 121, 155, 157, 166, 169, 170, 171, 193, 201, 225, 226, 228, 232, 239, 260], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 111, 112, 115, 116, 118, 120, 123, 125, 131, 133, 135, 136, 138, 139, 142, 143, 144, 148, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 164, 165, 166, 168, 169, 171, 172, 173, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 251, 253, 255, 256, 258, 259, 260, 261, 272, 273, 274, 275, 276, 277, 279, 282, 283, 284], "open": [0, 1, 3, 4, 6, 7, 9, 10, 23, 24, 25, 26, 29, 37, 57, 59, 63, 84, 87, 107, 121, 124, 138, 206, 214, 221, 225, 226, 248, 277, 279], "sourc": [0, 1, 5, 6, 7, 11, 20, 25, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 103, 105, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 120, 121, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 182, 183, 185, 186, 187, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 258, 270, 277], "written": [0, 3, 6, 7, 11, 18, 20, 35, 39, 45, 48, 49, 53, 57, 62, 65, 69, 75, 80, 82, 86, 87, 96, 97, 125, 131, 138, 171, 187, 188, 189, 190, 193, 194, 202, 206, 209, 213, 216, 219, 222, 239, 258, 260, 276, 277, 278, 283], "pure": [0, 3, 11, 24, 25, 31, 58, 63, 84, 87, 90, 107, 135, 176, 196, 197, 199, 202, 206, 226, 244], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 29, 31, 32, 33, 34, 37, 38, 39, 45, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 69, 70, 73, 74, 80, 82, 84, 86, 87, 93, 97, 98, 99, 100, 101, 103, 105, 107, 109, 111, 112, 113, 115, 116, 121, 123, 129, 131, 132, 133, 134, 136, 138, 140, 144, 145, 155, 160, 161, 166, 167, 168, 169, 170, 171, 173, 176, 179, 181, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 209, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 237, 238, 239, 240, 241, 242, 245, 251, 254, 255, 256, 258, 260, 261, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283], "built": [0, 1, 3, 6, 7, 11, 12, 15, 32, 34, 40, 57, 63, 84, 93, 121, 138, 194, 197, 206, 207, 211, 222, 225, 226, 232, 241, 244, 245, 277, 278, 282], "focu": [0, 10, 18, 67, 224, 277], "extens": [0, 3, 6, 7, 18, 20, 48, 57, 62, 63, 69, 73, 84, 93, 118, 138, 194, 196, 197, 199, 200, 201, 202, 206, 216, 218, 222, 224, 225, 238, 239, 248, 276, 283], "eas": [0, 121, 190, 192, 206, 209], "through": [0, 1, 4, 6, 11, 12, 18, 20, 24, 27, 29, 37, 39, 48, 49, 51, 56, 57, 58, 61, 62, 65, 67, 68, 69, 70, 71, 73, 82, 86, 87, 93, 97, 100, 101, 105, 112, 116, 121, 123, 131, 136, 142, 143, 181, 192, 193, 199, 201, 206, 212, 216, 218, 222, 224, 225, 226, 227, 238, 244, 251, 253, 258, 261, 274, 275, 276, 281], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 24, 30, 31, 37, 38, 39, 49, 52, 53, 55, 56, 57, 58, 62, 63, 65, 72, 81, 82, 84, 87, 88, 93, 97, 99, 100, 101, 107, 112, 115, 116, 123, 125, 126, 132, 135, 143, 144, 155, 161, 168, 171, 176, 181, 185, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 204, 205, 206, 208, 213, 214, 215, 216, 218, 219, 222, 224, 225, 227, 231, 237, 239, 244, 245, 251, 253, 273, 276, 277, 278, 283, 284], "interact": [0, 11, 14, 24, 30, 57, 71, 84, 91, 93, 138, 168, 186, 190, 196, 197, 218, 226, 242, 249, 262, 270, 275, 277, 278, 282, 283], "programmat": [0, 11, 14, 15, 26, 27, 225, 256], "applic": [0, 7, 10, 24, 40, 41, 47, 48, 49, 50, 57, 58, 63, 84, 88, 93, 97, 100, 103, 115, 116, 120, 121, 131, 135, 137, 138, 155, 156, 181, 185, 189, 194, 199, 200, 201, 202, 206, 208, 213, 219, 222, 225, 239, 244, 251, 258, 259, 266, 277], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 27, 28, 30, 38, 39, 48, 56, 57, 58, 59, 65, 82, 84, 87, 93, 99, 101, 107, 115, 116, 117, 123, 125, 129, 135, 138, 161, 166, 167, 181, 182, 187, 189, 190, 193, 194, 195, 196, 197, 199, 202, 206, 216, 219, 222, 223, 225, 226, 228, 233, 237, 238, 239, 244, 258, 273, 276, 279, 282, 283], "characterist": [0, 59, 75, 93, 189, 195, 197, 199, 200, 222, 224, 279], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 23, 25, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 41, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 72, 73, 75, 80, 81, 82, 84, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 100, 101, 105, 107, 108, 110, 111, 115, 116, 118, 121, 122, 123, 129, 131, 135, 138, 155, 157, 160, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 179, 180, 181, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 209, 211, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 227, 230, 232, 233, 235, 236, 237, 239, 240, 241, 244, 245, 247, 251, 253, 255, 256, 257, 258, 261, 272, 273, 275, 276, 277, 278, 279, 282, 283, 284], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 48, 53, 56, 57, 58, 61, 80, 85, 93, 99, 186, 189, 193, 194, 196, 203, 206, 209, 215, 222, 225, 226, 232, 247, 254, 256, 283], "popular": [0, 3, 58, 98, 138, 277], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 25, 28, 29, 39, 57, 58, 62, 82, 84, 85, 93, 98, 111, 121, 138, 192, 196, 197, 226, 237, 238, 239, 244, 245, 272, 275, 276, 277], "scientif": [0, 11, 29, 57, 138], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 148, 150, 151, 152, 154, 155, 157, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284], "paper": [0, 6, 97, 123, 190, 201, 202, 215, 216, 219, 222, 226], "present": [0, 3, 7, 10, 11, 12, 16, 37, 38, 41, 44, 48, 49, 51, 55, 57, 60, 84, 93, 97, 100, 103, 105, 107, 116, 123, 171, 173, 181, 183, 186, 187, 192, 193, 199, 200, 201, 205, 206, 219, 225, 239, 245, 248, 254, 255, 256, 260, 263, 284], "architectur": [0, 138, 196, 237], "descript": [0, 4, 6, 7, 10, 22, 28, 38, 40, 47, 65, 84, 97, 143, 161, 168, 179, 189, 190, 191, 206, 230, 237, 239, 241, 242, 262, 280], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 27, 31, 33, 34, 35, 38, 39, 40, 41, 45, 47, 48, 49, 56, 57, 58, 59, 62, 63, 65, 67, 69, 73, 75, 82, 84, 85, 87, 88, 90, 93, 97, 99, 100, 101, 103, 107, 111, 112, 115, 116, 118, 121, 123, 124, 125, 131, 132, 135, 136, 138, 139, 144, 150, 156, 157, 159, 160, 165, 166, 169, 171, 176, 178, 181, 182, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 218, 221, 222, 224, 225, 226, 230, 231, 232, 237, 240, 241, 244, 245, 248, 251, 254, 255, 256, 258, 261, 277, 278, 279, 282, 283], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 28, 29, 57, 59, 61, 88, 99, 121, 131, 138, 188, 206, 222, 226, 235, 239, 242, 259, 268, 271, 276, 277, 281, 283], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 28, 40, 48, 58, 65, 97, 111, 116, 121, 131, 135, 136, 180, 188, 189, 190, 196, 232, 241, 262, 272, 274, 275, 277, 278, 280, 282, 283], "select": [0, 1, 13, 14, 28, 39, 41, 48, 49, 56, 57, 58, 66, 71, 85, 87, 88, 97, 99, 113, 136, 176, 186, 196, 197, 199, 200, 202, 206, 215, 218, 224], "submodul": [0, 3, 4, 6, 11, 39, 111, 193, 197, 199, 201], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 142, 143, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 259, 260, 261, 268, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284], "supplementari": 0, "materi": [0, 100, 142, 281], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 28, 31, 37, 38, 39, 40, 46, 47, 48, 49, 55, 56, 57, 59, 61, 65, 66, 68, 73, 76, 79, 80, 84, 85, 87, 88, 90, 93, 94, 96, 97, 98, 99, 101, 103, 105, 111, 112, 115, 116, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 136, 138, 139, 144, 145, 165, 173, 174, 175, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 209, 211, 214, 215, 216, 218, 222, 223, 224, 225, 226, 227, 231, 232, 237, 238, 239, 241, 242, 244, 245, 247, 251, 254, 255, 256, 258, 259, 261, 273, 277, 278, 279, 283], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 29, 39, 47, 48, 49, 56, 57, 63, 65, 69, 75, 77, 81, 82, 84, 85, 87, 90, 93, 99, 104, 105, 107, 111, 112, 116, 135, 136, 139, 157, 169, 170, 173, 186, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 206, 212, 215, 216, 218, 219, 222, 223, 224, 225, 226, 237, 238, 239, 241, 242, 244, 245, 247, 255, 275, 277, 278, 279, 282, 283], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 24, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 103, 105, 107, 109, 110, 112, 113, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 207, 208, 209, 211, 212, 214, 215, 218, 219, 221, 222, 223, 224, 225, 230, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 258, 259, 260, 261, 266, 268, 269, 272, 273, 274, 275, 276, 278, 279, 281, 282, 284], "further": [0, 3, 5, 18, 20, 34, 38, 58, 63, 65, 69, 82, 84, 89, 90, 93, 99, 100, 104, 105, 112, 115, 116, 136, 143, 189, 191, 192, 193, 199, 201, 202, 215, 216, 218, 222, 226, 232, 276, 277], "outlin": [0, 3, 4, 18, 20, 55, 84, 193, 222], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 28, 38, 48, 57, 59, 62, 64, 65, 82, 83, 84, 85, 88, 93, 97, 105, 115, 116, 121, 136, 138, 143, 161, 165, 181, 183, 191, 192, 193, 199, 201, 208, 213, 218, 219, 220, 222, 223, 226, 231, 232, 237, 240, 242, 245, 256, 257, 258, 259, 262, 266, 273, 275, 279, 280, 282], "volum": [0, 6, 39, 56, 65, 82, 191, 200, 216, 219, 222, 241, 251], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 24, 25, 26, 28, 39, 40, 56, 62, 82, 97, 98, 115, 116, 138, 176, 192, 195, 196, 197, 200, 206, 216, 219, 242, 260, 283], "journal": [0, 6, 56, 62, 97, 108, 200, 218, 241], "issn": 0, "2376": 0, "5992": 0, "url": [0, 58, 242], "bsd": [0, 1, 3, 277], "licens": [0, 1, 3, 277], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 46, 48, 49, 51, 53, 55, 57, 58, 61, 63, 65, 67, 69, 70, 71, 73, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 93, 94, 97, 99, 100, 101, 107, 111, 115, 116, 121, 123, 125, 131, 132, 133, 135, 138, 139, 144, 155, 157, 165, 167, 168, 169, 171, 173, 175, 176, 180, 181, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 230, 231, 235, 237, 238, 241, 242, 244, 245, 247, 257, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 37, 39, 40, 48, 49, 56, 57, 58, 59, 61, 63, 64, 65, 69, 71, 73, 75, 76, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 97, 98, 99, 107, 109, 110, 111, 115, 116, 117, 118, 121, 122, 132, 133, 135, 136, 138, 160, 165, 166, 169, 171, 180, 181, 183, 187, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 207, 209, 213, 214, 218, 219, 222, 223, 224, 225, 226, 230, 231, 232, 235, 237, 238, 239, 240, 242, 244, 245, 248, 255, 256, 257, 258, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284], "free": [0, 10, 11, 25, 29, 37, 38, 39, 47, 48, 53, 57, 69, 84, 88, 90, 93, 97, 100, 101, 105, 108, 115, 131, 140, 160, 178, 181, 188, 192, 193, 197, 199, 201, 202, 206, 208, 214, 216, 218, 219, 222, 224, 225, 232, 244, 277], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 32, 34, 39, 48, 49, 53, 56, 57, 58, 59, 62, 63, 65, 67, 82, 84, 87, 88, 93, 97, 98, 99, 100, 103, 115, 121, 135, 139, 171, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 213, 214, 215, 216, 218, 222, 223, 224, 225, 237, 238, 245, 255, 256, 260, 272, 275, 277, 279, 283, 284], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 26, 27, 28, 29, 39, 40, 42, 48, 49, 56, 57, 58, 61, 62, 63, 65, 67, 77, 80, 84, 85, 87, 88, 90, 91, 92, 93, 97, 98, 99, 103, 107, 111, 115, 118, 121, 123, 132, 135, 136, 138, 139, 153, 155, 165, 166, 169, 170, 171, 176, 180, 181, 185, 187, 189, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 209, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 232, 233, 235, 237, 238, 239, 240, 244, 245, 247, 248, 255, 256, 258, 260, 272, 273, 275, 276, 277, 278, 279, 283], "academ": [0, 38, 41, 200], "commerci": [0, 277], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 23, 24, 26, 27, 33, 38, 39, 40, 46, 48, 49, 57, 58, 59, 61, 63, 64, 65, 67, 69, 70, 72, 73, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 107, 112, 115, 116, 118, 121, 124, 125, 126, 128, 130, 132, 134, 135, 136, 138, 139, 148, 150, 152, 156, 159, 160, 161, 165, 166, 168, 169, 171, 174, 177, 180, 181, 183, 185, 189, 190, 192, 193, 195, 196, 197, 199, 201, 202, 203, 206, 213, 218, 222, 225, 226, 227, 231, 232, 237, 238, 239, 241, 242, 244, 245, 251, 256, 258, 273, 275, 278, 279, 282, 283, 284], "fork": [0, 5, 7, 10, 123], "deriv": [0, 6, 10, 11, 17, 20, 24, 37, 38, 39, 41, 47, 48, 57, 59, 63, 64, 65, 67, 74, 79, 80, 82, 84, 85, 87, 90, 93, 103, 107, 111, 113, 115, 116, 120, 123, 125, 126, 128, 131, 133, 134, 135, 136, 160, 169, 173, 176, 177, 180, 181, 183, 185, 186, 187, 189, 192, 193, 194, 197, 199, 201, 202, 203, 206, 208, 216, 218, 222, 223, 224, 228, 233, 239, 251, 254, 255, 274, 277, 284], "long": [0, 6, 7, 8, 27, 39, 49, 56, 57, 58, 60, 70, 82, 84, 85, 87, 93, 97, 100, 101, 123, 186, 202, 203, 206, 215, 216, 224, 226, 238, 247, 254, 275, 278], "copi": [0, 1, 5, 10, 12, 18, 40, 49, 50, 57, 73, 93, 97, 98, 195, 197, 199, 201, 205, 206, 213, 224, 237, 244, 247, 282], "statement": [0, 6, 18, 19, 20, 29, 38, 39, 57, 65, 82, 87, 90, 121, 150, 206, 226, 235, 239, 244], "redistribut": [0, 202], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 28, 32, 33, 34, 35, 37, 38, 39, 43, 45, 48, 49, 50, 53, 56, 58, 59, 62, 63, 64, 65, 69, 73, 74, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 93, 94, 97, 98, 99, 105, 111, 115, 116, 127, 129, 133, 135, 136, 140, 143, 146, 147, 156, 160, 161, 165, 166, 167, 168, 170, 171, 174, 176, 181, 186, 189, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 208, 209, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 231, 232, 235, 237, 238, 239, 240, 241, 242, 245, 246, 251, 253, 261, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 39, 93, 121, 138, 160, 206, 213, 216, 218, 235, 237, 238, 239, 245, 248], "That": [0, 4, 7, 11, 12, 18, 19, 20, 57, 58, 63, 87, 93, 131, 168, 173, 179, 189, 190, 193, 194, 196, 197, 199, 201, 212, 213, 222, 226, 238, 239, 245, 272, 275, 278, 283], "said": [0, 4, 11, 31, 35, 39, 43, 97, 176, 187, 189, 190, 194, 222, 225, 226, 251, 258], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 49, 57, 58, 63, 69, 81, 82, 85, 87, 88, 90, 93, 97, 100, 111, 123, 138, 193, 196, 197, 199, 201, 202, 214, 215, 218, 219, 224, 238, 244, 245, 275, 278, 283], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 27, 29, 39, 48, 57, 58, 60, 61, 65, 67, 68, 70, 71, 74, 76, 87, 93, 96, 97, 98, 99, 100, 105, 111, 112, 115, 116, 118, 120, 121, 123, 125, 132, 136, 145, 168, 180, 181, 183, 191, 192, 193, 196, 197, 199, 201, 203, 206, 209, 215, 216, 219, 222, 224, 225, 226, 230, 237, 238, 239, 240, 242, 244, 245, 254, 255, 256, 279, 281], "conveni": [0, 1, 10, 11, 12, 23, 24, 27, 30, 37, 39, 49, 57, 58, 62, 65, 84, 87, 99, 121, 138, 180, 183, 189, 190, 192, 193, 194, 195, 196, 197, 201, 204, 213, 214, 218, 224, 230, 231, 238, 240, 241, 245, 258, 273, 275], "pleas": [0, 4, 6, 7, 9, 10, 23, 24, 25, 26, 29, 35, 37, 57, 65, 69, 82, 97, 111, 116, 121, 131, 135, 136, 143, 144, 165, 180, 190, 191, 192, 193, 199, 200, 214, 218, 219, 224, 225, 245, 251, 256, 280, 284], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 24, 25, 26, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 48, 49, 50, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 81, 84, 85, 87, 88, 89, 93, 97, 98, 99, 103, 105, 107, 108, 111, 115, 121, 123, 129, 131, 132, 133, 134, 135, 136, 139, 144, 145, 150, 155, 156, 160, 163, 165, 173, 174, 175, 180, 186, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 230, 231, 235, 237, 238, 239, 240, 242, 244, 245, 247, 248, 250, 255, 273, 275, 277, 278, 283, 284], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 23, 26, 27, 29, 33, 57, 58, 84, 85, 93, 98, 99, 107, 111, 115, 133, 135, 190, 192, 206, 213, 218, 222, 225, 226, 244, 245, 273, 277, 279, 280, 282, 283], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 25, 29, 32, 34, 37, 38, 39, 48, 49, 50, 57, 58, 61, 65, 82, 84, 86, 87, 88, 90, 93, 94, 97, 99, 111, 115, 121, 123, 132, 136, 138, 151, 155, 160, 164, 165, 166, 167, 170, 173, 183, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 206, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 232, 237, 238, 239, 241, 244, 245, 246, 247, 255, 256, 275, 276, 277, 278, 279, 282, 283], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 46, 48, 49, 56, 58, 59, 61, 62, 63, 64, 65, 69, 73, 75, 77, 79, 80, 82, 84, 86, 87, 88, 91, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 107, 111, 112, 113, 115, 116, 120, 121, 123, 124, 125, 126, 129, 132, 133, 134, 135, 136, 138, 139, 140, 144, 154, 155, 157, 161, 165, 170, 171, 174, 176, 180, 181, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 245, 247, 251, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 24, 27, 35, 38, 39, 46, 49, 52, 56, 57, 58, 60, 61, 62, 63, 65, 67, 69, 73, 81, 82, 84, 85, 86, 87, 88, 90, 93, 97, 107, 111, 112, 118, 122, 133, 139, 161, 168, 171, 176, 182, 186, 187, 189, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 209, 213, 218, 219, 222, 223, 224, 225, 226, 237, 239, 244, 254, 256, 258, 260, 261, 275, 279, 283], "contribut": [0, 3, 4, 5, 6, 7, 29, 73, 97, 116, 126, 129, 196, 199, 201, 222, 261, 280], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 82, 84, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 112, 113, 115, 116, 118, 120, 121, 123, 124, 126, 131, 133, 135, 138, 139, 145, 150, 151, 155, 165, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 235, 237, 238, 239, 240, 242, 244, 245, 247, 251, 253, 255, 257, 258, 259, 260, 262, 272, 273, 275, 277, 278, 279, 282, 283, 284], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 29, 38, 39, 40, 48, 49, 53, 56, 57, 58, 61, 62, 63, 65, 71, 72, 82, 84, 87, 93, 97, 99, 100, 103, 107, 115, 118, 121, 123, 128, 145, 156, 166, 176, 177, 180, 187, 189, 190, 191, 192, 193, 194, 195, 199, 202, 203, 206, 213, 214, 215, 216, 218, 222, 224, 225, 226, 227, 237, 244, 245, 256, 258, 272, 275, 278, 282], "back": [0, 20, 24, 25, 38, 39, 53, 56, 57, 58, 63, 65, 72, 73, 79, 81, 82, 84, 85, 88, 97, 98, 107, 165, 186, 189, 196, 201, 202, 204, 206, 216, 222, 224, 227, 228], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 23, 26, 27, 32, 33, 34, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 70, 75, 80, 81, 82, 84, 85, 86, 87, 88, 93, 94, 96, 97, 107, 110, 111, 112, 113, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 143, 146, 154, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 176, 180, 181, 183, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 213, 214, 216, 218, 219, 221, 222, 223, 224, 226, 230, 232, 237, 238, 239, 241, 242, 244, 245, 251, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 138, 139, 143, 144, 145, 150, 152, 155, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 241, 242, 244, 245, 247, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284], "incorpor": [0, 3, 16, 194, 218], "u": [0, 12, 16, 18, 19, 20, 24, 31, 37, 38, 39, 48, 53, 56, 57, 58, 60, 71, 74, 79, 82, 84, 90, 93, 97, 112, 115, 116, 117, 120, 121, 123, 125, 128, 131, 132, 133, 135, 136, 138, 139, 143, 144, 155, 160, 166, 176, 185, 187, 189, 191, 192, 193, 194, 195, 199, 201, 202, 205, 206, 213, 216, 218, 219, 222, 223, 224, 225, 226, 231, 245, 258, 275, 277, 278, 279], "benefit": [0, 3, 20, 23, 39, 111, 135, 186], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 22, 37, 38, 39, 47, 48, 53, 55, 56, 57, 58, 62, 63, 65, 67, 69, 73, 82, 85, 87, 88, 90, 93, 97, 99, 100, 101, 103, 120, 123, 125, 128, 133, 134, 135, 136, 176, 181, 186, 187, 190, 191, 195, 199, 206, 209, 212, 214, 215, 219, 222, 223, 224, 225, 226, 227, 237, 239, 240, 242, 244, 247, 258, 273, 277, 279, 283], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 28, 29, 37, 40, 55, 99, 138, 175, 192, 193, 196, 199, 224, 225, 277, 280], "team": [0, 4], "member": [0, 6, 10, 18, 38, 46, 48, 58, 80, 103, 193, 214, 231], "list": [0, 3, 4, 6, 7, 13, 18, 24, 25, 26, 27, 29, 31, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 82, 84, 85, 86, 87, 88, 90, 93, 96, 97, 98, 99, 100, 107, 112, 115, 116, 120, 123, 125, 128, 132, 133, 134, 138, 139, 144, 155, 157, 160, 161, 165, 166, 168, 169, 171, 173, 181, 185, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 272, 276, 277, 279, 282, 283, 284], "github": [0, 1, 3, 4, 5, 7, 10, 23, 24, 25, 26, 29, 37, 57, 73, 84, 93, 175, 214, 225, 279], "found": [0, 1, 3, 4, 6, 7, 18, 19, 24, 37, 40, 48, 49, 51, 53, 55, 57, 58, 59, 67, 68, 73, 82, 84, 93, 97, 107, 113, 115, 116, 117, 135, 138, 175, 189, 193, 194, 196, 201, 202, 203, 206, 208, 209, 212, 213, 216, 219, 222, 223, 224, 225, 226, 230, 244, 245, 247, 248, 282], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 25, 28, 29, 38, 39, 41, 46, 47, 48, 49, 53, 56, 57, 58, 59, 65, 87, 88, 90, 93, 96, 97, 98, 100, 101, 103, 121, 123, 133, 134, 166, 167, 170, 174, 189, 190, 192, 196, 199, 201, 202, 206, 209, 212, 214, 215, 216, 219, 222, 224, 225, 226, 227, 230, 237, 238, 244, 246, 247, 257, 271, 272, 275, 277], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 24, 25, 26, 31, 35, 37, 38, 41, 49, 56, 57, 58, 61, 62, 63, 65, 72, 74, 80, 82, 84, 85, 87, 88, 93, 97, 107, 112, 115, 116, 117, 120, 121, 134, 136, 138, 155, 161, 168, 171, 173, 186, 190, 192, 194, 195, 196, 197, 199, 201, 202, 206, 208, 213, 214, 215, 216, 219, 222, 223, 224, 225, 226, 227, 230, 231, 238, 244, 245, 251, 260, 275, 278, 279], "machin": [1, 3, 5, 6, 207, 218, 222, 272], "imag": [1, 3, 48, 115, 127, 132, 138, 140, 144, 193, 197, 199, 206, 214, 225], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 23, 24, 26, 27, 30, 32, 33, 37, 38, 39, 40, 48, 49, 53, 55, 56, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 83, 84, 86, 87, 88, 90, 93, 96, 97, 98, 99, 100, 102, 105, 106, 108, 112, 116, 117, 118, 120, 123, 125, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 158, 161, 163, 166, 168, 171, 180, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 206, 207, 208, 213, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 254, 262, 273, 275, 279, 283], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 24, 27, 30, 33, 35, 38, 39, 46, 48, 49, 56, 57, 58, 59, 61, 62, 65, 68, 73, 75, 77, 79, 80, 82, 86, 87, 90, 93, 96, 97, 98, 111, 116, 118, 121, 123, 125, 126, 131, 133, 135, 136, 138, 144, 148, 164, 165, 171, 173, 176, 179, 181, 187, 189, 190, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 213, 214, 215, 216, 218, 219, 222, 224, 225, 227, 228, 237, 239, 241, 244, 254, 272, 273, 275, 277, 278, 283], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 82, 84, 85, 86, 87, 88, 90, 93, 94, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 133, 134, 135, 136, 138, 139, 144, 148, 152, 155, 161, 165, 166, 167, 168, 169, 171, 179, 180, 181, 182, 183, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 251, 254, 256, 258, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 24, 26, 27, 30, 32, 34, 38, 39, 48, 50, 53, 57, 59, 60, 61, 62, 65, 84, 85, 87, 88, 90, 91, 93, 97, 105, 108, 110, 120, 121, 123, 125, 135, 138, 169, 173, 175, 181, 186, 187, 189, 190, 193, 196, 197, 199, 201, 202, 204, 206, 208, 216, 218, 222, 224, 225, 226, 230, 231, 232, 235, 240, 241, 242, 244, 245, 249, 258, 261, 272, 273, 275, 277, 278, 279, 283, 284], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 32, 34, 37, 38, 39, 40, 46, 47, 48, 49, 50, 53, 56, 57, 58, 61, 62, 63, 65, 69, 71, 73, 80, 81, 82, 84, 87, 88, 90, 93, 97, 98, 100, 101, 103, 115, 116, 121, 123, 131, 132, 133, 134, 135, 136, 138, 140, 144, 163, 166, 168, 171, 174, 176, 181, 187, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 237, 240, 241, 244, 245, 248, 255, 256, 258, 272, 273, 275, 276, 278, 279, 283, 284], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 28, 48, 49, 57, 58, 59, 65, 69, 84, 86, 88, 93, 112, 115, 116, 120, 121, 131, 138, 140, 176, 190, 192, 193, 197, 199, 201, 202, 205, 206, 207, 212, 218, 219, 222, 223, 224, 226, 232, 237, 238, 239, 244, 279, 283], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 28, 39, 206, 224, 238, 239], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 24, 26, 27, 29, 37, 38, 39, 47, 48, 49, 57, 58, 62, 64, 65, 66, 67, 73, 74, 80, 82, 84, 88, 93, 96, 97, 99, 100, 101, 107, 112, 115, 116, 120, 121, 123, 125, 126, 127, 132, 133, 134, 135, 138, 165, 171, 176, 181, 190, 191, 192, 193, 195, 202, 206, 207, 209, 215, 218, 219, 222, 223, 224, 225, 226, 237, 239, 244, 245, 247, 256, 258, 261, 262, 279, 283], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 35, 37, 38, 39, 40, 48, 49, 50, 56, 57, 58, 59, 61, 62, 63, 65, 67, 69, 70, 72, 73, 74, 82, 84, 85, 87, 88, 89, 93, 94, 96, 97, 99, 103, 113, 116, 117, 121, 125, 131, 135, 157, 166, 171, 172, 173, 178, 181, 185, 187, 189, 192, 193, 194, 195, 199, 201, 205, 206, 207, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 258, 260, 272, 273, 275, 278, 279, 283, 284], "choos": [1, 6, 24, 48, 53, 57, 59, 62, 93, 97, 101, 105, 125, 136, 171, 175, 181, 189, 190, 202, 203, 206, 213, 215, 216, 222, 223, 226, 237, 242, 283], "cd": [1, 5, 6, 225, 244], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 23, 32, 34, 37, 39, 48, 55, 56, 57, 58, 59, 60, 61, 63, 66, 67, 70, 71, 73, 74, 76, 84, 85, 88, 90, 93, 94, 97, 98, 99, 100, 105, 107, 111, 112, 113, 115, 116, 117, 120, 138, 144, 155, 160, 161, 163, 166, 168, 173, 180, 181, 186, 192, 193, 194, 195, 196, 197, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 231, 232, 237, 238, 239, 242, 244, 245, 251, 276, 282, 283], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 29, 38, 39, 49, 57, 58, 62, 65, 68, 73, 74, 79, 81, 82, 86, 93, 97, 107, 112, 115, 120, 121, 124, 126, 129, 131, 138, 139, 174, 176, 181, 186, 189, 190, 193, 194, 196, 199, 202, 203, 207, 214, 215, 216, 218, 219, 222, 224, 225, 226, 227, 232, 237, 238, 245, 256, 257, 275, 277, 278, 283, 284], "skip": [1, 3, 4, 6, 12, 38, 41, 57, 88, 93, 97, 181, 201, 205, 206, 208, 222, 224, 235, 237, 273, 281, 282], "down": [1, 4, 6, 18, 62, 90, 109, 123, 125, 189, 190, 192, 197, 208, 214, 216, 218, 222, 241, 279, 283], "section": [1, 4, 7, 8, 11, 18, 20, 21, 31, 38, 40, 48, 49, 56, 57, 58, 60, 64, 65, 67, 73, 82, 87, 88, 93, 100, 101, 115, 121, 136, 174, 176, 180, 187, 190, 193, 196, 199, 201, 206, 209, 213, 216, 222, 232, 241, 242, 244, 255, 256, 257, 258, 262, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 53, 56, 57, 58, 59, 60, 61, 62, 63, 65, 69, 71, 72, 75, 78, 80, 81, 82, 86, 87, 88, 93, 97, 98, 99, 100, 101, 107, 109, 113, 115, 116, 117, 121, 125, 131, 132, 133, 134, 135, 136, 138, 140, 154, 155, 160, 164, 166, 168, 169, 170, 171, 173, 176, 177, 181, 185, 186, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 225, 226, 227, 230, 231, 232, 233, 237, 238, 239, 241, 242, 244, 245, 248, 249, 251, 253, 256, 258, 260, 261, 272, 273, 275, 278, 279, 283, 284], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 41, 46, 47, 49, 50, 52, 53, 56, 57, 58, 59, 61, 62, 63, 65, 70, 80, 82, 84, 86, 90, 93, 97, 99, 100, 105, 107, 110, 116, 121, 124, 125, 133, 134, 135, 138, 143, 144, 151, 155, 160, 165, 166, 167, 168, 173, 176, 190, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 208, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 232, 233, 238, 244, 245, 246, 248, 251, 255, 272, 275, 277, 278, 279, 282, 283, 284], "python3": [1, 3, 39, 99, 206, 237], "sphinx": [1, 4, 7, 8, 63, 222, 237, 242], "texliv": [1, 3, 206], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 38, 39, 57, 58, 61, 88, 111, 133, 138, 165, 181, 189, 194, 195, 196, 197, 203, 219, 222, 225, 231, 235, 242, 255, 256, 281, 284], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 85, 206, 237, 244], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 278, 282], "pip": [1, 3, 29, 99], "sudo": 1, "virtual": [1, 4, 8, 29, 57, 73, 190, 276], "environ": [1, 3, 8, 9, 10, 11, 57, 85, 186, 206, 226, 237, 247, 275, 277, 282], "venv": 1, "path": [1, 5, 6, 10, 48, 73, 79, 107, 129, 187, 189, 215, 218, 222, 225, 237, 238, 241, 242, 244, 247, 248, 249, 258], "my": [1, 206, 272], "Then": [1, 5, 11, 16, 18, 48, 53, 56, 57, 82, 86, 93, 97, 113, 116, 118, 128, 130, 131, 136, 140, 168, 176, 189, 193, 194, 196, 199, 201, 203, 206, 213, 216, 218, 219, 222, 224, 245], "activ": [1, 4, 5, 13, 123, 192, 235, 240, 242], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 37, 38, 39, 42, 48, 49, 53, 55, 56, 57, 58, 59, 63, 65, 68, 72, 73, 80, 81, 82, 84, 85, 87, 88, 93, 97, 98, 99, 100, 101, 103, 107, 111, 116, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 151, 155, 163, 169, 174, 180, 181, 186, 189, 190, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 213, 214, 216, 218, 219, 221, 222, 224, 225, 226, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 244, 247, 251, 255, 257, 258, 261, 272, 273, 275, 278, 279, 281, 283], "rerun": [1, 202, 237], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 23, 24, 28, 34, 35, 37, 38, 39, 40, 41, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 65, 67, 72, 73, 74, 79, 80, 82, 84, 86, 87, 88, 90, 93, 97, 100, 103, 105, 107, 113, 115, 116, 121, 123, 125, 128, 130, 132, 133, 136, 155, 168, 171, 180, 181, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 204, 206, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 239, 241, 244, 245, 247, 251, 253, 254, 256, 258, 260, 273, 276, 278, 283, 284], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 27, 30, 34, 35, 39, 48, 49, 53, 57, 58, 62, 65, 80, 82, 87, 88, 93, 94, 96, 97, 98, 99, 104, 105, 107, 111, 116, 117, 120, 121, 123, 125, 128, 129, 131, 133, 134, 135, 136, 138, 139, 145, 155, 160, 168, 169, 173, 174, 176, 177, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 199, 200, 201, 202, 203, 205, 206, 213, 214, 215, 216, 218, 222, 224, 226, 235, 237, 238, 243, 244, 245, 258, 260, 270, 273, 277, 278, 279], "new": [1, 3, 4, 5, 7, 11, 18, 20, 28, 33, 34, 38, 39, 40, 48, 49, 56, 57, 58, 59, 65, 70, 73, 82, 84, 85, 88, 93, 97, 100, 103, 107, 112, 115, 121, 128, 130, 136, 137, 138, 140, 161, 167, 168, 171, 173, 176, 177, 179, 181, 185, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 206, 213, 216, 218, 219, 222, 224, 225, 226, 227, 237, 238, 242, 245, 251, 253, 255, 271, 272, 275, 278, 279, 281], "termin": [1, 48, 57, 63, 85, 97, 186, 206, 213, 237, 282], "after": [1, 4, 5, 6, 7, 10, 12, 29, 31, 33, 34, 38, 40, 45, 48, 49, 53, 55, 56, 57, 58, 59, 63, 72, 74, 79, 84, 88, 93, 97, 99, 100, 107, 132, 133, 135, 138, 140, 144, 156, 168, 176, 180, 187, 190, 195, 199, 201, 202, 203, 204, 206, 207, 212, 219, 222, 223, 224, 225, 227, 237, 240, 245, 247, 251, 254, 258, 272, 273, 275, 279, 283], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 26, 31, 37, 38, 39, 40, 42, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 82, 84, 86, 87, 88, 90, 93, 97, 98, 100, 101, 103, 104, 107, 108, 111, 112, 115, 116, 124, 129, 131, 132, 133, 135, 136, 143, 144, 145, 150, 151, 155, 157, 160, 161, 166, 167, 168, 169, 170, 171, 173, 176, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 231, 241, 244, 245, 251, 254, 256, 257, 258, 260, 272, 273, 276, 278, 279, 283], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 41, 48, 49, 50, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 71, 73, 76, 79, 81, 82, 84, 86, 88, 89, 90, 93, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 111, 114, 115, 120, 121, 124, 126, 127, 131, 132, 137, 138, 145, 148, 150, 152, 160, 161, 166, 168, 171, 173, 178, 179, 180, 181, 183, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 207, 208, 209, 211, 212, 213, 214, 218, 219, 222, 224, 226, 227, 229, 231, 232, 233, 237, 239, 241, 244, 245, 251, 255, 258, 261, 262, 266, 268, 272, 273, 274, 275, 278, 283], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 23, 31, 33, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 84, 86, 87, 88, 90, 93, 96, 97, 99, 100, 103, 105, 108, 112, 113, 115, 116, 118, 120, 121, 125, 136, 144, 161, 166, 168, 176, 177, 179, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 232, 235, 237, 239, 241, 244, 245, 247, 248, 249, 251, 254, 256, 258, 260, 272, 278, 281, 283, 284], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 23, 25, 27, 37, 38, 39, 40, 41, 47, 48, 49, 53, 56, 57, 61, 62, 65, 67, 70, 73, 74, 82, 84, 87, 88, 93, 97, 98, 99, 101, 107, 111, 115, 116, 118, 120, 121, 123, 124, 125, 126, 131, 132, 134, 135, 136, 139, 166, 168, 171, 181, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 213, 216, 218, 219, 222, 224, 225, 226, 230, 231, 238, 239, 245, 255, 256, 257, 258, 261, 275, 277, 278, 279, 283], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 40, 48, 49, 51, 57, 58, 82, 93, 98, 99, 116, 123, 138, 171, 186, 192, 193, 206, 216, 218, 222, 223, 224, 234, 238, 240, 241, 244, 245, 270, 275, 282], "txt": [1, 206], "mpmath": [1, 3, 5, 11, 20, 25, 39, 62, 65, 93, 98, 138, 196, 197, 206, 214, 224, 240, 245], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 23, 24, 25, 27, 30, 37, 39, 46, 49, 56, 57, 58, 63, 67, 72, 82, 84, 93, 96, 97, 99, 121, 190, 191, 194, 196, 197, 199, 203, 206, 208, 214, 222, 223, 224, 225, 226, 237, 238, 239, 242, 244, 247, 251, 272], "packag": [1, 3, 22, 25, 29, 85, 98, 99, 104, 131, 138, 186, 206, 237, 248, 257, 258, 277], "matplotlib": [1, 3, 6, 7, 10, 29, 80, 85, 105, 138, 151, 186, 192, 282], "mayb": [1, 19, 23], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 23, 24, 26, 27, 31, 35, 38, 39, 40, 48, 49, 50, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 82, 84, 87, 88, 90, 93, 97, 98, 99, 100, 101, 107, 111, 112, 115, 116, 121, 122, 125, 126, 131, 132, 135, 136, 138, 140, 143, 144, 145, 155, 166, 168, 169, 170, 171, 174, 176, 177, 178, 180, 181, 183, 185, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 232, 233, 235, 238, 239, 240, 241, 244, 245, 251, 254, 255, 258, 260, 262, 269, 272, 273, 275, 277, 278, 279, 283], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 29, 33, 34, 37, 39, 40, 46, 47, 48, 53, 54, 55, 57, 58, 60, 62, 63, 64, 65, 68, 70, 73, 80, 84, 85, 86, 87, 89, 90, 97, 98, 104, 112, 115, 121, 123, 138, 139, 140, 149, 151, 155, 156, 160, 166, 167, 169, 171, 173, 176, 177, 179, 181, 183, 186, 187, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 206, 208, 213, 214, 215, 216, 218, 219, 222, 224, 226, 230, 231, 232, 237, 238, 239, 240, 241, 242, 244, 245, 246, 251, 254, 255, 258, 278, 283], "distribut": [1, 3, 29, 48, 55, 57, 65, 73, 84, 100, 101, 170, 194, 197, 202, 206, 232], "prerequisit": 1, "dnf": [1, 87], "scheme": [1, 4, 18, 49, 56, 61, 191, 192, 199, 202, 231], "medium": [1, 20, 140, 141, 144, 145, 155, 199, 268], "tool": [1, 7, 11, 20, 48, 85, 92, 93, 98, 107, 138, 190, 193, 198, 199, 206, 238, 244, 250, 259, 266], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 24, 26, 29, 38, 39, 40, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 70, 71, 73, 74, 81, 82, 84, 86, 87, 88, 93, 96, 97, 100, 101, 107, 108, 113, 115, 116, 120, 121, 123, 124, 125, 126, 131, 132, 135, 136, 139, 143, 144, 148, 152, 155, 160, 161, 164, 165, 166, 167, 168, 170, 171, 174, 176, 181, 185, 189, 190, 192, 193, 195, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209, 212, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 239, 240, 244, 245, 247, 256, 261, 272, 273, 275, 277, 278, 279, 281, 283, 284], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 29, 99], "Or": [1, 7, 10, 12, 19, 23, 24, 48, 57, 58, 59, 65, 82, 87, 97, 118, 193, 203, 205, 206, 218, 225, 226, 237, 245, 258, 278, 281], "forg": [1, 3, 99], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 25, 26, 30, 33, 34, 35, 37, 39, 40, 47, 48, 56, 57, 58, 59, 60, 61, 62, 63, 65, 69, 73, 84, 85, 87, 93, 96, 97, 98, 99, 100, 101, 103, 116, 120, 121, 123, 124, 128, 129, 133, 135, 136, 138, 151, 168, 173, 186, 189, 192, 195, 196, 197, 199, 201, 202, 203, 205, 206, 209, 214, 215, 216, 218, 222, 223, 224, 225, 230, 232, 235, 237, 238, 239, 240, 242, 244, 245, 255, 260, 261, 275, 276, 277, 278, 279, 283], "success": [1, 7, 38, 48, 57, 65, 82, 84, 97, 115, 123, 181, 193, 199, 201, 214, 215, 222, 225, 226, 244, 251, 253], "tricki": [1, 57, 82], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 25, 26, 27, 29, 30, 35, 39, 49, 56, 57, 58, 63, 69, 73, 74, 82, 84, 87, 91, 93, 97, 99, 115, 121, 125, 151, 159, 171, 173, 176, 189, 192, 193, 195, 196, 197, 199, 201, 202, 203, 205, 206, 209, 213, 216, 218, 219, 222, 223, 224, 225, 235, 237, 238, 240, 244, 245, 247, 255, 273, 275, 277, 278, 279, 282, 283, 284], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 29, 30, 35, 38, 39, 40, 45, 48, 49, 55, 56, 57, 58, 61, 62, 63, 65, 67, 68, 69, 73, 82, 84, 86, 87, 88, 90, 93, 97, 98, 99, 105, 108, 111, 112, 115, 118, 120, 121, 122, 123, 124, 125, 126, 132, 133, 135, 136, 139, 151, 156, 160, 168, 171, 176, 177, 180, 182, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 208, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 226, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 251, 253, 254, 256, 258, 262, 272, 273, 275, 277, 278, 279, 281, 282, 283], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 25, 27, 28, 29, 38, 39, 48, 49, 56, 57, 62, 65, 84, 93, 98, 99, 121, 135, 138, 196, 197, 199, 202, 206, 207, 212, 214, 216, 218, 219, 224, 225, 226, 227, 231, 232, 237, 244, 245, 250, 251, 275, 282], "subsystem": [1, 206], "linux": [1, 29], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 26, 29, 37, 39, 40, 41, 46, 48, 49, 51, 52, 53, 57, 58, 62, 63, 65, 67, 69, 71, 72, 74, 79, 81, 82, 84, 86, 87, 88, 90, 93, 97, 108, 109, 111, 123, 134, 136, 165, 167, 171, 173, 176, 185, 187, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 232, 237, 239, 240, 241, 242, 244, 245, 255, 256, 258, 274, 275, 278, 283], "workaround": [1, 245], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 22, 23, 39, 53, 57, 58, 63, 65, 67, 75, 79, 80, 81, 84, 93, 97, 100, 104, 111, 116, 121, 125, 131, 135, 140, 176, 180, 193, 199, 200, 201, 202, 203, 204, 205, 214, 219, 221, 222, 223, 224, 284], "shell": [1, 12, 85, 138, 205], "tutori": [1, 7, 11, 12, 16, 17, 29, 73, 121, 138, 194, 205, 206, 222, 245, 275, 278, 280, 281, 282, 283, 284], "com": [1, 3, 4, 5, 6, 7, 10, 20, 29, 31, 35, 37, 48, 50, 51, 57, 58, 60, 61, 62, 63, 65, 67, 73, 74, 82, 84, 88, 93, 97, 105, 191, 200, 209, 211, 214, 215, 218, 219, 222, 225, 226, 244, 247, 279], "microsoftdoc": 1, "wsl": 1, "blob": [1, 84], "win10": 1, "md": [1, 4, 7, 235, 242], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 27, 29, 35, 37, 38, 39, 40, 41, 46, 47, 48, 49, 56, 57, 58, 59, 61, 62, 63, 65, 70, 72, 73, 74, 75, 82, 84, 85, 86, 87, 88, 90, 93, 94, 97, 99, 101, 103, 107, 111, 115, 116, 121, 124, 125, 126, 131, 132, 133, 134, 135, 136, 138, 139, 157, 159, 160, 161, 166, 170, 171, 174, 176, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 232, 235, 237, 239, 241, 242, 244, 245, 248, 251, 255, 256, 258, 260, 272, 275, 276, 277, 278, 279, 282, 283, 284], "command": [1, 3, 5, 6, 11, 12, 29, 39, 61, 85, 121, 133, 138, 186, 192, 206, 237, 238, 282], "prompt": [1, 6, 11], "transfer": [1, 104, 105, 107, 140, 225], "html": [1, 3, 4, 6, 7, 35, 39, 41, 49, 50, 51, 57, 58, 60, 62, 63, 65, 67, 73, 74, 84, 85, 93, 97, 105, 200, 206, 209, 211, 214, 215, 219, 222, 226, 238, 240, 242, 244, 245, 279], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 23, 25, 26, 31, 32, 34, 35, 36, 37, 38, 39, 40, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 82, 84, 85, 87, 88, 90, 93, 97, 99, 107, 108, 112, 113, 115, 116, 117, 120, 121, 123, 125, 128, 136, 138, 144, 147, 155, 165, 166, 168, 170, 171, 172, 174, 180, 181, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 212, 214, 216, 218, 219, 221, 222, 223, 224, 225, 226, 231, 232, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 256, 258, 260, 272, 273, 274, 276, 277, 278, 279, 283], "via": [1, 3, 11, 16, 20, 27, 29, 32, 33, 34, 48, 49, 57, 62, 65, 82, 84, 87, 93, 97, 98, 99, 100, 181, 191, 193, 197, 199, 201, 202, 205, 206, 225, 235, 238, 239, 251, 260, 278], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 35, 37, 39, 40, 41, 49, 57, 58, 64, 69, 71, 73, 76, 82, 84, 88, 90, 93, 94, 97, 98, 105, 107, 110, 117, 121, 138, 154, 164, 165, 168, 171, 174, 176, 183, 185, 189, 190, 192, 194, 195, 196, 199, 201, 202, 203, 205, 206, 207, 213, 214, 216, 218, 219, 222, 223, 224, 225, 226, 232, 235, 237, 239, 241, 244, 245, 256, 258, 261, 272, 273, 275, 277, 278, 279, 280, 282, 283], "directori": [1, 3, 6, 7, 29, 34, 39, 222, 237, 238, 247], "folder": 1, "prepend": [1, 38, 48, 93, 107, 178, 206, 232], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 38, 39, 49, 57, 61, 65, 84, 87, 107, 121, 151, 175, 179, 192, 195, 196, 197, 209, 213, 214, 215, 216, 222, 223, 224, 225, 226, 238, 244, 245, 277, 283], "compat": [1, 3, 4, 15, 39, 57, 65, 85, 88, 93, 98, 111, 173, 178, 186, 192, 195, 197, 201, 202, 206, 226, 230, 233, 237, 239, 245], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 30, 35, 39, 40, 42, 48, 49, 50, 56, 57, 58, 61, 62, 63, 65, 66, 71, 72, 73, 75, 79, 82, 84, 86, 87, 88, 90, 93, 94, 96, 97, 98, 99, 103, 105, 107, 111, 116, 120, 121, 125, 128, 145, 151, 165, 168, 169, 171, 180, 190, 191, 194, 195, 196, 197, 199, 202, 203, 204, 206, 209, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 233, 238, 239, 241, 244, 245, 247, 248, 272, 273, 275, 276, 277, 278, 279, 281, 283], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 30, 34, 35, 37, 38, 39, 40, 43, 47, 48, 49, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 79, 82, 84, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 105, 107, 111, 115, 116, 117, 121, 123, 125, 127, 129, 131, 133, 134, 135, 136, 138, 140, 143, 155, 159, 160, 165, 168, 169, 170, 171, 176, 180, 181, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 215, 216, 218, 219, 222, 223, 224, 225, 226, 237, 239, 240, 241, 244, 245, 247, 251, 255, 259, 266, 272, 273, 275, 276, 278, 279, 281, 282, 283, 284], "partial": [1, 11, 37, 48, 55, 56, 57, 59, 61, 62, 63, 97, 99, 138, 165, 181, 185, 187, 197, 200, 203, 206, 208, 215, 218, 222, 223, 227, 233, 251, 258, 273, 283], "workflow": [1, 3, 5, 8, 9, 25, 28, 138, 196, 239, 245, 280], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 70, 71, 73, 74, 75, 80, 82, 84, 85, 86, 87, 88, 93, 94, 97, 98, 99, 103, 105, 107, 113, 115, 121, 123, 124, 125, 127, 128, 130, 132, 133, 135, 136, 139, 144, 146, 165, 166, 170, 171, 173, 175, 176, 180, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 251, 254, 256, 258, 260, 261, 272, 273, 275, 276, 278, 279, 283, 284], "viabl": [1, 58], "64": [1, 42, 48, 97, 137, 191, 205, 215, 224, 226, 237, 244, 247, 282], "bit": [1, 16, 20, 38, 39, 41, 57, 58, 60, 87, 88, 93, 97, 165, 176, 193, 202, 216, 219, 225, 237, 244, 255, 256, 282], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 25, 31, 35, 39, 41, 49, 53, 57, 58, 61, 62, 63, 71, 72, 74, 77, 78, 81, 85, 87, 88, 93, 96, 97, 99, 107, 165, 168, 174, 175, 176, 178, 185, 192, 193, 195, 197, 199, 201, 202, 203, 204, 206, 207, 208, 214, 215, 216, 218, 219, 222, 223, 225, 226, 227, 228, 231, 237, 238, 244, 245, 247, 249, 254, 269, 274, 275, 278, 283], "chose": [1, 58], "rm": [1, 39], "absolut": [1, 10, 35, 36, 39, 56, 57, 63, 65, 72, 82, 84, 88, 93, 109, 169, 197, 201, 202, 216, 218, 221, 226, 237, 260, 261, 262], "Be": [1, 4, 6, 20, 37, 57, 87, 93, 199, 222, 225, 233, 245], "sure": [1, 4, 6, 7, 20, 39, 48, 57, 69, 120, 121, 151, 176, 202, 203, 213, 222, 224, 225, 238, 244, 275, 278, 283], "substitut": [1, 10, 11, 12, 16, 19, 27, 39, 57, 58, 63, 65, 82, 84, 93, 98, 99, 107, 116, 117, 121, 123, 125, 135, 160, 169, 171, 174, 181, 183, 185, 203, 204, 207, 208, 213, 216, 218, 219, 222, 223, 224, 225, 245, 254, 274, 275], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 38, 39, 40, 46, 48, 55, 57, 58, 65, 69, 82, 84, 86, 90, 93, 97, 107, 111, 121, 123, 133, 134, 135, 186, 193, 196, 201, 206, 214, 216, 218, 219, 222, 225, 233, 237, 238, 241, 242, 244, 245, 277], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 251, 253, 254, 255, 256, 257, 258, 260, 261, 269, 272, 273, 275, 277, 278, 279, 282, 283, 284], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 29, 32, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 72, 73, 74, 82, 84, 85, 87, 88, 91, 93, 94, 97, 99, 100, 101, 103, 107, 109, 112, 115, 116, 117, 118, 120, 121, 131, 134, 135, 136, 139, 140, 144, 157, 160, 165, 166, 169, 171, 173, 176, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 207, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 226, 228, 231, 232, 237, 238, 240, 241, 242, 244, 245, 251, 255, 256, 257, 258, 260, 261, 272, 273, 275, 278, 279, 282, 283, 284], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 35, 37, 38, 39, 40, 41, 46, 47, 48, 49, 51, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 69, 70, 72, 73, 74, 80, 82, 84, 86, 87, 88, 90, 93, 94, 96, 97, 98, 100, 101, 103, 107, 108, 112, 115, 116, 121, 123, 125, 131, 136, 138, 144, 145, 155, 156, 165, 168, 173, 176, 180, 181, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 237, 238, 239, 240, 241, 242, 244, 247, 251, 253, 255, 256, 258, 260, 261, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "collect": [1, 3, 7, 17, 38, 39, 48, 57, 74, 84, 97, 100, 107, 120, 129, 138, 171, 178, 191, 197, 202, 215, 216, 218, 222, 226, 237, 244], "offici": [1, 12, 29, 57, 111, 138, 180, 190, 225, 245, 281], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 70, 71, 72, 73, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 93, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 118, 120, 121, 123, 124, 126, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 144, 145, 157, 160, 166, 167, 168, 169, 171, 175, 176, 177, 180, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 230, 232, 237, 238, 239, 240, 241, 242, 244, 245, 247, 251, 253, 256, 260, 261, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 33, 35, 36, 37, 38, 40, 41, 42, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 71, 73, 75, 80, 82, 84, 85, 86, 87, 90, 93, 97, 98, 99, 107, 111, 112, 115, 116, 117, 120, 121, 123, 124, 125, 126, 128, 130, 131, 132, 134, 135, 136, 138, 139, 143, 154, 155, 156, 157, 160, 165, 166, 169, 170, 171, 176, 178, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197, 199, 202, 203, 204, 205, 206, 207, 208, 212, 215, 216, 218, 219, 221, 222, 223, 224, 226, 231, 232, 238, 239, 241, 242, 243, 244, 245, 251, 255, 256, 258, 259, 260, 266, 273, 275, 276, 277, 278, 279, 283, 284], "svg": [1, 85, 186], "store": [1, 5, 10, 12, 18, 38, 39, 47, 48, 57, 79, 81, 90, 93, 97, 99, 112, 116, 118, 120, 121, 136, 165, 171, 185, 189, 190, 192, 193, 196, 201, 202, 203, 213, 216, 227, 230, 231, 239, 240, 241, 244, 256, 258, 278], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 31, 32, 33, 34, 35, 37, 38, 39, 46, 47, 48, 49, 53, 56, 57, 58, 59, 62, 64, 65, 67, 70, 71, 72, 73, 74, 79, 80, 82, 84, 86, 87, 88, 90, 93, 97, 99, 100, 101, 107, 108, 111, 112, 115, 119, 121, 125, 128, 129, 132, 135, 136, 155, 157, 165, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 231, 232, 233, 235, 237, 239, 240, 241, 242, 244, 245, 247, 251, 253, 255, 256, 260, 273, 275, 278, 279, 282, 283], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 27, 28, 34, 35, 38, 39, 40, 43, 48, 49, 55, 57, 58, 62, 65, 69, 82, 84, 86, 90, 93, 98, 101, 112, 113, 115, 116, 120, 121, 123, 131, 132, 133, 135, 136, 138, 139, 166, 171, 176, 180, 181, 186, 190, 192, 196, 201, 202, 206, 207, 213, 216, 218, 219, 224, 225, 226, 230, 231, 232, 237, 238, 239, 240, 241, 251, 256, 258, 283], "onc": [1, 4, 11, 12, 18, 19, 20, 39, 41, 48, 53, 57, 58, 62, 65, 73, 82, 84, 98, 101, 113, 115, 131, 135, 176, 181, 183, 190, 192, 194, 196, 202, 206, 207, 215, 216, 218, 222, 225, 232, 244, 255, 272, 273, 283, 284], "under": [1, 3, 4, 6, 11, 12, 18, 19, 33, 34, 36, 37, 39, 40, 47, 48, 53, 55, 65, 75, 82, 84, 86, 87, 93, 97, 99, 100, 101, 140, 166, 191, 193, 194, 201, 202, 206, 213, 214, 216, 219, 222, 224, 225, 226, 232, 235, 277, 283], "prefer": [1, 3, 6, 10, 11, 18, 20, 25, 39, 49, 56, 57, 65, 97, 99, 115, 121, 171, 176, 181, 192, 195, 197, 199, 201, 206, 214, 218, 222, 224, 231, 237, 239, 242, 245, 277, 279], "web": [1, 7, 58, 69, 138, 188, 200, 219], "browser": 1, "drop": [1, 63, 84, 98, 128, 197, 199], "menu": 1, "index": [1, 3, 10, 12, 20, 26, 27, 31, 39, 46, 48, 49, 53, 56, 57, 58, 59, 62, 63, 65, 68, 73, 82, 84, 87, 88, 90, 93, 96, 97, 107, 120, 121, 138, 139, 140, 142, 144, 145, 155, 164, 166, 168, 171, 176, 181, 192, 193, 197, 201, 202, 203, 206, 211, 212, 216, 224, 226, 227, 229, 230, 232, 233, 238, 266], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 38, 39, 48, 49, 56, 57, 63, 64, 65, 69, 80, 84, 87, 88, 90, 93, 97, 99, 100, 111, 115, 116, 121, 122, 128, 133, 134, 136, 138, 142, 143, 159, 163, 166, 167, 168, 173, 174, 181, 189, 192, 193, 196, 197, 199, 201, 205, 206, 209, 213, 214, 216, 218, 219, 222, 223, 224, 226, 232, 237, 238, 239, 240, 242, 244, 245, 256, 273, 275, 277, 278, 279, 280, 282, 283], "load": [1, 39, 57, 85, 100, 101, 103, 112, 115, 116, 120, 124, 126, 139, 151, 186], "ll": [1, 38, 55, 93, 125, 189, 190, 235], "manual": [1, 3, 4, 7, 10, 11, 20, 39, 40, 48, 61, 67, 84, 85, 99, 107, 120, 121, 124, 135, 139, 192, 199, 206, 222, 224, 225, 240, 273, 283], "repeat": [1, 11, 12, 48, 51, 56, 57, 63, 65, 84, 86, 88, 93, 97, 99, 155, 157, 171, 192, 193, 194, 199, 201, 202, 206, 212, 222, 226, 230, 231, 238, 240, 244, 283], "step": [1, 4, 5, 20, 21, 28, 37, 39, 48, 52, 53, 56, 57, 58, 65, 81, 82, 84, 93, 97, 98, 116, 128, 131, 133, 138, 139, 173, 185, 190, 191, 192, 196, 197, 199, 202, 206, 207, 208, 211, 214, 215, 216, 218, 219, 222, 224, 226, 231, 238, 244, 245, 273], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 24, 26, 39, 40, 48, 49, 50, 51, 54, 56, 57, 58, 61, 62, 65, 81, 82, 84, 85, 86, 87, 90, 93, 97, 100, 101, 103, 107, 111, 120, 131, 133, 135, 144, 161, 166, 180, 181, 186, 189, 190, 192, 196, 197, 198, 199, 201, 202, 203, 206, 207, 208, 214, 215, 216, 218, 219, 222, 224, 225, 226, 231, 240, 241, 244, 245, 247, 256, 272, 273, 275, 277, 278, 282, 283], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 24, 29, 39, 45, 48, 49, 56, 57, 61, 62, 63, 64, 65, 88, 90, 94, 98, 121, 133, 135, 181, 189, 191, 192, 194, 195, 196, 201, 202, 206, 211, 213, 215, 224, 225, 227, 244, 275, 277, 279], "approach": [1, 16, 24, 26, 27, 38, 56, 57, 84, 107, 125, 131, 196, 199, 200, 203, 214, 223, 224, 226, 238, 241, 244, 273, 279], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 23, 27, 30, 33, 37, 38, 39, 40, 45, 46, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 70, 72, 74, 75, 76, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 101, 107, 111, 115, 116, 120, 121, 123, 124, 125, 130, 132, 133, 134, 135, 138, 139, 155, 161, 166, 171, 173, 176, 178, 179, 180, 181, 183, 185, 186, 187, 189, 192, 193, 194, 195, 196, 199, 201, 202, 205, 206, 207, 208, 213, 215, 216, 218, 219, 221, 222, 223, 224, 226, 230, 231, 232, 235, 237, 238, 239, 240, 244, 245, 251, 254, 256, 262, 265, 272, 274, 283], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 29, 34, 37, 39, 48, 49, 51, 57, 58, 59, 61, 62, 63, 65, 66, 73, 74, 78, 82, 84, 85, 87, 88, 93, 97, 98, 100, 109, 111, 118, 120, 123, 124, 128, 130, 135, 136, 138, 139, 151, 166, 168, 185, 191, 192, 193, 196, 197, 201, 203, 206, 207, 208, 213, 215, 216, 218, 219, 222, 223, 224, 225, 238, 239, 240, 241, 242, 245, 274, 275, 278, 279, 281], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 24, 27, 38, 39, 40, 49, 57, 59, 60, 61, 62, 63, 65, 70, 72, 76, 82, 85, 87, 97, 99, 100, 116, 121, 123, 129, 157, 159, 160, 169, 171, 185, 189, 192, 193, 196, 197, 201, 202, 203, 206, 209, 212, 213, 215, 216, 218, 219, 222, 224, 225, 231, 232, 237, 238, 239, 242, 256, 261, 273, 275, 277, 278, 282, 283, 284], "detect": [1, 3, 30, 37, 90, 93, 97, 192, 196, 206, 222, 223, 225, 227, 244, 282], "procedur": [1, 40, 42, 48, 54, 55, 56, 84, 93, 116, 136, 199, 201, 218, 219, 224, 225, 251, 279], "again": [1, 4, 12, 16, 19, 49, 57, 72, 97, 121, 123, 136, 166, 167, 181, 189, 193, 194, 201, 209, 216, 222, 235, 255, 275, 283], "whether": [1, 4, 10, 11, 18, 19, 20, 26, 27, 37, 38, 39, 43, 48, 56, 57, 58, 64, 65, 69, 72, 84, 85, 87, 88, 93, 97, 103, 111, 116, 117, 120, 121, 159, 178, 183, 190, 192, 195, 196, 197, 201, 202, 206, 209, 213, 214, 218, 219, 222, 224, 225, 226, 227, 237, 239, 244, 245, 251, 254, 275, 279], "8000": [1, 100], "80": [1, 4, 6, 12, 20, 37, 48, 57, 60, 84, 93, 97, 100, 101, 105, 202, 205, 222, 226, 242, 244], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24, 25, 26, 30, 38, 39, 40, 46, 47, 48, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 68, 70, 72, 73, 77, 79, 81, 82, 84, 85, 86, 87, 90, 93, 97, 98, 99, 100, 105, 111, 112, 118, 121, 123, 127, 135, 136, 139, 143, 144, 156, 157, 165, 166, 169, 171, 173, 176, 180, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 230, 232, 235, 237, 238, 239, 240, 241, 242, 244, 245, 251, 254, 258, 260, 274, 275, 277, 278, 279, 282, 283], "port": [1, 99, 123, 143], "finish": [1, 39, 40, 165, 240, 280], "stop": [1, 4, 39, 40, 49, 57, 93, 97, 192, 212, 214, 222, 226], "ctrl": 1, "detach": 1, "mode": [1, 2, 57, 85, 99, 143, 166, 186, 202, 206, 237, 248], "d": [1, 6, 7, 10, 11, 12, 16, 20, 31, 38, 41, 46, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 62, 65, 67, 71, 75, 80, 82, 84, 86, 87, 88, 89, 90, 93, 94, 96, 97, 99, 100, 103, 115, 116, 138, 140, 143, 144, 150, 160, 168, 170, 171, 176, 180, 181, 183, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 208, 212, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 232, 244, 247, 251, 253, 254, 255, 256, 260, 268, 279, 284], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 26, 30, 33, 34, 38, 39, 40, 44, 47, 50, 53, 56, 57, 58, 59, 62, 63, 64, 65, 67, 70, 82, 84, 85, 86, 90, 93, 97, 99, 100, 103, 112, 115, 118, 120, 121, 123, 138, 142, 151, 166, 173, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 190, 192, 193, 194, 196, 197, 199, 201, 203, 206, 212, 216, 218, 219, 222, 223, 225, 226, 231, 232, 235, 237, 238, 239, 240, 245, 247, 248, 249, 251, 255, 258, 263, 272, 275, 278, 279, 283], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 23, 35, 40, 56, 57, 59, 63, 67, 88, 90, 93, 97, 99, 100, 103, 108, 112, 121, 123, 135, 161, 166, 176, 187, 190, 196, 202, 203, 214, 215, 216, 222, 225, 242, 244, 245, 258], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 27, 30, 32, 34, 37, 38, 39, 40, 48, 49, 50, 51, 53, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 93, 97, 99, 100, 105, 107, 111, 116, 121, 123, 125, 133, 135, 136, 138, 139, 140, 151, 155, 159, 161, 163, 165, 166, 169, 171, 173, 174, 176, 177, 181, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 205, 206, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 225, 226, 230, 231, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 251, 255, 272, 273, 275, 276, 279], "tab": [1, 10, 12, 53, 138], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 39, 49, 56, 57, 61, 63, 80, 82, 84, 93, 97, 100, 101, 105, 111, 121, 127, 132, 136, 138, 166, 170, 174, 176, 181, 189, 190, 192, 193, 196, 197, 199, 201, 202, 206, 207, 209, 213, 214, 215, 216, 218, 219, 222, 224, 226, 227, 235, 238, 239, 242, 244, 245, 275, 277, 279, 282], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 28, 37, 38, 48, 49, 57, 67, 82, 84, 87, 93, 97, 116, 123, 131, 192, 194, 196, 201, 202, 206, 209, 215, 218, 222, 223, 224, 225, 226, 227, 232, 237, 239, 244, 245, 251, 276, 281], "major": [1, 3, 4, 7, 10, 27, 67, 111, 231, 277, 283], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 48, 86, 163, 166, 176, 202, 218, 225], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 29, 39, 57, 62, 65, 170, 207, 218, 222, 225, 279, 283], "request": [1, 3, 4, 6, 7, 9, 10, 18, 29, 37, 57, 61, 73, 82, 97, 121, 171, 199, 202, 230, 238], "releas": [1, 7, 10, 57, 84, 88, 99, 135, 192, 231, 242, 245, 278], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 24, 26, 29, 34, 35, 37, 38, 39, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 69, 75, 82, 84, 87, 88, 90, 92, 93, 97, 98, 99, 109, 111, 120, 121, 123, 125, 126, 131, 133, 135, 138, 151, 155, 160, 165, 168, 169, 179, 187, 190, 194, 197, 198, 199, 201, 202, 205, 206, 207, 212, 213, 214, 216, 218, 221, 222, 223, 224, 226, 229, 232, 235, 237, 239, 240, 241, 242, 244, 251, 253, 255, 260, 262, 273, 277, 278, 279, 283, 284], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 39, 48, 49, 53, 56, 57, 61, 63, 81, 82, 84, 85, 93, 94, 97, 99, 123, 161, 166, 186, 192, 195, 196, 197, 199, 201, 202, 206, 213, 216, 222, 224, 226, 235, 237, 244, 245, 279], "99": [1, 39, 57, 58, 93, 97, 199, 200], "due": [1, 6, 10, 16, 20, 25, 37, 39, 47, 48, 57, 59, 74, 93, 97, 100, 103, 121, 123, 135, 144, 171, 187, 190, 196, 202, 206, 209, 219, 221, 223, 226, 242, 254, 260, 283], "bad": [1, 10, 56, 97, 173, 206], "math": [1, 3, 6, 20, 27, 31, 35, 38, 40, 48, 57, 62, 65, 67, 84, 93, 97, 98, 121, 131, 187, 192, 197, 200, 205, 206, 222, 223, 226, 238, 239, 245, 256, 257, 258, 259, 260, 272, 273, 277], "format": [1, 4, 8, 11, 14, 16, 24, 26, 38, 49, 58, 79, 80, 84, 87, 93, 96, 97, 100, 120, 139, 144, 155, 165, 192, 195, 196, 201, 202, 204, 206, 216, 222, 225, 237, 247, 251, 255, 276, 279, 282], "doubl": [1, 6, 7, 37, 39, 53, 57, 58, 62, 93, 99, 115, 130, 131, 189, 196, 206, 215, 216, 239, 283], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 27, 33, 34, 37, 38, 39, 43, 46, 48, 49, 50, 55, 56, 57, 58, 62, 65, 69, 80, 82, 86, 87, 88, 90, 93, 94, 97, 107, 112, 113, 121, 135, 138, 151, 159, 171, 173, 174, 179, 187, 192, 193, 195, 196, 197, 199, 201, 202, 208, 214, 216, 218, 222, 223, 224, 225, 226, 230, 231, 235, 237, 239, 242, 244, 254, 258, 275, 283], "ad": [1, 6, 7, 10, 18, 23, 24, 31, 38, 39, 41, 47, 48, 57, 58, 68, 72, 79, 82, 86, 97, 99, 103, 111, 112, 115, 121, 122, 138, 145, 173, 176, 182, 191, 192, 201, 203, 205, 206, 208, 216, 219, 222, 225, 226, 228, 231, 232, 237, 254, 275], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 37, 61, 82, 85, 93, 121, 123, 135, 206, 213, 219, 222], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 25, 26, 27, 29, 30, 40, 44, 48, 51, 52, 57, 58, 59, 61, 65, 69, 82, 84, 85, 93, 97, 98, 99, 112, 115, 121, 123, 129, 131, 132, 136, 138, 139, 165, 171, 180, 186, 189, 191, 192, 193, 194, 196, 199, 205, 216, 218, 222, 224, 225, 226, 231, 234, 235, 237, 238, 239, 242, 243, 244, 245, 255, 263, 270, 275, 277, 280, 282], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 22, 30, 38, 39, 41, 48, 57, 58, 62, 63, 65, 70, 71, 73, 74, 75, 82, 84, 87, 88, 93, 96, 99, 107, 108, 113, 115, 125, 132, 151, 155, 157, 165, 168, 171, 178, 181, 185, 192, 193, 195, 196, 197, 199, 201, 202, 206, 207, 208, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 237, 239, 241, 244, 245, 247, 273, 275, 278, 279, 284], "render": [1, 3, 6, 7, 39, 57, 85, 186, 192, 206, 282], "resourc": [1, 6, 7, 20, 93, 200, 222, 238, 248], "style": [1, 8, 38, 57, 85, 165, 186, 192, 206, 225, 282], "guid": [1, 3, 8, 9, 11, 13, 20, 22, 29, 38, 57, 64, 121, 135, 206, 221, 224, 225, 232, 276, 280, 281, 284], "tip": [1, 6, 57, 135, 222, 223, 283], "few": [1, 3, 4, 10, 11, 18, 27, 35, 47, 49, 57, 58, 84, 85, 97, 98, 123, 131, 174, 180, 186, 189, 190, 193, 201, 206, 214, 215, 216, 222, 225, 226, 239, 244, 283], "extra": [1, 10, 39, 57, 58, 97, 98, 129, 176, 187, 199, 206, 216, 222, 237, 238, 239, 258], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 34, 50, 57, 59, 65, 84, 87, 97, 121, 176, 187, 196, 199, 200, 201, 202, 222, 224, 241, 245, 258, 260], "xetex": 1, "font": [1, 85, 186, 206], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 22, 23, 37, 39, 40, 48, 49, 53, 57, 58, 60, 62, 63, 65, 73, 74, 82, 84, 87, 88, 93, 96, 97, 99, 100, 101, 107, 116, 120, 121, 135, 136, 138, 139, 143, 150, 155, 157, 159, 160, 165, 168, 171, 181, 187, 190, 191, 192, 193, 195, 201, 202, 203, 204, 206, 208, 209, 213, 214, 216, 222, 223, 225, 226, 237, 239, 241, 244, 258, 273, 277, 279, 283], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 27, 31, 32, 33, 34, 35, 37, 38, 39, 47, 48, 49, 53, 56, 57, 58, 59, 61, 63, 65, 69, 74, 75, 79, 81, 82, 84, 86, 87, 88, 90, 93, 96, 97, 98, 99, 100, 107, 108, 111, 112, 113, 117, 121, 125, 131, 135, 138, 156, 163, 165, 166, 168, 170, 171, 173, 174, 176, 180, 181, 190, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 206, 208, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 233, 237, 238, 239, 241, 242, 244, 245, 247, 251, 254, 256, 275, 277, 278, 279, 283], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 27, 28, 29, 32, 38, 39, 48, 49, 55, 57, 58, 62, 63, 65, 70, 84, 87, 88, 89, 91, 93, 95, 97, 110, 112, 115, 121, 155, 169, 173, 181, 191, 192, 193, 196, 197, 199, 201, 202, 206, 209, 218, 224, 226, 236, 237, 239, 240, 241, 242, 244, 245, 249, 251, 257, 275, 278, 279], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 27, 30, 31, 35, 37, 38, 39, 40, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 70, 72, 73, 74, 75, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 93, 97, 100, 103, 104, 107, 111, 115, 116, 117, 118, 120, 121, 123, 134, 135, 136, 138, 139, 145, 155, 160, 166, 168, 170, 171, 172, 173, 174, 181, 185, 187, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 226, 227, 230, 232, 237, 238, 239, 240, 244, 245, 247, 251, 258, 260, 273, 275, 277, 279, 283, 284], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 25, 27, 37, 38, 39, 40, 42, 45, 47, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 69, 73, 74, 75, 80, 83, 84, 86, 87, 88, 93, 97, 99, 100, 107, 108, 112, 115, 118, 120, 121, 123, 125, 126, 128, 129, 130, 135, 136, 138, 139, 151, 155, 160, 166, 168, 169, 171, 174, 176, 177, 181, 187, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 237, 238, 239, 240, 242, 244, 245, 246, 247, 260, 263, 273, 278, 282, 283, 284], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 142, 143, 144, 145, 146, 150, 153, 154, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 249, 251, 254, 255, 256, 258, 261, 268, 272, 273, 275, 277, 278, 279, 282, 283, 284], "dev": [1, 3, 4, 5, 242], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 257, 259, 260, 261, 262, 266, 268, 269, 271, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284], "sympy_debug": [2, 84, 247], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 22, 24, 25, 26, 30, 31, 32, 34, 35, 37, 39, 40, 52, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 74, 76, 82, 84, 85, 87, 88, 93, 99, 100, 101, 103, 105, 107, 120, 121, 128, 130, 138, 139, 145, 160, 165, 169, 171, 174, 180, 181, 183, 187, 194, 196, 197, 199, 201, 202, 203, 206, 207, 212, 213, 218, 219, 221, 222, 223, 224, 225, 233, 237, 239, 240, 241, 245, 251, 254, 255, 257, 258, 260, 273, 275, 277, 279, 284], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 32, 33, 34, 36, 38, 39, 48, 50, 52, 57, 59, 61, 62, 63, 65, 70, 73, 74, 75, 80, 81, 84, 85, 88, 90, 93, 97, 99, 100, 108, 112, 116, 120, 121, 139, 144, 151, 155, 161, 165, 166, 168, 170, 171, 181, 183, 186, 187, 192, 196, 197, 201, 202, 203, 204, 206, 214, 216, 218, 222, 224, 225, 226, 230, 231, 232, 237, 238, 239, 241, 244, 245, 251, 253, 254, 255, 256, 258, 260, 272, 273, 278, 283, 284], "unix": [2, 237, 238], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 29, 38, 39, 40, 46, 48, 49, 56, 57, 58, 62, 63, 69, 73, 82, 84, 88, 93, 97, 99, 100, 107, 108, 109, 111, 113, 115, 121, 125, 135, 138, 166, 168, 171, 176, 180, 181, 187, 189, 192, 195, 196, 197, 199, 202, 203, 205, 206, 207, 209, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 230, 231, 237, 239, 241, 244, 245, 247, 248, 256, 257, 258, 260, 272, 273, 275, 277, 278, 279, 282, 283, 284], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 33, 34, 35, 37, 38, 39, 40, 49, 53, 56, 57, 58, 59, 60, 63, 65, 67, 69, 72, 73, 76, 82, 84, 85, 87, 88, 90, 91, 93, 94, 97, 98, 104, 107, 111, 115, 116, 118, 120, 121, 122, 124, 125, 129, 132, 133, 138, 143, 146, 151, 155, 160, 163, 165, 167, 173, 175, 176, 179, 180, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 209, 213, 214, 215, 216, 218, 219, 222, 223, 224, 228, 231, 232, 235, 237, 238, 240, 242, 244, 245, 247, 254, 256, 257, 258, 260, 272, 273, 275, 276, 277, 278, 279, 281, 283], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 82, 84, 85, 87, 88, 89, 90, 93, 94, 97, 99, 100, 101, 105, 107, 108, 109, 110, 111, 113, 116, 117, 121, 123, 125, 138, 142, 143, 152, 155, 156, 163, 165, 166, 169, 170, 171, 174, 180, 181, 182, 183, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 237, 238, 239, 240, 242, 244, 245, 247, 251, 254, 255, 256, 257, 258, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "isympi": [2, 3, 11, 12, 85], "window": [2, 247], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 23, 24, 29, 35, 38, 39, 48, 55, 57, 58, 59, 63, 80, 82, 84, 85, 86, 87, 93, 97, 98, 109, 111, 112, 118, 121, 125, 129, 135, 136, 138, 151, 156, 161, 171, 176, 180, 186, 187, 189, 193, 195, 196, 197, 199, 201, 205, 206, 213, 214, 215, 216, 218, 222, 225, 235, 237, 239, 240, 242, 257, 258, 260, 272, 273, 275, 276, 277, 278, 279, 283, 284], "limit": [2, 4, 10, 12, 24, 27, 29, 35, 37, 39, 56, 57, 59, 61, 62, 63, 65, 66, 69, 77, 79, 84, 85, 87, 93, 97, 105, 136, 160, 166, 169, 186, 192, 197, 199, 202, 203, 206, 209, 210, 212, 214, 218, 219, 221, 222, 223, 224, 226, 231, 238, 241, 244, 245, 247, 250, 251, 261, 263, 269, 274, 275, 277, 279], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 22, 24, 26, 28, 32, 33, 34, 36, 37, 38, 40, 48, 49, 52, 53, 55, 58, 59, 60, 61, 62, 66, 67, 68, 69, 74, 77, 78, 81, 83, 84, 85, 86, 88, 90, 92, 96, 98, 100, 102, 104, 105, 107, 108, 109, 113, 115, 118, 119, 120, 121, 124, 125, 126, 127, 131, 133, 134, 138, 143, 144, 145, 146, 150, 155, 156, 157, 160, 165, 166, 167, 168, 169, 170, 171, 174, 180, 181, 184, 185, 186, 188, 190, 191, 193, 198, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 224, 225, 226, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 256, 257, 259, 260, 261, 262, 263, 266, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 281, 284], "nice": [2, 4, 6, 29, 57, 69, 93, 97, 121, 135, 138, 192, 206, 216, 247, 278], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 24, 25, 29, 32, 33, 34, 35, 37, 38, 40, 41, 46, 48, 49, 56, 57, 58, 61, 62, 63, 65, 84, 86, 87, 90, 93, 94, 97, 98, 99, 100, 101, 107, 114, 116, 121, 123, 131, 137, 143, 151, 164, 165, 169, 171, 181, 184, 188, 190, 192, 195, 196, 197, 201, 202, 212, 213, 215, 216, 218, 222, 224, 231, 233, 237, 239, 244, 245, 247, 249, 251, 255, 262, 268, 270, 273, 274, 275, 276, 277, 278, 279, 283], "tree": [2, 10, 11, 15, 48, 51, 57, 99, 113, 121, 163, 166, 181, 202, 213, 215, 218, 225, 228, 230, 241, 244, 247, 274], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 39, 53, 57, 58, 61, 62, 67, 69, 75, 79, 82, 84, 87, 93, 97, 107, 111, 121, 125, 138, 143, 176, 189, 190, 193, 196, 199, 201, 202, 203, 205, 206, 207, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 237, 238, 239, 245, 272, 275, 278, 283], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 24, 29, 39, 42, 48, 49, 56, 57, 61, 62, 64, 65, 69, 82, 84, 97, 113, 132, 176, 178, 192, 194, 196, 199, 201, 205, 206, 207, 213, 214, 222, 226, 237, 239, 249, 262, 275, 279, 282], "instal": [3, 5, 7, 11, 12, 61, 98, 196, 197, 206, 238, 245, 276, 282], "enabl": [3, 7, 11, 20, 29, 57, 84, 85, 97, 101, 121, 123, 171, 181, 186, 206, 222, 226, 237, 242, 245, 279, 282, 283], "certain": [3, 7, 11, 20, 27, 29, 36, 38, 39, 48, 55, 57, 61, 65, 73, 82, 84, 97, 99, 135, 181, 182, 193, 196, 199, 201, 206, 207, 213, 216, 218, 219, 222, 224, 225, 226, 228, 239, 240, 245, 251, 254, 260, 283], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 32, 33, 34, 37, 38, 39, 40, 48, 49, 56, 57, 58, 61, 63, 67, 69, 84, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 107, 111, 115, 116, 121, 129, 132, 135, 136, 139, 173, 180, 181, 185, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 213, 214, 216, 219, 222, 223, 224, 225, 226, 235, 238, 239, 240, 241, 242, 244, 245, 247, 254, 256, 272, 275, 277, 278, 279, 281, 282, 283], "mention": [3, 4, 6, 20, 48, 82, 84, 107, 123, 139, 140, 187, 216, 219, 222, 226, 255, 256, 257, 258, 279], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 27, 37, 39, 48, 49, 57, 58, 61, 62, 63, 65, 82, 84, 97, 129, 177, 191, 193, 196, 197, 201, 202, 203, 204, 206, 215, 218, 219, 222, 223, 225, 230, 235, 237, 239, 240, 243, 244, 245, 255, 258, 270, 272, 275, 278, 279], "unless": [3, 6, 11, 18, 20, 32, 34, 37, 39, 48, 56, 57, 58, 62, 65, 72, 73, 82, 93, 96, 144, 189, 190, 194, 196, 201, 202, 206, 211, 214, 215, 222, 224, 237, 241, 244, 245, 247, 251, 260, 273, 279, 283], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 26, 27, 29, 35, 38, 39, 40, 45, 47, 48, 49, 55, 56, 57, 58, 59, 62, 63, 65, 67, 70, 71, 72, 73, 74, 79, 82, 84, 85, 87, 88, 90, 91, 93, 96, 97, 99, 111, 115, 116, 118, 120, 121, 123, 129, 131, 133, 134, 135, 138, 139, 145, 150, 155, 160, 163, 168, 173, 174, 176, 177, 181, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 206, 207, 212, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 232, 235, 237, 239, 241, 244, 245, 247, 251, 258, 260, 273, 275, 276, 277, 278, 279, 283], "intend": [3, 4, 6, 10, 14, 18, 57, 58, 68, 77, 82, 97, 99, 113, 166, 196, 197, 201, 204, 219, 222, 223, 235, 240, 272], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 31, 36, 48, 49, 56, 57, 58, 62, 63, 65, 73, 80, 82, 84, 87, 88, 90, 97, 107, 111, 112, 115, 116, 120, 121, 123, 129, 131, 132, 136, 138, 155, 167, 171, 180, 190, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 214, 216, 218, 219, 222, 224, 237, 239, 241, 244, 273, 278, 283], "those": [3, 6, 10, 11, 12, 14, 18, 19, 24, 26, 27, 30, 35, 38, 39, 40, 48, 49, 55, 56, 57, 58, 61, 70, 71, 82, 84, 87, 93, 96, 97, 111, 115, 116, 123, 129, 132, 144, 168, 180, 183, 186, 189, 190, 192, 196, 197, 199, 201, 202, 204, 205, 206, 212, 214, 218, 222, 223, 224, 225, 226, 232, 235, 237, 241, 244, 251, 254, 275, 277, 283], "everi": [3, 4, 6, 11, 18, 20, 24, 28, 33, 34, 35, 38, 43, 45, 48, 49, 57, 58, 72, 86, 88, 93, 97, 107, 136, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 206, 211, 214, 216, 218, 219, 222, 225, 226, 228, 255, 258, 260, 276, 278, 279, 283], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 26, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 48, 49, 53, 55, 56, 57, 58, 59, 61, 63, 65, 67, 68, 70, 71, 73, 82, 84, 87, 88, 93, 96, 97, 99, 109, 111, 113, 121, 123, 128, 132, 151, 155, 161, 165, 167, 170, 180, 189, 190, 192, 194, 195, 196, 197, 199, 201, 202, 203, 206, 213, 214, 215, 216, 218, 219, 221, 222, 224, 231, 232, 235, 237, 239, 241, 244, 245, 247, 251, 253, 256, 272, 273, 275, 278, 279, 282, 283, 284], "themselv": [3, 7, 10, 20, 35, 38, 49, 53, 55, 57, 84, 97, 131, 132, 175, 196, 197, 201, 212, 226, 232, 241, 244, 247, 283], "incomplet": [3, 6, 7, 57, 62, 65, 194, 196, 202, 206, 208, 224, 225], "main": [3, 5, 6, 7, 10, 12, 25, 34, 35, 39, 57, 63, 82, 88, 93, 96, 121, 129, 169, 175, 186, 190, 192, 193, 197, 206, 213, 222, 225, 231, 238, 283, 284], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 24, 34, 39, 57, 58, 59, 61, 63, 64, 65, 73, 82, 84, 93, 97, 111, 116, 117, 125, 131, 138, 157, 160, 161, 190, 199, 202, 203, 207, 213, 218, 219, 222, 225, 226, 237, 239, 247, 277, 278, 283], "io": [3, 7, 85, 206, 245], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 28, 30, 31, 34, 35, 37, 38, 39, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 65, 67, 68, 69, 70, 71, 73, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 92, 93, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108, 111, 112, 115, 116, 121, 122, 125, 135, 136, 138, 140, 143, 144, 145, 151, 156, 165, 169, 171, 173, 174, 176, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 232, 233, 237, 238, 239, 241, 244, 245, 247, 251, 256, 258, 260, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 24, 25, 26, 27, 37, 42, 49, 50, 56, 57, 58, 61, 62, 65, 68, 69, 71, 87, 88, 93, 101, 132, 136, 157, 160, 190, 192, 193, 196, 197, 199, 201, 203, 218, 222, 223, 224, 232, 242, 245, 251, 253, 272, 273, 278, 283, 284], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 24, 39, 48, 57, 60, 61, 62, 65, 73, 84, 93, 97, 105, 136, 191, 193, 196, 197, 201, 202, 203, 206, 213, 218, 219, 224, 225, 238, 239, 247, 272, 283], "arithmet": [3, 39, 57, 58, 61, 88, 93, 97, 160, 167, 191, 192, 193, 195, 196, 197, 199, 200, 204, 207], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 55, 82, 84, 93, 178, 192, 193, 194, 208, 213, 216, 226, 273, 275, 278], "calcul": [3, 12, 16, 18, 25, 31, 37, 40, 49, 55, 57, 58, 59, 60, 61, 63, 65, 67, 69, 70, 71, 73, 74, 84, 88, 90, 93, 97, 100, 101, 109, 111, 112, 115, 116, 120, 123, 124, 125, 140, 143, 144, 147, 150, 166, 167, 168, 169, 171, 172, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 196, 197, 199, 201, 202, 203, 208, 213, 222, 226, 230, 238, 239, 245, 251, 254, 258, 260, 279, 282], "float": [3, 11, 18, 20, 23, 39, 48, 57, 63, 65, 72, 74, 84, 85, 88, 93, 97, 99, 105, 107, 138, 144, 186, 192, 196, 197, 206, 218, 224, 226, 237, 245, 247, 272, 275], "point": [3, 4, 6, 7, 11, 12, 16, 18, 24, 25, 29, 31, 37, 39, 40, 48, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 82, 84, 93, 97, 100, 101, 103, 105, 112, 115, 116, 117, 118, 120, 121, 123, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 151, 173, 176, 182, 185, 187, 190, 192, 193, 196, 197, 199, 201, 202, 206, 208, 212, 213, 214, 222, 224, 225, 226, 238, 241, 244, 245, 247, 251, 254, 256, 257, 258, 260, 261, 269, 272, 273, 275, 278], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 112, 115, 116, 117, 118, 120, 121, 123, 135, 138, 140, 144, 147, 150, 155, 157, 160, 163, 165, 166, 167, 168, 171, 172, 174, 175, 176, 181, 182, 185, 187, 189, 190, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 237, 239, 240, 244, 245, 247, 254, 256, 258, 261, 273, 275, 278], "evalf": [3, 6, 11, 12, 18, 25, 27, 39, 56, 61, 62, 63, 65, 76, 79, 80, 88, 93, 99, 121, 123, 138, 153, 197, 202, 206, 213, 214, 218, 226, 238, 245, 274], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 25, 29, 32, 33, 34, 35, 36, 37, 39, 49, 54, 56, 57, 59, 61, 63, 67, 69, 70, 72, 74, 79, 84, 86, 89, 91, 93, 95, 97, 107, 166, 174, 176, 189, 190, 192, 197, 199, 201, 202, 203, 206, 213, 214, 218, 219, 221, 222, 224, 225, 226, 227, 235, 237, 238, 239, 244, 248, 251, 253, 277, 278, 279, 283, 284], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 29, 33, 35, 36, 39, 56, 57, 58, 59, 61, 65, 82, 84, 85, 88, 90, 93, 107, 108, 115, 121, 127, 129, 134, 135, 171, 176, 180, 181, 182, 189, 192, 195, 196, 199, 202, 206, 208, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 228, 231, 232, 235, 237, 238, 239, 242, 244, 245, 247, 254, 257, 279, 283], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284], "importerror": 3, "extern": [3, 29, 85, 99, 103, 105, 123, 131, 186, 196, 197, 207, 214, 218, 226, 237, 238], "doc": [3, 4, 6, 7, 8, 12, 28, 39, 48, 56, 57, 73, 85, 136, 173, 196, 198, 219, 222, 237, 238, 240, 242, 244, 251, 256, 269], "latest": [3, 5, 29, 38, 240, 242, 245], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 35, 40, 49, 56, 57, 58, 59, 75, 82, 84, 85, 87, 88, 91, 93, 97, 100, 111, 132, 171, 173, 176, 181, 186, 189, 192, 193, 194, 196, 199, 201, 205, 206, 216, 218, 219, 222, 224, 225, 226, 227, 228, 230, 231, 237, 244, 256, 272, 273, 275, 277, 278, 279, 283, 284], "did": [3, 7, 19, 57, 84, 97, 111, 128, 176, 199, 203, 214, 224, 235, 245, 275, 277, 283], "explain": [3, 4, 6, 7, 18, 27, 38, 53, 57, 65, 75, 80, 193, 196, 199, 201, 203, 213], "ones": [3, 4, 10, 20, 29, 39, 48, 53, 57, 82, 84, 87, 88, 90, 93, 96, 97, 121, 144, 165, 171, 195, 199, 209, 219, 222, 227, 233, 239, 247, 251, 256, 279, 282], "typic": [3, 4, 10, 11, 20, 53, 63, 82, 97, 107, 112, 118, 122, 180, 190, 192, 194, 199, 203, 216, 238, 239, 256], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 29, 33, 34, 37, 38, 39, 48, 56, 57, 59, 63, 68, 88, 90, 93, 97, 121, 157, 169, 174, 181, 185, 192, 193, 195, 196, 197, 201, 202, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 237, 238, 239, 240, 241, 242, 273, 284], "git": [3, 8], "repositori": [3, 5, 7, 29], "vast": [3, 27, 84, 198], "wrap": [3, 4, 6, 32, 33, 34, 35, 39, 46, 57, 63, 85, 98, 186, 190, 192, 195, 196, 199, 206, 209, 225, 231, 238, 242, 245, 247, 278], "addition": [3, 6, 10, 57, 133, 169, 190, 199, 206, 226, 235, 242, 255], "ci": [3, 7, 65, 82, 206, 282], "wish": [3, 6, 12, 20, 29, 39, 57, 58, 61, 82, 97, 166, 180, 190, 241, 245, 273, 277, 279, 284], "local": [3, 30, 32, 33, 34, 57, 59, 82, 99, 128, 130, 183, 193, 199, 224, 237], "improv": [3, 4, 10, 19, 20, 57, 82, 192, 196, 199, 200, 202, 203, 205, 207, 222, 225, 231, 273, 279], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 36, 38, 39, 40, 48, 49, 52, 56, 57, 58, 60, 61, 63, 70, 74, 81, 84, 91, 93, 97, 98, 113, 116, 123, 125, 131, 135, 136, 138, 155, 156, 165, 168, 171, 187, 190, 194, 195, 196, 199, 201, 202, 207, 208, 209, 213, 218, 219, 222, 224, 225, 226, 227, 238, 244, 251, 253, 255, 258, 272, 273, 277, 278, 283], "gmpy2": [3, 196, 197], "wrapper": [3, 10, 11, 20, 33, 35, 39, 49, 57, 65, 93, 135, 183, 186, 195, 196, 199, 206, 213, 222, 225, 226, 238, 242, 244], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 23, 24, 26, 27, 33, 34, 35, 37, 38, 39, 40, 46, 48, 49, 53, 56, 57, 58, 62, 63, 65, 67, 72, 75, 77, 82, 84, 86, 87, 88, 90, 93, 94, 97, 99, 104, 107, 111, 123, 131, 138, 139, 155, 156, 157, 161, 168, 170, 173, 176, 177, 178, 181, 185, 189, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 206, 211, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 232, 235, 239, 240, 241, 242, 244, 245, 247, 251, 256, 272, 273, 275, 276, 278, 279, 284], "larg": [3, 4, 6, 12, 18, 48, 49, 57, 58, 67, 82, 84, 96, 97, 111, 117, 135, 138, 151, 176, 180, 191, 196, 197, 199, 202, 205, 206, 207, 213, 216, 218, 226, 231, 238, 245, 247, 254, 272, 277, 283], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 22, 23, 24, 32, 33, 34, 35, 37, 39, 40, 46, 48, 49, 50, 51, 53, 56, 57, 58, 59, 60, 61, 62, 65, 67, 70, 81, 82, 84, 85, 86, 87, 88, 90, 93, 94, 97, 99, 100, 107, 109, 115, 160, 165, 167, 168, 169, 171, 173, 181, 183, 186, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 208, 211, 212, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 230, 231, 232, 238, 239, 241, 244, 247, 273, 275, 278, 282, 283], "faster": [3, 18, 25, 39, 42, 57, 65, 88, 97, 98, 111, 113, 116, 117, 135, 195, 196, 197, 199, 201, 202, 203, 207, 209, 213, 218, 219, 222, 223, 225, 238, 241], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 31, 37, 39, 49, 57, 58, 59, 62, 63, 65, 66, 73, 82, 84, 85, 87, 88, 93, 94, 97, 99, 105, 107, 115, 151, 155, 156, 165, 181, 183, 185, 186, 191, 192, 196, 197, 201, 202, 203, 206, 208, 209, 211, 222, 223, 226, 238, 242, 244, 247, 275, 277, 278, 282, 283], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 23, 35, 37, 39, 48, 58, 63, 64, 66, 74, 88, 97, 99, 169, 170, 194, 196, 197, 198, 199, 201, 202, 203, 206, 213, 214, 218, 219, 222, 226, 236, 237, 238, 244, 245, 249, 262, 263, 275, 278], "oper": [3, 5, 6, 11, 18, 19, 20, 25, 27, 31, 35, 39, 48, 49, 50, 56, 57, 58, 59, 60, 61, 63, 65, 67, 75, 77, 80, 82, 87, 88, 90, 97, 99, 107, 108, 111, 116, 117, 125, 129, 135, 138, 143, 147, 148, 152, 154, 155, 156, 157, 162, 163, 166, 168, 169, 170, 171, 180, 181, 183, 188, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 209, 211, 214, 215, 218, 221, 222, 224, 225, 228, 229, 230, 231, 237, 238, 241, 244, 245, 251, 262, 266, 268, 269, 274, 275, 276, 278, 283], "poli": [3, 11, 12, 56, 57, 58, 62, 63, 65, 66, 73, 79, 84, 88, 90, 93, 97, 138, 193, 194, 198, 199, 201, 202, 203, 205, 208, 221, 222, 224, 225, 237, 269], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 39, 41, 43, 45, 46, 48, 49, 50, 51, 55, 58, 60, 62, 63, 65, 67, 72, 73, 74, 79, 85, 86, 87, 88, 94, 98, 100, 105, 107, 108, 110, 112, 115, 116, 118, 120, 121, 123, 131, 133, 136, 138, 139, 140, 142, 144, 148, 150, 152, 153, 154, 157, 159, 160, 168, 169, 171, 180, 181, 182, 183, 185, 187, 189, 195, 196, 198, 206, 208, 209, 211, 214, 218, 221, 222, 223, 224, 226, 232, 241, 244, 245, 247, 251, 255, 256, 260, 268, 269, 275, 279, 280, 283, 284], "domain": [3, 6, 10, 11, 16, 20, 37, 38, 57, 58, 60, 62, 63, 65, 76, 78, 79, 82, 84, 90, 93, 94, 97, 104, 107, 121, 138, 193, 195, 198, 199, 201, 203, 204, 221, 222, 224, 226, 269, 279, 284], "No": [3, 6, 7, 12, 27, 38, 57, 65, 72, 87, 97, 100, 108, 121, 166, 192, 202, 208, 209, 218, 219, 224, 225, 226, 231, 235, 241, 242, 244, 272, 284], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 27, 29, 37, 38, 39, 40, 45, 48, 53, 57, 58, 59, 61, 63, 65, 69, 82, 84, 87, 88, 93, 97, 98, 116, 117, 121, 123, 131, 134, 135, 138, 155, 171, 179, 190, 193, 195, 196, 197, 199, 201, 210, 213, 214, 216, 218, 219, 222, 223, 224, 225, 226, 230, 239, 244, 272, 273, 275, 276, 277, 278, 282, 283, 284], "algorithm": [3, 6, 11, 12, 18, 24, 25, 26, 27, 37, 41, 42, 47, 48, 49, 51, 53, 55, 56, 57, 58, 61, 62, 63, 69, 74, 82, 84, 87, 90, 93, 94, 97, 100, 108, 115, 135, 158, 176, 181, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 207, 211, 214, 215, 218, 219, 222, 224, 225, 226, 232, 241, 244, 268, 273, 278, 279, 283], "simplif": [3, 11, 12, 18, 32, 34, 36, 37, 39, 57, 59, 62, 63, 82, 88, 93, 99, 113, 121, 135, 138, 155, 171, 181, 202, 207, 217, 218, 222, 224, 225, 262, 263, 272, 274, 276, 277], "factor": [3, 10, 11, 12, 40, 48, 49, 56, 57, 58, 61, 62, 63, 65, 82, 84, 93, 97, 100, 107, 138, 140, 148, 152, 155, 167, 171, 176, 177, 178, 193, 196, 197, 198, 200, 201, 202, 209, 215, 216, 218, 219, 222, 224, 226, 230, 241, 255, 258, 277, 279], "matric": [3, 6, 11, 17, 18, 35, 39, 57, 58, 84, 94, 96, 107, 115, 116, 117, 121, 125, 135, 138, 140, 143, 144, 146, 154, 155, 165, 170, 181, 190, 191, 195, 201, 206, 207, 214, 216, 218, 219, 222, 224, 225, 227, 239, 240, 268, 274, 276, 277], "thu": [3, 4, 10, 11, 12, 16, 23, 24, 35, 42, 48, 49, 57, 58, 59, 63, 65, 80, 82, 84, 88, 91, 93, 96, 97, 108, 120, 125, 131, 135, 176, 181, 194, 199, 201, 203, 207, 213, 216, 218, 239, 244, 245, 256, 257, 275, 278, 283, 284], "speed": [3, 6, 10, 34, 39, 48, 57, 58, 61, 88, 97, 98, 109, 115, 116, 117, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 138, 139, 142, 145, 180, 181, 185, 190, 191, 203, 206, 207, 213, 218, 222, 238, 241, 244, 278, 279], "non": [3, 4, 11, 12, 18, 20, 25, 27, 30, 35, 37, 40, 47, 50, 56, 57, 58, 62, 63, 64, 65, 66, 67, 70, 71, 72, 84, 86, 87, 88, 89, 90, 93, 94, 96, 111, 116, 118, 123, 125, 129, 133, 134, 138, 155, 160, 170, 171, 173, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 209, 213, 214, 216, 218, 219, 221, 222, 224, 225, 226, 227, 230, 231, 232, 237, 239, 244, 247, 258, 278, 283, 284], "who": [3, 4, 6, 16, 20, 58, 59, 138, 190, 199, 206, 276], "abl": [3, 4, 6, 11, 16, 18, 20, 38, 39, 48, 53, 57, 58, 59, 68, 76, 84, 90, 93, 97, 104, 121, 133, 135, 136, 138, 139, 193, 196, 203, 222, 225, 237, 255, 277, 282, 284], "experi": [3, 123, 225, 226], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 22, 25, 28, 35, 40, 47, 57, 93, 96, 99, 138, 139, 196, 200, 206, 211, 216, 222, 225, 277, 278, 282], "interfac": [3, 7, 11, 24, 37, 57, 85, 115, 140, 166, 186, 190, 196, 199, 204, 225, 238, 239], "ipython": [3, 6, 10, 11, 12, 29, 85, 138, 186, 245, 249, 250, 281, 282], "jupyt": [3, 10, 11, 20, 245, 249], "notebook": [3, 11, 20, 29, 85, 186, 245, 281, 282], "init_sess": [3, 85, 282], "usual": [3, 10, 11, 12, 16, 18, 38, 40, 48, 56, 57, 58, 75, 82, 84, 93, 131, 157, 169, 176, 187, 189, 190, 193, 194, 196, 197, 199, 205, 206, 207, 213, 216, 222, 225, 226, 227, 231, 232, 239, 241, 245, 251, 260, 272, 275, 278, 282, 283], "flag": [3, 4, 14, 20, 37, 39, 48, 49, 53, 55, 57, 70, 72, 84, 87, 88, 89, 93, 97, 115, 121, 155, 192, 197, 199, 202, 203, 206, 207, 208, 214, 218, 219, 222, 224, 225, 232, 237, 238, 244, 247, 272, 283], "auto_symbol": [3, 85, 99], "auto_int_to_integ": [3, 85], "qt": 3, "consol": [3, 4, 12, 57, 85, 186, 192, 282], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 22, 23, 27, 32, 33, 34, 35, 36, 37, 49, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 70, 72, 73, 80, 81, 82, 84, 85, 88, 91, 92, 93, 96, 97, 98, 100, 107, 108, 110, 111, 112, 114, 115, 117, 118, 121, 125, 131, 132, 133, 134, 135, 136, 138, 139, 146, 150, 154, 155, 159, 160, 163, 166, 168, 169, 170, 171, 173, 174, 176, 178, 180, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 197, 199, 201, 202, 203, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 245, 247, 251, 253, 254, 255, 257, 258, 260, 266, 268, 273, 274, 275, 276, 277, 279, 282, 283, 284], "mathjax": [3, 7, 85, 186, 282], "preview": [3, 38, 240], "save": [3, 11, 37, 57, 93, 97, 192, 205, 224, 241], "viewer": [3, 7, 38, 206, 240], "parser": [3, 90, 99, 131, 138, 237, 268], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 47, 49, 57, 58, 60, 62, 63, 65, 69, 73, 77, 80, 83, 84, 85, 87, 90, 91, 92, 93, 98, 99, 100, 102, 103, 105, 108, 111, 121, 122, 127, 131, 133, 134, 138, 140, 143, 145, 146, 158, 161, 174, 175, 176, 177, 187, 190, 192, 197, 198, 200, 203, 204, 206, 210, 213, 216, 220, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 254, 256, 258, 259, 260, 261, 262, 268, 269, 270, 272, 275, 277, 283, 284], "parse_expr": [3, 10, 18, 27, 99], "mathematca": 3, "parse_mathematica": [3, 10, 99], "maxima": [3, 24, 99, 225], "parse_maxima": [3, 99], "antlr": [3, 99, 121], "runtim": [3, 11, 39, 57, 117], "autolev": [3, 123, 131, 268], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 46, 47, 48, 49, 55, 57, 58, 60, 61, 62, 64, 65, 67, 72, 73, 75, 80, 82, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 99, 100, 101, 107, 111, 115, 121, 123, 125, 132, 135, 136, 161, 163, 166, 171, 176, 181, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 208, 213, 214, 216, 218, 219, 221, 222, 224, 225, 226, 228, 230, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 251, 254, 255, 258, 260, 273, 275, 277, 278, 279, 282, 283, 284], "antlr4": [3, 99], "awar": [3, 4, 6, 11, 12, 19, 37, 57, 61, 87, 93, 216, 226, 245], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 31, 32, 33, 34, 39, 48, 49, 51, 53, 55, 56, 57, 58, 59, 62, 63, 65, 67, 70, 73, 76, 79, 80, 82, 84, 87, 88, 89, 90, 93, 96, 97, 100, 101, 103, 105, 107, 108, 115, 116, 117, 121, 123, 131, 133, 134, 135, 136, 138, 151, 166, 168, 171, 180, 181, 190, 191, 192, 193, 194, 197, 199, 201, 202, 206, 207, 214, 215, 216, 218, 219, 222, 224, 225, 226, 230, 231, 237, 238, 239, 240, 241, 242, 244, 245, 248, 275, 277, 278, 282, 283], "match": [3, 4, 6, 10, 12, 18, 20, 48, 49, 56, 57, 65, 70, 82, 84, 88, 93, 115, 120, 147, 172, 180, 181, 195, 202, 218, 219, 222, 223, 224, 226, 235, 237, 239, 244, 245, 257, 273], "wa": [3, 4, 10, 12, 14, 18, 20, 46, 48, 49, 51, 57, 58, 59, 65, 70, 93, 97, 99, 111, 112, 121, 123, 125, 135, 136, 166, 176, 189, 190, 191, 193, 199, 201, 202, 203, 205, 206, 215, 216, 218, 222, 224, 226, 235, 237, 240, 242, 244, 245, 273, 275, 277, 278, 281], "compil": [3, 39, 85, 98, 111, 138, 186, 206, 218, 231, 237, 238, 239, 262, 277], "4": [3, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 103, 105, 107, 108, 109, 113, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 143, 147, 150, 155, 165, 166, 168, 169, 170, 171, 172, 174, 180, 181, 182, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 237, 238, 241, 244, 245, 251, 254, 255, 256, 258, 260, 261, 272, 273, 275, 277, 278, 279, 283, 284], "clang": [3, 99], "bind": [3, 39, 206, 238], "parse_c": 3, "lfortran": [3, 99], "fortran": [3, 11, 16, 20, 37, 98, 99, 111, 138, 191, 239, 282], "satisfi": [3, 7, 10, 18, 24, 26, 34, 35, 37, 40, 45, 48, 53, 57, 58, 62, 65, 67, 80, 82, 86, 87, 93, 97, 117, 135, 155, 160, 193, 194, 199, 201, 202, 206, 212, 213, 214, 219, 222, 223, 224, 225, 226, 232, 278, 283], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 24, 25, 26, 27, 28, 31, 32, 33, 34, 37, 38, 39, 40, 42, 47, 48, 49, 54, 57, 58, 60, 62, 63, 65, 68, 70, 77, 78, 80, 81, 84, 87, 88, 89, 93, 97, 98, 99, 111, 121, 131, 140, 142, 143, 146, 155, 156, 164, 165, 167, 175, 180, 182, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 210, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 230, 231, 241, 244, 245, 248, 259, 262, 266, 273, 277, 283], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 27, 56, 57, 65, 71, 81, 88, 93, 97, 159, 160, 171, 176, 181, 193, 194, 199, 203, 213, 215, 216, 218, 219, 222, 224, 225, 231, 241, 244, 245, 254, 273, 275, 277, 278, 283], "sat": [3, 33], "solver": [3, 6, 11, 25, 33, 65, 93, 97, 120, 131, 138, 139, 195, 198, 206, 218, 219, 223, 237, 262, 263, 269, 274, 276], "ask": [3, 6, 11, 12, 15, 18, 19, 33, 34, 35, 36, 57, 69, 82, 121, 176, 193, 212, 218, 225, 244, 263, 275], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 57, 61, 63, 67, 73, 82, 84, 87, 100, 101, 103, 112, 115, 116, 120, 123, 125, 126, 127, 128, 131, 133, 134, 135, 138, 159, 160, 174, 187, 190, 192, 194, 196, 215, 218, 219, 224, 237, 258, 260, 268, 282, 283], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 226, 278], "primarili": [3, 11, 18, 39, 57, 63, 97, 100, 170, 202, 204, 238, 241, 247, 255], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 25, 29, 31, 32, 33, 34, 37, 38, 39, 49, 57, 61, 64, 65, 67, 81, 84, 90, 93, 97, 98, 99, 100, 101, 103, 104, 107, 111, 115, 121, 138, 166, 181, 189, 192, 194, 195, 196, 197, 199, 201, 202, 203, 206, 211, 212, 213, 214, 218, 222, 223, 224, 225, 226, 227, 231, 235, 237, 238, 239, 245, 256, 258, 273, 275, 278, 282], "give": [3, 4, 6, 12, 14, 18, 19, 20, 23, 24, 25, 26, 27, 32, 34, 39, 40, 46, 48, 49, 50, 51, 56, 57, 58, 59, 62, 63, 65, 67, 69, 70, 72, 73, 81, 82, 84, 85, 87, 90, 93, 96, 97, 98, 100, 103, 107, 115, 121, 138, 150, 165, 166, 168, 169, 173, 174, 176, 177, 179, 181, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 206, 207, 208, 209, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 237, 238, 239, 244, 255, 260, 275, 276, 278, 283, 284], "rudimentari": [3, 20, 199], "text": [3, 4, 6, 7, 11, 20, 29, 39, 48, 58, 62, 63, 65, 75, 82, 85, 88, 93, 97, 136, 176, 186, 191, 192, 193, 206, 213, 219, 222, 225, 226, 237], "pyglet": [3, 206], "pygletplot": [3, 192], "2d": [3, 10, 70, 71, 73, 100, 101, 103, 149, 181, 192, 206, 219, 231, 277], "3d": [3, 10, 31, 41, 70, 71, 100, 149, 172, 187, 192, 255, 257, 258, 259, 260], "evalu": [3, 6, 11, 16, 18, 19, 22, 27, 32, 33, 34, 37, 39, 57, 59, 62, 63, 65, 68, 72, 73, 82, 84, 87, 90, 93, 97, 98, 99, 107, 111, 113, 121, 135, 136, 146, 148, 150, 152, 157, 160, 168, 171, 191, 192, 196, 197, 199, 200, 202, 206, 207, 212, 213, 214, 216, 218, 219, 222, 224, 225, 226, 228, 238, 239, 240, 245, 258, 263, 272, 273, 274, 275, 277, 279], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 22, 23, 24, 26, 35, 37, 39, 56, 57, 62, 65, 69, 73, 80, 93, 97, 99, 103, 104, 105, 107, 115, 116, 117, 121, 123, 131, 135, 139, 143, 150, 153, 168, 175, 180, 190, 192, 196, 197, 199, 200, 201, 202, 205, 206, 215, 216, 218, 222, 224, 225, 231, 237, 238, 244, 245, 263, 272, 275, 279, 283], "variou": [3, 6, 7, 11, 16, 20, 37, 39, 41, 48, 56, 57, 62, 77, 82, 84, 87, 93, 118, 150, 154, 155, 166, 168, 180, 193, 194, 197, 198, 199, 201, 207, 213, 216, 219, 222, 223, 225, 239, 283], "primari": [3, 4, 6, 7, 18, 20, 57, 69, 87, 190, 193, 239, 245], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 24, 38, 39, 47, 48, 49, 51, 55, 57, 59, 62, 65, 67, 69, 70, 71, 72, 73, 74, 84, 86, 87, 90, 91, 93, 97, 98, 99, 103, 104, 105, 107, 115, 118, 120, 121, 124, 128, 130, 132, 135, 136, 138, 139, 140, 143, 144, 150, 157, 159, 160, 161, 165, 168, 169, 170, 171, 174, 176, 181, 182, 183, 185, 187, 189, 190, 192, 193, 195, 199, 201, 202, 206, 208, 218, 222, 223, 224, 225, 226, 227, 240, 245, 251, 254, 255, 258, 260, 275], "standard": [3, 7, 10, 11, 12, 18, 20, 24, 27, 39, 57, 61, 63, 65, 80, 82, 84, 85, 86, 87, 91, 93, 97, 98, 99, 110, 148, 152, 181, 187, 191, 193, 196, 197, 199, 206, 209, 214, 218, 219, 222, 225, 226, 239, 245, 248, 255, 260, 272, 275, 283], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 23, 24, 30, 38, 40, 41, 46, 48, 49, 50, 53, 57, 59, 62, 65, 73, 77, 81, 82, 84, 86, 90, 93, 96, 97, 99, 100, 103, 111, 116, 118, 120, 121, 125, 127, 128, 131, 135, 151, 165, 168, 169, 174, 176, 179, 180, 181, 183, 185, 187, 189, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 213, 216, 218, 219, 222, 223, 225, 227, 228, 231, 232, 235, 239, 241, 244, 245, 248, 251, 255, 256, 257, 258, 260, 272, 273, 275, 276, 277, 278, 283, 284], "principl": [3, 58, 88, 97, 142, 191, 193, 194, 199, 215, 224], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 23, 25, 27, 30, 31, 34, 37, 38, 39, 48, 49, 57, 58, 59, 61, 63, 64, 65, 67, 70, 71, 73, 84, 85, 87, 88, 90, 93, 94, 97, 99, 100, 105, 107, 112, 120, 121, 125, 138, 139, 143, 160, 161, 165, 166, 168, 169, 181, 186, 192, 193, 195, 196, 197, 199, 201, 202, 204, 206, 207, 213, 214, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 242, 244, 245, 247, 250, 251, 272, 273, 278, 282, 283, 284], "appropri": [3, 6, 7, 12, 16, 24, 26, 48, 57, 63, 72, 93, 111, 123, 160, 161, 171, 181, 189, 195, 196, 202, 203, 206, 212, 213, 218, 219, 224, 226, 231, 239, 256, 282], "namespac": [3, 6, 10, 30, 39, 40, 57, 197, 219, 222, 223, 237, 239, 240, 245], "dictionari": [3, 10, 11, 27, 38, 39, 46, 48, 49, 55, 57, 62, 71, 73, 86, 88, 93, 96, 97, 99, 100, 113, 116, 117, 120, 121, 123, 125, 128, 133, 135, 161, 171, 181, 190, 192, 194, 197, 199, 201, 202, 204, 206, 213, 218, 219, 222, 223, 224, 225, 226, 230, 232, 237, 241, 244, 245, 251, 272, 279], "third": [3, 4, 14, 39, 48, 49, 57, 65, 67, 71, 107, 115, 168, 174, 189, 194, 202, 216, 222, 225, 226, 242, 244, 273, 278], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 23, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 73, 74, 82, 84, 85, 87, 88, 90, 93, 96, 97, 99, 100, 105, 107, 115, 116, 120, 121, 133, 134, 138, 145, 148, 152, 154, 157, 160, 165, 166, 168, 169, 170, 171, 179, 186, 187, 191, 192, 193, 194, 196, 197, 199, 201, 202, 205, 206, 207, 208, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 226, 230, 231, 237, 238, 239, 240, 241, 242, 244, 245, 247, 255, 256, 258, 272, 273, 278, 279, 283], "default": [3, 4, 6, 7, 11, 12, 18, 20, 24, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 47, 48, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 79, 84, 85, 87, 88, 90, 93, 94, 97, 98, 99, 100, 101, 103, 105, 107, 109, 111, 112, 113, 115, 116, 117, 121, 135, 144, 161, 163, 166, 168, 169, 171, 177, 180, 181, 183, 185, 186, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 231, 232, 237, 238, 239, 241, 242, 244, 245, 247, 251, 272, 273, 277, 279, 282, 283], "translat": [3, 10, 39, 48, 57, 66, 68, 72, 74, 98, 99, 107, 110, 115, 116, 128, 130, 132, 136, 189, 192, 206, 222, 224, 238, 239, 245, 247, 256], "numpi": [3, 6, 10, 11, 20, 25, 29, 39, 57, 80, 85, 98, 105, 121, 138, 155, 165, 195, 206, 226, 231, 238, 239, 245, 272, 275], "By": [3, 12, 18, 20, 24, 32, 34, 39, 47, 56, 57, 59, 61, 62, 65, 71, 72, 76, 80, 82, 87, 88, 93, 96, 97, 98, 99, 100, 101, 105, 112, 166, 171, 192, 194, 196, 197, 199, 201, 202, 203, 205, 206, 208, 213, 215, 218, 219, 222, 224, 225, 226, 230, 232, 233, 237, 240, 244, 245, 258, 272, 277, 278, 283], "produc": [3, 6, 7, 11, 19, 20, 25, 27, 38, 48, 57, 58, 70, 84, 87, 93, 181, 196, 201, 202, 206, 213, 222, 223, 224, 226, 235, 237, 241, 242, 244, 282], "behavior": [3, 4, 10, 11, 12, 20, 48, 57, 62, 65, 84, 99, 110, 111, 131, 135, 166, 193, 194, 201, 202, 206, 207, 211, 213, 215, 218, 235, 238, 240, 244, 245, 275], "backward": [3, 8, 16, 37, 57, 88, 93, 206, 244, 283], "scipi": [3, 11, 23, 39, 57, 65, 111, 138, 165, 206, 226, 238, 245, 272, 281], "special": [3, 6, 11, 13, 18, 20, 27, 30, 31, 49, 57, 58, 60, 61, 62, 64, 72, 75, 82, 84, 88, 93, 138, 155, 160, 187, 193, 196, 199, 200, 201, 206, 215, 216, 218, 221, 222, 223, 224, 226, 237, 238, 239, 242, 244, 245, 255, 258, 260, 263, 273, 274, 278], "cupi": [3, 98], "cuda": [3, 98], "gpu": [3, 98, 138], "jax": [3, 98, 245], "xla": [3, 98], "program": [3, 7, 12, 18, 39, 41, 49, 138, 176, 191, 239, 241, 275, 277, 281, 283], "tpu": [3, 98], "compatibli": 3, "tensorflow": [3, 245], "learn": [3, 5, 7, 22, 27, 93, 136, 190, 215, 225, 272, 275, 276, 277, 281], "numexpr": [3, 245], "fast": [3, 18, 39, 57, 84, 92, 93, 97, 143, 197, 198, 199, 200, 201, 202, 203, 209, 213, 222, 224, 241, 244, 245], "alreadi": [3, 4, 10, 12, 18, 20, 24, 27, 29, 48, 49, 57, 58, 66, 67, 70, 71, 73, 82, 84, 88, 94, 97, 103, 108, 112, 121, 135, 140, 166, 168, 171, 187, 189, 190, 192, 195, 196, 199, 201, 205, 209, 215, 216, 218, 222, 225, 226, 232, 256, 258, 273, 275, 276, 277, 281, 282, 283, 284], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 24, 26, 27, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 65, 67, 70, 71, 72, 73, 74, 76, 84, 85, 86, 87, 88, 90, 93, 94, 96, 98, 99, 101, 103, 105, 107, 108, 109, 111, 116, 117, 120, 121, 125, 135, 136, 138, 144, 147, 150, 151, 154, 155, 156, 157, 159, 160, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 206, 208, 212, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 227, 231, 232, 237, 239, 241, 244, 247, 251, 254, 255, 257, 258, 260, 263, 269, 272, 273, 275, 277, 278, 279, 283], "languag": [3, 7, 11, 12, 16, 20, 39, 63, 93, 99, 111, 121, 138, 206, 211, 226, 238, 239, 275, 277, 279, 281, 283], "valid": [3, 6, 7, 10, 18, 19, 20, 32, 34, 36, 37, 38, 39, 50, 56, 57, 62, 63, 73, 93, 97, 113, 115, 116, 121, 123, 136, 140, 144, 163, 168, 178, 181, 186, 190, 196, 199, 202, 205, 206, 214, 218, 219, 222, 224, 225, 226, 245, 279, 283], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 26, 27, 30, 35, 39, 40, 48, 49, 50, 57, 61, 63, 68, 73, 75, 82, 87, 88, 90, 93, 97, 99, 120, 128, 138, 151, 165, 169, 171, 180, 189, 193, 196, 199, 202, 204, 209, 216, 219, 221, 222, 225, 226, 241, 244, 245, 248, 260, 275, 277, 278], "string": [3, 4, 6, 7, 11, 12, 20, 32, 38, 39, 41, 46, 57, 58, 59, 60, 61, 64, 70, 80, 85, 86, 87, 90, 93, 97, 99, 100, 103, 105, 111, 112, 115, 118, 142, 151, 155, 165, 169, 173, 179, 180, 181, 185, 186, 187, 192, 195, 197, 201, 206, 207, 213, 218, 222, 226, 227, 230, 231, 232, 237, 238, 239, 244, 245, 247, 249, 251, 253, 255, 274, 275, 278, 282], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 31, 33, 35, 38, 39, 40, 41, 46, 47, 48, 49, 50, 52, 53, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 72, 73, 74, 79, 80, 84, 86, 87, 88, 90, 93, 97, 99, 100, 101, 104, 105, 107, 112, 115, 116, 118, 120, 121, 123, 124, 125, 126, 129, 131, 133, 134, 135, 136, 138, 140, 142, 143, 145, 157, 158, 160, 164, 165, 168, 169, 171, 173, 176, 177, 178, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 199, 202, 204, 206, 208, 209, 212, 213, 214, 216, 218, 219, 222, 224, 225, 226, 228, 230, 231, 232, 239, 241, 244, 245, 251, 254, 258, 260, 268, 273, 275, 277, 278, 283, 284], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 34, 37, 39, 40, 42, 47, 48, 52, 56, 57, 58, 59, 63, 65, 69, 70, 80, 84, 86, 87, 88, 93, 97, 98, 99, 100, 103, 107, 111, 115, 116, 118, 120, 121, 123, 135, 136, 138, 140, 154, 157, 160, 161, 165, 167, 168, 169, 170, 171, 173, 176, 179, 180, 181, 182, 183, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 228, 231, 237, 238, 240, 241, 244, 245, 251, 253, 254, 272, 273, 275, 277, 278, 279, 283], "within": [3, 7, 10, 11, 18, 25, 37, 38, 39, 57, 63, 70, 73, 87, 88, 90, 97, 98, 100, 128, 166, 180, 181, 189, 190, 194, 196, 202, 204, 214, 222, 224, 225, 226, 237, 238, 247], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 24, 25, 26, 27, 37, 38, 39, 40, 42, 45, 48, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 69, 72, 73, 74, 75, 79, 82, 84, 87, 88, 90, 93, 94, 97, 98, 99, 101, 107, 111, 115, 116, 121, 123, 124, 125, 126, 132, 134, 136, 138, 144, 155, 161, 166, 168, 170, 171, 176, 177, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 211, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 230, 232, 235, 237, 239, 240, 242, 244, 245, 246, 247, 248, 251, 254, 255, 273, 277, 278, 279, 282, 283, 284], "subpackag": [3, 262], "f2py": [3, 39, 98, 238, 239], "ufuncifi": [3, 39, 238], "cython": [3, 39, 98, 138, 238], "codegen": [3, 20, 98, 206, 238, 243, 270], "relat": [3, 4, 6, 7, 11, 19, 32, 34, 35, 37, 40, 41, 47, 48, 55, 59, 62, 63, 73, 79, 82, 84, 88, 93, 97, 103, 110, 116, 125, 128, 131, 132, 138, 140, 145, 153, 155, 181, 185, 189, 191, 192, 193, 199, 201, 202, 203, 205, 206, 210, 212, 213, 216, 218, 219, 221, 222, 224, 225, 226, 244, 283], "reli": [3, 10, 12, 39, 93, 98, 104, 199, 205, 206, 213, 218, 225, 240, 245, 279], "llvm": 3, "gcc": [3, 239], "ifort": 3, "therefor": [3, 4, 6, 20, 24, 40, 48, 53, 57, 61, 65, 73, 86, 97, 107, 115, 187, 190, 191, 192, 196, 199, 202, 206, 222, 225, 226, 227, 232, 251, 253, 255, 256, 258, 260], "aesara": [3, 10, 39, 138], "aesaracod": [3, 10, 39, 98, 206], "aeseara": 3, "previous": [3, 4, 10, 56, 115, 129, 132, 187, 205, 218, 226, 258], "theano": [3, 10, 138, 282], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 26, 27, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 82, 84, 86, 87, 88, 89, 90, 93, 94, 96, 97, 99, 100, 103, 105, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 120, 121, 123, 125, 129, 133, 135, 136, 138, 140, 142, 143, 144, 145, 147, 148, 152, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 254, 256, 258, 272, 273, 278, 279, 282, 283, 284], "graph": [3, 6, 11, 49, 65, 86, 93, 98, 195, 206, 225, 244, 278, 282], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 56, 57, 59, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 82, 84, 87, 88, 90, 91, 93, 98, 99, 100, 101, 105, 107, 108, 111, 112, 115, 116, 117, 118, 120, 121, 125, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 144, 145, 146, 154, 155, 157, 165, 166, 170, 171, 173, 174, 177, 178, 180, 181, 185, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 206, 208, 209, 212, 213, 214, 215, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 240, 241, 244, 245, 248, 249, 254, 255, 256, 261, 262, 266, 272, 273, 275, 277, 278, 279, 282, 283], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 215], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 29, 37, 46, 49, 57, 58, 59, 61, 63, 66, 73, 77, 96, 97, 103, 112, 115, 131, 135, 139, 190, 196, 199, 201, 206, 208, 213, 219, 222, 225, 226, 237, 251, 253, 273, 275, 277], "llvm_callabl": 3, "callabl": [3, 12, 39, 48, 93, 99, 156, 201, 206, 207, 218, 235, 238, 239, 244, 245, 246], "unlik": [3, 6, 11, 12, 18, 19, 36, 58, 84, 93, 97, 99, 121, 189, 199, 206, 219, 222, 225, 241, 242, 275, 277, 278, 279, 282], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 23, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 70, 73, 74, 76, 79, 82, 84, 85, 86, 87, 88, 93, 94, 97, 98, 99, 100, 101, 107, 108, 111, 115, 116, 120, 121, 122, 123, 124, 132, 133, 134, 135, 136, 144, 148, 152, 155, 165, 166, 167, 168, 169, 170, 171, 176, 180, 181, 183, 185, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 212, 214, 218, 219, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 237, 238, 239, 241, 244, 245, 247, 251, 253, 255, 256, 261, 273, 275, 276, 278, 282, 283, 284], "assum": [3, 6, 11, 12, 15, 18, 20, 24, 26, 34, 39, 40, 41, 46, 48, 56, 57, 58, 59, 62, 63, 65, 67, 74, 75, 82, 84, 93, 97, 100, 103, 107, 120, 121, 127, 133, 134, 135, 136, 138, 144, 166, 170, 171, 181, 185, 187, 193, 194, 196, 199, 202, 204, 206, 213, 214, 216, 218, 219, 222, 223, 225, 226, 230, 231, 232, 239, 244, 247, 254, 256, 260, 263, 276, 278, 281, 283, 284], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 35, 38, 39, 40, 41, 48, 50, 53, 56, 57, 58, 61, 63, 65, 67, 68, 69, 82, 85, 87, 88, 90, 91, 93, 97, 98, 99, 101, 115, 116, 121, 123, 131, 135, 136, 138, 143, 155, 171, 175, 176, 177, 190, 192, 193, 196, 197, 199, 201, 202, 203, 206, 211, 213, 214, 215, 218, 219, 222, 224, 225, 226, 227, 231, 237, 240, 242, 244, 245, 256, 275, 278], "captur": [3, 57, 244], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 24, 27, 38, 39, 57, 58, 65, 81, 84, 85, 87, 88, 90, 93, 97, 98, 99, 104, 107, 116, 120, 121, 129, 135, 138, 139, 143, 144, 155, 167, 171, 180, 181, 185, 186, 187, 190, 196, 199, 202, 206, 207, 216, 218, 219, 221, 222, 224, 226, 231, 237, 238, 239, 241, 244, 245, 251, 275, 277, 278, 279, 282, 283, 284], "suit": [3, 4, 7, 18, 20, 24, 38, 192, 202, 235, 237], "stat": [3, 262, 269], "sampl": [3, 8, 16, 48, 60, 105, 155, 192, 206, 226, 273, 277], "At": [3, 10, 18, 20, 24, 37, 53, 63, 65, 84, 97, 100, 101, 111, 176, 180, 190, 201, 216, 245], "least": [3, 4, 7, 10, 14, 18, 35, 37, 39, 48, 57, 63, 69, 81, 82, 84, 93, 97, 98, 116, 151, 165, 173, 193, 194, 196, 197, 199, 201, 202, 213, 215, 218, 222, 224, 225, 226, 239, 283], "random": [3, 6, 10, 41, 46, 48, 49, 55, 58, 67, 70, 71, 92, 93, 97, 155, 167, 192, 199, 206, 236, 237, 240, 244, 275, 279, 283], "pymc": [3, 226], "manipul": [3, 11, 15, 16, 18, 38, 39, 40, 48, 57, 63, 65, 82, 97, 98, 114, 121, 131, 136, 169, 189, 195, 196, 197, 200, 205, 206, 208, 215, 218, 229, 244, 262, 268, 269, 272, 273, 274, 275, 276, 277, 279, 282, 283], "use_symengin": 3, "physic": [3, 6, 16, 39, 50, 93, 97, 100, 101, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 191, 200, 226, 241, 244, 258, 277, 283], "mechan": [3, 20, 57, 80, 84, 100, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 153, 157, 160, 166, 168, 169, 170, 173, 180, 181, 188, 191, 268], "liealgebra": [3, 86], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 23, 28, 35, 39, 47, 48, 49, 57, 59, 69, 85, 86, 87, 88, 93, 98, 111, 118, 121, 135, 138, 155, 171, 176, 189, 190, 203, 205, 213, 214, 215, 218, 222, 225, 230, 240, 242, 244, 272, 273, 275, 277, 278, 279, 282, 283], "configur": [3, 4, 5, 10, 49, 87, 107, 115, 116, 124, 125, 128, 130, 131, 133, 135, 206], "otherwis": [3, 4, 14, 18, 19, 20, 37, 38, 39, 48, 49, 53, 56, 57, 58, 61, 63, 65, 66, 67, 70, 71, 72, 73, 82, 84, 86, 87, 89, 93, 96, 97, 99, 105, 107, 109, 112, 120, 121, 156, 161, 167, 185, 188, 189, 193, 197, 199, 201, 202, 204, 206, 208, 209, 211, 212, 214, 218, 219, 222, 223, 224, 225, 226, 227, 235, 237, 239, 244, 245, 272, 273, 282], "ordinari": [3, 18, 19, 22, 37, 39, 48, 57, 61, 62, 63, 65, 75, 79, 80, 84, 94, 107, 131, 193, 195, 196, 205, 212, 222, 227, 241, 277, 283], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 46, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 100, 101, 103, 105, 107, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 143, 145, 146, 147, 148, 149, 151, 152, 155, 160, 161, 166, 168, 169, 170, 171, 172, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 237, 238, 239, 240, 242, 244, 245, 247, 251, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 29, 30, 38, 49, 56, 57, 58, 65, 69, 84, 88, 93, 121, 171, 190, 192, 193, 194, 199, 201, 206, 213, 215, 216, 218, 222, 224, 225, 231, 237, 244, 258, 279], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 57, 82, 84, 87, 88, 99, 165, 196, 216, 218, 222, 224, 273, 278], "anywher": [3, 4, 6, 10, 18, 39, 57, 65, 71, 171, 247, 277], "els": [3, 4, 10, 11, 12, 18, 19, 20, 23, 39, 47, 49, 53, 57, 58, 65, 67, 71, 73, 74, 82, 84, 87, 93, 97, 107, 171, 181, 192, 197, 201, 202, 206, 207, 214, 218, 222, 224, 225, 230, 232, 237, 244, 247, 251, 254, 272, 278], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 23, 24, 25, 27, 28, 33, 34, 37, 39, 40, 43, 47, 49, 56, 57, 58, 59, 62, 63, 64, 65, 70, 71, 82, 84, 87, 90, 93, 97, 98, 99, 107, 108, 111, 125, 137, 176, 187, 189, 190, 193, 194, 196, 197, 200, 205, 206, 214, 215, 219, 222, 225, 226, 231, 238, 239, 245, 251, 255, 258, 260, 272, 275, 276, 277, 278, 281, 283], "softwar": [3, 7, 84, 200, 277], "itself": [3, 4, 6, 7, 10, 11, 20, 35, 46, 48, 49, 55, 57, 59, 62, 63, 70, 74, 79, 97, 116, 120, 121, 136, 161, 168, 187, 189, 192, 193, 196, 199, 201, 202, 206, 214, 215, 218, 225, 230, 231, 232, 239, 241, 244, 260, 277], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 27, 31, 33, 38, 39, 40, 45, 48, 52, 55, 56, 60, 63, 73, 75, 80, 81, 82, 87, 88, 91, 94, 107, 115, 121, 133, 134, 136, 138, 139, 145, 155, 169, 176, 179, 184, 187, 188, 190, 192, 193, 195, 197, 198, 199, 201, 203, 204, 206, 207, 213, 218, 219, 222, 223, 224, 225, 226, 237, 239, 244, 245, 249, 257, 258, 259, 266, 268, 269, 273, 274, 275, 276, 281], "beyond": [3, 18, 23, 51, 73, 97, 135, 193, 196, 215, 218, 279], "control": [3, 5, 10, 12, 14, 18, 20, 38, 40, 57, 58, 61, 82, 87, 88, 135, 138, 151, 155, 166, 167, 171, 175, 202, 203, 207, 214, 219, 225, 244, 268, 272], "pytest": [3, 4, 10, 234, 240, 242, 245, 270], "entir": [3, 4, 18, 48, 57, 58, 61, 62, 65, 71, 73, 82, 96, 113, 132, 136, 181, 193, 195, 201, 214, 231, 240, 242, 277, 283], "import_modul": 3, "own": [3, 5, 6, 12, 20, 33, 41, 48, 49, 57, 73, 101, 115, 121, 138, 201, 206, 213, 218, 222, 241, 244, 245, 277], "runner": [3, 237], "access": [3, 6, 7, 11, 12, 18, 20, 32, 33, 34, 39, 57, 65, 86, 87, 90, 93, 98, 101, 107, 108, 115, 116, 120, 121, 139, 180, 181, 187, 190, 192, 196, 197, 199, 201, 218, 222, 226, 227, 230, 238, 239, 255, 258, 278, 282], "script": [3, 5, 6, 11, 30, 65, 186, 238], "cloudpickl": 3, "effect": [3, 6, 10, 20, 25, 29, 48, 50, 57, 74, 82, 84, 88, 93, 100, 121, 123, 135, 143, 171, 181, 192, 196, 199, 203, 205, 222, 275], "pickl": 3, "util": [3, 4, 5, 6, 7, 23, 24, 37, 44, 46, 48, 49, 62, 63, 68, 69, 70, 73, 87, 88, 97, 98, 141, 175, 178, 195, 199, 203, 206, 218, 219, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 263, 268, 269], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 29, 38, 57, 68, 82, 84, 93, 149, 151, 192, 195, 197, 203, 206, 213, 216, 222, 223, 232, 235, 237, 242, 245], "pdf": [3, 7, 8, 28, 37, 38, 48, 58, 60, 62, 79, 84, 93, 97, 100, 101, 105, 192, 200, 205, 206, 209, 215, 218, 219, 222, 226, 244, 251], "view": [3, 6, 8, 11, 27, 39, 40, 57, 93, 100, 173, 176, 190, 192, 199, 206, 222, 225, 239, 241, 244], "host": [3, 7], "onlin": [3, 6, 116, 219, 244], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 27, 39, 123, 240, 273], "reproduc": [3, 202, 237, 283], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 31, 33, 37, 39, 46, 48, 53, 58, 61, 64, 72, 74, 82, 86, 90, 93, 97, 100, 103, 112, 121, 138, 149, 155, 165, 170, 171, 174, 189, 190, 192, 195, 196, 197, 199, 201, 202, 203, 206, 207, 216, 218, 219, 222, 223, 225, 226, 228, 230, 231, 232, 240, 245, 249, 273, 275, 278, 282, 283], "asv": 3, "airspe": 3, "veloc": [3, 111, 112, 115, 116, 118, 123, 124, 125, 128, 129, 130, 132, 135, 136, 138, 145, 173, 176, 180, 181, 185, 187, 190, 258, 260], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 38, 40, 47, 48, 49, 51, 52, 55, 56, 57, 58, 62, 65, 67, 72, 73, 82, 84, 88, 93, 96, 97, 107, 111, 115, 116, 118, 120, 121, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 150, 171, 175, 176, 180, 181, 187, 189, 190, 193, 196, 199, 201, 207, 213, 216, 218, 219, 222, 225, 226, 230, 239, 244, 245, 251, 253, 258, 273], "properli": [4, 11, 20, 38, 57, 63, 69, 82, 93, 117, 121, 133, 148, 152, 155, 169, 194, 196, 206, 222, 225, 235, 239, 245, 279, 284], "current": [4, 7, 10, 12, 18, 23, 31, 34, 37, 38, 39, 40, 41, 48, 51, 52, 54, 55, 56, 57, 59, 63, 65, 67, 69, 72, 77, 80, 82, 84, 86, 88, 93, 97, 99, 100, 104, 111, 115, 121, 131, 165, 170, 171, 175, 179, 190, 192, 193, 194, 195, 197, 199, 202, 203, 205, 206, 207, 213, 216, 218, 219, 221, 222, 223, 224, 225, 226, 232, 237, 238, 239, 241, 255, 269, 279, 284], "updat": [4, 10, 12, 29, 57, 125, 151, 161, 164, 165, 167, 191, 199, 202, 206, 219, 232, 242], "continu": [4, 6, 7, 10, 16, 19, 20, 37, 39, 47, 49, 51, 57, 62, 63, 65, 82, 85, 88, 97, 104, 105, 166, 169, 186, 197, 199, 202, 219, 221, 222, 230, 274], "someon": [4, 222, 241, 276], "warn": [4, 6, 12, 20, 57, 58, 72, 99, 181, 190, 194, 206, 222, 224, 235, 237, 239, 243, 244, 270, 279], "screen": [4, 11, 85, 186, 190, 237, 282], "indic": [4, 6, 12, 15, 18, 24, 26, 37, 38, 39, 40, 41, 46, 48, 49, 50, 52, 53, 55, 56, 57, 60, 61, 62, 65, 67, 72, 73, 82, 84, 87, 88, 90, 93, 96, 97, 108, 120, 125, 155, 166, 168, 169, 171, 176, 180, 181, 191, 195, 196, 197, 201, 202, 203, 206, 213, 214, 215, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 244, 279], "remov": [4, 10, 18, 23, 32, 33, 48, 51, 55, 57, 61, 63, 72, 73, 82, 87, 88, 93, 97, 100, 103, 112, 115, 128, 130, 135, 155, 171, 197, 199, 202, 204, 205, 206, 218, 219, 222, 224, 225, 227, 228, 238, 239, 240, 242, 244, 245, 272, 283], "futur": [4, 12, 18, 19, 39, 40, 57, 82, 84, 88, 93, 99, 115, 120, 123, 131, 135, 171, 175, 188, 192, 194, 205, 206, 218, 222, 231, 237, 240, 242, 245, 268, 278, 284], "chanc": [4, 12, 19, 57, 85, 216, 226, 278], "break": [4, 6, 10, 20, 38, 39, 49, 57, 58, 97, 189, 203, 206, 214, 244], "opportun": [4, 6, 218], "messag": [4, 10, 58, 85, 240, 242], "wrong": [4, 7, 10, 48, 57, 58, 65, 67, 93, 181, 196, 222, 240, 275, 279], "answer": [4, 18, 20, 48, 57, 61, 79, 82, 84, 87, 93, 97, 176, 199, 203, 215, 216, 218, 224, 226, 241, 247, 277, 279, 283], "made": [4, 7, 10, 11, 12, 18, 20, 26, 51, 53, 57, 58, 63, 66, 67, 70, 73, 74, 84, 87, 93, 97, 99, 121, 132, 135, 138, 190, 193, 197, 199, 201, 202, 206, 207, 213, 214, 215, 218, 222, 224, 225, 226, 239, 244, 247, 260, 278], "lightli": 4, "fix": [4, 6, 9, 10, 39, 48, 50, 53, 55, 58, 62, 65, 69, 86, 100, 101, 103, 112, 115, 118, 123, 132, 138, 155, 160, 164, 167, 171, 176, 181, 185, 189, 190, 192, 196, 199, 201, 202, 203, 206, 212, 216, 224, 226, 244, 251, 253], "worth": [4, 18, 20, 181, 256, 258], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 29, 38, 39, 48, 58, 62, 63, 82, 116, 121, 123, 136, 138, 139, 165, 176, 185, 192, 201, 202, 213, 216, 222, 275, 277, 278, 281, 283], "seek": [4, 224], "stabl": [4, 6, 20, 57, 85, 93, 99, 103, 107, 272], "done": [4, 6, 10, 11, 12, 16, 20, 33, 34, 36, 37, 38, 39, 48, 50, 55, 57, 58, 59, 62, 65, 68, 69, 82, 84, 88, 93, 97, 115, 121, 123, 129, 136, 138, 157, 166, 167, 168, 171, 173, 174, 181, 187, 189, 190, 192, 193, 195, 199, 202, 203, 205, 206, 207, 215, 218, 219, 222, 224, 225, 226, 231, 232, 237, 238, 241, 245, 255, 256, 272, 275, 277, 278, 279], "exist": [4, 10, 11, 16, 18, 20, 25, 27, 37, 38, 41, 48, 57, 61, 67, 69, 72, 73, 74, 75, 84, 87, 93, 97, 103, 161, 187, 190, 192, 193, 194, 195, 199, 201, 206, 213, 214, 216, 219, 222, 224, 225, 237, 245, 256, 277, 279, 284], "necessarili": [4, 6, 18, 35, 57, 58, 59, 82, 84, 87, 116, 193, 194, 201, 202, 204, 218, 222, 224, 225], "supplant": 4, "old": [4, 10, 11, 12, 57, 58, 59, 85, 135, 140, 175, 176, 186, 192, 193, 197, 206, 207, 218, 222, 225, 227, 272], "sometim": [4, 6, 7, 11, 12, 18, 20, 38, 39, 57, 62, 65, 81, 82, 107, 131, 135, 163, 171, 190, 193, 196, 201, 206, 208, 213, 215, 219, 222, 224, 235, 244, 272, 279], "alongsid": [4, 10, 20, 90], "newer": [4, 11, 189, 224], "solveset": [4, 20, 25, 27, 138, 204, 220, 221, 224, 263, 284], "superior": [4, 206], "replac": [4, 6, 10, 11, 12, 18, 37, 39, 48, 56, 57, 58, 61, 62, 63, 65, 67, 71, 84, 87, 88, 93, 97, 98, 99, 111, 113, 115, 138, 160, 166, 181, 193, 199, 202, 203, 207, 213, 215, 216, 218, 222, 224, 225, 232, 233, 244, 245, 247, 272, 281], "older": [4, 7, 11, 80, 121, 196, 206, 224], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 39, 41, 53, 56, 57, 65, 70, 82, 84, 88, 89, 93, 100, 102, 103, 115, 116, 117, 121, 124, 125, 128, 130, 131, 133, 135, 138, 174, 195, 199, 203, 204, 205, 206, 208, 218, 219, 221, 222, 223, 226, 268, 273, 274, 277, 279, 282], "remain": [4, 10, 11, 20, 33, 34, 39, 48, 49, 51, 53, 57, 58, 63, 82, 88, 97, 99, 108, 121, 170, 187, 189, 190, 201, 202, 203, 212, 215, 216, 222, 223, 224, 226, 228, 232, 241, 244, 245, 255, 260, 272, 275, 277, 278, 279], "intact": [4, 10, 39, 238], "cogniz": 4, "properti": [4, 11, 15, 20, 33, 34, 37, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 56, 57, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 80, 82, 84, 88, 90, 93, 97, 100, 101, 103, 104, 107, 112, 115, 116, 118, 120, 136, 138, 140, 142, 145, 146, 149, 150, 155, 156, 157, 159, 160, 167, 169, 171, 173, 176, 178, 179, 181, 182, 183, 187, 190, 191, 192, 194, 195, 196, 197, 199, 201, 202, 205, 208, 209, 212, 213, 214, 216, 219, 222, 225, 226, 231, 232, 237, 239, 240, 251, 254, 255, 256, 258, 260, 279], "attr": [4, 39], "imposs": [4, 6, 10, 11, 20, 57, 196, 215, 222, 223, 235, 275, 283], "later": [4, 10, 16, 39, 48, 82, 87, 88, 111, 117, 118, 123, 125, 126, 133, 135, 136, 138, 145, 180, 189, 196, 199, 205, 206, 207, 216, 218, 222, 241, 255, 272, 273, 275, 277, 278, 283], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 27, 28, 29, 31, 32, 34, 35, 38, 39, 48, 49, 50, 51, 57, 61, 63, 65, 67, 68, 69, 71, 72, 73, 77, 79, 83, 84, 86, 93, 97, 100, 101, 107, 111, 112, 113, 115, 116, 117, 118, 120, 121, 125, 135, 136, 166, 168, 169, 171, 175, 180, 181, 189, 190, 191, 193, 195, 196, 201, 203, 206, 208, 213, 218, 219, 220, 222, 226, 230, 231, 237, 238, 239, 240, 241, 242, 251, 253, 255, 258, 259, 266, 269, 272, 274, 275, 277, 278, 279, 283], "mark": [4, 6, 7, 105, 144, 156, 219, 235, 240, 242], "explicitli": [4, 10, 11, 18, 20, 39, 48, 49, 57, 58, 60, 63, 65, 70, 74, 90, 93, 98, 107, 121, 180, 181, 192, 194, 196, 197, 199, 202, 206, 218, 222, 224, 242, 275, 279, 282, 284], "privat": [4, 6, 57, 58, 121, 192, 239], "experiment": [4, 218], "With": [4, 12, 19, 29, 39, 56, 57, 61, 82, 97, 124, 125, 126, 132, 134, 135, 144, 168, 171, 190, 192, 193, 194, 196, 197, 204, 205, 206, 213, 218, 227, 244, 277, 278], "being": [4, 7, 10, 11, 12, 14, 18, 19, 35, 37, 39, 48, 49, 55, 56, 57, 58, 62, 63, 65, 67, 69, 70, 73, 74, 82, 87, 88, 93, 94, 97, 100, 101, 103, 111, 120, 121, 123, 135, 136, 138, 139, 167, 176, 183, 187, 189, 190, 191, 192, 193, 195, 196, 201, 202, 203, 205, 206, 215, 216, 218, 219, 222, 223, 224, 225, 226, 232, 235, 237, 241, 242, 244, 245, 247, 251, 256, 260, 277, 279], "decid": [4, 6, 16, 18, 19, 20, 38, 56, 88, 111, 135, 164, 175, 196, 199, 201, 202, 206, 222, 225, 239, 279], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 25, 39, 49, 55, 57, 61, 65, 82, 85, 91, 93, 116, 117, 121, 123, 128, 131, 135, 142, 176, 186, 190, 196, 199, 200, 203, 206, 214, 216, 218, 222, 225, 235, 241, 242, 244, 245, 272, 273, 277, 278, 279], "confus": [4, 7, 10, 11, 18, 57, 62, 87, 144, 190, 194, 202, 225, 272, 273, 275], "unnecessari": [4, 6, 7, 35, 39, 202, 205, 226, 237, 276], "redund": [4, 18, 48, 55, 87, 93, 222, 239], "usabl": [4, 196, 197, 206, 225, 277], "breakag": 4, "serious": 4, "taken": [4, 11, 39, 40, 45, 48, 55, 56, 57, 62, 63, 65, 74, 88, 97, 107, 109, 111, 112, 135, 138, 168, 174, 181, 185, 191, 192, 196, 201, 202, 206, 209, 213, 215, 216, 225, 226, 231, 239, 244, 251], "commun": [4, 7, 29, 191, 222, 224, 226, 279], "inde": [4, 16, 20, 45, 48, 56, 82, 193, 216, 222, 233, 237, 277], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 27, 30, 34, 37, 39, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 70, 71, 73, 84, 93, 97, 98, 100, 101, 105, 107, 108, 111, 112, 115, 116, 121, 125, 128, 130, 131, 132, 134, 136, 142, 144, 145, 148, 152, 157, 160, 165, 166, 168, 169, 174, 176, 178, 180, 181, 182, 189, 190, 192, 195, 196, 199, 200, 201, 202, 206, 208, 216, 218, 219, 222, 224, 225, 226, 227, 228, 244, 245, 251, 254, 255, 256, 268, 272, 277, 278, 279], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 27, 32, 34, 38, 49, 57, 58, 61, 69, 74, 82, 84, 93, 97, 118, 121, 139, 165, 169, 173, 174, 176, 180, 181, 189, 190, 192, 202, 203, 205, 206, 216, 218, 222, 224, 225, 226, 240, 244, 245, 256, 272, 273, 275, 276, 277, 278, 281, 283], "count": [4, 7, 11, 49, 56, 57, 58, 62, 67, 87, 93, 96, 97, 166, 202, 214, 215, 218, 225, 226, 232, 241, 244], "basi": [4, 57, 59, 86, 90, 93, 112, 128, 130, 156, 165, 166, 168, 171, 173, 176, 179, 180, 181, 187, 189, 191, 193, 195, 197, 202, 205, 216, 218, 224, 225, 227, 232, 254, 255, 258, 281], "exact": [4, 10, 11, 12, 18, 20, 25, 35, 56, 57, 58, 61, 67, 72, 79, 82, 84, 88, 93, 100, 138, 165, 196, 197, 199, 202, 213, 218, 222, 224, 237, 247, 275, 277, 282], "rule": [4, 7, 10, 16, 18, 20, 39, 48, 49, 56, 57, 65, 80, 82, 84, 87, 88, 93, 100, 121, 152, 155, 176, 181, 187, 190, 191, 203, 205, 206, 207, 212, 216, 218, 222, 232, 244, 245, 258, 275, 278], "doesn": [4, 6, 10, 12, 20, 39, 81, 121, 125, 135, 138, 190, 194, 203, 205, 215, 218, 225, 284], "constitut": [4, 7, 11, 84, 97, 206], "yet": [4, 5, 12, 18, 20, 32, 34, 37, 38, 61, 84, 135, 151, 193, 196, 197, 201, 203, 205, 214, 222, 225, 273], "fulli": [4, 6, 10, 18, 48, 57, 74, 84, 87, 99, 100, 101, 115, 121, 138, 171, 189, 196, 197, 203, 213, 226, 232, 248], "codifi": 4, "clean": [4, 237], "distinct": [4, 7, 11, 14, 18, 20, 26, 39, 48, 49, 57, 58, 62, 70, 82, 87, 93, 97, 120, 189, 196, 201, 202, 206, 214, 216, 283], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 29, 35, 37, 38, 39, 40, 41, 49, 56, 57, 62, 63, 65, 84, 88, 91, 93, 103, 108, 111, 115, 121, 123, 125, 126, 135, 161, 170, 173, 174, 180, 189, 191, 192, 193, 195, 196, 197, 199, 201, 206, 213, 214, 215, 216, 218, 222, 224, 225, 237, 238, 255, 256, 260, 275, 277, 278, 283], "categor": [4, 93, 193], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 23, 24, 25, 26, 29, 30, 37, 56, 57, 74, 84, 87, 93, 98, 117, 131, 151, 188, 191, 200, 201, 203, 206, 214, 215, 224, 225, 237, 239, 241, 242, 244, 247, 268, 274, 275, 278, 283], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 23, 24, 25, 28, 29, 33, 34, 39, 40, 41, 46, 47, 48, 49, 55, 56, 57, 58, 59, 61, 62, 63, 65, 73, 74, 75, 79, 80, 82, 84, 87, 88, 93, 96, 97, 98, 99, 100, 103, 107, 111, 116, 121, 122, 123, 128, 129, 130, 133, 135, 136, 138, 139, 161, 166, 171, 180, 186, 187, 189, 190, 192, 193, 196, 197, 199, 201, 202, 203, 206, 207, 213, 215, 216, 218, 219, 222, 224, 225, 226, 230, 231, 238, 239, 241, 242, 244, 245, 256, 258, 260, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283], "guidelin": [4, 8, 27, 222], "exhaust": [4, 18, 216, 244, 276], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 29, 31, 38, 48, 49, 56, 57, 58, 59, 61, 63, 65, 67, 69, 72, 73, 81, 82, 84, 87, 88, 93, 96, 97, 103, 107, 108, 120, 121, 123, 125, 129, 139, 171, 173, 176, 177, 187, 189, 193, 194, 196, 197, 199, 201, 202, 206, 207, 208, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 233, 237, 239, 244, 245, 251, 253, 258, 273, 275, 276, 277, 278, 283], "posit": [4, 10, 11, 12, 18, 19, 20, 24, 32, 33, 34, 35, 36, 38, 39, 40, 41, 46, 48, 49, 50, 52, 53, 56, 57, 58, 59, 61, 62, 63, 65, 67, 69, 70, 73, 82, 84, 86, 87, 88, 89, 93, 94, 96, 97, 100, 101, 103, 107, 109, 115, 118, 121, 123, 125, 128, 130, 132, 135, 136, 138, 140, 143, 145, 149, 166, 169, 171, 182, 183, 185, 187, 189, 190, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 211, 212, 214, 215, 216, 218, 219, 222, 224, 225, 226, 227, 232, 244, 251, 254, 255, 256, 258, 260, 261, 279, 283, 284], "convent": [4, 6, 7, 9, 20, 48, 49, 53, 56, 57, 58, 62, 63, 65, 67, 72, 82, 84, 87, 99, 100, 101, 103, 107, 110, 123, 138, 140, 144, 165, 166, 168, 173, 174, 187, 192, 206, 222, 223, 225, 226, 232, 260, 275, 283], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 27, 30, 31, 33, 34, 37, 39, 40, 41, 47, 48, 49, 52, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 80, 82, 84, 85, 88, 90, 93, 97, 100, 101, 105, 111, 112, 115, 118, 120, 121, 123, 124, 128, 130, 131, 132, 136, 138, 139, 142, 148, 150, 152, 157, 160, 166, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 208, 209, 212, 213, 214, 216, 218, 219, 222, 224, 225, 226, 227, 231, 232, 238, 239, 240, 245, 246, 247, 251, 253, 254, 255, 256, 257, 258, 260, 261, 275, 277, 283], "And": [4, 10, 12, 19, 20, 22, 23, 33, 48, 49, 56, 57, 58, 65, 82, 87, 88, 93, 96, 115, 143, 190, 192, 194, 202, 203, 206, 214, 218, 219, 224, 225, 226, 244, 245, 256, 283], "aren": [4, 10, 11, 20, 39, 57, 121, 205, 225], "don": [4, 10, 12, 19, 20, 34, 39, 82, 87, 93, 98, 99, 111, 121, 180, 189, 190, 196, 206, 216, 225, 235, 240, 260, 272, 273, 277, 278, 283], "form": [4, 7, 10, 11, 16, 18, 20, 25, 31, 34, 35, 36, 37, 39, 40, 47, 48, 49, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 70, 73, 77, 79, 80, 82, 84, 86, 88, 90, 92, 93, 97, 99, 100, 101, 103, 104, 107, 111, 112, 115, 116, 117, 120, 121, 123, 125, 128, 130, 131, 132, 133, 134, 136, 138, 139, 148, 151, 152, 153, 155, 165, 166, 169, 171, 173, 176, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 231, 232, 237, 238, 244, 251, 254, 255, 257, 258, 260, 266, 273, 277, 278, 279, 282, 283, 284], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 31, 35, 39, 40, 47, 48, 53, 57, 58, 61, 63, 65, 82, 84, 93, 97, 99, 104, 105, 107, 115, 121, 154, 165, 168, 171, 174, 181, 186, 190, 192, 193, 194, 196, 197, 201, 202, 206, 213, 214, 218, 219, 222, 224, 225, 227, 228, 231, 232, 241, 245, 247, 248], "intern": [4, 10, 11, 12, 18, 19, 23, 37, 39, 40, 48, 57, 60, 61, 62, 65, 73, 74, 77, 89, 93, 97, 101, 103, 105, 123, 135, 144, 165, 166, 176, 193, 195, 197, 198, 200, 202, 204, 206, 216, 218, 221, 222, 223, 224, 225, 226, 230, 232, 235, 239, 241, 244, 269, 278, 282], "Such": [4, 6, 18, 39, 57, 73, 125, 193, 194, 201, 207, 215, 216, 218, 272, 278], "prefix": [4, 39, 57, 93, 97, 175, 178, 179, 196, 199, 203, 206, 219, 222, 238, 239, 244, 268], "underscor": [4, 6, 10, 57, 93, 222, 232, 240], "_": [4, 6, 7, 10, 12, 14, 16, 20, 33, 34, 38, 45, 46, 48, 49, 50, 53, 56, 57, 58, 59, 60, 61, 62, 63, 65, 68, 70, 71, 72, 73, 82, 84, 87, 88, 89, 90, 91, 93, 95, 97, 99, 107, 133, 136, 138, 150, 171, 176, 180, 186, 189, 191, 197, 202, 205, 206, 207, 209, 213, 214, 215, 216, 218, 219, 222, 223, 224, 227, 244, 254, 256, 282], "univers": [4, 11, 39, 191, 200, 214, 219, 224, 225], "adher": [4, 7, 82], "codebas": [4, 10, 18, 196, 235], "anyth": [4, 6, 7, 10, 12, 20, 37, 39, 57, 58, 68, 72, 93, 121, 145, 155, 203, 206, 212, 214, 218, 222, 224, 238, 244, 247, 275], "were": [4, 7, 10, 11, 12, 14, 18, 20, 38, 49, 51, 57, 58, 63, 74, 82, 88, 93, 97, 98, 99, 111, 120, 135, 180, 187, 190, 193, 199, 200, 201, 202, 205, 206, 207, 215, 218, 224, 244, 245, 247, 275, 277, 278, 282, 283], "incorrect": [4, 7, 10, 19, 20, 25, 48, 57, 67, 97, 105, 185, 197, 222, 225, 238, 241, 242], "bug": [4, 6, 18, 20, 24, 26, 29, 37, 58, 196, 214, 222, 225, 275], "despit": [4, 27, 57, 283], "sai": [4, 7, 11, 12, 16, 18, 40, 47, 56, 57, 58, 86, 111, 116, 121, 131, 138, 176, 189, 190, 193, 194, 195, 199, 201, 205, 206, 213, 216, 219, 222, 224, 225, 226, 245, 272, 277, 283], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 27, 29, 39, 48, 49, 51, 53, 57, 58, 59, 65, 85, 88, 93, 97, 99, 100, 101, 111, 117, 121, 123, 124, 125, 128, 129, 135, 138, 140, 171, 180, 186, 190, 194, 196, 201, 202, 206, 207, 213, 214, 218, 219, 222, 224, 225, 226, 233, 237, 240, 244, 245, 255, 276, 277, 278, 283], "recent": [4, 10, 12, 15, 18, 19, 20, 23, 24, 25, 26, 27, 32, 33, 34, 39, 40, 49, 57, 58, 61, 65, 67, 84, 87, 88, 89, 90, 91, 93, 95, 96, 99, 107, 191, 193, 196, 197, 199, 202, 205, 213, 214, 222, 224, 225, 235, 238, 240, 242, 244, 245, 247, 275, 279], "best": [4, 8, 12, 24, 25, 28, 29, 39, 57, 65, 82, 84, 98, 170, 192, 203, 206, 215, 216, 218, 222, 225, 230, 238, 271, 275, 276, 282, 283], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 26, 32, 34, 35, 36, 37, 39, 40, 41, 48, 57, 58, 59, 60, 61, 63, 67, 68, 70, 72, 73, 84, 85, 86, 90, 93, 97, 99, 100, 101, 107, 113, 115, 117, 118, 120, 130, 136, 139, 150, 163, 165, 167, 168, 171, 174, 176, 181, 187, 192, 193, 194, 195, 199, 201, 206, 212, 213, 214, 216, 218, 219, 221, 222, 224, 225, 226, 230, 242, 244, 251, 258, 261, 275, 283], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 27, 37, 39, 57, 58, 61, 67, 82, 87, 88, 93, 97, 111, 121, 122, 138, 164, 177, 180, 192, 196, 197, 205, 213, 214, 218, 222, 225, 237, 239, 245, 272, 275, 277, 278, 281], "re": [4, 12, 20, 36, 37, 39, 48, 49, 57, 58, 61, 63, 65, 82, 84, 93, 181, 183, 187, 193, 199, 206, 207, 208, 214, 215, 216, 222, 224, 237, 254, 256, 273, 275, 278], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 25, 26, 27, 32, 33, 34, 35, 36, 39, 40, 45, 48, 49, 56, 57, 58, 61, 62, 63, 65, 69, 73, 82, 84, 87, 88, 93, 96, 97, 108, 121, 131, 156, 167, 174, 176, 181, 191, 194, 195, 196, 197, 199, 201, 202, 203, 206, 207, 214, 215, 216, 218, 219, 222, 224, 225, 233, 237, 260, 272, 273, 275, 277, 278, 283, 284], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 23, 25, 37, 57, 61, 63, 70, 79, 82, 90, 93, 97, 99, 111, 121, 122, 138, 151, 181, 189, 192, 196, 197, 202, 203, 206, 207, 214, 215, 216, 218, 219, 224, 225, 226, 238, 239, 242, 244, 247, 272, 275, 277, 278, 280, 283], "while": [4, 6, 10, 11, 12, 18, 20, 22, 23, 27, 38, 39, 40, 48, 49, 50, 53, 56, 57, 58, 59, 61, 62, 63, 67, 71, 73, 81, 87, 88, 93, 97, 98, 99, 100, 103, 112, 115, 117, 121, 125, 135, 155, 176, 181, 187, 193, 201, 204, 206, 222, 225, 237, 239, 241, 244, 260, 272, 278, 279], "peopl": [4, 6, 60, 65, 84, 93, 176, 226], "upgrad": [4, 30], "immedi": [4, 18, 48, 57, 82, 87, 171, 193, 196, 238, 245], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 39, 46, 48, 54, 56, 57, 61, 63, 81, 82, 84, 93, 97, 107, 121, 135, 189, 190, 199, 202, 213, 219, 222, 224, 225, 230, 238, 244, 275, 282], "question": [4, 6, 7, 16, 18, 56, 59, 67, 74, 82, 84, 87, 97, 111, 173, 176, 180, 193, 196, 201, 216, 225, 244, 247], "read": [4, 6, 7, 9, 10, 20, 27, 49, 63, 82, 97, 101, 138, 189, 190, 195, 196, 197, 203, 206, 219, 232, 233, 241, 248, 276, 282, 283], "previou": [4, 6, 10, 20, 41, 46, 47, 48, 49, 52, 57, 62, 63, 84, 87, 88, 96, 112, 135, 173, 189, 190, 199, 212, 219, 223, 227, 244, 276, 278, 283], "unchang": [4, 10, 11, 20, 48, 49, 57, 84, 93, 107, 202, 206, 212, 215, 218, 225, 272], "dure": [4, 10, 12, 30, 39, 57, 58, 88, 93, 97, 99, 112, 116, 138, 139, 189, 201, 206, 215, 224, 225, 242, 244], "period": [4, 6, 10, 24, 37, 57, 58, 63, 82, 97, 135, 145, 167, 174, 201, 206, 209, 212, 221, 225, 226, 244], "silenc": [4, 235, 242], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 29, 57, 58, 61, 63, 93, 121, 129, 135, 189, 206, 215, 222, 223, 224, 241, 242, 279], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 26, 35, 38, 39, 49, 54, 56, 57, 58, 59, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 82, 84, 90, 93, 97, 100, 101, 112, 118, 132, 160, 176, 178, 181, 185, 189, 190, 192, 194, 196, 197, 199, 201, 202, 203, 206, 207, 213, 214, 216, 222, 224, 225, 226, 238, 239, 245, 251, 255, 256, 260, 272, 275, 277, 278, 283, 284], "over": [4, 7, 8, 10, 12, 15, 20, 28, 31, 37, 38, 39, 40, 48, 49, 52, 56, 57, 58, 59, 60, 61, 62, 71, 73, 80, 82, 86, 87, 90, 93, 94, 97, 100, 101, 109, 115, 121, 138, 139, 150, 166, 169, 171, 175, 176, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 209, 211, 213, 218, 219, 221, 222, 224, 225, 226, 227, 230, 231, 240, 244, 245, 251, 254, 258, 261, 277, 281, 283], "defeat": [4, 222], "three": [4, 11, 12, 14, 16, 18, 20, 26, 31, 35, 39, 48, 49, 50, 53, 57, 58, 62, 65, 67, 71, 72, 73, 82, 86, 87, 88, 100, 101, 115, 120, 124, 127, 128, 129, 144, 166, 168, 173, 181, 185, 189, 190, 191, 192, 193, 194, 197, 199, 202, 206, 216, 218, 219, 224, 225, 226, 237, 251, 253, 258, 261, 275, 278, 283], "natur": [4, 10, 12, 18, 31, 35, 39, 40, 48, 57, 58, 62, 63, 91, 97, 121, 173, 175, 176, 193, 196, 197, 199, 201, 203, 206, 214, 215, 219, 225, 226, 244, 261, 278, 283], "heavili": [4, 213, 223], "consider": [4, 19, 57, 98, 111, 196, 205, 214, 219, 222, 255], "easi": [4, 11, 45, 49, 57, 65, 82, 98, 118, 125, 131, 189, 193, 196, 201, 206, 213, 216, 219, 222, 225, 230, 231, 232, 272, 273, 275, 276, 277, 278, 279, 282], "account": [4, 11, 63, 93, 209, 218, 222], "nonetheless": [4, 58, 173, 218, 222], "deprecat": 4, "won": [4, 12, 20, 39, 218, 225, 278], "until": [4, 16, 18, 23, 24, 25, 26, 30, 49, 51, 57, 58, 67, 84, 93, 97, 135, 190, 199, 202, 215, 222, 275], "come": [4, 29, 48, 53, 55, 56, 57, 63, 65, 82, 84, 93, 98, 111, 121, 123, 133, 174, 190, 193, 196, 199, 201, 202, 216, 219, 222, 225, 235, 237, 242, 245, 275, 277, 278, 281, 283], "minimum": [4, 10, 24, 37, 39, 48, 49, 51, 53, 57, 58, 61, 63, 93, 111, 116, 123, 155, 180, 192, 194, 199, 225, 226, 240, 273], "longer": [4, 6, 12, 17, 57, 67, 97, 125, 135, 194, 199, 206, 215, 218, 244, 247, 275, 283], "especi": [4, 6, 20, 27, 56, 93, 111, 121, 138, 165, 180, 190, 218, 222, 224, 237, 272, 273], "hard": [4, 8, 11, 18, 49, 58, 93, 97, 121, 171, 196, 206, 213, 222, 225, 275, 277], "migrat": 4, "lengthen": 4, "impos": [4, 101], "signific": [4, 12, 18, 39, 57, 58, 61, 84, 93, 111, 136, 165, 196, 225, 245, 278], "mainten": [4, 34], "burden": [4, 206], "keep": [4, 6, 12, 15, 20, 53, 57, 58, 61, 62, 65, 82, 93, 116, 124, 132, 136, 155, 171, 192, 195, 196, 197, 202, 213, 214, 216, 218, 222, 224, 232, 260, 273, 278], "firstli": [4, 10, 18, 20, 216], "regular": [4, 10, 12, 18, 19, 40, 45, 57, 58, 61, 65, 73, 79, 80, 84, 97, 121, 165, 196, 203, 222, 232, 237, 282, 283], "schedul": 4, "Being": [4, 53, 67, 73, 196], "assur": [4, 97, 202], "suffici": [4, 6, 18, 38, 39, 48, 49, 53, 57, 93, 176, 209, 213, 222, 226, 241, 283], "regardless": [4, 6, 10, 20, 49, 57, 84, 97, 199, 214, 218, 244, 255, 260, 283], "often": [4, 6, 11, 18, 19, 20, 25, 38, 39, 40, 47, 57, 65, 67, 69, 82, 84, 93, 97, 98, 107, 131, 135, 180, 189, 190, 193, 194, 196, 199, 202, 207, 213, 214, 219, 222, 226, 244, 272, 277, 278, 279, 283], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 24, 31, 39, 49, 56, 57, 61, 69, 72, 81, 115, 166, 170, 176, 193, 199, 201, 202, 205, 214, 218, 222, 226, 245, 256, 275, 282, 283], "secondli": [4, 20, 216], "rigor": [4, 65, 190, 239], "semant": [4, 11, 18, 90, 224], "surfac": [4, 63, 65, 71, 82, 101, 115, 140, 144, 171, 192, 218, 251], "enough": [4, 6, 23, 24, 48, 57, 61, 84, 93, 96, 97, 107, 121, 138, 197, 199, 206, 222, 273, 275], "encod": [4, 10, 41, 49, 55, 58, 87, 206, 237, 241, 244], "backport": 4, "prior": [4, 10, 29, 185, 202, 218, 279], "extrem": [4, 48, 61, 67, 73, 84, 90, 103, 135, 190, 218, 226], "accur": [4, 10, 12, 16, 20, 37, 48, 57, 61, 62, 79, 84, 104, 192, 213, 272, 279], "model": [4, 11, 61, 87, 97, 107, 117, 123, 125, 126, 127, 143, 202, 215, 226], "final": [4, 6, 7, 10, 18, 20, 38, 49, 56, 57, 63, 65, 82, 84, 87, 93, 97, 101, 105, 115, 116, 123, 128, 130, 131, 133, 136, 151, 163, 166, 168, 169, 171, 173, 174, 176, 181, 189, 190, 193, 196, 199, 201, 208, 214, 215, 216, 218, 219, 222, 224, 225, 232, 244, 245, 276, 277, 278], "temptat": [4, 215, 283], "fudg": 4, "earli": [4, 57, 97, 160, 219], "acceler": [4, 98, 118, 123, 128, 130, 135, 136, 138, 174, 181, 185, 187, 241, 260], "myst": [4, 7], "checkbox": 4, "tag": [4, 206, 224], "nest": [4, 57, 59, 63, 65, 84, 88, 107, 194, 196, 199, 206, 216, 218, 221, 225, 226, 227, 228, 230, 233, 244, 245, 278], "ensur": [4, 12, 20, 23, 24, 26, 29, 57, 58, 61, 89, 93, 115, 136, 201, 202, 206, 237, 242, 245], "realli": [4, 10, 11, 16, 18, 19, 20, 57, 69, 97, 123, 173, 196, 205, 207, 213, 215, 216, 218, 222, 238, 247, 275, 277], "per": [4, 58, 93, 98, 103, 145, 181, 187, 192, 197, 202, 203, 251, 255, 257, 260], "everywher": [4, 11, 12, 57, 65, 82, 107, 187, 260], "doctest": [4, 6, 7, 12, 20, 50, 65, 93, 97, 123, 160, 171, 196, 202, 222, 237, 240, 242, 282], "sympy_deprecation_warn": [4, 235, 240, 242], "write": [4, 8, 10, 11, 16, 18, 19, 21, 30, 39, 46, 57, 58, 64, 65, 82, 84, 90, 138, 151, 189, 190, 194, 199, 201, 206, 215, 216, 219, 222, 225, 231, 237, 238, 239, 245, 276, 277, 278, 283], "multilin": [4, 206], "deprecated_since_vers": [4, 235, 240, 242], "active_deprecations_target": [4, 235, 240, 242], "target": [4, 6, 11, 37, 38, 39, 57, 97, 113, 151, 155, 156, 215, 218, 221, 224, 225, 235, 238, 239, 242, 283], "stacklevel": [4, 235, 240, 242], "line": [4, 6, 10, 11, 12, 16, 18, 29, 38, 39, 48, 49, 53, 58, 67, 68, 69, 71, 72, 73, 74, 79, 82, 84, 85, 86, 93, 97, 100, 105, 108, 121, 123, 129, 151, 181, 186, 187, 189, 191, 192, 206, 209, 216, 218, 222, 226, 227, 235, 237, 238, 239, 242, 245, 247, 258, 261, 269, 275], "visual": [4, 57, 97, 101, 107, 205, 218], "confirm": [4, 10, 48, 97, 222], "look": [4, 6, 7, 10, 12, 18, 19, 20, 30, 38, 39, 48, 57, 62, 63, 65, 78, 93, 97, 116, 121, 123, 131, 155, 165, 166, 169, 185, 192, 196, 197, 201, 206, 208, 209, 213, 216, 218, 219, 222, 223, 237, 241, 245, 247, 256, 273, 278, 281, 282], "good": [4, 7, 11, 18, 20, 27, 39, 57, 58, 61, 69, 82, 93, 97, 123, 135, 138, 193, 196, 197, 206, 213, 215, 216, 218, 222, 244, 272, 276, 279], "top": [4, 6, 7, 10, 11, 23, 39, 56, 57, 58, 73, 74, 84, 87, 93, 100, 101, 115, 120, 166, 173, 196, 206, 216, 222, 239, 240, 245, 261, 278], "relev": [4, 6, 7, 18, 39, 55, 70, 85, 86, 112, 116, 118, 123, 176, 186, 190, 196, 216, 222, 223, 232, 237, 259], "docstr": [4, 8, 10, 12, 20, 23, 38, 39, 50, 57, 79, 82, 84, 93, 97, 102, 106, 108, 114, 131, 136, 141, 158, 164, 165, 167, 184, 188, 202, 209, 212, 213, 215, 218, 222, 223, 224, 225, 231, 232, 237, 240, 245, 247, 252, 259, 262, 266, 268], "src": [4, 6, 7, 99, 222, 237, 242], "explan": [4, 7, 12, 14, 18, 21, 31, 32, 33, 34, 35, 36, 38, 39, 42, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 63, 65, 69, 79, 80, 82, 84, 88, 93, 97, 107, 110, 112, 113, 115, 116, 118, 129, 140, 142, 145, 148, 150, 152, 154, 166, 171, 191, 192, 193, 195, 197, 201, 202, 204, 208, 209, 211, 212, 213, 214, 216, 218, 219, 222, 224, 226, 227, 231, 232, 237, 240, 242, 245, 280], "cross": [4, 7, 8, 11, 57, 67, 73, 88, 93, 100, 101, 115, 129, 136, 138, 151, 181, 183, 189, 190, 219, 225, 251, 255, 257, 258], "xyz": [4, 69, 99, 100, 181, 190, 251, 253, 256], "header": [4, 39, 238, 239], "why": [4, 10, 12, 18, 39, 57, 190, 197, 203, 213, 216, 245, 276, 278, 279], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 23, 34, 35, 37, 38, 39, 44, 48, 49, 56, 57, 58, 64, 67, 72, 82, 88, 90, 93, 97, 151, 160, 164, 165, 166, 174, 190, 196, 197, 199, 201, 203, 214, 216, 219, 222, 223, 224, 225, 235, 238, 239, 240, 241, 242, 244, 245, 247, 262, 263, 270, 275, 277, 278], "warns_deprecated_sympi": [4, 235, 240, 242], "pr": [4, 10, 56, 197, 199, 200, 202, 225], "merg": [4, 39, 48, 49, 57, 179, 206, 214, 226, 237, 244, 245], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 28, 31, 33, 34, 35, 37, 38, 39, 45, 46, 48, 49, 56, 57, 58, 59, 60, 62, 63, 65, 67, 69, 73, 74, 75, 84, 85, 86, 87, 88, 90, 93, 97, 105, 107, 110, 140, 142, 143, 144, 146, 147, 148, 152, 153, 154, 157, 159, 160, 169, 171, 175, 181, 183, 188, 192, 202, 209, 213, 214, 215, 219, 222, 225, 226, 239, 244, 251, 253, 257, 259, 261, 279, 280], "decor": [4, 20, 48, 57, 65, 235, 237, 242, 243, 246, 247, 270], "sympydeprecationwarn": [4, 10, 235, 237, 240, 242], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 24, 27, 28, 31, 32, 33, 34, 35, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 99, 100, 103, 104, 105, 107, 112, 115, 116, 117, 118, 120, 121, 125, 126, 131, 132, 136, 138, 139, 140, 142, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 184, 185, 186, 188, 193, 195, 196, 197, 199, 202, 203, 204, 205, 207, 208, 209, 212, 213, 214, 216, 218, 222, 223, 224, 225, 226, 231, 232, 233, 237, 238, 239, 240, 241, 242, 244, 245, 249, 252, 255, 256, 258, 259, 261, 262, 266, 268, 273, 275, 278, 283], "context": [4, 6, 7, 10, 14, 18, 20, 25, 32, 33, 34, 57, 59, 65, 84, 87, 121, 176, 196, 199, 201, 214, 235, 237, 242, 251], "manag": [4, 10, 29, 33, 34, 99, 151, 199, 218, 232, 235, 237, 242], "filter": [4, 10, 15, 24, 57, 58, 82, 143, 202, 235, 237, 242, 244], "emit": [4, 206, 235, 242], "assert": [4, 38, 46, 47, 48, 49, 57, 67, 69, 99, 135, 206, 214, 222, 223, 235, 242, 244], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 23, 26, 38, 45, 57, 58, 63, 65, 82, 84, 93, 108, 115, 120, 135, 136, 139, 144, 168, 171, 180, 181, 192, 194, 197, 199, 202, 203, 206, 215, 218, 219, 222, 223, 225, 230, 235, 237, 241, 245, 247, 251, 275], "block": [4, 6, 10, 27, 39, 46, 48, 58, 88, 93, 115, 120, 121, 123, 126, 181, 190, 195, 219, 245, 255], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 39, 57, 59, 65, 84, 91, 109, 135, 167, 168, 192, 206, 278, 282], "ignore_warn": [4, 235, 240, 242, 245], "prevent": [4, 12, 24, 27, 39, 57, 63, 94, 97, 111, 195, 197, 202, 206, 218, 226, 235, 242, 274], "trigger": [4, 20, 49, 99, 171, 235], "twice": [4, 12, 39, 57, 59, 71, 97, 181, 183, 189, 202, 206, 241, 242, 251, 253, 273], "similar": [4, 5, 10, 12, 16, 18, 20, 49, 56, 57, 58, 61, 62, 63, 65, 68, 73, 74, 78, 87, 93, 98, 107, 121, 123, 125, 135, 136, 169, 187, 189, 190, 194, 196, 197, 199, 203, 213, 215, 216, 218, 222, 224, 227, 232, 235, 238, 241, 242, 251, 253, 255, 256, 260, 272, 277, 278, 279, 281, 283], "somewher": [4, 6, 7, 11, 39], "sign": [4, 6, 7, 11, 24, 27, 31, 36, 39, 53, 57, 58, 62, 63, 67, 73, 82, 84, 93, 97, 100, 101, 103, 107, 123, 144, 156, 181, 187, 189, 191, 199, 206, 211, 213, 218, 219, 224, 244, 258, 261, 276], "readi": [4, 18, 120, 196, 206, 222], "paragraph": [4, 6, 7, 20, 38], "metadata": [4, 38, 240, 242], "link": [4, 6, 7, 11, 12, 22, 39, 58, 67, 73, 84, 108, 115, 124, 132, 238, 241, 242, 281], "rememb": [4, 6, 12, 20, 87, 93, 108, 111, 138, 189, 190, 206, 218, 224, 227, 245, 278, 283], "shown": [4, 6, 10, 11, 18, 19, 20, 46, 49, 56, 57, 61, 63, 65, 82, 99, 101, 105, 107, 111, 116, 118, 124, 125, 126, 132, 133, 134, 136, 180, 181, 189, 190, 192, 195, 196, 197, 202, 206, 222, 226, 242, 244, 255, 256, 276], "plain": [4, 6, 18, 65, 85, 186, 202, 206], "rst": [4, 6, 7, 11, 40, 222, 237], "markdown": [4, 8, 11], "markup": [4, 206], "clearli": [4, 6, 20, 97, 190, 196, 216, 279], "delin": 4, "newlin": [4, 93, 247], "charact": [4, 6, 7, 57, 58, 82, 85, 99, 151, 181, 186, 206, 222, 237, 239, 242, 247, 275, 277, 282], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 28, 35, 37, 39, 48, 49, 57, 61, 65, 69, 70, 84, 90, 93, 99, 133, 134, 181, 196, 199, 200, 202, 206, 208, 218, 219, 277, 280, 283], "abc": [4, 6, 12, 14, 15, 20, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 39, 46, 48, 50, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 80, 81, 82, 84, 85, 87, 88, 90, 93, 96, 98, 105, 107, 109, 142, 144, 146, 147, 152, 169, 171, 172, 193, 195, 197, 199, 201, 202, 203, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 233, 238, 239, 240, 241, 242, 244, 245, 247, 251, 254, 255, 256, 261, 263, 275, 278, 282], "func": [4, 6, 11, 17, 20, 33, 37, 39, 57, 59, 62, 65, 76, 78, 84, 97, 160, 181, 199, 202, 206, 207, 218, 222, 223, 224, 235, 240, 242, 244, 245, 247, 250], "larger": [4, 7, 11, 20, 39, 48, 49, 56, 57, 58, 65, 82, 90, 93, 97, 125, 129, 197, 203, 207, 213, 218, 224, 239, 241, 275, 283], "easier": [4, 11, 19, 26, 57, 101, 121, 123, 189, 197, 201, 203, 216, 222, 225, 239, 245, 255, 277, 283, 284], "exactli": [4, 6, 7, 10, 11, 12, 20, 27, 35, 41, 48, 57, 60, 61, 93, 99, 136, 191, 216, 218, 222, 225, 227, 241, 244, 245, 273, 275, 277, 282, 283], "direct": [4, 6, 7, 10, 11, 17, 31, 33, 34, 38, 42, 45, 48, 53, 56, 57, 59, 61, 63, 66, 70, 71, 72, 73, 87, 88, 93, 100, 101, 103, 111, 112, 115, 123, 125, 129, 138, 157, 181, 187, 189, 190, 193, 195, 196, 199, 203, 213, 216, 232, 235, 244, 251, 256, 257, 260], "syntax": [4, 6, 7, 10, 11, 12, 20, 32, 34, 49, 57, 84, 99, 121, 138, 168, 192, 196, 205, 206, 218, 224, 228, 247, 273, 275, 277, 282, 284], "paramet": [4, 7, 10, 11, 12, 25, 26, 31, 32, 34, 37, 39, 40, 48, 49, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 80, 82, 84, 85, 87, 88, 90, 93, 94, 96, 97, 99, 100, 103, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 138, 140, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 155, 156, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 181, 182, 183, 185, 186, 187, 190, 191, 192, 194, 195, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 226, 227, 228, 231, 232, 235, 237, 238, 239, 241, 242, 244, 245, 251, 253, 254, 255, 256, 261, 273, 278], "short": [4, 7, 12, 30, 40, 47, 49, 53, 57, 58, 59, 60, 63, 91, 97, 111, 157, 176, 180, 190, 193, 200, 227, 237, 247, 278, 282], "renam": [4, 39, 84], "rest": [4, 10, 82, 85, 87, 91, 101, 109, 121, 125, 131, 176, 193, 196, 226, 244, 275, 276, 283], "left": [4, 7, 10, 16, 18, 20, 22, 23, 37, 39, 40, 48, 49, 53, 57, 58, 59, 62, 63, 65, 73, 74, 80, 82, 84, 85, 87, 88, 93, 96, 97, 107, 112, 120, 136, 143, 150, 155, 159, 160, 163, 168, 181, 187, 191, 192, 193, 195, 202, 203, 204, 205, 206, 208, 209, 213, 214, 215, 216, 218, 222, 223, 224, 225, 226, 237, 238, 239, 241, 244, 258, 273, 277, 279, 283], "imaginari": [4, 6, 12, 18, 20, 24, 25, 31, 35, 36, 57, 61, 63, 65, 88, 138, 196, 197, 202, 206, 207, 214, 218, 225], "simplify_thi": [4, 6, 240], "expr": [4, 6, 11, 12, 18, 20, 24, 25, 27, 33, 34, 36, 37, 39, 49, 56, 59, 61, 63, 65, 67, 79, 82, 84, 87, 90, 93, 98, 99, 107, 111, 113, 121, 135, 148, 152, 154, 156, 160, 163, 166, 168, 169, 171, 178, 181, 183, 186, 192, 194, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 211, 213, 215, 218, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 238, 239, 240, 242, 245, 251, 253, 254, 255, 256, 258, 272, 273, 275, 277, 278, 282, 283, 284], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 25, 32, 34, 36, 37, 56, 57, 59, 61, 62, 63, 65, 69, 74, 79, 82, 84, 87, 88, 89, 90, 93, 100, 107, 108, 113, 115, 117, 124, 125, 128, 129, 130, 135, 143, 150, 155, 170, 171, 178, 181, 187, 193, 201, 203, 205, 207, 212, 214, 215, 216, 219, 222, 223, 224, 225, 226, 240, 242, 245, 255, 257, 263, 272, 274, 275, 277, 278, 279], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 33, 34, 38, 57, 62, 69, 87, 93, 97, 99, 129, 166, 196, 202, 206, 215, 218, 225, 240, 242, 244, 245, 248, 272, 275, 278, 279, 283], "ref": [4, 48, 63, 93, 105, 138, 211, 226, 240, 279], "is_this_zero": [4, 242], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 35, 36, 37, 39, 40, 48, 49, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 82, 84, 85, 86, 87, 88, 89, 90, 93, 97, 98, 99, 100, 101, 103, 105, 107, 112, 113, 115, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 136, 138, 139, 148, 149, 152, 155, 160, 166, 168, 169, 171, 172, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 238, 239, 242, 244, 245, 247, 251, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 282, 283, 284], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 112, 113, 115, 116, 118, 121, 123, 124, 125, 126, 128, 130, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 147, 150, 155, 156, 157, 160, 165, 166, 167, 168, 169, 170, 171, 172, 176, 178, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 240, 241, 242, 244, 245, 246, 251, 253, 254, 255, 256, 257, 258, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "zero": [4, 11, 12, 14, 18, 19, 20, 25, 31, 35, 36, 39, 47, 48, 49, 53, 56, 57, 60, 61, 62, 63, 65, 67, 71, 72, 73, 82, 84, 86, 87, 88, 90, 92, 93, 96, 97, 99, 100, 107, 115, 118, 121, 123, 126, 129, 132, 133, 134, 138, 143, 165, 169, 171, 173, 185, 187, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 204, 206, 209, 213, 214, 216, 218, 219, 222, 223, 224, 225, 226, 227, 242, 244, 245, 255, 257, 258, 278, 284], "is_zero": [4, 18, 20, 72, 93, 193, 197, 202, 242, 279], "mail": [4, 10, 23, 24, 25, 26, 29, 206, 276], "summar": [4, 237, 283], "idea": [4, 11, 18, 19, 20, 42, 48, 55, 57, 58, 69, 75, 82, 84, 97, 108, 121, 171, 175, 176, 193, 195, 196, 215, 218, 219, 222, 225, 239, 245, 283], "fit": [4, 11, 38, 82, 93, 96, 97, 190, 206, 222, 247, 278], "put": [4, 6, 10, 11, 12, 16, 20, 23, 39, 53, 54, 57, 58, 59, 63, 87, 88, 93, 143, 148, 152, 167, 168, 202, 206, 207, 215, 216, 218, 222, 227, 233, 238, 279, 283], "word": [4, 7, 11, 20, 35, 53, 56, 57, 58, 63, 65, 87, 107, 116, 121, 136, 193, 196, 201, 218, 219, 222, 224, 239, 251, 256, 275], "global": [4, 6, 10, 32, 33, 34, 37, 39, 40, 57, 69, 82, 99, 155, 161, 181, 183, 192, 193, 196, 197, 199, 206, 219, 222, 223, 226, 237, 239, 240, 245, 254], "uniqu": [4, 10, 11, 37, 38, 40, 48, 51, 53, 57, 58, 59, 62, 65, 72, 75, 80, 84, 86, 87, 93, 97, 115, 160, 169, 181, 190, 193, 194, 196, 199, 201, 202, 207, 211, 218, 219, 222, 224, 225, 226, 230, 239, 244, 247, 255, 260, 275, 278], "across": [4, 7, 48, 55, 57, 68, 84, 101, 170, 171, 178, 192, 206, 241, 243, 244, 245, 281], "level": [4, 6, 7, 10, 11, 12, 18, 19, 23, 24, 39, 48, 55, 57, 63, 65, 84, 87, 93, 97, 111, 125, 138, 166, 171, 176, 180, 183, 190, 192, 195, 196, 204, 206, 215, 219, 225, 226, 230, 238, 239, 244, 278, 279, 281], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 37, 38, 39, 40, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 60, 63, 67, 68, 70, 71, 72, 73, 80, 82, 86, 87, 88, 93, 96, 97, 100, 101, 107, 113, 115, 116, 120, 121, 123, 125, 139, 143, 147, 161, 165, 166, 168, 172, 173, 176, 181, 185, 187, 191, 192, 194, 195, 196, 197, 199, 201, 202, 206, 212, 213, 216, 218, 219, 222, 223, 224, 225, 226, 228, 230, 231, 232, 239, 240, 241, 242, 244, 245, 247, 251, 253, 255, 256, 258, 260, 278, 284], "share": [4, 18, 20, 58, 97, 197, 201, 206, 226, 239], "__init__": [4, 6, 20, 57, 116, 201, 251, 253, 278], "func_nam": [4, 39, 63, 88, 247], "help": [4, 5, 6, 7, 18, 24, 30, 39, 47, 57, 65, 82, 84, 93, 97, 98, 100, 105, 121, 138, 146, 156, 190, 192, 201, 203, 206, 215, 216, 219, 222, 223, 226, 237, 238, 239, 245, 268, 276, 279], "rais": [4, 10, 12, 14, 18, 19, 20, 32, 34, 37, 39, 46, 49, 57, 58, 59, 61, 63, 66, 67, 70, 72, 73, 74, 82, 84, 88, 90, 93, 94, 96, 97, 105, 107, 145, 157, 187, 190, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 208, 214, 218, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 239, 242, 244, 245, 247, 248, 258, 279], "been": [4, 12, 18, 20, 37, 39, 40, 48, 49, 50, 53, 56, 57, 58, 63, 69, 82, 84, 93, 97, 98, 99, 116, 121, 123, 131, 135, 136, 144, 156, 166, 168, 176, 180, 187, 188, 189, 190, 193, 196, 197, 201, 203, 204, 206, 208, 213, 216, 218, 223, 224, 225, 227, 236, 237, 239, 240, 242, 244, 247, 255, 258, 275, 276, 278, 279, 283], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 35, 38, 40, 47, 48, 49, 55, 57, 58, 62, 63, 73, 80, 86, 88, 90, 93, 108, 110, 115, 116, 136, 155, 157, 160, 176, 193, 194, 195, 199, 200, 201, 202, 206, 215, 218, 222, 225, 230, 232, 237, 244, 245, 247, 256, 275, 279, 283], "much": [4, 6, 10, 16, 18, 19, 20, 25, 38, 39, 42, 53, 61, 65, 79, 82, 84, 135, 179, 180, 189, 190, 191, 193, 196, 199, 202, 213, 216, 218, 222, 223, 224, 225, 239, 241, 275, 277, 283], "trivial": [4, 40, 48, 53, 56, 57, 58, 63, 72, 87, 90, 93, 97, 133, 171, 193, 194, 199, 202, 216, 219, 222, 225, 230], "furthermor": [4, 10, 20, 35, 57, 58, 87, 201, 215, 275, 277, 278], "particular": [4, 6, 10, 11, 12, 18, 19, 22, 35, 40, 48, 57, 58, 61, 65, 68, 82, 84, 87, 90, 93, 97, 100, 103, 131, 155, 166, 194, 195, 196, 197, 199, 201, 202, 212, 214, 216, 218, 219, 222, 224, 225, 237, 239, 241, 279, 281, 283], "expr1": [4, 18, 107, 192, 224, 278], "expr2": [4, 18, 107, 192, 278], "dozen": [4, 11, 20, 283], "search": [4, 6, 37, 48, 49, 53, 55, 57, 63, 93, 97, 121, 193, 201, 202, 206, 215, 216, 218, 223, 226, 238], "upcom": 4, "bot": 4, "push": [5, 82], "respect": [5, 6, 10, 11, 12, 20, 32, 34, 35, 37, 38, 39, 40, 47, 48, 49, 52, 53, 55, 56, 57, 59, 62, 63, 65, 67, 69, 73, 74, 79, 80, 82, 84, 87, 88, 90, 93, 97, 99, 100, 101, 103, 107, 112, 113, 115, 118, 125, 132, 134, 136, 138, 145, 160, 173, 174, 175, 180, 181, 185, 187, 190, 191, 192, 193, 196, 199, 201, 202, 203, 206, 208, 209, 212, 214, 218, 222, 223, 224, 225, 226, 227, 231, 232, 237, 239, 251, 253, 254, 255, 256, 257, 258, 259, 260, 273, 283], "handbook": [5, 6, 40, 47, 48, 55, 65, 97], "internet": 5, "practic": [5, 8, 16, 18, 25, 27, 46, 48, 58, 67, 132, 135, 138, 192, 193, 194, 196, 201, 203, 230, 275, 276], "project": [5, 7, 10, 39, 70, 71, 72, 86, 93, 137, 238, 239, 251], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 38, 39, 48, 54, 57, 58, 84, 93, 121, 138, 176, 180, 190, 196, 199, 203, 205, 206, 213, 222, 225, 231, 241, 243, 245, 255, 256, 273, 283], "nn": 5, "brows": 5, "clone": [5, 29, 199], "download": [5, 7, 29, 38, 79, 200, 215, 222, 226, 251, 277], "origin": [5, 11, 12, 16, 18, 29, 31, 48, 49, 50, 53, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 82, 84, 88, 93, 97, 105, 107, 108, 115, 125, 135, 138, 163, 166, 176, 182, 187, 192, 193, 197, 201, 202, 205, 206, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 232, 237, 244, 245, 251, 254, 255, 256, 257, 258, 260, 261, 283], "77": [5, 46, 65, 93, 97, 205, 206, 239], "mib": 5, "remot": [5, 57], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 37, 57, 62, 63, 64, 65, 203, 216, 225, 278, 283], "checkout": [5, 38], "advantag": [5, 10, 14, 18, 20, 34, 37, 39, 57, 58, 62, 84, 87, 93, 97, 104, 175, 195, 196, 203, 214, 219, 222, 225, 241, 275, 277, 279, 283], "isol": [5, 37, 63, 197, 201, 202, 203, 224, 239], "wide": [5, 18, 85, 93, 138, 186, 196, 202, 206, 226], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 57, 193, 196, 219, 245, 256, 272, 278, 283], "consult": [5, 40], "kwarg": [5, 12, 33, 34, 35, 39, 48, 49, 56, 57, 58, 59, 63, 65, 67, 68, 70, 71, 72, 73, 74, 79, 82, 84, 88, 89, 90, 91, 93, 95, 96, 105, 107, 113, 116, 125, 140, 149, 151, 155, 156, 160, 162, 164, 165, 167, 168, 169, 181, 185, 186, 192, 195, 197, 202, 206, 208, 212, 213, 214, 218, 222, 223, 224, 226, 227, 232, 237, 238, 240, 247, 256], "test_bas": [5, 237], "similari": 5, "qualiti": [5, 98, 206], "code_qu": 5, "liter": [6, 12, 20, 39, 47, 57, 85, 87, 99, 171, 178, 218], "occur": [6, 10, 11, 12, 48, 49, 57, 61, 65, 74, 82, 88, 99, 111, 115, 135, 180, 181, 189, 201, 209, 218, 223, 224, 227, 237, 244, 278], "definit": [6, 10, 11, 12, 19, 31, 35, 39, 40, 48, 49, 54, 56, 57, 59, 60, 62, 63, 65, 70, 73, 80, 82, 84, 88, 89, 90, 93, 97, 99, 115, 123, 128, 129, 136, 173, 176, 179, 181, 189, 190, 193, 194, 197, 202, 203, 206, 213, 226, 227, 238, 239, 240, 244, 245, 251, 255, 256, 257, 258, 273, 283], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 33, 34, 38, 39, 48, 49, 57, 65, 66, 67, 70, 71, 72, 73, 90, 93, 99, 101, 107, 112, 115, 116, 117, 118, 120, 128, 136, 139, 160, 165, 169, 176, 180, 181, 187, 190, 192, 193, 196, 197, 201, 206, 214, 218, 219, 231, 232, 238, 240, 244, 245, 248, 255, 278], "fdiff": [6, 20, 39, 57, 63, 64, 65], "self": [6, 18, 20, 31, 33, 34, 38, 39, 48, 49, 54, 56, 57, 59, 63, 66, 67, 68, 70, 71, 72, 73, 84, 88, 93, 97, 112, 123, 166, 171, 181, 183, 185, 193, 195, 197, 199, 201, 202, 206, 208, 213, 214, 232, 251], "argindex": [6, 20, 39, 57, 63, 64, 65], "heavisid": [6, 65, 82, 84, 206], "diff": [6, 10, 11, 16, 20, 24, 37, 39, 57, 62, 63, 64, 65, 74, 79, 90, 93, 111, 113, 124, 125, 138, 169, 181, 183, 186, 187, 190, 192, 197, 202, 205, 206, 216, 222, 223, 224, 227, 228, 233, 255, 258, 273, 277, 284], "diracdelta": [6, 65, 84, 166, 171, 206], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 28, 37, 39, 49, 51, 56, 57, 58, 59, 63, 64, 67, 68, 72, 82, 84, 86, 93, 97, 99, 112, 115, 116, 118, 121, 125, 132, 138, 170, 171, 174, 176, 181, 189, 190, 197, 199, 202, 205, 206, 207, 213, 215, 216, 218, 219, 222, 224, 231, 235, 237, 239, 240, 245, 255, 256, 261, 273, 275, 276, 278, 282, 283], "scope": [6, 39, 131, 135, 235, 283], "high": [6, 7, 12, 16, 18, 24, 39, 57, 61, 62, 85, 97, 138, 186, 196, 201, 204, 206, 219, 224, 268, 279], "od": [6, 11, 20, 80, 116, 120, 131, 138, 220, 223, 263, 284], "seen": [6, 16, 18, 31, 49, 82, 84, 99, 103, 115, 120, 132, 176, 189, 193, 196, 199, 202, 222, 225, 242, 244, 255, 275, 278, 282], "hand": [6, 10, 16, 18, 20, 23, 38, 39, 49, 50, 57, 63, 65, 84, 87, 88, 93, 97, 100, 116, 120, 121, 135, 139, 143, 160, 163, 181, 187, 190, 191, 193, 196, 197, 199, 201, 204, 216, 225, 237, 239, 241, 245, 248, 258, 260, 277], "less": [6, 7, 10, 11, 16, 35, 39, 40, 48, 49, 56, 57, 58, 61, 62, 63, 65, 71, 72, 73, 88, 93, 97, 105, 107, 121, 123, 171, 196, 199, 201, 202, 215, 216, 218, 219, 222, 224, 225, 226, 237, 239], "understand": [6, 12, 18, 19, 20, 27, 57, 58, 82, 121, 131, 133, 134, 138, 176, 189, 192, 195, 196, 201, 206, 216, 219, 238, 245, 274, 275, 282, 283], "clear": [6, 10, 18, 33, 47, 57, 82, 86, 112, 189, 190, 192, 197, 199, 202, 216, 224, 225, 232, 237, 241, 260, 275], "begin": [6, 10, 12, 18, 20, 22, 57, 58, 62, 63, 65, 82, 88, 90, 93, 97, 125, 133, 134, 135, 136, 167, 176, 181, 190, 191, 195, 206, 216, 219, 222, 223, 225, 226, 237, 247, 275, 277, 279, 283], "convers": [6, 7, 10, 18, 39, 57, 77, 99, 135, 175, 194, 195, 196, 197, 199, 201, 203, 206, 219, 231, 238, 251], "aim": [6, 7, 75, 82, 176, 193, 216, 222, 225, 276, 277], "comment": [6, 7, 39, 48, 121, 123, 203, 206, 239, 244], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 24, 31, 37, 40, 53, 57, 58, 60, 61, 62, 63, 71, 84, 86, 87, 93, 97, 99, 104, 105, 107, 111, 115, 117, 120, 121, 123, 124, 125, 135, 138, 139, 144, 167, 181, 183, 185, 196, 197, 199, 202, 203, 204, 205, 206, 207, 214, 218, 219, 222, 224, 226, 228, 238, 239, 241, 242, 244, 245, 247, 272, 278, 279, 283], "consum": [6, 39, 65, 117, 135], "human": [6, 14, 82, 173, 202, 206], "beings": 6, "english": [6, 58], "likewis": [6, 18, 38, 100, 124, 125], "reader": [6, 7, 20, 38, 40, 136, 193, 206, 241, 276, 281], "machineri": [6, 57, 201, 245], "mind": [6, 12, 15, 18, 24, 57, 93, 136, 192, 213, 214, 260, 278], "platform": [6, 57, 171, 190, 222, 238], "anyon": [6, 7, 10, 28, 202, 206, 271, 281, 282], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 35, 39, 48, 49, 57, 58, 62, 69, 82, 84, 93, 97, 138, 179, 186, 192, 194, 197, 199, 201, 202, 203, 206, 213, 215, 219, 221, 222, 225, 226, 227, 239, 241, 275, 277], "concis": [6, 138], "quick": [6, 7, 20, 57, 93, 97, 218, 224, 245], "depth": [6, 7, 9, 12, 13, 28, 48, 57, 123, 192, 193, 206], "tripl": [6, 74, 93, 190, 191, 193, 201, 247], "quot": [6, 12, 39, 87, 206, 247], "raw": [6, 7, 39, 57, 58, 63, 98, 99, 165, 170, 196, 197, 202, 214, 218, 282], "backslash": [6, 57, 206], "blank": [6, 99, 117, 192], "close": [6, 11, 25, 39, 56, 57, 61, 62, 65, 73, 75, 82, 84, 86, 107, 124, 192, 193, 194, 200, 201, 214, 224, 225, 239, 273, 283], "rare": [6, 20, 57, 222, 226, 235, 275], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 33, 34, 39, 57, 59, 65, 87, 138, 165, 176, 181, 190, 193, 198, 201, 202, 203, 213, 226, 255, 272, 275, 278], "consist": [6, 7, 10, 11, 16, 18, 23, 24, 26, 38, 48, 49, 53, 57, 58, 62, 63, 65, 67, 73, 75, 82, 87, 100, 103, 115, 132, 136, 145, 165, 171, 176, 179, 185, 192, 194, 196, 197, 199, 214, 222, 224, 225, 226, 230, 235, 238, 239, 244, 276, 278], "review": [6, 7, 137], "head": [6, 15, 38, 57, 224, 226, 232, 247, 278], "plural": [6, 7], "length": [6, 10, 39, 41, 47, 48, 49, 51, 55, 57, 58, 60, 62, 63, 65, 66, 70, 72, 73, 74, 87, 88, 93, 96, 97, 100, 101, 111, 116, 120, 124, 125, 126, 136, 140, 144, 168, 173, 174, 176, 181, 185, 190, 201, 202, 206, 212, 216, 218, 222, 226, 237, 238, 244, 247, 251, 253, 261], "equal": [6, 10, 11, 14, 18, 19, 20, 27, 31, 35, 38, 39, 40, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 70, 71, 72, 73, 74, 76, 82, 87, 88, 90, 93, 97, 100, 103, 107, 108, 112, 116, 118, 123, 133, 134, 155, 156, 171, 176, 181, 185, 190, 193, 194, 195, 196, 197, 199, 201, 202, 204, 206, 212, 214, 216, 219, 222, 223, 224, 225, 226, 232, 237, 238, 239, 244, 247, 251, 256, 261, 273, 276, 284], "clutter": 6, "harder": [6, 10, 18, 57, 82, 196, 237], "minim": [6, 18, 20, 37, 48, 49, 53, 56, 57, 58, 82, 84, 87, 97, 112, 125, 140, 195, 196, 197, 199, 202, 205, 215, 218, 219, 224, 244, 248], "amount": [6, 38, 57, 58, 69, 115, 131, 181, 187, 190, 199, 209, 237, 251, 253], "deprec": [6, 8, 13, 23, 32, 49, 57, 70, 84, 88, 110, 115, 135, 202, 206, 226, 232, 235, 236, 240, 242, 245, 249], "notifi": 6, "awai": [6, 38, 40, 58, 100, 101, 103, 123, 201, 206], "encourag": [6, 10, 38, 133, 134, 201], "label": [6, 38, 39, 51, 57, 67, 80, 84, 103, 144, 151, 155, 160, 169, 171, 192, 206, 207, 209, 218, 231, 232, 282], "elabor": [6, 21, 187, 258], "suffic": [6, 194, 224], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 25, 39, 48, 56, 58, 59, 61, 62, 63, 65, 82, 84, 90, 131, 133, 171, 190, 196, 199, 203, 205, 216, 218, 225, 226, 230, 231, 239, 241, 245, 247, 273, 275, 278, 279], "demonstr": [6, 7, 12, 18, 20, 24, 25, 48, 49, 57, 84, 97, 112, 115, 121, 125, 126, 135, 193, 196, 257, 283], "api": [6, 7, 10, 18, 21, 39, 57, 69, 77, 98, 99, 106, 131, 138, 167, 180, 188, 192, 199, 219, 221, 245, 248, 255, 256, 259, 266, 268, 269, 276, 277, 280], "simpl": [6, 11, 12, 16, 18, 20, 25, 29, 38, 39, 48, 56, 57, 61, 65, 69, 73, 75, 82, 84, 86, 93, 97, 98, 100, 101, 107, 108, 111, 115, 116, 118, 120, 123, 125, 126, 128, 130, 131, 135, 139, 145, 159, 160, 168, 169, 170, 181, 189, 190, 196, 197, 198, 202, 203, 206, 208, 213, 215, 216, 218, 219, 222, 225, 232, 238, 239, 244, 248, 250, 251, 253, 254, 258, 272, 275, 278, 279, 283], "too": [6, 12, 20, 27, 48, 49, 57, 63, 65, 67, 70, 72, 82, 87, 96, 97, 98, 133, 140, 213, 214, 218, 219, 222, 224, 225, 226, 237, 238, 254, 255], "thought": [6, 11, 57, 213, 222, 275, 278], "perfect": [6, 20, 48, 57, 97, 219, 225, 277, 278], "tell": [6, 7, 18, 19, 24, 39, 49, 58, 61, 65, 88, 99, 120, 176, 196, 201, 205, 213, 216, 222, 238, 275], "think": [6, 10, 11, 18, 19, 20, 24, 29, 37, 48, 123, 176, 241, 245, 275, 283], "test_": [6, 237], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 222, 223, 224, 273, 277, 284], "co": [6, 10, 12, 20, 22, 23, 24, 25, 26, 27, 31, 37, 39, 56, 57, 59, 61, 62, 63, 65, 66, 67, 70, 71, 73, 75, 79, 80, 81, 82, 84, 88, 93, 97, 99, 112, 113, 115, 121, 123, 124, 126, 128, 129, 130, 135, 138, 143, 145, 181, 183, 185, 187, 189, 190, 191, 192, 196, 199, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 216, 218, 222, 224, 225, 226, 227, 233, 245, 251, 253, 254, 255, 256, 261, 272, 273, 275, 277, 283, 284], "sin": [6, 7, 10, 11, 12, 18, 20, 22, 24, 25, 27, 29, 31, 37, 39, 56, 57, 59, 61, 62, 63, 65, 66, 67, 71, 75, 76, 79, 80, 81, 82, 84, 85, 88, 93, 98, 99, 109, 112, 113, 115, 120, 121, 123, 124, 126, 128, 129, 130, 135, 138, 143, 145, 169, 181, 183, 185, 187, 189, 190, 191, 192, 194, 196, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 216, 218, 221, 222, 224, 225, 227, 233, 239, 245, 251, 253, 254, 255, 256, 261, 272, 273, 275, 277, 278, 283, 284], "hint": [6, 20, 38, 41, 48, 57, 60, 63, 84, 88, 93, 97, 107, 138, 148, 152, 168, 170, 171, 181, 202, 213, 216, 224, 283], "1st_exact": [6, 222], "eq": [6, 11, 12, 14, 18, 20, 23, 27, 35, 37, 39, 57, 62, 63, 65, 67, 70, 74, 82, 87, 174, 192, 193, 197, 202, 204, 206, 208, 212, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 238, 239, 245, 251, 275, 277, 284], "c1": [6, 16, 58, 67, 74, 88, 90, 115, 157, 171, 214, 219, 222, 224, 257, 284], "comma": [6, 7, 12, 39, 57, 206, 245, 275], "readabl": [6, 30, 38, 85, 111, 202, 205, 206, 213, 215, 248], "accept": [6, 11, 20, 23, 27, 38, 39, 48, 57, 63, 71, 84, 87, 88, 90, 93, 96, 99, 121, 165, 181, 186, 192, 201, 202, 205, 206, 207, 214, 216, 218, 224, 238, 245, 251, 253, 256, 279], "rang": [6, 10, 11, 16, 20, 24, 37, 39, 46, 47, 48, 49, 51, 53, 57, 58, 62, 63, 65, 71, 88, 93, 97, 101, 105, 109, 140, 171, 192, 196, 197, 198, 199, 201, 202, 203, 208, 209, 212, 214, 215, 218, 222, 225, 226, 227, 231, 237, 244, 272, 283], "30": [6, 31, 37, 39, 43, 57, 58, 60, 61, 62, 65, 71, 73, 84, 88, 93, 94, 97, 100, 101, 121, 144, 195, 197, 201, 202, 206, 212, 215, 218, 226, 227, 283], "7": [6, 12, 18, 20, 31, 33, 34, 37, 39, 41, 43, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 79, 82, 84, 87, 88, 90, 91, 93, 97, 99, 100, 105, 107, 123, 130, 133, 134, 138, 171, 176, 178, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 232, 237, 238, 241, 244, 245, 251, 261, 273, 278, 279, 282], "8": [6, 16, 25, 29, 31, 32, 37, 39, 41, 48, 49, 50, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 73, 79, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 105, 107, 109, 123, 138, 143, 144, 155, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 208, 209, 212, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 237, 239, 241, 244, 251, 254, 255, 261, 272, 273, 277, 279, 283], "9": [6, 14, 27, 29, 37, 39, 45, 47, 48, 49, 53, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 70, 71, 73, 79, 82, 84, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 105, 107, 108, 109, 110, 112, 121, 123, 126, 132, 138, 140, 144, 176, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 212, 214, 215, 216, 218, 219, 222, 224, 225, 226, 227, 237, 241, 244, 251, 254, 277, 279, 284], "11": [6, 18, 33, 34, 39, 48, 51, 53, 55, 57, 58, 60, 62, 65, 69, 70, 71, 73, 74, 82, 84, 87, 88, 89, 93, 97, 99, 107, 121, 123, 136, 155, 165, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 213, 215, 219, 222, 224, 225, 226, 227, 238, 244, 255], "12": [6, 12, 20, 31, 37, 38, 39, 43, 45, 46, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 65, 67, 70, 71, 73, 82, 84, 88, 93, 94, 97, 100, 101, 105, 107, 109, 115, 123, 124, 136, 168, 181, 191, 194, 195, 196, 199, 201, 202, 203, 205, 206, 212, 214, 215, 219, 221, 222, 226, 227, 238, 241, 244, 254, 279, 283], "13": [6, 31, 39, 46, 48, 53, 57, 58, 60, 62, 65, 69, 70, 71, 72, 82, 87, 93, 97, 101, 105, 107, 121, 136, 192, 199, 201, 202, 203, 205, 206, 212, 219, 221, 223, 224, 226, 227, 237, 238, 261], "14": [6, 39, 46, 48, 52, 53, 55, 57, 58, 62, 63, 65, 82, 93, 94, 97, 98, 100, 105, 121, 191, 192, 195, 197, 199, 200, 201, 202, 203, 205, 206, 215, 218, 219, 222, 224, 226, 227, 273], "15": [6, 12, 20, 37, 43, 46, 48, 53, 55, 57, 58, 60, 61, 62, 65, 67, 70, 71, 73, 74, 82, 84, 87, 88, 89, 93, 94, 97, 100, 112, 144, 191, 192, 194, 195, 196, 197, 201, 202, 203, 205, 206, 208, 212, 213, 215, 218, 219, 223, 224, 225, 226, 227, 244, 272, 273, 278, 279], "16": [6, 27, 31, 37, 39, 48, 49, 52, 56, 57, 58, 62, 65, 66, 67, 71, 82, 84, 87, 93, 94, 96, 97, 101, 187, 194, 195, 196, 199, 200, 201, 202, 205, 206, 212, 214, 215, 216, 219, 226, 227, 244, 251, 260, 279], "17": [6, 10, 25, 27, 46, 48, 49, 57, 58, 61, 62, 63, 67, 70, 73, 82, 93, 97, 107, 196, 197, 201, 202, 205, 206, 213, 215, 219, 222, 227, 241, 245, 277], "18": [6, 25, 48, 49, 60, 62, 65, 67, 70, 73, 89, 93, 97, 100, 101, 105, 107, 109, 182, 191, 199, 200, 205, 206, 214, 215, 219, 222, 224, 225, 226, 227, 254], "19": [6, 25, 48, 57, 60, 65, 67, 70, 73, 93, 97, 99, 100, 191, 197, 201, 202, 205, 215, 219, 221, 224, 238, 272], "20": [6, 12, 25, 27, 35, 39, 46, 48, 49, 56, 57, 58, 61, 62, 65, 73, 74, 84, 93, 97, 100, 101, 103, 107, 118, 176, 178, 191, 192, 196, 200, 201, 202, 203, 205, 206, 212, 213, 214, 215, 218, 219, 222, 225, 226, 251, 273], "21": [6, 10, 43, 48, 57, 60, 62, 70, 71, 79, 93, 97, 99, 100, 136, 192, 197, 199, 200, 201, 203, 205, 206, 212, 222, 226, 227, 283], "22": [6, 12, 48, 57, 60, 61, 62, 65, 93, 97, 100, 101, 136, 200, 205, 218, 219, 224, 226], "23": [6, 37, 48, 49, 57, 60, 63, 65, 71, 73, 93, 97, 100, 136, 197, 202, 205, 212, 219, 244], "24": [6, 25, 31, 37, 45, 49, 50, 57, 60, 62, 65, 71, 79, 84, 93, 97, 100, 101, 105, 107, 168, 178, 191, 197, 199, 201, 202, 203, 205, 208, 213, 219, 222, 226, 241, 244, 261, 273, 279], "25": [6, 12, 25, 48, 49, 58, 60, 62, 65, 67, 70, 72, 89, 93, 96, 97, 100, 101, 107, 112, 118, 185, 191, 199, 201, 202, 205, 206, 212, 213, 215, 219, 221, 222, 223, 226, 238], "26": [6, 46, 57, 58, 60, 65, 69, 93, 97, 100, 101, 202, 219, 226], "27": [6, 24, 39, 40, 48, 52, 62, 67, 93, 97, 100, 101, 107, 109, 199, 202, 224], "28": [6, 39, 48, 56, 60, 61, 65, 93, 97, 100, 123, 215, 219, 222, 278], "29": [6, 31, 46, 48, 49, 57, 58, 60, 62, 63, 70, 71, 93, 97, 107, 160, 196, 214, 226], "assumpt": [6, 11, 12, 17, 19, 21, 24, 32, 33, 35, 36, 38, 39, 48, 49, 51, 56, 59, 61, 63, 64, 84, 87, 88, 93, 94, 100, 107, 111, 138, 178, 183, 195, 205, 206, 214, 215, 218, 222, 224, 225, 231, 239, 244, 262, 263, 283], "parenthes": [6, 12, 57, 99, 111, 159, 160, 190, 206, 230, 247], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 24, 27, 33, 34, 37, 48, 49, 53, 56, 57, 58, 59, 60, 61, 63, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 93, 97, 98, 99, 100, 101, 103, 105, 107, 111, 115, 116, 121, 132, 138, 143, 157, 165, 166, 167, 169, 181, 185, 186, 190, 192, 193, 196, 197, 200, 201, 202, 203, 204, 206, 207, 208, 214, 215, 216, 218, 219, 221, 222, 224, 230, 231, 232, 235, 237, 238, 239, 244, 245, 247, 255, 258, 261, 273, 275, 277, 278, 279, 282, 283, 284], "enclos": [6, 67, 68, 73, 96, 108, 206, 216, 245], "colon": [6, 57], "preced": [6, 7, 12, 40, 49, 57, 58, 61, 62, 151, 218, 245], "space": [6, 12, 20, 37, 38, 39, 57, 58, 59, 66, 67, 68, 70, 72, 73, 86, 93, 99, 100, 109, 115, 116, 117, 118, 140, 142, 145, 155, 158, 160, 166, 168, 175, 181, 185, 187, 190, 191, 192, 193, 201, 225, 226, 237, 241, 251, 253, 255, 256, 257, 258, 260, 261, 268, 275, 278], "omit": [6, 10, 18, 20, 39, 49, 56, 57, 58, 62, 82, 84, 87, 93, 173, 206, 207, 214, 216, 224, 230, 239, 244, 273], "absent": [6, 41, 224], "specifi": [6, 7, 10, 14, 18, 20, 25, 26, 27, 38, 39, 40, 52, 56, 57, 58, 59, 60, 63, 65, 66, 70, 73, 82, 84, 86, 87, 88, 90, 93, 97, 99, 100, 101, 107, 112, 115, 116, 120, 121, 123, 125, 126, 128, 131, 133, 134, 135, 136, 138, 139, 155, 160, 165, 166, 168, 169, 174, 180, 181, 183, 185, 187, 189, 190, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 208, 209, 212, 213, 214, 216, 218, 222, 223, 224, 225, 226, 227, 231, 232, 233, 237, 238, 239, 244, 245, 251, 253, 254, 257, 260, 279], "displai": [6, 7, 12, 18, 19, 57, 58, 61, 82, 86, 100, 101, 105, 142, 175, 181, 185, 186, 192, 196, 197, 206, 214, 230, 237], "signatur": [6, 20, 33, 34, 49, 57, 93, 239, 240, 244, 245], "brace": [6, 62, 121, 206], "appear": [6, 7, 11, 12, 14, 38, 39, 41, 46, 48, 57, 58, 62, 63, 66, 67, 70, 73, 76, 80, 82, 84, 88, 93, 97, 99, 121, 125, 155, 171, 173, 176, 192, 194, 196, 199, 201, 202, 206, 215, 218, 222, 223, 224, 226, 230, 232, 237, 244, 245, 251, 256], "shape": [6, 10, 39, 73, 88, 90, 93, 95, 96, 105, 107, 115, 120, 121, 181, 192, 193, 195, 206, 209, 216, 226, 227, 228, 230, 231, 232, 245, 282], "combin": [6, 10, 12, 20, 26, 38, 57, 61, 62, 65, 84, 86, 87, 88, 97, 101, 107, 115, 120, 124, 131, 139, 150, 157, 165, 166, 168, 169, 170, 174, 176, 177, 193, 194, 196, 197, 199, 201, 202, 206, 207, 215, 216, 218, 219, 222, 224, 226, 227, 241, 244, 272, 275, 278], "incorrectli": [6, 10, 20, 66, 67, 93, 194], "opt_cs": [6, 218], "canon": [6, 11, 18, 23, 39, 41, 46, 48, 49, 53, 57, 58, 59, 63, 73, 82, 87, 93, 97, 99, 116, 148, 152, 171, 173, 176, 178, 199, 207, 214, 215, 218, 222, 224, 226, 232, 244, 283], "find": [6, 11, 12, 14, 16, 17, 20, 22, 24, 26, 27, 31, 34, 37, 39, 40, 48, 51, 52, 53, 56, 57, 61, 63, 65, 67, 69, 70, 71, 74, 79, 82, 84, 86, 93, 97, 99, 113, 122, 129, 136, 138, 140, 156, 163, 165, 166, 167, 171, 174, 176, 189, 192, 193, 194, 195, 196, 197, 199, 203, 205, 206, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 225, 226, 232, 241, 244, 245, 247, 251, 261, 273, 275, 277, 279, 284], "optim": [6, 11, 25, 39, 41, 48, 61, 87, 97, 111, 138, 151, 155, 202, 206, 207, 215, 218, 226, 238], "mul": [6, 10, 11, 12, 15, 20, 31, 82, 84, 88, 97, 151, 155, 165, 166, 195, 196, 197, 201, 202, 206, 207, 208, 215, 218, 222, 223, 224, 225, 230, 278], "pow": [6, 10, 11, 12, 31, 36, 39, 57, 58, 63, 82, 88, 97, 170, 195, 196, 197, 202, 206, 208, 215, 218, 224, 225, 278, 282], "neg": [6, 11, 12, 18, 19, 24, 35, 36, 39, 40, 52, 56, 57, 62, 63, 65, 67, 69, 70, 73, 82, 84, 86, 87, 88, 93, 96, 97, 100, 101, 103, 104, 105, 107, 171, 181, 191, 194, 195, 197, 199, 201, 202, 203, 206, 212, 214, 215, 216, 218, 219, 222, 224, 225, 226], "coeffici": [6, 14, 16, 18, 34, 37, 39, 56, 57, 59, 61, 62, 65, 70, 75, 76, 79, 80, 82, 86, 87, 90, 93, 94, 97, 108, 116, 121, 144, 158, 168, 176, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 212, 213, 216, 218, 219, 221, 222, 223, 224, 225, 226, 232, 238, 255, 258, 268, 278, 283], "none": [6, 7, 10, 11, 18, 19, 20, 31, 32, 33, 34, 35, 37, 38, 39, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 82, 84, 85, 87, 88, 90, 93, 94, 97, 98, 99, 100, 107, 112, 113, 115, 116, 117, 118, 120, 121, 140, 142, 144, 145, 151, 156, 161, 166, 168, 171, 173, 177, 178, 179, 181, 183, 185, 186, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 244, 245, 247, 250, 251, 254, 279, 283, 284], "process": [6, 7, 10, 11, 12, 18, 36, 39, 48, 49, 55, 57, 58, 63, 65, 73, 82, 84, 93, 97, 107, 117, 121, 123, 129, 132, 133, 135, 138, 192, 193, 199, 206, 207, 214, 218, 222, 224, 237, 241, 283], "concern": [6, 11, 18, 37, 40, 56, 61, 97, 187, 192, 194, 195, 196, 205, 206, 207, 218, 219, 224, 238, 239, 241, 247], "item": [6, 7, 11, 12, 14, 39, 46, 47, 49, 57, 62, 68, 74, 88, 93, 97, 116, 192, 196, 199, 202, 206, 214, 222, 223, 226, 237, 238, 241, 244, 245, 283], "fragment": [6, 58], "desir": [6, 10, 12, 16, 20, 23, 27, 30, 48, 49, 57, 58, 60, 61, 62, 63, 67, 71, 73, 87, 88, 93, 96, 97, 98, 116, 117, 118, 120, 131, 135, 156, 181, 189, 190, 195, 197, 199, 201, 202, 203, 206, 207, 209, 214, 218, 222, 224, 225, 238, 240, 241, 244, 258, 272], "span": [6, 10, 86, 93, 100, 101, 115, 201, 206, 242, 279], "subsequ": [6, 12, 57, 63, 181, 197, 199, 202, 241, 244, 255, 258], "indent": [6, 12, 247], "embed": [6, 7, 37, 49, 57, 85, 201], "hyperlink": 6, "classnam": 6, "erf": [6, 65, 82, 84, 206, 216, 226], "gauss": [6, 65, 84, 93, 140, 194, 201, 204, 224, 225], "erfc": [6, 65, 82, 206, 226], "complementari": [6, 65, 107], "erfi": [6, 65, 82, 206], "erf2": [6, 65, 206], "erfinv": [6, 65, 206, 226], "invers": [6, 31, 48, 49, 57, 58, 59, 65, 84, 90, 93, 97, 115, 116, 160, 164, 165, 168, 173, 176, 193, 194, 195, 197, 199, 202, 203, 206, 208, 216, 218, 222, 224, 225, 226, 244, 279, 283], "erfcinv": [6, 65, 206], "erf2inv": [6, 65, 206], "besselj": [6, 65, 79, 206, 218, 222, 277], "besselbas": [6, 65], "bessel": [6, 7, 63, 75, 84, 202, 218, 222, 226, 277], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 38, 39, 59, 62, 65, 77, 84, 88, 100, 103, 116, 121, 134, 187, 194, 196, 197, 202, 207, 208, 214, 222, 223, 226, 244, 258, 260, 273, 283], "bess": [6, 65, 206, 218, 222, 226], "besselk": [6, 65, 206, 226], "cite": [6, 21], "citat": [6, 56, 200], "meant": [6, 7, 10, 12, 18, 20, 39, 57, 65, 70, 84, 97, 121, 138, 192, 197, 214, 218, 223, 256, 278], "augment": [6, 39, 93, 116, 133, 134, 138, 204, 224, 225, 242, 245, 284], "freeli": [6, 30, 91, 115, 193], "wikipedia": [6, 11, 18, 20, 31, 33, 34, 35, 37, 38, 39, 45, 46, 48, 49, 56, 57, 58, 59, 60, 62, 63, 65, 67, 69, 73, 74, 75, 84, 86, 87, 88, 90, 93, 97, 105, 107, 110, 140, 142, 143, 144, 146, 147, 148, 152, 153, 154, 157, 159, 160, 169, 171, 174, 181, 183, 188, 202, 209, 213, 214, 215, 222, 225, 226, 239, 244, 251, 253, 257, 259, 261, 277, 279, 281], "wolfram": [6, 35, 50, 51, 57, 58, 60, 62, 63, 65, 67, 73, 84, 93, 97, 99, 200, 206, 208, 209, 211, 214, 219, 226, 244, 279], "mathworld": [6, 11, 35, 50, 51, 57, 58, 60, 62, 63, 65, 67, 73, 84, 93, 97, 200, 209, 214, 219, 226, 244], "nist": [6, 63, 65, 176], "digit": [6, 11, 12, 25, 39, 57, 58, 60, 61, 67, 84, 87, 97, 131, 181, 196, 202, 213, 218, 244, 272], "dlmf": [6, 63, 65], "suffer": 6, "rot": [6, 73, 168], "publish": [6, 82, 216], "identifi": [6, 10, 18, 19, 37, 50, 57, 60, 61, 84, 93, 103, 133, 159, 160, 193, 196, 197, 207, 215, 218, 222, 223, 225, 226, 245, 248], "clickabl": 6, "kozen89": [6, 199, 200], "kozen": [6, 200], "landau": [6, 200, 273], "polynomi": [6, 7, 11, 16, 18, 22, 27, 35, 48, 56, 57, 58, 61, 62, 75, 76, 78, 80, 84, 87, 88, 90, 93, 97, 101, 107, 136, 138, 193, 195, 200, 204, 208, 213, 215, 216, 218, 219, 221, 222, 225, 237, 262, 269, 274, 279, 284], "decomposit": [6, 48, 55, 89, 90, 93, 195, 197, 199, 200, 208, 283], "1989": [6, 200, 224], "pp": [6, 48, 49, 55, 56, 57, 58, 62, 63, 84, 88, 93, 125, 135, 191, 194, 199, 200, 222, 223, 226], "445": [6, 200], "456": [6, 57, 200], "abramowitz": [6, 65], "milton": [6, 65], "stegun": [6, 65], "iren": [6, 65], "chapter": [6, 48, 65, 97, 121, 200], "formula": [6, 16, 37, 51, 56, 57, 61, 62, 63, 65, 70, 87, 93, 97, 191, 193, 199, 202, 206, 208, 212, 215, 218, 219, 222, 277, 283], "tabl": [6, 18, 40, 48, 57, 62, 65, 78, 84, 93, 97, 115, 138, 191, 201, 228], "ed": [6, 49, 65, 93, 200, 224, 226], "1965": [6, 65, 88], "luke": [6, 65, 82, 216], "l": [6, 10, 12, 37, 38, 39, 40, 46, 48, 49, 56, 58, 65, 68, 69, 70, 71, 72, 74, 75, 80, 82, 84, 86, 89, 90, 93, 97, 100, 101, 107, 109, 115, 116, 118, 120, 121, 124, 125, 126, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 143, 169, 172, 173, 174, 176, 189, 190, 191, 193, 195, 197, 199, 200, 206, 208, 209, 215, 216, 219, 222, 224, 226, 230, 231, 232, 233, 237, 239, 244, 261, 283], "Their": [6, 57, 65, 82, 191, 192, 196, 199, 216], "approxim": [6, 12, 17, 27, 37, 48, 56, 57, 58, 61, 65, 67, 73, 82, 84, 93, 97, 101, 104, 140, 174, 192, 196, 197, 202, 209, 213, 216, 226, 273, 277], "1969": [6, 58, 65, 82, 200, 216], "en": [6, 7, 18, 20, 31, 33, 34, 35, 37, 38, 39, 45, 46, 48, 49, 56, 57, 58, 59, 60, 62, 63, 65, 67, 69, 73, 74, 75, 84, 85, 86, 87, 88, 90, 93, 97, 105, 107, 110, 140, 142, 143, 144, 146, 147, 148, 152, 153, 154, 157, 159, 160, 169, 171, 181, 183, 188, 202, 203, 209, 213, 214, 215, 222, 225, 226, 239, 244, 245, 251, 253, 257, 259, 261, 279], "bessel_funct": [6, 65], "typefunct": [6, 65], "gamma": [6, 7, 12, 20, 56, 57, 59, 61, 62, 82, 84, 110, 138, 168, 190, 191, 206, 216, 218, 222, 226, 283], "infti": [6, 11, 18, 35, 56, 57, 58, 62, 63, 65, 82, 84, 193, 202, 209, 213, 216, 222, 225, 226, 273, 277, 283], "mathrm": [6, 29, 47, 56, 57, 58, 65, 82, 84, 93, 197, 199, 206, 214, 216, 222, 225, 226, 273, 277], "factori": [6, 16, 20, 56, 57, 61, 62, 65, 93, 97, 99, 191, 197, 199, 201, 202, 206, 208, 218, 224, 226, 239, 240, 244, 245, 283], "z": [6, 10, 11, 12, 14, 18, 20, 25, 26, 35, 36, 39, 40, 48, 49, 56, 57, 58, 59, 60, 62, 63, 65, 69, 70, 71, 72, 73, 82, 84, 87, 88, 90, 93, 99, 100, 101, 109, 112, 113, 115, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 136, 138, 139, 140, 149, 151, 155, 165, 166, 168, 172, 176, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 238, 239, 245, 251, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 282, 283, 284], "whole": [6, 10, 18, 57, 59, 65, 84, 101, 109, 192, 193, 201, 202, 206, 209, 214, 216, 222, 225, 244], "complex": [6, 10, 11, 12, 15, 18, 20, 24, 27, 31, 35, 36, 37, 39, 48, 57, 58, 60, 61, 62, 65, 69, 79, 82, 88, 89, 93, 97, 98, 99, 105, 107, 111, 121, 138, 140, 144, 154, 157, 159, 160, 171, 180, 181, 190, 194, 195, 197, 201, 202, 206, 207, 211, 214, 216, 218, 222, 224, 225, 226, 239, 247, 283, 284], "plane": [6, 31, 57, 65, 67, 69, 70, 72, 73, 84, 105, 115, 123, 143, 144, 189, 190, 214, 225, 261, 269, 283], "pole": [6, 11, 65, 82, 107, 115, 144, 213, 216, 222], "pi": [6, 10, 11, 12, 15, 18, 20, 22, 23, 24, 27, 30, 31, 32, 34, 35, 36, 37, 39, 49, 56, 57, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 76, 82, 84, 93, 97, 109, 123, 138, 140, 142, 143, 144, 145, 147, 155, 166, 168, 169, 172, 174, 181, 191, 192, 194, 196, 197, 202, 206, 209, 213, 214, 215, 216, 218, 221, 222, 224, 225, 226, 244, 251, 254, 261, 272, 277, 283], "oo": [6, 11, 14, 18, 19, 23, 35, 37, 56, 57, 61, 62, 63, 65, 70, 82, 84, 87, 93, 107, 109, 157, 169, 172, 197, 199, 202, 211, 212, 213, 214, 218, 221, 222, 224, 225, 226, 231, 244, 247, 273, 277], "known": [6, 11, 18, 19, 20, 34, 38, 39, 40, 46, 48, 49, 57, 58, 61, 62, 65, 67, 70, 75, 82, 84, 85, 94, 97, 105, 107, 108, 110, 112, 118, 135, 174, 181, 189, 195, 196, 197, 201, 202, 206, 209, 212, 214, 215, 216, 218, 221, 222, 223, 224, 226, 244, 245, 251, 258, 260, 283], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 24, 26, 27, 31, 35, 36, 37, 39, 57, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 81, 82, 84, 85, 88, 89, 93, 97, 99, 100, 103, 107, 109, 123, 140, 142, 144, 145, 150, 155, 165, 166, 168, 169, 171, 172, 174, 181, 187, 190, 191, 194, 196, 197, 199, 201, 202, 205, 206, 207, 212, 215, 216, 218, 219, 221, 222, 224, 225, 226, 244, 245, 247, 251, 260, 261, 272, 277, 282, 283, 284], "obei": [6, 65, 191, 206, 216], "mirror": [6, 65, 84, 144], "symmetri": [6, 10, 45, 50, 53, 65, 88, 150, 191, 222, 230, 232, 272, 283], "conjug": [6, 35, 46, 47, 48, 57, 63, 65, 88, 93, 109, 140, 154, 157, 171, 202, 206, 222, 232], "differenti": [6, 7, 10, 11, 22, 37, 57, 62, 63, 65, 74, 75, 77, 80, 107, 115, 116, 120, 121, 123, 125, 128, 131, 132, 133, 134, 135, 138, 139, 160, 166, 180, 181, 183, 185, 187, 190, 193, 199, 203, 205, 206, 211, 216, 218, 222, 223, 251, 258, 259, 262, 269, 273, 274, 277], "polygamma": [6, 62, 65, 206], "seri": [6, 16, 37, 38, 39, 40, 47, 48, 56, 57, 59, 61, 62, 63, 65, 80, 81, 82, 86, 97, 104, 107, 121, 128, 130, 138, 185, 189, 198, 199, 206, 211, 212, 216, 222, 225, 263, 269, 274], "expans": [6, 16, 20, 39, 57, 59, 62, 63, 65, 84, 93, 97, 135, 150, 152, 202, 203, 208, 209, 210, 215, 217, 218, 222, 224, 225, 263, 274, 283], "eulergamma": [6, 57, 61, 62, 65], "zeta": [6, 11, 12, 56, 57, 61, 62, 197, 201, 206, 213, 226], "40": [6, 27, 39, 60, 62, 65, 67, 74, 88, 93, 97, 100, 192, 203, 205, 206, 226, 247, 272], "288037795340032417959588909060233922890": [6, 65], "49801566811835604271": [6, 65], "15494982830181068512": [6, 65], "lowergamma": [6, 65, 226], "lower": [6, 10, 11, 18, 23, 35, 37, 39, 48, 49, 56, 57, 59, 65, 66, 68, 73, 74, 84, 88, 89, 90, 93, 105, 110, 115, 171, 185, 191, 193, 195, 197, 199, 202, 206, 215, 216, 218, 222, 231, 232, 241, 251, 273, 281], "uppergamma": [6, 62, 65, 206, 226], "upper": [6, 35, 56, 58, 61, 65, 66, 73, 74, 88, 89, 90, 93, 96, 97, 105, 115, 164, 171, 191, 195, 197, 199, 201, 202, 206, 216, 224, 231, 251], "loggamma": [6, 7, 65, 206], "log": [6, 7, 12, 20, 29, 31, 37, 39, 48, 56, 57, 61, 62, 63, 65, 75, 79, 81, 82, 84, 88, 93, 97, 192, 197, 206, 208, 213, 216, 218, 222, 225, 226, 233, 273, 283, 284], "digamma": [6, 62, 65, 206], "trigamma": [6, 65, 206], "beta": [6, 12, 39, 48, 57, 84, 168, 181, 191, 201, 203, 206, 222, 226], "euler": [6, 37, 38, 56, 57, 58, 61, 62, 65, 73, 79, 85, 97, 115, 168, 181, 186, 190, 191, 202, 206, 222, 226, 251, 253], "gamma_funct": [6, 65], "gov": [6, 63, 65], "gammafunct": [6, 65], "gammabetaerf": [6, 62, 65], "unusu": [6, 18, 123, 237], "inlin": [6, 85, 186, 206, 239], "pretti": [6, 11, 20, 38, 39, 65, 84, 85, 93, 97, 101, 107, 123, 186, 216, 218, 225, 260, 274, 277, 279, 283], "As": [6, 10, 15, 16, 19, 20, 25, 30, 39, 48, 49, 57, 58, 61, 62, 63, 65, 81, 82, 87, 93, 96, 97, 99, 115, 120, 121, 123, 125, 132, 135, 136, 171, 176, 189, 193, 194, 196, 197, 199, 202, 203, 205, 206, 213, 214, 216, 222, 225, 226, 244, 245, 255, 256, 272, 273, 275, 277, 278, 279, 282, 283], "literatur": [6, 11, 82, 198, 269], "fact": [6, 10, 11, 18, 19, 20, 24, 34, 35, 57, 62, 65, 75, 82, 97, 103, 123, 135, 176, 193, 194, 196, 199, 201, 203, 205, 216, 218, 222, 225, 237, 245, 260, 272, 275, 276, 277, 278, 283], "eval": [6, 10, 18, 33, 34, 39, 57, 63, 65, 157, 171, 197, 202, 206, 239, 272], "illumin": 6, "tone": 6, "narr": [6, 8, 276], "excerpt": 6, "geometri": [6, 66, 67, 68, 70, 71, 72, 73, 74, 84, 131, 144, 198, 254, 261, 262, 269, 277], "autofunct": 6, "intersect": [6, 18, 24, 37, 38, 48, 67, 68, 70, 71, 72, 73, 74, 144, 193, 202, 206, 212, 213, 214, 225], "convex_hul": [6, 69, 73, 74], "are_similar": [6, 68, 69, 74], "autoclass": 6, "linearent": [6, 67, 70, 71, 72, 73], "rai": [6, 67, 69, 70, 71, 73, 74, 140, 144], "segment": [6, 10, 48, 67, 69, 70, 71, 72, 73, 74, 189, 192, 222, 237], "curv": [6, 38, 59, 69, 84, 97, 100, 140, 192, 193, 222, 251, 261, 269, 273], "ellips": [6, 68, 69, 73, 143, 192, 206, 269, 282], "circl": [6, 20, 57, 67, 68, 69, 71, 72, 73, 74, 82, 144, 151, 192, 225, 251, 254, 261], "polygon": [6, 67, 68, 69, 74, 192, 261, 269], "regularpolygon": [6, 68, 69, 73, 192], "triangl": [6, 20, 38, 62, 68, 69, 73, 74, 84, 88, 97, 191, 192, 254, 261], "rel": [6, 7, 10, 38, 39, 47, 48, 49, 50, 54, 55, 56, 57, 58, 61, 68, 82, 97, 112, 115, 118, 126, 135, 136, 143, 170, 181, 185, 189, 190, 193, 195, 196, 199, 201, 214, 216, 221, 224, 226, 237, 244, 255, 256, 260, 277], "cumbersom": [6, 27], "viewcod": 6, "aco": [6, 12, 31, 63, 70, 73, 123, 138, 144, 181, 206, 222, 251, 283], "obj": [6, 10, 18, 57, 197, 202, 206, 240], "qualifi": [6, 248], "elementari": [6, 18, 19, 20, 48, 57, 58, 61, 64, 65, 79, 82, 84, 88, 93, 97, 136, 164, 167, 202, 203, 244, 245, 255, 263], "trigonometr": [6, 20, 23, 27, 57, 84, 203, 209, 217, 218, 221, 222, 225, 245, 263, 274, 284], "trail": [6, 49, 97, 197, 199, 202, 242, 247], "pair": [6, 12, 16, 38, 39, 48, 49, 57, 58, 63, 69, 74, 81, 93, 97, 121, 125, 161, 163, 165, 166, 171, 180, 191, 193, 196, 199, 201, 202, 207, 212, 213, 215, 216, 218, 219, 222, 225, 226, 239, 244, 255, 272, 279], "www": [6, 7, 31, 37, 48, 49, 58, 60, 62, 65, 79, 84, 85, 97, 105, 186, 200, 205, 206, 215, 218, 219, 222, 226, 244, 279, 282], "master": [6, 7, 29, 84, 237], "usag": [6, 7, 11, 12, 18, 19, 20, 30, 33, 59, 63, 84, 168, 187, 192, 193, 199, 206, 214, 216, 219, 222, 223, 227, 241, 245, 246, 258, 259, 266, 278], "expect": [6, 7, 12, 18, 20, 38, 40, 42, 57, 63, 65, 69, 87, 97, 98, 107, 121, 165, 196, 199, 201, 203, 204, 213, 218, 221, 224, 225, 226, 235, 237, 238, 241, 244, 245, 277, 278], "vector": [6, 16, 31, 35, 39, 41, 48, 49, 57, 59, 65, 70, 71, 72, 79, 80, 86, 88, 93, 98, 100, 103, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 143, 144, 157, 166, 168, 173, 176, 181, 183, 185, 186, 193, 201, 206, 216, 222, 224, 226, 231, 232, 237, 238, 253, 257, 262, 266, 268, 279], "dynamicsymbol": [6, 111, 112, 113, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 181, 183, 185, 186, 187, 189, 190], "custom": [6, 10, 21, 39, 49, 57, 61, 64, 85, 88, 93, 113, 115, 180, 186, 187, 208, 212, 219, 226, 232, 238, 245, 251, 260, 277, 279], "sine": [6, 20, 57, 63, 65, 82, 84, 145, 203, 209, 215, 272], "expand": [6, 10, 11, 12, 16, 18, 39, 57, 59, 61, 62, 63, 65, 82, 84, 88, 107, 121, 123, 138, 152, 160, 163, 170, 171, 194, 196, 199, 201, 202, 203, 206, 209, 213, 215, 216, 218, 222, 225, 226, 230, 238, 245, 257, 272, 277], "troubleshoot": [6, 135], "spell": [6, 10, 11, 222], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 23, 25, 27, 49, 56, 57, 61, 65, 67, 72, 82, 84, 87, 90, 93, 96, 97, 161, 163, 170, 171, 192, 196, 201, 206, 211, 213, 214, 215, 216, 218, 219, 222, 224, 245, 247, 272, 275, 278, 279, 283], "referencefram": [6, 10, 112, 113, 115, 116, 118, 121, 123, 124, 125, 128, 129, 130, 133, 134, 135, 136, 138, 139, 181, 182, 183, 185, 186, 187, 188, 189, 268], "though": [6, 11, 12, 18, 19, 20, 25, 26, 27, 30, 40, 57, 58, 59, 69, 73, 82, 84, 88, 93, 97, 111, 116, 123, 133, 135, 166, 180, 181, 189, 190, 194, 196, 197, 202, 203, 215, 216, 218, 222, 223, 224, 225, 237, 258, 273, 278, 283], "frame": [6, 111, 112, 113, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 130, 132, 133, 134, 135, 136, 138, 139, 180, 181, 182, 183, 185, 187, 189, 241, 251, 258], "notimplementederror": [6, 23, 24, 26, 27, 37, 56, 67, 70, 74, 84, 93, 105, 195, 201, 205, 214, 221, 222, 223, 224, 225], "outsid": [6, 24, 35, 48, 57, 65, 68, 73, 88, 97, 111, 176, 190, 202, 218, 273, 278], "plot": [6, 20, 29, 66, 67, 69, 70, 73, 80, 85, 93, 100, 101, 106, 138, 155, 158, 164, 209, 262, 268, 269, 277, 282], "ahead": [6, 97], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 24, 25, 39, 56, 57, 63, 65, 66, 67, 68, 69, 70, 71, 73, 84, 87, 88, 90, 93, 97, 99, 100, 101, 107, 111, 113, 121, 123, 124, 125, 128, 129, 135, 138, 168, 169, 174, 181, 191, 193, 195, 196, 197, 202, 206, 213, 214, 218, 219, 222, 223, 224, 226, 237, 238, 240, 272, 273, 275], "common": [6, 7, 10, 11, 12, 18, 19, 20, 22, 23, 24, 37, 39, 48, 49, 57, 58, 63, 68, 71, 74, 84, 90, 92, 93, 97, 98, 105, 107, 112, 115, 117, 124, 131, 136, 138, 143, 176, 181, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 208, 214, 215, 216, 218, 219, 222, 224, 225, 226, 238, 239, 242, 244, 245, 258, 260, 266, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284], "matrixcommon": [6, 88, 90, 93], "dyadic": [6, 60, 112, 118, 121, 123, 128, 130, 138, 181, 183, 186, 188, 251, 254, 259], "shorten": 6, "highli": [7, 57, 61, 104, 196, 202, 211, 239], "aspect": [7, 18, 93, 196], "teach": [7, 49, 58, 226], "conduct": 7, "accord": [7, 12, 39, 45, 48, 49, 53, 56, 57, 58, 65, 87, 90, 93, 97, 99, 115, 122, 131, 165, 171, 192, 197, 199, 201, 203, 219, 224, 225, 232, 237, 239, 244, 260], "survei": 7, "commonli": [7, 11, 49, 62, 65, 84, 93, 111, 189, 194, 222, 258], "encount": [7, 12, 16, 23, 57, 84, 93, 163, 194, 199, 202, 224, 225, 239, 251, 279], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 24, 27, 41, 51, 53, 57, 58, 69, 82, 84, 88, 93, 97, 100, 102, 103, 108, 111, 121, 125, 126, 129, 131, 133, 180, 189, 190, 193, 194, 199, 216, 218, 219, 222, 225, 241, 244, 268, 273, 275, 279], "offer": [7, 38, 39, 48, 57, 98, 111, 138, 180, 190, 196, 201, 241, 259], "bring": [7, 82, 116, 129, 195, 209, 218, 279], "greater": [7, 35, 49, 57, 62, 63, 65, 82, 86, 97, 107, 199, 202, 205, 213, 218, 222, 224, 226, 241, 244, 258, 273], "clariti": [7, 48, 185], "mission": [7, 38, 91], "ca": [7, 29, 58, 65, 84, 205, 206, 244], "dedic": [7, 39, 198, 221, 239, 256, 258], "essenti": [7, 41, 52, 57, 61, 63, 64, 65, 82, 118, 123, 184, 187, 188, 190, 193, 194, 197, 201, 213, 216, 252, 255, 258, 259, 260, 266, 268], "element": [7, 10, 11, 12, 15, 18, 31, 35, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 73, 80, 82, 84, 86, 87, 88, 89, 90, 93, 96, 97, 98, 100, 101, 107, 108, 118, 138, 140, 143, 157, 168, 176, 185, 188, 190, 192, 193, 194, 195, 197, 199, 202, 204, 205, 206, 212, 213, 214, 216, 218, 219, 222, 224, 225, 226, 227, 231, 238, 240, 241, 244, 245, 246, 254, 273, 278, 279, 282, 283], "deviat": [7, 144, 226], "advanc": [7, 15, 17, 20, 33, 48, 57, 61, 62, 93, 94, 131, 136, 188, 192, 195, 196, 198, 200, 201, 208, 215, 222, 237, 238, 239, 244, 268, 272, 274, 276, 280, 281, 282, 283], "docutil": 7, "sourceforg": [7, 38], "net": [7, 38, 73, 200, 222, 226, 244], "ext": [7, 193, 197], "autodoc": 7, "associ": [7, 10, 11, 18, 38, 40, 55, 57, 58, 64, 65, 79, 80, 82, 86, 136, 138, 161, 169, 180, 181, 189, 190, 194, 195, 196, 197, 199, 201, 206, 214, 216, 219, 232, 246], "graphic": [7, 105], "info": [7, 12, 107, 206, 222, 223], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 85, 245], "subset": [7, 16, 18, 20, 37, 38, 41, 44, 48, 49, 55, 62, 63, 69, 80, 82, 84, 86, 97, 193, 195, 199, 201, 206, 214, 244, 263], "modifi": [7, 11, 12, 38, 39, 48, 57, 63, 65, 97, 99, 134, 143, 192, 199, 201, 202, 203, 206, 218, 224, 225, 226, 237, 240, 241, 244, 245, 272, 277, 279], "sphinx_math_dollar": 7, "delimit": [7, 57, 206], "dollar": [7, 277], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 103, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 120, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 237, 238, 239, 240, 241, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 260, 261, 272, 273, 275, 277, 278, 279, 282, 283, 284], "sphinxext": 7, "plot_direct": 7, "figur": [7, 57, 58, 67, 68, 70, 72, 73, 84, 101, 121, 166, 189, 190, 191, 192, 203, 206, 261, 283], "devel": [7, 191], "supersed": [7, 121, 138], "pep": [7, 39, 57, 87], "257": [7, 97, 224], "our": [7, 9, 10, 16, 20, 29, 39, 57, 65, 82, 93, 97, 124, 176, 189, 190, 192, 193, 195, 201, 202, 203, 206, 213, 216, 219, 222, 225, 237, 272, 275, 276, 278, 283], "introduct": [7, 10, 17, 48, 49, 62, 65, 197, 199, 200, 202, 206, 219, 222, 225, 259, 266, 276, 282], "four": [7, 39, 49, 57, 61, 65, 87, 90, 97, 103, 108, 122, 131, 136, 144, 181, 192, 193, 199, 202, 206, 214, 219, 222, 224, 226, 227, 251, 253, 256, 268], "locat": [7, 10, 49, 57, 71, 93, 97, 100, 101, 103, 115, 125, 132, 135, 139, 185, 187, 201, 202, 206, 218, 226, 240, 249, 251, 255, 257, 260], "websit": [7, 281], "advertis": 7, "serv": [7, 11, 16, 20, 33, 34, 39, 54, 57, 64, 80, 201, 222, 223, 247, 276], "initi": [7, 11, 18, 25, 33, 48, 52, 57, 58, 59, 62, 65, 73, 75, 76, 79, 80, 81, 82, 85, 97, 99, 101, 103, 105, 107, 112, 116, 118, 120, 121, 123, 125, 130, 133, 134, 135, 138, 139, 143, 151, 160, 182, 183, 186, 190, 191, 199, 201, 202, 206, 212, 216, 218, 222, 224, 225, 231, 239, 246, 247, 251, 253, 254, 255, 256], "obtain": [7, 11, 12, 14, 16, 24, 27, 33, 34, 38, 40, 41, 48, 49, 50, 53, 57, 58, 60, 61, 62, 63, 65, 67, 68, 70, 71, 73, 79, 82, 84, 86, 88, 93, 96, 97, 104, 107, 131, 134, 136, 144, 166, 171, 176, 193, 194, 197, 199, 201, 202, 205, 207, 214, 215, 216, 218, 219, 222, 223, 224, 225, 244, 247, 255, 256], "technic": [7, 10, 13, 20, 28, 38, 57, 138, 157, 193, 222, 239, 244, 258, 275, 278], "place": [7, 8, 10, 11, 12, 18, 20, 24, 28, 38, 49, 50, 57, 58, 63, 73, 89, 93, 96, 97, 99, 107, 138, 139, 200, 201, 206, 207, 213, 215, 218, 222, 241, 244, 271, 272, 279, 283], "site": [7, 97, 240], "upload": [7, 97], "belong": [7, 18, 35, 38, 48, 53, 57, 80, 93, 171, 181, 189, 192, 193, 195, 196, 199, 201, 202, 213, 214, 218, 219, 225, 232], "insid": [7, 10, 11, 12, 20, 48, 49, 54, 57, 67, 68, 73, 100, 111, 113, 125, 135, 170, 171, 176, 186, 190, 202, 206, 214, 216, 219, 224, 225, 226, 228, 230, 241, 278, 279], "spars": [7, 11, 90, 92, 93, 165, 195, 201, 202, 203, 226, 227, 266, 278], "substanti": [7, 98], "edit": [7, 84, 93, 97, 199, 200, 202], "arg": [7, 11, 18, 20, 23, 24, 31, 33, 34, 35, 36, 37, 38, 39, 41, 48, 49, 51, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 79, 82, 84, 87, 88, 89, 90, 91, 93, 95, 97, 99, 107, 140, 146, 149, 151, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 181, 186, 190, 192, 195, 197, 199, 201, 202, 203, 206, 208, 209, 212, 213, 214, 215, 218, 222, 224, 225, 226, 227, 231, 232, 237, 238, 239, 240, 244, 245, 247, 251, 253], "invari": [7, 10, 20, 48, 53, 104, 107, 191, 197, 201, 202, 216, 222], "polici": [7, 8, 10, 240, 242], "5": [7, 12, 14, 18, 20, 22, 23, 24, 25, 27, 31, 33, 34, 35, 37, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 103, 105, 107, 109, 110, 112, 118, 121, 123, 124, 128, 129, 130, 131, 133, 140, 144, 165, 166, 169, 171, 178, 180, 182, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 232, 237, 238, 244, 245, 251, 254, 256, 258, 260, 261, 272, 273, 275, 278, 279, 282, 283], "center": [7, 10, 16, 37, 48, 56, 57, 67, 71, 73, 74, 84, 93, 112, 115, 118, 121, 123, 128, 130, 132, 136, 138, 144, 189, 192, 201, 206, 214, 261], "resid": 7, "standalon": [7, 138], "restructur": 7, "appli": [7, 10, 11, 19, 20, 27, 31, 32, 33, 34, 35, 39, 48, 49, 50, 55, 56, 57, 58, 59, 60, 63, 64, 67, 72, 73, 75, 84, 87, 88, 89, 93, 97, 99, 100, 101, 103, 107, 108, 112, 113, 123, 126, 133, 135, 137, 148, 152, 155, 156, 160, 163, 164, 168, 171, 181, 190, 192, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 212, 213, 214, 215, 218, 222, 223, 224, 225, 226, 227, 230, 237, 240, 244, 251, 253, 256, 279, 282, 283], "surround": [7, 57, 74, 144, 214, 247], "nu": [7, 12, 65, 84, 97, 172, 194, 206, 218, 226, 232, 277], "equat": [7, 11, 12, 14, 16, 21, 23, 37, 39, 53, 56, 57, 59, 63, 65, 67, 70, 71, 75, 79, 80, 81, 82, 85, 88, 93, 100, 103, 107, 109, 111, 115, 116, 117, 120, 121, 123, 124, 125, 126, 128, 130, 131, 132, 137, 138, 139, 140, 144, 180, 185, 186, 189, 190, 191, 192, 193, 199, 200, 201, 204, 205, 206, 212, 216, 218, 221, 222, 223, 231, 251, 256, 257, 261, 273, 274, 277], "strip": [7, 58, 84, 97, 199, 242, 247], "out": [7, 12, 18, 19, 20, 38, 39, 48, 49, 57, 58, 59, 62, 65, 73, 82, 84, 90, 93, 97, 100, 107, 108, 121, 123, 125, 128, 138, 148, 152, 163, 166, 168, 170, 171, 193, 194, 196, 197, 201, 202, 203, 204, 206, 207, 213, 216, 218, 222, 227, 237, 239, 244, 245, 275, 277, 278, 282, 283], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 39, 40, 57, 58, 63, 82, 84, 87, 93, 96, 99, 125, 135, 165, 189, 190, 194, 196, 202, 206, 207, 214, 218, 222, 224, 226, 230, 239, 242, 245, 275, 276], "whitespac": [7, 57, 242], "invalid": [7, 12, 27, 57, 58, 99, 123, 196, 199, 214], "dx": [7, 10, 11, 16, 20, 37, 39, 53, 57, 59, 61, 65, 74, 76, 79, 80, 81, 82, 84, 93, 100, 110, 116, 117, 160, 190, 202, 203, 209, 219, 222, 223, 227, 273, 277, 282, 284], "meta": [7, 57, 222, 223], "stackexchang": [7, 67], "5020": 7, "wikibook": [7, 84, 85], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 206], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 27, 57, 93, 121, 203, 216, 222, 223, 225, 238, 261, 277, 283], "sentenc": [7, 87], "thumb": [7, 87, 244], "greek": [7, 11, 30, 57, 97, 99, 193, 206], "letter": [7, 11, 12, 30, 50, 57, 58, 97, 171, 206, 244, 273, 275], "\u03b1": [7, 191, 205], "alpha": [7, 12, 48, 57, 65, 84, 86, 143, 147, 150, 168, 185, 189, 190, 191, 197, 199, 201, 202, 205, 206, 218, 222, 226], "logarithm": [7, 12, 31, 37, 39, 57, 58, 63, 82, 84, 93, 97, 197, 199, 203, 206, 216, 218, 225, 226, 274], "italic": 7, "emphasi": [7, 196], "asterisk": 7, "stirl": [7, 49, 62, 244], "fals": [7, 11, 12, 18, 19, 20, 23, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 82, 84, 85, 87, 88, 89, 90, 93, 94, 97, 99, 100, 101, 105, 107, 109, 110, 113, 116, 117, 118, 121, 123, 124, 128, 129, 130, 132, 133, 134, 135, 136, 139, 143, 155, 156, 160, 163, 168, 169, 170, 171, 174, 178, 181, 182, 183, 185, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 231, 232, 235, 237, 238, 239, 240, 244, 245, 247, 251, 254, 275, 278, 279, 282], "permut": [7, 40, 42, 44, 45, 47, 50, 53, 54, 55, 58, 62, 65, 88, 90, 93, 117, 171, 191, 195, 197, 202, 219, 227, 228, 232, 244, 263, 283], "cycl": [7, 10, 39, 45, 48, 49, 55, 57, 60, 62, 88, 97, 145, 214, 244], "partit": [7, 44, 48, 62, 97, 125, 135, 137, 219, 226, 241, 263], "reduc": [7, 12, 19, 22, 26, 32, 34, 36, 40, 53, 57, 58, 60, 62, 63, 65, 72, 73, 82, 84, 93, 97, 107, 108, 135, 153, 171, 193, 195, 196, 197, 199, 200, 201, 202, 203, 207, 212, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 244, 279], "ge": [7, 18, 57, 62, 63, 65, 82, 88, 93, 97, 191, 194, 199, 202, 216, 244], "consecut": [7, 39, 48, 53, 56, 58, 62, 73, 218, 224], "group": [7, 38, 43, 44, 49, 50, 53, 54, 55, 57, 60, 62, 86, 87, 97, 150, 159, 160, 171, 191, 192, 193, 201, 202, 218, 222, 224, 225, 232, 244, 263], "pairwis": [7, 35, 38, 57, 62, 74, 93, 97, 219, 224], "ital": [7, 206], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 32, 33, 34, 38, 39, 40, 47, 48, 49, 53, 56, 57, 58, 61, 67, 84, 87, 88, 89, 90, 91, 93, 95, 96, 97, 99, 107, 120, 143, 176, 191, 192, 193, 194, 196, 197, 199, 202, 205, 206, 213, 214, 219, 222, 224, 225, 226, 227, 232, 235, 237, 238, 239, 240, 242, 244, 245, 247, 273, 275, 278, 279], "talk": [7, 13, 28, 58, 193, 201, 255], "handl": [7, 16, 18, 19, 20, 37, 45, 49, 57, 63, 84, 85, 87, 92, 97, 98, 99, 100, 108, 111, 121, 135, 151, 154, 160, 161, 166, 196, 202, 203, 212, 218, 222, 224, 227, 230, 238, 244, 245, 247, 278, 283], "referenc": [7, 8, 41, 46, 97, 120, 123, 168, 201], "overlin": [7, 18, 65], "normal": [7, 10, 12, 18, 19, 20, 27, 31, 35, 39, 48, 56, 57, 61, 63, 67, 70, 71, 72, 84, 85, 87, 91, 92, 93, 97, 99, 109, 111, 115, 121, 123, 129, 138, 144, 155, 165, 168, 169, 170, 171, 172, 176, 179, 181, 190, 193, 195, 196, 197, 199, 201, 202, 206, 207, 209, 214, 215, 219, 222, 226, 231, 237, 242, 244, 251, 266], "assign": [7, 18, 38, 39, 40, 53, 57, 62, 73, 84, 86, 87, 93, 99, 116, 121, 128, 138, 176, 187, 190, 192, 194, 199, 206, 224, 225, 232, 239, 255, 258, 275], "structur": [7, 10, 11, 15, 18, 20, 36, 38, 39, 45, 48, 49, 55, 57, 82, 84, 87, 88, 93, 100, 101, 103, 120, 169, 171, 192, 193, 196, 199, 201, 202, 203, 218, 222, 224, 225, 226, 230, 231, 239, 241, 244, 245, 275, 283], "suggest": [7, 10, 22, 40, 48, 84, 93, 97, 121, 204, 279], "american": [7, 43, 58], "color": [7, 85, 105, 186, 206, 237, 244, 282], "colour": 7, "quotat": 7, "line_color": [7, 192, 209], "aesthet": [7, 11, 192], "ariti": [7, 192], "term": [7, 10, 11, 12, 16, 18, 20, 27, 39, 48, 57, 58, 59, 61, 62, 63, 65, 76, 80, 81, 82, 84, 87, 88, 93, 97, 101, 105, 107, 113, 116, 123, 125, 128, 131, 133, 135, 136, 150, 155, 167, 168, 171, 173, 176, 181, 183, 187, 189, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 208, 209, 211, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 230, 231, 244, 251, 254, 258, 263, 273, 275, 277, 278, 283], "unrestrict": [7, 46, 244], "necklac": [7, 244], "bracelet": [7, 244], "impli": [7, 11, 12, 18, 31, 35, 39, 48, 87, 103, 171, 192, 197, 199, 206, 214, 216, 222, 224, 227, 230, 231, 244, 258], "turn": [7, 10, 11, 18, 27, 39, 57, 63, 65, 72, 82, 91, 129, 133, 187, 193, 201, 203, 206, 213, 214, 216, 218, 219, 222, 237, 244, 260, 275, 277], "sequenc": [7, 12, 37, 39, 41, 44, 47, 48, 49, 53, 55, 56, 57, 58, 60, 62, 65, 67, 70, 71, 72, 73, 74, 81, 87, 88, 90, 93, 96, 97, 138, 144, 170, 171, 197, 200, 206, 208, 210, 213, 215, 216, 218, 219, 222, 223, 225, 232, 235, 238, 239, 244, 246, 247, 263], "revers": [7, 41, 46, 49, 56, 57, 58, 63, 84, 85, 87, 93, 97, 107, 170, 181, 186, 193, 195, 199, 202, 203, 206, 207, 214, 218, 222, 244, 283], "ambigu": [7, 10, 12, 14, 57, 159, 165, 218, 230, 235], "person": [7, 11], "chebyshev": [7, 37, 57, 84, 199, 202], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 38, 40, 41, 46, 49, 56, 57, 58, 63, 67, 71, 73, 74, 80, 84, 87, 93, 97, 118, 133, 143, 166, 176, 182, 183, 187, 190, 194, 195, 197, 201, 202, 213, 214, 218, 222, 223, 224, 226, 232, 237, 241, 244, 245, 251, 254, 256, 258], "transliter": 7, "russian": 7, "chebyshevt": [7, 65, 206], "orthogonalpolynomi": 7, "t_n": [7, 62, 65, 84, 199, 202, 256], "tens": 7, "inclus": [7, 56, 103, 164, 193, 212, 213, 214, 225], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 62, 82, 199], "she": [7, 225], "extran": [7, 222], "belittl": 7, "obvious": [7, 40, 48, 174, 189, 196, 216], "easili": [7, 10, 18, 20, 29, 57, 58, 80, 82, 93, 97, 98, 115, 133, 169, 189, 202, 205, 206, 211, 218, 219, 222, 224, 225, 238, 277], "straightforward": [7, 20, 48, 58, 93, 216], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 58], "friendli": [7, 39, 82, 221, 224, 225, 239, 284], "mistak": [7, 12, 48, 245], "goe": [8, 20, 28, 93, 213, 216, 225, 275, 278], "content": [8, 13, 39, 57, 58, 92, 194, 197, 199, 202, 205, 206, 234, 239, 242, 243, 263, 264, 265, 266, 267, 268, 269, 270, 274, 276], "setup": [8, 10, 39, 57, 124, 125, 126, 140, 181, 199, 202, 204, 205, 216, 237, 238, 240, 250, 282], "depend": [8, 10, 11, 12, 14, 18, 20, 25, 29, 37, 39, 40, 48, 49, 56, 57, 58, 59, 62, 63, 65, 69, 74, 81, 82, 84, 85, 86, 93, 97, 98, 99, 105, 109, 112, 116, 117, 120, 121, 123, 125, 131, 133, 143, 144, 145, 160, 169, 171, 173, 176, 186, 187, 192, 194, 197, 199, 201, 202, 203, 205, 206, 207, 212, 216, 218, 219, 222, 223, 224, 225, 226, 237, 238, 239, 240, 244, 245, 258, 260, 261, 275, 277], "document": [8, 10, 11, 17, 20, 33, 34, 35, 48, 53, 57, 58, 63, 64, 65, 69, 79, 82, 83, 85, 90, 93, 98, 101, 111, 116, 131, 133, 134, 136, 138, 146, 160, 166, 180, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 199, 202, 206, 216, 220, 222, 224, 225, 235, 237, 239, 240, 242, 244, 251, 258, 259, 262, 273, 275, 276, 282, 283], "auto": [8, 10, 12, 37, 57, 58, 85, 192, 199, 202, 206, 218, 222, 226], "rebuild": [8, 11, 20, 57, 202, 278], "live": [8, 30, 40, 138, 201, 219], "server": 8, "debug": [8, 39, 57, 84, 123, 160, 237, 238, 247], "incompat": [8, 23], "pick": [9, 18, 58, 62, 135, 165, 167, 283], "ignor": [10, 12, 14, 20, 39, 48, 57, 58, 62, 63, 67, 72, 82, 87, 93, 97, 107, 113, 123, 168, 171, 181, 192, 202, 206, 207, 218, 224, 225, 238, 283], "regex": 10, "categori": [10, 193, 262, 269], "lead": [10, 11, 18, 19, 20, 27, 56, 57, 63, 67, 84, 87, 93, 97, 109, 117, 155, 181, 190, 194, 197, 199, 201, 202, 203, 206, 213, 215, 218, 222, 225, 239, 242, 247, 276, 283], "against": [10, 18, 20, 27, 58, 100, 121, 238], "unrel": [10, 57, 64, 194, 275], "capabl": [10, 11, 18, 25, 37, 39, 57, 61, 69, 82, 97, 100, 101, 131, 138, 192, 203, 206, 225, 276, 277, 283, 284], "w": [10, 12, 27, 39, 41, 47, 56, 57, 58, 59, 60, 63, 65, 82, 84, 87, 93, 94, 115, 118, 129, 136, 137, 140, 145, 156, 160, 169, 185, 187, 188, 191, 192, 194, 195, 199, 200, 201, 202, 203, 207, 213, 214, 216, 218, 219, 222, 223, 225, 226, 237, 245, 247, 258, 284], "pythonwarn": 10, "NOT": [10, 87, 107, 151, 155, 170, 173, 235, 238], "blog": [10, 20, 39, 62, 88, 219, 225], "post": [10, 18, 23, 24, 25, 26, 39, 51, 57, 206, 207, 218, 237, 278], "ned": 10, "batcheld": 10, "kanesmethod": [10, 115, 116, 121, 123, 124, 125, 126, 128, 129, 132, 133, 135, 138], "pinjoint": [10, 115, 124, 126, 132], "prismaticjoint": [10, 115, 126, 132], "q_": [10, 57, 115, 186, 219, 222], "u_": [10, 93, 115], "had": [10, 20, 24, 49, 57, 58, 93, 97, 121, 135, 201, 202, 203, 206, 214, 216, 222, 224, 225, 240, 245, 272, 275, 278, 279], "templat": [10, 244], "axi": [10, 31, 50, 62, 63, 67, 68, 70, 71, 73, 79, 82, 84, 90, 93, 100, 105, 110, 115, 121, 123, 125, 128, 129, 130, 132, 135, 138, 139, 140, 143, 144, 168, 181, 183, 185, 187, 189, 190, 192, 197, 225, 251, 253, 256, 258, 261], "parent_axi": [10, 115], "child_axi": [10, 115], "parent": [10, 48, 57, 80, 115, 132, 181, 185, 192, 196, 197, 201, 237, 241, 251, 255, 256], "child": [10, 11, 115, 132, 181, 196, 241], "bodi": [10, 12, 39, 82, 99, 110, 111, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 131, 132, 133, 138, 139, 174, 180, 181, 185, 189, 190, 251, 253, 268], "parent_interfram": [10, 115, 132], "child_interfram": [10, 115, 132], "rotat": [10, 31, 45, 48, 50, 57, 66, 67, 68, 70, 72, 73, 88, 93, 100, 101, 115, 123, 126, 128, 130, 132, 136, 139, 155, 168, 181, 185, 187, 189, 190, 191, 192, 244, 251, 253, 256, 258, 260], "joint_axi": [10, 115, 124, 126, 132], "transform": [10, 11, 27, 31, 36, 39, 53, 56, 57, 58, 59, 61, 62, 65, 72, 90, 93, 105, 107, 115, 123, 132, 143, 164, 166, 168, 173, 191, 194, 197, 199, 201, 202, 208, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 231, 239, 245, 251, 258, 277], "suppos": [10, 19, 20, 49, 56, 57, 58, 82, 193, 195, 199, 201, 202, 206, 213, 216, 222, 224, 235, 244, 256, 261, 275, 277, 283], "pin": [10, 31, 100, 101, 103, 115], "dcm": [10, 112, 115, 121, 123, 138, 181, 189, 190, 251], "q_pin": 10, "inspect": [10, 18, 93, 201, 212, 243, 245, 270], "notic": [10, 12, 20, 48, 49, 55, 57, 93, 159, 180, 196, 216, 232, 233, 244, 245, 275, 277, 278, 283], "theta_pin": 10, "rad": [10, 58, 105, 121, 201], "int_fram": 10, "orient_axi": [10, 112, 115, 181, 183], "align": [10, 39, 67, 93, 115, 190, 191, 206, 224, 237], "orient": [10, 31, 69, 73, 88, 115, 121, 123, 125, 128, 132, 136, 138, 181, 185, 187, 189, 190, 199, 244, 251, 252, 259, 260, 266], "parent_joint_po": [10, 115], "child_joint_po": [10, 115], "parent_point": [10, 115, 124, 126, 132], "child_point": [10, 115, 124, 126, 132], "mass": [10, 74, 109, 110, 111, 112, 114, 115, 116, 120, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 138, 139, 147, 172, 174, 175, 176, 187, 189, 237, 260, 268], "pos_from": [10, 115, 121, 123, 124, 125, 132, 138, 185, 189], "masscent": [10, 112, 115, 118, 124, 132, 136, 138], "parent_fram": [10, 132], "child_fram": [10, 132], "locatenew": [10, 112, 118, 123, 125, 128, 129, 130, 135, 136, 138, 139, 182, 185, 187, 189], "pars": [10, 49, 57, 90, 121, 132, 203, 205, 262, 270], "comprehens": [10, 18, 24, 200, 214, 226, 272], "additional_transl": 10, "recogn": [10, 12, 57, 58, 62, 72, 97, 100, 108, 194, 197, 205, 214, 215, 224, 231, 275], "logic": [10, 11, 18, 20, 32, 33, 34, 35, 38, 57, 59, 82, 84, 97, 163, 165, 166, 170, 206, 208, 214, 222, 226, 244, 275, 276, 277, 279], "node": [10, 11, 37, 51, 57, 84, 99, 103, 113, 147, 172, 181, 191, 196, 206, 213, 225, 230, 241, 278, 282], "maximum": [10, 12, 24, 37, 39, 40, 48, 49, 57, 63, 84, 93, 97, 100, 123, 168, 176, 192, 197, 199, 202, 206, 213, 214, 218, 219, 222, 225, 226, 241, 244], "multipli": [10, 12, 31, 35, 39, 48, 57, 68, 72, 79, 86, 88, 93, 97, 116, 125, 134, 135, 136, 148, 157, 171, 176, 177, 193, 194, 195, 197, 199, 201, 202, 206, 208, 215, 216, 219, 222, 227, 244, 255, 275, 278], "max": [10, 39, 48, 49, 57, 63, 65, 67, 84, 93, 97, 99, 100, 191, 192, 201, 202, 206, 213, 215, 216, 245], "min": [10, 49, 53, 57, 62, 63, 93, 99, 191, 192, 201, 206, 212, 222], "is_perfect_squar": 10, "ntheori": [10, 35, 48, 57, 58, 199, 202, 219, 244], "primetest": [10, 57, 97], "is_squar": [10, 57, 88, 97], "is_prim": [10, 18, 57, 193], "isprim": [10, 35, 58, 97], "divid": [10, 11, 48, 56, 57, 58, 73, 93, 97, 175, 176, 194, 196, 197, 199, 201, 202, 206, 222, 241, 278], "bottom_up": [10, 57], "interactive_travers": 10, "postorder_travers": [10, 57, 278], "preorder_travers": [10, 57, 278], "refactor": [10, 222, 230, 241], "tr": [10, 40, 48, 206, 215], "quantum": [10, 109, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 191, 268], "ever": [10, 11, 20, 63, 190, 193, 202, 216, 222, 239, 242, 278], "helper": [10, 37, 39, 48, 52, 55, 57, 82, 85, 86, 156, 158, 167, 203, 213, 216, 219, 222, 223, 225, 238, 268], "default_sort_kei": [10, 38, 46, 57, 230], "matrixel": [10, 39], "matrixsymbol": [10, 15, 18, 35, 36, 39, 57, 88, 90, 93, 206, 226, 228], "layer": [10, 107, 199, 245], "imprecis": 10, "free_symbol": [10, 11, 39, 57, 66, 84, 88, 160, 178, 181, 202, 212, 219], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 32, 37, 39, 40, 48, 49, 50, 53, 54, 55, 57, 58, 60, 62, 63, 65, 66, 67, 69, 70, 73, 75, 81, 82, 84, 86, 87, 88, 93, 97, 110, 115, 123, 136, 138, 147, 171, 172, 176, 180, 187, 190, 193, 194, 196, 197, 199, 201, 202, 206, 209, 214, 215, 216, 218, 219, 222, 224, 225, 226, 232, 236, 240, 241, 242, 244, 245, 249, 255, 257, 258, 260, 272, 277, 279, 282, 283, 284], "atomicexpr": [10, 57], "concept": [10, 11, 18, 48, 123, 190, 196, 198, 201, 206, 225, 230, 260, 276, 281], "misappli": 10, "noth": [10, 38, 48, 57, 70, 84, 155, 171, 193, 197, 205, 206, 218, 222, 224, 235, 237, 245, 247, 275], "introduc": [10, 19, 53, 56, 57, 65, 82, 93, 98, 101, 121, 123, 128, 129, 130, 134, 171, 176, 190, 197, 198, 202, 203, 206, 213, 216, 219, 226, 242, 269, 276, 279, 281, 283], "21494": 10, "size": [10, 16, 39, 40, 41, 46, 48, 49, 50, 51, 52, 53, 57, 58, 60, 62, 85, 88, 90, 93, 96, 97, 105, 123, 133, 134, 135, 144, 166, 167, 186, 192, 195, 199, 206, 218, 219, 222, 226, 244, 273], "die": [10, 201, 226], "histor": [10, 11, 14, 20, 58, 222, 226], "21563": 10, "revert": [10, 197, 202], "sample_it": [10, 226], "consequ": [10, 20, 35, 57, 194, 196, 275, 283], "subclass": [10, 11, 18, 20, 33, 34, 39, 57, 64, 68, 70, 84, 87, 140, 146, 155, 159, 160, 161, 166, 168, 169, 192, 193, 195, 196, 197, 201, 202, 206, 226, 237, 238, 239, 242, 245, 251, 255, 278], "kei": [10, 11, 12, 14, 23, 32, 35, 38, 46, 48, 49, 57, 58, 59, 62, 73, 86, 88, 93, 96, 97, 100, 120, 121, 163, 166, 171, 190, 192, 194, 196, 197, 198, 199, 201, 202, 203, 204, 206, 218, 222, 223, 224, 226, 230, 241, 244, 245, 247, 279, 280, 283], "domainmatrix": [10, 89, 93, 198, 201, 204, 269], "switch": [10, 48, 55, 84, 97, 107, 199, 202], "21402": 10, "earlier": [10, 111, 203, 207, 216, 218, 245, 256, 258, 278], "could": [10, 11, 12, 16, 18, 20, 24, 25, 26, 34, 39, 50, 57, 69, 82, 84, 87, 115, 118, 121, 131, 135, 171, 174, 176, 193, 196, 199, 201, 203, 206, 214, 216, 218, 222, 223, 224, 225, 226, 227, 230, 231, 238, 242, 256, 257, 275, 278, 283], "traceback": [10, 12, 15, 18, 19, 20, 23, 24, 25, 26, 27, 32, 33, 34, 39, 40, 49, 57, 58, 61, 67, 84, 87, 88, 89, 90, 91, 93, 95, 96, 99, 107, 191, 193, 196, 197, 199, 202, 205, 213, 214, 222, 224, 225, 235, 237, 238, 240, 242, 244, 245, 247, 275, 279], "typeerror": [10, 12, 19, 20, 24, 32, 33, 34, 49, 57, 67, 72, 87, 89, 91, 95, 107, 145, 213, 214, 238, 245], "unsupport": [10, 12, 15, 107, 206], "operand": [10, 12, 49, 57, 182, 201, 254], "dict": [10, 12, 14, 18, 24, 26, 27, 39, 49, 57, 58, 59, 73, 74, 87, 88, 93, 97, 99, 116, 117, 151, 163, 166, 177, 179, 181, 192, 195, 196, 197, 199, 201, 202, 203, 204, 206, 218, 219, 222, 223, 224, 225, 226, 230, 237, 238, 244, 251, 284], "solve_lin_si": [10, 204], "heurisch": [10, 84], "smith_normal_form": [10, 94, 195], "newmatrix": 10, "holonom": [10, 78, 81, 122, 123, 124, 125, 131, 133, 134, 262, 268, 269], "polymatrix": 10, "risch": [10, 84, 273], "broken": [10, 46, 57, 189, 206, 222, 247], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 69, 90, 93, 97, 116, 117, 118, 120, 130, 131, 182, 188, 196, 201, 206, 213, 216, 218, 222, 240, 241, 254, 260, 268], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 38, 111, 139, 201, 203, 237, 238, 240, 276, 277], "perhap": [10, 14, 39, 57, 87, 97, 156, 196, 224, 239, 272], "tableform": [10, 224, 247], "isn": [10, 20, 84, 111, 121, 225, 277], "advis": [10, 18, 27, 38, 115, 121], "usecas": 10, "unclear": [10, 18, 111], "line2dbaseseri": [10, 192], "linecollect": [10, 192], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 192], "get_point": [10, 192], "uniformli": [10, 16, 48, 73, 74, 100, 105, 192, 240], "adapt": [10, 105, 192, 212, 224, 244, 250], "get_data": [10, 192, 248], "dft": [10, 60, 110], "fourier": [10, 57, 65, 84, 110, 164, 210, 263], "as_explicit": [10, 90, 93, 110, 228], "exp": [10, 11, 12, 14, 18, 20, 25, 27, 31, 37, 39, 47, 56, 57, 59, 61, 62, 63, 65, 75, 76, 79, 82, 84, 88, 90, 93, 97, 109, 147, 150, 166, 172, 191, 196, 197, 202, 203, 206, 208, 213, 216, 218, 222, 223, 224, 225, 226, 227, 244, 261, 273, 277, 279, 284], "discret": [10, 37, 39, 40, 47, 49, 57, 58, 65, 97, 171, 176, 208, 211, 222, 224, 225, 263, 272], "unevalu": [10, 11, 18, 19, 20, 33, 34, 37, 49, 56, 57, 63, 65, 74, 84, 97, 107, 148, 152, 159, 160, 171, 202, 205, 213, 214, 218, 222, 224, 225, 226, 273, 277, 278, 284], "represent": [10, 11, 20, 24, 31, 38, 39, 40, 48, 51, 57, 58, 63, 65, 69, 77, 79, 81, 82, 84, 86, 87, 88, 89, 90, 96, 97, 104, 105, 110, 111, 112, 120, 131, 135, 136, 140, 160, 165, 166, 168, 169, 171, 173, 180, 186, 187, 189, 192, 193, 195, 197, 199, 201, 202, 203, 204, 205, 206, 208, 216, 218, 219, 222, 225, 226, 231, 232, 247, 251, 254, 261, 269, 273, 275, 278], "21626": 10, "expos": [10, 38, 226], "mutat": [10, 107, 195, 197, 226], "flat": [10, 71, 88, 238], "todok": [10, 88], "ey": [10, 88, 89, 90, 91, 92, 93, 95, 195, 201, 227, 247, 279], "converg": [10, 39, 56, 61, 65, 84, 97, 140, 202, 209, 213, 216, 273], "legacy_matrix": [10, 84], "discontinu": [10, 37, 61, 63, 84, 100, 209, 224], "theano_cod": 10, "aesara_cod": [10, 206], "theanoprint": 10, "aesaraprint": [10, 206], "predic": [10, 11, 32, 33, 37, 99, 202, 218, 244, 263], "experienc": [10, 40], "big": [10, 12, 16, 18, 41, 57, 59, 97, 138, 151, 191, 205, 206, 213, 247, 273, 275], "registr": 10, "add_handl": 10, "remove_handl": [10, 32], "multipledispatch": [10, 32], "regist": [10, 32, 33, 34, 58, 167], "register_mani": [10, 33, 34], "askprimehandl": 10, "staticmethod": [10, 237], "register_handl": [10, 32], "prime": [10, 18, 32, 33, 34, 35, 48, 55, 56, 57, 58, 60, 62, 65, 97, 142, 193, 194, 196, 197, 199, 202, 216, 218, 219, 226, 241], "Not": [10, 11, 19, 20, 57, 62, 87, 107, 206, 225, 226, 244, 277, 284], "primepred": [10, 35], "q": [10, 11, 12, 15, 18, 30, 31, 32, 33, 34, 35, 36, 39, 49, 53, 56, 57, 58, 65, 74, 79, 80, 82, 84, 86, 88, 93, 99, 100, 107, 108, 115, 116, 117, 120, 121, 123, 125, 130, 132, 133, 134, 135, 138, 139, 140, 151, 165, 171, 174, 181, 182, 183, 185, 186, 187, 189, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 208, 216, 219, 222, 224, 226, 231, 232, 247, 251, 254, 255, 257, 260, 279, 283], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 226], "normaldistribut": [10, 226], "20078": 10, "misspel": 10, "absorbing_prob": [10, 226], "absorb": [10, 11, 82, 222, 226, 273], "probabilit": [10, 226], "shutil": 10, "power": [10, 12, 23, 31, 36, 39, 47, 48, 49, 58, 60, 61, 63, 79, 80, 82, 84, 86, 88, 90, 97, 98, 107, 121, 138, 143, 154, 157, 170, 173, 176, 177, 181, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 210, 213, 215, 218, 219, 222, 224, 225, 226, 230, 239, 244, 263, 272, 273, 274, 275, 276, 278, 279, 282], "immut": [10, 11, 57, 89, 92, 95, 190, 197, 222, 227, 266, 272, 279], "coordsystem": [10, 59], "explicit": [10, 11, 18, 20, 24, 49, 56, 57, 61, 73, 74, 84, 96, 97, 116, 120, 121, 125, 135, 139, 190, 193, 202, 205, 206, 208, 214, 216, 222, 223, 224, 225, 241], "appropi": 10, "patch": [10, 59, 206], "real": [10, 11, 12, 15, 16, 18, 19, 20, 24, 31, 33, 35, 36, 37, 39, 49, 57, 58, 59, 61, 62, 63, 64, 65, 69, 73, 74, 79, 82, 84, 87, 88, 90, 93, 97, 99, 103, 109, 121, 138, 140, 143, 144, 151, 169, 183, 191, 194, 197, 201, 202, 203, 206, 207, 209, 213, 214, 216, 218, 221, 222, 224, 225, 226, 231, 235, 239, 248, 277, 283, 284], "similarli": [10, 18, 53, 57, 58, 65, 69, 93, 100, 101, 107, 116, 136, 192, 193, 196, 201, 203, 213, 214, 216, 222, 237, 245, 256, 257, 279], "manifold": [10, 59], "track": [10, 12, 48, 57, 61, 65, 120, 132, 136, 155, 190, 213, 232, 273], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 59], "constructor": [10, 11, 20, 33, 34, 38, 39, 44, 48, 49, 50, 57, 64, 65, 86, 91, 93, 125, 164, 165, 169, 173, 192, 193, 195, 196, 197, 206, 214, 222, 231, 239, 255, 263, 274, 278], "str": [10, 11, 20, 33, 38, 39, 40, 49, 57, 58, 59, 61, 66, 67, 70, 73, 74, 85, 87, 90, 97, 99, 105, 115, 116, 118, 138, 155, 165, 171, 181, 183, 185, 192, 197, 201, 206, 218, 222, 226, 242, 244, 245, 247, 251], "unord": [10, 12, 57, 97, 197, 225, 244, 245], "lambidfi": 10, "guess": [10, 14, 38, 58, 61, 82, 85, 186, 199, 202, 216, 219, 278], "construct": [10, 16, 23, 33, 34, 38, 39, 57, 59, 63, 65, 67, 71, 73, 85, 90, 93, 98, 101, 111, 112, 116, 118, 121, 123, 156, 160, 169, 170, 173, 177, 193, 196, 197, 199, 201, 202, 206, 219, 224, 226, 227, 231, 239, 241, 242, 255, 257, 258, 275, 278, 279, 283], "superclass": [10, 11, 18, 56, 57, 84, 90, 197], "scalar": [10, 25, 31, 57, 59, 72, 86, 88, 90, 93, 98, 118, 121, 170, 181, 182, 183, 188, 190, 193, 195, 199, 206, 222, 227, 239, 245, 251, 253, 254, 255, 256, 257, 259, 261, 266, 268], "boolean": [10, 11, 20, 21, 23, 32, 33, 34, 35, 36, 37, 39, 57, 63, 67, 71, 72, 73, 74, 85, 88, 93, 94, 97, 100, 105, 107, 116, 156, 181, 183, 186, 192, 195, 197, 199, 201, 203, 206, 218, 222, 224, 226, 244, 254, 279], "sens": [10, 11, 16, 18, 20, 31, 35, 37, 38, 57, 59, 62, 65, 82, 87, 116, 123, 176, 181, 190, 193, 199, 201, 215, 216, 218, 225, 226, 238, 239, 244, 260, 283], "exponenti": [10, 12, 18, 31, 39, 48, 53, 57, 58, 62, 84, 87, 88, 93, 97, 99, 157, 173, 203, 218, 222, 225, 226, 274, 275, 279], "trick": [10, 11, 12, 53, 216, 232], "treat": [10, 11, 18, 19, 20, 26, 47, 48, 55, 57, 62, 65, 72, 73, 93, 99, 118, 121, 144, 181, 187, 194, 196, 197, 199, 201, 202, 203, 205, 206, 213, 214, 216, 218, 219, 222, 224, 230, 238, 241, 258, 275, 279], "cdot": [10, 18, 40, 56, 62, 65, 75, 79, 80, 82, 88, 90, 93, 97, 108, 110, 136, 176, 187, 189, 190, 191, 193, 194, 202, 209, 213, 216, 222, 224, 227, 228, 257, 258, 277, 278, 283], "attributeerror": [10, 18, 57, 93, 225, 245, 279], "as_coeff_mul": [10, 57, 82, 90], "tri": [10, 11, 12, 18, 23, 24, 38, 57, 65, 73, 82, 84, 123, 135, 166, 193, 194, 201, 206, 208, 218, 222, 223, 225, 237, 275, 283], "benchmark": [10, 123, 137], "runtest": [10, 237], "tmpfile": 10, "random_complex_numb": [10, 57], "verify_numer": [10, 57], "test_derivative_numer": [10, 57], "_randrang": [10, 57, 58], "_randint": [10, 57, 199], "as_poli": [10, 57, 194, 202], "as_expr": [10, 57, 93, 196, 201, 202, 203, 279], "combintor": 10, "perm_cycl": [10, 49, 206], "printer": [10, 11, 20, 49, 57, 65, 85, 93, 98, 186, 231, 238, 239, 245, 274, 278], "init_print": [10, 29, 39, 49, 61, 84, 85, 93, 101, 186, 193, 194, 205, 273, 277, 279, 282, 283, 284], "problemat": [10, 20, 196], "affect": [10, 18, 20, 56, 57, 93, 180, 202, 224, 225, 256], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 61], "significantli": [10, 39, 61, 111, 133, 197, 208, 238, 241], "slower": [10, 20, 53, 93, 196, 201, 245, 272], "_sympifi": [10, 57, 90, 278], "strict": [10, 11, 48, 49, 57, 61, 62, 88, 93, 199, 202, 224, 225, 244, 247, 283], "lot": [10, 48, 57, 75, 82, 84, 93, 121, 138, 192, 205, 209, 219, 225, 237, 283], "secur": 10, "whatev": [10, 12, 20, 48, 57, 58, 218, 222, 223, 225, 245], "__repr__": [10, 206], "12524": 10, "repr": [10, 39, 84, 165, 196, 201, 206, 237, 282], "plenti": 10, "_sympy_": [10, 57], "disabl": [10, 11, 57, 58, 82, 84, 97, 199, 202, 206, 214, 222, 224, 235, 237, 240, 244], "constant": [10, 11, 23, 26, 37, 39, 56, 57, 61, 63, 65, 81, 82, 84, 100, 101, 107, 120, 121, 123, 138, 139, 148, 152, 158, 174, 175, 177, 178, 179, 182, 185, 187, 192, 194, 197, 199, 201, 202, 203, 206, 208, 213, 216, 218, 219, 222, 223, 224, 225, 226, 237, 239, 244, 245, 254, 258, 261, 268, 273, 279, 284], "lh": [10, 14, 23, 39, 47, 57, 204, 206, 222, 224, 225, 257], "tensexpr": [10, 108, 232], "substitute_indic": 10, "danger": [10, 194], "tensor_head": [10, 108, 232], "shorter": [10, 27, 57, 67, 111, 133, 180, 193, 197, 206, 239, 247], "creation": [10, 12, 20, 57, 59, 93, 112, 118, 128, 131, 132, 133, 134, 135, 145, 155, 159, 160, 161, 171, 189, 190, 206, 226, 231, 239, 245], "_dummy_fmt": 10, "l_": [10, 84, 93, 191], "obsolet": 10, "dummy_nam": [10, 232], "clearer": [10, 255], "metric_symmetri": [10, 232], "set_metr": [10, 232], "delta": [10, 12, 39, 41, 51, 62, 80, 82, 86, 105, 135, 143, 171, 191, 206, 213, 219, 222, 226, 227, 232], "epsilon": [10, 12, 56, 58, 65, 82, 84, 142, 206, 232], "latter": [10, 15, 20, 39, 48, 57, 62, 65, 82, 97, 193, 197, 201, 206, 216, 219, 232, 239, 244, 245, 275], "involv": [10, 12, 16, 18, 23, 24, 34, 36, 48, 56, 57, 58, 62, 69, 70, 82, 84, 97, 107, 112, 116, 121, 150, 160, 166, 168, 178, 189, 190, 193, 194, 197, 199, 201, 202, 203, 207, 208, 213, 214, 215, 216, 218, 219, 222, 224, 227, 245, 283], "obscur": [10, 18], "young": [10, 100, 232], "tableau": 10, "favor": 10, "tensorindex": [10, 232], "tensor_indic": [10, 108, 232], "denot": [10, 11, 12, 16, 48, 49, 57, 59, 65, 79, 80, 82, 84, 86, 87, 88, 93, 97, 99, 107, 176, 181, 187, 192, 193, 194, 199, 201, 209, 213, 214, 216, 222, 226, 231, 232, 251, 253, 255, 256, 258, 260], "set_dimens": 10, "unit_system": [10, 178], "set_quantity_dimens": [10, 174], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 174], "set_global_relative_scale_factor": [10, 178], "get_dimensional_expr": 10, "unitsystem": [10, 179], "dimension": [10, 37, 39, 41, 59, 69, 70, 71, 72, 73, 90, 93, 101, 108, 138, 145, 147, 157, 173, 187, 188, 192, 193, 199, 201, 202, 205, 206, 224, 225, 227, 228, 232, 238, 260, 284], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 28, 202], "emptyset": [10, 18, 24, 37, 38, 87, 206, 214, 225, 251, 284], "is_empti": [10, 18, 49], "unknown": [10, 11, 15, 18, 19, 20, 26, 31, 57, 58, 101, 156, 204, 221, 222, 223, 224, 225, 244, 284], "empti": [10, 11, 18, 24, 26, 33, 37, 38, 39, 40, 48, 52, 56, 57, 69, 72, 73, 74, 87, 88, 93, 97, 116, 135, 166, 179, 197, 201, 202, 206, 212, 213, 214, 216, 222, 224, 225, 237, 239, 244, 247, 278], "individu": [10, 18, 20, 23, 57, 63, 68, 73, 74, 86, 88, 90, 93, 107, 136, 143, 161, 165, 191, 214, 222, 237, 279], "denest": [10, 57, 202, 218, 224, 244], "particl": [10, 112, 114, 115, 116, 121, 125, 126, 131, 133, 135, 138, 139, 147, 150, 157, 158, 169, 171, 174, 176, 189, 232, 268], "rigidbodi": [10, 112, 114, 116, 120, 123, 128, 129, 130, 131, 136, 138, 268], "potential_energi": [10, 115, 116, 118, 130, 136], "energi": [10, 109, 112, 116, 118, 121, 130, 147, 172, 176, 187, 232, 258, 268], "setter": [10, 121, 138], "getter": [10, 57, 121, 138], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 23, 24, 39, 48, 49, 57, 69, 73, 84, 93, 97, 100, 107, 116, 120, 135, 136, 139, 159, 160, 176, 181, 191, 193, 199, 201, 204, 206, 223, 225, 226, 230, 237, 239, 261, 273], "unpack": [10, 57, 88, 93, 244, 245], "emul": [10, 218, 225, 227, 245], "is_deriv": [10, 57], "as_finite_differ": [10, 37, 57, 273], "17881": 10, "get_matrix": [10, 232], "__getitem__": [10, 57, 88, 231], "__iter__": [10, 49, 57, 218], "_components_data_full_destroi": 10, "__pow__": [10, 88, 197, 203], "flaw": 10, "replace_with_arrai": [10, 232, 233], "cach": [10, 18, 62, 82, 193, 202, 206, 235, 240, 241], "safe": [10, 57, 97, 196, 202, 224, 230, 273], "squar": [10, 12, 18, 24, 27, 31, 35, 39, 48, 57, 58, 63, 73, 74, 82, 84, 88, 89, 93, 96, 97, 100, 107, 109, 133, 134, 157, 173, 181, 191, 195, 197, 199, 201, 202, 203, 206, 214, 218, 219, 222, 225, 226, 277], "jordan": [10, 82, 88, 93, 204, 222, 224, 225], "band": [10, 88, 96], "eigenvalu": [10, 88, 93, 121, 123, 165, 168, 277], "elif": [10, 18, 19, 20, 63], "getsourc": [10, 245, 249], "sum": [10, 16, 18, 39, 46, 49, 56, 57, 60, 62, 65, 70, 72, 80, 82, 84, 86, 87, 88, 90, 93, 97, 103, 118, 133, 150, 154, 157, 165, 168, 170, 171, 191, 193, 194, 196, 197, 201, 202, 203, 206, 208, 209, 211, 213, 215, 216, 218, 219, 222, 224, 225, 226, 227, 228, 230, 232, 241, 244, 283], "meter": [10, 100, 101, 142, 145, 174, 176, 177, 178], "si": [10, 20, 65, 81, 82, 144, 173, 174, 176, 177, 178, 206], "cg": [10, 150, 168], "aris": [10, 18, 19, 57, 62, 82, 84, 168, 190, 196, 201], "scale": [10, 66, 67, 68, 72, 73, 74, 85, 100, 151, 172, 174, 176, 178, 179, 186, 190, 192, 202, 209, 226, 258, 260], "kilomet": [10, 177, 178], "1000": [10, 12, 39, 41, 57, 58, 61, 90, 97, 138, 176, 177, 178, 191, 205, 206, 215], "dimensionsystem": [10, 173], "14318": 10, "duplic": [10, 12, 48, 51, 58, 63, 65, 93, 97, 214, 222, 244, 276], "flatten": [10, 38, 57, 196, 228, 233, 244, 245], "neither": [10, 18, 19, 35, 57, 145, 166, 192, 202, 213, 214, 215, 222, 232, 245, 251, 260, 283], "polymorph": 10, "anymor": [10, 192], "temporarili": [10, 57], "point3d": [10, 70, 71, 72, 144], "p1": [10, 40, 48, 49, 53, 56, 67, 69, 70, 71, 72, 73, 100, 107, 112, 115, 125, 138, 140, 185, 192, 196, 197, 199, 203, 215, 226, 227], "p2": [10, 19, 48, 49, 56, 67, 69, 70, 71, 72, 73, 100, 107, 112, 115, 138, 185, 192, 196, 197, 199, 203, 215, 226], "conflict": [10, 63, 97, 107, 121, 239], "throughout": [11, 82, 87, 199, 209, 225, 275], "elsewher": [11, 18, 62, 86, 123, 195, 237], "termnam": 11, "antideriv": [11, 63, 65, 84, 222, 273], "frac": [11, 16, 18, 20, 37, 56, 57, 58, 59, 62, 63, 65, 82, 84, 93, 97, 99, 107, 125, 136, 174, 186, 187, 189, 190, 191, 195, 199, 202, 206, 208, 209, 213, 216, 219, 222, 223, 225, 226, 227, 244, 258, 260, 273, 277, 278, 282, 283], "indefinit": [11, 31, 63, 81, 82, 84, 93, 197, 199, 200, 202, 211, 273], "integr": [11, 12, 15, 22, 29, 31, 37, 49, 56, 57, 59, 62, 63, 75, 76, 77, 80, 86, 88, 93, 96, 97, 107, 109, 116, 121, 131, 138, 157, 166, 169, 172, 175, 180, 182, 187, 191, 193, 196, 197, 199, 202, 203, 206, 208, 209, 216, 222, 223, 226, 239, 247, 251, 254, 255, 258, 259, 263, 266, 274, 277, 282], "primit": [11, 48, 57, 58, 65, 97, 165, 169, 193, 194, 196, 197, 199, 201, 202, 205, 206, 219, 273], "terminologi": [11, 22, 232], "tupl": [11, 20, 25, 26, 31, 33, 34, 37, 38, 39, 40, 48, 49, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 79, 82, 84, 88, 93, 96, 97, 99, 100, 101, 105, 112, 115, 116, 118, 120, 133, 134, 136, 138, 140, 155, 156, 157, 160, 165, 168, 169, 170, 171, 181, 185, 190, 192, 193, 195, 196, 197, 199, 203, 204, 206, 207, 208, 212, 214, 218, 219, 222, 223, 224, 225, 226, 227, 231, 232, 237, 238, 239, 240, 244, 245, 247, 251, 255, 273, 278, 279, 282], "subexpress": [11, 20, 39, 57, 63, 88, 111, 113, 201, 202, 206, 213, 218, 225, 239, 245, 272], "togeth": [11, 12, 16, 39, 48, 57, 61, 86, 93, 97, 131, 157, 168, 176, 190, 193, 197, 199, 201, 202, 205, 206, 218, 222, 224, 226, 237, 238, 244, 277, 283], "walk": [11, 39, 41, 57, 163, 166, 216], "extract": [11, 24, 26, 27, 37, 57, 84, 88, 90, 93, 97, 108, 123, 131, 180, 190, 199, 201, 202, 224, 225, 226, 237, 239, 244], "rebuilt": [11, 278], "atom": [11, 23, 39, 49, 57, 84, 87, 88, 109, 172, 196, 203, 206, 224, 225, 231], "queri": [11, 18, 19, 20, 32, 35, 36, 37, 39, 57, 69, 202, 218, 226], "is_real": [11, 18, 20, 24, 57, 59, 63, 64, 93, 183, 206, 231], "restrict": [11, 18, 20, 23, 39, 46, 57, 58, 65, 93, 100, 101, 171, 193, 196, 201, 203, 221], "never": [11, 18, 20, 57, 63, 84, 173, 202, 203, 206, 214, 224, 226, 235, 255, 275, 276], "is_": [11, 20, 57], "leav": [11, 18, 20, 25, 26, 39, 57, 84, 93, 97, 117, 131, 155, 171, 213, 241, 272, 278, 283], "recurs": [11, 12, 15, 18, 20, 37, 57, 62, 82, 84, 87, 88, 97, 123, 192, 199, 202, 203, 206, 207, 211, 213, 218, 224, 225, 230, 235, 237, 241, 242, 244, 274, 283], "canonic": [11, 44, 57, 215, 232, 263], "excess": 11, "discourag": [11, 18, 57, 218], "expens": [11, 20, 57, 135, 215, 222, 223, 224, 240, 279], "matrix": [11, 15, 16, 18, 22, 25, 26, 31, 39, 46, 49, 57, 58, 59, 65, 72, 82, 84, 86, 88, 89, 91, 92, 95, 96, 98, 99, 107, 108, 110, 112, 115, 116, 117, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 138, 139, 140, 143, 144, 146, 154, 155, 160, 165, 166, 168, 170, 171, 173, 176, 180, 181, 190, 191, 193, 195, 199, 201, 204, 206, 207, 214, 216, 218, 219, 222, 224, 225, 227, 228, 230, 231, 232, 233, 238, 239, 244, 245, 247, 251, 253, 254, 256, 260, 266, 274, 277, 278, 283, 284], "sympifi": [11, 12, 18, 19, 39, 61, 67, 87, 136, 144, 169, 171, 181, 182, 196, 197, 272, 278], "bound": [11, 23, 35, 39, 40, 56, 57, 66, 67, 68, 70, 72, 73, 84, 97, 169, 197, 199, 201, 202, 206, 212, 222, 224, 225, 226, 231, 241, 247, 251], "dummi": [11, 39, 53, 56, 57, 63, 82, 84, 93, 121, 138, 166, 171, 196, 197, 201, 202, 203, 212, 213, 214, 216, 218, 222, 225, 230, 232, 235, 239, 244, 245], "ration": [11, 18, 20, 32, 34, 35, 37, 39, 56, 57, 61, 62, 63, 65, 67, 70, 72, 74, 78, 82, 84, 85, 90, 93, 97, 99, 107, 140, 173, 191, 194, 199, 200, 201, 203, 206, 211, 214, 215, 216, 218, 219, 221, 224, 225, 226, 244, 251, 274, 275, 278, 282], "unequ": [11, 12, 14, 57, 100, 206], "accident": 11, "clash": [11, 30, 57, 93], "contrast": [11, 20, 56, 57, 125, 196, 216, 222, 277], "_eval_": 11, "_eval_deriv": [11, 20, 57, 65], "overrid": [11, 12, 39, 57, 66, 67, 73, 99, 169, 206, 231, 238, 239, 244, 245], "pre": [11, 38, 39, 57, 191, 192, 207, 215, 218, 224, 225, 237, 256, 260, 278], "dispatch": [11, 33, 34, 35, 57, 58, 166, 206, 225, 241], "shorthand": [11, 12, 18, 20, 57, 87, 165, 201, 214, 235], "stand": [11, 56, 57, 138, 194, 196, 197, 203], "reserv": [11, 18, 121, 232, 239, 279], "smaller": [11, 39, 48, 49, 57, 58, 62, 65, 73, 84, 90, 97, 133, 194, 196, 199, 202, 209, 215, 216, 224, 244, 272, 283], "children": [11, 57, 58, 196, 241], "leaf": [11, 196, 206, 215, 278], "strictli": [11, 12, 15, 17, 18, 35, 37, 57, 65, 93, 97, 107, 199, 218, 224], "dag": 11, "map": [11, 18, 20, 37, 38, 39, 47, 48, 49, 57, 58, 69, 73, 80, 82, 84, 87, 88, 97, 105, 116, 125, 149, 160, 161, 166, 181, 190, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 213, 218, 222, 223, 224, 225, 226, 230, 231, 238, 241, 244, 245, 247, 251], "colloqui": [11, 22], "lambda": [11, 12, 20, 23, 25, 33, 34, 37, 39, 48, 49, 57, 58, 59, 63, 84, 88, 89, 90, 93, 96, 97, 99, 121, 134, 135, 138, 139, 156, 192, 199, 201, 202, 206, 207, 214, 215, 218, 222, 224, 225, 226, 227, 235, 244, 245, 251, 253, 256, 272, 279], "hyper": [11, 57, 62, 65, 76, 79, 206, 208, 216, 218, 224, 226, 283], "primepi": [11, 20, 97], "divisor_sigma": [11, 97], "undefin": [11, 20, 24, 33, 34, 37, 57, 63, 64, 65, 84, 90, 99, 112, 190, 201, 212, 213, 216, 245, 273, 284], "interchang": [11, 53, 56, 82, 222], "memori": [11, 39, 57, 97, 202, 227, 238, 241], "maintain": [11, 12, 57, 58, 97, 101, 206, 214, 215, 222, 225, 241], "mental": 11, "hidden": [11, 180], "state": [11, 16, 18, 48, 55, 57, 65, 97, 100, 107, 109, 115, 116, 117, 120, 123, 125, 139, 143, 147, 148, 150, 151, 152, 154, 155, 156, 160, 163, 165, 166, 167, 168, 170, 171, 202, 206, 215, 216, 218, 226, 241, 268, 279], "hashabl": [11, 54, 82, 244], "repl": [11, 232], "intermedi": [11, 39, 40, 80, 88, 115, 121, 123, 128, 132, 155, 165, 173, 174, 181, 185, 189, 225, 239, 280], "execut": [11, 18, 29, 39, 85, 88, 138, 192, 206, 222, 225, 235, 237, 239, 240, 245, 247, 250, 262, 277, 282], "idiom": [11, 248, 275, 276], "anti": [11, 31, 35, 53, 63, 84, 88, 143, 148, 232], "frown": 11, "upon": [11, 18, 39, 57, 97, 120, 123, 133, 134, 135, 138, 165, 171, 187, 189, 190, 214, 222, 231, 238, 258, 283], "lowercas": [11, 12, 222, 237, 273], "is_integ": [11, 18, 20, 57, 183, 206, 231], "capit": [11, 56, 58, 107, 222], "wherea": [11, 16, 18, 35, 39, 58, 67, 73, 82, 87, 107, 176, 193, 196, 202, 206, 224, 225, 244, 283], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 57, 61, 65, 90, 97, 121, 138, 205, 213, 216, 218, 225, 240, 256], "isinst": [11, 15, 18, 20, 39, 57, 88, 90, 107, 196, 197, 206, 207, 218, 227, 230, 239, 278], "ship": [11, 98], "session": [11, 30, 39, 57, 69, 84, 186, 190, 196, 242, 275, 282], "sort": [11, 23, 33, 34, 38, 39, 46, 49, 53, 82, 84, 87, 93, 96, 97, 108, 111, 116, 155, 171, 176, 180, 192, 199, 202, 203, 213, 218, 219, 222, 223, 224, 230, 232, 237, 239, 244, 255, 275, 277, 278], "numberkind": [11, 15, 57, 88, 214], "matrixkind": [11, 15, 57, 88, 214], "booleankind": [11, 57], "ring": [11, 60, 80, 93, 94, 189, 194, 195, 199, 201, 202, 203, 204, 205, 206, 244], "classif": [11, 17, 57, 222, 223], "lamda": [11, 90, 206, 214, 226, 279], "\u03bb": [11, 279], "lambdifi": [11, 20, 25, 39, 65, 123, 206, 224, 238, 243, 270, 274], "matrixexpr": [11, 20, 88, 90, 91], "mutabl": [11, 12, 40, 57, 89, 90, 91, 100, 197, 206, 207, 218, 227, 279], "dens": [11, 88, 90, 92, 93, 195, 201, 202, 227, 266, 278], "underli": [11, 39, 49, 55, 57, 86, 93, 105, 121, 166, 179, 224, 225, 226], "quit": [11, 16, 20, 65, 93, 97, 123, 189, 192, 203, 205, 216, 224, 244, 260, 275, 278], "rung": [11, 37, 79], "kutta": [11, 79], "condit": [11, 18, 19, 23, 39, 48, 57, 59, 63, 65, 75, 76, 79, 80, 81, 84, 87, 93, 97, 99, 100, 101, 103, 107, 113, 117, 123, 131, 135, 138, 140, 185, 191, 203, 206, 209, 216, 219, 221, 222, 224, 225, 226, 231, 283], "loss": [11, 39, 82, 171, 238, 257], "stabil": [11, 48, 53, 55, 61, 107, 135, 230], "focus": [11, 25, 199, 221, 224, 225, 284], "is_numb": [11, 18, 57, 65, 84], "infin": [11, 18, 23, 35, 56, 57, 62, 63, 65, 70, 82, 84, 93, 144, 197, 199, 202, 206, 211, 212, 213, 214, 218, 221, 222, 226], "resembl": [11, 59, 65, 84, 231], "zoo": [11, 14, 18, 35, 57, 62, 63, 65, 84, 213, 215, 218], "data": [11, 16, 39, 48, 57, 58, 65, 84, 93, 98, 105, 116, 150, 192, 193, 196, 197, 199, 202, 203, 206, 218, 231, 232, 237, 239, 241, 244, 248], "effici": [11, 16, 18, 37, 39, 41, 48, 53, 57, 60, 61, 62, 73, 74, 90, 93, 97, 98, 107, 115, 116, 138, 191, 194, 195, 196, 197, 199, 202, 203, 204, 205, 218, 219, 224, 238, 245, 272, 278, 279, 283], "act": [11, 38, 47, 48, 49, 53, 57, 65, 73, 86, 87, 93, 100, 103, 112, 115, 120, 121, 126, 134, 143, 155, 160, 163, 164, 214, 225, 227, 256, 260, 272], "pprint": [11, 12, 20, 24, 37, 38, 59, 65, 84, 93, 97, 107, 143, 191, 206, 207, 214, 218, 222, 223, 225, 226, 244, 282], "inequ": [11, 18, 19, 20, 22, 57, 192, 199, 214, 216, 220, 263], "neq": [11, 20, 57, 63, 65, 82, 84, 88, 176, 190, 191, 199, 202, 219, 222, 224, 283], "ne": [11, 14, 18, 57, 58, 62, 63, 70, 82, 97, 194, 196, 199, 216, 222, 226], "hold": [11, 12, 20, 34, 38, 48, 53, 57, 58, 59, 63, 65, 79, 82, 93, 96, 99, 107, 109, 115, 117, 118, 136, 167, 202, 216, 218, 222, 226, 239, 283], "singleton": [11, 49, 87, 225, 278], "gotcha": [11, 13, 57, 190, 245, 276, 284], "somehow": [11, 20], "simpler": [11, 19, 20, 57, 61, 65, 81, 82, 128, 190, 199, 215, 216, 218, 222, 224, 225, 283], "adject": [11, 226], "heurist": [11, 18, 49, 82, 84, 88, 199, 200, 213, 215, 218, 224, 225, 237, 273, 283], "appar": [11, 12, 57, 247, 283], "commut": [11, 18, 31, 35, 38, 48, 49, 53, 57, 59, 80, 84, 93, 148, 155, 158, 159, 160, 170, 171, 176, 183, 190, 194, 197, 198, 199, 200, 202, 206, 213, 214, 216, 222, 232, 268, 269, 278], "law": [11, 38, 131, 174, 190, 194], "xreplac": [11, 57, 88, 93, 181], "knowledg": [11, 56, 57, 58, 201, 222, 278, 281], "round": [11, 20, 25, 37, 39, 57, 61, 62, 63, 93, 144, 201, 202, 213, 215, 226], "analyt": [11, 29, 62, 65, 82, 93, 131, 222, 273], "implicitli": [11, 18, 19, 20, 49, 57, 84, 193, 196, 224], "independ": [11, 12, 20, 35, 37, 39, 48, 56, 57, 59, 65, 74, 82, 84, 86, 93, 107, 116, 117, 121, 123, 125, 133, 135, 169, 176, 187, 192, 194, 196, 201, 202, 208, 209, 216, 218, 219, 222, 223, 224, 225, 226, 232, 237, 238, 258, 277, 278], "nativ": [11, 57, 107, 197, 202, 237], "parsabl": 11, "iter": [11, 24, 27, 37, 39, 46, 48, 49, 52, 53, 57, 58, 59, 60, 62, 65, 73, 87, 97, 112, 113, 115, 116, 117, 120, 135, 139, 156, 171, 185, 192, 193, 194, 195, 197, 199, 202, 206, 207, 208, 209, 212, 218, 219, 222, 224, 225, 226, 227, 230, 238, 239, 240, 241, 243, 245, 251, 256, 270], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 37, 60, 87, 199], "One": [11, 12, 15, 18, 20, 37, 38, 39, 47, 49, 56, 57, 62, 63, 65, 76, 79, 81, 82, 84, 87, 93, 97, 100, 101, 121, 136, 138, 147, 176, 197, 199, 200, 202, 205, 208, 214, 218, 221, 224, 225, 226, 227, 232, 245, 258, 272, 273, 275, 278, 279, 283], "care": [11, 12, 19, 20, 48, 57, 65, 84, 87, 93, 100, 111, 121, 135, 181, 190, 196, 201, 218, 219, 222, 224, 225, 230, 233, 238, 272, 275, 277], "falsi": 11, "is_posit": [11, 18, 19, 20, 57, 183, 197], "unevaluatedexpr": [11, 57, 206, 278], "surpris": [11, 18, 225], "north": 11, "riemann": [11, 59, 62, 63, 82, 193, 218, 232], "sphere": [11, 143, 251, 261], "behav": [12, 35, 37, 57, 58, 63, 65, 97, 202, 214, 218, 224, 227, 233, 279], "mapl": [12, 84, 222, 277], "mathematica": [12, 39, 49, 99, 277, 279], "faq": 12, "introductori": [12, 16, 28, 29, 138, 196, 197, 202], "remaind": [12, 56, 57, 58, 97, 194, 196, 197, 200, 202, 222], "familiar": [12, 20, 84, 121, 136, 155, 203, 273, 275, 281], "java": 12, "minut": [12, 111, 123, 180], "subtract": [12, 24, 39, 49, 57, 61, 72, 97, 107, 115, 173, 194, 195, 196, 197, 199, 201, 202, 278, 283], "proper": [12, 48, 57, 84, 97, 111, 121, 180, 196, 197, 201, 206, 214, 222, 227, 238, 239, 258, 279], "trigsimp": [12, 31, 57, 93, 115, 121, 129, 181, 215, 218, 255], "fill": [12, 17, 48, 58, 88, 90, 93, 96, 171, 192, 237, 240, 244, 247, 279], "alter": [12, 40, 48, 57, 181, 196, 206, 208, 225], "afterward": [12, 39, 57, 118, 125], "quantiti": [12, 49, 57, 62, 65, 69, 74, 101, 111, 116, 129, 136, 150, 173, 175, 179, 187, 189, 190, 201, 218, 226, 255, 260, 268], "simultan": [12, 57, 63, 70, 88, 97, 192, 215], "var": [12, 37, 39, 56, 57, 61, 62, 80, 84, 87, 93, 107, 181, 192, 201, 205, 206, 218, 219, 245, 284], "rate": [12, 123, 189, 226, 258, 273], "short_lif": 12, "haven": 12, "160": [12, 100, 200], "ctimesd": 12, "circular": [12, 18, 105, 143, 199], "relationship": [12, 14, 18, 39, 57, 62, 64, 84, 97, 132, 155, 181, 187, 190, 196, 224], "runtimeerror": [12, 37, 214, 225, 244], "compileflag": [12, 237], "glob": [12, 237], "exceed": [12, 123], "stdin": [12, 240, 242], "nameerror": [12, 85, 240, 275], "__future__": [12, 16, 275, 282], "divis": [12, 20, 57, 93, 97, 173, 193, 196, 197, 198, 199, 202, 204, 206, 219, 222, 224, 237, 245, 275, 278, 282], "cl": [12, 18, 20, 39, 48, 57, 84, 88, 171, 185, 197, 201, 222, 231, 240, 244, 257, 273, 282, 284], "dir": [12, 57, 100, 208, 213, 244], "__builtins__": 12, "__file__": [12, 248], "__name__": [12, 206, 248], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 65, 82, 143, 206, 216, 222, 226, 232], "eta": [12, 65, 82, 201, 206, 222, 223, 226], "iota": [12, 206], "kappa": [12, 191, 206, 226], "mu": [12, 65, 82, 97, 108, 110, 142, 206, 226, 232], "omega": [12, 39, 40, 48, 82, 97, 112, 118, 120, 136, 139, 145, 147, 172, 181, 185, 186, 189, 191, 206, 213, 226], "omicron": [12, 206], "phi": [12, 48, 57, 58, 62, 65, 82, 86, 93, 97, 109, 138, 145, 154, 156, 191, 193, 201, 206, 222, 251, 261], "psi": [12, 62, 65, 82, 143, 154, 155, 161, 169, 201, 206, 232], "rho": [12, 59, 82, 93, 97, 124, 165, 206, 226, 232, 261], "sigma": [12, 49, 80, 82, 88, 93, 206, 209, 226], "tau": [12, 39, 82, 84, 93, 201, 206, 222], "theta": [12, 57, 59, 63, 65, 82, 85, 93, 99, 109, 120, 139, 143, 181, 190, 191, 197, 201, 206, 209, 214, 225, 226, 251, 253, 256, 258, 261], "upsilon": [12, 206], "xi": [12, 20, 59, 82, 206, 222, 223, 224], "lastli": [12, 84, 101, 139, 222], "unit": [12, 20, 31, 35, 38, 57, 58, 62, 70, 71, 72, 84, 93, 97, 100, 105, 107, 109, 110, 115, 121, 136, 138, 147, 172, 173, 174, 178, 180, 181, 187, 190, 192, 194, 197, 199, 201, 202, 204, 206, 214, 216, 219, 225, 227, 251, 253, 255, 260, 261, 268], "mnemon": [12, 215, 244], "osineq": 12, "reimport": 12, "restor": [12, 196, 218], "__": [12, 65, 84, 206, 226, 231], "press": [12, 38, 40, 41, 49, 58, 84, 88, 191, 200, 219, 224], "autocomplet": 12, "lose": [12, 193], "abil": [12, 18, 37, 93, 131, 201, 205, 222, 225, 277, 283], "past": [12, 63, 97, 205, 206, 282], "f1": [12, 25, 48, 82, 84, 93, 107, 112, 121, 129, 138, 192, 197, 199, 202, 206, 208, 224], "f2": [12, 25, 57, 82, 93, 107, 112, 121, 129, 138, 174, 192, 199, 202, 206, 208, 224], "6": [12, 14, 16, 26, 27, 31, 33, 34, 37, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 79, 80, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 103, 105, 107, 108, 109, 123, 124, 128, 129, 130, 140, 144, 150, 168, 180, 181, 190, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 208, 211, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 237, 238, 241, 244, 245, 251, 254, 256, 261, 273, 279, 283, 284], "accuraci": [12, 16, 37, 57, 202, 279], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 57, 278], "reus": [12, 20, 39, 171, 277], "142857142857143": 12, "receiv": [12, 27, 57, 58, 97, 112, 166, 201, 231], "fraction": [12, 57, 58, 61, 63, 73, 84, 93, 97, 113, 177, 196, 197, 199, 200, 203, 206, 208, 218, 219, 222, 224, 274], "interpret": [12, 19, 27, 39, 48, 56, 57, 62, 63, 65, 70, 73, 84, 88, 90, 93, 97, 99, 111, 176, 192, 194, 201, 202, 206, 213, 219, 224, 225, 226, 231, 237, 238, 241, 247, 279], "100": [12, 20, 39, 41, 46, 56, 57, 58, 61, 65, 73, 80, 87, 88, 93, 97, 100, 192, 196, 201, 203, 205, 206, 213, 224, 225, 244, 272], "000000000000": 12, "00": [12, 57, 97, 155, 165, 219, 244], "null": [12, 57, 93], "34": [12, 39, 49, 62, 70, 93, 97, 112, 153, 200, 205, 212, 218, 219], "3400000000000": 12, "250": [12, 97, 219], "143": [12, 150, 191], "next": [12, 16, 18, 20, 30, 39, 40, 41, 46, 48, 49, 51, 52, 57, 58, 63, 82, 84, 87, 93, 97, 111, 112, 116, 124, 125, 126, 128, 130, 131, 132, 139, 189, 190, 193, 197, 201, 202, 206, 214, 216, 219, 222, 241, 242, 244, 276, 277, 278], "binari": [12, 19, 20, 35, 39, 41, 52, 57, 58, 84, 87, 97, 98, 165, 177, 193, 196, 202, 219, 238, 241, 244], "decim": [12, 20, 39, 57, 60, 61, 97, 99, 105, 196, 202, 277], "far": [12, 38, 57, 71, 84, 191, 193, 196, 206, 216, 245, 272, 273, 275], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 42, 48, 59, 87, 97, 125, 193, 194, 199, 226], "pad": [12, 39, 58, 59, 60, 72, 97], "inexact": [12, 27, 57, 197], "low": [12, 18, 19, 39, 57, 58, 65, 97, 196, 199, 204, 206, 218, 238, 239, 244], "higher": [12, 16, 37, 39, 57, 59, 61, 65, 68, 93, 185, 191, 193, 196, 199, 202, 208, 209, 213, 215, 218, 222, 224, 227, 245, 273], "engin": [12, 103, 137, 138, 188, 222, 282], "increas": [12, 37, 38, 49, 55, 56, 57, 60, 61, 65, 88, 97, 98, 111, 122, 155, 180, 181, 183, 189, 190, 196, 199, 201, 202, 208, 211, 215, 222, 226, 242, 244], "2000061035": 12, "highest": [12, 39, 51, 86, 111, 193, 202, 209, 219, 222], "hopefulli": [12, 17, 82], "unsimplifi": [12, 215], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 36, 39, 40, 56, 57, 58, 61, 62, 63, 65, 69, 80, 82, 87, 88, 93, 103, 109, 138, 171, 194, 197, 201, 202, 206, 219, 221, 224, 225, 226, 232, 241, 244, 247, 257, 283], "gave": [12, 57, 244], "gain": [12, 58, 107, 133, 134, 138], "impress": 12, "91": [12, 40, 200, 205, 212, 226], "compar": [12, 18, 27, 37, 39, 49, 54, 57, 62, 63, 74, 87, 93, 97, 98, 123, 150, 174, 178, 196, 199, 202, 203, 206, 211, 213, 218, 222, 225, 227, 231, 237, 244, 275, 278, 283], "4e": [12, 224], "nearli": [12, 97, 215], "snippet": [12, 39], "expr_modifi": 12, "__main__": [12, 39, 279], "declar": [12, 18, 24, 39, 70, 82, 93, 99, 108, 121, 123, 138, 150, 195, 206, 213, 216, 221, 222, 223, 226, 239], "asid": [12, 87, 222, 223, 277], "2x": [12, 57, 65, 82, 99, 218, 219, 225, 226, 272, 275, 283], "syntaxerror": [12, 99], "asin": [12, 63, 65, 71, 203, 206, 216, 218, 222, 226, 283], "arcsin": [12, 63, 203, 206, 226], "arcco": [12, 63, 206], "root": [12, 18, 20, 22, 24, 27, 37, 39, 56, 57, 58, 63, 65, 79, 80, 81, 82, 84, 86, 89, 93, 97, 138, 176, 191, 193, 194, 197, 201, 203, 205, 206, 216, 218, 222, 224, 225, 226, 237, 241, 244, 277, 279, 282, 284], "expon": [12, 27, 36, 39, 57, 58, 63, 64, 65, 82, 84, 90, 97, 105, 107, 177, 194, 195, 196, 202, 203, 206, 215, 218, 222, 225, 230, 241, 283], "half": [12, 20, 39, 57, 58, 62, 63, 65, 67, 73, 84, 86, 93, 97, 99, 100, 140, 143, 168, 191, 197, 199, 201, 202, 214, 215, 216, 218, 226, 237, 244], "denomin": [12, 57, 61, 65, 84, 97, 107, 113, 194, 196, 197, 199, 201, 202, 205, 206, 215, 216, 218, 219, 222, 224, 283], "wild": [12, 57, 218, 244], "interest": [12, 14, 20, 27, 53, 57, 59, 62, 63, 73, 82, 84, 93, 97, 122, 123, 171, 176, 190, 193, 197, 201, 202, 203, 205, 213, 216, 218, 219, 224, 225, 238, 239, 256, 273, 276, 278, 279, 280, 283], "sq": [12, 219], "is_pow": [12, 39, 57, 63], "is_rat": [12, 18, 201, 244], "bracket": [12, 20, 25, 26, 49, 57, 65, 169, 171, 181, 206], "notat": [12, 16, 24, 27, 45, 49, 50, 56, 57, 58, 62, 65, 82, 90, 93, 99, 107, 169, 180, 181, 186, 190, 193, 206, 213, 218, 225, 231, 232, 244, 258, 273], "curli": [12, 121, 206], "suppli": [12, 25, 37, 38, 39, 48, 49, 57, 59, 67, 71, 93, 97, 112, 115, 116, 118, 123, 125, 128, 133, 134, 144, 171, 180, 185, 190, 192, 201, 203, 208, 215, 222, 238, 244, 245, 251, 253, 256], "powsimp": [12, 57, 63, 215, 218], "deep": [12, 20, 57, 63, 87, 88, 202, 213, 218, 226, 278], "measur": [12, 31, 63, 65, 73, 89, 111, 151, 160, 165, 173, 176, 178, 180, 181, 185, 187, 190, 202, 214, 215, 218, 226, 250, 251, 254, 255, 257, 258, 260], "count_op": [12, 57, 215, 218], "radic": [12, 57, 58, 93, 193, 201, 202, 218, 224, 225], "join": [12, 23, 49, 57, 58, 70, 88, 100, 101, 206, 218, 222, 224, 227, 244, 248], "autoexpand": [12, 218], "violat": [12, 121, 191, 203, 218], "naiv": [12, 15, 48, 54, 57, 82, 88, 93, 176, 216, 224, 225, 232], "strategi": [12, 40, 57, 84, 199, 200, 213, 216, 218, 223], "radsimp": [12, 57, 218], "logcombin": [12, 218, 222, 225], "robust": [12, 54, 57, 61, 198, 218, 222], "cancel": [12, 16, 20, 39, 57, 61, 65, 73, 82, 84, 93, 97, 107, 108, 196, 197, 199, 202, 205, 218, 224, 277], "topic": [13, 21, 28, 39, 131, 136, 188, 189, 190, 191, 193, 195, 196, 201, 225, 268, 275, 280], "behind": [13, 28, 108, 121, 135, 175, 195, 215, 218, 222, 225, 268, 275], "decis": [13, 28, 57, 63, 84, 215, 224, 239], "opinion": [13, 28], "pitfal": [13, 20, 190, 196, 275, 280, 283], "glossari": 13, "seem": [14, 18, 20, 81, 82, 121, 176, 193, 218, 222, 283], "unwieldi": 14, "arbitrarili": [14, 37, 57, 70, 97, 199, 201, 213, 216, 222, 223, 226], "six": [14, 101, 206, 219, 225, 226], "bias": 14, "toward": [14, 39, 57, 65, 193, 213, 225], "enter": [14, 49, 57, 58, 62, 70, 97, 99, 100, 116, 120, 123, 133, 206, 216, 224, 237, 278, 282], "attempt": [14, 16, 19, 20, 27, 39, 48, 53, 55, 57, 61, 62, 69, 82, 84, 93, 97, 111, 113, 166, 196, 201, 206, 208, 215, 218, 219, 222, 224, 225, 226, 237, 275, 283], "unambigu": [14, 206, 222, 247], "univari": [14, 27, 37, 56, 57, 63, 80, 84, 193, 194, 196, 197, 200, 201, 202, 203, 208, 219, 221, 224, 226], "linear": [14, 20, 22, 25, 27, 38, 39, 49, 56, 57, 58, 60, 61, 65, 70, 80, 82, 84, 86, 88, 90, 92, 100, 104, 107, 114, 115, 116, 118, 123, 125, 126, 131, 133, 137, 138, 143, 165, 168, 169, 185, 192, 193, 197, 199, 201, 202, 204, 212, 214, 216, 219, 222, 223, 224, 225, 244, 266, 268, 284], "undetermin": [14, 57, 93, 202, 208, 222, 224], "nonlinear": [14, 22, 27, 56, 138, 202, 222, 224, 225], "sol": [14, 25, 93, 219, 222, 223, 224], "insuffici": [14, 88], "elimin": [14, 16, 39, 53, 57, 87, 89, 93, 111, 197, 204, 205, 207, 209, 218, 222, 224, 225, 232, 239, 279], "nsolv": [14, 25, 26, 27, 138, 224], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 23, 221, 224], "rh": [14, 23, 39, 47, 49, 57, 88, 89, 93, 115, 116, 121, 128, 129, 130, 195, 204, 206, 208, 222, 224, 225, 257], "classifi": [15, 93, 196, 222, 223, 225, 226], "distinguish": [15, 18, 19, 38, 48, 61, 86, 121, 170, 176, 193], "former": [15, 39, 57, 62, 121, 199, 201, 202, 219, 244], "retriev": [15, 55, 88, 202, 218, 232], "guarante": [15, 18, 25, 39, 48, 49, 57, 69, 82, 84, 93, 196, 199, 201, 202, 222, 224, 225, 242, 247, 279, 283], "catch": [15, 57, 222, 237, 279], "theori": [15, 20, 40, 46, 47, 48, 49, 55, 57, 58, 62, 65, 86, 94, 116, 121, 135, 137, 150, 168, 171, 181, 185, 195, 199, 200, 201, 205, 219, 241, 251, 269, 277], "is_subset": [15, 214], "valueerror": [15, 18, 25, 32, 34, 37, 39, 40, 49, 57, 58, 66, 67, 70, 72, 73, 84, 88, 90, 93, 96, 97, 100, 105, 107, 145, 185, 187, 191, 193, 195, 199, 201, 214, 222, 224, 225, 244, 247, 258], "odd": [15, 18, 32, 34, 35, 36, 45, 49, 57, 58, 62, 63, 65, 87, 96, 97, 108, 191, 201, 202, 206, 224], "appliedpred": [15, 32, 33, 34], "analysi": [16, 39, 40, 48, 57, 58, 63, 104, 123, 135, 136, 139, 193, 202, 216, 219, 226], "vari": [16, 37, 39, 57, 71, 73, 100, 105, 111, 116, 136, 169, 190, 213, 224, 244, 258], "hope": [16, 48, 111, 193], "research": [16, 49, 203, 218], "establish": [16, 53, 82, 115, 126, 216], "envis": 16, "along": [16, 20, 39, 48, 57, 58, 59, 63, 65, 66, 67, 71, 72, 75, 77, 80, 82, 88, 90, 93, 100, 101, 103, 110, 111, 115, 116, 123, 125, 128, 129, 130, 133, 134, 135, 138, 140, 168, 180, 181, 187, 190, 192, 195, 196, 201, 202, 222, 225, 254, 258, 260], "small": [16, 39, 40, 48, 49, 57, 61, 62, 84, 87, 93, 97, 107, 125, 129, 138, 168, 191, 192, 199, 200, 201, 218, 219, 224, 244, 272, 275, 277], "x_": [16, 39, 47, 57, 58, 62, 99, 197, 199, 202, 208, 219, 222, 227], "taylor": [16, 57, 63, 121, 135, 138, 197, 199, 202, 203, 213, 222], "let": [16, 18, 19, 20, 37, 39, 48, 53, 57, 58, 67, 75, 80, 82, 86, 90, 93, 94, 97, 99, 112, 121, 138, 176, 181, 189, 193, 194, 195, 199, 201, 202, 203, 206, 213, 216, 218, 219, 222, 224, 225, 232, 235, 238, 242, 245, 256, 257, 261, 272, 275, 277, 278, 283], "df": [16, 59, 222], "c_": [16, 22, 58, 80, 82, 190, 194, 222], "grid": [16, 37, 38, 105, 192], "f_": [16, 57, 62, 65, 84, 133, 134, 135, 199, 205, 206, 216, 222], "constraint": [16, 23, 93, 101, 107, 115, 116, 117, 120, 121, 123, 124, 125, 127, 131, 133, 134, 135, 138, 203, 268], "formul": [16, 115, 124, 125, 131, 133, 134, 171, 190], "assess": 16, "brute": [16, 215, 219], "frequent": [16, 48, 201, 213, 225], "cover": [16, 63, 97, 99, 111, 121, 180, 189, 232, 239, 273, 275], "treatment": [16, 82, 202], "shall": [16, 48, 82, 121, 138, 213, 216, 278], "job": [16, 20, 49, 151, 203, 206], "truncat": [16, 49, 57, 93, 97, 101, 176, 192, 203, 205, 208, 209], "approx": [16, 22, 25, 57, 84], "lowest": [16, 39, 48, 53, 97, 193, 208, 225], "2h": 16, "print_funct": 16, "x0": [16, 37, 39, 47, 57, 65, 76, 78, 80, 81, 97, 143, 196, 207, 208, 213, 218, 222, 224, 226, 244, 273], "x_0": [16, 47, 48, 58, 79, 80, 81, 199, 208, 219, 222, 226, 273], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 58, 80], "c_1": [16, 58, 80, 82, 213, 216, 222], "c_2": [16, 82, 213, 222], "2f": [16, 284], "c_i": [16, 82, 213, 216, 222], "nth": [16, 57, 62, 65, 86, 97, 197, 202, 203, 212, 218, 222, 226], "degre": [16, 40, 48, 55, 56, 62, 65, 73, 84, 88, 93, 100, 103, 105, 107, 115, 116, 121, 122, 125, 131, 139, 143, 190, 193, 194, 197, 199, 201, 202, 205, 209, 212, 215, 216, 218, 219, 222, 224, 226, 251, 268], "x_i": [16, 20, 47, 65, 84, 93, 194, 197, 199, 202, 203, 206, 225], "m11": [16, 226], "m12": [16, 226], "m13": 16, "m21": [16, 226], "m22": [16, 226], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 97], "3x3": [16, 72, 93, 256], "invert": [16, 27, 35, 57, 58, 88, 90, 93, 107, 125, 173, 194, 196, 197, 201, 202, 222, 224, 225, 232, 279], "inv": [16, 49, 89, 93, 115, 116, 123, 128, 129, 138, 160, 195, 222], "fim1": 16, "eight": [16, 27, 206], "dfdxcheck": 16, "c3": [16, 60, 86, 88, 90, 97, 222, 226, 257, 284], "c5": [16, 222], "120": [16, 56, 57, 62, 63, 79, 97, 100, 101, 203, 205, 206, 208, 222, 273], "c7": [16, 48], "5040": [16, 62, 79, 202, 203], "quickli": [16, 20, 48, 49, 57, 58, 61, 97, 199, 202, 215, 225, 241], "tediou": [16, 84], "certainli": [16, 69, 99, 241], "fine": [16, 20, 57, 61, 85, 186, 196, 206, 218], "devis": 16, "xn": [16, 20, 197], "x_n": [16, 20, 40, 47, 58, 79, 93, 194, 197, 199, 202, 219, 225], "fn": [16, 84, 93, 193, 202], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 56, 82, 93, 222, 225, 244, 283], "cours": [16, 18, 41, 48, 56, 65, 82, 84, 93, 94, 97, 187, 195, 196, 200, 201, 213, 215, 216, 258, 283], "etc": [16, 18, 19, 34, 37, 39, 53, 57, 58, 62, 63, 75, 86, 87, 92, 97, 121, 142, 151, 155, 168, 171, 175, 183, 187, 189, 190, 192, 193, 194, 196, 199, 201, 206, 207, 214, 215, 216, 218, 222, 225, 226, 230, 238, 239, 244, 256, 260], "discrit": 16, "bengt": [16, 37], "fornberg": [16, 37], "weight": [16, 57, 65, 72, 74, 84, 86, 93, 155, 218, 273], "gap": [17, 48, 97, 121, 203], "matur": [17, 18, 224, 225], "finit": [17, 18, 24, 35, 39, 43, 44, 45, 48, 56, 57, 58, 60, 61, 84, 86, 87, 157, 181, 191, 194, 197, 200, 202, 203, 206, 208, 209, 212, 214, 219, 221, 222, 225, 244, 251, 253, 263, 274, 277, 283], "concret": [18, 38, 49, 57, 62, 63, 84, 86, 93, 97, 121, 176, 197, 201, 206, 263], "obviou": [18, 19, 20, 48, 56, 193, 196, 205, 219, 277], "situat": [18, 27, 61, 82, 190, 222, 224, 226, 242, 275], "refus": [18, 283], "roughli": [18, 57, 58, 98, 122, 222, 245], "possibli": [18, 39, 49, 55, 57, 82, 84, 97, 174, 175, 199, 213, 214, 224, 239, 273, 279], "infinit": [18, 20, 23, 35, 56, 57, 58, 61, 62, 63, 70, 71, 84, 93, 97, 107, 127, 157, 176, 193, 201, 206, 207, 208, 211, 212, 213, 214, 218, 219, 221, 224, 231, 244, 283, 284], "is_neg": [18, 20, 197], "interprett": 18, "unknow": 18, "resolv": [18, 19, 23, 24, 25, 26, 57, 215, 218, 224], "undecid": [18, 20, 24, 93, 196, 225, 279], "conclud": [18, 65, 80, 123, 187, 213, 224, 260], "particularli": [18, 61, 84, 196, 197, 216, 283, 284], "mix": [18, 30, 56, 63, 88, 93, 99, 180, 196, 197, 202, 206, 225, 228, 230, 232, 245], "ideal": [18, 39, 94, 118, 121, 131, 181, 189, 195, 197, 199, 200, 201, 202, 203, 218, 225, 251], "slow": [18, 20, 53, 57, 61, 84, 98, 111, 123, 143, 180, 190, 196, 197, 206, 207, 208, 209, 218, 222, 224, 225, 237, 238, 283], "indetermin": [18, 19, 57, 93, 199, 211, 224], "contradict": 18, "infer": [18, 33, 34, 49, 57, 84, 196, 205, 206, 211, 216, 222, 238], "prepar": [18, 116, 204], "presum": [18, 82, 196, 216, 239], "singletonregistri": [18, 57], "x1": [18, 20, 25, 47, 57, 62, 138, 143, 196, 197, 207, 208, 218, 222, 224, 226, 244], "x2": [18, 25, 47, 57, 62, 138, 143, 196, 208, 222, 224, 226], "posifi": [18, 218], "_x": [18, 20, 93, 132, 136, 186, 189, 190, 197, 203, 218, 222, 238], "rep": [18, 48, 53, 57, 155, 193, 195, 196, 197, 200, 201, 202, 215, 218, 247], "feel": [18, 29, 138, 139, 218, 222, 224], "among": [18, 38, 39, 40, 41, 48, 49, 58, 85, 98, 202, 222, 227, 230, 232, 255], "behaviour": [18, 82, 87, 112, 199, 203, 209, 212], "symbolc": 18, "implicit": [18, 39, 55, 57, 99, 116, 120, 139, 192, 222, 224, 228, 231, 238, 239, 251, 254, 261, 275], "tailor": 18, "assumptions0": [18, 57], "extended_neg": [18, 57], "extended_nonneg": [18, 57], "extended_nonposit": [18, 57], "extended_nonzero": [18, 57, 206], "extended_posit": [18, 57], "extended_r": [18, 35, 57, 206, 221, 225], "hermitian": [18, 35, 57, 88, 89, 93, 154, 160, 171, 206], "irrat": [18, 35, 37, 57, 97, 196, 202, 206, 214, 277], "noninteg": [18, 35, 57, 196, 206], "nonneg": [18, 20, 35, 57, 58, 59, 62, 65, 90, 138, 194, 196, 202, 219, 226, 283], "nonposit": [18, 35, 57, 62, 65, 138], "nonzero": [18, 20, 35, 36, 56, 57, 72, 93, 109, 194, 195, 196, 197, 206, 209, 225], "transcendent": [18, 24, 26, 27, 35, 57, 65, 84, 196, 201, 206, 224, 225, 279, 284], "field": [18, 31, 35, 39, 57, 58, 59, 65, 75, 84, 143, 144, 183, 184, 188, 193, 194, 195, 197, 198, 200, 202, 203, 204, 219, 224, 237, 251, 254, 256, 257, 259, 261, 266, 268, 269], "antihermitian": [18, 35, 57], "mathbb": [18, 20, 35, 40, 48, 56, 57, 58, 63, 65, 82, 88, 93, 135, 191, 193, 194, 196, 197, 199, 201, 202, 205, 213, 214, 216, 219, 225, 226, 283], "ii": [18, 63, 82, 84, 97, 202, 206, 214, 222, 225], "cup": [18, 202, 214, 225], "pm": [18, 56, 82, 84, 194, 205, 213, 219, 222], "yi": 18, "composit": [18, 35, 38, 46, 48, 49, 57, 58, 75, 77, 84, 97, 100, 197, 199, 202, 205, 218, 225, 240], "2k": [18, 57, 62, 82, 97, 219], "pariti": [18, 49, 202], "product": [18, 31, 42, 45, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 65, 67, 70, 72, 73, 80, 82, 84, 86, 87, 88, 90, 93, 97, 98, 107, 108, 109, 111, 115, 123, 136, 138, 146, 150, 151, 154, 156, 157, 158, 160, 163, 165, 166, 168, 169, 171, 176, 177, 180, 181, 183, 188, 189, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 206, 207, 208, 211, 214, 215, 218, 219, 222, 223, 224, 225, 226, 228, 230, 231, 232, 238, 241, 244, 251, 255, 268], "le": [18, 40, 53, 57, 65, 82, 88, 97, 130, 199, 216, 226], "commutative_properti": [18, 57], "skew": [18, 80, 97, 226], "hermitian_matrix": 18, "complex_numb": [18, 35, 57], "algebraic_numb": [18, 35, 57], "transcendental_numb": [18, 57], "extended_real_number_lin": 18, "real_numb": [18, 35], "imaginary_numb": [18, 35, 57], "rational_numb": [18, 35], "irrational_numb": [18, 35, 57], "parity_": [18, 57], "prime_numb": [18, 57, 97], "composite_numb": [18, 57], "positive_real_numb": 18, "negative_numb": [18, 57], "inconsist": [18, 20, 32, 34, 56, 176, 181, 185, 189, 218, 222, 225], "inconsistentassumpt": 18, "deal": [18, 39, 56, 57, 61, 69, 77, 82, 84, 104, 111, 116, 117, 121, 187, 189, 190, 194, 199, 202, 219, 224, 235, 245, 247, 255, 260, 275, 277, 283], "is_zero_matrix": [18, 88, 195], "generalis": [18, 65, 82, 193], "gaussian": [18, 65, 84, 93, 97, 141, 199, 202, 219, 224, 226, 268, 279], "notion": [18, 38, 176, 179, 193, 225, 255, 260], "chain": [18, 20, 39, 48, 53, 57, 65, 74, 98, 189, 201, 226], "superset": [18, 37, 46, 52, 60, 138, 196, 214, 224], "vanilla": 18, "attach": [18, 51, 82, 98, 100, 115, 116, 132, 190, 238, 240, 245], "is_commut": [18, 84, 160, 169, 244], "is_complex": [18, 57], "is_finit": [18, 57], "permit": [18, 49, 59, 63, 87, 97, 192], "formal": [18, 38, 56, 57, 65, 82, 87, 140, 176, 196, 199, 210, 213, 263], "littl": [18, 20, 38, 49, 67, 93, 97, 98, 123, 176, 200, 202, 206, 216, 218, 226, 241, 255], "n1": [18, 39, 48, 57, 58, 121, 138, 140, 144, 180, 219, 226, 251], "n2": [18, 39, 48, 57, 58, 138, 140, 144, 219, 226], "misunderstand": 18, "is_nonneg": [18, 20, 197], "intent": [18, 39, 56, 57, 99, 239], "meaning": [18, 32, 34, 38, 58], "alon": [18, 58, 85, 199, 222, 224, 231, 244, 277, 278], "tempt": [18, 20, 57, 97], "meet": [18, 58, 213], "criteria": [18, 57, 278], "noncommut": [18, 57, 80, 278], "finiteset": [18, 24, 37, 38, 214, 225, 226, 284], "s1": [18, 48, 56, 70, 73, 80, 107, 182, 193, 202, 209, 219, 244, 254], "s2": [18, 48, 49, 56, 70, 73, 107, 182, 193, 202, 209, 213, 219, 244, 254], "bool": [18, 37, 39, 53, 55, 57, 58, 60, 63, 84, 85, 87, 88, 90, 93, 97, 99, 116, 117, 155, 183, 186, 192, 201, 202, 204, 206, 207, 208, 213, 214, 218, 221, 226, 238, 239, 244, 245, 251, 254, 275], "plai": [18, 56, 123, 133, 219, 275, 277, 278], "role": [18, 63, 204], "connect": [18, 51, 58, 59, 72, 73, 93, 98, 100, 103, 112, 115, 123, 126, 132, 193, 194, 195, 204, 222, 226, 244, 251], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 57], "capitalis": 18, "4142135623731": [18, 25, 206, 224], "predict": [18, 171, 218, 244], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 31, 33, 34, 39, 41, 46, 48, 49, 51, 52, 57, 63, 64, 65, 72, 88, 93, 107, 157, 168, 169, 171, 195, 197, 201, 202, 206, 214, 232, 237], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 72], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 39, 48, 57, 278], "verifi": [18, 29, 37, 48, 54, 58, 59, 121, 193, 199, 205, 222, 224, 225, 227, 228, 283], "importantli": [18, 20, 203, 241], "reject": [18, 19, 97, 219, 247], "_eval_is_": 18, "is_algebra": [18, 57, 197], "interfer": [18, 206], "determinist": [18, 48, 84, 97, 199, 200], "reach": [18, 97, 107, 201, 202, 222], "claus": [18, 87], "flow": [18, 201], "inner": [18, 56, 82, 93, 154, 157, 158, 163, 165, 166, 169, 171, 181, 185, 195, 201, 208, 251, 268], "optimis": [18, 222], "stage": [18, 38, 56, 97, 213, 283], "briefli": [18, 194, 199], "managedproperti": [18, 57], "metaclass": [18, 57], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 28, 41, 46, 49, 52, 60, 64, 82, 87, 97, 201, 202, 216, 241, 244, 263], "randomis": [18, 234, 270], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 84, 204], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 57, 244], "precomput": [18, 62, 97, 245], "static": [18, 31, 39, 48, 49, 51, 57, 63, 70, 71, 72, 73, 90, 101, 123, 131, 192, 206, 212, 214, 226, 238], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 202], "_assumpt": [18, 57], "amongst": [18, 224], "indirectli": 18, "manifest": [18, 194], "jointli": 18, "fundament": [18, 20, 37, 40, 47, 75, 82, 84, 93, 176, 196, 201, 219, 222, 226, 279], "theoret": [18, 38, 40, 48, 58, 62, 200, 201, 216, 275], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 57, 206], "analogu": [19, 35, 56, 71, 196, 197], "piecewis": [19, 20, 39, 56, 62, 65, 84, 87, 100, 169, 206, 208, 209, 224, 225, 226, 245, 273], "nonetyp": [19, 39], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 35, 57, 63, 87, 107, 181, 195, 197, 199, 202], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 61, 97, 238], "carefulli": [19, 57, 181, 199, 208], "truth": [19, 32, 33, 34, 35, 36, 57, 88, 218], "bitwis": [19, 60, 87], "footnot": [19, 176, 278, 279, 282], "combinatori": [20, 41, 49, 56, 57, 64, 65, 202, 208, 218, 244, 246, 263, 283], "dig": [20, 39, 278], "th": [20, 31, 40, 48, 49, 55, 58, 59, 61, 62, 63, 65, 86, 87, 93, 97, 116, 197, 199, 201, 202, 208, 211, 216, 219, 222, 224, 226, 227, 232], "handler": [20, 32, 33, 34, 35, 36, 57, 64, 93], "spectrum": 20, "matter": [20, 37, 46, 49, 56, 57, 62, 82, 84, 136, 213, 244, 277, 278], "use_unicod": [20, 37, 38, 39, 61, 65, 84, 85, 93, 101, 107, 143, 186, 191, 193, 194, 205, 206, 207, 225, 226, 273, 277, 279, 282, 283, 284], "np": [20, 62, 80, 97, 121, 238, 245], "arang": [20, 238, 272], "arrai": [20, 22, 25, 39, 48, 49, 53, 54, 58, 65, 84, 88, 90, 93, 97, 98, 105, 138, 168, 192, 195, 197, 202, 206, 225, 226, 229, 231, 232, 233, 238, 239, 241, 245, 266, 279], "ultim": [20, 63, 176], "cosin": [20, 57, 63, 65, 72, 84, 112, 115, 181, 190, 202, 203, 209, 215, 226, 251, 283], "todai": [20, 193], "operatornam": [20, 62, 63, 65, 82, 84, 191, 194, 202, 206, 209, 214, 216, 224], "modern": [20, 39, 193, 200, 206], "recal": [20, 57, 93, 199, 201, 216, 275, 277, 278, 284], "redefin": [20, 49, 57, 133, 135, 194, 245], "antipattern": [20, 276], "stai": [20, 201], "trig": [20, 57, 84, 202, 206, 215, 218, 283], "wouldn": 20, "cheap": [20, 57, 97], "as_two_term": [20, 57], "split": [20, 39, 57, 58, 61, 82, 84, 99, 199, 201, 204, 205, 206, 224, 226, 232, 237, 244, 249, 278, 283], "hadn": 20, "wors": [20, 87, 218], "expand_trig": [20, 57, 272], "mid": [20, 40, 58, 61, 101, 214, 219], "troubl": [20, 65], "bigger": [20, 39, 57, 62, 216, 222, 283], "deduc": [20, 39, 82, 87, 216, 277], "disallow": [20, 57, 202, 207, 218, 240], "great": [20, 140, 203, 206, 219, 245], "simplest": [20, 38, 87, 93, 97, 98, 191, 192, 203, 207, 215, 218, 222, 273, 283], "\u03c0": [20, 61, 143, 206, 225, 273, 277, 283, 284], "as_independ": [20, 57, 225], "coeff": [20, 57, 59, 87, 138, 197, 201, 202, 212, 218, 222, 224, 232, 283], "apart": [20, 31, 48, 53, 57, 61, 63, 84, 187, 194, 197, 199, 202, 205, 208, 219, 225, 232, 256, 258, 278], "is_even": [20, 45, 48, 49], "nonreal": [20, 25, 224], "cosh": [20, 57, 63, 65, 76, 82, 203, 206, 207, 216, 218, 224, 279, 283], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 48, 241, 276, 283], "_eval_is_posit": 20, "as_add": [20, 57], "pi_": 20, "fuzzy_": 20, "deduct": [20, 39], "subtl": [20, 215], "nontrivi": [20, 48, 57, 97], "_eval_evalf": [20, 202], "prec": [20, 25, 57, 67, 73, 97, 105, 191, 197, 202, 203, 218, 224], "dp": [20, 39, 57, 60, 65, 97, 196, 197, 224, 240], "53": [20, 58, 60, 93, 140, 194, 196, 197], "459697694131860": 20, "hook": [20, 98, 206], "_eval_rewrit": [20, 57], "rewritten": [20, 57, 62, 63, 65, 84, 121, 168, 213, 218, 222, 224, 283], "caller": 20, "ve": [20, 123], "nonintegr": 20, "iff": [20, 35, 49, 58, 87, 93, 190, 193, 201, 216, 219, 237], "isint": 20, "xy": [20, 37, 38, 71, 93, 118, 190, 192, 193, 199, 206, 218, 225, 261, 278, 283], "happi": 20, "demand": [20, 30], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 59, 138, 196, 206, 207, 218, 225, 232, 251, 256], "expand_log": [20, 39, 57, 218], "_eval_expand_trig": 20, "sophist": [20, 98, 224], "x_1": [20, 40, 47, 48, 58, 62, 79, 93, 166, 194, 197, 199, 202, 208, 219, 225], "ldot": [20, 40, 47, 48, 56, 57, 58, 62, 65, 82, 97, 101, 176, 191, 193, 194, 197, 199, 201, 206, 209, 213, 216, 219, 224, 227, 283], "x_k": [20, 58, 199], "dy": [20, 39, 59, 74, 93, 100, 110, 138, 202, 206, 219, 222, 223, 273], "dz": [20, 100, 110, 216], "argumentindexerror": 20, "varion": 20, "middl": [20, 65, 73, 82, 93, 101, 151, 192, 216, 283], "iverson": 20, "printmethod": [20, 206], "latexprint": 20, "_latex": [20, 206], "_print": [20, 206], "_m": [20, 65], "_n": [20, 58, 62, 65, 84, 202, 216, 225], "arcversin": 20, "aversin": 20, "im": [20, 36, 57, 63, 82, 91, 193, 206, 207, 214, 222, 279], "sinh": [20, 37, 57, 61, 63, 65, 76, 82, 203, 206, 207, 216, 283], "expand_complex": [20, 57], "analog": [20, 50, 56, 58, 62, 136, 189, 190, 193, 194, 195, 199, 211, 227, 244], "vers": 20, "geometr": [20, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 93, 140, 190, 193, 200, 226, 279], "angl": [20, 31, 63, 65, 66, 67, 68, 70, 71, 72, 73, 103, 109, 115, 120, 121, 123, 124, 125, 126, 132, 135, 140, 143, 144, 145, 168, 176, 181, 189, 190, 191, 206, 215, 225, 251, 253, 256, 283], "horizont": [20, 27, 38, 67, 70, 72, 88, 103, 143, 192, 195, 206], "distanc": [20, 38, 41, 49, 67, 70, 71, 72, 73, 100, 101, 110, 111, 115, 125, 126, 140, 144, 174, 185, 187, 260], "rightmost": [20, 171], "scientificamerican": 20, "uniti": [20, 63, 65, 82, 166, 201], "secret": [20, 58], "teacher": 20, "taught": [20, 84], "nr": 20, "sake": [20, 62, 219], "simplic": [20, 216, 218, 222], "divisor": [20, 35, 48, 57, 58, 93, 97, 193, 194, 196, 197, 199, 200, 201, 202, 205], "hardwar": [20, 39], "regard": [20, 40, 58, 65, 85, 139, 171, 193, 194, 208, 224, 225], "c99codeprint": [20, 39, 206], "cxx11codeprint": [20, 206], "cfunction": 20, "e2": [20, 37, 57, 60, 67, 74, 84, 93, 97, 105, 121, 196, 201, 213, 222, 225, 226, 244], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 39, 206, 231, 239], "cxxcode": [20, 39, 206], "_ccode": [20, 206], "_y": [20, 23, 132, 136, 186, 189, 190], "_z": [20, 84, 132, 136, 189, 190, 226], "_cxxcode": [20, 206], "std": [20, 206, 226], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 222], "fragil": 20, "tend": [20, 30, 39, 57, 62, 199, 201, 211, 213, 216, 276, 283], "prone": [20, 39, 57], "move": [20, 48, 49, 57, 58, 71, 73, 100, 115, 123, 125, 131, 159, 185, 189, 190, 218, 227, 236, 258], "task": [21, 22, 28, 63, 131, 132, 138, 196, 201, 273, 280], "deeper": [21, 230, 278], "explor": [21, 133, 134, 192, 201, 241, 283], "diophantin": [22, 97, 199, 220, 263], "2z": [22, 26, 65, 225, 226], "4z": [22, 26, 225], "6z": [22, 26], "739085133215161": [22, 25, 26, 27, 224], "9y": 22, "3x": [22, 57, 99, 199, 225, 275], "cc": [22, 58, 73, 191, 194, 196, 202, 279], "4xy": [22, 187, 260], "8y": 22, "7y": [22, 219], "yield": [23, 24, 26, 37, 39, 48, 57, 58, 62, 65, 81, 82, 97, 100, 107, 113, 165, 191, 194, 199, 201, 202, 207, 208, 213, 214, 215, 218, 219, 224, 241, 244, 279], "linprog": 23, "as_set": [23, 87], "accomplish": [23, 84, 135, 138, 258], "exclud": [23, 27, 39, 56, 57, 84, 93, 113, 138, 194, 197, 199, 202, 212, 222, 224, 237, 240, 244], "rel_op": [23, 57], "relations_sort": 23, "append": [23, 48, 57, 58, 93, 101, 138, 166, 192, 197, 206, 224, 227, 239, 240, 244, 283], "x_y_reduc": 23, "insight": [23, 276], "x_reduc": 23, "y_reduc": 23, "solve_univariate_inequ": [23, 221, 225], "interv": [23, 24, 35, 37, 48, 57, 61, 63, 65, 66, 67, 70, 73, 82, 84, 87, 97, 157, 166, 197, 199, 201, 202, 209, 212, 214, 221, 225, 226, 284], "calculu": [23, 24, 57, 62, 84, 93, 138, 187, 215, 226, 257, 258, 259, 262, 263, 274, 276, 281], "reflect": [23, 27, 41, 45, 49, 57, 67, 68, 73, 86, 103, 140, 143, 144, 181], "rearrang": [24, 108, 116, 133, 134, 155, 222], "eqn": [24, 37, 225], "solutions_set": 24, "solution_set": 24, "256": [24, 39, 48, 97, 202, 206], "techniqu": [24, 40, 52, 82, 84, 206, 208, 218, 222, 225, 279], "solution_outside_2_3": 24, "critic": [24, 37, 144, 189, 201, 225], "minima": [24, 225], "critical_point": 24, "point1": [24, 182, 254], "point2": [24, 182, 254], "curvatur": [24, 140, 144], "solution_list": 24, "membership": [24, 55, 201, 214], "candid": [24, 57, 93, 97, 199, 218], "solution_set_arg": 24, "overli": 25, "float64": [25, 39, 98, 226], "fsolv": 25, "linalg": [25, 39], "findroot": [25, 65, 224], "overdetermin": [25, 224, 225], "toler": [25, 39, 57, 61, 197, 218, 224], "18466446988997098217": 25, "16840434497100886801e": 25, "tweak": [25, 206, 224], "closest": [25, 57, 70], "closer": [25, 123, 225, 278], "00000000000000": [25, 57, 61, 172, 206, 226], "bisect": [25, 97, 202, 224], "multidimension": [25, 200, 237], "19287309935246": [25, 224], "27844411169911": [25, 224], "192873099352460791205211": 25, "278444111699106966687122": 25, "root_scalar": 25, "lam_f": [25, 245], "3416277185114782": 25, "slightli": [25, 30, 39, 53, 97, 99, 123, 192, 193, 197, 199, 202, 206, 216, 218], "x_valu": 25, "12757857962640e": 25, "73908513321516": 25, "4877893607115270300540019e": 25, "6543612251060553497428174e": 25, "interrog": 26, "overconstrain": 26, "solvabl": [27, 48, 103, 219, 222, 225, 284], "abel": [27, 93], "ruffini": [27, 93], "theorem": [27, 45, 58, 65, 67, 73, 84, 88, 93, 97, 110, 111, 123, 171, 180, 189, 193, 196, 199, 213, 216, 219, 225], "groebnerbasi": [27, 194, 202, 205], "lambert": [27, 63, 84, 203], "decompos": [27, 48, 49, 55, 57, 59, 63, 68, 93, 97, 155, 164, 165, 167, 197, 202, 205, 226], "lack": [27, 39, 59, 61, 118, 206, 273], "crootof": [27, 57, 202, 222, 224], "765": 27, "352": 27, "181": 27, "08": [27, 123], "total": [27, 40, 46, 48, 57, 62, 73, 86, 87, 88, 90, 123, 125, 133, 140, 144, 150, 155, 168, 177, 191, 197, 199, 202, 215, 218, 222, 230, 232, 261], "scroll": 27, "56": [27, 60, 84, 97, 202], "1307": 27, "432": [27, 70, 201], "434607": 27, "144": [27, 62, 84, 191], "0509758447494279": 27, "313552108895239": 27, "14751999969868": 27, "estim": [27, 37, 56, 57, 61, 82, 273], "preserv": [27, 38, 39, 48, 57, 93, 169, 197, 202, 207, 208, 218], "77245385090552": 27, "4142135623730951": 27, "varieti": [27, 39, 40, 49, 57, 98, 101, 136, 193, 200, 202, 226, 244], "risk": 27, "parse_latex": [27, 99], "central": [28, 48, 54, 65, 67, 73, 112, 118, 136, 192, 201, 202, 219, 226], "pypi": 29, "continuum": [29, 268], "qtconsol": [29, 282], "nicer": [29, 57, 129], "setupegg": 29, "enthought": 29, "canopi": 29, "activepython": 29, "spack": 29, "freshli": 29, "starter": 29, "sy": [29, 39, 59, 121, 138, 206, 237, 248, 257, 275], "wherev": [29, 121, 218, 225, 255], "visit": [29, 41, 48, 57, 62, 280], "chat": 29, "gitter": [29, 279], "excel": [29, 61, 201, 281], "ticket": 29, "export": [30, 206], "latin": 30, "clunki": 30, "collid": [30, 232], "win": 30, "throwawai": 30, "surviv": 30, "foo": [30, 37, 39, 57, 166, 186, 244, 247], "report": [30, 37, 48, 57, 70, 88, 97, 203, 214, 225, 237, 279, 284], "stick": 30, "_clash1": [30, 57], "_clash2": [30, 57], "multi": [30, 57, 58, 122, 131, 138, 151, 155, 165, 192, 206, 225, 268], "_clash": [30, 57], "union": [30, 35, 37, 39, 46, 48, 55, 87, 99, 193, 201, 206, 212, 213, 214, 221, 225, 226, 244], "sympif": [30, 57], "real_field": 31, "instanti": [31, 38, 39, 49, 57, 65, 70, 72, 73, 90, 93, 161, 169, 181, 192, 193, 197, 201, 226, 251, 255], "q1": [31, 93, 100, 111, 121, 123, 124, 125, 126, 128, 129, 130, 133, 134, 135, 139, 180, 181, 183, 185, 186, 189, 190, 196, 251, 253], "q2": [31, 100, 111, 121, 123, 124, 125, 126, 128, 129, 130, 133, 134, 139, 180, 181, 183, 185, 186, 189, 190, 196, 251, 253], "r1": [31, 67, 70, 86, 100, 101, 144, 181, 187, 202, 251], "euclideanspac": 31, "realnormedalgebra": 31, "r2": [31, 59, 70, 86, 88, 100, 101, 144, 181, 202, 206, 218, 251], "q3": [31, 111, 123, 124, 126, 128, 129, 130, 133, 181, 183, 185, 190, 251, 253], "bi": [31, 57, 63, 65, 84, 190, 213, 222], "cj": 31, "dk": [31, 100, 201], "atan2": [31, 36, 59, 63, 145, 206, 251], "atan": [31, 36, 59, 61, 63, 68, 73, 81, 84, 125, 139, 140, 203, 206, 208], "arc_coplanar": 31, "arc": [31, 63, 283], "coplanar": [31, 71, 190], "ax": [31, 58, 61, 67, 70, 82, 89, 93, 100, 105, 115, 143, 168, 181, 190, 191, 192, 195, 203, 219, 222, 225, 227, 228, 231, 251, 253, 255, 258, 260, 283], "parallel": [31, 67, 70, 71, 73, 84, 104, 107, 110, 189, 190, 199, 257, 261], "vector_coplanar": 31, "is_pur": 31, "mathbf": [31, 90, 116, 131, 133, 134, 136, 176, 180, 181, 186, 187, 189, 190, 206, 216, 227, 255, 256, 258, 260, 261], "versor": 31, "0i": 31, "0j": [31, 196], "0k": 31, "vector_part": 31, "from_axis_angl": 31, "radian": [31, 63, 66, 67, 68, 70, 71, 72, 93, 105, 121, 144, 145, 181], "from_rotation_matrix": 31, "orthogon": [31, 35, 72, 86, 93, 169, 181, 190, 251, 253], "det": [31, 93, 94, 138, 190, 195, 279], "index_vector": 31, "mod": [31, 58, 63, 87, 93, 94, 97, 167, 193, 195, 196, 197, 199, 201, 202, 206, 208, 216, 219], "magnitud": [31, 39, 56, 57, 61, 65, 98, 100, 101, 103, 105, 125, 138, 169, 178, 181, 187, 190, 192, 251, 258, 260], "norm": [31, 93, 169, 181, 197, 199, 201, 202], "scalar_part": 31, "is_zero_quaternion": 31, "mensor": 31, "60": [31, 43, 48, 50, 56, 57, 62, 65, 84, 93, 97, 100, 101, 205, 206, 219, 222, 244], "pth": 31, "668": 31, "224": [31, 174, 200], "336": 31, "448": 31, "pow_cos_sin": 31, "900": 31, "1800": [31, 58], "2700": [31, 100], "3600": [31, 62], "rotate_point": 31, "coordin": [31, 39, 58, 59, 63, 65, 66, 68, 72, 74, 90, 93, 100, 103, 105, 109, 115, 116, 117, 120, 121, 122, 123, 124, 126, 128, 131, 132, 133, 134, 137, 139, 147, 149, 168, 169, 172, 180, 181, 182, 183, 185, 187, 190, 193, 201, 202, 214, 222, 251, 253, 254, 257, 259, 261, 266, 268], "to_axis_angl": 31, "to_rotation_matrix": 31, "assumptionkei": 32, "proposit": [32, 34, 87], "is_tru": [32, 34, 35], "assumptionscontext": [32, 33, 34], "global_assumpt": [32, 33, 34], "discern": [32, 34], "refin": [32, 34, 57, 88, 193, 197, 201, 202, 218, 239, 263], "progress": [32, 34, 97, 239], "inherit": [32, 57, 64, 87, 90, 91, 115, 160, 169, 191, 206, 226, 231, 239, 240], "askhandl": 32, "mere": [33, 34, 39, 61, 166], "thin": [33, 93, 127, 140], "undefinedpred": [33, 34], "sexi": [33, 34], "sexyprimepred": [33, 34], "sexyprim": [33, 34], "int1": [33, 34], "int2": [33, 34], "assump": [33, 34], "r3": [33, 86, 100, 101, 218], "predicate_": [33, 34], "mathematical_log": [33, 34], "r4": [33, 86, 100], "sexy_prim": [33, 34], "resolut": [33, 34, 219], "askpredicatehandl": [33, 34], "r5": [34, 218], "r6": 34, "notabl": [34, 39, 60, 65, 82, 98, 196], "truth_maintenance_system": 34, "istruepred": 35, "gt": [35, 39, 57, 226, 244], "istruehandl": 35, "commutativepred": 35, "commutativehandl": 35, "finitepred": 35, "nor": [35, 37, 57, 87, 97, 145, 192, 202, 213, 215, 222, 232, 251], "nan": [35, 36, 57, 63, 65, 113, 218, 226, 273], "finitehandl": 35, "r7": 35, "infinitepred": 35, "infinitehandl": 35, "symmetricpred": 35, "symmetr": [35, 36, 40, 45, 48, 49, 53, 73, 88, 89, 90, 93, 97, 180, 191, 197, 199, 202, 205, 214, 216, 232, 244], "transpos": [35, 38, 88, 90, 93, 107, 138, 154, 181, 190, 195, 201, 219, 227, 232, 233, 279], "diagon": [35, 62, 88, 89, 90, 93, 96, 120, 143, 195, 228], "symmetrichandl": 35, "r8": 35, "symmetric_matrix": 35, "invertiblepred": 35, "fullrank": [35, 39], "invertiblehandl": 35, "r9": 35, "invertible_matrix": 35, "orthogonalpred": 35, "tm": [35, 144], "mm": [35, 38, 97, 116, 123, 128, 129, 169, 195], "orthogonalhandl": 35, "r10": 35, "orthogonal_matrix": 35, "unitarypred": 35, "unitari": [35, 84, 97, 155, 160, 191], "unitaryhandl": 35, "r11": 35, "unitary_matrix": 35, "positivedefinitepred": 35, "tmz": 35, "column": [35, 38, 39, 40, 85, 87, 88, 90, 93, 94, 96, 107, 116, 120, 123, 136, 166, 173, 181, 186, 191, 195, 201, 206, 222, 225, 231, 251], "positive_definit": 35, "positivedefinitehandl": 35, "r12": 35, "definite_matrix": 35, "uppertriangularpred": 35, "triangular": [35, 88, 89, 93, 195, 201, 224, 226, 261], "m_": [35, 134, 191, 199], "ij": [35, 171, 176, 191, 226], "zeromatrix": [35, 90], "upper_triangular": [35, 88], "uppertriangularhandl": 35, "r13": 35, "uppertriangularmatrix": 35, "lowertriangularpred": 35, "lower_triangular": [35, 88], "lowertriangularhandl": 35, "r14": 35, "lowertriangularmatrix": 35, "diagonalpred": 35, "diagonalhandl": 35, "r15": 35, "diagonal_matrix": 35, "fullrankpred": 35, "rank": [35, 39, 40, 41, 46, 48, 49, 51, 52, 53, 72, 86, 93, 94, 181, 183, 193, 195, 197, 199, 201, 227, 231, 232, 279], "row": [35, 38, 39, 40, 46, 49, 57, 62, 88, 89, 90, 93, 94, 96, 97, 107, 120, 121, 123, 136, 138, 139, 166, 181, 190, 195, 201, 206, 216, 225, 226, 231, 245, 251, 253], "linearli": [35, 39, 65, 81, 93, 199, 222, 224, 232], "fullrankhandl": 35, "squarepred": 35, "squarehandl": 35, "r16": 35, "square_matrix": 35, "integerelementspred": 35, "integer_el": 35, "integerelementshandl": 35, "realelementspred": 35, "real_el": 35, "realelementshandl": 35, "complexelementspred": 35, "complex_el": 35, "complexelementshandl": 35, "singularpred": 35, "singular": [35, 39, 49, 57, 61, 63, 64, 65, 79, 80, 82, 84, 93, 100, 102, 135, 181, 193, 200, 213, 222, 225, 251, 268, 273], "singularhandl": 35, "fore": 35, "r17": 35, "singularmatrix": 35, "normalpred": 35, "normalhandl": 35, "r18": 35, "normal_matrix": 35, "triangularpred": 35, "triangularhandl": 35, "r19": 35, "triangular_matrix": 35, "unittriangularpred": 35, "unit_triangular": 35, "unittriangularhandl": 35, "evenpred": 35, "evenhandl": 35, "oddpred": 35, "oddhandl": 35, "primehandl": 35, "subject": [35, 67, 73, 101, 111, 139, 201], "compositepred": 35, "compositehandl": 35, "positivepred": 35, "positivehandl": 35, "negativepred": 35, "negativehandl": 35, "zeropred": 35, "zerohandl": 35, "nonzeropred": 35, "nonzerohandl": 35, "nonpositivepred": 35, "nonpositivehandl": 35, "nonnegativepred": 35, "nonnegativehandl": 35, "integerpred": 35, "integerhandl": 35, "r20": 35, "rationalpred": 35, "rationalhandl": 35, "r21": 35, "irrationalpred": 35, "ratio": [35, 47, 48, 56, 57, 61, 62, 65, 67, 70, 71, 72, 73, 89, 97, 107, 144, 176, 206, 215, 218, 224], "irrationalhandl": 35, "r22": 35, "realpred": 35, "disjoint": [35, 38, 46, 49, 202, 214, 244], "realhandl": 35, "r23": 35, "extendedrealpred": 35, "extendedrealhandl": 35, "hermitianpred": 35, "hermitianhandl": 35, "r24": 35, "hermitianoper": [35, 160], "complexpred": 35, "complexhandl": 35, "r25": 35, "imaginarypred": 35, "imaginaryhandl": 35, "r26": 35, "antihermitianpred": 35, "antihermitianhandl": 35, "r27": 35, "algebraicpred": 35, "askalgebraicpredicatehandl": 35, "r28": 35, "algebraichandl": 35, "transcendentalpred": 35, "transcedent": 35, "refine_pow": 36, "refine_ab": 36, "refine_arg": 36, "refine_atan2": 36, "refine_im": 36, "refine_matrixel": 36, "refine_r": 36, "refine_sign": 36, "lagrang": [37, 57, 114, 115, 127, 131, 202, 219, 268], "lagrangian": [37, 116, 118, 125, 130, 134, 135], "euler_equ": 37, "r29": 37, "93lagrange_equ": 37, "decreas": [37, 39, 49, 199], "monoton": [37, 39, 74], "is_decreas": 37, "lopen": [37, 57, 214, 221, 226], "ropen": [37, 63, 214, 226], "is_increas": 37, "72": [37, 57, 70, 93, 97, 100, 191, 205], "is_monoton": 37, "is_strictly_decreas": 37, "is_strictly_increas": 37, "monotonicity_help": 37, "held": [37, 58, 135, 230, 283], "r30": 37, "mathematical_singular": 37, "interpol": [37, 62, 66, 138, 199, 202], "finite_diff_weight": [37, 57, 273], "apply_finite_diff": [37, 57, 273], "differentiate_finit": [37, 57, 273], "finite_diff": [37, 57], "x_list": [37, 273], "y_list": [37, 273], "cube": [37, 39, 41, 48, 50, 63, 84, 199, 200, 219, 225, 261], "xlist": 37, "55271367880050e": 37, "indexedbas": [37, 39, 56, 57, 206, 224, 230, 231, 238], "idx": [37, 39, 206, 230, 231, 238], "zip": [37, 47, 58, 87, 97, 202, 212, 219, 222, 241, 244], "region": [37, 65, 74, 84, 192, 214, 222, 225, 226, 251, 254, 261], "bewar": [37, 65], "phenomenon": [37, 176, 199, 209, 278], "90": [37, 48, 55, 65, 88, 93, 99, 100, 103, 111, 121, 139, 206, 208, 218, 226, 239], "finitediff": 37, "wrt": [37, 39, 57, 59, 65, 74, 93, 121, 138, 181, 182, 199, 202, 251, 253, 254, 258], "len": [37, 45, 46, 47, 48, 49, 53, 55, 57, 58, 62, 65, 72, 82, 87, 125, 140, 144, 155, 165, 202, 218, 222, 231, 244], "nearest": [37, 201], "furthest": [37, 58], "sublist": [37, 53, 58, 84, 168, 273], "fd": [37, 39, 171], "0th": [37, 49, 58, 65], "1st": [37, 49, 97, 107, 222, 223, 247, 273], "classic": [37, 63, 65, 93, 157, 173, 181, 190, 193, 268], "forward": [37, 39, 88, 107, 123, 131, 164, 189, 218, 237], "pai": 37, "attent": [37, 48, 63], "gridpoint": 37, "plan": [37, 111, 197, 282], "mycoeff": 37, "3rd": [37, 49, 63, 97, 138, 202, 224, 227, 244], "2nd": [37, 49, 58, 97, 107, 138, 222, 227, 244], "cost": [37, 39, 97, 125, 225, 277], "poorer": 37, "grand": 37, "r31": 37, "51": [37, 93, 97], "184": [37, 222], "1988": [37, 150, 168, 199, 200], "699": 37, "706": [37, 93], "1090": [37, 202], "s0025": [37, 97], "5718": [37, 97], "0935077": 37, "continuous_domain": [37, 221], "tan": [37, 57, 62, 63, 84, 99, 113, 128, 129, 130, 135, 203, 205, 206, 213, 215, 222, 225, 283], "function_rang": 37, "is_convex": [37, 73], "sym": [37, 47, 48, 53, 57, 62, 181, 206, 209, 214, 218, 219, 224, 226, 232, 244, 283], "convex": [37, 73, 74, 84], "unspecifi": [37, 57, 72, 273], "multivari": [37, 57, 65, 193, 194, 196, 197, 198, 200, 202, 203, 213, 218, 224, 225, 226, 283], "concav": [37, 140], "r32": 37, "convex_funct": 37, "r33": 37, "ifp": 37, "illinoi": 37, "edu": [37, 41, 48, 49, 58, 60, 62, 84, 93, 97, 200, 205, 215, 218, 219, 222, 226, 251], "angelia": 37, "l3_convfunc": 37, "r34": 37, "logarithmically_convex_funct": 37, "r35": 37, "logarithmically_concave_funct": 37, "r36": 37, "concave_funct": 37, "lcim": 37, "mixtur": [37, 39, 74, 193, 239], "incommensur": 37, "not_empty_in": [37, 225], "finset_intersect": 37, "finite_set": [37, 214], "tracker": [37, 214, 225, 279], "aperiod": 37, "smallest": [37, 51, 63, 70, 72, 79, 87, 93, 97, 168, 181, 197, 242, 244], "verif": [37, 195, 224], "reliabl": [37, 57, 222, 242, 273], "henc": [37, 39, 47, 48, 57, 59, 63, 65, 69, 82, 85, 87, 97, 103, 187, 192, 193, 194, 199, 206, 216, 219, 223, 225, 237, 241, 256, 257, 258, 278, 283], "stationary_point": 37, "stationari": [37, 226], "tikz": 38, "joyofcat": 38, "adamek": 38, "herrlich": 38, "strecker": 38, "joi": 38, "cat": [38, 180], "book": [38, 48, 58, 63, 116, 121, 124, 132, 136, 137, 156, 200, 205, 206, 276], "katmat": 38, "uni": [38, 84, 244], "bremen": 38, "de": [38, 58, 62, 97, 176, 191, 192, 203, 208, 219, 222, 244], "acc": [38, 138, 185, 189], "embryon": 38, "morphism": [38, 193], "codomain": [38, 193, 201], "arrow": [38, 86, 100, 192, 206], "namedmorph": 38, "prohibit": [38, 49, 50, 181], "identitymorph": 38, "compositemorph": 38, "compos": [38, 57, 58, 125, 135, 173, 175, 176, 189, 193, 197, 201, 202, 203, 206, 208, 218], "circ": [38, 57, 68, 74, 82, 90], "compon": [38, 39, 53, 57, 59, 72, 84, 90, 93, 108, 115, 118, 131, 132, 136, 143, 168, 173, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 202, 204, 226, 228, 231, 232, 241, 244, 251, 254, 257, 258], "new_nam": 38, "forget": [38, 283], "id_a": 38, "id_b": 38, "commutative_diagram": 38, "quadrupl": [38, 202], "mbox": 38, "hom": 38, "id": [38, 53, 63], "rightarrow": [38, 49, 53, 58, 62, 63, 65, 79, 80, 82, 84, 87, 88, 97, 192, 201, 213, 225, 244, 273], "monoid": 38, "pare1970": 38, "accompani": 38, "premis": 38, "conclus": [38, 57], "carri": [38, 39, 57, 163, 169, 176, 193, 196, 199, 201, 203, 204, 245], "premises_kei": 38, "et": [38, 84, 150, 199, 202, 203, 215, 218], "pareigi": 38, "functor": 38, "1970": [38, 93], "is_subdiagram": 38, "subdiagram": 38, "d1": [38, 53, 181, 193, 213, 226, 251], "subdiagram_from_object": 38, "veryuniqu": 38, "diagram_draw": 38, "diagramgrid": 38, "analys": [38, 105, 107, 138, 226], "drawn": [38, 48, 86, 192, 196, 204], "moprhism": 38, "strive": 38, "nevertheless": 38, "laid": [38, 121, 168], "width": [38, 39, 85, 186, 192, 202, 206, 237], "height": [38, 39, 73, 90, 140, 192, 193, 206, 213, 261], "emploi": [38, 56, 61, 84, 97, 202, 205, 222, 226], "lai": 38, "layout": 38, "sequenti": [38, 41, 58, 63, 251, 253], "test_draw": 38, "five": [38, 46, 82, 103, 206, 219], "lemma": [38, 48, 82, 194], "fivelemma": 38, "five_lemma": 38, "arrowstringdescript": 38, "curving_amount": 38, "looping_start": 38, "looping_end": 38, "horizontal_direct": 38, "vertical_direct": 38, "label_posit": 38, "pic": 38, "princip": [38, 58, 63, 65, 82, 84, 94, 109, 123, 144, 193, 194, 195, 196, 197, 199, 201, 202, 203], "offset": [38, 39, 57, 62, 65, 231], "cell": 38, "vertic": [38, 41, 50, 51, 67, 68, 70, 72, 73, 74, 84, 86, 88, 93, 101, 120, 126, 143, 151, 191, 192, 195, 201, 206, 214, 244, 261], "disregard": 38, "unexplain": 38, "astr": 38, "dr": [38, 59, 206, 222], "12mm": 38, "loop": [38, 39, 97, 107, 124, 181, 192, 203, 206, 222, 241, 244, 278], "correspondingli": 38, "label_displac": 38, "arrow_styl": 38, "dash": 38, "xypicdiagramdraw": 38, "formatt": 38, "utilis": 38, "xypic": 38, "drawer": 38, "xymatrix": 38, "ld": 38, "arrow_formatt": 38, "therebi": 38, "default_arrow_formatt": 38, "farther": 38, "centr": [38, 54, 192], "default_formatt": 38, "45": [38, 57, 62, 73, 93, 97, 103, 202, 203, 219], "_3mm": 38, "default_curving_amount": 38, "cm": [38, 138, 226], "_1cm": 38, "default_curving_step": 38, "h1": [38, 118], "1cm": 38, "rr": [38, 57, 75, 195, 196, 202, 203], "h_": [38, 48, 53, 62, 65, 84], "_2cm": 38, "mask": [38, 206], "diagram_format": 38, "proceed": [38, 40, 82, 84, 137, 200, 216], "xypic_draw_diagram": 38, "shortcut": [38, 57, 89, 190, 206, 214, 218, 283], "insert": [38, 40, 88, 99, 100, 166, 171, 206, 226, 247], "preview_diagram": 38, "png": [38, 85, 93, 100, 101, 105, 186, 192, 206, 209], "brief": [39, 225, 237, 260], "fab": [39, 206], "cse_main": [39, 207, 218], "cse": [39, 98, 111, 160, 207, 218, 239, 245], "meat": 39, "lightweight": [39, 201, 277], "pycod": [39, 206], "lambdarepr": [39, 206, 245], "aesara_funct": [39, 98, 206], "float80": [39, 206], "assign_to": [39, 206], "type_alias": [39, 206], "0l": [39, 206], "powl": [39, 206], "c99": [39, 206, 239], "expm1": [39, 206], "ternari": [39, 57, 206, 219], "thrown": [39, 206], "fcode": [39, 206], "contract": [39, 59, 108, 171, 206, 215, 228, 230, 231, 232, 233], "len_i": [39, 206], "mat_1": 39, "mat_2": 39, "jscode": [39, 206], "user_funct": [39, 206], "argument_test": [39, 206], "cfunction_str": [39, 206], "octav": [39, 138, 239], "custom_funct": [39, 206], "existing_octave_fcn": [39, 206], "is_matrix": [39, 206], "my_mat_fcn": [39, 206], "my_fcn": [39, 206], "mat": [39, 90, 140, 165, 206], "octave_cod": [39, 206], "summat": [39, 56, 57, 61, 62, 65, 171, 200, 202, 206, 209, 218, 226, 227, 230, 231, 232, 238], "mathematica_cod": [39, 206], "g1": [39, 42, 47, 48, 82, 93, 107], "g2": [39, 42, 47, 48, 82, 86, 93, 107], "gamma_1": [39, 110], "gamma_2": [39, 110], "\u03b3\u2081": 39, "\u03b3\u2082": 39, "\u03b2": [39, 191], "h_i": [39, 53], "c89": [39, 206, 239], "julia_cod": [39, 206], "rust_cod": [39, 206], "powi": [39, 206], "make_routin": [39, 239], "f95": [39, 238, 239], "matlab": [39, 111, 138, 239, 279], "breadth": [39, 57, 226], "c_name": [39, 239], "c_code": [39, 239], "h_name": [39, 239], "c_header": [39, 239], "volume_result": 39, "ifndef": [39, 239], "project__test__h": [39, 239], "endif": [39, 239], "preprocessor": [39, 207, 218, 239], "global_var": [39, 239], "insensit": [39, 93, 138, 206, 237, 239], "argument_sequ": [39, 239], "routin": [39, 46, 56, 57, 58, 59, 82, 87, 88, 93, 97, 143, 171, 195, 199, 202, 205, 206, 207, 218, 219, 222, 223, 224, 225, 238, 244, 258], "name_expr": [39, 239], "to_fil": [39, 239], "f_name": [39, 239], "f_code": [39, 239], "choic": [39, 49, 62, 65, 82, 84, 98, 135, 167, 176, 180, 181, 189, 197, 199, 202, 206, 218, 222, 244, 277], "hydrogen": [39, 268], "r_nl": [39, 109, 172], "my_routin": 39, "result_var": [39, 239], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 39, "__________": [39, 194], "\u212f": [39, 143, 191, 206, 273, 277, 279, 283, 284], "assoc_laguerr": [39, 65, 206], "fcn": [39, 239], "result_5397460570204848505": [39, 239], "out_8598435338387848786": [39, 239], "examin": [39, 58, 160, 237, 239, 283], "inputargu": [39, 239], "outputargu": [39, 239], "inoutargu": [39, 239], "disk": [39, 58, 214, 225, 245], "binary_funct": [39, 98, 238], "tensor": [39, 44, 59, 93, 108, 118, 136, 150, 156, 157, 158, 168, 171, 180, 181, 206, 227, 228, 230, 231, 238, 245, 255, 256, 262, 263, 266, 268], "binary_func": [39, 238], "servic": [39, 226], "tempdir": [39, 238], "qho_1d": [39, 147], "psi_n": [39, 147], "y_": [39, 65, 82, 109, 191], "qho": 39, "tmp": 39, "reveal": [39, 97, 225, 278], "subroutin": [39, 48, 167, 199], "autofunc": 39, "dimens": [39, 41, 58, 59, 65, 66, 68, 70, 71, 72, 74, 86, 88, 90, 93, 96, 100, 108, 125, 145, 155, 157, 160, 165, 174, 175, 178, 179, 181, 192, 195, 206, 219, 222, 224, 226, 227, 231, 232, 239, 251, 254, 256, 268], "hbar": [39, 147, 153, 166, 172, 176, 178, 191], "05457162d": 39, "14159265358979d0": 39, "0d0": [39, 206], "74126166983329d": 39, "33": [39, 57, 60, 93, 136, 144, 199, 203, 206, 226], "verbos": [39, 57, 88, 97, 206, 237, 238, 282], "mute": [39, 238], "backend": [39, 85, 98, 99, 105, 124, 126, 132, 186, 203, 238, 245], "auxiliari": [39, 84, 116, 121, 133, 222, 238], "function_nam": [39, 238], "sympy_express": [39, 238], "mandatori": [39, 206, 238], "illustr": [39, 93, 122, 125, 176, 196, 209, 213], "psi_nl": 39, "766": 39, "incur": [39, 98], "get_numpy_arrai": 39, "tight": 39, "temp": [39, 123], "alloc": [39, 63], "fuse": 39, "wise": [39, 40, 63, 88, 195, 199, 206, 212, 238], "unabl": [39, 70, 74, 99, 224, 251, 272, 273], "fortun": [39, 98, 125, 202, 203], "reconnect": 39, "autom": [39, 63, 98, 215, 238, 277], "ideologi": [39, 225], "fashion": [39, 57, 63, 90, 123, 133, 134, 136, 190, 193, 244], "broadcast": [39, 98, 206, 231, 238], "outperform": 39, "jensen": 39, "quantit": [39, 173], "leverag": [39, 98, 206], "ufunc": [39, 98, 238, 245], "fn_numpi": 39, "fn_fortran": 39, "linspac": [39, 80, 98, 121, 138], "xx": [39, 93, 118, 190, 244], "21306132": 39, "98101184": 39, "44626032": 39, "timeit": [39, 203], "10000": [39, 61, 97, 98, 100, 224], "18891601900395472": 39, "004707066000264604": 39, "facil": 39, "comparison": [39, 56, 57, 87, 93, 121, 193, 201, 205, 224, 237, 244], "thereof": [39, 57, 193, 199, 201], "optims_c99": 39, "log1p": [39, 206], "expm1_opt": 39, "log1p_opt": 39, "exp2_opt": 39, "log2_opt": 39, "log2const_opt": 39, "funcminusoneoptim": 39, "func_m_1": 39, "opportunist": 39, "replaceoptim": 39, "catastroph": 39, "replace_in_add": 39, "cost_funct": 39, "prioriti": [39, 80, 111, 121, 190, 245], "__call__": [39, 49, 57, 201], "exp2": [39, 206], "create_expand_pow_optim": 39, "base_req": 39, "is_symbol": [39, 88], "expand_opt": 39, "opt2": 39, "is_funct": 39, "log2": [39, 65, 206], "matin_opt": 39, "matinv_opt": 39, "matrixsolv": [39, 206], "matrix_nod": 39, "numpyprint": 39, "doprint": [39, 206], "seriesapprox": 39, "reltol": 39, "max_ord": 39, "n_point_check": 39, "threshold": [39, 97], "largest": [39, 49, 51, 57, 63, 65, 93, 96, 97, 151, 193, 197, 224, 244], "series_approx2": 39, "1e": [39, 57, 61, 93, 105, 140, 202, 224], "series_approx3": 39, "series_approx8": 39, "sumapprox": 39, "neglect": 39, "2000": [39, 43, 84, 97, 200], "sum_approx3": 39, "sum_approx2": 39, "sum_approx1": 39, "token": [39, 82, 85, 99], "diagram": [39, 46, 86, 100, 124, 125, 126, 131, 151, 231, 256, 278], "codegenast": 39, "assignmentbas": 39, "augmentedassign": 39, "addaugmentedassign": 39, "subaugmentedassign": 39, "mulaugmentedassign": 39, "divaugmentedassign": 39, "modaugmentedassign": 39, "codeblock": [39, 99], "quotedstr": 39, "intbasetyp": 39, "_sizedinttyp": 39, "signedinttyp": 39, "unsignedinttyp": 39, "floatbasetyp": 39, "floattyp": 39, "complexbasetyp": 39, "complextyp": 39, "pointer": [39, 239, 240], "functionprototyp": 39, "functiondefinit": [39, 99], "stream": [39, 58, 207, 218, 244], "functioncal": 39, "breaktoken": 39, "continuetoken": 39, "nonetoken": 39, "float32": [39, 98, 99, 245], "codeprint": 39, "complex_": 39, "bool_": 39, "intc": [39, 99], "intp": 39, "unsign": [39, 62, 218], "int8": 39, "int16": 39, "int32": 39, "int64": [39, 226], "uint8": 39, "uint16": 39, "uint32": 39, "uint64": 39, "x86": 39, "amd64": 39, "complex64": 39, "complex128": 39, "newton": [39, 65, 131, 174, 178, 199, 203], "aug_assign": 39, "tol": [39, 57, 197], "val": [39, 57, 69, 197, 201, 245], "whl": 39, "py_str": 39, "inf": [39, 49, 57, 93, 197, 202, 214, 222, 226], "exec": [39, 57, 85, 245], "1121416371": 39, "909672693737": 39, "867263818209": 39, "865477135298": 39, "865474033111": 39, "1g": 39, "3e": 39, "2003": [39, 191, 200, 206, 219], "source_format": [39, 206], "op": [39, 57, 93, 160, 171, 185, 189, 215, 244, 245], "parametr": [39, 65, 66, 70, 93, 192, 219, 225, 251, 254, 261], "volatil": 39, "binop": 39, "exit": [39, 97, 237], "premad": 39, "break_": 39, "lift": [39, 53, 63, 65, 82, 197, 199, 202], "left_hand_sid": 39, "topological_sort": [39, 244], "postprocess": [39, 202, 207, 218], "topolog": [39, 57, 59, 195, 244], "continue_": 39, "untyp": 39, "compliant": 39, "ok": [39, 49, 206, 222], "elem": [39, 48, 193], "ijk": [39, 231], "stride": [39, 231], "lmn": 39, "cast_nocheck": 39, "alia": [39, 50, 57, 67, 73, 88, 89, 91, 95, 155, 164, 171, 193, 196, 197, 201, 205, 214, 237, 247, 283], "nbit": 39, "storag": [39, 57, 93, 165, 191, 199], "nmant": 39, "mantissa": 39, "nexp": 39, "half_precis": 39, "f16": 39, "65504": 39, "tini": [39, 57], "ep": [39, 48, 56, 197, 201, 202], "decimal_dig": 39, "cast_check": 39, "1e5": 39, "cast": [39, 90, 275], "subnorm": [39, 48], "idempot": 39, "loos": [39, 57], "overflow": [39, 241], "max_expon": 39, "min_expon": 39, "for_i": 39, "for_ji": 39, "for_kji": 39, "function_arg": [39, 237], "fcall": 39, "bar": [39, 65, 122, 131, 160, 166, 247, 268], "baz": 39, "return_typ": 39, "fp": [39, 40, 57, 202, 208], "from_functionprototyp": 39, "prototyp": [39, 98, 239], "value_const": 39, "pointer_const": 39, "attr_param": 39, "looking_for": 39, "as_declar": 39, "formatstr": 39, "5g": 39, "stdout": [39, 237], "stderr": 39, "oppos": [39, 245, 273], "_field": 39, "_construct_": 39, "not_in_arg": 39, "float16": 39, "inttyp": 39, "super": [39, 65, 197, 206, 251, 253], "from_expr": [39, 202], "42": [39, 46, 57, 60, 62, 70, 71, 73, 88, 89, 91, 93, 95, 97, 197, 202, 219, 237], "v6": 39, "123456": [39, 57, 97], "v10": 39, "12345": [39, 61], "67894": 39, "boost_mp50": 39, "boost": 39, "multiprecis": [39, 196], "cpp_dec_float_50": 39, "r37": 39, "rtol": 39, "atol": 39, "precision_target": 39, "v18": 39, "123456789012345646": 39, "123456789012345649": 39, "Will": [39, 93, 99, 201, 206, 237], "decl1": 39, "decl2": 39, "alt": 39, "secondarili": [39, 202], "mathcin": 39, "cbrt": [39, 63, 206], "minu": [39, 56, 57, 187, 199, 206, 258], "0e": [39, 57], "fma": [39, 206], "cpu": [39, 98, 138], "hypot": [39, 206], "hypotenus": [39, 73], "log10": [39, 206], "ten": [39, 98], "plu": [39, 56, 93, 99, 138, 151, 202, 206, 216, 245], "famili": [39, 41, 75, 84, 194], "commaoper": 39, "goto": 39, "preincrement": 39, "postdecr": 39, "decrement": [39, 241], "postincr": 39, "increment": [39, 48, 49, 50, 56, 73, 97, 226], "predecr": 39, "alignof": 39, "sizeof": 39, "struct": [39, 191], "dsign": 39, "arrayconstructor": 39, "ac": [39, 49, 69, 103, 118, 136, 148, 219, 226, 244, 247], "95": [39, 55, 97, 199, 206, 222, 224, 239], "do1": 39, "1d0": 39, "do2": 39, "extent": 39, "intent_out": 39, "dim": [39, 59, 72, 98, 173, 179, 206, 229, 232, 266], "arr": 39, "fortranreturn": 39, "aid": [39, 123], "implieddoloop": 39, "idl": 39, "signallib": 39, "prog": [39, 150], "myprogram": 39, "mysub": 39, "subroutinecal": 39, "passs": 39, "inout": 39, "bind_c": 39, "sum_": [39, 56, 57, 58, 62, 65, 82, 84, 88, 90, 97, 191, 202, 203, 208, 209, 216, 222, 226], "cmplx": [39, 206], "intent_in": 39, "intrins": 39, "isign": 39, "lbound": 39, "lb": [39, 79, 241], "literal_dp": 39, "num": [39, 48, 57, 97, 107, 197, 218, 222, 241, 247], "literal_sp": 39, "reshap": [39, 88, 121, 138, 227, 233, 244], "arrayexpr": 39, "shp": 39, "metric": [39, 49, 53, 59, 108, 218, 222, 225, 232], "snr": 39, "convolution2d": 39, "use_renam": 39, "ren": 39, "thingi": 39, "newtons_method": 39, "itermax": 39, "counter": [39, 57, 63, 69, 88, 101, 103], "raphson": 39, "criterion": [39, 48, 137, 194, 199], "netwon": 39, "algo": [39, 49], "r38": 39, "27s_method": 39, "newtons_method_funct": 39, "param": [39, 59, 93, 219], "render_as_modul": 39, "py_mod": 39, "865474033102": 39, "render_as_source_fil": 39, "printer_set": 39, "fcodeprint": [39, 206], "fpgroup": [40, 48], "studi": [40, 47, 56, 59, 93, 190, 193, 199, 202, 219, 226], "combinator": [40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 90, 97, 208, 227, 232, 241, 244, 263, 277, 283], "free_group": [40, 47, 48], "vfree_group": 40, "xfree_group": 40, "fp_group": [40, 48], "coset_enumeration_r": 40, "fall": [40, 56, 57, 62, 85, 186, 201, 206, 219, 223, 226], "famou": [40, 65, 84, 97, 219], "langl": [40, 48, 150, 191], "rangl": [40, 48, 150, 168, 191], "gen0": 40, "gen1": 40, "gen_": 40, "freegroup": 40, "x_2": [40, 47, 62, 79, 166, 194, 199, 202, 208, 219, 225], "x_3": [40, 47, 79, 166], "s_1": 40, "r_1": [40, 193, 203], "s_2": 40, "r_2": 40, "s_k": 40, "r_k": [40, 164], "s_i": [40, 53, 84, 86], "r_i": [40, 203], "reduct": [40, 93, 117, 199, 201, 219], "ho05": [40, 47], "cdhw73": 40, "hav91": 40, "coset_enumeration_c": 40, "coset_enumer": 40, "relator_bas": 40, "coset_table_bas": 40, "influenc": [40, 100, 193, 194], "coset_table_max_limit": 40, "4096000": 40, "safeti": [40, 49, 91], "max_coset": 40, "cox": [40, 200, 202], "c_r": [40, 216], "50": [40, 48, 60, 61, 62, 65, 73, 93, 97, 100, 101, 144, 202, 206, 215, 224], "max_stack_s": 40, "500": [40, 61, 118], "deduction_stack": 40, "stack": [40, 74, 88, 138, 195, 201, 206, 235, 241, 279], "occurr": [40, 57, 97, 121, 181, 218, 226], "exce": [40, 97, 232], "modest": 40, "low_index_subgroup": 40, "conjugaci": [40, 48], "coset_t": [40, 48], "reidemeister_present": 40, "y_1": [40, 219, 226], "y_2": [40, 219, 226], "john": [40, 48, 65, 202, 219, 222], "cannon": 40, "lucien": 40, "dimino": [40, 48], "georg": [40, 193, 222, 244], "hava": 40, "jane": 40, "watson": [40, 218], "comp": [40, 222], "463": [40, 137], "490": [40, 49], "1973": [40, 58, 188], "derek": [40, 47], "holt": [40, 47, 48, 55], "chapman": [40, 47], "hall": [40, 47, 226], "crc": [40, 47, 49], "2005": [40, 47, 84, 97, 202], "xvi": [40, 47], "514": [40, 47, 200], "symposium": [40, 82, 199, 200, 216], "issac": [40, 84, 200, 224], "bonn": 40, "1991": [40, 200], "191": [40, 225], "199": 40, "acm": [40, 56, 82, 84, 200, 216, 222, 224], "graycod": 41, "kw_arg": [41, 51, 171, 231, 232], "hamiltonian": [41, 162], "edg": [41, 50, 51, 86, 195, 206, 225, 244, 282], "hamilton": [41, 88], "vertex": [41, 51, 68, 73, 84, 195], "000": [41, 61, 84, 87, 165, 244], "110": [41, 87, 222, 224, 238, 244], "010": [41, 87, 244], "011": [41, 87, 165, 244], "111": [41, 60, 67, 87, 97, 244], "101": [41, 65, 87, 97, 165, 244], "001": [41, 61, 87, 140, 244], "delet": [41, 86, 88, 93, 203, 247, 283], "statist": [41, 58, 65, 226, 237, 277], "manner": [41, 58, 65, 135, 169, 187, 219, 222, 227, 244, 260], "generate_grai": 41, "0000": 41, "0001": [41, 61], "0011": [41, 52], "0010": 41, "0110": 41, "0111": [41, 165], "0101": [41, 165], "0100": 41, "1100": 41, "1101": 41, "1111": 41, "1110": 41, "1010": 41, "1011": 41, "1001": 41, "r39": 41, "nijenhui": 41, "wilf": [41, 56, 224], "1978": [41, 48, 176, 200], "r40": 41, "knuth": [41, 49, 241], "2011": [41, 49, 82, 97, 188, 215], "art": [41, 49, 193, 206, 208, 241], "vol": [41, 49, 58, 62, 65, 82, 93, 108, 201, 202, 216, 241, 244], "addison": [41, 49, 97, 200], "weslei": [41, 49, 97, 200], "r41": 41, "brgc": 41, "6th": [41, 97], "unrank": [41, 46, 48, 49, 51], "r42": 41, "statweb": 41, "stanford": 41, "susan": 41, "s208": 41, "node12": 41, "tail": [41, 56, 57, 197, 226], "00010": 41, "random_bitstr": 41, "bitlist": [41, 52], "gray_to_bin": 41, "endian": 41, "bin_to_grai": 41, "get_subset_from_bitstr": 41, "bitstr": 41, "graycode_subset": 41, "group_construct": 42, "directproduct": [42, 45], "__mul__": [42, 48, 88, 93, 197, 201], "shift": [42, 48, 49, 51, 58, 65, 68, 72, 74, 87, 192, 197, 199, 202, 209, 216, 224, 226], "gn": 42, "named_group": [42, 45, 47, 48, 54, 55], "cyclicgroup": [42, 45, 48], "perm_group": [42, 47, 48, 49, 54, 55], "permutationgroup": [42, 45, 47, 48, 49, 54, 55], "group_numb": 43, "is_nilpotent_numb": 43, "r43": 43, "randprim": [43, 97], "pakianathan": 43, "shankar": 43, "monthli": [43, 58, 93], "107": [43, 200], "631": 43, "634": 43, "is_abelian_numb": 43, "r44": 43, "is_cyclic_numb": 43, "r45": 43, "polyhedron": [44, 48, 84, 244, 263], "prufer": [44, 263], "grai": [44, 52, 85, 140, 186, 192, 263], "nilpot": [44, 48, 93, 263], "abelian": [44, 45, 48, 86, 176, 193, 263], "cyclic": [44, 45, 48, 49, 50, 60, 88, 97, 232, 244, 263], "polycycl": [44, 48, 263], "symmetricgroup": [45, 47, 48, 54, 55], "transposit": [45, 48, 49, 58, 88, 90, 228], "is_group": [45, 48], "generate_schreier_sim": [45, 48], "af": [45, 48, 54, 138], "dihedralgroup": [45, 48, 55], "alternatinggroup": [45, 48, 54], "r46": 45, "symmetric_group": 45, "generators_and_rel": 45, "dihedr": [45, 49], "d_n": [45, 86, 202], "gon": 45, "bab": 45, "generate_dimino": [45, 48], "perm": [45, 47, 48, 49, 50, 55, 62, 88, 90, 93, 227], "cyclic_form": [45, 49, 50], "r47": 45, "dihedral_group": 45, "31": [45, 57, 60, 61, 73, 97, 136, 191, 202, 219], "ex": [45, 84, 108, 120, 196, 201, 202, 232, 240], "r48": 45, "armstrong": 45, "abeliangroup": [45, 48], "cyclic_ord": 45, "r49": 45, "groupprop": [45, 48], "subwiki": [45, 48], "structure_theorem_for_finitely_generated_abelian_group": 45, "multiset_partit": [46, 62, 82, 241, 244], "rg": 46, "growth": [46, 97, 199, 273], "from_rg": 46, "abcd": [46, 50, 171, 244, 247], "cbead": 46, "sort_kei": [46, 57, 222], "ti": [46, 49, 57, 97], "integerpartit": [46, 244], "summand": [46, 201], "r50": 46, "partition_": [46, 62], "28number_theori": 46, "as_dict": [46, 196, 202], "as_ferr": 46, "char": 46, "ferrer": 46, "next_lex": [46, 49], "lexic": [46, 151, 244], "prev_lex": 46, "random_integer_partit": 46, "seed": [46, 48, 57, 58, 67, 70, 71, 93, 97, 199, 226, 237, 244], "85": [46, 61, 62, 93, 97, 123, 169, 191, 226], "rgs_gener": 46, "37": [46, 58, 63, 67, 93, 97, 101, 191, 206, 219], "52": [46, 62, 97, 100, 101, 191, 205, 219, 222, 244, 273], "151": 46, "203": [46, 62], "rgs_enum": 46, "rgs_unrank": 46, "rgs_rank": 46, "pcgroup": 47, "pcg": 47, "pc_seri": [47, 48], "polycyl": 47, "pc_present": 47, "pc_sequenc": [47, 48], "miss": [47, 48, 74, 206, 224, 239, 283], "adjac": [47, 48, 49, 57, 62, 107, 143, 195, 244], "der": [47, 48], "relative_ord": [47, 48], "polycyclic_group": [47, 48], "gen": [47, 48, 53, 54, 55, 57, 93, 193, 196, 197, 199, 201, 202, 203, 204, 212, 218, 221, 224], "is_ident": [47, 49, 57], "poss": [47, 123, 190], "pc_group": 47, "a_j": [47, 65, 82, 176, 199, 208, 216], "notin": [47, 82, 214], "_order": 47, "minimal_uncollected_subword": 47, "subword_index": 47, "i_1": [47, 171, 202, 227], "a_1": [47, 48, 58, 65, 79, 82, 88, 93, 108, 171, 176, 194, 199, 216, 219, 222, 226, 283], "i_r": 47, "a_r": [47, 216], "i_2": [47, 171, 202], "s_": [47, 53, 121, 199], "s_j": [47, 86, 199], "x3": [47, 57, 62, 196, 222, 226], "collected_word": 47, "free_to_perm": 47, "bottom": [47, 48, 57, 58, 73, 88, 93, 96, 120, 201, 206, 215, 261], "pictur": [47, 206], "x_3x_2": 47, "x_3x_1": 47, "x_2x_1": 47, "x_3x_0": 47, "x_2x_0": 47, "x_1x_0": 47, "varii": 47, "derived_seri": [47, 48], "pc_resent": 47, "k_arrai": 47, "array_form": [47, 49, 50], "v_arrai": 47, "e_1": [47, 93, 193, 199, 202], "e_n": [47, 62, 86, 93, 147, 193, 202], "exponent_vector": 47, "leading_expon": 47, "dup": [48, 197], "pn": [48, 125, 135], "motion": [48, 111, 115, 116, 117, 120, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 138, 139, 185, 186, 189, 190, 226], "front": [48, 57, 123, 124, 140, 170, 197, 199, 202, 206, 218, 283], "face": [48, 50, 70, 84, 121, 199, 203, 206, 219, 261, 279], "rubik": 48, "3674160": 48, "pgroup": [48, 50], "corner": [48, 50, 88, 202, 222, 225, 245], "reset": [48, 50, 192, 199, 202, 237, 240, 242], "p10": 48, "make_perm": 48, "r51": 48, "eick": [48, 55], "brien": [48, 55], "r52": 48, "seress": 48, "r53": 48, "schreier_vector": 48, "r54": 48, "nielsen_transform": 48, "product_replacement_algorithm": 48, "r55": 48, "frank": [48, 49, 93], "celler": 48, "charl": 48, "leedham": 48, "green": [48, 132, 192], "scott": 48, "murrai": 48, "alic": [48, 58], "niemey": 48, "r56": 48, "block_": 48, "28permutation_group_theori": 48, "r57": 48, "algorithmist": 48, "php": [48, 65, 97, 219, 226], "union_find": 48, "r58": 48, "multiply_transitive_group": 48, "r59": 48, "center_": 48, "28group_theori": 48, "centralizer_and_norm": 48, "derived_subgroup": 48, "nilpotent_group": 48, "colost": 48, "hulpk": 48, "cgt": 48, "cgtnote": 48, "__contains__": 48, "__weakref__": [48, 88], "weak": [48, 57, 88, 196, 199], "_coset_repres": 48, "hg": 48, "transvers": [48, 53, 55, 144, 145], "coset_transvers": 48, "_distinct_primes_lemma": 48, "_element": 48, "_eval_is_alt_sym_monte_carlo": 48, "05": [48, 79, 105, 188, 191], "mont": 48, "carlo": 48, "candidat": 48, "randomli": [48, 57, 58, 97, 165], "n_ep": 48, "_check_cycles_alt_sym": [48, 55], "_eval_is_alt_sym_na": 48, "only_sym": 48, "only_alt": 48, "_p_elements_group": 48, "subgroup": [48, 49, 53, 55, 86, 97], "_random_pr_init": 48, "_random_prec_n": 48, "modif": [48, 63, 93, 225, 226, 241], "69": [48, 93, 224, 241], "71": [48, 73, 93, 174], "_random_gen": 48, "accumul": [48, 237, 241], "random_pr": 48, "chosen": [48, 49, 58, 59, 70, 71, 93, 97, 100, 139, 173, 176, 192, 193, 197, 199, 201, 206, 213, 216, 222, 226, 237, 251], "gh": [48, 194, 225, 232], "eventu": [48, 65, 84, 192, 193, 213, 239, 244], "_sylow_alt_sym": 48, "sylow": 48, "p_1": [48, 53, 58, 75, 97, 189, 216, 219], "p_2": [48, 58, 75, 97, 189, 216], "p_p": 48, "sylow_subgroup": 48, "is_alt_sym": [48, 55], "_union_find_merg": 48, "not_rep": 48, "atkinson": 48, "83": [48, 205], "87": [48, 63, 93, 97], "minimal_block": 48, "_union_find_rep": 48, "r60": 48, "r66": 48, "compress": [48, 93, 96, 103], "r62": 48, "r68": [48, 49], "_verifi": 48, "_h": [48, 225], "gens_k": 48, "rels_k": 48, "gens_h": 48, "inject": [48, 57, 193, 197, 202, 279], "homomorph": 48, "rels_h": 48, "strong_present": 48, "abelian_invari": 48, "isomorph": [48, 51, 193, 196, 199, 201], "t_1": [48, 62, 219], "t_2": [48, 62, 219], "t_r": [48, 136, 232], "542": 48, "adopt": [48, 232], "schreier": [48, 53, 55], "sim": [48, 53, 55, 82], "b_1": [48, 55, 65, 79, 82, 193, 216, 219, 222, 283], "b_2": [48, 55, 65, 79, 216, 222], "dot": [48, 49, 53, 55, 58, 70, 72, 79, 88, 93, 107, 116, 123, 124, 125, 128, 129, 130, 133, 134, 135, 136, 138, 155, 181, 183, 186, 189, 190, 191, 193, 194, 199, 202, 206, 225, 226, 244, 251, 255, 257, 258], "b_k": [48, 55, 58, 62, 65, 208, 209], "strong": [48, 53, 54, 55, 97, 98], "89": [48, 55, 84], "55": [48, 60, 62, 93, 191, 192, 202, 219], "57": [48, 93, 97, 226], "coset": [48, 53, 201], "strong_gen": [48, 54, 55], "basic_transvers": [48, 55], "basic_orbit": [48, 55], "basic_stabil": 48, "baseswap": 48, "po": [48, 82, 87, 88, 118, 136, 138, 197, 224], "strong_gens_distr": [48, 55], "swap": [48, 49, 50, 88, 93, 151, 155, 164, 226, 244], "orbit": [48, 55, 171, 172, 174], "b_": [48, 53, 55, 57, 62, 65, 82, 90, 107, 208, 216, 219, 227], "b_i": [48, 53, 55, 82, 193, 216], "la": [48, 138, 176], "vega": 48, "testutil": [48, 54, 55], "_verify_bsg": [48, 54, 55], "schreier_sim": [48, 54, 55], "bsg": [48, 53, 55, 232], "102": [48, 93], "98": [48, 58, 137, 202, 222], "pseudocod": 48, "beta_": 48, "g_": [48, 55, 56, 65, 82, 219], "foral": [48, 56, 59, 176], "zg": 48, "gz": 48, "c_g": 48, "sg": [48, 226, 232], "is_subgroup": 48, "subgroup_search": 48, "hgh": 48, "closur": [48, 54, 80, 151, 201, 214], "composition_seri": 48, "h_0": [48, 53], "h_1": [48, 53, 225], "h_2": [48, 225], "1024": [48, 206, 226], "512": [48, 65], "128": [48, 62, 65, 67, 97, 200, 206], "32": [48, 60, 63, 65, 67, 93, 97, 100, 105, 136, 200, 202, 203, 215, 216, 219, 226, 237], "243": [48, 65, 224], "81": [48, 62, 67, 88, 93, 97, 121, 123, 191, 205], "conjugacy_class": 48, "xax": 48, "s_3": 48, "s3": [48, 56, 107, 209, 219], "feasibl": [48, 107], "resiz": [48, 49, 88, 90], "coset_factor": 48, "factor_index": 48, "_basic_orbit": 48, "u1": [48, 97, 121, 123, 124, 125, 126, 128, 129, 133, 135, 138, 181, 183, 185, 186, 189, 222], "u2": [48, 96, 97, 121, 123, 124, 125, 126, 128, 129, 133, 138, 181, 185, 189, 222], "_strip": [48, 55], "coset_rank": 48, "lexicograph": [48, 49, 52, 53, 57, 199, 202, 244], "coset_unrank": 48, "standardis": [48, 196], "subsect": [48, 258], "compris": [48, 58, 90, 118, 136, 139, 202, 244], "g_0": [48, 219], "g_1": [48, 202, 213, 219, 222], "g_2": [48, 86, 213, 222], "g_i": [48, 213], "g_k": 48, "tetrahedron": [48, 50], "r64": 48, "axiom": [48, 193], "doy": 48, "sc": [48, 84], "thesi": [48, 57, 213, 251], "generator_product": 48, "sn": [48, 49, 56, 79], "is_abelian": 48, "_random_prec": 48, "probabl": [48, 57, 62, 65, 69, 97, 121, 165, 169, 216, 222, 225, 226, 238, 275, 281], "transit": [48, 138, 199, 226], "82": [48, 84, 93, 226], "proport": [48, 58, 213], "226": 48, "227": 48, "is_altern": 48, "quicker": [48, 97], "taxonomi": 48, "is_cycl": 48, "p_": [48, 53, 57, 84, 176, 219, 222, 227], "p_i": [48, 53, 97], "equiv": [48, 58, 62, 97, 201, 216, 219], "pmod": [48, 57, 58, 62, 93, 216], "p_j": [48, 53], "r65": 48, "35": [48, 51, 60, 62, 70, 71, 84, 93, 97, 123, 201, 206, 219, 222, 226], "rose": 48, "is_elementari": 48, "is_nilpot": [48, 93], "lower_central_seri": 48, "is_solv": 48, "is_norm": [48, 169], "gr": 48, "is_perfect": [48, 97], "is_polycycl": 48, "is_primit": [48, 197, 202], "cardin": [48, 49, 52, 193, 214], "badli": 48, "random_stab": 48, "g3": [48, 107], "s5": 48, "is_symmetr": [48, 88], "is_transit": 48, "is_trivi": 48, "cba": [48, 227, 244], "mainli": [48, 65, 93, 98, 176, 186, 199, 216, 219, 222], "max_div": 48, "siev": [48, 97], "nonempti": 48, "gb": 48, "moreov": [48, 58, 82, 175, 187, 193, 194, 199, 207, 256], "congruenc": [48, 57, 97, 216, 219], "p_0": [48, 53, 75, 216, 219], "maxim": [48, 58, 86, 193, 197, 201, 213, 215], "intransit": 48, "normal_closur": 48, "adjoin": [48, 194], "yx": [48, 190], "73": [48, 56, 57, 70, 97, 222], "74": [48, 62, 97], "orb": 48, "78": [48, 71, 93, 97, 101, 176, 222, 226], "orbit_transvers": 48, "orbit_rep": 48, "send": [48, 57, 58, 63, 97, 193, 222, 224], "proof": [48, 51, 82, 84, 225], "79": [48, 49, 101], "pointwise_stabil": 48, "pointwis": [48, 55], "p_k": [48, 97], "p20": 48, "stab": 48, "schreier_sims_increment": [48, 55], "polycyclicgroup": 48, "eliminate_gen": 48, "gen_count": 48, "b1": [48, 53, 65, 97, 100, 101, 112, 121, 138, 181, 197, 206, 216, 219, 222, 257], "b_r": 48, "slp_dict": 48, "seq": [48, 57, 60, 93, 197, 199, 202, 212, 224, 244], "93": [48, 200], "schreier_sims_random": [48, 55], "consec_succ": 48, "consec": 48, "_succ": 48, "97": [48, 58, 97, 199], "sift": [48, 55, 244], "amend": 48, "unsuccess": [48, 55], "accordingli": [48, 194, 201], "halt": 48, "signifi": [48, 57, 100, 202, 226], "g_t": 48, "leq": [48, 56, 58, 65, 82, 93, 97, 191, 199, 201, 212, 213, 219, 226], "prop": [48, 201], "init_subgroup": 48, "supergroup": 48, "sought": [48, 97, 156, 166, 218, 224, 225], "prune": 48, "prop_even": 48, "lengthi": 48, "114": [48, 97], "117": [48, 65], "terribl": 48, "crucial": [48, 56, 196], "len1": 48, "len2": 48, "len3": 48, "transitivity_degre": 48, "fold": [48, 57, 63, 206, 213, 218], "a_2": [48, 58, 79, 93, 199, 216, 219, 222, 226, 283], "a_k": [48, 58, 203, 209], "arrang": [49, 107, 116, 136, 138, 215, 219, 232], "r69": 49, "reorder": [49, 56, 63, 171, 202, 222, 226, 244], "pretty_print": [49, 85, 118, 123, 124, 128, 129, 130, 132, 133, 134, 136, 139, 181, 183, 185, 186, 189, 190, 206], "understood": [49, 97, 176, 193, 197], "economi": 49, "caution": [49, 57, 63, 206, 218], "indexerror": [49, 93, 202], "autos": [49, 96], "watch": 49, "print_cycl": 49, "econom": [49, 84, 244], "retain": [49, 57, 63, 65, 84, 99, 202, 207, 215, 218], "biject": [49, 51, 58, 88, 193], "full_cyclic_form": 49, "rmul": 49, "unrank_lex": 49, "r73": 49, "zo42": 49, "from_sequ": 49, "a1": [49, 53, 57, 85, 88, 97, 101, 121, 138, 145, 222, 226, 227, 257, 283], "a2": [49, 53, 57, 86, 88, 97, 101, 121, 138, 145, 195, 226, 227, 257, 283], "a3": [49, 53, 57, 86, 88, 138, 257, 283], "perfectli": [49, 56, 57, 58, 199, 202, 205], "skiena": 49, "ma": [49, 56, 126], "1990": [49, 82, 216, 251], "r70": 49, "wendi": 49, "myrvold": 49, "ruskei": 49, "2001": [49, 97, 200], "lett": 49, "septemb": [49, 241], "281": 49, "284": [49, 97], "1016": 49, "s0020": 49, "0190": 49, "01": [49, 57, 61, 121, 165, 200, 218, 244], "00141": 49, "r71": 49, "kreher": 49, "stinson": 49, "1999": [49, 93, 200, 205, 222], "r72": 49, "graham": [49, 62, 63, 97], "patashnik": 49, "foundat": [49, 200, 201], "1994": [49, 199, 200, 202], "product_and_invers": 49, "r74": 49, "lehmer_cod": 49, "appliedpermut": 49, "magic": [49, 218, 237, 275], "attatch": 49, "_array_form": 49, "ascent": 49, "ie": [49, 219], "descent": [49, 219], "fg": [49, 59, 222, 225], "gf": [49, 58, 193, 195, 196, 199, 201], "r75": 49, "commutes_with": [49, 232], "cycle_structur": 49, "from_inversion_vector": 49, "get_adjacency_dist": 49, "n_adj": 49, "reev": 49, "colin": 49, "landscap": 49, "annal": 49, "86": [49, 93, 137, 205, 215], "473": 49, "josephu": 49, "get_precedence_matrix": 49, "get_precedence_dist": 49, "get_adjacency_matrix": 49, "get_positional_dist": 49, "subscript": [49, 197, 206, 216, 219, 244], "inversion_vector": 49, "lesser": [49, 103, 202], "lie": [49, 59, 71, 72, 73, 202, 226, 262, 269], "lehmer": 49, "ith": [49, 86, 97, 197, 203, 225, 226], "variat": [49, 57, 199, 213, 222], "r76": 49, "eng": 49, "chula": 49, "piak": 49, "algo2008": 49, "htm": [49, 65, 84, 219], "is_singleton": 49, "is_odd": 49, "shuffl": [49, 93, 283], "012345": 49, "345": 49, "253": 49, "2531": 49, "25314": 49, "253140": 49, "r77": 49, "flavius_josephu": 49, "r78": 49, "josephus_problem": 49, "r79": 49, "wou": 49, "burtonl": 49, "trim": [49, 135], "unmov": 49, "mul_inv": 49, "next_nonlex": 49, "nonlex": 49, "rank_nonlex": 49, "unrank_nonlex": 49, "next_trotterjohnson": [49, 244], "trotter": 49, "johnson": [49, 93], "generate_bel": [49, 244], "rank_trotterjohnson": 49, "unrank_trotterjohnson": 49, "_af_par": 49, "pseudo": [49, 93, 97, 197, 199, 202], "inv_perm": 49, "enforc": [49, 123], "rmul_with_af": 49, "ascend": [49, 244], "r80": 49, "transposition_": 49, "28mathemat": [49, 57, 214], "flexibl": [49, 57, 121, 138, 189, 192, 196, 225, 273], "investig": [49, 82, 191, 193, 216, 244, 275], "cn": [49, 206, 282], "2n": [49, 56, 62, 65, 84, 88, 103, 108, 134, 191, 209, 216], "dn": [49, 226], "klein": 49, "s4": [49, 107], "polyhedr": 50, "psg": 50, "platon": 50, "solid": [50, 71, 115, 192, 261], "tetrahedr": 50, "octahedr": 50, "icosahedr": 50, "r81": 50, "polyhedralgroup": 50, "polyhedra": 50, "shadow": 50, "h5": 50, "heinz": 51, "caylei": [51, 88], "r82": 51, "labeledtre": 51, "tree_repr": 51, "prufer_rank": 51, "prev": [51, 57], "36": [51, 58, 62, 73, 84, 88, 93, 97, 101, 202, 206, 219, 222, 226, 261], "prufer_repr": 51, "record": [51, 57, 201, 206, 237], "to_pruf": 51, "778": 51, "779": 51, "777": [51, 60], "1296": 51, "to_tre": 51, "r83": 51, "hamberg": 51, "erlend": 51, "2010": [51, 223, 244], "06": [51, 57, 123, 191, 226], "compact": [51, 57, 104, 116, 138, 169, 186, 202, 206, 224, 241], "next_binari": 52, "prev_binari": 52, "bitlist_from_subset": 52, "subset_from_bitlist": 52, "superset_s": 52, "iterate_binari": 52, "iterate_graycod": 52, "prev_grai": 52, "next_grai": 52, "next_lexicograph": 52, "prev_lexicograph": 52, "rank_binari": 52, "unrank_binari": 52, "rank_grai": 52, "unrank_grai": 52, "rank_lexicograph": 52, "43": [52, 93, 97, 100, 101, 226, 283], "super_set": 52, "subset_indic": 52, "ksubset": 52, "itertool": [52, 244], "tensor_can": [53, 232], "msym": 53, "contravari": [53, 93, 232, 233], "covari": [53, 59, 93, 226, 232, 233], "d0": 53, "base_i": 53, "gens_i": 53, "n_i": [53, 199, 224], "sym_i": 53, "failur": [53, 61, 74, 82, 97, 226, 237, 283], "canonicalize_na": 53, "exchang": [53, 58, 93, 191, 195, 244], "anticommut": [53, 158, 160, 170, 171, 232, 268], "canonical_fre": 53, "slot": [53, 155, 227, 231, 232, 278], "residu": [53, 58, 97, 199, 216], "tensor_gen": 53, "list_free_indic": 53, "double_coset_can_rep": 53, "reintroduc": 53, "a_": [53, 57, 58, 65, 82, 86, 88, 90, 107, 108, 136, 208, 216, 219, 222, 224, 226, 227], "antisymmetr": [53, 59, 88, 171, 232], "d2": [53, 181, 193, 213, 226, 244, 251], "ord": [53, 58, 93], "t_c": 53, "get_symmetric_group_sg": [53, 232], "bsgs_direct_product": 53, "base2a": 53, "gens2a": 53, "t0": 53, "t1": [53, 73, 74, 97, 112, 118, 219, 226], "a_m": [53, 222], "a_n": [53, 58, 65, 82, 86, 176, 194, 199, 209, 219, 222, 283], "_a": [53, 65, 171, 202], "_b": [53, 65, 171], "base_f": 53, "gens_f": 53, "base1": 53, "gens1": 53, "base_a": 53, "gens_a": 53, "sgen": 53, "s_transvers": 53, "butler": [53, 232], "portug": [53, 232], "grow": [53, 57, 82, 93, 97, 196, 199], "computation": [53, 63, 115, 116, 117], "absenc": [53, 87], "observ": [53, 79, 82, 160, 190, 193, 216, 219, 222, 226, 260, 283], "opposit": [53, 73, 87, 88, 112, 194, 197, 214, 218, 225, 233, 244, 251, 253, 283], "ind": [53, 208, 232], "d3": [53, 213], "a0": [53, 222, 283], "a4": [53, 57, 86, 138, 283], "a5": [53, 57], "leftrightarrow": 53, "_af_rmul": 53, "t_": [53, 62], "b0": [53, 65, 197, 216, 222], "d_": [53, 216], "p0": [53, 67, 201, 222], "dbase": 53, "recomput": [53, 202], "d_i": [53, 82, 176], "s_0": 53, "d_0": [53, 58], "b_0": [53, 58, 62, 216, 219, 222], "b_j": [53, 55, 65, 82, 216], "sx": 53, "trace": [53, 88, 90, 108, 138, 199, 206, 226, 227, 228, 230, 244, 279], "h_n": [53, 65, 84, 202, 225], "tab1": 53, "get_transvers": 53, "antisym": 53, "base2": 53, "gens2": 53, "_cmp_perm_list": 54, "ls1": 54, "ls2": 54, "_naive_list_centr": 54, "_verify_centr": 54, "_verify_normal_closur": 54, "_base_ord": 55, "base_ord": 55, "backtrack": 55, "108": [55, 97, 101], "132": [55, 62, 181], "r84": 55, "_distribute_gens_by_bas": 55, "_strong_gens_from_distr": 55, "_orbits_transversals_from_bsg": 55, "_handle_precomputed_bsg": 55, "transversals_onli": 55, "slp": 55, "_remove_gen": 55, "new_gen": 55, "r85": 55, "r86": 55, "recurr": [56, 62, 79, 93, 201, 212, 218, 222, 226, 246], "annihil": [56, 75, 76, 80, 147, 171, 224], "is_hypergeometr": 56, "binomi": [56, 61, 62, 65, 97, 202, 206, 211, 218, 222, 226, 244, 283], "rf": [56, 62, 202], "ff": [56, 58, 62, 191, 194, 195, 196, 201, 202], "speci": [56, 57], "rise": [56, 62, 65, 191, 218, 222, 226, 255], "hypersimp": [56, 218], "quotient": [56, 57, 60, 63, 97, 193, 194, 196, 199, 202, 216, 218, 222], "dummy_vari": 56, "karr": 56, "quad": [56, 57, 59, 61, 65, 84, 88], "exclus": [56, 57, 63, 87, 93, 199, 275], "emphas": 56, "typeset": [56, 206], "doit": [56, 57, 59, 62, 63, 65, 84, 90, 107, 148, 150, 152, 163, 165, 168, 169, 171, 181, 191, 202, 208, 213, 218, 222, 223, 226, 228, 251, 254, 255, 257, 258, 273, 278], "seemingli": [56, 225], "nonsens": [56, 65], "r87": 56, "michael": [56, 200, 205], "april": 56, "1981": [56, 200], "305": 56, "350": [56, 118], "dl": [56, 190, 200], "cfm": [56, 200], "doid": [56, 200], "322248": 56, "322255": 56, "r88": 56, "sigma_not": 56, "r89": 56, "empty_sum": 56, "euler_maclaurin": [56, 61], "eval_integr": 56, "maclaurin": [56, 61], "endpoint": [56, 57, 61, 187, 214, 258], "28333333333333": 56, "sstr": [56, 186, 206], "full_prec": [56, 206], "26629073187415": 56, "0175000000000000": 56, "soon": [56, 57, 121, 176, 203], "eval_zeta_funct": 56, "is_absolutely_converg": 56, "sequence_term": 56, "is_converg": 56, "r90": 56, "absolute_converg": 56, "analogi": [56, 199], "prod_": [56, 62, 65, 82, 97, 176, 216], "respons": [56, 57, 107, 121, 192, 239], "diverg": [56, 65, 140, 182, 251, 254], "dirichlet": [56, 65, 226], "r91": 56, "convergence_test": 56, "reverse_ord": 56, "selector": [56, 88, 218, 244], "handi": [56, 57, 93, 206, 278], "s0": [56, 80, 82, 143], "expr_with_intlimit": [56, 84], "exprwithintlimit": [56, 84], "reorder_limit": 56, "r92": 56, "walli": 56, "w2": [56, 145], "w2e": 56, "risingfactori": [56, 62, 65, 206, 208], "combsimp": [56, 57, 62, 218], "pe": 56, "gammasimp": [56, 57, 218], "rewrit": [56, 57, 59, 62, 63, 65, 82, 84, 87, 100, 107, 168, 202, 213, 214, 215, 218, 222, 223, 224, 225, 226, 263, 277, 279], "r93": 56, "r94": 56, "capital_pi_not": 56, "r95": 56, "empty_product": 56, "r96": 56, "infinite_product": 56, "r97": 56, "expr_with_limit": [56, 84], "exprwithlimit": [56, 84], "change_index": 56, "trafo": 56, "newvar": 56, "mapsto": [56, 82, 88, 201], "p3": [56, 67, 69, 70, 72, 73, 107, 192, 196, 215, 226], "has_empty_sequ": [56, 84], "has_reversed_limit": [56, 84], "has_finite_limit": [56, 84], "____": [56, 61, 84, 143, 194, 207, 226, 244, 284], "___": [56, 61, 84, 85, 93, 194, 218, 226, 231, 244, 282], "rubric": [56, 57], "_____": [56, 226], "gosper": 56, "gosper_norm": 56, "monic": [56, 65, 193, 194, 197, 199, 201, 202, 205], "gcd": [56, 57, 58, 93, 97, 167, 196, 197, 200, 201, 202, 206, 218, 219], "gosper_term": 56, "s_n": [56, 202], "f_k": [56, 116, 133, 199], "g_n": [56, 62, 202], "f_n": [56, 62, 65, 193, 199, 202, 222], "gosper_sum": 56, "r98": 56, "marko": 56, "petkovsek": [56, 224], "herbert": 56, "doron": 56, "zeilberg": [56, 224], "ak": [56, 208], "peter": [56, 62, 65, 97, 137, 188, 202, 244], "ltd": 56, "welleslei": 56, "usa": [56, 200], "1997": [56, 82, 97, 200, 216], "convert_xor": [57, 99], "09": [57, 105, 191], "2e": 57, "xor": [57, 60, 87, 99, 206, 275], "sympifyerror": 57, "coerc": [57, 135, 199], "cooper": 57, "sage": [57, 97, 191, 277], "shouldn": [57, 203], "unsanit": [57, 245, 272], "bitcount": 57, "improperli": 57, "unbound": [57, 231], "23903": 57, "fallback": [57, 85, 171, 186, 196, 206, 224], "ast": [57, 206], "mylist1": 57, "mylist": 57, "mylist2": 57, "xxx": [57, 84, 93, 244, 246], "autosimplif": [57, 215, 218], "kern": 57, "r101": 57, "7649": 57, "r100": 57, "r104": 57, "r102": 57, "r103": 57, "r105": 57, "r106": 57, "r107": 57, "r99": 57, "imaginaryunit": [57, 63, 206], "negativeinfin": [57, 206], "complexinfin": [57, 107], "recreat": [57, 115], "isfinit": 57, "__cacheit": 57, "maxsiz": 57, "cacheit": 57, "noqa": [57, 85, 197, 240], "f811": 57, "sympy_use_cach": 57, "cot": [57, 63, 65, 99, 203, 206, 215], "_arg": [57, 63], "as_mut": [57, 89, 90], "as_content_primit": [57, 93, 194, 202], "stub": 57, "as_dummi": [57, 84], "_0": [57, 62, 82, 88, 93, 202, 245], "_r": [57, 171, 216, 225], "bound_symbol": [57, 84], "besid": [57, 199, 224], "typeinfo": 57, "truli": [57, 65, 176], "piec": [57, 61, 216, 239], "numbersymbol": [57, 206], "scan": 57, "appliedundef": 57, "canonical_vari": 57, "class_kei": 57, "sorted_class": 57, "dummy_eq": 57, "eg": [57, 121, 178, 225], "fromit": 57, "has_fre": 57, "has_xfre": 57, "exp_polar": [57, 63, 65, 216], "dif": 57, "_prec": 57, "r_": [57, 109, 172, 203], "repl_dict": 57, "rcall": [57, 59], "simul": [57, 121, 138, 205], "abus": [57, 232], "succe": [57, 82, 87, 97, 161, 201, 224], "newtyp": 57, "intuit": [57, 176, 222], "is_mul": 57, "is_add": [57, 225], "mysin": [57, 245, 272], "_eval_rewrite_as_": 57, "_eval_rewrite_as_co": 57, "tie": [57, 244], "delai": [57, 105, 135, 215, 237, 273], "unsort": [57, 111, 180], "333333333333333333333": 57, "333333333333333314830": 57, "wildcard": [57, 218], "evalfmixin": 57, "registri": 57, "metaprogram": 57, "address": [57, 206, 225], "mostli": [57, 63, 84, 93, 138, 166, 189, 193, 205, 206, 216, 224, 282], "__truediv__": [57, 197], "class_nam": 57, "mysingleton": 57, "_eval_is_g": 57, "_eval_is_eq": 57, "args_cnc": 57, "cset": 57, "split_1": 57, "suppress": [57, 99, 235, 242], "as_coeff_add": 57, "dep": [57, 222], "as_coeff_expon": 57, "as_coeffici": 57, "zz": [57, 62, 79, 80, 84, 90, 93, 94, 97, 118, 190, 193, 194, 195, 196, 199, 201, 202, 203, 204, 221], "coeff_monomi": [57, 202], "polytool": [57, 202, 225], "monomi": [57, 84, 87, 97, 194, 196, 197, 199, 205, 206, 283], "as_coefficients_dict": 57, "inquiri": 57, "expand_mul": [57, 82], "121": [57, 62, 97, 107, 181, 224], "84": [57, 61, 97], "separatevar": [57, 218, 222], "n3": [57, 121], "as_leading_term": [57, 213], "logx": [57, 213], "cdir": 57, "_eval_as_leading_term": 57, "as_numer_denom": [57, 224], "as_ordered_factor": 57, "as_ordered_term": 57, "as_powers_dict": 57, "lost": 57, "as_real_imag": [57, 63, 88, 207], "as_term": 57, "aseri": 57, "hir": 57, "asymptot": [57, 82, 107, 273], "hierarch": 57, "normalis": [57, 208], "induc": [57, 88, 201, 215, 244], "gruntz": [57, 208], "majorli": 57, "mrv": [57, 213], "overal": [57, 178, 192, 224], "rapidli": [57, 61, 82, 213], "till": [57, 100, 101, 121, 222], "r108": 57, "dominik": [57, 208], "proc": [57, 224], "1993": [57, 200], "symp": 57, "239": 57, "244": [57, 199], "r109": 57, "p90": 57, "r110": 57, "asymptotic_expans": 57, "_first": [57, 63], "factor_term": [57, 129, 202, 215, 218], "distribute_order_term": [57, 218], "compute_leading_term": 57, "could_extract_minus_sign": 57, "signsimp": [57, 129, 218], "failing_express": 57, "modulu": [57, 58, 60, 65, 67, 73, 88, 97, 100, 101, 193, 197, 199, 201, 202, 205, 225], "power_bas": [57, 88], "power_exp": [57, 88], "multinomi": [57, 88, 97, 226], "expr_free_symbol": 57, "extract_addit": 57, "extract_multipl": 57, "extract_branch_factor": 57, "allow_half": 57, "fourier_seri": [57, 209], "geto": 57, "getn": 57, "mod_invers": [57, 202], "is_algebraic_expr": 57, "is_rational_funct": 57, "r111": 57, "algebraic_express": 57, "is_const": 57, "constanc": 57, "agre": [57, 58, 65, 72, 82, 216], "test_expr": 57, "prove": [57, 82, 84, 93, 193, 213, 222, 257], "failing_numb": 57, "is_meromorph": 57, "meromorph": [57, 65], "multivalu": [57, 63], "cut": [57, 62, 63, 65, 73, 82, 193, 216, 241, 247, 283], "hit": [57, 278], "is_polynomi": 57, "rational_funct": 57, "leadterm": 57, "xlim": [57, 192], "lseri": 57, "exaxmpl": 57, "nseri": 57, "_eval_nseri": 57, "innermost": 57, "disadvantag": 57, "met": [57, 103, 219, 225, 240, 283], "poleerror": 57, "nsimplifi": [57, 61, 218], "ratsimp": [57, 218], "removeo": [57, 138, 206, 273], "chop": [57, 61, 65, 88, 93, 224, 272], "123": [57, 62, 67, 87, 115, 168, 181, 244, 251, 253], "lazi": [57, 90, 202], "smooth": [57, 61, 97, 208], "taylor_term": [57, 63], "previous_term": [57, 63], "wildfunct": 57, "dummy_index": 57, "temporari": [57, 238], "_dummy_10": 57, "contigu": [57, 216, 239], "x4": [57, 62, 196], "x5": [57, 62, 196], "x6": [57, 196], "x7": [57, 196], "x8": [57, 196], "x9": [57, 196], "x50": 57, "x51": 57, "y0": [57, 76, 78, 80, 222], "y1": [57, 138], "y2": [57, 138, 196], "y3": [57, 196], "y4": 57, "xa": [57, 194, 199], "xb": [57, 247], "xc": [57, 170, 247], "disambigu": 57, "x01": 57, "x02": 57, "x11": 57, "x12": 57, "escap": [57, 99, 192, 206, 247], "newli": [57, 82, 216], "undefinedfunct": [57, 183, 206, 238, 245], "f821": [57, 240], "cofactor": [57, 93, 197, 199, 202], "lcm": [57, 97, 197, 199, 202, 206], "50000000000000": [57, 61], "100000000000000000000": 57, "1e20": 57, "00000000000000e": 57, "23456789123456789": 57, "23456789123457": 57, "00100": 57, "sent": [57, 84, 218, 224], "789": [57, 97], "123_456": 57, "123456789": 57, "12e": 57, "012": 57, "60e2": 57, "6000": 57, "600e": 57, "125": [57, 61, 84, 97, 197, 212, 219], "099609": 57, "12500": 57, "12500000000000000000": 57, "5404319552844595": 57, "54": [57, 93, 101, 199, 205, 244], "29999999999999998890": 57, "30000000000000000000": 57, "_mpf_": [57, 196], "4915": 57, "70": [57, 58, 74, 84, 93, 97, 205, 206, 219, 226, 247], "307": 57, "mpf": [57, 196, 197], "is_float": 57, "unprejud": 57, "3602879701896397": 57, "18014398509481984": [57, 218], "limit_denomin": 57, "320": 57, "75": [57, 60, 226, 251], "use_tri": [57, 97], "use_rho": [57, 97], "use_pm1": [57, 97], "factorint": [57, 97, 201, 202, 241], "trial": [57, 97, 199, 211, 215, 222, 226], "max_denomin": 57, "1000000": [57, 97], "141592653589793": 57, "311": [57, 97], "discard": [57, 201, 206, 225], "99999999999999999999": 57, "algebraicnumb": [57, 197, 201, 205], "hookrightarrow": 57, "minpoli": [57, 196, 197, 201], "dmp": [57, 193, 197, 202], "complexrootof": [57, 93, 197, 202, 222], "anp": [57, 196, 197, 201, 202], "to_list": [57, 195, 197], "minpoly_of_el": 57, "414213562": 57, "scratch": [57, 176], "6x": [57, 199], "to_number_field": [57, 201], "to_root": 57, "primitive_el": [57, 196, 197, 201], "knew": [57, 283], "golden": [57, 61, 97], "5th": [57, 138, 199, 201], "cyclotom": [57, 197, 199, 200, 201, 202], "cyclotomic_poli": [57, 201, 202], "61803398874989": 57, "2i": 57, "a6": 57, "a6_wrong": 57, "309016994374947": 57, "951056516295154": 57, "field_el": 57, "is_alias": 57, "is_primitive_el": 57, "native_coeff": 57, "to_algebraic_integ": 57, "to_primitive_el": 57, "Its": [57, 63, 73, 138, 169, 199, 206, 214], "a_prim": 57, "number_cl": 57, "realnumb": 57, "igcd": [57, 97, 194], "greatest": [57, 62, 67, 97, 194, 196, 197, 199, 200, 202, 205], "euclid": [57, 199, 200], "r112": 57, "euclidean_algorithm": 57, "ilcm": [57, 97], "seterr": 57, "r113": 57, "r114": 57, "1_": 57, "28number": 57, "negativeon": [57, 63, 278], "r115": 57, "88": [57, 93, 97], "921_": 57, "r116": 57, "one_half": 57, "holder": 57, "ieee": [57, 58], "754": 57, "r117": 57, "affin": [57, 58, 72, 193], "compactif": 57, "r118": 57, "tild": [57, 63, 227], "phase": [57, 84, 105, 140, 143, 145, 155, 156, 225], "exp1": [57, 206], "718281828": 57, "napier": 57, "r119": 57, "e_": [57, 62, 93], "28mathematical_const": 57, "r120": 57, "imaginary_unit": [57, 206], "141592654": 57, "circumfer": [57, 67], "diamet": [57, 67], "area": [57, 67, 69, 73, 74, 100, 101], "is_irr": 57, "r121": 57, "mascheroni": [57, 65], "5772157": 57, "recur": 57, "harmon": [57, 62, 97, 109, 150, 191, 206, 268], "lim": [57, 213, 273], "limits_": [57, 191, 208, 277], "ln": [57, 63, 84, 206, 208, 222, 226, 283], "r122": 57, "93mascheroni_const": 57, "catalan": [57, 62, 206], "91596559": 57, "r123": 57, "27s_constant": 57, "goldenratio": [57, 61, 207, 218], "r124": 57, "golden_ratio": 57, "tribonacciconst": 57, "tribonacci": [57, 62], "fibonacci": [57, 61, 62, 97], "predetermin": [57, 237], "8392867552141611326": 57, "r125": 57, "generalizations_of_fibonacci_numb": [57, 62], "tribonacci_numb": [57, 62], "modulo": [57, 58, 94, 97, 167, 193, 195, 196, 197, 199, 201, 202, 203, 205, 206, 209, 218], "r126": 57, "modular_multiplicative_invers": 57, "r127": 57, "extended_euclidean_algorithm": 57, "oscil": [57, 268], "conform": [57, 225, 230, 231], "r128": 57, "r129": 57, "zero_to_the_power_of_zero": 57, "r130": 57, "indeterminate_form": 57, "as_base_exp": [57, 63, 64, 244], "expand_power_bas": [57, 218], "integer_nthroot": [57, 63, 97], "floor": [57, 63, 97, 115, 196, 197, 206, 226], "integer_log": 57, "geq": [57, 58, 65, 93, 202, 219, 226, 283], "factor_": [57, 58, 97, 202, 219], "perfect_pow": [57, 97], "infix": 57, "matmul": [57, 90, 195], "as_coef_mul": 57, "undesir": [57, 111, 121, 135, 194, 197, 216], "4596": 57, "compound": [57, 126, 169], "5728": 57, "suspect": [57, 97], "5706": 57, "moot": 57, "off": [57, 67, 82, 88, 96, 98, 123, 132, 155, 193, 202, 206, 222, 237, 248, 251, 277], "nb": 57, "sensit": [57, 107, 138, 192, 199, 218, 237], "assocop": 57, "prod": [57, 196, 203, 215], "quadrat": [57, 58, 84, 97, 193, 197, 201, 202, 219, 224, 226], "matadd": [57, 90, 206], "as_coef_add": 57, "extract_leading_ord": 57, "commutative_part": 57, "noncommutative_part": 57, "order_symbol": 57, "subprocess": [57, 206, 237, 238], "dividend": [57, 197], "rop": 57, "validrelationoper": 57, "greaterthan": [57, 206], "lessthan": [57, 206], "strictlessthan": [57, 206, 247], "lt": [57, 202, 247], "fourth": [57, 58, 194, 222, 273], "my_equ": 57, "my_inequ": 57, "reversedsign": 57, "_eval_eq": 57, "respond": 57, "boolalg": [57, 87], "client": [57, 241], "counterpart": [57, 58, 222, 273], "litter": 57, "oddbal": 57, "minor": [57, 67, 93, 206, 237], "caveat": [57, 202, 275], "succinctli": 57, "coupl": [57, 93, 135, 150, 165, 168, 191], "annoy": 57, "succinct": 57, "occasion": 57, "r131": 57, "operar": 57, "circuit": [57, 155, 158, 268], "greaterthanobject": 57, "__bool__": 57, "335": 57, "march": 57, "2012": 57, "r132": 57, "r133": 57, "r134": 57, "mdarg": 57, "fgh": 57, "vsin": 57, "vdiff": 57, "narg": [57, 199], "naturals0": [57, 206, 214, 225, 226], "evalul": 57, "fairli": [57, 65, 82, 123, 131, 180, 193], "conserv": [57, 116, 134, 182, 254, 260], "136": [57, 93], "indirect": [57, 59, 65, 97, 171, 222], "implic": [57, 87, 199], "fx": [57, 59, 192, 222, 223], "fxx": 57, "insconsist": 57, "presenc": [57, 63, 87, 103, 120, 125, 135, 222, 230], "nonvanish": 57, "_diff_wrt": 57, "_sort_variable_count": 57, "vc": 57, "vsort": 57, "collaps": [57, 165, 218], "vsort0": 57, "vi": 57, "dfx": 57, "equidist": 57, "sq2": 57, "xl": 57, "d2fdxdy": 57, "doit_numer": 57, "z0": [57, 213], "unifi": [57, 139, 195, 197, 199, 201, 202, 214], "zeroth": [57, 201], "idiff": [57, 74], "r135": 57, "legaci": [57, 84, 93, 226], "v5_2": 57, "infunct": 57, "algebraiccomput": 57, "functionclass": [57, 206, 245], "f_real": [57, 64], "f_real_inherit": [57, 64], "is_singular": [57, 64, 80], "holomorph": [57, 64, 82], "superfici": 57, "unexpect": [57, 237], "ss": [57, 197], "denom": [57, 196, 197, 201, 218], "_eval_expand_bas": 57, "_eval_expand_complex": 57, "shut": [57, 202], "unwant": [57, 224, 244], "alphabet": [57, 58, 107, 176, 194, 219, 239], "expand_hint": 57, "_eval_expand_hint": 57, "liabl": [57, 87], "metahint": 57, "myclass": 57, "_eval_expand_doubl": 57, "expand_multinomi": 57, "expand_power_exp": 57, "expand_func": [57, 62, 65], "hyperexpand": [57, 65, 79, 82, 216, 218], "div": [57, 194, 196, 197, 202, 206, 218, 278], "horner": [57, 138, 199, 202], "untouch": 57, "unexpand": [57, 196, 205, 215, 238], "nfloat": [57, 218], "dkei": 57, "mixin": [57, 244], "maxn": [57, 61, 88], "subresult": [57, 197, 200, 202], "000100000000000000": 57, "precisionexhaust": [57, 61], "maxprec": 57, "quadratur": [57, 61, 84, 222], "tanh": [57, 61, 63, 84, 203, 206, 218, 283], "oscillatori": [57, 61, 211], "osc": [57, 61], "advers": 57, "1e16": 57, "291": 57, "builtin": [57, 197, 206, 214, 247, 282], "speedup": [57, 93, 98, 199, 203, 245], "framework": [57, 114, 121, 131, 231, 237, 239, 245, 268], "slice": [57, 87, 88, 93, 99, 197, 202, 212, 214, 218, 227, 244], "tuplekind": [57, 88, 214], "parametris": [57, 214], "element_kind": [57, 88, 214], "tuple_count": 57, "setkind": [57, 88], "gcd_term": [57, 202], "isprimit": 57, "_gcd_term": 57, "terms_gcd": [57, 197, 202], "entiti": [57, 67, 70, 71, 73, 74, 82, 121, 136, 187, 225, 260, 269, 279], "arguement": 57, "broad": [57, 278], "undefinedkind": [57, 88, 214], "lex": [57, 85, 186, 194, 196, 197, 199, 202, 203, 205, 206, 218], "grlex": [57, 85, 186, 197, 202, 205, 206], "grevlex": [57, 85, 186, 194, 199, 202, 205, 206], "rev": 57, "unaffect": [57, 225], "_node": 57, "fastest": [57, 62, 84, 97, 98, 203], "undecor": 57, "ineffici": [57, 93, 196], "breaker": 57, "hash": [57, 197, 199, 207, 218, 222, 237, 239], "collis": [57, 96, 206], "wast": [57, 94, 195], "rng": 57, "getstat": 57, "intention": 57, "tn": 57, "td": [57, 206, 282], "randrang": 57, "999": [57, 61], "238": [57, 97], "randint": [57, 93, 199], "ri": [57, 206], "rv": [57, 215, 226, 244], "nonbas": 57, "postord": 57, "descend": [57, 193, 201, 239], "subtre": [57, 206, 241], "educ": [58, 93], "cryptograph": 58, "encrypt": 58, "hide": [58, 206], "cipher": 58, "vigener": 58, "hill": [58, 65, 116, 137, 181, 188, 251], "bifid": 58, "rsa": 58, "kid": 58, "feedback": [58, 104, 107, 276], "elgam": 58, "plaintext": [58, 206], "ciphertext": 58, "monoalphabet": 58, "polyalphabet": 58, "crypto": 58, "az": [58, 219], "uppercas": [58, 216], "hello": [58, 244], "world": [58, 103, 125, 135, 244], "helloworld": 58, "check_and_join": 58, "padded_kei": 58, "puppi": 58, "opqrstuvwxi": 58, "puyoqrstvwx": 58, "artist": 58, "aphras": 58, "ara": 58, "hp": 58, "cycle_list": 58, "encipher_shift": 58, "msg": [58, 84], "decipher_shift": 58, "gonavybeatarmi": 58, "ct": [58, 86, 199], "hpobwzcfbubsnz": 58, "deciph": 58, "l1": [58, 67, 69, 70, 115, 118, 124, 136, 197, 199, 202, 219, 226], "l2": [58, 69, 70, 115, 118, 124, 157, 173, 197, 199, 226], "caesar": 58, "juliu": 58, "suetoniu": 58, "protect": [58, 206], "militari": 58, "nephew": 58, "augustu": 58, "reportedli": 58, "r136": 58, "caesar_ciph": 58, "r137": 58, "caesarsmethod": 58, "encipher_rot13": 58, "rot13": 58, "caeser": 58, "midwai": 58, "decipher_rot13": 58, "r138": 58, "decrypt": 58, "tbanilorngnezl": 58, "encipher_affin": 58, "_invers": 58, "cx": [58, 101], "recov": [58, 84, 176, 199, 201, 202, 219, 222], "decipher_affin": 58, "r139": 58, "affine_ciph": 58, "reciph": 58, "navi": 58, "beat": 58, "armi": 58, "trobmvenbgbalv": 58, "encipher_atbash": 58, "enciph": 58, "atbash": 58, "hebrew": 58, "decipher_atbash": 58, "tlmzebyvzgzinb": 58, "r140": 58, "encipher_substitut": 58, "oeyag": 58, "034": 58, "60n": 58, "v4b3": 58, "rm4": 58, "immateri": 58, "anyv": 58, "wherebi": 58, "r141": 58, "substitution_ciph": 58, "encipher_vigener": 58, "me": [58, 121, 138, 181, 206, 228], "mondai": 58, "qrgkkthrzqebpr": 58, "krypto": 58, "sculptur": 58, "cia": 58, "headquart": 58, "r143": 58, "decipher_vigener": 58, "alp": 58, "palimpsest": 58, "emufphzlrfaxyusdjkzldkrnshgnfivj": 58, "betweensubtleshadingandtheabsenc": 58, "blais": 58, "sixteenth": 58, "centuri": [58, 193], "diplomat": 58, "accid": [58, 245], "invent": [58, 201, 224, 277], "giovan": 58, "batista": 58, "belaso": 58, "1553": 58, "civil": [58, 100], "war": 58, "confederaci": 58, "brass": 58, "nsa": 58, "museum": 58, "fort": 58, "mead": 58, "r142": 58, "sender": 58, "assembl": [58, 82, 213], "concaten": [58, 88], "frequenc": [58, 84, 105, 107, 145, 147, 155, 172], "kasiski": 58, "discov": [58, 82, 111, 230, 279], "babbag": 58, "unbreak": 58, "ye": [58, 87, 222], "gonavybeatarmyyesyoucan": 58, "gold": 58, "auto_kei": 58, "goldbuggonavybeatarmyy": 58, "mcydwshkogamkzcelyfgayr": 58, "pt": [58, 66, 67, 68, 70, 71, 72, 73, 212], "vigenere_ciph": 58, "archiv": [58, 137, 219], "20071116100808": 58, "r144": 58, "filebox": 58, "vt": 58, "batman": 58, "goo": 58, "gl": 58, "ijr22d": 58, "decod": 58, "qrgk": 58, "kt": [58, 126], "hrzqe": 58, "bpr": 58, "meetmeonmondai": 58, "encipher_hil": 58, "z_": [58, 218], "r145": 58, "lester": 58, "1920": 58, "r146": 58, "polygraph": 58, "bare": [58, 116], "ceil": [58, 63, 97, 115, 206], "l_1": [58, 62, 108, 191, 216, 232], "l_t": 58, "c_t": 58, "l_i": [58, 191, 216], "decipher_hil": 58, "hill_ciph": 58, "june": [58, 93], "juli": [58, 219], "1929": 58, "306": 58, "312": [58, 181, 224, 251, 253], "ueqdueodoctcwq": 58, "st": [58, 84, 171], "hjeb": 58, "stqq": 58, "ispk": 58, "stzz": 58, "hd": 58, "ormv": 58, "uiki": 58, "encipher_bifid": 58, "polybiu": 58, "printabl": 58, "bifid5": 58, "decipher_bifid": 58, "encipher_bifid5": 58, "encipher_bifid6": 58, "r147": 58, "bifid_ciph": 58, "ieilhhfstsfqy": 58, "ieilh": 58, "hfst": 58, "fqyej": 58, "bmtwmg": 58, "bio": 58, "gold_bug": 58, "hg2sfuei7t": 58, "pug": 58, "heldo": 58, "wor6d": 58, "bifid5_squar": 58, "5x5": 58, "cap": [58, 61, 171, 214, 225], "tradition": [58, 65], "decipher_bifid5": 58, "round_trip": 58, "josi": 58, "osi": 58, "iosi": 58, "qiq": 58, "1901": 58, "felix": 58, "delastel": 58, "onto": [58, 70, 71, 72, 82, 86, 93, 96, 98, 201], "helen": 58, "cryptanalysi": 58, "german": 58, "fridai": 58, "ieilehfstsfxe": 58, "okai": 58, "decipher_bifid6": 58, "8am": 58, "kfkljjhf5mmmktfrgpl": 58, "meetmeonmondayat8am": 58, "bifid6_squar": 58, "6x6": 58, "rsa_public_kei": 58, "totient": [58, 97], "carmichael": [58, 97], "p_n": [58, 62, 65, 84, 202], "multiprim": 58, "land": 58, "reduced_toti": [58, 97], "uniquenss": 58, "rsa_private_kei": 58, "e_0": 58, "canonicalz": 58, "61": [58, 62, 73, 93, 97, 202, 208], "3233": 58, "797": 58, "1577": 58, "multipow": 58, "cryptosystem": 58, "coprim": [58, 84, 97, 167, 199, 219], "30030": 58, "becam": [58, 131], "hardest": 58, "claim": [58, 190, 216, 225], "encipher_rsa": 58, "decipher_rsa": 58, "r148": 58, "rsa_": 58, "28cryptosystem": 58, "r149": 58, "cacr": 58, "uwaterloo": 58, "techreport": 58, "2006": [58, 215], "cacr2006": 58, "r150": 58, "springer": [58, 84, 97, 199, 200, 222], "1007": 58, "2fbfb0055738": 58, "r151": 58, "itii": 58, "manuscript": 58, "1381": 58, "2753": 58, "413": 58, "1193": 58, "823": 58, "r152": 58, "r153": 58, "r154": 58, "r155": 58, "bmod": [58, 202, 206], "vice": [58, 84, 97, 100, 161, 181, 193, 197, 255, 256, 275], "versa": [58, 84, 97, 100, 161, 181, 193, 197, 255, 256, 275], "asymmetr": [58, 73], "puk": 58, "prk": 58, "chines": [58, 97, 199], "k_1": [58, 97, 199, 216], "k_2": 58, "k_n": [58, 65, 199], "p_3": [58, 189], "k_3": 58, "moduli": [58, 97, 199], "2048": [58, 97, 206], "overhead": [58, 98, 203], "modular": [58, 97, 167, 200, 225], "crt": [58, 97, 199], "overcompens": 58, "theorit": 58, "new_msg": 58, "kid_rsa_public_kei": 58, "grade": [58, 85, 186, 202], "school": [58, 215], "bob": [58, 115], "369": 58, "58": [58, 93, 232], "kid_rsa_private_kei": 58, "encipher_kid_rsa": 58, "200": [58, 88, 93, 97, 100, 105, 251], "161": 58, "decipher_kid_rsa": 58, "pub": [58, 251], "pri": 58, "encode_mors": 58, "sep": [58, 206, 223, 237], "mors": 58, "attack": 58, "flank": 58, "r156": 58, "morse_cod": 58, "decode_mors": 58, "word_sep": 58, "mc": [58, 126], "east": 58, "r157": 58, "lfsr_sequenc": 58, "lfsr": 58, "c_k": 58, "golomb": [58, 97], "g157": 58, "autocorrel": 58, "lim_": [58, 63, 65, 82, 84, 213, 273, 277], "balanc": [58, 137, 193, 226, 237], "solomon": 58, "aegean": 58, "park": 58, "laguna": 58, "1967": [58, 200], "lfsr_autocorrel": 58, "lfsr_connection_polynomi": 58, "massei": 58, "m158": 58, "jame": [58, 199], "synthesi": 58, "bch": 58, "tran": 58, "122": [58, 60, 65], "127": [58, 97], "elgamal_public_kei": 58, "elgamal_private_kei": 58, "1031": 58, "636": 58, "212": [58, 84, 200], "mathmat": 58, "dlp": 58, "is_primitive_root": [58, 97], "encipher_elgam": 58, "c2": [58, 67, 74, 88, 90, 115, 157, 171, 214, 222, 226, 254, 257, 284], "encryp": 58, "decipher_elgam": 58, "eucliden": 58, "dh_public_kei": 58, "dh_private_kei": 58, "_p": [58, 171, 197, 199, 201, 213, 216, 224], "_g": 58, "diffi": 58, "hellman": [58, 97], "publicli": 58, "secretli": 58, "dh_shared_kei": 58, "sk": 58, "gm_public_kei": 58, "goldwass": 58, "micali": 58, "gm_private_kei": 58, "b_n": [58, 62, 86, 193, 209], "jacobi_symbol": [58, 97], "reconstruct": [58, 93, 199, 219, 278], "residuos": 58, "entropi": [58, 226], "encipher_gm": 58, "public_kei": 58, "gm": [58, 174], "decipher_gm": 58, "encipher_railf": 58, "rail": 58, "railfenc": 58, "horel": 58, "ollwd": 58, "r160": 58, "rail_fence_ciph": 58, "decipher_railf": 58, "diffgeom": 59, "euclidean": [59, 70, 72, 181, 197, 199, 202], "r161": 59, "chart": [59, 192], "parameter": [59, 66, 67, 70, 73, 219], "r162": 59, "sussman": 59, "wisdom": 59, "farr": 59, "2013": [59, 69, 88, 281], "tranform": 59, "cartesian": [59, 100, 139, 144, 158, 161, 166, 187, 192, 193, 214, 225, 244, 255, 256, 258, 259, 268], "polar": [59, 63, 65, 67, 73, 100, 109, 141, 192, 214, 218, 225, 268], "relation_dict": 59, "car2d": 59, "pol": 59, "coordinatesymbol": 59, "jacobian": [59, 93, 135, 224], "jacobian_determin": 59, "r163": 59, "coordinate_system": 59, "base_oneform": 59, "coord_index": 59, "oneform": 59, "base_scalar": 59, "basescalarfield": 59, "base_vector": [59, 251], "coord_funct": 59, "to_si": 59, "coord": [59, 72, 74, 111, 169, 185], "immutabledensematrix": [59, 88, 89, 90, 91, 226], "rn": 59, "r2_r": 59, "r2_p": 59, "jacobian_matrix": 59, "point_to_coord": 59, "coord_si": [59, 254], "imbu": 59, "difficulti": [59, 122], "arriv": [59, 199, 216, 218, 222, 226, 283], "inappropri": 59, "poin": 59, "unappropri": 59, "fy": [59, 192, 223], "ftheta": 59, "basevectorfield": 59, "point_p": 59, "point_r": 59, "s_field": 59, "dxi": 59, "v1": [59, 70, 93, 118, 138, 181, 182, 185, 226, 245, 251, 254, 255, 256, 257], "v2": [59, 70, 93, 118, 181, 182, 185, 245, 251, 254, 255, 256, 257], "v_1": [59, 201, 224], "v_2": [59, 201], "e_x": [59, 232], "e_i": [59, 193, 216, 232], "e_r": 59, "c_xy": 59, "c_xr": 59, "unfortun": [59, 61, 98, 205, 219], "e_rho": 59, "form_field": 59, "exterior": [59, 73], "dg": 59, "tensorproduct": [59, 168, 170, 227, 228], "multilinear": 59, "wedg": [59, 82], "tp1": 59, "tp": [59, 143, 170, 197], "wedgeproduct": 59, "wp1": 59, "liederiv": 59, "v_field": 59, "transport": 59, "pushforward": 59, "e_theta": 59, "basecovarderivativeop": 59, "christoffel": 59, "metric_to_christoffel_2nd": 59, "ch": [59, 93, 219], "cvd": 59, "covarderivativeop": 59, "intcurve_seri": 59, "vector_field": [59, 258], "start_point": 59, "dt": [59, 65, 125, 138, 180, 181, 183, 189, 190, 202, 222, 283], "f_i": [59, 82, 93, 199, 203], "movement": 59, "intcurve_diffequ": 59, "init_cond": 59, "f_1": [59, 62, 65, 82, 107, 117, 120, 139, 193, 199, 202, 222], "f_0": [59, 62, 117, 199], "vectors_in_basi": 59, "kept": [59, 173, 190, 244, 278], "twoform_to_matrix": 59, "twoform": 59, "e_j": 59, "metric_to_christoffel_1st": 59, "levi": [59, 65, 226, 232], "civita": [59, 65, 232], "metric_to_riemann_compon": 59, "non_trivial_metr": 59, "dtheta": 59, "drho": 59, "metric_to_ricci_compon": 59, "ricci": 59, "fft": [60, 138], "ifft": 60, "ntt": 60, "intt": 60, "fwht": 60, "ifwht": 60, "mobius_transform": 60, "inverse_mobius_transform": 60, "convolution_fft": 60, "convolution_ntt": 60, "convolution_fwht": 60, "convolution_subset": 60, "covering_product": 60, "intersecting_product": 60, "radix": 60, "r164": 60, "coolei": 60, "93tukey_fft_algorithm": 60, "r165": 60, "fastfouriertransform": 60, "r166": 60, "r167": 60, "pz": [60, 105, 232], "643": [60, 97], "767": 60, "387": 60, "415": 60, "384": 60, "353": [60, 93], "r168": 60, "apfloat": 60, "r169": 60, "numbertheoretictransform": 60, "r170": 60, "discrete_fourier_transform_": 60, "r171": 60, "r172": 60, "r173": 60, "wht": 60, "r174": 60, "hadamard_transform": 60, "r175": 60, "fast_walsh": 60, "93hadamard_transform": 60, "r176": 60, "r177": 60, "mobiu": [60, 97], "lattic": [60, 219], "bitmask": 60, "r178": 60, "b6bius_inversion_formula": 60, "r179": 60, "csail": 60, "mit": 60, "rrw": 60, "conv": 60, "r180": 60, "arxiv": [60, 62, 65, 93, 109, 202, 244], "1211": 60, "0189": 60, "r181": 60, "r182": 60, "r183": 60, "888": 60, "444": 60, "1283": 60, "19351": 60, "14219": 60, "15502": 60, "44": [60, 62, 93, 97, 215, 226], "41": [60, 67, 93, 97, 197, 219], "63": [60, 93, 97], "r184": 60, "convolution_theorem": 60, "r185": 60, "333": [60, 97], "555": 60, "222": 60, "666": 60, "15555": 60, "19404": 60, "r186": 60, "r187": 60, "68": [60, 85, 93, 97, 219], "48": [60, 67, 101, 219, 224, 226, 273], "2057": 60, "1870": 60, "r188": 60, "radioeng": 60, "cz": [60, 219], "fulltext": 60, "2002": [60, 193, 200, 203], "02_03_40_42": 60, "r189": 60, "r190": 60, "r191": 60, "AND": [60, 87], "327": [60, 222], "r192": 60, "44288293815837": 61, "4429": 61, "4428829381583662470158809900606936986146216893757": 61, "28902548222223624241": 61, "091999668350375232456": 61, "14159265358979": [61, 65, 224], "333333333333333": [61, 196, 218], "1415926535": 61, "7182818284": 61, "100000": [61, 97, 105], "951": 61, "95678796130331164628399634646042209010610577945815": 61, "gmpy": [61, 196, 197, 282], "googl": [61, 191, 192, 225], "100000000000000": 61, "1000000000": 61, "125000000000000000000000000000": 61, "100000000000000005551115123126": 61, "100000000000000000000000000000": 61, "1415": 61, "uncertainti": [61, 176], "003": 61, "31417": 61, "propag": [61, 70, 142, 145], "5000": [61, 100], "50000000000000000000000000000": 61, "varphi": [61, 65, 201, 206, 222], "erron": 61, "34665576869e": 61, "208": [61, 202], "64613129282185e": 61, "60123853010113e": 61, "210": [61, 97, 219], "thousand": [61, 97, 272], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 61, "binet": 61, "104": 61, "1336": 61, "portion": [61, 73, 88, 93], "meaningless": 61, "012297": 61, "9562288417661": 61, "956": 61, "29128599706266": 61, "2912859970626635404072825905956005414986193682745": 61, "14159265358979323846264338328": 61, "integrand": [61, 65, 81, 82, 84, 216], "struggl": [61, 205], "346": 61, "34635637913639": 61, "dealt": [61, 82], "504067061906928": 61, "50406706190692837199": 61, "wrap_lin": [61, 84, 85, 93, 101, 186, 193, 194, 205, 206, 222], "intgrl": 61, "extrapol": [61, 213], "richardson": [61, 213, 225], "slowli": [61, 213], "64493406684823": 61, "577215664901533": 61, "57721566490153286060651209008240243104215933593992": 61, "10000000": [61, 202], "20000000": [61, 202], "693147255559946": 61, "tune": [61, 85, 186, 206], "worthwhil": 61, "hypergeometr": [61, 62, 75, 81, 82, 200, 217, 218, 222, 224, 226, 263, 283], "ramanujan": [61, 62, 97], "9801": 61, "1103": 61, "26390": 61, "396": [61, 121], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 61, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 61, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 61, "355": [61, 97, 200], "113": [61, 97, 219], "33333": [61, 84], "635": 61, "504": [61, 200], "130198866629986772369127970337": 61, "49": [61, 62, 97, 101, 199, 219], "___________": [61, 101, 222], "bell": [62, 155, 208, 244], "k_sym": 62, "binom": [62, 97, 226, 283], "dotsc": [62, 208], "j_1": [62, 150, 151, 168, 191, 208, 227], "j_2": [62, 150, 151, 168, 191, 208], "dotsb": [62, 208], "atop": [62, 65, 208, 216], "2j_2": [62, 208], "3j_2": [62, 208], "j_": [62, 65, 82, 84, 168, 208, 216, 277], "bernoulli": [62, 65, 202, 206, 222, 224, 226], "877": 62, "4140": 62, "21147": 62, "115975": 62, "846749014511809332450147": 62, "luca": [62, 97, 206, 212], "genocchi": [62, 65, 202], "r193": 62, "bell_numb": 62, "r194": 62, "bellnumb": 62, "r195": 62, "bellpolynomi": 62, "hurwitz": [62, 65], "6k": 62, "appel": [62, 65], "confer": [62, 98, 281], "r200": 62, "66": [62, 88, 93, 202, 206], "1000001": 62, "andr": [62, 202], "appellseq": [62, 202], "bernoulli_poli": [62, 202], "r196": 62, "bernoulli_numb": 62, "r197": 62, "bernoulli_polynomi": [62, 202], "r198": 62, "bernoullinumb": 62, "r199": 62, "bernoullipolynomi": 62, "luschni": [62, 65, 202], "manifesto": 62, "r201": 62, "2009": [62, 65, 97, 191, 202], "06743": [62, 65, 202], "_k": [62, 65, 84, 191, 201, 226], "6435": 62, "pascal": [62, 97], "4th": [62, 63, 79, 93, 97, 138], "195": 62, "r202": 62, "johndcook": 62, "binomial_coeffici": [62, 97], "c_n": [62, 65, 86, 202, 222], "429": [62, 206], "1430": 62, "4862": 62, "39764993382373624267": 62, "020884341620842555705": 62, "r203": 62, "catalan_numb": 62, "r204": 62, "catalannumb": [62, 206], "r205": 62, "r206": 62, "geomet": [62, 193], "mathcircl": 62, "2j": [62, 199, 226], "1385": [62, 202], "272": [62, 202], "7936": [62, 202], "2702765": 62, "4096": 62, "euler_poli": [62, 202], "r207": 62, "euler_numb": 62, "r208": 62, "eulernumb": 62, "r209": 62, "alternating_permut": 62, "r210": 62, "alternatingpermut": 62, "swing": 62, "factorial2": [62, 172, 206], "fallingfactori": [62, 206], "subfactori": [62, 206, 244], "derang": [62, 244], "r212": 62, "generate_derang": [62, 244], "r211": 62, "r213": 62, "double_factori": 62, "texttt": [62, 214], "r214": 62, "r215": 62, "paul": [62, 241], "235": 62, "268": 62, "1995": [62, 200, 218, 224], "f_z": [62, 187, 258], "f_2": [62, 82, 107, 117, 120, 139, 199, 216, 222], "r217": 62, "fibonacci_numb": 62, "r218": 62, "fibonaccinumb": 62, "t_0": [62, 219], "149": [62, 97], "r219": 62, "r220": 62, "tribonaccinumb": 62, "r221": 62, "oei": [62, 65, 97, 202], "a000073": 62, "137": [62, 93, 109], "205": [62, 82, 216], "5269": 62, "761": 62, "280": 62, "83711": 62, "27720": 62, "30247": 62, "9900": 62, "983697455232980674869851942390639915940": 62, "r222": 62, "harmonic_numb": 62, "r223": 62, "harmonicnumb": [62, 206], "r224": 62, "harmonicnumber2": 62, "l_0": [62, 108, 232, 233], "47": [62, 65, 93, 97, 109, 144, 176, 205], "76": [62, 65, 93, 97, 199, 202], "r225": 62, "lucas_numb": 62, "r226": 62, "lucasnumb": 62, "2t": 62, "genocchi_poli": [62, 202], "r227": 62, "genocchi_numb": 62, "r228": 62, "genocchinumb": 62, "r229": 62, "mathcal": [62, 63, 82, 107, 136, 168, 191, 202, 214], "a000111": [62, 202], "zigzag": 62, "li": [62, 65, 73, 84, 97, 171, 206, 261], "50521": [62, 202], "691": 62, "2730": 62, "andre_poli": [62, 202], "r230": 62, "r231": 62, "eulerzigzagnumb": 62, "r232": 62, "irrelev": 62, "r233": 62, "number_theori": 62, "r234": 62, "pentagonal_number_theorem": 62, "multifactori": 62, "pochhamm": [62, 206, 218], "r235": 62, "r236": 62, "pochhammer_symbol": 62, "274": 62, "225": [62, 97, 200], "511": 62, "9330": 62, "34105": 62, "42525": 62, "22827": 62, "5880": 62, "750": 62, "r237": 62, "stirling_numbers_of_the_first_kind": 62, "r238": 62, "stirling_numbers_of_the_second_kind": 62, "multiset": [62, 82, 241, 244], "nc": 62, "nt": [62, 244], "babi": [62, 97, 244], "aa": [62, 191], "bb": [62, 191, 218, 244], "multiset_combin": [62, 244], "aab": [62, 244], "aabc": 62, "aaaabbbbcccc": 62, "m_1": [62, 107, 150, 168, 191, 219], "m_2": [62, 120, 139, 150, 168, 191], "m_k": 62, "r239": 62, "r240": 62, "tinyurl": 62, "cep849r": 62, "ba": [62, 244], "multiset_permut": [62, 244], "r241": 62, "aabbc": 62, "mississippi": [62, 244], "609": 62, "1521": 62, "1768": 62, "1224": [62, 97], "579": 62, "197": 62, "r242": 62, "undergradu": 62, "csse": 62, "uwa": 62, "au": 62, "cits7209": 62, "707106781186548": 63, "tangent": [63, 67, 69, 73, 84, 203, 222], "643501108793284": 63, "r243": 63, "ib": [63, 126], "complex_conjug": 63, "polar_lift": [63, 65, 218], "periodic_argu": 63, "principal_branch": [63, 82], "r247": 63, "csc": [63, 99, 206, 215], "sec": [63, 84, 105, 201, 206, 215, 283], "acsc": [63, 206], "asec": [63, 206], "acot": [63, 206], "r244": 63, "trigonometric_funct": 63, "r245": 63, "r246": 63, "elementaryfunct": 63, "trigonometryangl": 63, "r248": 63, "r249": 63, "r250": 63, "r251": 63, "r252": 63, "r253": 63, "cotang": [63, 203], "r254": 63, "r255": 63, "r256": 63, "secant": [63, 202], "r257": 63, "r258": 63, "r259": 63, "cosec": 63, "r260": 63, "r261": 63, "r262": 63, "unnorm": [63, 65], "qquad": [63, 176, 199], "jn": [63, 65, 168, 202, 206, 277], "spheric": [63, 109, 115, 150, 191, 192, 202, 251, 255, 256, 277], "r263": 63, "sinc_funct": 63, "asinh": [63, 206], "r264": 63, "inverse_trigonometric_funct": 63, "r265": 63, "r266": 63, "r267": 63, "r268": 63, "r269": 63, "r270": 63, "r271": 63, "r272": 63, "arctan": [63, 203, 206], "acoth": [63, 206], "r273": 63, "r274": 63, "arccot": [63, 206], "r278": 63, "r275": 63, "r276": 63, "r277": 63, "arcsec": [63, 206], "r279": 63, "r280": 63, "r281": 63, "arccsc": [63, 206], "quadrant": [63, 197, 225], "clock": [63, 215], "reurn": 63, "r282": 63, "r283": 63, "r284": 63, "arctan2": [63, 206], "hyperbolicfunct": 63, "coth": [63, 206, 218], "acosh": [63, 206], "atanh": [63, 203, 206, 216], "sech": [63, 206], "csch": [63, 206], "asech": [63, 206], "r285": 63, "hyperbolic_funct": 63, "r286": 63, "r287": 63, "arcsech": [63, 206], "acsch": [63, 206], "r288": 63, "r289": 63, "r290": 63, "arccsch": [63, 206], "567": 63, "r291": 63, "r292": 63, "ceilingfunct": 63, "r293": 63, "r294": 63, "floorfunct": 63, "roundfunct": 63, "r295": 63, "lfloor": [63, 197, 225, 226], "rfloor": [63, 197, 225, 226], "fractional_part": 63, "r296": 63, "fractionalpart": 63, "lambertw": [63, 203, 206, 224, 225, 284], "r297": 63, "w_k": 63, "635564016364870": 63, "34747534407696": 63, "41624341514535": 63, "lambert_w_funct": 63, "exprcondpair": 63, "cond": [63, 82, 84, 214], "piecewise_fold": 63, "folded_cond": 63, "ITE": [63, 87, 206], "piecewise_exclus": 63, "_eval_integr": [63, 84], "piecewise_integr": 63, "as_expr_set_pair": 63, "skip_nan": 63, "mutual": [63, 82, 190], "conjunct": [63, 87, 192, 216, 237, 283], "identityfunct": 63, "supremum": [63, 214], "r298": 63, "directed_complete_partial_ord": 63, "r299": 63, "lattice_": 63, "28order": 63, "global_paramet": 63, "rootof": [63, 202], "real_root": [63, 202, 224], "rootoftool": [63, 93, 202], "r300": 63, "square_root": 63, "r301": 63, "r302": 63, "root_of_un": 63, "r303": 63, "principal_valu": [63, 84], "r304": 63, "cuberoot": 63, "powdenest": [63, 218], "misc": [63, 88, 247], "r305": 63, "r306": 63, "r307": 63, "cube_root": 63, "r308": 63, "delta_funct": [65, 84], "int_": [65, 81, 82, 84, 202, 209, 273, 277], "sum_i": [65, 213], "is_simpl": 65, "tensor_funct": 65, "kroneckerdelta": [65, 90, 171, 206, 218], "r309": 65, "deltafunct": [65, 84], "h0": 65, "electron": [65, 109, 215], "signal": [65, 87, 97, 105, 107, 138, 199, 278], "improp": [65, 84], "convolut": [65, 208], "r310": 65, "heavisidestepfunct": 65, "r311": 65, "iv": [65, 203], "105": [65, 97, 202, 219], "parg": 65, "singularity_funct": 65, "singularityfunct": [65, 84, 100], "macaulai": 65, "heavisidediracdelta": 65, "r312": 65, "r313": 65, "r314": 65, "r315": 65, "r316": 65, "setminu": [65, 82], "17805383034794561964694160130": 65, "65092319930185633889": 65, "8724366472624298171": 65, "r317": 65, "r318": 65, "r319": 65, "loggammafunct": 65, "r320": 65, "espinosa": 65, "moll": 65, "r325": 65, "19093197": 65, "5173168": 65, "ni": [65, 97], "r321": 65, "polygamma_funct": 65, "r322": 65, "polygammafunct": 65, "r323": 65, "r324": 65, "polygamma2": 65, "2004": [65, 200, 219], "115": 65, "r326": 65, "digamma_funct": 65, "r327": 65, "digammafunct": 65, "r328": 65, "r329": 65, "trigamma_funct": 65, "r330": 65, "trigammafunct": 65, "r331": 65, "int_x": 65, "_1f_1": 65, "confluent": [65, 216], "xt": 65, "expint": [65, 206], "r332": 65, "incomplete_gamma_funct": 65, "upper_incomplete_gamma_funct": 65, "r333": 65, "r334": 65, "r335": 65, "gamma2": 65, "r336": 65, "gamma3": 65, "r337": 65, "exponential_integr": 65, "relation_with_other_funct": 65, "int_0": [65, 82, 84, 273, 283], "r338": 65, "lower_incomplete_gamma_funct": 65, "r339": 65, "r340": 65, "r341": 65, "r342": 65, "multigamma": 65, "gamma_p": 65, "r343": 65, "multivariate_gamma_funct": 65, "beta_funct": 65, "eulerian": 65, "02671848900111377452242355235388489324562": 65, "2112723729365330143": 65, "7655283165378005676": 65, "r344": 65, "r345": 65, "betafunct": 65, "r346": 65, "error_funct": 65, "999999984582742099719981147840": 65, "1296959": 65, "73071763923152794095062": 65, "r347": 65, "r348": 65, "r349": 65, "r350": 65, "0000000154172579002800188521596734869": 65, "r351": 65, "r352": 65, "r353": 65, "r354": 65, "5648024145755525987042919132": 65, "995322265018952734162069256367": 65, "r355": 65, "r356": 65, "r357": 65, "r358": 65, "179143454621291692285822705344": 65, "r359": 65, "inverse_funct": 65, "r360": 65, "inverseerf": [65, 206], "r361": 65, "r362": 65, "inverseerfc": [65, 206], "r363": 65, "inverseerf2": 65, "fresnelintegr": 65, "343415678363698242195300815958": 65, "fresnelc": [65, 206, 216], "r364": 65, "fresnel_integr": 65, "r365": 65, "r366": 65, "r367": 65, "r368": 65, "wrench": 65, "jr": 65, "vicki": 65, "allei": 65, "488253406075340754500223503357": 65, "r369": 65, "r370": 65, "r371": 65, "r372": 65, "r373": 65, "ei": [65, 82, 201, 206, 216, 219, 222, 232], "background": [65, 85, 186, 189, 281], "cauchi": [65, 82, 84, 197, 222, 226], "219383934395520": 65, "21938393439552": 65, "shi": [65, 82, 206, 216], "e1": [65, 67, 74, 121, 196, 201, 213, 222, 225], "hyperbol": [65, 203, 225, 279, 283], "r374": 65, "r375": 65, "r376": 65, "sfu": [65, 84], "cbm": [65, 84], "aand": [65, 84], "page_228": 65, "int_1": [65, 82], "zt": [65, 82], "unbranch": [65, 82], "meijerg": [65, 76, 82, 84, 206, 226, 283], "postiv": 65, "r377": 65, "r378": 65, "expintegral": [65, 206], "r379": 65, "04516378011749278484458888919": 65, "0652795784357498247001125598": 65, "08346052231061726610939702133": 65, "soldner": 65, "45136923488338": 65, "r380": 65, "logarithmic_integr": 65, "r381": 65, "logarithmicintegr": 65, "r382": 65, "r383": 65, "soldnersconst": 65, "92242131492155809316615998938": 65, "r384": 65, "r385": 65, "r386": 65, "r387": 65, "trigonometric_integr": 65, "_1": [65, 93, 115, 181, 191, 216, 245], "somewhat": [65, 84, 121, 197], "r388": 65, "r389": 65, "r390": 65, "laurent": [65, 197, 203, 222], "j_n": [65, 168], "r391": 65, "r392": 65, "r393": 65, "r394": 65, "yn": [65, 206, 212], "r395": 65, "i_": [65, 82, 216, 226, 227], "iz": 65, "r396": 65, "k_": [65, 82, 116, 133, 134], "r397": 65, "hankel1": [65, 206], "hankel": [65, 84], "iy_": 65, "hankel2": [65, 206], "r398": 65, "hankelh1": [65, 206], "r399": 65, "hankelh2": [65, 206], "orthopoli": [65, 202], "spherical_bessel_fn": [65, 202], "3j": [65, 150, 191], "099419756723640344491": 65, "054525080242173562897": 65, "r400": 65, "y_n": [65, 219], "18525034196069722536": 65, "014895573969924817587": 65, "r401": 65, "jn_zero": 65, "besseljzero": 65, "sph_jn": 65, "7635": 65, "095": 65, "323": [65, 97], "515": 65, "marcumq": 65, "marcum": 65, "q_m": 65, "r402": 65, "marcum_q": 65, "r403": 65, "airybas": 65, "airyai": [65, 206, 222], "ai": [65, 97, 202, 219, 247, 283], "airyaiprim": [65, 206], "22740742820168557599192443603787379946077222541710": 65, "airybi": [65, 206, 222], "airybiprim": [65, 206], "r404": 65, "airy_funct": 65, "r405": 65, "r406": 65, "encyclopediaofmath": 65, "r407": 65, "airyfunct": 65, "41230258795639848808323405461146104203453483447240": 65, "r408": 65, "r409": 65, "r410": 65, "r411": 65, "61825902074169104140626429133247528291577794512415": 65, "r412": 65, "r413": 65, "r414": 65, "r415": 65, "27879516692116952268509756941098324140300059345163": 65, "r416": 65, "r417": 65, "r418": 65, "r419": 65, "bspline": 65, "bspline_basi": 65, "knot": 65, "cubic": [65, 193, 202, 219, 224], "bspline_basis_set": 65, "r420": 65, "interpolating_splin": 65, "131": [65, 181], "39": [65, 97, 205], "interpolating_poli": [65, 202], "zeta_funct": 65, "admit": [65, 222], "lerch": 65, "transcend": 65, "lerchphi": [65, 206], "dirichlet_eta": [65, 206], "20205690315959": 65, "polylog": [65, 206], "r421": 65, "r422": 65, "hurwitz_zeta_funct": 65, "r423": 65, "dirichlet_eta_funct": 65, "r424": 65, "polylogarithm": 65, "sheet": [65, 215], "phi_0": 65, "ze": 65, "r425": 65, "bateman": 65, "erdelyi": 65, "1953": [65, 201], "york": [65, 82, 137, 216, 224], "mcgraw": [65, 116, 137, 181, 188, 251], "r426": 65, "r427": 65, "lerch_transcend": 65, "stieltj": [65, 206], "gamma_": [65, 108, 110], "r428": 65, "stieltjes_const": 65, "ap": [65, 69, 216], "bq": [65, 194, 195, 216], "a_p": [65, 82, 216, 283], "b_q": [65, 82, 216, 283], "_pf_q": [65, 216, 222, 283], "unicod": [65, 85, 93, 186, 206, 237, 277], "r429": 65, "r430": 65, "generalized_hypergeometric_funct": 65, "convergence_stat": 65, "radius_of_converg": 65, "radiu": [65, 67, 71, 73, 128, 130, 140, 144, 192, 225, 226, 261], "meijer": [65, 75, 83, 84, 263, 273, 283], "mellin": [65, 84], "barn": 65, "b_m": [65, 82, 224], "confusingli": 65, "int_l": [65, 82, 216], "contour": [65, 67, 82, 192, 216], "__1": 65, "subvector": 65, "aother": 65, "bm": 65, "bother": [65, 278], "slater": [65, 216], "allow_hyp": [65, 218], "subsum": 65, "r431": 65, "r432": 65, "meijer_g": 65, "get_period": [65, 82], "appellf1": [65, 206], "b2": [65, 97, 100, 101, 112, 121, 138, 181, 195, 197, 206, 216, 219, 222, 257], "0063339426292673": 65, "172870711": 65, "659936": 65, "15605338197184": 65, "r433": 65, "appell_seri": 65, "r434": 65, "hypergeometricfunct": 65, "elliptic_integr": 65, "elliptic_k": [65, 206], "tfrac": [65, 222, 226], "eccentr": [65, 67], "50923695405127": 65, "625146415202697": 65, "elliptic_f": [65, 206], "r435": 65, "r436": 65, "ellipticintegr": 65, "elliptick": [65, 206], "909449841483": 65, "74720545502474": 65, "r437": 65, "r438": 65, "ellipticf": 65, "elliptic_": [65, 67, 206], "55203744279187": 65, "290764986058437": 65, "991052601328069": 65, "81879421395609": 65, "r439": 65, "r440": 65, "elliptice2": 65, "r441": 65, "elliptic": [65, 206], "elliptic_pi": [65, 206], "50232379629182": 65, "760939574180767": 65, "29136443417283": 65, "32555634906645": 65, "r442": 65, "r443": 65, "ellipticpi3": 65, "r444": 65, "ellipticpi": [65, 206], "mathieu_funct": 65, "mathieubas": 65, "mathieusprim": [65, 206], "mathieuc": [65, 206], "mathieucprim": [65, 206], "r445": 65, "r446": 65, "r447": 65, "r448": 65, "mathieuandspheroidalfunct": 65, "r449": 65, "r450": 65, "r451": 65, "r452": 65, "r453": 65, "r454": 65, "r455": 65, "r456": 65, "r457": 65, "r458": 65, "r459": 65, "r460": 65, "chebyshevu": [65, 206], "chebyshevt_root": 65, "chebyshevu_root": 65, "assoc_legendr": [65, 206], "hermite_prob": 65, "jacobi_poli": [65, 202], "gegenbauer_poli": [65, 202], "chebyshevt_poli": [65, 202], "chebyshevu_poli": [65, 202], "hermite_poli": [65, 202], "legendre_poli": [65, 202], "laguerre_poli": [65, 202], "r461": 65, "jacobi_polynomi": 65, "r462": 65, "jacobipolynomi": 65, "r463": 65, "jacobip": [65, 206], "jacobi_norm": 65, "normilz": 65, "p_m": 65, "delta_": [65, 168, 176, 191], "r464": 65, "r465": 65, "r466": 65, "hermite_prob_poli": [65, 202], "r467": 65, "gegenbauer_polynomi": 65, "r468": 65, "gegenbauerpolynomi": 65, "r469": 65, "gegenbauerc3": 65, "r470": 65, "chebyshev_polynomi": 65, "r471": 65, "chebyshevpolynomialofthefirstkind": 65, "r472": 65, "chebyshevpolynomialofthesecondkind": 65, "r473": 65, "r474": 65, "u_n": [65, 84, 199, 201, 202], "r475": 65, "r476": 65, "r477": 65, "r478": 65, "r479": 65, "chebyshev_root": 65, "r480": 65, "legendre_polynomi": 65, "r481": 65, "legendrepolynomi": 65, "r482": 65, "legendrep": [65, 206], "r483": 65, "legendrep2": 65, "r484": 65, "associated_legendre_polynomi": 65, "r485": 65, "r486": 65, "r487": 65, "r488": 65, "hermite_polynomi": 65, "r489": 65, "hermitepolynomi": 65, "r490": 65, "hermiteh": [65, 206], "probabilist": [65, 202, 226], "he_n": [65, 202], "telephon": 65, "a000085": 65, "232": 65, "764": 65, "2620": 65, "9496": 65, "r491": 65, "r492": 65, "l_n": [65, 84, 202], "r493": 65, "laguerre_polynomi": 65, "r494": 65, "laguerrepolynomi": 65, "r495": 65, "laguerrel": [65, 206], "r496": 65, "laguerrel3": 65, "r497": 65, "generalized_laguerre_polynomi": 65, "r498": 65, "associatedlaguerrepolynomi": 65, "r499": 65, "r500": 65, "spherical_harmon": 65, "ynm": [65, 191], "ynm_c": 65, "znm": 65, "r501": 65, "r502": 65, "sphericalharmon": 65, "r503": 65, "sphericalharmonici": 65, "r504": 65, "r505": 65, "r506": 65, "r507": 65, "z_n": [65, 200], "r508": 65, "r509": 65, "r510": 65, "eijk": 65, "levicivita": [65, 93], "eval_levicivita": 65, "pseudotensor": 65, "delta_rang": [65, 171], "kroneck": [65, 170, 171, 191, 227, 232], "r511": 65, "kronecker_delta": [65, 171], "indices_contain_equal_inform": [65, 171], "fermi": [65, 171], "above_fermi": [65, 171], "below_fermi": [65, 171], "is_above_fermi": [65, 171], "is_below_fermi": [65, 171], "is_only_below_fermi": [65, 171], "is_only_above_fermi": [65, 171], "killable_index": [65, 171], "preferred_index": [65, 171], "point2d": [66, 67, 68, 69, 70, 72, 73, 74], "arbitrary_point": [66, 67, 68, 69, 70, 71, 73], "polyfunc": [66, 202], "ambient_dimens": [66, 68, 70, 72], "plot_interv": [66, 67, 70, 73], "lower_bound": [66, 67, 70, 73], "upper_bound": [66, 67, 70, 73], "counterclockwis": [66, 67, 68, 72, 100, 101], "geometryent": [66, 67, 68, 70, 72, 73, 74], "hradiu": 67, "vradiu": 67, "ellipt": [67, 97, 193], "geometryerror": [67, 70, 73, 74], "radii": 67, "foci": 67, "periapsi": 67, "apoapsi": 67, "focus_dist": 67, "shortest": [67, 70, 73, 189, 212, 218, 222, 244], "auxiliary_circl": 67, "xmin": [67, 68, 70, 72, 73, 192], "ymin": [67, 68, 70, 72, 73, 192], "xmax": [67, 68, 70, 72, 73, 192], "ymax": [67, 68, 70, 72, 73, 192], "rectangl": [67, 68, 70, 72, 73, 192, 202], "director_circl": 67, "perpendicular": [67, 70, 71, 73, 86, 115, 129, 144, 190], "director": 67, "130": 67, "r512": 67, "encloses_point": [67, 68, 73], "border": [67, 73], "_slope": 67, "slope": [67, 68, 70, 73, 100, 101, 105, 115], "eq1": [67, 222, 224, 225], "eq2": [67, 87, 222, 225], "r513": 67, "108270": 67, "r514": 67, "equation_of_a_shifted_ellips": 67, "evolut": 67, "focal": [67, 140, 144], "100500": 67, "363": [67, 97, 200], "175": [67, 93, 199, 200], "is_tang": [67, 69], "tangent_lin": 67, "normal_lin": 67, "line2d": [67, 70, 73], "quartic": [67, 202, 224], "2020": [67, 150], "polar_second_moment_of_area": [67, 73], "moment": [67, 73, 100, 101, 123, 131, 134, 180, 192, 202, 219, 226], "constitu": [67, 73, 118, 181, 212, 251], "planar": [67, 73, 101, 115, 144], "resist": [67, 73, 100, 101, 215], "deflect": [67, 73, 100, 101], "bend": [67, 73, 100, 102, 268], "r515": 67, "polar_moment_of_inertia": [67, 73], "random_point": [67, 70, 71], "arb": 67, "364": 67, "notimpl": [67, 201], "second_moment_of_area": [67, 73], "centroid": [67, 73, 74, 100], "i_xx": [67, 73], "i_yi": [67, 73], "i_xi": [67, 73], "ellis": 67, "r516": 67, "list_of_second_moments_of_area": 67, "section_modulu": [67, 73], "sympify": [67, 73, 100, 103, 112, 118, 142, 145, 183], "farthest": [67, 73], "s_x": [67, 73], "s_y": [67, 73], "r517": 67, "semilatus_rectum": 67, "semi": [67, 70, 97], "latu": 67, "rectum": 67, "chord": 67, "conic": [67, 219, 251], "directrix": 67, "r518": 67, "semilatusrectum": 67, "r519": 67, "latus_rectum": 67, "collinear": [67, 69, 71, 72, 73, 192], "gx": 67, "hy": 67, "synonym": [67, 201], "p4": [67, 70, 72, 73, 192], "boundari": [68, 70, 100, 101, 185, 203, 214, 222, 226], "t2": [68, 73, 74, 97, 112, 118, 219, 226, 232], "ordering_of_class": 68, "is_similar": [68, 70, 73, 74], "uniform": [68, 192, 224, 226], "enlarg": 68, "shrink": [68, 82], "parameter_valu": [68, 71], "pent": 68, "rpent": 68, "rcirc": 68, "entity1": 69, "entity2": 69, "zp": 69, "is_collinear": [69, 72], "segment2d": [69, 70, 73, 74], "wikipappu": 69, "bc": [69, 103, 244, 247, 257], "subs_point": 69, "p11": 69, "p12": 69, "p13": 69, "p21": 69, "p22": 69, "p23": 69, "ll1": 69, "ll2": 69, "ll3": 69, "ll4": 69, "ll5": 69, "ll6": 69, "pp1": 69, "pp2": 69, "pp3": 69, "encyclopedia": [69, 188], "apr": 69, "s_hexagon_theorem": 69, "clockwis": [69, 84, 88, 100, 101, 103], "overlap": [69, 74, 96, 193, 214, 247], "infanc": 69, "geometryresult": 69, "fair": [69, 226], "angle_between": [70, 71, 73, 181], "reflex": 70, "eman": 70, "readili": [70, 93], "sw": 70, "obtus": 70, "smallest_angle_between": 70, "line3d": [70, 71, 72], "is_perpendicular": [70, 71, 72, 73], "ray2d": [70, 73], "closing_angl": 70, "are_concurr": [70, 71], "concurr": [70, 71, 203], "l3": [70, 124, 199], "l4": [70, 124], "bisector": [70, 73], "p5": [70, 72, 73, 192], "p6": [70, 73, 192], "p7": [70, 73, 192], "segment3d": [70, 71], "direction_ratio": [70, 72], "is_parallel": [70, 71], "parallel_lin": 70, "perpendicular_lin": [70, 71], "perpendicular_seg": 70, "enpoint": 70, "reform": 70, "92": [70, 200, 222, 226], "ccw": [70, 73], "ray3d": [70, 71, 144], "xdirect": 70, "ydirect": 70, "midpoint": [70, 72, 73, 84, 192, 257], "170": [70, 226], "341": 70, "perpendicular_bisector": 70, "linearentity2d": 70, "linearentity3d": [70, 71], "direction_cosin": [70, 72], "zdirect": 70, "normal_vector": [71, 144], "proce": [71, 135, 199, 201, 216, 224], "147": 71, "321": 71, "is_coplanar": 71, "perpendicualar": 71, "parallel_plan": 71, "on_circl": 71, "off_circl": 71, "perpendicular_plan": 71, "pt1": 71, "projection_lin": 71, "on_morph": 72, "affine_rank": 72, "are_coplanar": 72, "canberra_dist": 72, "canberra": 72, "geometricent": 72, "taxicab_dist": 72, "is_concycl": 72, "concycl": 72, "fewer": [72, 73, 135, 226, 273], "is_scalar_multipl": 72, "ambient": 72, "orthogonal_direct": 72, "taxicab": 72, "_nocheck": 72, "are_collinear": 72, "4x4": [72, 96, 143, 226], "travers": [73, 97, 113, 202, 215, 231, 241, 278], "unrot": 73, "circumscrib": 73, "spin": [73, 109, 123, 157, 158, 166, 268], "perimet": 73, "contact": [73, 123, 127, 128, 129, 130, 189, 230], "38": [73, 93, 97, 206, 219, 221, 226], "cut_sect": 73, "upper_polygon": 73, "lower_polygon": 73, "upper_seg": 73, "lower_seg": 73, "r520": 73, "r521": 73, "paulbourk": 73, "polygonmesh": 73, "insidepoli": 73, "first_moment_of_area": 73, "q_x": [73, 189], "q_y": [73, 189], "625": [73, 261], "3125": [73, 226], "525": 73, "3000": [73, 100], "r522": 73, "skyciv": 73, "beam": [73, 103, 140, 143, 268], "bmd": 73, "r523": 73, "mechanicalc": 73, "poly1": 73, "poly2": 73, "interior": [73, 202, 214], "180": [73, 190, 200], "r524": 73, "r525": 73, "r526": 73, "apothem": 73, "interior_angl": 73, "exterior_angl": 73, "circumcircl": 73, "incircl": 73, "inradiu": 73, "inscrib": 73, "circumcent": 73, "circumradiu": 73, "leg": 73, "square_in_unit_circl": 73, "kite": 73, "asa": 73, "sa": [73, 202], "sss": 73, "altitud": 73, "orthocent": 73, "exradii": 73, "median": [73, 226], "medial": 73, "nine_point_circl": 73, "straight": [73, 79, 105, 125, 189, 222], "eulerlin": 73, "equilater": 73, "coincid": [73, 93, 96, 115, 121, 193, 251, 256, 275], "excent": 73, "excircl": 73, "touch": [73, 123, 215], "r527": 73, "ly": [73, 93, 197], "exradiu": 73, "r528": 73, "r529": 73, "incent": 73, "is_equilater": 73, "is_isoscel": 73, "is_right": 73, "is_scalen": 73, "nine": [73, 206], "feet": 73, "real_num": 74, "hull": 74, "r530": 74, "graham_scan": 74, "r531": 74, "andrew": 74, "1979": [74, 176], "geomalgorithm": 74, "a10": 74, "_hull": 74, "t3": [74, 219], "averag": [74, 84, 97, 199, 226], "qq": [75, 76, 78, 79, 80, 84, 193, 194, 195, 196, 199, 201, 202, 203], "p_r": 75, "holonomic_funct": 75, "from_hyp": [76, 79], "holonomicfunct": [76, 79, 80], "from_meijerg": [76, 79], "initcond": [76, 78, 79], "expr_to_holonom": [76, 79, 80, 81], "lenic": [76, 78], "ground": [76, 115, 123, 127, 128, 129, 130, 193, 196, 197, 199, 201, 202, 224, 282], "meijerint": [76, 78, 82, 84], "_rewrite1": [76, 82], "_convert_poly_rat_alg": [76, 78], "_create_t": [76, 78], "_create_lookup_t": [78, 82], "differentialoper": [79, 80, 160], "old_poly_r": [79, 80, 193, 196, 197], "to_expr": [79, 80, 81, 107], "to_sequ": 79, "n_0": [79, 199, 224, 225], "indici": [79, 80, 81, 222], "c_j": [79, 82, 216], "holonomicsequ": 79, "r532": 79, "hal": 79, "inria": [79, 84], "fr": [79, 84, 97, 116, 121, 123, 125, 128, 129, 133, 135, 138, 226], "00070025": 79, "r533": 79, "risc": [79, 222, 251], "jku": [79, 222, 251], "risc_2244": 79, "diplform": 79, "_recur": 79, "rk4": 79, "71828182845905": 79, "10517083333333": 79, "22140257085069": 79, "34985849706254": 79, "49182424008069": 79, "64872063859684": 79, "82211796209193": 79, "01375162659678": 79, "22553956329232": 79, "45960141378007": 79, "71827974413517": 79, "331": 79, "4641": 79, "61051": 79, "771561": 79, "9487171": 79, "14358881": 79, "357947691": 79, "5937424601": 79, "to_hyp": 79, "as_list": [79, 202], "to_meijerg": 79, "homogen": [80, 84, 93, 107, 197, 199, 202, 219, 222, 223, 226], "1_0": 80, "1_1": 80, "0_0": 80, "0_1": 80, "pyplot": [80, 138], "plt": [80, 138], "list_of_poli": 80, "weyl": [80, 86], "differentialoperatoralgebra": 80, "Ore": 80, "dxa": 80, "endomorph": [80, 201], "frobeniu": [81, 93, 97, 199, 200], "subtleti": 82, "recast": [82, 218, 224, 225], "branchpoint": 82, "crude": [82, 123, 192], "decre": 82, "biholomorph": 82, "topologi": [82, 214], "neighbourhood": 82, "evid": [82, 116, 129, 216], "peculiar": [82, 190], "_split_mul": 82, "_mytyp": 82, "inequival": 82, "_mul_as_two_part": 82, "bx": [82, 226, 232], "twist": 82, "recognis": [82, 196, 216, 218], "anywai": [82, 218, 222], "analyitc": 82, "_rewrite_singl": 82, "_rewrite2": 82, "_rewrite_saxena_1": 82, "_rewrite_saxena": 82, "blogpost": 82, "remedi": 82, "exploit": [82, 238], "transpar": [82, 85, 186], "nessgrh": 82, "wordpress": [82, 219], "07": 82, "stade": 82, "c_u": 82, "d_1": [82, 176, 202, 226], "d_v": 82, "amalgam": 82, "prudnikov1990": [82, 216], "luke1969": [82, 216], "c_3": [82, 222], "c_4": 82, "visibl": [82, 192], "fulfil": [82, 191], "vee": [82, 87], "lceil": 82, "rceil": 82, "d_j": [82, 176, 216], "lambda_c": [82, 134], "lambda_": 82, "z_0": [82, 218], "z_1": 82, "a_i": [82, 176, 181, 190, 194, 199, 216], "c_5": 82, "c_6": 82, "c_7": 82, "c_8": 82, "lvert": 82, "rvert": 82, "c_9": 82, "versatil": 82, "bz": [82, 219, 232], "deform": [82, 101], "encircl": 82, "appeal": 82, "fox": 82, "obstacl": 82, "identif": [82, 225], "domin": [82, 88, 211, 213], "iT": 82, "omega_": 82, "disguis": 82, "meijerint_indefinit": 82, "meijerint_definit": 82, "meijerint_invers": 82, "kelli": [82, 216], "roach": [82, 216], "211": [82, 97, 202, 216, 222], "prudnikov": [82, 216], "yu": [82, 191, 216], "brychkov": [82, 216], "marichev": [82, 216], "gordon": [82, 150, 216], "breach": [82, 216], "_coeffexpvalueerror": 82, "_get_coeff_exp": 82, "_check_anteced": 82, "_check_antecedents_1": 82, "mt": 82, "_check_antecedents_invers": 82, "anteced": [82, 213], "_condsimp": 82, "hoc": 82, "simp": [82, 123, 181], "_dummi": 82, "_dummy_": 82, "_eval_cond": 82, "_expon": 82, "_find_splitting_point": 82, "fsp": 82, "_flip_g": 82, "_function": 82, "_guess_expans": 82, "sensibl": [82, 84], "_inflate_fox_h": 82, "_inflate_g": 82, "_int0oo": 82, "_int0oo_1": 82, "_int_invers": 82, "_is_analyt": 82, "almost": [82, 91, 99, 173, 192, 193, 197, 202, 203, 222, 226, 240, 241, 244, 277], "_meijerint_definite_2": 82, "trigexpand": 82, "_meijerint_definite_3": 82, "_meijerint_definite_4": 82, "only_doubl": 82, "_meijerint_indefinite_1": 82, "_mul_arg": 82, "_my_principal_branch": 82, "full_pb": 82, "nearer": 82, "superflu": 82, "opaqu": [82, 206], "fac": 82, "_rewrite_invers": 82, "costli": [82, 125, 279], "tx": [82, 281], "happili": [84, 230], "nonelementari": 84, "mellin_transform": 84, "bilater": 84, "laplac": [84, 104, 105, 107, 226], "mellintransform": 84, "integraltransform": 84, "nocond": 84, "inverse_mellin_transform": 84, "laplace_transform": [84, 107], "fourier_transform": 84, "hankel_transform": 84, "inverse_hankel_transform": 84, "suitabl": [84, 90, 99, 191, 194, 196, 199, 201, 206, 216, 219, 222, 225, 227, 276], "inversemellintransform": 84, "attemp": 84, "laplacetransform": 84, "inverse_laplace_transform": 84, "singularit": [84, 135], "inverselaplacetransform": 84, "_fast_inverse_laplac": 84, "rootsum": [84, 202, 208], "fouriertransform": 84, "_fourier_transform": 84, "inverse_fourier_transform": 84, "sine_transform": 84, "inverse_sine_transform": 84, "cosine_transform": 84, "inverse_cosine_transform": 84, "bixk": 84, "inversefouriertransform": 84, "sinetransform": 84, "inversesinetransform": 84, "cosinetransform": 84, "inversecosinetransform": 84, "hankeltransform": 84, "ht": 84, "inversehankeltransform": 84, "_compute_transform": 84, "_as_integr": 84, "integraltransformerror": 84, "_name": 84, "_collapse_extra": 84, "needev": 84, "function_vari": 84, "transform_vari": 84, "lazard": [84, 199, 202], "rioboo": 84, "trager": 84, "horowitz": 84, "ostrogradski": 84, "ratint": 84, "rationaltool": [84, 202], "ratint_logpart": 84, "ratint_ratpart": 84, "r534": 84, "bronstein": [84, 200, 202, 208, 224], "verlag": [84, 200], "deg": [84, 105, 121, 194, 199, 201, 202], "q_i": [84, 117, 135], "_t": [84, 121, 124, 138, 171, 180, 181, 185, 216, 226], "trigintegr": 84, "trigonometri": 84, "r535": 84, "integration_techniqu": 84, "deltaintegr": 84, "couldn": 84, "didn": [84, 93, 135], "singularityintegr": 84, "risch_integr": 84, "nonelementaryintegr": 84, "proven": [84, 97, 257, 275], "handle_first": 84, "separate_integr": 84, "rewrite_complex": 84, "forthcom": 84, "5109": 84, "outer": [84, 118, 136, 138, 154, 159, 160, 181, 183, 185, 190, 208, 214, 230, 251, 254, 255], "pop": [84, 219], "manualintegr": 84, "integral_step": 84, "student": [84, 215, 219, 226], "_i": [84, 171, 176, 203], "namedtupl": 84, "substep": 84, "sympy_gamma": 84, "app": 84, "intstep": 84, "urul": 84, "u_var": 84, "_u": [84, 171], "u_func": 84, "arctanrul": 84, "trigrul": 84, "rewriterul": 84, "addrul": 84, "powerrul": 84, "constanttimesrul": 84, "constantrul": 84, "norman": 84, "slowest": [84, 98], "retri": [84, 97], "degree_offset": 84, "unnecessary_permut": 84, "_try_heurisch": 84, "manuel": [84, 211], "poor": [84, 98], "man": [84, 200], "airi": [84, 222], "whittak": 84, "r536": 84, "sop": [84, 87], "cafe": 84, "pmint": 84, "r537": 84, "gedd": [84, 200], "stefanu": 84, "217": [84, 200], "r538": 84, "davenport": [84, 199, 200], "eurocam": 84, "lnc": [84, 200, 224], "157": [84, 97, 101, 200], "r539": 84, "iii": [84, 206, 222], "sigsam": 84, "bulletin": 84, "1982": [84, 191], "r540": 84, "transact": [84, 200], "1985": [84, 116, 137, 181, 251], "356": [84, 201, 224], "362": 84, "lookup": [84, 93, 97, 216], "huge": [84, 97, 202, 242], "entail": 84, "delic": [84, 193], "albeit": [84, 255], "mimic": [84, 85, 186, 245], "moder": 84, "irrespect": [84, 219, 222, 247], "line_integr": 84, "as_sum": 84, "subinterv": 84, "trapezoid": [84, 93, 226], "730": 84, "809": 84, "decai": 84, "r541": 84, "riemann_sum": 84, "r542": 84, "cauchy_principal_valu": 84, "r543": 84, "cauchyprincipalvalu": 84, "int_a": 84, "uvar": 84, "ui": [84, 97, 223], "3aissu": 84, "3aopen": 84, "3aintegr": 84, "gauss_legendr": 84, "n_digit": 84, "legendr": [84, 97, 202, 206, 219], "r544": 84, "w_i": [84, 140, 202, 222], "7746": 84, "55556": 84, "88889": 84, "86114": 84, "33998": 84, "34785": 84, "65215": 84, "gauss_laguerr": 84, "gauss_gen_laguerr": 84, "gauss_hermit": 84, "gauss_chebyshev_t": 84, "gauss_chebyshev_u": 84, "gauss_jacobi": 84, "gauss_lobatto": 84, "gaussian_quadratur": 84, "r545": 84, "fsu": 84, "jburkardt": 84, "cpp_src": 84, "legendre_rul": 84, "laguerr": [84, 202, 206], "r546": 84, "41577": 84, "2943": 84, "2899": 84, "71109": 84, "27852": 84, "010389": 84, "22285": 84, "1889": 84, "9927": 84, "7751": 84, "8375": 84, "983": 84, "45896": 84, "417": [84, 218], "11337": 84, "010399": 84, "00026102": 84, "9855e": 84, "93laguerre_quadratur": 84, "r547": 84, "laguerre_rul": 84, "hermit": [84, 88, 93, 94, 195, 201, 202, 206, 226], "r548": 84, "2247": 84, "29541": 84, "1816": 84, "3506": 84, "3358": 84, "43608": 84, "00453": 84, "15707": 84, "72463": 84, "hermite_quadratur": 84, "r549": 84, "hermite_rul": 84, "r550": 84, "gen_hermite_rul": 84, "r551": 84, "19016": 84, "7845": 84, "5253": 84, "4493": 84, "31413": 84, "00906": 84, "97851": 84, "9904": 84, "3193": 84, "712": 84, "53087": 84, "67721": 84, "11895": 84, "0023152": 84, "r552": 84, "gen_laguerre_rul": 84, "r553": 84, "86602": 84, "0472": 84, "96593": 84, "70711": 84, "25882": 84, "5236": 84, "93gauss_quadratur": 84, "r554": 84, "chebyshev1_rul": 84, "r555": 84, "3927": 84, "7854": 84, "90097": 84, "62349": 84, "22252": 84, "084489": 84, "27433": 84, "42658": 84, "r556": 84, "chebyshev2_rul": 84, "jacobi": [84, 97, 109, 202, 206], "r557": 84, "7063": 84, "0973": 84, "33795": 84, "87174": 84, "5917": 84, "2093": 84, "050584": 84, "22169": 84, "39439": 84, "93jacobi_quadratur": 84, "r558": 84, "jacobi_rul": 84, "r559": 84, "gegenbauer_rul": 84, "lobatto": 84, "r560": 84, "3333": 84, "44721": 84, "16667": 84, "83333": 84, "93lobatto_rul": 84, "r561": 84, "page_888": 84, "intpoli": 84, "chin": 84, "al": [84, 121, 150, 199, 215, 218], "2015": [84, 225], "unit_cub": 84, "polytope_integr": 84, "eric": [84, 200], "jean": 84, "lasserr": 84, "sukumar": 84, "nonconvex": 84, "967": 84, "981": 84, "dilbert": 84, "engr": 84, "ucdavi": 84, "suku": 84, "max_degre": [84, 202], "689": [84, 101], "21875": 84, "octahedron": 84, "trivari": 84, "enable_automatic_int_sympif": 85, "enable_automatic_symbol": 85, "init_ipython_sess": 85, "argv": [85, 237], "init_python_sess": 85, "use_latex": [85, 186, 282], "quiet": 85, "str_printer": [85, 186], "latex_print": [85, 186], "pylab": 85, "stringifi": [85, 186], "sstrrepr": [85, 186, 206], "lexograph": [85, 186], "gui": [85, 186], "statu": 85, "\u03b8": [85, 115, 143, 225], "int_to_integ": 85, "decistmt": 85, "f401": 85, "0x12": 85, "num_column": [85, 186, 206, 222], "no_glob": [85, 186], "ip": [85, 159, 165, 186], "forecolor": [85, 186], "backcolor": [85, 186], "fontsiz": [85, 186, 206], "10pt": [85, 186, 206], "latex_mod": [85, 186], "print_builtin": [85, 186], "interactiveconsol": [85, 186], "preambl": [85, 186, 206], "handwritten": [85, 186], "ctan": [85, 186], "pkg": [85, 186], "dvi": [85, 186, 206], "foreground": [85, 186], "black": [85, 156, 167, 186, 206, 282], "white": [85, 186, 226], "documentclass": [85, 186, 206], "dpi": [85, 186], "u03b8": 85, "dvip": 85, "r562": 85, "r563": 85, "the_68_standard_colors_known_to_dvip": 85, "config": 85, "root_system": 86, "rootsystem": 86, "cartantyp": 86, "cartan": 86, "subalgebra": 86, "adjoint": [86, 88, 93, 148, 152], "hyperplan": 86, "k_y": 86, "r564": 86, "r565": 86, "humphrei": 86, "add_as_root": 86, "root1": 86, "root2": 86, "add_simple_root": 86, "newroot": 86, "all_root": [86, 97, 202], "cartan_matrix": 86, "dynkin_diagram": 86, "dynkin": 86, "root_spac": 86, "simple_root": 86, "type_a": 86, "typea": 86, "basic_root": 86, "iin": 86, "jth": [86, 225], "ijth": 86, "cartan_typ": 86, "highest_root": 86, "lie_algebra": 86, "positive_root": 86, "type_b": 86, "typeb": 86, "b4": 86, "b3": [86, 121, 138, 181, 257], "type_c": 86, "typec": 86, "c4": [86, 88, 90, 222], "type_d": 86, "d4": [86, 226], "dmension": 86, "type_": 86, "e6": 86, "type_f": 86, "typef": 86, "f_4": [86, 117], "f4": [86, 192], "type_g": 86, "typeg": 86, "weyl_group": 86, "weylgroup": 86, "semisimpl": 86, "isometri": 86, "coxet": 86, "coxeter_diagram": 86, "undirect": [86, 244], "s_is_j": 86, "delete_doubl": 86, "element_ord": 86, "weylelt": 86, "group_nam": 86, "group_ord": 86, "192": 86, "matrix_form": 86, "cartantype_gener": 86, "standard_cartan": 86, "dynkindiagram": 86, "cartanmatrix": 86, "sopform": 87, "minterm": 87, "dontcar": 87, "simplified_pair": 87, "combo": 87, "outcom": [87, 174, 226], "posform": 87, "r566": 87, "quin": 87, "mccluskey_algorithm": 87, "r567": 87, "27t": 87, "care_term": 87, "r568": 87, "r569": 87, "anfform": 87, "truthvalu": 87, "anf": 87, "funciton": 87, "zhegalkin": 87, "r570": 87, "zhegalkin_polynomi": 87, "booleantru": 87, "doubt": [87, 121], "greet": 87, "booleanfals": 87, "universalset": [87, 214], "nand": 87, "xnor": 87, "gate": [87, 151, 156, 158, 164, 165, 167, 268], "perspect": [87, 97, 107, 176, 192, 239, 256, 260], "multiplex": 87, "disjunct": 87, "to_anf": 87, "oplu": [87, 155], "to_cnf": 87, "cnf": 87, "mccluskei": 87, "to_dnf": 87, "to_nnf": 87, "nnf": 87, "is_anf": 87, "is_cnf": 87, "is_dnf": 87, "is_nnf": 87, "gateinputcount": 87, "simplify_log": 87, "fewest": [87, 165], "conver": 87, "r571": 87, "bool_map": 87, "bool1": 87, "bool2": 87, "function1": 87, "function2": 87, "distribute_and_over_or": 87, "distribute_or_over_and": 87, "distribute_xor_over_and": 87, "eliminate_impl": 87, "truth_tabl": 87, "ibin": [87, 244], "integer_to_term": 87, "0001111011": [87, 244], "1101111000": [87, 244], "term_to_integ": 87, "bool_maxterm": 87, "maxterm": 87, "complement": [87, 90, 202, 214, 225], "r572": 87, "canonical_normal_form": 87, "indexing_maxterm": 87, "bool_minterm": 87, "patter": 87, "r573": 87, "indexing_minterm": 87, "bool_monomi": 87, "enumar": 87, "anf_coeff": 87, "to_int_repr": 87, "all_model": 87, "unsatisfi": 87, "use_model": 87, "unsat": 87, "matrixbas": [88, 89, 90, 93, 195], "dirac": [88, 93, 105, 109, 110, 169, 206], "__abs__": [88, 197], "__add__": [88, 197, 201], "shapeerror": [88, 90, 93], "__len__": 88, "96": [88, 93, 226], "mismatch": 88, "matrix_multiply_elementwis": [88, 93], "applyfunc": [88, 89, 93, 129, 181, 227], "col": [88, 90, 93, 96, 107, 138, 195, 201, 279], "col_del": [88, 93, 279], "col_join": [88, 93, 123], "col_insert": [88, 279], "row_insert": [88, 279], "row_join": [88, 93, 123], "companion": [88, 90], "c0": [88, 90, 213, 222, 224], "sparsematrix": [88, 93, 96, 207, 218], "diag": [88, 90, 93, 96, 138, 195, 232, 279], "immutablematrix": [88, 89, 90, 107, 181, 226, 251, 254, 279], "blockmatrix": [88, 90, 93], "sparsetool": [88, 96], "kth": [88, 97], "rowslist": [88, 195], "colslist": 88, "submatrix": [88, 93, 199, 226], "get_diag_block": [88, 90, 93], "decoupl": 88, "hstack": [88, 195], "is_anti_symmetr": 88, "is_diagon": [88, 93], "is_low": [88, 195], "is_upp": [88, 195], "matrixeigen": [88, 93], "is_diagonaliz": [88, 93], "is_hermitian": [88, 93], "is_lower_hessenberg": 88, "hessenberg": [88, 93], "superdiagon": 88, "is_upper_hessenberg": 88, "is_strongly_diagonally_domin": 88, "strongli": [88, 93, 195, 244], "m1": [88, 93, 97, 100, 101, 142, 150, 168, 170, 174, 219, 222, 227, 232], "subdiagon": [88, 93], "is_weakly_diagonally_domin": 88, "weakli": [88, 244], "vacuou": 88, "jordan_block": [88, 93], "eigenv": [88, 93, 121, 123, 138, 165, 277, 279], "rectangular": [88, 93, 214, 225, 255], "r574": 88, "jordan_matrix": [88, 222], "dotprodsimp": 88, "blowup": 88, "multiply_elementwis": [88, 93], "hadamard": [88, 90, 93, 155, 156, 167, 206], "elementwis": [88, 90, 93, 227], "300": [88, 93, 97, 100, 187, 192, 203, 260], "bmatrix": [88, 90, 93, 125, 133, 134, 135, 136, 181, 190, 219], "a_0": [88, 93, 209, 219, 222, 227, 283], "vdot": [88, 90, 93, 176], "alpha_0": 88, "alpha_1": [88, 97, 201], "alpha_": [88, 191], "permute_col": 88, "permute_row": 88, "mulsimp": 88, "rmultipli": 88, "__rmul__": 88, "rot90": 88, "anticlockwis": 88, "row_del": [88, 93, 279], "todod": 88, "tolist": [88, 227], "vec": [88, 93, 115, 138, 181, 191, 199, 257, 258, 260], "vech": 88, "check_symmetri": 88, "vstack": [88, 195], "wilkinson": 88, "w_": [88, 201], "wminu": 88, "wplu": 88, "r575": 88, "mathwork": [88, 105, 226, 279], "cleve": 88, "04": [88, 226], "r576": 88, "claredon": 88, "oxford": 88, "662": 88, "intm": 88, "mutabledensematrix": [89, 195, 247], "densematrix": [89, 93], "ldldecomposit": [89, 93], "ldl": [89, 93], "choleski": [89, 93], "ludecomposit": [89, 90, 93, 279], "qrdecomposit": [89, 93], "as_immut": 89, "lower_triangular_solv": [89, 93], "upper_triangular_solv": [89, 93], "gauss_jordan_solv": [89, 93], "cholesky_solv": [89, 93], "diagonal_solv": [89, 93], "ldlsolv": [89, 93], "lusolv": [89, 93, 115, 117, 135, 139, 224, 279], "qrsolv": [89, 93], "pinv_solv": [89, 93], "permutedim": [90, 227, 228], "arraytensorproduct": [90, 228], "from_index_summ": 90, "first_index": 90, "last_index": 90, "longrightarrow": 90, "matpow": [90, 206], "hadamard_product": 90, "aka": 90, "hadamardproduct": [90, 206], "hadamardpow": [90, 206], "ddot": [90, 93, 125, 134, 186, 189, 206, 283], "functionmatrix": 90, "lazili": [90, 212], "342923500": 90, "permutationmatrix": [90, 93], "matrixpermut": 90, "companionmatrix": 90, "matrixset": [90, 214], "submatric": [90, 93, 195, 226], "block_collaps": 90, "dat": [90, 244], "irregular": [90, 93], "ldudecomposit": 90, "ldu": 90, "2x2": [90, 96, 140, 195, 222], "noninvertiblematrixerror": [90, 279], "udldecomposit": 90, "lu": [90, 93, 195, 200], "udl": 90, "schur": 90, "penros": [90, 93], "pinv": [90, 93], "r577": 90, "schur_compl": 90, "blockdiagmatrix": [90, 93], "diag_block": 90, "alias": [91, 197], "bridg": [91, 103, 121, 245], "tension": 91, "gramschmidt": 93, "m2": [93, 97, 100, 101, 118, 142, 150, 168, 170, 174, 201, 219, 222, 227, 232], "126": [93, 97, 205], "150": [93, 107, 219], "v3": [93, 181, 185, 257], "glue": 93, "m3": [93, 150, 219, 227], "adj": 93, "qr": 93, "cheat": 93, "soln": 93, "gram": [93, 176, 178], "schmidt": 93, "out1": 93, "out2": 93, "1692": 93, "1551": 93, "423": 93, "6707": 93, "spot": [93, 139], "eigenvector": [93, 121, 165, 166, 191], "nullspac": [93, 195], "matrixdetermin": 93, "adjug": 93, "berkowitz": 93, "bareiss": 93, "cofactor_matrix": 93, "charpoli": [93, 195, 279], "_simplifi": 93, "purepoli": [93, 202], "samuelson": 93, "minor_submatrix": 93, "iszerofunc": [93, 279], "barei": 93, "det_lu": 93, "functiontyp": 93, "_iszero": [93, 279], "_is_zero_after_expand_mul": 93, "unrecogn": 93, "nonsquarematrixerror": [93, 222], "i3": [93, 108, 121, 138, 232], "perman": 93, "ryser": 93, "450": 93, "r578": 93, "prof": 93, "ben": 93, "berkelei": 93, "bernd": 93, "ban275": 93, "r579": 93, "permanent_": 93, "r580": 93, "r581": 93, "0904": 93, "3251": 93, "matrixreduct": 93, "echelon_form": [93, 279], "with_pivot": 93, "echelon": [93, 195, 225, 279], "elementary_col_op": 93, "kn": [93, 100, 101], "col1": 93, "col2": 93, "km": [93, 97, 111, 116, 123, 125, 128, 129, 133, 135, 138, 177], "elementary_row_op": 93, "row1": 93, "row2": 93, "is_echelon": [93, 279], "rref": [93, 195], "pivot": [93, 195, 279], "normalize_last": 93, "rref_matrix": [93, 195], "rref_pivot": [93, 195], "301369863013699": 93, "712328767123288": 93, "noramlize_last": 93, "matrixsubspac": 93, "subspac": [93, 201], "columnspac": [93, 195], "rowspac": [93, 195], "orthonorm": [93, 138, 166, 190, 255], "rankcheck": 93, "r582": 93, "93schmidt_process": 93, "eigen": [93, 147], "bidiagonal_decomposit": 93, "ubv": 93, "bidiagon": 93, "hang": [93, 125, 129, 222, 223], "bidiagn": 93, "r583": 93, "golub": 93, "van": [93, 97, 200], "loan": 93, "r584": 93, "vslobodi": 93, "household": 93, "r585": 93, "r586": 93, "reals_onli": 93, "throw": [93, 99, 121, 201, 219, 225], "error_when_incomplet": 93, "eig": [93, 121, 138], "matrixerror": 93, "got": [93, 193, 196, 199, 202, 205, 237, 238, 244, 245, 275, 277, 278], "eigenvect": [93, 121, 138, 165, 279], "tidi": 93, "artifact": 93, "ret": 93, "eigenspac": 93, "rag": 93, "a_3": 93, "diagonaliz": [93, 279], "is_indefinit": 93, "semidefinit": [93, 226], "plot3d": [93, 192], "is_positive_definit": 93, "is_positive_semidefinit": 93, "hire": [93, 100, 101, 105, 192, 209], "is_negative_definit": 93, "is_negative_semidefinit": 93, "defer": [93, 248], "r587": 93, "definiteness_of_a_matrix": 93, "r588": 93, "positivedefinitematrix": 93, "r589": 93, "amer": 93, "259": 93, "264": [93, 224], "r590": 93, "r591": 93, "r592": 93, "r593": 93, "r594": 93, "r595": 93, "r596": 93, "r597": 93, "r598": 93, "r599": 93, "r600": 93, "r601": 93, "jordan_form": 93, "calc_transform": 93, "left_eigenvect": 93, "singular_valu": 93, "condition_numb": 93, "matrixcalculu": 93, "hessian": 93, "wronskian": [93, 222], "simpfunc": 93, "permutebkwd": 93, "permutefwd": 93, "lucombin": 93, "defici": [93, 97, 225], "matrixi": 93, "ludecomposition_simpl": [93, 279], "ludecompositionff": 93, "pa": [93, 116, 118, 133, 136, 139], "r602": 93, "zhou": 93, "jeffrei": [93, 218], "frontier": [93, 214], "china": 93, "67": [93, 200], "2008": [93, 191, 200, 202, 206], "row_swap": 93, "compres": 93, "permute_backward": 93, "permute_forward": 93, "intiuit": 93, "lu_": 93, "_find_reasonable_pivot": 93, "lu_solv": [93, 195], "qr_solv": 93, "augument": 93, "167": 93, "158": [93, 101], "27261": 93, "30625": 93, "348": 93, "1914": 93, "6125": 93, "30589": 93, "198": 93, "1225": 93, "q_aug": 93, "r_aug": 93, "analytic_func": 93, "connected_compon": [93, 244], "connected_components_decomposit": 93, "relax": [93, 99], "3x1": 93, "1x3": 93, "conjugate_convent": 93, "dual": [93, 163, 169], "anti_symmetr": 93, "speak": [93, 201, 258], "freevar": 93, "underdetermin": [93, 224, 225], "free_var_index": 93, "tau0": [93, 225, 226], "tau1": 93, "taus_zero": 93, "sol_uniqu": 93, "r603": 93, "gaussian_elimin": 93, "try_block_diag": 93, "inverse_g": [93, 279], "inverse_lu": [93, 279], "inverse_adj": [93, 279], "inverse_ch": 93, "inverse_ldl": 93, "inverse_qr": 93, "inv_mod": 93, "cof": 93, "inverse_block": 93, "blockwis": 93, "ntop": 93, "key2bound": 93, "key2ij": 93, "reciproc": [93, 226, 283], "fro": 93, "sing": 93, "spectral": 93, "rd": [93, 121, 206], "pseudoinvers": 93, "r604": 93, "penrose_pseudoinvers": 93, "arbitrary_matrix": 93, "wn_m": 93, "_w0_0": 93, "_w1_0": 93, "_w2_0": 93, "59": [93, 222], "r605": 93, "obtaining_all_solutions_of_a_linear_system": 93, "print_nonzero": [93, 244], "symb": [93, 206], "rank_decomposit": 93, "r606": 93, "rank_factor": 93, "r607": 93, "piziak": 93, "odel": 93, "magazin": 93, "193": [93, 105], "2307": 93, "2690882": 93, "singular_value_decomposit": 93, "condens": [93, 225], "orthogn": 93, "v_aug": 93, "u_aug": 93, "s_aug": 93, "gj": 93, "solve_least_squar": 93, "strongly_connected_compon": [93, 195, 244], "62": [93, 199], "strongly_connected_components_decomposit": 93, "rowstart": 93, "rowend": 93, "rowsep": 93, "colsep": 93, "strprinter": [93, 186], "upper_hessenberg_decomposit": 93, "213": 93, "134": 93, "216": [93, 199], "hessenbergdecomposit": 93, "jordan_cel": 93, "varlist": 93, "r608": 93, "hessian_matrix": 93, "vlist": 93, "r609": 93, "casoratian": 93, "kernel": [93, 193, 199, 201, 224], "vanish": [93, 171, 199, 202, 205, 222, 251], "rsolve_hyp": [93, 224], "randmatrix": 93, "percent": [93, 225], "prng": 93, "percentag": [93, 97], "46": [93, 100, 176, 205, 224, 226], "list2numpi": 93, "dtype": [93, 98, 193, 195, 196, 197, 206, 245], "matrix2numpi": 93, "symarrai": 93, "ndarrai": [93, 226, 232, 238], "prefix_i1_i2_": 93, "_2": [93, 115, 180, 181, 191, 222], "a_0_0": 93, "a_0_1": 93, "a_0_2": 93, "a_1_0": 93, "a_1_1": 93, "a_1_2": 93, "a_0_0_0": 93, "a_0_0_1": 93, "a_0_1_0": 93, "a_0_1_1": 93, "a_0_2_0": 93, "a_0_2_1": 93, "a_1_0_0": 93, "a_1_0_1": 93, "a_1_1_0": 93, "a_1_1_1": 93, "a_1_2_0": 93, "a_1_2_1": 93, "rot_axis1": 93, "rot_axis2": 93, "rot_axis3": 93, "a2idx": 93, "normalform": [94, 195], "hermite_normal_form": [94, 195, 201], "check_rank": [94, 195], "hnf": [94, 195, 201], "explos": [94, 195], "believ": [94, 97, 195], "dmdomainerror": [94, 195], "dmshapeerror": [94, 195], "r610": 94, "cohen": [94, 195, 200, 201], "mutablesparsematrix": 95, "_doktocsr": 96, "csr": 96, "ja": 96, "ia": 96, "_csrtodok": 96, "dok": 96, "1x1": [96, 226], "vert": [96, 187, 190, 260], "saw": [96, 196, 283], "dynam": [97, 104, 105, 107, 111, 113, 116, 117, 120, 123, 131, 133, 134, 135, 136, 137, 138, 139, 180, 181, 183, 185, 189, 190, 241, 242, 251], "eratosthen": 97, "_reset": [97, 202], "_list": 97, "extend_to_no": 97, "mobiusrang": 97, "primerang": 97, "10th": 97, "totientrang": 97, "1e11": 97, "50000": 97, "primal": [97, 193], "1299709": 97, "r611": 97, "prime_number_theorem": 97, "table_of_": 97, "cf": [97, 199], "28x": 97, "2c_x_": 97, "2f_log_x": 97, "2c_and_li": 97, "r612": 97, "approximations_for_the_nth_prime_numb": 97, "r613": 97, "27_number": 97, "arr1": 97, "arr2": 97, "prevprim": 97, "9th": 97, "nextprim": 97, "occupi": [97, 171, 232], "conjectur": [97, 199], "twin": 97, "bertrand": 97, "brocard": 97, "primori": 97, "r614": 97, "r615": 97, "utm": 97, "postul": 97, "r616": 97, "s_postul": 97, "primefactor": 97, "argu": 97, "cycle_length": 97, "nmax": 97, "brent": [97, 241], "floyd": 97, "cycle_detect": 97, "17737": 97, "20000": 97, "compositepi": 97, "831": 97, "smoothness_p": 97, "sm": [97, 121, 138, 193], "psm": 97, "govern": 97, "10431": 97, "annot": [97, 192, 206], "21477639576571": 97, "4410317": 97, "1787": 97, "4869863": 97, "2434931": 97, "multiplicity_in_factori": 97, "nfac": 97, "52818775009509558395695966887": 97, "is2pow": 97, "pollard_rho": 97, "1234": [97, 219], "max_step": 97, "pollard": [97, 222], "leader": 97, "16843009": 97, "32767": 97, "4i": 97, "3i": 97, "2489": 97, "1482": 97, "285": [97, 224], "leadup": 97, "r617": 97, "crandal": 97, "carl": [97, 241], "pomer": [97, 241], "229": 97, "231": [97, 181], "pollard_pm1": 97, "likelihood": 97, "1009": 97, "am": [97, 176, 206], "255": 97, "crack": 97, "617": 97, "1786": 97, "worst": [97, 202, 222], "scenario": [97, 226], "divisisor": 97, "realist": 97, "r618": 97, "236": 97, "r619": 97, "washington": 97, "2007": [97, 137, 241], "spring": [97, 112, 115, 116, 121, 126], "ent": 97, "node81": 97, "r620": 97, "toronto": 97, "yuvalf": 97, "use_ecm": 97, "65537": [97, 205], "1407633717262338957430697921446883": 97, "991": 97, "202916782076162456022877024859": 97, "4200": 97, "1764": 97, "toggl": [97, 192], "12345678910111213141516": 97, "2507191691": 97, "1231026625769": 97, "factorrat": 97, "rat": 97, "987": 97, "10000000001": 97, "99009901": 97, "divisor_count": 97, "tim": [97, 244], "stackoverflow": [97, 244, 247], "1010381": 97, "proper_divisor": 97, "proper_divisor_count": 97, "udivisor": 97, "udivisor_count": 97, "r621": 97, "unitary_divisor": 97, "r622": 97, "unitarydivisor": 97, "r623": 97, "unitarydivisorfunct": 97, "antidivisor": 97, "r624": 97, "margin": [97, 107, 192, 226], "antidivisor_count": 97, "a066272": 97, "a066272a": 97, "r625": 97, "r626": 97, "27s_totient_funct": 97, "r627": 97, "totientfunct": 97, "r628": 97, "carmichael_funct": 97, "r629": 97, "carmichaelfunct": 97, "sigma_k": 97, "m_i": [97, 191, 199], "m_ik": 97, "r630": 97, "divisor_funct": 97, "udivisor_sigma": 97, "47450": 97, "152": 97, "r631": 97, "core_t": 97, "core_2": 97, "squarefre": [97, 201], "cubefre": 97, "9424": 97, "1178": 97, "379238": 97, "square_factor": [97, 219], "r632": 97, "free_integ": 97, "squarefree_cor": 97, "primenu": 97, "r633": 97, "primeomega": 97, "r634": 97, "mersenne_prime_expon": 97, "mersenn": 97, "4423": 97, "r635": 97, "perfectnumb": 97, "r636": 97, "perfect_numb": 97, "is_mersenne_prim": 97, "r637": 97, "mersenneprim": 97, "abund": 97, "is_abund": 97, "r638": 97, "abundantnumb": 97, "is_defici": 97, "r639": 97, "deficientnumb": 97, "is_amic": 97, "amic": 97, "220": [97, 202], "r640": 97, "amicable_numb": 97, "symmetric_residu": 97, "v_i": [97, 201, 224], "65": [97, 107, 199, 226], "639985": [97, 199], "912285": [97, 199], "954": 97, "gf_crt": [97, 199], "solve_congru": [97, 199], "programm": [97, 206], "galoistool": [97, 199], "crt1": 97, "4536": 97, "252": 97, "756": 97, "crt2": 97, "remainder_modulus_pair": 97, "mi": [97, 206], "k1": [97, 138, 169, 196, 197, 199], "k2": [97, 138, 196], "c_kn": 97, "binomial_coefficients_list": 97, "multinomial_coeffici": 97, "k_m": 97, "k_i": [97, 199, 216], "yann": 97, "laigl": 97, "chapui": 97, "permiss": [97, 191], "multinomial_coefficients_iter": 97, "_tupl": 97, "m53": 97, "partitions_": 97, "npartit": 97, "hardi": 97, "rademach": [97, 226], "r641": 97, "1958": [97, 191], "partitionfunctionp": 97, "is_euler_pseudoprim": 97, "pseudoprim": 97, "r642": 97, "euler_pseudoprim": 97, "prep": [97, 222, 223], "r643": 97, "mersenneforum": 97, "showpost": 97, "110896": 97, "mr": 97, "miller": 97, "rabin": 97, "wit": 97, "1373651": 97, "479001599": 97, "r644": 97, "135": 97, "138": 97, "93rabin_primality_test": 97, "deterministic_vari": 97, "is_lucas_prp": 97, "selfridg": 97, "377": 97, "1159": 97, "1829": 97, "3827": 97, "5459": 97, "5777": 97, "9071": 97, "9179": 97, "bailli": 97, "wagstaff": 97, "1980": [97, 244], "mpq": [97, 196], "lucaspseudoprim": 97, "a217120": 97, "lucas_pseudoprim": 97, "is_strong_lucas_prp": 97, "bpsw": 97, "10877": 97, "16109": 97, "18971": 97, "a217255": 97, "psw_primality_test": 97, "is_extra_strong_lucas_prp": 97, "grantham": 97, "mo": [97, 138, 206], "jone": [97, 143], "preprint": 97, "a217719": 97, "perl": 97, "counterexampl": [97, 283], "989": 97, "3239": 97, "jon": 97, "mcom": 97, "234": 97, "01197": 97, "1e3": 97, "1e23": [97, 247], "near_int": 97, "strong_pseudoprim": 97, "is_gaussian_prim": 97, "r645": 97, "gaussian_prim": 97, "residue_ntheori": 97, "n_order": 97, "cong": [97, 199], "primitive_root": [97, 201], "r646": 97, "stein": [97, 222], "r647": 97, "hackman": 97, "sqrt_mod": 97, "sqrt_mod_it": 97, "quadratic_residu": 97, "nthroot_mod": 97, "109": [97, 200, 219], "is_nthpow_residu": 97, "r648": 97, "is_quad_residu": 97, "legendre_symbol": 97, "genfrac": 97, "nonresidu": 97, "alpha_2": [97, 201], "alpha_k": 97, "discrete_log": 97, "prime_ord": 97, "giant": [97, 225], "pohlig": 97, "r649": 97, "discretelogarithm": 97, "r650": 97, "cryptographi": [97, 262, 269], "menez": 97, "vanston": 97, "continued_fract": 97, "continued_fraction_period": 97, "continued_fraction_reduc": 97, "continued_fraction_converg": 97, "continued_fraction_iter": 97, "106": 97, "103993": 97, "33102": 97, "104348": 97, "33215": 97, "208341": 97, "66317": 97, "292": 97, "r651": 97, "discrimin": [97, 197, 199, 201, 202], "r652": 97, "periodic_continued_fract": 97, "r653": 97, "rosen": 97, "379": [97, 202], "381": 97, "januari": 97, "1992": [97, 200, 224], "233": [97, 200, 222], "718281835": 97, "287": 97, "count_digit": 97, "1111339": 97, "0xfa": 97, "c77": 97, "is_palindrom": [97, 244], "palindrom": 97, "0o121": 97, "oct": 97, "0o171": 97, "fermion": [97, 171], "r654": 97, "b6bius_funct": 97, "r655": 97, "thoma": [97, 137], "koshi": 97, "egyptian_fract": 97, "greedi": [97, 199, 215, 218], "egyptian": 97, "r656": 97, "jewett": 97, "takenouchi": 97, "3192": 97, "1118": 97, "2580": 97, "sylvest": [97, 199], "r657": 97, "seldom": 97, "blow": 97, "doubli": 97, "exhibit": [97, 191, 201, 215], "singli": 97, "tendenc": 97, "r658": 97, "1921": 97, "golumb": 97, "1962": 97, "propos": 97, "bleicher": 97, "1972": 97, "r659": 97, "420": [97, 219], "140": 97, "574": 97, "2788": 97, "6460": 97, "11590": 97, "33062": 97, "113820": 97, "greedy_algorithm_for_egyptian_fract": 97, "ic": [97, 222], "uci": 97, "eppstein": 97, "numth": 97, "egypt": 97, "ami": 97, "ektf": 97, "hu": 97, "finalpdf": 97, "ami_42_from129to134": 97, "bbp_pi": 97, "pi_hex_digit": 97, "hex": 97, "3243f6a8885a30": 97, "324": [97, 200], "r660": 97, "numberworld": 97, "subexponenti": 97, "comfort": [97, 98], "15154262241479": 97, "15423094826093": 97, "799333555511111": 97, "809709509409109": 97, "888888877777777": 97, "914148152112161": 97, "factoris": [97, 196, 197, 222], "max_curv": 97, "lenstra": 97, "repeatedli": [97, 108, 238], "ecm_one_factor": 97, "pseudorandom": [97, 244], "25645121643901801": 97, "5394769": 97, "4753701529": 97, "9804659461513846513": 97, "4641991": 97, "2112166839943": 97, "7060005655815754299976961394452809": 97, "6988699669998001": 97, "1010203040506070809": 97, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 97, "2709077133180915240135586837960864768806330782747": 97, "248": 97, "prime_bound": 97, "error_term": 97, "siq": 97, "modn": 97, "mulipl": 97, "r661": 97, "semanticscholar": 97, "5c52": 97, "8a975c1405bd35c65993abf5a4edb667c1db": 97, "r662": 97, "rieselprim": 97, "ziki": 97, "initializing_quadratic_siev": 97, "5915587277": 97, "3267000013": 97, "facilit": [98, 131, 142, 188, 237], "000507214304613640": 98, "microsecond": 98, "000507214304614": 98, "hundr": [98, 277], "nanosecond": 98, "84147098": [98, 245, 272], "84119981": 98, "84092844": 98, "05426074": 98, "05433146": 98, "05440211": 98, "nano": 98, "manufactur": 98, "asnumpi": 98, "compliat": 98, "jnp": 98, "asarrai": 98, "84147096": 98, "8411998": 98, "05426079": 98, "05433151": 98, "autowrap": [98, 231, 239, 243, 270], "implemented_funct": [98, 238, 245], "effort": [98, 197, 199], "50u": 98, "1u": 98, "10n": 98, "sympy_pars": 99, "local_dict": 99, "lambda_not": 99, "repeated_decim": 99, "auto_numb": 99, "factorial_not": 99, "global_dict": 99, "standard_transform": 99, "implicit_multiplication_appl": 99, "implicit_appl": 99, "implicit_multipl": 99, "convert_equals_sign": 99, "function_exponenti": 99, "stringify_expr": 99, "eval_expr": 99, "name_dict": 99, "fullform": 99, "setdelai": 99, "datatyp": [99, 197, 206, 239], "split_symbol": 99, "split_symbols_custom": 99, "_token_splitt": 99, "can_split": 99, "unsplitt": 99, "10sin": 99, "3xyz": 99, "2111": 99, "latex2sympi": 99, "typograph": 99, "stricter": 99, "liber": [99, 111, 277], "618": 99, "latexparsingerror": 99, "sym_expr": 99, "sympyexpress": 99, "source_cod": 99, "return_expr": 99, "definiton": 99, "src2": 99, "convert_to_expr": 99, "convert_to_c": 99, "src3": 99, "convert_to_python": 99, "src_code": 99, "filenam": [99, 206, 237, 238, 239, 247], "convert_to_fortran": 99, "continuum_mechan": [100, 101, 103], "elastic_modulu": 100, "second_mo": 100, "base_char": 100, "withstand": [100, 101], "character": [100, 101, 187, 190, 213, 226, 232, 260], "profil": 100, "shear": [100, 101], "downward": [100, 101, 103, 201], "apply_load": [100, 101, 103], "bc_deflect": [100, 101], "boundary_condit": 100, "solve_for_reaction_load": [100, 101], "shear_forc": [100, 101], "bending_mo": [100, 101], "reaction": [100, 101, 103], "upward": [100, 201], "reaction_load": [100, 101, 103], "applied_load": 100, "nm": [100, 101, 169, 227], "pointload": [100, 101], "ramp": [100, 101], "parabol": 100, "apply_support": [100, 103], "loc": 100, "freedom": [100, 115, 116, 122, 125, 131, 226, 268], "roller": [100, 101, 103], "r_10": 100, "r_30": 100, "4000": [100, 101], "bc_slope": [100, 101], "cross_sect": 100, "elast": [100, 101], "12000": 100, "draw": [100, 151, 206, 226], "pictori": 100, "positv": 100, "ild_moment": 100, "ild_react": 100, "ild_shear": 100, "axial": [100, 140], "hing": [100, 101, 132], "cantilev": [100, 101], "inertia": [100, 101, 110, 111, 112, 114, 120, 121, 123, 124, 126, 128, 129, 130, 131, 138, 181, 189, 190, 201, 268], "666666666666667": [100, 101], "max_bmoment": 100, "max_deflect": 100, "max_shear_forc": 100, "plot_bending_mo": [100, 101], "gpa": 100, "400": [100, 192, 202], "13750": 100, "31250": 100, "plot_deflect": [100, 101], "00138541666666667": 100, "86458333333333e": 100, "04166666666667e": 100, "20833333333333e": 100, "51041666666667e": 100, "plot_ild_mo": 100, "solve_for_ild_mo": 100, "1kn": 100, "r_0": 100, "r_8": 100, "solve_for_ild_react": 100, "plot_ild_react": 100, "5kn": 100, "r_7": 100, "plotgrid": 100, "plot_ild_shear": 100, "solve_for_ild_shear": 100, "plot_loading_result": [100, 101], "subplot": [100, 192], "plot_shear_forc": [100, 101], "plot_shear_stress": 100, "stress": 100, "6875": 100, "2500": 100, "15625": [100, 178], "plot_slop": [100, 101], "59375e": 100, "125e": 100, "08333333333333e": 100, "0001953125": 100, "point_cflexur": 100, "overhang": [100, 101], "10kn": 100, "20kn": [100, 101], "3kn": 100, "remove_load": [100, 103, 112], "shear_stress": 100, "beam3d": 100, "shear_modulu": 100, "apply_moment_load": 100, "solve_slope_deflect": 100, "r663": 100, "home": [100, 201, 219, 226, 237], "aau": 100, "jc": 100, "femtesemest": 100, "beams3d": 100, "angular_deflect": 100, "depict": [100, 187, 225, 260], "angular": [100, 109, 112, 115, 118, 123, 124, 125, 126, 128, 130, 132, 135, 138, 140, 144, 145, 147, 150, 168, 172, 181, 185, 191], "axial_forc": 100, "axial_stress": 100, "load_vector": 100, "max_bending_mo": 100, "16000": 100, "495": 100, "10793": 100, "6400": 100, "301": [100, 216, 219], "560": 100, "2400": 100, "moment_load_vector": 100, "40000": 100, "4013": 100, "90300": 100, "1520": 100, "903": 100, "1600": [100, 101], "172": 100, "polar_mo": 100, "i1": [100, 108, 121, 138, 232], "1350": 100, "solve_for_tors": 100, "torsion": 100, "torqu": [100, 112, 116, 120, 126, 133, 134, 138], "torsional_mo": 100, "_________________": 101, "________________": [101, 222], "_______________v": 101, "_______________": 101, "equilibrium": [101, 103, 123, 135], "20e9": 101, "25e": 101, "______________________________________________": 101, "_______________________________________________": 101, "r\u2081": 101, "r\u2082": 101, "______________________": 101, "________________________": 101, "8kn": 101, "_____________": 101, "1m": 101, "3m": 101, "2m": 101, "5m": [101, 241], "679": 101, "12kn": 101, "________________________________": 101, "____________________________________________________": 101, "o____________________________________________________": 101, "4m": 101, "concentr": [101, 226], "_____________________________________": 101, "m\u2081": 101, "m\u2082": 101, "connector": 101, "_____________________": 101, "_______________________": 101, "_____________________o_______________________": 101, "oooo": [101, 244], "r\u2083": 101, "_______i_______": 101, "flexur": 101, "rigid": [101, 103, 112, 116, 118, 121, 123, 126, 131, 138, 181, 189, 268], "____________": 101, "____________o________________________": 101, "a\u2081": [101, 283], "a\u2082": [101, 283], "assembli": [103, 123], "joint": [103, 114, 124, 126, 131, 268], "add_nod": 103, "node_1": 103, "node_2": 103, "node_3": 103, "node_4": 103, "add_memb": 103, "member_1": 103, "member_2": 103, "member_3": 103, "member_4": 103, "member_5": 103, "270": 103, "360": 103, "change_member_label": 103, "new_label": 103, "change_node_label": 103, "bc_new": 103, "internal_forc": 103, "member_label": 103, "node_label": 103, "node_posit": 103, "remove_memb": 103, "remove_nod": 103, "remove_support": 103, "unstabl": 103, "revolv": 103, "tensil": 103, "r_node_1_x": 103, "r_node_1_i": 103, "r_node_2_i": 103, "lti": [104, 105], "transferfunct": [104, 105, 107], "interconnect": [104, 107, 115], "mimo": [104, 107], "transferfunctionmatrix": [104, 107], "mimoseri": [104, 107], "mimoparallel": [104, 107], "mimofeedback": [104, 107], "control_plot": 105, "pole_zero_plot": 105, "pole_color": 105, "blue": [105, 132, 192, 206], "pole_markers": 105, "zero_color": 105, "orang": 105, "zero_markers": 105, "show_ax": 105, "marker": [105, 192], "sisolineartimeinvari": [105, 107], "markers": 105, "tf1": [105, 107], "pole_zero_numerical_data": 105, "r664": 105, "93zero_plot": 105, "siso": [105, 107], "8660254j": 105, "bode_plot": 105, "initial_exp": 105, "final_exp": 105, "freq_unit": 105, "phase_unit": 105, "semilog": 105, "hz": 105, "hertz": 105, "bode_magnitude_plot": 105, "bode_phase_plot": 105, "bode_magnitude_numerical_data": 105, "5148378120533502e": 105, "68437": 105, "36188804005": 105, "020599914256786": 105, "0205999155219505": 105, "4117304087953": 105, "00000000260573": 105, "bode_phase_numerical_data": 105, "4472354033813751e": 105, "035581932165858e": 105, "47577": 105, "3248186011": 105, "67884": 105, "09326036123": 105, "5000000000291665e": 105, "6180885085e": 105, "08895483066e": 105, "1415085799262523": 105, "14155265358979": 105, "impulse_response_plot": 105, "lower_limit": [105, 273], "upper_limit": [105, 273], "step_response_plot": 105, "ramp_response_plot": 105, "r665": 105, "impulse_response_numerical_data": 105, "nb_of_point": [105, 192], "lineover1drangeseri": [105, 192], "amplitud": [105, 145], "06616480200395854": 105, "854500743565858": 105, "9999999799999999": 105, "7042848373025861": 105, "170748906965121e": 105, "1901263495547205e": 105, "r666": 105, "step_response_numerical_data": 105, "025413462339411542": 105, "0484508722725343": 105, "670250533855183": 105, "844291913708725": 105, "023844582399907256": 105, "042894276802320226": 105, "828770759094287e": 105, "456457160755703e": 105, "mx": [105, 151, 213], "r667": 105, "ramp_funct": 105, "ramp_response_numerical_data": 105, "12166980856813935": 105, "861246379582118": 105, "4504508011325967e": 105, "006046440489058766": 105, "12499999999568202": 105, "12499999999661349": 105, "den": [107, 197, 218, 222], "superscript": [107, 206], "impuls": 107, "tf2": 107, "tf3": 107, "tf4": 107, "tf5": 107, "tf6": 107, "500000000000000": 107, "tf7": 107, "tf8": 107, "tf9": 107, "tf10": 107, "tf11": 107, "tf12": 107, "r668": 107, "transfer_funct": 107, "r669": 107, "dc_gain": 107, "dc": [107, 134], "from_rational_express": 107, "zerodivisionerror": [107, 197, 235, 245], "tf": [107, 245], "is_biprop": 107, "is_prop": 107, "is_stabl": 107, "is_strictly_prop": 107, "sys1": 107, "sys2": 107, "feedforward": 107, "fed": 107, "sit": [107, 190], "plant": 107, "compulsori": 107, "tf_1": 107, "tf_2": 107, "tf_3": 107, "tf_4": 107, "tfm_1": 107, "num_input": 107, "num_output": 107, "tfm_2": 107, "tf_5": 107, "tf_6": 107, "tf_7": 107, "tf_8": 107, "tfm_3": 107, "tfm_4": 107, "tfm_5": 107, "tfm_6": 107, "tf_9": 107, "tf_10": 107, "tfm_7": 107, "tfm_8": 107, "tfm_9": 107, "tfm_10": 107, "tfm_11": 107, "tfm_12": 107, "elem_pol": 107, "elem_zero": 107, "from_matrix": [107, 195], "m_tf": 107, "tfm": 107, "tfm1": 107, "tfm2": 107, "g4": 107, "tfm3": 107, "mimolineartimeinvari": 107, "mat_a": 107, "mat_b": 107, "mat_c": 107, "tfm_a": 107, "tfm_b": 107, "tfm_c": 107, "expr_1": 107, "expr_2": 107, "expr_3": 107, "expr_4": 107, "plant_mat": 107, "controller_mat": 107, "neg_feedback": 107, "hep": 108, "gamma_matric": [108, 110], "gammamatrix": 108, "lorentzindex": 108, "gammamatrixhead": 108, "extract_type_ten": 108, "gamma_trac": 108, "i0": [108, 143, 232], "i2": [108, 121, 138, 232], "i4": [108, 232], "i5": 108, "kahane_simplifi": 108, "spinor": 108, "ta": [108, 215], "tb": [108, 215, 237], "tc": [108, 197, 202, 215], "joseph": [108, 200], "kahan": 108, "octob": 108, "1968": 108, "simplify_gpgp": 108, "e_nl": [109, 172], "hartre": 109, "helium": 109, "2209": 109, "e_nl_dirac": 109, "spin_up": 109, "035999037000": 109, "relativist": 109, "momentum": [109, 118, 121, 138, 149, 150, 168, 172, 191, 232], "light": [109, 143, 176, 186, 193], "035999037": 109, "1012": 109, "3627": 109, "500006656595360": 109, "125002080189006": 109, "125000416028342": 109, "0555562951740285": 109, "0555558020932949": 109, "0555556377366884": 109, "psi_nlm": 109, "wave": [109, 141, 142, 143, 209, 268], "psi_": [109, 147], "nlm": 109, "radial": [109, 125, 172], "nl": [109, 172], "magnet": [109, 142, 187, 260], "azimuth": 109, "wf": [109, 123], "abs_sqrd": 109, "silver": 109, "94": [109, 200], "141": 109, "4418": 109, "mdft": 110, "mgamma": 110, "gamma_5": 110, "gamma_0": 110, "gamma_3": 110, "r670": 110, "msigma": 110, "pauli": [110, 268], "sigma_i": [110, 226], "r671": 110, "pauli_matric": [110, 146], "pat_matrix": 110, "unansw": [111, 180], "kane": [111, 114, 115, 121, 127, 131, 132, 137, 138, 180, 181, 251, 268], "q1d": [111, 121, 123, 125, 128, 129, 130, 133, 134, 135, 136, 180, 186, 190], "q2d": [111, 121, 123, 125, 128, 129, 130, 133, 134, 185, 186], "q3d": [111, 128, 129, 130, 133], "kinemat": [111, 115, 116, 120, 121, 123, 124, 125, 126, 128, 130, 132, 133, 135, 136, 138, 139, 181, 184, 188, 190, 268], "dyad": [111, 138, 255], "mprint": [111, 128, 129, 130, 133], "mpprint": [111, 133], "mlatex": 111, "sub_dict": [111, 113, 123], "msub": [111, 113, 135], "cleaner": [111, 138, 222], "gsl": [111, 239], "lsoda": 111, "penalti": 111, "central_inertia": [112, 118, 124, 126], "possess": [112, 136, 232], "name_of_bodi": 112, "ixx": [112, 118, 181], "body_inertia": 112, "ang_vel_in": [112, 115, 121, 128, 129, 138, 181, 189], "set_ang_vel": [112, 118, 121, 123, 128, 129, 135, 136, 138, 139, 181, 183, 185, 189], "apply_forc": [112, 115, 126], "reaction_bodi": [112, 115, 126], "reaction_point": 112, "oppposit": 112, "desri": 112, "force1": 112, "b_masscent": 112, "b_frame": [112, 115], "newtonion": [112, 115], "spring_forc": 112, "n_frame": 112, "apply_torqu": [112, 126], "torquess": 112, "torque1": 112, "b1_frame": 112, "b2_frame": 112, "clear_load": 112, "kinetic_energi": [112, 118, 136, 138], "kinet": [112, 116, 118], "inerti": [112, 115, 116, 118, 123, 125, 128, 133, 134, 136, 138], "set_vel": [112, 116, 118, 121, 123, 125, 128, 129, 130, 133, 134, 135, 136, 138, 139, 185, 189], "b_ixx": 112, "b_mass": [112, 115], "masscenter_vel": [112, 115], "parallel_axi": [112, 118], "to_matrix": [112, 115, 180, 181, 190, 195, 201, 251, 254, 256], "a_ixx": 112, "a_mass": 112, "a_ixi": 112, "a_izx": 112, "a_iyi": 112, "a_iyz": 112, "a_izz": 112, "smart": [113, 135, 213, 219, 222], "sub1": [113, 206], "sub2": [113, 206], "find_dynamicsymbol": 113, "reference_fram": [113, 181], "symbolicsystem": [114, 131, 268], "interfram": [115, 185], "_generate_coordin": 115, "_generate_spe": 115, "_orient_fram": 115, "_set_angular_veloc": 115, "_set_linear_veloc": 115, "kde": [115, 124, 125, 132, 135], "revolut": 115, "\u03c9": 115, "pc": [115, 203], "p_masscent": 115, "c_masscent": 115, "p_frame": 115, "c_frame": 115, "q_pc": 115, "u_pc": 115, "pendulum": [115, 120, 122, 126, 131, 135, 139, 189, 268], "upper_bob": 115, "lower_bob": 115, "ceiling_joint": 115, "pendulum_joint": 115, "q_p1": 115, "q_p2": 115, "u_fram": 115, "l_frame": 115, "u_p1": 115, "u_p2": 115, "vel": [115, 121, 123, 125, 129, 132, 138, 185, 189, 258], "prismat": 115, "slide": 115, "wall": [115, 126], "part1": 115, "part2": 115, "j1": [115, 124, 126, 150, 168], "j2": [115, 124, 126, 150, 168], "q_j1": 115, "w_frame": 115, "q_j2": 115, "p1_frame": 115, "u_j1": 115, "cylindricaljoint": 115, "rotation_coordin": 115, "translation_coordin": 115, "rotation_spe": 115, "translation_spe": 115, "cylindr": [115, 192, 258], "q0_": 115, "q1_": 115, "u0_": 115, "u1_": 115, "q0_pc": 115, "q1_pc": 115, "u0_pc": 115, "u1_pc": 115, "tube": 115, "floor_joint": 115, "flag_joint": 115, "q0_c1": 115, "q0_c2": 115, "q1_c1": 115, "floor_fram": 115, "q1_c2": 115, "tube_fram": 115, "flag_fram": 115, "u0_c1": 115, "u0_c2": 115, "u1_c1": 115, "planarjoint": 115, "planar_coordin": 115, "planar_spe": 115, "q2_": 115, "u2_": 115, "nonparallel": 115, "q_1": [115, 124, 125, 126, 135, 151, 189, 202, 219], "q_2": [115, 124, 125, 126, 135, 189], "hat": [115, 132, 136, 180, 181, 186, 187, 189, 190, 255, 256, 258, 260, 261], "q_0": [115, 151, 219], "rotation_axi": 115, "planar_vector": 115, "q2_pc": 115, "u2_pc": 115, "parent_vector": 115, "plane_vector": 115, "g_frame": 115, "sphericaljoint": 115, "rot_typ": [115, 181, 185, 187], "rot_ord": [115, 181, 185, 253], "ball": 115, "socket": 115, "tait": [115, 181, 251, 253], "bryan": [115, 181, 251, 253], "joint_point": 115, "zxz": [115, 181, 190, 251, 253], "jointsmethod": [115, 124, 126], "damper": [115, 116, 121, 126], "form_eom": [115, 126, 132], "mass_matrix_ful": [115, 116, 121, 126, 133, 134], "forcing_ful": [115, 116, 121, 126, 133, 134], "mass_matrix": [115, 116, 120, 123, 128, 129, 133, 134, 139], "lagrangesmethod": [115, 116, 125, 130, 134, 135], "qd": [115, 116, 123, 133, 185], "inv_method": [115, 116], "solveabl": 115, "q_ind": [116, 117, 121, 123, 124, 125, 128, 129, 133, 135, 138], "u_ind": [116, 117, 121, 123, 124, 125, 128, 129, 133, 135, 138], "kd_eq": [116, 121, 123, 124, 125, 128, 129, 135, 138], "q_depend": [116, 123, 124, 125, 133, 138], "configuration_constraint": [116, 123, 124, 125, 133], "u_depend": [116, 123, 124, 125, 133, 138], "velocity_constraint": [116, 123, 124, 125, 133, 138], "acceleration_constraint": 116, "u_auxiliari": [116, 129, 133, 138], "forcelist": [116, 121, 124, 125, 128, 129, 134, 135, 138], "explicit_kinemat": 116, "levinson": [116, 137, 181, 251], "udot": [116, 123], "22626": 116, "ud": [116, 133], "kd": [116, 123, 128, 129, 133], "fl": [116, 123, 133, 134, 138, 200], "bl": [116, 123, 133, 138], "frstar": [116, 121, 123, 125, 128, 129, 133, 135, 138], "kanes_equ": [116, 121, 123, 125, 128, 129, 133, 135, 138], "a_and_b": [116, 117, 125], "auxiliary_eq": [116, 129], "k_d": [116, 133], "k_dnh": 116, "f_d": [116, 133, 134, 199], "f_dnh": 116, "mass_matrix_kin": 116, "k_kqdot": 116, "forcing_kin": 116, "k_ku": 116, "constrain": [116, 125, 134, 138], "kindiffdict": [116, 123, 128, 129, 133, 138], "new_method": [116, 125], "intens": [116, 117, 140, 143], "perm_mat": [116, 117, 135], "op_point": [116, 117, 125, 135], "beforehand": [116, 239], "to_linear": [116, 135], "recalcul": [116, 202], "hol_coneq": [116, 125, 134], "nonhol_coneq": [116, 125, 134], "nonconserv": 116, "form_lagranges_equ": [116, 125, 130, 134, 135], "qdot": [116, 123, 124, 185], "qdoubledot": 116, "lam": [116, 117, 139], "lagranges_equ": 116, "qd_ind": [116, 135], "q_dep": [116, 133, 135], "qd_dep": [116, 135], "solve_multipli": [116, 125], "sol_typ": 116, "array_lik": 116, "f_3": [117, 120, 139, 222], "f_c": [117, 125], "f_v": [117, 125], "f_a": 117, "q_d": 117, "u_i": [117, 135, 189, 199], "u_d": [117, 138], "q_op": [117, 125], "u_op": [117, 125], "qd_op": 117, "ud_op": [117, 125], "spatial": [118, 145, 181, 206], "angular_momentum": [118, 136, 138], "init_vprint": [118, 119, 136, 139, 181, 183, 185, 186, 189, 190], "linear_momentum": [118, 136, 138], "inertia_tupl": 118, "mv": 118, "iyi": [118, 181], "izz": [118, 181], "ixi": [118, 181], "iyz": [118, 181], "izx": 118, "yy": [118, 190, 222], "yz": [118, 190, 192], "zx": [118, 190], "inertia_of_point_mass": 118, "pos_vec": 118, "px": [118, 161, 166, 232], "body1": 118, "body2": 118, "body3": 118, "h2": 118, "multibodi": [118, 121, 131, 137, 138, 139, 189], "vprint": [119, 180, 185, 186, 190], "vpprint": [119, 180, 186, 190], "vlatex": [119, 180, 181, 186, 190], "coord_stat": 120, "right_hand_sid": 120, "coordinate_deriv": [120, 139], "alg_con": [120, 139], "output_eqn": 120, "coord_idx": [120, 139], "speed_idx": [120, 139], "m_3": [120, 139, 150, 191], "exogen": [120, 139], "ref_fram": 120, "graviti": [120, 121, 125, 126, 128, 130, 138, 187, 260], "theta_dot": 120, "kin_explicit_rh": [120, 139], "dyn_implicit_mat": [120, 139], "dyn_implicit_rh": [120, 139], "symsystem": 120, "dae": [120, 139], "adjust": [120, 209, 213], "comb_implicit_mat": [120, 139], "comb_implicit_rh": [120, 139], "kinema": 120, "comb_explicit_rh": [120, 139], "compute_explicit_form": 120, "awhil": 120, "constant_symbol": 120, "dynamic_symbol": 120, "motiongenesi": [121, 138], "double_pendulum": 121, "motionvari": [121, 138], "newtonian": [121, 138], "simprot": [121, 138], "n_a": 121, "n_b": 121, "w_a_n": 121, "w_b_n": [121, 138], "p_o_p": 121, "p_p_r": 121, "v_o_n": [121, 138], "v2pt": [121, 138], "v_p_n": 121, "v_r_n": 121, "force_p": 121, "force_r": 121, "tfinal": 121, "integstp": 121, "some_filenam": 121, "parse_autolev": 121, "sympy_cod": 121, "include_numer": 121, "include_pydi": 121, "pydi": [121, 138, 181], "u1d": [121, 123, 125, 128, 129, 133], "u2d": [121, 123, 125, 128, 129, 133], "frame_n": 121, "frame_a": 121, "frame_b": 121, "point_o": 121, "particle_p": 121, "p_pt": 121, "particle_r": 121, "r_pt": 121, "set_po": [121, 185, 189], "v2pt_theori": [121, 123, 128, 129, 130, 135, 136, 138, 139, 185, 189], "initial_condit": [121, 138], "overwritten": 121, "e2row": 121, "eigvec": [121, 138], "eigenvec": 121, "deg2rad": 121, "0174533": 121, "wo": 121, "coef": [121, 138], "u3": [121, 123, 124, 126, 128, 129, 133, 138, 181, 185, 189], "strai": 121, "reassign": 121, "inher": [121, 245, 275], "rhs_x": 121, "i_b_bo": 121, "body_b": 121, "body_b_f": 121, "b_cm": 121, "b_f": 121, "scene": [121, 218, 275], "i_c_d": 121, "i_p_q": 121, "i_b_o": 121, "e3": [121, 213, 222], "i_p_o": 121, "e4": [121, 213], "p_so_o": 121, "nicheck": 121, "plug": [121, 176], "hurdl": 121, "gitlab": 121, "repo": 121, "ch4": 121, "ch5": 121, "ch6": 121, "cst": 121, "grammar": [121, 218], "roll": [122, 123, 131, 189, 226, 268], "disc": [122, 131, 189, 268], "bicycl": [122, 131, 137, 268], "nonminim": [122, 131, 135, 268], "linkag": [122, 131, 268], "meijaard2007": [123, 137], "steer": [123, 137], "purposefulli": 123, "mechanics_print": [123, 124, 128, 129, 130, 132, 133, 134], "yaw": 123, "ang": 123, "rear": 123, "wheel": 123, "pitch": 123, "q4": [123, 133, 183], "q5": [123, 183], "q4d": [123, 133], "q5d": 123, "u4": [123, 129, 133, 138], "u5": [123, 129], "u6": [123, 129], "u3d": [123, 128, 129], "u4d": 123, "u5d": 123, "u6d": 123, "explanatori": 123, "wfrad": 123, "wrrad": 123, "htangl": 123, "forkoffset": 123, "forklength": 123, "framelength": 123, "forkcg1": 123, "forkcg3": 123, "framecg1": 123, "framecg3": 123, "iwr11": 123, "iwr22": 123, "iwf11": 123, "iwf22": 123, "iframe11": 123, "iframe22": 123, "iframe33": 123, "iframe31": 123, "ifork11": 123, "ifork22": 123, "ifork33": 123, "ifork31": 123, "mframe": 123, "mfork": 123, "mwf": 123, "mwr": 123, "wr": 123, "tempfram": 123, "tempfork": 123, "orientnew": [123, 125, 128, 129, 130, 135, 139, 181, 183, 185, 187, 189, 190], "wr_cont": 123, "wr_mc": 123, "frame_mc": 123, "fork_mc": 123, "wf_mc": 123, "wf_cont": 123, "flip": [123, 156, 165, 226], "frame_i": 123, "fork_i": 123, "wr_i": 123, "wf_i": 123, "bodyfram": 123, "bodyfork": 123, "bodywr": 123, "bodywf": 123, "nonholonom": 123, "slip": [123, 127, 129, 189], "replic": 123, "conlist_spe": 123, "conlist_coord": 123, "gravit": [123, 128, 174, 187, 260], "aforement": [123, 187, 219, 258], "paperradrear": 123, "paperradfront": 123, "hta": 123, "trailpap": 123, "rake": 123, "paperwb": 123, "02": 123, "paperframecgx": 123, "paperframecgz": 123, "paperforkcgx": 123, "paperforkcgz": 123, "framecgnorm": 123, "framecgpar": 123, "tempa": 123, "tempb": 123, "tempc": 123, "paperforkl": 123, "forkcgnorm": 123, "forkcgpar": 123, "upright": 123, "val_dict": 123, "0603": 123, "1405": 123, "05892": 123, "00708": 123, "00756": 123, "kdd": [123, 128, 129], "centripet": 123, "corioli": 123, "forcing_lin": 123, "mm_full": 123, "_k_kqdot": 123, "xdot": 123, "lean": [123, 128, 130], "amat": 123, "summari": [124, 218, 237, 262], "q_3": [124, 126, 189], "u_1": [124, 125, 126, 189, 201, 222], "u_2": [124, 125, 126, 189, 201, 222], "u_3": [124, 126, 189], "densiti": [124, 226, 237, 261], "link1": 124, "link2": 124, "link3": 124, "link4": 124, "joint1": 124, "joint2": 124, "joint3": 124, "j3": [124, 126, 150, 168], "fh": 124, "fhd": 124, "_method": 124, "_form_eom": 124, "eom": [125, 126, 135], "theta1": 125, "dq_dict": 125, "presimplifi": 125, "inp_vec": [125, 135], "lag": [125, 130, 135], "lm": [125, 134, 135, 199, 202], "lag_eq": [125, 135], "lam_op": 125, "mb": [126, 138], "ibzz": 126, "compound_pend": 126, "simple_pend": 126, "slider": 126, "rev1": 126, "rev2": 126, "w_r_n_qd": [128, 129], "dmc": [128, 129, 130], "uv": [128, 129, 171], "bodyd": [128, 129, 130], "bodylist": [128, 129], "revisit": [129, 189], "kane1985": [129, 133, 136, 137], "thorough": [129, 135, 219], "simplifc": 129, "f3": [129, 192, 206], "necessit": 129, "simplify_auxiliary_eq": 129, "lrh": 130, "planet": 131, "robot": 131, "fascin": 131, "trajectori": 131, "challeng": 131, "came": [131, 278], "tackl": [131, 239], "organ": 131, "amen": 131, "arduou": 131, "child_izz": 132, "child_mass": 132, "f_h": 133, "nh": 133, "ku": [133, 206], "dnh": 133, "f_r": [133, 135, 199], "speed_con": 133, "coord_con": 133, "u_dep": 133, "m_d": 134, "lam1": 134, "0_": 135, "blajer1994": [135, 137], "brought": [135, 226], "vel_p": 135, "a_op": 135, "b_op": 135, "m_op": 135, "a_lin": 135, "hasn": 135, "wikidyad": [136, 188], "wikidyadicproduct": [136, 188], "juxtaposit": [136, 180, 255], "otim": [136, 227], "l_p": 136, "likins1973": [136, 188], "l_b": 136, "requisit": 136, "t_p": 136, "t_b": 136, "t_t": 136, "virtu": [136, 138], "blajer": 137, "wojciech": 137, "werner": 137, "schiehlen": 137, "walter": 137, "schirm": 137, "kane1983": [137, 190], "likin": [137, 188], "david": [137, 202], "spacecraft": 137, "1983": [137, 241], "meijaard": 137, "jim": 137, "papadopoulo": 137, "ruina": 137, "schwab": 137, "royal": 137, "societi": [137, 219], "2084": 137, "1955": 137, "982": 137, "lectur": [138, 200, 226], "rigibodi": 138, "proprietari": 138, "k3": [138, 196], "k4": 138, "b11": 138, "b12": 138, "b21": 138, "b22": 138, "xd": 138, "xd2": 138, "y1d": 138, "y2d": 138, "tina": 138, "overwrit": [138, 180], "dt2": 138, "dy2": 138, "ty": 138, "linsolv": [138, 204, 224, 225, 284], "nonlinsolv": [138, 224, 225, 284], "rowmatrix": 138, "colmatrix": 138, "diagmat": 138, "eigval": 138, "row_matrix": 138, "col_matrix": 138, "ao": 138, "i12": 138, "i23": 138, "i31": 138, "bf": 138, "p_o_q": 138, "mag": 138, "unitvec": 138, "qo": 138, "p_p_q": 138, "partial_veloc": [138, 181, 185], "a_o_n": 138, "set_acc": [138, 185, 189], "qb": [138, 194], "qbd": 138, "alf_b_n": 138, "set_ang_acc": [138, 181], "ang_acc_in": [138, 181], "force_o": 138, "torque_a": 138, "qa": 138, "qad": 138, "a_b": 138, "v1pt": 138, "v1pt_theori": [138, 185, 189], "a1pt": 138, "a1pt_theori": [138, 185], "a2pt": 138, "a2pt_theori": [138, 185, 189], "angvel": 138, "force_vector": 138, "center_of_mass": 138, "kindiff": 138, "ke": 138, "configura": 138, "tion_constraint": 138, "pendent": 138, "velocity_con": 138, "traint": 138, "acceleration_": 138, "u_auxilia": 138, "ry": 138, "matlplotlib": 138, "stiff": 138, "damp": 138, "legend": [138, 192, 209], "introspect": 138, "rich": [138, 218], "media": [138, 144], "histori": 138, "esqu": 138, "cpython": 138, "pertin": [139, 193, 201], "alg_con_ful": 139, "symsystem1": 139, "symsystem2": 139, "symsystem3": 139, "raytransfermatrix": 140, "geometricrai": 140, "beamparamet": 140, "geometric_conj": 140, "gauss_conj": 140, "conjugate_gauss_beam": 140, "lens": 140, "gaussopt": 140, "wavelen": 140, "z_r": 140, "wavelength": [140, 145], "waist": 140, "rayleigh": [140, 226], "refract": [140, 142, 144, 145], "530e": 140, "88679245283019": 140, "92753330865999": 140, "w_0": [140, 219], "00100000000000000": 140, "freespac": 140, "00101413072159615": 140, "00210803120913829": 140, "r672": 140, "complex_beam_paramet": 140, "r673": 140, "gaussian_beam": 140, "spread": [140, 206, 226, 241], "00053": 140, "goui": 140, "55998576005696": 140, "2809": 140, "peak": 140, "waist_approximation_limit": 140, "paraxi": [140, 144], "06e": 140, "curvedmirror": 140, "curvedrefract": 140, "flatmirror": 140, "flatrefract": 140, "2x1": 140, "thinlen": 140, "r674": 140, "ray_transfer_matrix_analysi": 140, "waist_in": 140, "waist_out": 140, "s_in": 140, "s_out": 140, "w_o": 140, "gaussian_conj": 140, "z_r_in": 140, "incid": [140, 144], "z_r_out": 140, "emerg": [140, 194], "geometric_conj_ab": 140, "geometric_conj_af": 140, "geometric_conj_bf": 140, "rayleigh2waist": 140, "waist2rayleigh": 140, "optic": [142, 143, 144, 145, 268], "permitt": 142, "permeabl": 142, "fermat": 142, "electr": [142, 144, 187, 258, 260], "electromagnet": [142, 187, 232, 260], "intrinsic_imped": 142, "149896229": [142, 145], "kilogram": [142, 174, 176, 178], "1250000": 142, "amper": 142, "refractive_index": 142, "299792458": [142, 145, 178], "r675": 142, "optical_medium": 142, "travel": [142, 145, 187, 258, 260], "stoke": 143, "mueller": 143, "jones_vector": 143, "stokes_vector": 143, "half_wave_retard": 143, "polarizing_beam_splitt": 143, "jones_2_stok": 143, "\u2148": [143, 191, 205, 206, 225, 284], "\u03c7": 143, "\u03c8": 143, "i\u2080": 143, "plate": 143, "hwp": 143, "splitter": 143, "transmit": [143, 144], "pb": 143, "transmitted_port": 143, "reflected_port": 143, "transmitted_pow": 143, "reflected_pow": 143, "r676": 143, "jones_calculu": 143, "r677": 143, "mueller_calculu": 143, "r678": 143, "stokes_paramet": 143, "retard": 143, "poincar\u00e9": 143, "tilt": 143, "mayor": 143, "linear_polar": 143, "transmiss": [143, 144], "mueller_matrix": 143, "quarter_wave_retard": 143, "quarter": 143, "phase_retard": 143, "\u03b4": 143, "phia": 143, "phib": 143, "4x1": [143, 226], "phi_a": 143, "phi_b": 143, "qwp": 143, "reflective_filt": 143, "unpolar": 143, "transmissive_filt": 143, "attenu": 143, "transmitt": 143, "ndf": 143, "refraction_angl": 144, "fresnel_coeffici": 144, "brewster_angl": 144, "critical_angl": 144, "lens_makers_formula": 144, "mirror_formula": 144, "lens_formula": 144, "hyperfocal_dist": 144, "transverse_magnif": 144, "medium1": 144, "medium2": 144, "brewster": 144, "926093295503462": 144, "onset": 144, "850908514477849": 144, "02005": 144, "angle_of_incid": 144, "fresnel": [144, 206, 216], "polaris": 144, "te": 144, "undergo": 144, "317843553417859": 144, "348645229818821": 144, "658921776708929": 144, "651354770181179": 144, "235625382192159": 144, "971843958291041": 144, "816477005968898": 144, "577377951366403": 144, "r679": 144, "fresnel_equ": 144, "coc": 144, "0033": 144, "focal_length": 144, "n_len": 144, "n_surr": 144, "thick": 144, "1515151515151": 144, "0000000000000": 144, "3418463277618": 144, "41152": 144, "magnif": 144, "twave": 145, "time_period": 145, "wavenumb": 145, "phi1": 145, "phi2": 145, "w1": [145, 218], "w3": [145, 206], "superposit": [145, 156, 167, 193], "angular_veloc": 145, "tempor": 145, "r680": 146, "paulialgebra": 146, "evaluate_pauli_product": 146, "paulimatric": 146, "sigma3": 146, "nodal": [147, 172, 193], "hw": [147, 172], "coherent_st": 147, "coher": [147, 173, 179], "1d": [147, 149, 162, 181, 231], "wavefunct": [147, 160, 169, 172, 268], "r681": 148, "__cmp__": [148, 152, 171], "dagger": [148, 152, 158, 160, 163, 165, 170, 171, 268], "todo": [149, 151, 155, 156, 160, 161, 163, 164, 165, 166, 167, 199, 206, 213, 231], "operatorset": [149, 161], "positionbra3d": 149, "eigenbra": [149, 162, 168], "positionket3d": 149, "eigenket": [149, 162, 168], "positionstate3d": 149, "eigenst": [149, 161, 166, 168, 169], "position_x": 149, "position_i": 149, "position_z": 149, "pxbra": [149, 161], "pxket": [149, 161, 166], "pxop": [149, 161, 166], "xbra": [149, 161, 166], "xket": [149, 161, 166], "xop": [149, 161, 166], "yop": 149, "zop": 149, "momenta": 150, "uncoupl": [150, 168], "r682": 150, "j_3": [150, 168, 191], "r683": 150, "wigner3j": [150, 191], "wigner": [150, 168, 226, 268], "varshalovich": [150, 168], "zyla": 150, "theor": 150, "phy": [150, 176, 191], "083c01": 150, "r684": 150, "w3j": 150, "715": [150, 191, 206], "wigner6j": [150, 191], "j12": [150, 168], "j23": 150, "6j": [150, 191], "wigner9j": [150, 191], "j4": 150, "j34": 150, "j13": 150, "j24": 150, "9j": [150, 191], "cg_simp": 150, "r685": 150, "clebsh": 150, "rethink": 151, "figsiz": 151, "circuitplot": 151, "nqubit": [151, 155, 156, 165], "control_lin": 151, "gate_idx": [151, 155], "min_wir": 151, "max_wir": 151, "control_point": 151, "wire_idx": 151, "not_point": 151, "one_qubit_box": 151, "box": [151, 156, 158, 167, 169, 261, 268], "qubit": [151, 155, 156, 157, 158, 164, 268], "swap_point": 151, "two_qubit_box": 151, "createcg": 151, "latexnam": 151, "mock": 151, "mz": 151, "circuit_plot": 151, "min_qubit": [151, 155], "autogener": 151, "wire": 151, "j_0": 151, "r686": 152, "comm": [152, 171, 232], "plank": 153, "r687": 153, "05457162000000e": 153, "planck_const": 153, "hermetian": 154, "r688": 154, "r689": 154, "ket": [154, 159, 160, 161, 163, 165, 166, 169, 171], "bra": [154, 159, 160, 161, 163, 165, 166, 169, 171], "innerproduct": [154, 159, 160, 166, 168, 171], "outerproduct": [154, 160], "seamlessli": 154, "hermitian_adjoint": 154, "hermitian_transpos": 154, "_apply_operators_qubit": 155, "gate_sort": 155, "gate_simp": 155, "ugat": 155, "cgate": 155, "control_valu": 155, "cnot": 155, "eval_control": 155, "plot_gat": 155, "circ_plot": 155, "simplify_cg": 155, "cphase": 155, "cnotgat": 155, "qappli": [155, 156, 158, 160, 165, 268], "get_target_matrix": 155, "represen": 155, "hadamardg": 155, "identityg": 155, "onequbitg": 155, "phaseg": 155, "swapgat": 155, "target1": 155, "target2": 155, "tgate": 155, "twoqubitg": 155, "xgate": 155, "ygate": 155, "zgate": 155, "bubbl": 155, "random_circuit": 155, "ngate": 155, "gate_spac": 155, "mermin": 156, "_represent_zg": 156, "oracleg": 156, "oracl": 156, "intqubit": [156, 165], "search_funct": 156, "wgate": 156, "apply_grov": 156, "grover_iter": 156, "qstate": 156, "wv": 156, "superposition_basi": 156, "numqubit": 156, "basis_st": 156, "matt": 157, "complexspac": 157, "directsumhilbertspac": 157, "r690": 157, "hilbertspac": 157, "fockspac": 157, "hilbert_spac": [157, 160, 169], "direct_sum": 157, "quantiz": [157, 268], "r691": 157, "mess": [157, 222, 225, 283], "fock_spac": 157, "r692": 157, "tensorpowerhilbertspac": 157, "r693": 157, "tensor_product": 157, "tensorproducthilbertspac": 157, "r694": 157, "clebsch": [158, 168, 191, 268], "gordan": [158, 168, 191, 268], "hilbert": [158, 160, 166, 268], "grover": [158, 268], "qft": [158, 167, 268], "shor": [158, 268], "brabas": [159, 160, 166, 169], "ketbas": [159, 160, 166, 169], "r695": 159, "inner_product": 159, "apply_oper": [160, 171], "identityoper": 160, "r696": 160, "r697": 160, "polymoni": 160, "operator_": 160, "28physic": 160, "old_assumpt": 160, "r698": 160, "outer_product": 160, "unitaryoper": 160, "operators_to_st": 161, "state_to_oper": 161, "_operators_to_st": 161, "state_map": 161, "_state_to_oper": 161, "statebas": [161, 166, 169], "piab": 162, "piabbra": 162, "piabhamiltonian": 162, "piabket": 162, "ip_doit": 163, "smarter": [164, 215], "rk": 164, "iqft": 164, "rkgate": 164, "qtf": 164, "povm": 165, "as_int": [165, 247], "qubit_valu": 165, "intqubitbra": 165, "00001": 165, "qubitbra": 165, "matrix_to_dens": 165, "matrix_to_qubit": 165, "measure_al": 165, "ensembl": 165, "measure_all_oneshot": 165, "oneshot": 165, "measure_parti": 165, "measure_partial_oneshot": 165, "qubit_to_matrix": 165, "enumerate_st": 166, "_enumerate_st": 166, "foo_1": 166, "foo_2": 166, "foo_3": 166, "test2": 166, "bar_4": 166, "bar_5": 166, "bar_10": 166, "get_basi": 166, "replace_non": 166, "operator_to_st": 166, "qexpr": 166, "integrate_result": 166, "orig_expr": 166, "x_ket": 166, "x_op": 166, "rep_expect": 166, "px_2": 166, "px_1": 166, "rep_innerproduct": 166, "_repres": 166, "_represent_foobasi": 166, "foobasi": 166, "_represent_szop": 166, "szupket": 166, "szop": 166, "sz": 166, "cmod": 167, "reformat": 167, "period_find": 167, "momemtum": 168, "j2op": 168, "jxbra": 168, "jx": 168, "jzket": 168, "jxbracoupl": 168, "jcoupl": 168, "jzketcoupl": 168, "jxket": 168, "jxketcoupl": 168, "jybra": 168, "jy": 168, "jybracoupl": 168, "jyket": 168, "jyketcoupl": 168, "jzbra": 168, "jz": 168, "jzbracoupl": 168, "j_4": [168, 191], "argular": 168, "jzop": 168, "passiv": 168, "r699": 168, "wignerd": 168, "mp": [168, 224, 240], "jm": 168, "jj": 168, "r700": 168, "jcoupling_list": 168, "coupledspinst": 168, "spinstat": 168, "r701": 169, "dual_class": 169, "mn": [169, 206, 226], "ket_not": 169, "r702": 169, "k0": [169, 197, 199, 226], "orthogonalbra": 169, "orthogonalket": 169, "orthogonalst": 169, "_eval_adjoint": 169, "timedepbra": 169, "timedepst": 169, "timedepket": 169, "prob": [169, 226], "412214747707527": 169, "matrix_tensor_product": 170, "axb": 170, "xdagger": 170, "axc": 170, "bxc": 170, "tensor_product_simp": 170, "cxd": 170, "boson": 171, "fetter": 171, "welecka": 171, "secondqu": 171, "annihilateboson": 171, "fockstateket": 171, "bket": 171, "fockstatebosonket": 171, "annihilatefermion": 171, "createboson": 171, "is_only_q_annihil": 171, "destroi": [171, 215], "quasi": 171, "hole": 171, "is_only_q_cr": 171, "is_q_annihil": 171, "is_q_creat": 171, "antisymmetrictensor": 171, "bbra": 171, "fockstatebosonbra": 171, "bd": 171, "bosonicbasi": 171, "fock": 171, "NO": 171, "createfermion": 171, "wick": 171, "fbra": 171, "fockstatefermionbra": 171, "fket": 171, "fockstatefermionket": 171, "fixedbosonicbasi": 171, "n_particl": 171, "n_level": 171, "fockstat": 171, "occup": 171, "bosonbra": 171, "fockstatebra": 171, "fermi_level": 171, "r703": 171, "textwrap": [171, 247], "_q": 171, "get_subno": 171, "fermionicoper": 171, "has_q_annihil": 171, "q_annihil": 171, "has_q_creat": 171, "leftmost": 171, "q_creator": 171, "iter_q_annihil": 171, "iter_q_cr": 171, "0x": 171, "permutationoper": 171, "get_permut": 171, "varbosonicbasi": 171, "n_max": 171, "creator": 171, "evaluate_delta": 171, "einstein": [171, 232], "d_ij": 171, "_j": [171, 176, 191, 208], "d_ip": 171, "d_qp": 171, "matrix_rep": 171, "simplify_index_permut": 171, "permutation_oper": 171, "schemat": [171, 176], "abij": 171, "abji": 171, "baij": 171, "baji": 171, "permutlist": 171, "substitute_dummi": 171, "new_indic": 171, "pretty_indic": 171, "_get_ordered_dummi": 171, "_c": 171, "_d": 171, "index_group": 171, "string_of_lett": 171, "my_dummi": 171, "_v": [171, 190], "_p_0": 171, "_p_1": 171, "keep_only_fully_contract": 171, "sho": 172, "isotrop": 172, "mk": [173, 176], "legal": 173, "temperatur": [173, 187, 260], "dimensions": 173, "dimsys_si": [173, 174], "get_dimensional_depend": [173, 174], "has_integer_pow": 173, "dim_si": 173, "base_dim": 173, "derived_dim": 173, "dimensional_depend": 173, "can_transf_matrix": 173, "useless": [173, 197, 199], "inv_can_transf_matrix": 173, "dim_can_vector": 173, "dim_vector": 173, "is_consist": [173, 179], "is_dimensionless": 173, "list_can_dim": 173, "print_dim_bas": 173, "gravitational_const": [174, 178], "equivalent_dim": 174, "grav_eq": 174, "kepler": [174, 251], "venu": 174, "701": 174, "dai": [174, 178, 222], "venus_a": 174, "108208000e3": 174, "solar": 174, "solar_mass": 174, "9891e30": 174, "convert_to": [174, 178, 195, 201], "5112118495813": 174, "659097795948": 174, "astrophys": 174, "ill": 174, "astrophysicist": 175, "ua": [175, 194], "earth": [175, 187, 260], "sun": 175, "theoricist": 175, "philosophi": [175, 222, 225, 268], "rough": 176, "mole": 176, "dimensionless": 176, "unavoid": 176, "d_3": 176, "d_2": [176, 202, 226], "underbrac": [176, 189], "countabl": [176, 225], "pmatrix": 176, "kg": [176, 261], "glu": 176, "men": 176, "heat": 176, "joul": 176, "calori": 176, "stori": 176, "chemistri": 176, "page52": 176, "1952": 176, "page78": 176, "deboer79": 176, "boer": 176, "818": 176, "levyleblond77": 176, "l\u00e9vy": 176, "leblond": 176, "conceptu": [176, 193, 260], "rivista": 176, "del": [176, 241, 251, 259, 283], "nuovo": [176, 191], "cimento": [176, 191], "1977": 176, "187": [176, 200], "214": 176, "anticip": 176, "bin_prefix": 177, "abbrev": [177, 178, 206], "latex_repr": [177, 178], "encapsul": [177, 199, 225, 239], "kilo": 177, "scale_factor": 178, "pretty_unicode_repr": 178, "pretty_ascii_repr": 178, "mathml_presentation_repr": 178, "is_prefix": 178, "abbrevi": [178, 194, 206, 225, 227], "speed_of_light": 178, "reference_quant": 178, "target_unit": 178, "mile": 178, "atomic_mass_const": 178, "centimet": 178, "25146": 178, "609344": 178, "86400": 178, "660539060e": 178, "300000": 178, "planck": 178, "62963087839509e": 178, "base_unit": 179, "descr": 179, "dimension_system": 179, "derived_unit": 179, "overridden": [179, 193, 208, 283], "get_units_non_prefix": 179, "rigidli": 180, "entireti": 180, "_str": 180, "coordinatesym": [181, 183], "otherfram": [181, 251], "n_alpha_b": 181, "ny": 181, "_3": [181, 191], "orient_body_fix": 181, "orient_space_fix": 181, "orient_quaternion": 181, "quaternion": [181, 185, 190, 251, 253], "userwarn": [181, 235, 242, 279], "rotation_ord": [181, 251, 253], "xzx": 181, "xyx": [181, 251, 253], "yzy": 181, "zyz": 181, "yxy": [181, 190], "yzx": [181, 190], "zxy": 181, "xzy": 181, "zyx": 181, "yxz": 181, "orient_explicit": 181, "lambda_x": [181, 251, 253], "lambda_i": [181, 251, 253], "lambda_z": [181, 251, 253], "q0": [181, 222, 251, 253], "newnam": 181, "gen_spe": [181, 185], "variable_map": 181, "a_x": [181, 190, 206], "b_x": [181, 183, 190, 232], "b_y": [181, 183, 190, 232], "a_z": [181, 190], "b_z": [181, 190, 232], "inlist": 181, "var_in_dcm": 181, "reexpress": [181, 256], "time_deriv": [181, 183, 187], "free_dynamicsymbol": 181, "codirect": 181, "dyadic_tensor": [181, 251], "frame1": 181, "frame2": [181, 183], "second_reference_fram": 181, "ixz": 181, "inertia_dyad": 181, "pertain": [182, 188], "fieldfunct": [182, 187], "curl": [182, 251, 254, 261], "vect": [182, 251, 254], "r_x": [182, 187], "r_y": [182, 187], "r_z": [182, 187], "gradient": [182, 191, 192, 251, 254, 260], "scalar_potenti": [182, 187, 254, 258], "scalar_field": [182, 187, 251, 254, 258], "grad_field": [182, 254], "scalar_potential_differ": [182, 187, 254, 258], "sympyfi": [182, 183, 185, 254], "position2": [182, 254], "vectfield": [182, 187, 254, 258], "is_conserv": [182, 187, 254, 258], "is_solenoid": [182, 187, 254, 258], "solenoid": [182, 254], "q6": 183, "vec1": 183, "vec2": 183, "n_x": 183, "rotating_reference_fram": 183, "time_derivatives_in_the_two_fram": 183, "otherpoint": 185, "outfram": 185, "fixedfram": 185, "get_motion_param": 185, "vectori": [185, 187, 255, 260], "timevalue1": 185, "timevalue2": 185, "313": 185, "vel_vec": 185, "q1dd": 186, "q2dd": 186, "charg": [187, 260], "displac": [187, 189, 260], "temper": 187, "electric_potenti": [187, 258], "r1_x": 187, "r1_y": 187, "infinitesim": [187, 222, 258], "nabla": [187, 251, 257, 258], "f_y": [187, 258], "f_x": [187, 225, 258], "sink": [187, 258], "irrot": [187, 258], "conservative_field": [187, 258], "aug": [188, 225], "dyadic_product": [188, 259], "inc": [188, 200], "w_x": 189, "w_y": 189, "w_z": 189, "w_1": [189, 201], "w_2": [189, 201], "w_3": 189, "textrm": [189, 190, 214], "u_x": 189, "sp": 189, "oq": 189, "qp": 189, "rod": 189, "went": 189, "parallelogram": 190, "c_x": 190, "c_y": 190, "c_z": 190, "train": 190, "friend": 190, "xz": [190, 192], "zy": 190, "undergon": [190, 225], "vastli": 190, "wait": 190, "mold": 190, "bp": [190, 222], "bpp": 190, "zzx": 190, "multifram": 190, "direction": 190, "racah": 191, "gaunt": 191, "rasch03": 191, "regge58": 191, "regg": 191, "544": 191, "regge59": 191, "116": [191, 200], "1959": 191, "edmonds74": 191, "edmond": 191, "princeton": [191, 226], "1957": 191, "rasch": 191, "siam": [191, 244], "sci": 191, "1416": 191, "1428": 191, "liberatodebrito82": 191, "liberato": 191, "brito": 191, "homeier96": 191, "homeier": 191, "steinborn": 191, "mol": 191, "368": 191, "1996": [191, 200, 216, 224, 251], "forum": [191, 225], "m4nzdu": 191, "7o38": 191, "jen": 191, "03": [191, 226], "oscar": 191, "gerardo": 191, "lazo": 191, "arjona": 191, "phil": 191, "adam": [191, 202], "lemaitr": 191, "2022": 191, "jyr2000": 191, "gmail": 191, "clebsch_gordan": 191, "2j_3": 191, "dot_rot_grad_ynm": 191, "_l": 191, "l_2": 191, "l_3": 191, "drastic": 191, "2l_1": 191, "2l_2": 191, "2l_3": 191, "1200": 191, "00689500421922113448": 191, "inflect": 191, "unsuit": 191, "dd": [191, 211], "ee": [191, 201], "j_5": 191, "j_6": 191, "richer": 191, "real_gaunt": 191, "realgaunt": 191, "m0": [191, 232], "00002480019791932209313156167": 191, "wigner_3j": 191, "wigner_6j": 191, "wigner_9j": 191, "j_7": 191, "j_8": 191, "j_9": 191, "05555555": 191, "1666666": 191, "wigner_d": 191, "j_z": 191, "j_y": 191, "\u03b3": [191, 273, 283], "wigner_d_smal": 191, "textbackend": 192, "plot_parametr": 192, "plot_implicit": 192, "plot3d_parametric_lin": 192, "plot3d_parametric_surfac": 192, "xlabel": 192, "ylabel": 192, "zlabel": 192, "aspect_ratio": 192, "ylim": 192, "axis_cent": 192, "xscale": 192, "yscale": 192, "autoscal": 192, "textplot": 192, "_seri": [192, 203], "baseseri": 192, "nonparametr": 192, "basebackend": 192, "parametric2dlineseri": 192, "parametric3dlineseri": 192, "red": 192, "cyan": 192, "grayscal": 192, "integers_onli": 192, "surfaceover2drangeseri": 192, "parametricsurfaceseri": 192, "surface_color": 192, "range1": 192, "range2": 192, "fill_between": 192, "inch": 192, "expr_x": 192, "expr_i": 192, "canva": 192, "range_x": 192, "range_i": 192, "nb_of_points_x": 192, "nb_of_points_i": 192, "expr_z": 192, "range_u": 192, "range_v": 192, "nb_of_points_u": 192, "nb_of_points_v": 192, "x_var": 192, "y_var": 192, "mesh": 192, "p8": 192, "p9": 192, "nrow": [192, 195], "ncolumn": 192, "stuff": [192, 237, 239, 247], "is_2dlin": 192, "oblig": 192, "only_integ": 192, "get_seg": 192, "get_color_arrai": 192, "var_start_end": 192, "r704": 192, "luiz": 192, "henriqu": 192, "figueiredo": 192, "r705": 192, "line3dbaseseri": 192, "surfacebaseseri": 192, "var_start_end_x": 192, "var_start_end_i": 192, "var_start_end_u": 192, "var_start_end_v": 192, "implicitseri": 192, "has_equ": 192, "use_interval_math": 192, "centric": 192, "get_mesh": 192, "process_seri": 192, "_process_seri": 192, "keyboard": 192, "mous": 192, "pyglet_plot": 192, "screenshot": 192, "camera": 192, "zoom": 192, "numpad": 192, "ordin": [192, 222, 247], "f5": 192, "f6": 192, "f8": 192, "drag": 192, "button": [192, 238], "curvilinear": [192, 255, 256], "__setitem__": 192, "zfade4": 192, "key1": 192, "value1": 192, "key2": 192, "value2": 192, "unbound_theta": 192, "wirefram": 192, "saddl": 192, "fz": 192, "_______________________________________________________": 192, "mediterranean": 193, "cultur": 193, "arab": 193, "lighten": 193, "tapestri": 193, "woven": 193, "european": 193, "soil": 193, "plausibl": 193, "teeter": 193, "totter": 193, "outweigh": 193, "excit": 193, "amus": 193, "kempf": 193, "1944": 193, "20th": 193, "dedekind": 193, "intim": 193, "disciplin": 193, "toolset": 193, "atiyah69": [193, 200], "gear": 193, "greuel2008": [193, 200], "interspers": 193, "lr": 193, "ilex": 193, "\u211a": [193, 206], "localis": 193, "abridg": 193, "free_modul": [193, 197], "quotient_r": [193, 197], "overload": [193, 196, 197, 255, 278], "polynomialr": [193, 197, 204], "domain_or_r": [193, 197], "quotientr": [193, 197], "base_id": [193, 197], "elbow": 193, "room": 193, "componentwis": [193, 206], "inclin": 193, "biproduct": 193, "quotient_modul": 193, "is_submodul": 193, "multiply_id": 193, "identity_hom": 193, "freemodul": 193, "freemoduleel": 193, "conicis": 193, "_contain": 193, "_syzygi": 193, "_in_terms_of_gener": 193, "_intersect": 193, "_module_quoti": 193, "reduce_el": [193, 201], "represantit": 193, "in_terms_of_gener": 193, "inclusion_hom": 193, "rela": 193, "relb": 193, "is_full_modul": 193, "module_quoti": 193, "opt": [193, 199, 218, 279], "coincis": 193, "syzygy_modul": 193, "r_n": 193, "_contains_elem": 193, "_contains_id": 193, "_quotient": 193, "_union": 193, "_product": 193, "is_whole_r": 193, "is_maxim": 193, "is_primari": 193, "is_rad": 193, "is_princip": 193, "xj": 193, "satur": 193, "subquoti": 193, "quotientmodul": 193, "subquotientmodul": 193, "killed_modul": 193, "quotientmoduleel": 193, "kill": [193, 197, 237], "quotient_hom": 193, "ker": 193, "surject": 193, "cokernel": 193, "coker": 193, "meaningfulli": 193, "restrict_domain": 193, "homomoprh": 193, "modulehomomorph": [193, 201], "_ker": 193, "_img": 193, "_kernel": 193, "_imag": 193, "_restrict_domain": 193, "_restrict_codomain": 193, "_quotient_domain": 193, "_quotient_codomain": 193, "_appli": 193, "_mul_scalar": 193, "_compos": 193, "_add": [193, 212], "is_inject": 193, "quotient_domain": 193, "is_isomorph": 193, "preimag": 193, "restrict_codomain": 193, "is_surject": 193, "quotient_codomain": 193, "induct": 193, "monogen": 193, "monogenicfiniteextens": [193, 197], "finiteextens": 193, "sqrt2": [193, 196], "_5": 193, "extensionel": [193, 197], "notinvert": [193, 199, 202], "overview": [194, 225, 259, 260], "nu_1": 194, "nu_2": 194, "nu_n": 194, "nu_i": 194, "customarili": 194, "irreduc": [194, 197, 199, 201, 202, 205, 226, 232, 283], "endow": [194, 202], "resp": [194, 197, 222], "divmod": [194, 196, 197], "cb": [194, 244], "sqf_list": [194, 197, 202], "sqf": [194, 197, 202, 219], "buchberg": [194, 199, 200, 202], "solve_poly_system": [194, 202, 224, 225], "ddm": 195, "fmt": [195, 197, 201], "matrix1": 195, "sdm": [195, 199], "dmnonsquarematrixerror": 195, "zz_i": [195, 196], "from_dict_sympi": 195, "ncol": 195, "elemsdict": 195, "from_list_sympi": 195, "from_list": [195, 197, 202, 203], "construct_domain": [195, 196, 197, 202], "from_rep": 195, "drep": 195, "dm": [195, 201], "ownership": 195, "scc": 195, "substract": 195, "to_dens": 195, "to_field": [195, 197, 202], "to_spars": 195, "aq": 195, "ccc": [195, 225], "from_ddm": 195, "domainerror": [195, 199, 202], "to_ddm": 195, "r706": 195, "pythonmpq": [196, 197], "srepr": [196, 278], "strength": 196, "richardon": 196, "dup_factor_list": 196, "factortool": [196, 199], "dup_": [196, 199], "dmp_": [196, 199], "z1": [196, 197, 224], "is_field": [196, 197], "quo": [196, 197, 199, 202], "rem": [196, 197, 199, 202], "exquo": [196, 197, 202], "exactquotientfail": [196, 197, 199, 202], "mpz": [196, 197], "of_typ": [196, 197], "z1_sympi": 196, "to_sympi": [196, 197], "from_sympi": [196, 197], "forth": [196, 201], "z_sympi": 196, "z_zz": 196, "coercionfail": [196, 199], "sum_domain": 196, "expressions_sympi": 196, "expressions_dom": 196, "result_dom": 196, "e_dom": 196, "result_sympi": 196, "qq_i": 196, "gaussianinteg": [196, 197], "gaussianrationalfield": [196, 197], "gaussianr": [196, 197], "galoi": [196, 199, 201], "finitefield": [196, 197], "pythonfinitefield": [196, 197], "gmpyfinitefield": [196, 197], "welcom": [196, 222, 276], "realel": [196, 197], "complexel": [196, 197], "mpc": 196, "xr": [196, 204], "zc": 196, "1j": 196, "_mpc_": 196, "realfield": [196, 197], "rr100": 196, "33333333333333333333333333333": 196, "hack": [196, 222, 235], "algebraic_field": [196, 197, 199, 201], "algebraicfield": [196, 197, 199, 201], "sqrt3": 196, "x_dom": 196, "p_expr": [196, 197], "polyel": [196, 197, 199, 203, 204, 206], "p_dom": 196, "xk": [196, 197, 208], "yk": [196, 197], "poly_r": [196, 197], "old_polynomialr": 196, "globalpolynomialr": 196, "polyclass": [196, 197, 202], "yr": [196, 204], "broader": 196, "get_field": [196, 197], "frac_field": [196, 197], "rationalfield": [196, 197], "old_frac_field": [196, 197], "fractionfield": [196, 197], "old_fractionfield": 196, "xf": 196, "yf": 196, "fracfield": [196, 197], "expressiondomain": [196, 197], "elements_sympi": 196, "elements_k": 196, "convert_from": [196, 197], "num_zz": 196, "num_qq": 196, "domainel": [196, 197, 204], "encompass": 196, "all_coeff": [196, 197, 202], "dom": [196, 197, 199, 214], "strang": 196, "hybrid": 196, "unreli": 196, "usefulli": 197, "pythonr": [197, 204], "p_domain": 197, "ez": [197, 232], "get_r": 197, "has_assoc_field": 197, "has_assoc_r": 197, "alg_field_from_poli": [197, 201], "root_index": 197, "almosteq": 197, "cyclotomic_field": [197, 201], "zeta7": 197, "zeta_": 197, "lexord": [197, 202], "from_algebraicfield": 197, "from_complexfield": 197, "from_expressiondomain": 197, "from_expressionrawdomain": 197, "from_ff": 197, "modularinteg": 197, "from_ff_gmpi": 197, "from_ff_python": 197, "from_fractionfield": 197, "from_globalpolynomialr": 197, "from_monogenicfiniteextens": 197, "from_polynomialr": 197, "from_qq_gmpi": 197, "from_qq_python": 197, "from_realfield": 197, "from_zz_gmpi": 197, "from_zz_python": 197, "gcdex": [197, 202], "get_exact": 197, "half_gcdex": [197, 202], "is_pid": 197, "is_r": 197, "is_nonposit": 197, "is_on": [197, 202], "rersiv": 197, "__neg__": 197, "__pos__": 197, "__sub__": 197, "q_domain": 197, "q_expr": 197, "x_domain": 197, "alg": [197, 201, 205], "trait": 197, "is_unit": 197, "__divmod__": 197, "__floordiv__": 197, "__mod__": [197, 201], "simpledomain": 197, "compositedomain": 197, "from_qq": 197, "from_zz": 197, "gmpyinteg": 197, "pythoninteg": 197, "gmpyrationalfield": 197, "pythonrationalfield": 197, "from_gaussianrationalfield": 197, "gaussianel": 197, "gaussiandomain": 197, "qq_python": 197, "zz_python": 197, "z2": 197, "z3": 197, "z4": 197, "from_gaussianinteg": 197, "as_algebraicfield": 197, "orig_ext": 197, "integral_basi": [197, 201], "maximal_ord": [197, 201], "zeta5": 197, "primes_abov": [197, 201], "primeid": [197, 201], "to_alg_num": [197, 201], "legibl": 197, "to_rat": 197, "mpelement": 197, "complexfield": 197, "lc": [197, 199, 202], "domain_or_field": 197, "dmf": 197, "coercibl": 197, "monomialord": [197, 202], "xring": 197, "vring": 197, "sring": [197, 203, 204], "polyr": [197, 199, 204], "factor_list": [197, 202, 283], "add_gen": 197, "drop_to_ground": 197, "monomial_basi": 197, "206": [197, 202], "744": 197, "945": [197, 203], "is_monomi": [197, 202], "const": [197, 206], "coeffcient": [197, 199], "inplac": 197, "shallow": [197, 213], "zero_monom": 197, "fv": 197, "clo": 197, "p64": 197, "qv": 197, "f0": 197, "imul_num": 197, "itercoeff": 197, "itermonom": 197, "iterterm": 197, "leading_expv": 197, "leading_monom": 197, "leading_term": 197, "listcoeff": 197, "listmonom": 197, "listterm": 197, "monom": [197, 202], "strip_zero": 197, "tail_degre": 197, "xfield": 197, "vfield": [197, 257], "sfield": [197, 257], "fracel": [197, 206], "lev": 197, "add_ground": [197, 202], "all_monom": [197, 202], "all_term": [197, 202], "cauchy_lower_bound": 197, "cauchy_upper_bound": 197, "clear_denom": [197, 202], "count_complex_root": 197, "sup": [197, 202, 206, 213, 214], "count_real_root": 197, "deflat": [197, 202], "y_i": [197, 199, 201, 202, 222], "x_j": [197, 199, 202], "degree_list": [197, 202], "eject": [197, 202], "exquo_ground": [197, 202], "factor_list_includ": [197, 202], "from_dict": [197, 202], "from_sympy_list": 197, "gff_list": [197, 202], "homogeneous_ord": [197, 202, 219, 222], "is_cyclotom": [197, 202], "is_ground": [197, 202], "is_homogen": [197, 202], "is_irreduc": [197, 202], "is_linear": [197, 202], "is_mon": [197, 202], "is_quadrat": [197, 202], "is_sqf": [197, 202], "l1_norm": [197, 202], "l2_norm_squar": 197, "max_norm": [197, 202], "mignotte_sep_bound_squar": 197, "mignott": [197, 199], "mul_ground": [197, 202], "pdiv": [197, 202], "pexquo": [197, 202], "pquo": [197, 202], "prem": [197, 202], "quo_ground": [197, 202], "refine_root": [197, 201, 202], "includepr": [197, 199, 202], "sqf_list_includ": [197, 202], "sqf_norm": [197, 202], "sqf_part": [197, 202], "sqr": [197, 202], "sturm": [197, 202], "sub_ground": [197, 202], "to_dict": 197, "to_exact": [197, 202], "to_r": [197, 202], "to_sympy_dict": 197, "to_sympy_list": 197, "to_tupl": 197, "total_degre": [197, 202, 219], "trunc": [197, 202, 205], "frac_unifi": 197, "half_per": 197, "poly_unifi": 197, "gr\u00f6bner": 198, "wester": [198, 269], "agca": [198, 269], "l0": 199, "legitim": 199, "uninterest": 199, "bulk": [199, 216], "x_u": 199, "dup__": 199, "densebas": 199, "dmp_lc": 199, "poly_lc": 199, "dmp_tc": 199, "poly_tc": 199, "dmp_ground_lc": 199, "dmp_ground_tc": 199, "dmp_true_lt": 199, "n_1": [199, 224, 226], "n_k": 199, "dmp_degre": 199, "dmp_degree_in": 199, "dmp_degree_list": 199, "dmp_strip": 199, "dmp_valid": 199, "dup_revers": 199, "dmp_copi": 199, "dmp_to_tupl": 199, "dmp_normal": 199, "dmp_convert": 199, "to_domain": 199, "dmp_from_sympi": 199, "dmp_nth": 199, "dmp_ground_nth": 199, "dmp_zero_p": 199, "dmp_zero": 199, "dmp_one_p": 199, "dmp_one": 199, "dmp_ground_p": 199, "dmp_ground": 199, "dmp_negative_p": 199, "dmp_positive_p": 199, "dmp_from_dict": 199, "dmp_to_dict": 199, "dmp_swap": 199, "dmp_permut": 199, "dmp_nest": 199, "dmp_rais": 199, "dmp_deflat": 199, "dmp_multi_defl": 199, "dmp_inflat": 199, "dmp_exclud": 199, "dmp_includ": 199, "dmp_inject": 199, "dmp_eject": 199, "dmp_terms_gcd": 199, "dmp_list_term": 199, "dmp_apply_pair": 199, "dmp_slice": 199, "dup_random": 199, "densearith": 199, "dmp_add_term": 199, "dmp_sub_term": 199, "dmp_mul_term": 199, "dmp_add_ground": 199, "dmp_sub_ground": 199, "dmp_mul_ground": 199, "dmp_quo_ground": 199, "dmp_exquo_ground": 199, "dup_lshift": 199, "dup_rshift": 199, "dmp_ab": 199, "dmp_neg": 199, "dmp_add": 199, "dmp_sub": 199, "dmp_add_mul": 199, "dmp_sub_mul": 199, "dmp_mul": 199, "dmp_sqr": 199, "dmp_pow": 199, "dmp_pdiv": 199, "dmp_prem": 199, "dmp_pquo": 199, "dmp_pexquo": 199, "dmp_rr_div": 199, "dmp_ff_div": 199, "dmp_div": 199, "dmp_rem": 199, "dmp_quo": 199, "dmp_exquo": 199, "dmp_max_norm": 199, "dmp_l1_norm": 199, "dmp_expand": 199, "densetool": 199, "dmp_integr": 199, "dmp_integrate_in": 199, "dmp_diff": 199, "dmp_diff_in": 199, "dmp_eval": 199, "dmp_eval_in": 199, "dmp_eval_tail": 199, "dmp_diff_eval_in": 199, "dmp_trunc": 199, "dmp_ground_trunc": 199, "dup_mon": 199, "dmp_ground_mon": 199, "dup_cont": 199, "dmp_ground_cont": 199, "dup_primit": 199, "dmp_ground_primit": 199, "dup_extract": 199, "dmp_ground_extract": 199, "dup_real_imag": 199, "bivari": [199, 205, 222, 226], "dup_mirror": 199, "dup_scal": 199, "dup_shift": 199, "dup_transform": 199, "dmp_compos": 199, "dup_decompos": 199, "t_m": 199, "r707": 199, "dmp_lift": 199, "dup_sign_vari": 199, "dmp_clear_denom": 199, "k_0": 199, "dmp_revert": 199, "gf_": 199, "justifi": 199, "necess": 199, "u_0": 199, "m_0": [199, 219], "m_n": 199, "gf_crt1": 199, "9215": 199, "9405": 199, "9603": 199, "gf_crt2": 199, "gf_int": 199, "gf_degre": 199, "gf_lc": 199, "gf_tc": 199, "gf_strip": 199, "gf_trunc": 199, "gf_normal": 199, "gf_from_dict": 199, "gf_to_dict": 199, "gf_from_int_poli": 199, "gf_to_int_poli": 199, "gf_neg": 199, "gf_add_ground": 199, "gf_sub_ground": 199, "gf_mul_ground": 199, "gf_quo_ground": 199, "gf_add": 199, "gf_sub": 199, "gf_mul": 199, "gf_sqr": 199, "gf_add_mul": 199, "gf_sub_mul": 199, "gf_expand": 199, "gf_div": 199, "r708": 199, "monagan93": [199, 200], "r709": 199, "gathen99": [199, 200], "gf_rem": 199, "gf_quo": 199, "gf_exquo": 199, "gf_lshift": 199, "gf_rshift": 199, "gf_pow": 199, "gf_pow_mod": 199, "r710": 199, "gf_gcd": 199, "gf_lcm": 199, "gf_cofactor": 199, "gf_gcdex": 199, "eea": 199, "r711": 199, "gf_monic": 199, "gf_diff": 199, "gf_eval": 199, "gf_multi_ev": 199, "gf_compos": 199, "gf_compose_mod": 199, "gf_trace_map": 199, "r712": 199, "gathen92": [199, 200], "gf_random": 199, "gf_irreduc": 199, "gf_irreducible_p": 199, "gf_sqf_p": 199, "gf_sqf_part": 199, "gf_sqf_list": 199, "e_2": [199, 202], "e_k": 199, "f_j": [199, 216], "gf_sqf": 199, "r713": 199, "geddes92": [199, 200], "gf_qmatrix": 199, "berlekamp": 199, "gf_qbasi": 199, "gf_berlekamp": 199, "gf_zassenhau": 199, "gf_shoup": 199, "gf_factor_sqf": 199, "gf_factor": 199, "e_d": 199, "cantor": 199, "zassenhau": [199, 201], "shoup": [199, 200], "kaltofen": [199, 200], "gathen": [199, 200], "gf_factor_method": 199, "r714": 199, "gf_valu": 199, "2204": 199, "gf_csolv": 199, "congruent": [199, 216, 219], "189": 199, "112": [199, 203], "139": 199, "r715": 199, "ivan": 199, "niven": 199, "zuckerman": 199, "montgomeri": 199, "infeas": [199, 202], "sdm_": 199, "distributedmodul": 199, "sdm_monomial_mul": 199, "sdm_monomial_deg": 199, "f_5": 199, "sdm_monomial_divid": 199, "sdm_lc": 199, "sdm_to_dict": 199, "sdm_from_dict": 199, "dic": 199, "sdm_add": 199, "2f_1": 199, "3f_1": 199, "yf_1": 199, "xf_1": 199, "sdm_lm": 199, "sdm_lt": 199, "sdm_mul_term": 199, "2xy": [199, 277], "4y": [199, 225, 272], "8xy": 199, "2y": [199, 219, 222, 225, 277], "sdm_zero": 199, "sdm_deg": 199, "sdm_from_vector": 199, "sdm_to_vector": 199, "variant": [199, 222, 225], "qg": 199, "remark": [199, 205, 216, 222], "uf": 199, "vg": 199, "zout": 199, "euclidtool": 199, "dmp_half_gcdex": 199, "dmp_gcdex": 199, "dmp_invert": 199, "dmp_euclidean_pr": 199, "dmp_primitive_pr": 199, "exceedingli": 199, "collin": [199, 200], "collins67": [199, 200], "subdomain": 199, "2l": 199, "remainin": 199, "subdetermin": 199, "n_2": [199, 226], "n_": [199, 219], "abnorm": 199, "gamma_i": 199, "brown": [199, 200, 226], "traub": [199, 200], "browntraub71": [199, 200], "brown78": [199, 200], "discoveri": [199, 279], "dmp_inner_subresult": 199, "729": 199, "sre": 199, "dmp_subresult": 199, "dmp_prs_result": 199, "dmp_zz_modular_result": 199, "dmp_zz_collins_result": 199, "dmp_qq_collins_result": 199, "dmp_result": 199, "dmp_discrimin": 199, "dmp_rr_prs_gcd": 199, "cff": [199, 202], "cfg": [199, 202], "dmp_ff_prs_gcd": 199, "dmp_zz_heu_gcd": 199, "r716": 199, "liao95": [199, 200], "dmp_qq_heu_gcd": 199, "dmp_inner_gcd": 199, "dmp_gcd": 199, "dmp_lcm": 199, "dmp_content": 199, "dmp_primit": 199, "dmp_cancel": 199, "dmp_trial_divis": 199, "dmp_zz_mignotte_bound": 199, "dup_zz_hensel_step": 199, "hensel": 199, "r717": 199, "dup_zz_hensel_lift": 199, "f_list": 199, "multifactor": 199, "r718": 199, "dup_zz_zassenhau": 199, "dup_zz_irreducible_p": 199, "eisenstein": 199, "dup_cyclotomic_p": 199, "bradford": 199, "russel": 199, "251": 199, "berlin": 199, "heidelberg": 199, "dup_zz_cyclotomic_poli": 199, "dup_zz_cyclotomic_factor": 199, "r719": 199, "weisstein09": [199, 200], "dup_zz_factor_sqf": 199, "dup_zz_factor": 199, "r720": 199, "dmp_zz_wang_non_divisor": 199, "wang": [199, 200], "eez": 199, "dmp_zz_wang_test_point": 199, "dmp_zz_wang_lead_coeff": 199, "dmp_zz_diophantin": 199, "dmp_zz_wang_hensel_lift": 199, "dmp_zz_wang": 199, "enhanc": [199, 226], "r721": 199, "wang78": [199, 200], "r722": 199, "dmp_zz_factor": 199, "r723": 199, "dmp_ext_factor": 199, "dup_gf_factor": 199, "dmp_factor_list": 199, "dmp_factor_list_includ": 199, "dmp_irreducible_p": 199, "groebnertool": 199, "polyconfig": [199, 202], "f5b": [199, 202], "spoli": 199, "red_groebn": 199, "beckerweispfenning93": 199, "is_groebn": 199, "is_minim": 199, "is_reduc": 199, "fglmtool": 199, "matrix_fglm": 199, "o_to": 199, "o_from": 199, "r724": 199, "fauger": [199, 202], "gianni": [199, 202, 224], "mora": [199, 200, 202, 224], "sdm_spoli": 199, "phantom": 199, "sca": 199, "defn": 199, "sdm_ecart": 199, "ecart": 199, "sdm_nf_mora": 199, "nf": 199, "sdm_groebner": 199, "sugar": [199, 200, 231], "giovini": [199, 200], "polyopt": [199, 203], "build_opt": 199, "polyerror": [199, 202], "basepolynomialerror": 199, "operationnotsupport": 199, "heuristicgcdfail": 199, "homomorphismfail": 199, "isomorphismfail": [199, 201], "extraneousfactor": 199, "evaluationfail": 199, "refinementfail": 199, "notrevers": [199, 202], "notalgebra": 199, "polynomialerror": [199, 202], "unificationfail": [199, 201], "generatorsneed": 199, "computationfail": 199, "exc": 199, "generatorserror": 199, "univariatepolynomialerror": 199, "multivariatepolynomialerror": [199, 202], "polificationfail": 199, "orig": 199, "optionerror": 199, "flagerror": 199, "modulargcd": 199, "modgcd_univari": 199, "monagan00": [199, 200], "modgcd_bivari": 199, "modgcd_multivari": 199, "_modgcd_multivariate_p": 199, "brown71": [199, 200], "degbound": 199, "contbound": 199, "func_field_modgcd": 199, "reconstuct": 199, "z_p": 199, "spuriou": [199, 224], "hoeij04": [199, 200], "scarc": 199, "hsin": 200, "chao": 200, "liao": 200, "fateman": 200, "montreal": 200, "quebec": 200, "canada": 200, "240": [200, 208, 254], "247": [200, 224], "von": [200, 226], "zur": 200, "gerhard": 200, "cambridg": [200, 219], "weisstein": 200, "cyclotomicpolynomi": 200, "1215": 200, "1231": 200, "czapor": 200, "labahn": 200, "monagan": [200, 218], "disco": 200, "721": 200, "kaltofen98": 200, "subquadrat": 200, "223": 200, "1998": [200, 219], "1179": 200, "1197": 200, "shoup95": 200, "397": 200, "shoup91": 200, "cox97": [200, 202], "shea": [200, 202], "ajwa95": 200, "ajwa": 200, "liu": 200, "groebner": [200, 201, 202, 205, 218, 224, 225], "cites": [200, 218], "ist": [200, 215, 218], "psu": [200, 215, 218], "mycites": 200, "login": 200, "bose03": 200, "bose": 200, "guiver": 200, "giovini91": 200, "bronstein93": [200, 202], "salvi": [200, 203], "kiev": 200, "ukrain": 200, "buchberger01": [200, 202], "theorist": 200, "moreno": 200, "diaz": 200, "freir": 200, "eurocast": 200, "februari": 200, "davenport88": 200, "siret": 200, "tournier": 200, "london": [200, 219], "124": [200, 272], "greuel": 200, "pfister": 200, "atiyah": 200, "macdonald": 200, "142": 200, "1971": [200, 222], "505": 200, "237": 200, "249": 200, "wittkopf": 200, "478": 200, "hoeij": 200, "297": [200, 202], "304": [200, 202], "wang81": 200, "adic": 200, "symsac": 200, "hoeij02": 200, "manwright94": [200, 202], "yiu": 200, "kwong": 200, "franci": 200, "wright": 200, "dispers": [200, 226], "190347": 200, "190413": 200, "koepf98": [200, 202], "koepf": [200, 208, 218], "vieweg": 200, "abramov71": [200, 202], "abramov": [200, 224], "ussr": 200, "330": 200, "man93": [200, 202], "376": 200, "sciencedirect": 200, "pii": 200, "s0747717183710539": 200, "kapur1994": 200, "deepak": 200, "kapur": 200, "tushar": 200, "saxena": 200, "yang": 200, "dixon": 200, "researchg": [200, 226], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 200, "palancz08": 200, "pal\u00e1ncz": 200, "zaletnyik": 200, "jl": [200, 239], "awang": 200, "ew": 200, "grafarend": 200, "geodet": 200, "geodesi": 200, "225607735_dixon_result": 200, "s_solution_of_systems_of_geodetic_polynomial_equ": 200, "bruce97": 200, "bruce": 200, "randal": 200, "donald": [200, 241], "mundi": 200, "artifici": [200, 209], "intellig": [200, 218, 222, 283], "orlando": 200, "www2": 200, "duke": 200, "donaldlab": 200, "symbolicnumericalcomput": 200, "045": 200, "087": 200, "stiller96": 200, "stiller": 200, "citeseerx": [200, 215], "viewdoc": [200, 215, 218], "590": 200, "2021": 200, "rep1": [200, 215], "cohen93": [200, 201], "henri": 200, "olga": 201, "tausski": 201, "zimmer": 201, "pohst": 201, "articul": 201, "numberfield": 201, "mathfrak": 201, "regul": 201, "alpha_m": 201, "round_two": 201, "prime_decomp": 201, "prime_valu": 201, "minimal_polynomi": 201, "field_isomorph": 201, "nilrad": 201, "z_k": 201, "zk": 201, "ordinarili": 201, "503": 201, "r725": 201, "r726": 201, "powerbasisel": 201, "ramif": 201, "as_submodul": 201, "bundl": 201, "test_factor": 201, "deliber": 201, "is_inert": 201, "inert": [201, 222], "reduce_anp": 201, "elt": 201, "reduce_alg_num": 201, "field_gen": 201, "just_gen": 201, "reagent": 201, "kummer": 201, "1847": 201, "ueber": 201, "zerlegung": 201, "crell": 201, "r727": 201, "_minpoly_compos": 201, "stall": 201, "alli": 201, "monomorph": 201, "alpha_i": 201, "alpha_n": 201, "lincomb": 201, "primtiiv": 201, "meanwhil": 201, "moduleel": 201, "powerbasi": 201, "submodule_from_matrix": 201, "ancestor": 201, "to_col": 201, "nca": 201, "circumst": [201, 277], "_mult_tab": 201, "successfulli": 201, "moduleendomorph": 201, "innerendomorph": 201, "endomorphismr": 201, "spec": [201, 202], "i_n": [201, 202, 227], "include_self": 201, "basis_el": 201, "element_from_r": 201, "endomorphism_r": 201, "is_compat_col": 201, "mult_tab": 201, "mult": 201, "closurefailur": 201, "nearest_common_ancestor": 201, "number_field": 201, "power_basis_ancestor": 201, "incom": 201, "halv": 201, "submodule_from_gen": 201, "over_power_basi": 201, "starts_with_un": 201, "hnf_modulu": 201, "whole_submodul": 201, "element_from_anp": 201, "element_from_alg_num": 201, "element_from_poli": 201, "qq_matrix": 201, "basis_element_pullback": 201, "discard_befor": 201, "structureerror": 201, "cohen00": 201, "make_mod_elt": 201, "qq_col": 201, "from_int_list": 201, "is_compat": 201, "reduced_mod_p": 201, "to_ancestor": 201, "anc": 201, "to_par": 201, "to_anp": 201, "inner_endomorph": 201, "event": [201, 226], "find_min_poli": 201, "missingunityerror": 201, "is_int": 201, "get_num_denom": 201, "extract_fundamental_discrimin": 201, "r728": 201, "algintpow": 201, "zeta_pow": 201, "r729": 201, "coeff_search": 201, "supplement_a_subspac": 201, "dmrankerror": 201, "v_n": 201, "w_r": 201, "w_j": 201, "u_j": 201, "r730": 201, "poly_from_expr": 202, "parallel_poly_from_expr": 202, "exprtool": 202, "gcd_list": 202, "lcm_list": 202, "destruct": 202, "2079": 202, "1401": 202, "2715": 202, "6720": 202, "1092": 202, "gff": 202, "check_sqf": 202, "count_root": 202, "nroot": [202, 224], "maxstep": 202, "cleanup": 202, "73205080756888": 202, "73205080756887729352744634151": 202, "ground_root": 202, "nth_power_roots_poli": 202, "r_f": 202, "r_g": 202, "_signsimp": 202, "q_n": 202, "is_zero_dimension": [202, 225], "donal": 202, "230": [202, 224], "ec": 202, "em": 202, "di": 202, "dispersionset": 202, "gp": [202, 222], "free_symbols_in_domain": 202, "from_poli": 202, "get_domain": 202, "get_modulu": 202, "has_only_gen": 202, "vincent": [202, 244], "akrita": 202, "strzebonski": 202, "va": 202, "alkiviadi": 202, "panagioti": 202, "vigkla": 202, "265": 202, "279": 202, "polnomi": 202, "is_multivari": 202, "is_univari": 202, "ltrim": 202, "_only_": 202, "sturmian": 202, "subresultants_qq_zz": 202, "suffix": [202, 239], "_pg": 202, "_amv": 202, "rem_z": 202, "premultipli": 202, "rat_clear_denom": 202, "_ignor": 202, "retract": 202, "same_root": 202, "r0": 202, "set_domain": 202, "set_modulu": 202, "termwis": 202, "fglm": 202, "r731": 202, "horner_schem": 202, "equispac": 202, "viet": 202, "itermonomi": 202, "min_degre": 202, "gib": 202, "monomial_kei": 202, "monomial_count": 202, "gradedlexord": 202, "reversedgradedlexord": 202, "clear_cach": 202, "_get_interv": 202, "165": [202, 226, 244], "169": 202, "eval_approx": 202, "evalf_r": 202, "eval_r": 202, "69629": 202, "71318": 202, "805": 202, "3275": 202, "65536": [202, 205, 206], "414645": 202, "131072": 202, "6545": 202, "104755": 202, "2097152": 202, "6634255": 202, "_all_root": 202, "use_cach": 202, "_complexes_index": 202, "_complexes_sort": 202, "_count_root": 202, "_ensure_complexes_init": 202, "_ensure_reals_init": 202, "_eval_is_imaginari": 202, "_get_complex": 202, "_get_complexes_sqf": 202, "currentfactor": 202, "_get_real": 202, "_get_reals_sqf": 202, "_get_root": 202, "_indexed_root": 202, "_new": 202, "_postprocess_root": 202, "_preprocess_root": 202, "heroic": [202, 224], "_real_root": 202, "_reals_index": 202, "_reals_sort": 202, "_refine_complex": 202, "_roots_trivi": 202, "_set_interv": 202, "861136": 202, "86113631159405258": 202, "polyroot": 202, "quintic": [202, 224], "unread": [202, 242], "casu": 202, "irreducibili": 202, "unsolvablefactorerror": [202, 224], "inexpress": 202, "unsolv": [202, 225], "r732": 202, "cubic_funct": 202, "trigonometric_": 202, "28and_hyperbol": 202, "29_method": 202, "specialpoli": 202, "swinnerton_dyer_poli": 202, "swinnerton": 202, "dyer": 202, "symmetric_poli": 202, "random_poli": 202, "gegenbau": [202, 206], "jakob": 202, "psum": 202, "3144337": 202, "r733": 202, "bernoulli_c_poli": 202, "reindex": 202, "swiss": 202, "knife": 202, "630": 202, "5124": 202, "12465": 202, "155": 202, "r734": 202, "partfrac": [202, 208], "undertermin": 202, "_w": [202, 213], "apart_list": 202, "assemble_partfrac_list": 202, "bunch": 202, "pfd": 202, "r735": 202, "partial_list": 202, "reassembl": 202, "pfda": 202, "r736": 202, "r737": 202, "r738": 202, "r739": 202, "r740": 202, "r741": 202, "r742": 202, "r743": 202, "widen": 203, "ring_seri": 203, "rs_sin": 203, "166666666666667": 203, "puiseux": 203, "rs_co": 203, "rs_tan": 203, "took": [203, 215], "eleg": [203, 205], "rs_exp": 203, "everyon": 203, "blazingli": 203, "promin": 203, "gradual": 203, "rs_": 203, "rs_log": 203, "rs_lambertw": 203, "rs_atan": 203, "arctang": 203, "rs_asin": 203, "_tan1": 203, "rs_cot": 203, "rs_cos_sin": 203, "rs_atanh": 203, "rs_sinh": 203, "rs_cosh": 203, "rs_tanh": 203, "rs_hadamard_exp": 203, "inver": 203, "rs_mul": 203, "rs_squar": 203, "rs_pow": 203, "rs_series_invers": 203, "rs_series_revers": 203, "a_kx_k": 203, "ar_i": 203, "ar_": 203, "ae": 203, "rs_trunc": 203, "rs_nth_root": 203, "160249952256379": 203, "44224957030741": 203, "rs_sub": 203, "rs_diff": 203, "rs_integr": 203, "rs_newton": 203, "rs_compose_add": 203, "r744": 203, "bostan": 203, "flajolet": 203, "schost": 203, "4579": 203, "institut": 203, "nation": 203, "recherch": 203, "informatiqu": 203, "automatiqu": 203, "rs_is_puiseux": 203, "rs_puiseux": 203, "rs_puiseux2": 203, "rs_series_from_list": 203, "concur": 203, "rs_fun": 203, "_tan": 203, "_nth": 203, "_root": 203, "_fun": 203, "mul_xin": 203, "pow_xin": 203, "_raw": 204, "unkown": 204, "sympy_eqs_to_r": 204, "eqs_r": 204, "eqs_to_matrix": 204, "eqs_coeff": 204, "eqs_rh": 204, "_solve_lin_si": 204, "_solve_lin_sys_compon": 204, "critiqu": 205, "wester1999": 205, "systemat": 205, "153": 205, "\u2124": [205, 206, 225, 284], "unm": 205, "driver": [206, 238], "adequ": 206, "emptyprint": 206, "_sympystr": 206, "mathml": 206, "inconveni": 206, "_print_": 206, "expr_class": 206, "hierarchi": [206, 226], "_print_rat": 206, "_print_numb": 206, "_print_atom": 206, "_print_bas": 206, "print_latex": 206, "mylatexprint": 206, "_print_deriv": 206, "print_my_latex": 206, "modop": 206, "subcompon": 206, "outermost": [206, 214, 218, 230], "modopmodewrong": 206, "modopnestedwrong": 206, "modopsettingswrong": 206, "subobject": 206, "infrastructur": [206, 223], "printer_exampl": 206, "set_global_set": 206, "stringpict": 206, "pretty_symbologi": 206, "prettyform": 206, "hline": 206, "vline": 206, "ascii": 206, "_pretti": 206, "use_unicode_sqrt_char": 206, "root_not": 206, "mat_symbol_styl": 206, "prettifi": 206, "bold": 206, "c89codeprint": 206, "print_ccod": 206, "tgamma": 206, "known_functions_c89": 206, "known_functions_c99": 206, "fmax": 206, "fmin": 206, "lgamma": 206, "indent_cod": 206, "cfunction_format": 206, "derefer": 206, "dereferenc": 206, "symbols_to_declar": 206, "not_supported_funct": 206, "code_text": 206, "m_sqrt2": 206, "math_macro": 206, "m_sqrt2l": 206, "cxx": 206, "cxx98codeprint": 206, "print_rcod": 206, "rcode": 206, "known_funct": 206, "_rcode": 206, "rfunction_str": 206, "rfunction_format": 206, "ifels": 206, "type_map": 206, "name_mangl": 206, "mangl": 206, "floor1": 206, "floor2": 206, "print_fcod": 206, "_fcode": 206, "conjg": 206, "32768": 206, "7182818284590452d0": 206, "1415926535897932d0": 206, "718281828459045235360287d0": 206, "141592653589793238462643d0": 206, "869604401089358618834491d0": 206, "mygamma": 206, "allow_unknown_funct": 206, "smtlib": 206, "smtlibprint": 206, "symbol_t": 206, "_smtlib": 206, "_default_set": 206, "known_const": 206, "ite": 206, "known_typ": 206, "smtlib_cod": 206, "auto_assert": 206, "auto_declar": 206, "prefix_express": 206, "suffix_express": 206, "log_warn": 206, "booleanfunct": 206, "dreal": 206, "14159": 206, "my_smt_variable_for_pi": 206, "postfix": [206, 244], "riski": 206, "sound": [206, 283], "noop": 206, "pw": 206, "pythontyp": 206, "smt_builtin_func": 206, "existing_smtlib_fcn": 206, "user_def_func": 206, "fun": [206, 223, 276], "coshintegr": 206, "cosintegr": 206, "expintegralei": 206, "factorialpow": 206, "heavisidetheta": 206, "sinhintegr": 206, "sinintegr": 206, "arccosh": 206, "arccoth": 206, "arcsinh": 206, "arctanh": 206, "dirichleteta": 206, "gegenbauerc": 206, "hypergeometricpfq": 206, "sphericalbesselj": 206, "logintegr": 206, "lucasl": 206, "mathieu": 206, "riemann_xi": 206, "riemannxi": 206, "stieltjesgamma": 206, "sphericalbess": 206, "mcodeprint": 206, "_mcode": 206, "mcode": 206, "maplecodeprint": 206, "_mapl": 206, "maple_cod": 206, "print_maple_cod": 206, "javascriptcodeprint": 206, "_javascript": 206, "js_function_str": 206, "known_fcns_src1": 206, "known_fcns_src2": 206, "conj": 206, "juliacodeprint": 206, "_julia": 206, "harmless": [206, 279], "cosmet": 206, "existing_julia_fcn": 206, "coshint": 206, "cosint": 206, "sinhint": 206, "sinint": 206, "bincoeff": 206, "logint": 206, "gammaln": 206, "octavecodeprint": 206, "_octav": 206, "recip": [206, 244], "powf": 206, "signum": 206, "rustcodeprint": 206, "_rust_cod": 206, "7_f64": 206, "_aesara": 206, "tensorvari": 206, "floatx": 206, "squeez": 206, "dim_handl": 206, "gtkmathview": 206, "widget": 206, "print_gtk": 206, "libgtkmathview": 206, "start_view": 206, "_lambdacod": 206, "accepted_latex_funct": 206, "parenthesize_sup": 206, "fold_frac_pow": 206, "fold_func_bracket": 206, "fold_short_frac": 206, "inv_trig_styl": 206, "itex": 206, "ln_notat": 206, "long_frac_ratio": 206, "mat_delim": 206, "mat_str": 206, "mul_symbol": 206, "symbol_nam": 206, "gothic_re_im": 206, "decimal_separ": 206, "diff_oper": 206, "smallmatrix": [206, 277], "amsmath": 206, "fracton": 206, "semicolon": 206, "monospac": 206, "mathtt": 206, "mathml2": 206, "mathmlprinterbas": 206, "mathmlcontentprint": 206, "mathmlpresentationprint": 206, "chapter4": 206, "_mathml_cont": 206, "mathml_tag": 206, "chapter3": 206, "_mathml_present": 206, "utf": 206, "mul_symbol_mathml_numb": 206, "xb7": 206, "print_mathml": [206, 282], "mrow": 206, "mpmathprint": 206, "fully_qualified_modul": 206, "print_python": 206, "textual": 206, "reprprint": 206, "_sympyrepr": 206, "reprifi": 206, "sympy_integ": 206, "displayhook": [206, 237], "pprint_nod": 206, "nb2": 206, "print_nod": 206, "asssumpt": 206, "determinisit": 206, "backtrac": 206, "print_tre": 206, "outputbuff": 206, "dvioption": 206, "outputtexfil": 206, "extra_preambl": 206, "latex_set": 206, "postscript": 206, "tex": 206, "eulervm": 206, "sty": 206, "debian": 206, "ubuntu": 206, "unset": [206, 218], "gimp": 206, "evinc": 206, "kdvi": 206, "xdvi": 206, "xdg": 206, "system_default_view": 206, "gracefulli": [206, 230], "generet": 206, "bytesio": 206, "usepackag": 206, "amsfont": 206, "renewcommand": 206, "popen": 206, "phidd": 206, "bitmap": 206, "split_super_sub": 206, "var_sub1__sup_sub2": 206, "assignmenterror": 206, "bitwiseand": 206, "bitwiseor": 206, "bitwisexor": 206, "precedence_valu": 206, "kroneckerproduct": 206, "tensadd": [206, 232], "tensmul": [206, 232], "precedence_funct": 206, "precedence_float": 206, "precedence_fracel": 206, "precedence_integ": 206, "precedence_mul": 206, "precedence_polyel": 206, "precedence_r": 206, "precedence_unevaluatedexpr": 206, "databas": [206, 216], "pretty_use_unicod": 206, "pretty_try_use_unicod": 206, "xstr": 206, "greek_lett": 206, "digit_2txt": 206, "ONE": 206, "seven": 206, "symb_2txt": 206, "parenthesi": [206, 230], "\u2080": 206, "\u2081": 206, "\u2082": 206, "\u2083": 206, "\u2084": 206, "\u2085": 206, "\u2086": 206, "\u2087": 206, "\u2088": 206, "\u2089": 206, "\u2090": 206, "\u1d66": 206, "\u1d6a": 206, "\u2091": 206, "\u1d67": 206, "\u2095": 206, "\u1d62": 206, "\u2096": 206, "\u2097": 206, "\u2098": 206, "\u2099": 206, "\u2092": 206, "\u209a": 206, "\u1d69": 206, "\u1d63": 206, "\u1d68": 206, "\u209b": 206, "\u209c": 206, "\u1d64": 206, "\u1d65": 206, "\u2093": 206, "\u2070": 206, "\u00b9": 206, "\u00b2": 206, "\u00b3": 206, "\u2074": 206, "\u2075": 206, "\u2076": 206, "\u2077": 206, "\u2078": 206, "\u2079": 206, "\u2071": 206, "\u207f": 206, "xobj": 206, "vobj": 206, "hobj": 206, "vf": 206, "\u00bd": 206, "\u2153": 206, "\u00bc": 206, "\u2155": 206, "\u2159": 206, "\u215b": 206, "\u2154": 206, "\u2156": 206, "\u00be": 206, "\u2157": 206, "\u215c": 206, "\u2158": 206, "\u215a": 206, "\u215d": 206, "\u215e": 206, "xsym": 206, "symbologi": 206, "atoms_t": 206, "\u2102": [206, 284], "emptysequ": [206, 212], "\u2115": 206, "\u2115\u2080": 206, "\u211d": [206, 284], "symmetricdiffer": [206, 214, 225], "pretty_atom": 206, "atom_nam": 206, "pretty_symbol": 206, "symb_nam": 206, "bold_nam": 206, "stylis": 206, "_print_meijerg": 206, "_print_hyp": 206, "jurjen": 206, "bo": 206, "hate": 206, "spammer": 206, "pietjepuk314": 206, "oc": [206, 257], "oohai": 206, "gedg": 206, "email": 206, "mun": 206, "terminal_str": 206, "baselin": 206, "leftslash": 206, "slash": [206, 237], "paren": 206, "ifascii_nougli": 206, "line_break": 206, "ugli": 206, "terminal_width": 206, "wider": 206, "maxdepth": 206, "labelfunc": 206, "digraph": [206, 244, 282], "rankdir": [206, 282], "_sparse_": 207, "flavor": 207, "________": [207, 226, 244], "x\u2080": 207, "greatli": 207, "numbered_symbol": [207, 218, 222, 244], "postprocessor": [207, 218], "reduced_expr": [207, 218], "formalpowerseri": 208, "coeff_bel": 208, "formalpowerseriescompos": 208, "r745": 208, "comtet": 208, "loui": 208, "reidel": 208, "1974": 208, "720": [208, 222, 244], "formalpowerseriesinvers": 208, "r746": 208, "upto": [208, 213, 222], "formalpowerseriesproduct": 208, "rational_algorithm": 208, "compute_fp": 208, "hyper_algorithm": 208, "omposit": 208, "bell_seq": 208, "finiteformalpowerseri": 208, "rational_independ": 208, "ra": 208, "admiss": [208, 211], "r747": 208, "r748": 208, "simpled": 208, "exp_r": 208, "explik": 208, "hyper_r": 208, "rsolve_hypergeometr": 208, "r749": 208, "r750": 208, "solve_d": 208, "fourierseri": 209, "scalex": 209, "shiftx": 209, "sigma_approxim": 209, "gibb": 209, "bigl": 209, "bigr": 209, "lanczo": 209, "r751": 209, "gibbs_phenomenon": 209, "r752": 209, "sawtooth": 209, "bn": 209, "r753": 209, "limitseq": 211, "difference_delta": 211, "r754": 211, "differencedelta": 211, "limit_seq": [211, 213], "safeguard": 211, "r755": 211, "kauer": 211, "seqper": 212, "seqformula": 212, "seqbas": 212, "coeff_mul": 212, "find_linear_recurr": 212, "gfvar": 212, "seqadd": 212, "seqmul": 212, "_mul": 212, "recursiveseq": 212, "fib": 212, "invok": [213, 237, 238], "workhors": 213, "succ": [213, 226], "asymp": 213, "exposit": 213, "gloss": 213, "wsym": 213, "test_rewrite1": 213, "build_expression_tre": 213, "mrv_leadterm": 213, "e0": 213, "calculate_seri": 213, "limitinf": 213, "constantli": 213, "subsset": 213, "mrv_max1": 213, "mrv_max3": 213, "expsf": 213, "expsg": 213, "expsboth": 213, "o2": 213, "do_sub": 213, "r756": 213, "7048138294": 213, "7182818285": 213, "6349839002": 213, "6449340668": 213, "shank": 213, "6881721793": 213, "6931396564": 213, "6931471806": 213, "6931471805599453094172321215": 213, "r757": 213, "residue_theorem": 213, "neighborhood": 214, "rim": 214, "conditionset": [214, 225, 226, 284], "affirm": 214, "infimum": 214, "imageset": [214, 225, 284], "is_clos": 214, "closed": 214, "is_disjoint": 214, "r758": 214, "disjoint_set": 214, "is_open": 214, "is_proper_subset": 214, "is_proper_superset": 214, "left_open": 214, "is_superset": 214, "isdisjoint": 214, "issubset": 214, "issuperset": 214, "productset": [214, 225], "powerset": 214, "fancyset": 214, "complexregion": [214, 225], "disjointunion": 214, "lebesgu": 214, "r759": 214, "power_set": 214, "symmetric_differ": 214, "r760": 214, "right_open": 214, "mpi": 214, "r761": 214, "interval_": 214, "as_rel": 214, "is_left_unbound": 214, "is_right_unbound": 214, "r762": 214, "r763": 214, "union_": 214, "28set_theori": 214, "r764": 214, "intersection_": 214, "coin": [214, 226], "r765": 214, "cartesian_product": 214, "is_iter": 214, "r766": 214, "complementset": 214, "r767": 214, "disjoint_union": 214, "r768": 214, "empty_set": 214, "r769": 214, "universal_set": 214, "flambda": 214, "square_iter": 214, "base_set": 214, "cartesiancomplexregion": 214, "polarcomplexregion": 214, "unit_disk": 214, "upper_half_unit_disk": 214, "a_interv": 214, "b_interv": 214, "from_real": 214, "pset": 214, "rset": 214, "thetaset": 214, "upper_half_plan": 214, "normalize_theta_set": 214, "r770": 214, "r771": 214, "axiom_of_power_set": 214, "sin_sol": 214, "r772": 214, "element_": 214, "varnoth": 214, "tr0": 215, "tr1": 215, "tr2": 215, "tr2i": 215, "tr3": 215, "tr4": 215, "tr5": 215, "tr6": 215, "tr7": 215, "tr8": 215, "tr9": 215, "tr10": 215, "tr10i": 215, "tr11": 215, "tr12": 215, "tr12i": 215, "tr13": 215, "trmorri": 215, "tr14": 215, "tr15": 215, "tr16": 215, "tr22": 215, "tr111": 215, "ctr1": 215, "ctr4": 215, "rl1": 215, "rl2": 215, "deem": 215, "932": 215, "016": 215, "serendipit": 215, "dead": 215, "newa": 215, "lucki": 215, "sqt": 215, "_tr56": 215, "un": [215, 216], "r773": 215, "morri": 215, "27s_law": 215, "trpower": 215, "r774": 215, "list_of_trigonometric_ident": 215, "reduction_formula": 215, "ctr2": 215, "ctr3": 215, "r775": 215, "657": 215, "2478": 215, "dimitar": 215, "vlahovski": 215, "technolog": 215, "xiuqin": 215, "zhong": 215, "zhenb": 215, "zeng": 215, "1169": 215, "1177": 215, "sosmath": 215, "trig5": 215, "symplifi": [216, 218], "roach1996": 216, "roach1997": 216, "p_q": 216, "reachabl": [216, 226], "f_q": 216, "undo": [216, 283], "whenc": 216, "game": 216, "twofold": 216, "incongru": 216, "wlog": 216, "alpha_r": 216, "beta_r": 216, "blindli": 216, "messi": 216, "k_u": 216, "l_v": 216, "k_j": 216, "c_w": 216, "r_j": 216, "l_u": 216, "res_": 216, "delta_i": 216, "add_formula": 216, "addb": 216, "sum_0": 216, "test_hyperexpand": 216, "test_formula": 216, "typo": 216, "suboptim": 216, "imath": 216, "b1prime": 216, "vital": [216, 226], "308": 216, "hongguang": [217, 263], "fu": [217, 218, 263], "unmodifi": 218, "my_measur": 218, "nthroot": 218, "max_len": 218, "surd": 218, "kroneckersimp": 218, "besselsimp": 218, "strigonometr": 218, "399": 218, "hypersimilar": 218, "rational_convers": 218, "base10": 218, "6004799503160655": 218, "eq_x": 218, "max_term": 218, "collect_sqrt": 218, "polish": 218, "rad_ration": 218, "collect_const": 218, "rcollect": 218, "analyz": [218, 231], "ratsimpmodprim": 218, "r776": 218, "pearc": 218, "163": 218, "6984": 218, "trigsimp_groebn": 218, "bb1": 218, "be1": 218, "bb2": 218, "be2": 218, "bei": 218, "sqrtdenest": 218, "max_it": 218, "unrad": [218, 224], "r777": 218, "ibm": 218, "fagin": 218, "symb85": 218, "r778": 218, "cybertest": 218, "opt_sub": 218, "as_unevaluated_bas": 218, "tree_cs": 218, "hyperegeometr": 218, "epathtool": 218, "epath": 218, "ebnf": 218, "za": [218, 226], "xml": 218, "xpath": 218, "hasattr": [218, 240], "diophantu": 219, "mathematician": [219, 225], "citi": 219, "alexandria": 219, "father": 219, "hi": 219, "arithmetica": 219, "a_1x_1": 219, "a_2x_2": 219, "a_nx_n": 219, "bxy": 219, "cy": 219, "dxy": 219, "eyz": 219, "fzx": 219, "pythagorean": 219, "diop_solv": 219, "classify_diop": 219, "diop_linear": 219, "diop_quadrat": 219, "diop_ternary_quadrat": 219, "diop_ternary_quadratic_norm": 219, "diop_general_pythagorean": 219, "diop_general_sum_of_squar": 219, "diop_general_sum_of_even_pow": 219, "merge_solut": 219, "3y": 219, "4ac": 219, "9369318": 219, "find_dn": 219, "diop_dn": 219, "transformation_to_dn": 219, "920": 219, "5y": 219, "BY": 219, "transformation_to_norm": 219, "t4": 219, "t5": 219, "sum_of_squar": 219, "providean": 219, "eqyptian": 219, "thilinaatsympi": 219, "andreescu": 219, "titu": 219, "andrica": 219, "dorin": 219, "cucurezeanu": 219, "ion": 219, "diophantineequ": 219, "alpertron": 219, "20160323033111": 219, "jpr2718": 219, "ax2p": 219, "permute_sign": [219, 244], "signed_permut": [219, 244], "_dict": 219, "base_solution_linear": 219, "r779": 219, "r780": 219, "pell": 219, "lmm": 219, "r781": 219, "393": 219, "13y": 219, "986": 219, "49299": 219, "1570": 219, "diop_bf_dn": 219, "robertson": 219, "20160323033128": 219, "cornacchia": 219, "r782": 219, "nitaj": 219, "r783": 219, "numbertheori": 219, "r784": 219, "r785": 219, "676": 219, "884": 219, "fxz": 219, "3xy": 219, "r786": 219, "fxy": 219, "gyz": 219, "hxz": 219, "r787": 219, "cremona": 219, "rusin": 219, "2x_": 219, "m4": 219, "general_sum_of_squar": 219, "8m": 219, "r788": 219, "2345": 219, "proofwiki": 219, "integer_as_sum_of_three_squar": 219, "general_sum_of_even_pow": 219, "power_represent": 219, "1729": 219, "stopiter": 219, "sum_of_three_squar": 219, "r789": 219, "44542": 219, "207": 219, "schorn": 219, "sum_of_four_squar": 219, "3456": 219, "1294585930293": 219, "2161": 219, "1137796": 219, "r790": 219, "sum_of_pow": 219, "evenli": 219, "var_t": 219, "pqa": 219, "r791": 219, "ur": 219, "dv": 219, "vr": 219, "r792": 219, "parametrize_ternary_quadrat": 219, "r793": 219, "nigel": 219, "ldescent": 219, "y_0": [219, 222], "4x": [219, 225, 272], "5x": 219, "r794": 219, "r795": 219, "eprint": 219, "nottingham": 219, "uk": 219, "kvxefz87": 219, "gaussian_reduc": 219, "r796": 219, "cuhk": 219, "hk": 219, "wkshum": 219, "404": 219, "r797": 219, "holzer": 219, "mordel": 219, "r798": 219, "r799": 219, "prime_as_sum_of_two_squar": 219, "r800": 219, "sqf_normal": 219, "r801": 219, "legrang": 219, "csusm": 219, "aitken_html": 219, "diophantinesolutionset": 219, "symbols_seq": 219, "dict_iter": 219, "diophantineequationtyp": 219, "binaryquadrat": 219, "r802": 219, "r803": 219, "inhomogeneousternaryquadrat": 219, "inhomogen": [219, 222, 224], "homogeneousternaryquadraticnorm": 219, "homogeneousternaryquadrat": 219, "inhomogeneousgeneralquadrat": 219, "homogeneousgeneralquadrat": 219, "generalsumofsquar": 219, "r804": 219, "generalpythagorean": 219, "cubicthu": 219, "thue": 219, "generalsumofevenpow": 219, "pde": [220, 222, 263], "subcategori": [221, 262], "beginn": [221, 224, 225, 284], "solve_rational_inequ": 221, "solve_poly_inequ": 221, "reduce_rational_inequ": 221, "reduce_abs_inequ": 221, "solvifi": [221, 225], "autodetect": [222, 223], "classify_od": 222, "odesimp": 222, "ode_ord": [222, 223, 224], "deutil": [222, 223], "best_hint": 222, "all_integr": [222, 223], "_integr": [222, 223], "unevaluat": 222, "test_od": 222, "ode_": 222, "hintnam": [222, 223], "classify_sysod": 222, "almost_linear": 222, "dsolve_system": 222, "ode_hintnam": 222, "allhint": [222, 223], "tough": 222, "nth_linear_homogeneous_constant_coeff_integr": 222, "1st_linear": 222, "nth_linear": 222, "indep": 222, "indep_div_dep": 222, "undetermined_coeffici": 222, "_best": 222, "nth_algebra": 222, "1st_homogeneous_coeff_best": 222, "1st_homogeneous_coeff_subs_indep_div_dep": 222, "1st_homogeneous_coeff_subs_dep_div_indep": 222, "1st_power_seri": 222, "lie_group": 222, "nth_linear_constant_coeff_homogen": 222, "nth_linear_euler_eq_homogen": 222, "nth_algebraic_integr": 222, "separable_integr": 222, "1st_exact_integr": 222, "1st_linear_integr": 222, "bernoulli_integr": 222, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 222, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 222, "nth_linear_constant_coeff_undetermined_coeffici": 222, "nth_linear_constant_coeff_variation_of_paramet": 222, "nth_linear_constant_coeff_variation_of_parameters_integr": 222, "checkodesol": 222, "solve_for_func": [222, 223], "homogeneouscoeffsubsdepdivindep": 222, "homogeneouscoeffsubsindepdivdep": 222, "varepsilon": 222, "genform": [222, 223], "starrett": 222, "checkinfsol": 222, "constantsimp": 222, "symbolnam": 222, "startnumb": 222, "endnumb": 222, "renumb": 222, "absorpt": 222, "assist": 222, "constant_renumb": 222, "1st_rational_riccati": 222, "riccati_special_minus2": 222, "linear_coeffici": 222, "separable_reduc": 222, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 222, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 222, "liouvil": 222, "2nd_linear_airi": 222, "2nd_linear_bessel": 222, "2nd_hypergeometr": 222, "2nd_hypergeometric_integr": 222, "nth_order_reduc": 222, "2nd_power_series_ordinari": 222, "2nd_power_series_regular": 222, "almost_linear_integr": 222, "linear_coefficients_integr": 222, "separable_reduced_integr": 222, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 222, "liouville_integr": 222, "2nd_nonlinear_autonomous_conserv": 222, "2nd_nonlinear_autonomous_conserved_integr": 222, "newconst": 222, "ode_sol_simpl": 222, "trysolv": 222, "sola": 222, "solb": 222, "listofsolut": 222, "ode_problem": 222, "firstexact": 222, "exact_differential_equ": 222, "tenenbaum": 222, "dover": 222, "1963": 222, "homogeneouscoeffbest": 222, "ode_1st_homogeneous_coeff_best_integr": 222, "homogeneous_differential_equ": 222, "firstlinear": 222, "linear_differential_equ": 222, "first_order_equ": 222, "rationalriccati": 222, "atleast": 222, "riccati_equ": 222, "thieu": 222, "vo": 222, "www3": [222, 251], "risc_5387": 222, "phdthesisthieu": 222, "secondlinearairi": 222, "secondlinearbessel": 222, "math24": 222, "bernoulli_differential_equ": 222, "goldstein": 222, "braun": 222, "maplesoft": 222, "aspx": 222, "odeadvisor": 222, "riccatispeci": 222, "__________________": 222, "eqworld": 222, "ipmnet": 222, "ru": 222, "ode0106": 222, "ode0123": 222, "nthlinearconstantcoeffhomogen": 222, "nth_linear_constant_coeff_homogeneous_integr": 222, "nonhomogeneous_equation_with_constant_coeffici": 222, "nthlinearconstantcoeffundeterminedcoeffici": 222, "method_of_undetermined_coeffici": 222, "221": 222, "nthlinearconstantcoeffvariationofparamet": 222, "cramer": 222, "variation_of_paramet": 222, "planetmath": 222, "variationofparamet": 222, "nthlineareulereqhomogen": 222, "equidimension": 222, "nth_linear_euler_eq_homogeneous_integr": 222, "sollist": 222, "93euler_equ": 222, "bender": 222, "orszag": 222, "scientist": 222, "nthlineareulereqnonhomogeneousvariationofparamet": 222, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 222, "nthalgebra": 222, "nthorderreduc": 222, "caught": 222, "fault": 222, "almostlinear": 222, "first_linear": 222, "joel": 222, "mose": 222, "stormi": 222, "decad": 222, "august": [222, 241], "558": 222, "linearcoeffici": 222, "separablereduc": 222, "liegroup": 222, "secondhypergeometr": 222, "2f1": 222, "1f1": 222, "0f1": 222, "liouvillian": 222, "pfq": 222, "chan": 222, "cheb": 222, "terrab": 222, "ode_1st_power_seri": 222, "travi": [222, 237], "walker": 222, "ode_2nd_power_series_ordinari": 222, "lamar": 222, "seriessolut": 222, "simmon": 222, "176": 222, "ode_2nd_power_series_regular": 222, "lie_heuristic_abaco1_simpl": 222, "duart": 222, "da": 222, "mota": 222, "lie_heuristic_abaco1_product": 222, "roch": 222, "lie_heuristic_bivari": 222, "329": 222, "lie_heuristic_chi": 222, "lie_heuristic_abaco2_similar": 222, "lie_heuristic_function_sum": 222, "lie_heuristic_abaco2_unique_unknown": 222, "lie_heuristic_abaco2_unique_gener": 222, "lie_heuristic_linear": 222, "gy": 222, "bh": 222, "impract": 222, "riccati_norm": 222, "riccati_inverse_norm": 222, "riccati_reduc": 222, "construct_c": 222, "construct_d": 222, "val_inf": 222, "valuat": 222, "rational_laurent_seri": 222, "compute_m_ybar": 222, "ybar": 222, "solve_aux_eq": 222, "numa": 222, "dena": 222, "numi": 222, "deni": 222, "remove_redundant_sol": 222, "sol1": 222, "sol2": 222, "get_gen_sol_from_part_sol": 222, "part_sol": 222, "haaheim": 222, "solve_riccati": 222, "gensol": 222, "_linear_2eq_order1_type6": 222, "_linear_2eq_order1_type7": 222, "fgp": 222, "ag": 222, "bg": 222, "linear_ode_to_matrix": 222, "odeordererror": 222, "odenonlinearerror": 222, "eqs_mat": 222, "linear_eq_to_matrix": [222, 225], "r805": 222, "matrix_differential_equ": 222, "canonical_od": 222, "canonical_eq": 222, "canonical_system": 222, "linodesolve_typ": 222, "linodesolv": 222, "type1": 222, "type2": 222, "type3": 222, "type4": 222, "type5": 222, "type6": 222, "type_of_equ": 222, "a_t": 222, "a_non_commut": 222, "matrix_exp_jordan_form": 222, "expj": 222, "matrix_exp": 222, "defect": 222, "p_invers": 222, "r806": 222, "defective_matrix": 222, "r807": 222, "r808": 222, "jordan_normal_form": 222, "comupt": 222, "r809": 222, "r810": 222, "matrix_exponenti": 222, "follw": 222, "antiderv": 222, "subscheck": 222, "system_info": 222, "sol_vector": 222, "sol_vector_evalu": 222, "_nonlinear_2eq_order1_type1": 222, "_nonlinear_2eq_order1_type2": 222, "_nonlinear_2eq_order1_type3": 222, "autonom": 222, "_nonlinear_2eq_order1_type4": 222, "_nonlinear_2eq_order1_type5": 222, "clairaut": 222, "envelop": 222, "_nonlinear_3eq_order1_type1": 222, "enspac": [222, 225], "sysod": 222, "sode0401": 222, "_nonlinear_3eq_order1_type2": 222, "sode0402": 222, "_nonlinear_3eq_order1_type3": 222, "sode0404": 222, "_nonlinear_3eq_order1_type4": 222, "sode0405": 222, "_nonlinear_3eq_order1_type5": 222, "sode0406": 222, "_handle_integr": 222, "gather": 222, "unhind": 222, "wolphramalpha": 222, "detool": 222, "hint_integr": 222, "alphanumer": 222, "hinder": 222, "matching_hint": 222, "matchdict": 222, "1st_homogeneous_coeff": 222, "your_hint": 222, "xfail": [222, 235, 237], "pde_separ": 223, "uxt": 223, "pde_separate_add": 223, "pde_separate_mul": 223, "uxi": 223, "pdsolv": 223, "solvefun": 223, "classify_pd": 223, "test_pd": 223, "pde_hintnam": 223, "ux": 223, "1st_linear_constant_coeff_homogen": 223, "checkpdesol": 223, "_preprocess": 223, "inabl": 223, "_xi_1": 223, "pde_1st_linear_constant_coeff_homogen": 223, "viktor": 223, "grigoryan": 223, "124a": 223, "pde_1st_linear_constant_coeff": 223, "substack": 223, "1st_linear_constant_coeff_integr": 223, "pde_1st_linear_variable_coeff": 223, "du": 223, "inspir": [223, 279], "pde_hint": 223, "checksol": 224, "ect": 224, "attain": [224, 256], "star": 224, "052": 224, "cov": 224, "pval": 224, "xval": 224, "rsolv": 224, "solve_linear": 224, "solve_linear_system": 224, "msymbol": 224, "degener": [224, 225], "solve_linear_system_lu": 224, "solve_undetermined_coeff": 224, "equ": 224, "73908513321516064165531208767387340401341175890076": 224, "steep": 224, "39267e": 224, "1684e": 224, "588469032184": 224, "315": 224, "730061685774": 224, "46792545969349058": 224, "inconclus": 224, "init": 224, "dissimilar": 224, "v_0": 224, "n_m": 224, "v_m": 224, "rsolve_poli": 224, "rsolve_ratio": 224, "r811": 224, "levelt": 224, "290": [224, 254], "296": 224, "r812": 224, "r813": 224, "revis": 224, "r814": 224, "289": 224, "alembertian": 224, "r815": 224, "r816": 224, "polysi": 224, "solve_triangul": 224, "kalkbrenn": 224, "patrizia": 224, "teo": 224, "aaecc": 224, "argand": 225, "uncount": 225, "bizarr": 225, "her": 225, "sol_f": 225, "solveset_r": 225, "solveset_complex": 225, "methodologi": [225, 276], "_solve_real_trig": 225, "invert_r": 225, "invert_complex": 225, "_solve_rad": 225, "_solve_ab": 225, "_solve_as_r": 225, "_solve_as_poly_r": 225, "_solve_as_poly_complex": 225, "_solve_as_poli": 225, "gsoc": 225, "2014": [225, 226], "iamit": 225, "2948": 225, "6659": 225, "7523": 225, "sibx0afl3q": 225, "9696": 225, "27s_theorem": 225, "inftyright": 225, "nright": 225, "0right": 225, "domain_check": 225, "3z": 225, "9z": 225, "nonlinearerror": 225, "cccc": 225, "eq3": 225, "eq4": 225, "391": 225, "_solve_system": 225, "_solve_using_known_valu": 225, "_transolv": 225, "_tsolv": 225, "tsolv": 225, "outright": 225, "tractabl": 225, "interf": 225, "add_typ": 225, "_is_exponenti": 225, "new_eq": 225, "_solve_exponenti": 225, "_is_class": 225, "_solve_class": 225, "_solve_expo": 225, "9x": 225, "solve_expo": 225, "log_b": 225, "_solve_logarithm": 225, "solve_log": 225, "_is_logarithm": 225, "prebuilt": 226, "finiterv": 226, "varianc": 226, "dice": 226, "continuousrv": 226, "continuousdistributionhandmad": 226, "dist": 226, "discreterv": 226, "discretedistributionhandmad": 226, "pmf": 226, "finitedistributionhandmad": 226, "discreteuniform": 226, "randomsymbol": 226, "r817": 226, "discrete_uniform_distribut": 226, "r818": 226, "discreteuniformdistribut": 226, "d6": 226, "diedistribut": 226, "toss": 226, "r819": 226, "bernoulli_distribut": 226, "r820": 226, "bernoullidistribut": 226, "numeb": 226, "unfair": 226, "r821": 226, "coin_flip": 226, "binomialdistribut": 226, "r822": 226, "binomial_distribut": 226, "r823": 226, "betabinomi": 226, "r824": 226, "r825": 226, "betabinomialdistribut": 226, "popul": 226, "marbl": 226, "r826": 226, "hypergeometric_distribut": 226, "r827": 226, "hypergeometricdistribut": 226, "700000000000000": 226, "r828": 226, "rademacher_distribut": 226, "r829": 226, "geometric_distribut": 226, "r830": 226, "geometricdistribut": 226, "r831": 226, "hermite_distribut": 226, "poisson": 226, "r832": 226, "poisson_distribut": 226, "r833": 226, "poissondistribut": 226, "r834": 226, "logarithmic_distribut": 226, "r835": 226, "logarithmicdistribut": 226, "negativebinomi": 226, "r836": 226, "negative_binomial_distribut": 226, "r837": 226, "negativebinomialdistribut": 226, "skellam": 226, "mu1": 226, "mu2": 226, "mu_1": 226, "mu_2": 226, "i_k": 226, "r838": 226, "skellam_distribut": 226, "yulesimon": 226, "yule": 226, "simon": 226, "r839": 226, "93simon_distribut": 226, "8100": 226, "r840": 226, "zeta_distribut": 226, "cdf": 226, "r841": 226, "arcsine_distribut": 226, "benini": 226, "r842": 226, "benini_distribut": 226, "r843": 226, "v8": 226, "beninidistribut": 226, "r844": 226, "beta_distribut": 226, "r845": 226, "betadistribut": 226, "betanoncentr": 226, "noncentr": 226, "r846": 226, "noncentral_beta_distribut": 226, "r847": 226, "noncentralbetadistribut": 226, "betaprim": 226, "r848": 226, "beta_prime_distribut": 226, "r849": 226, "betaprimedistribut": 226, "boundedpareto": 226, "pareto": 226, "r850": 226, "pareto_distribut": 226, "bounded_pareto_distribut": 226, "r851": 226, "cauchy_distribut": 226, "r852": 226, "cauchydistribut": 226, "r853": 226, "chi_distribut": 226, "r854": 226, "chidistribut": 226, "chinoncentr": 226, "r855": 226, "noncentral_chi_distribut": 226, "chisquar": 226, "r856": 226, "chi_squared_distribut": 226, "r857": 226, "squareddistribut": 226, "dagum": 226, "r858": 226, "dagum_distribut": 226, "erlang": 226, "r859": 226, "erlang_distribut": 226, "r860": 226, "erlangdistribut": 226, "exgaussian": 226, "emg": 226, "r861": 226, "exponentially_modified_gaussian_distribut": 226, "quantil": 226, "r862": 226, "exponential_distribut": 226, "r863": 226, "exponentialdistribut": 226, "fdistribut": 226, "______________________________": 226, "r864": 226, "r865": 226, "fisherz": 226, "fisher": 226, "2d_1": 226, "d_1z": 226, "d_1e": 226, "r866": 226, "27s_z": 226, "r867": 226, "fishersz": 226, "frechet": 226, "r868": 226, "a9chet_distribut": 226, "r869": 226, "gamma_distribut": 226, "r870": 226, "gammadistribut": 226, "gammainvers": 226, "r871": 226, "gompertz": 226, "r872": 226, "gompertz_distribut": 226, "gumbel": 226, "dfrac": 226, "r873": 226, "gumbeldistribut": 226, "r874": 226, "gumbel_distribut": 226, "r875": 226, "mathwav": 226, "easyfit": 226, "gumbel_max": 226, "r876": 226, "gumbel_min": 226, "kumaraswami": 226, "r877": 226, "kumaraswamy_distribut": 226, "r878": 226, "laplace_distribut": 226, "r879": 226, "laplacedistribut": 226, "r880": 226, "a9vy_distribut": 226, "r881": 226, "levydistribut": 226, "logist": 226, "r882": 226, "logistic_distribut": 226, "r883": 226, "logisticdistribut": 226, "loglogist": 226, "unimod": 226, "r884": 226, "lognorm": 226, "r885": 226, "r886": 226, "lognormaldistribut": 226, "lomax": 226, "r887": 226, "lomax_distribut": 226, "maxwel": 226, "2a": 226, "r888": 226, "maxwell_distribut": 226, "r889": 226, "maxwelldistribut": 226, "moyal": 226, "r890": 226, "moyaldistribut": 226, "r891": 226, "rice": 226, "dobelman": 226, "textfil": 226, "distributionshandbook": 226, "nakagami": 226, "r892": 226, "nakagami_distribut": 226, "marginal_distribut": 226, "r893": 226, "normal_distribut": 226, "r894": 226, "normaldistributionfunct": 226, "xm": 226, "x_m": 226, "r895": 226, "r896": 226, "paretodistribut": 226, "powerfunct": 226, "paramat": 226, "r897": 226, "power_func": 226, "quadraticu": 226, "r898": 226, "quadratic_distribut": 226, "raisedcosin": 226, "r899": 226, "raised_cosine_distribut": 226, "r900": 226, "rayleigh_distribut": 226, "r901": 226, "rayleighdistribut": 226, "r902": 226, "reciprocal_distribut": 226, "studentt": 226, "r903": 226, "student_t": 226, "r904": 226, "studentst": 226, "shiftedgompertz": 226, "r905": 226, "shifted_gompertz_distribut": 226, "r906": 226, "trapezoidal_distribut": 226, "r907": 226, "triangular_distribut": 226, "r908": 226, "triangulardistribut": 226, "r909": 226, "uniform_distribution_": 226, "28continu": 226, "r910": 226, "uniformdistribut": 226, "uniformsum": 226, "irwin": 226, "r911": 226, "uniform_sum_distribut": 226, "r912": 226, "uniformsumdistribut": 226, "vonmis": 226, "mise": 226, "i_0": 226, "r913": 226, "von_mises_distribut": 226, "r914": 226, "vonmisesdistribut": 226, "wald": 226, "gaussianinvers": 226, "r915": 226, "inverse_gaussian_distribut": 226, "r916": 226, "inversegaussiandistribut": 226, "weibul": 226, "geq0": 226, "r917": 226, "weibull_distribut": 226, "r918": 226, "weibulldistribut": 226, "wignersemicircl": 226, "semicircl": 226, "frac2": 226, "r919": 226, "wigner_semicircle_distribut": 226, "r920": 226, "wignerssemicirclelaw": 226, "jointrv": 226, "_set": 226, "multivariatenorm": 226, "noninvert": 226, "ob": 226, "r921": 226, "multivariate_normal_distribut": 226, "multivariatelaplac": 226, "r922": 226, "multivariate_laplace_distribut": 226, "generalizedmultivariateloggamma": 226, "joint_rv_typ": 226, "gd": 226, "y_3": 226, "gmvlg": 226, "generalizedmultivariateloggammaomega": 226, "r923": 226, "generalized_multivariate_log": 226, "r924": 226, "234137346_on_a_multivariate_log": 226, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 226, "correl": 226, "gmvlgo": 226, "r925": 226, "r926": 226, "r927": 226, "multinomial_distribut": 226, "r928": 226, "multinomialdistribut": 226, "multivariatebeta": 226, "r929": 226, "dirichlet_distribut": 226, "r930": 226, "dirichletdistribut": 226, "multivariateewen": 226, "ewen": 226, "r931": 226, "27s_sampling_formula": 226, "r932": 226, "rutger": 226, "hcrane": 226, "sts529": 226, "multivariatet": 226, "negativemultinomi": 226, "n_c": 226, "r933": 226, "negative_multinomial_distribut": 226, "r934": 226, "normalgamma": 226, "r935": 226, "discretemarkovchain": 226, "state_spac": 226, "trans_prob": 226, "markov": 226, "characteris": 226, "transitionmatrixof": 226, "transition_prob": 226, "sunni": 226, "cloudi": 226, "raini": 226, "randomindexedsymbol": 226, "409": 226, "6963328": 226, "3096": 226, "query_gt": 226, "64705": 226, "r936": 226, "markov_chain": 226, "time_markov_chain": 226, "r937": 226, "dartmouth": 226, "teaching_aid": 226, "books_articl": 226, "probability_book": 226, "chapter11": 226, "canonical_form": 226, "transient": 226, "p_new": 226, "new_matrix": 226, "communication_class": 226, "r938": 226, "onlinelibrari": 226, "wilei": 226, "1002": 226, "9780470316887": 226, "app1": 226, "r939": 226, "columbia": 226, "ww2040": 226, "6711f12": 226, "lect1023big": 226, "is_recurr": 226, "tarjan": [226, 244], "r940": 226, "4701sum07": 226, "4701": 226, "mcii": 226, "r941": 226, "ceca": 226, "clemson": 226, "shierd": 226, "shier": 226, "r942": 226, "ujcont": 226, "uj": 226, "7506": 226, "content1": 226, "r943": 226, "econ": 226, "dtmc": 226, "reccur": 226, "r944": 226, "absorbing_markov_chain": 226, "r945": 226, "brandei": 226, "igusa": 226, "math56as08": 226, "math56a_s08_notes015": 226, "fixed_row_vector": 226, "stationary_distribut": 226, "fundamental_matrix": 226, "r946": 226, "lip": 226, "limiting_distribut": 226, "condition_set": 226, "wm": 226, "r947": 226, "probabilitycours": 226, "11_2_6_stationary_and_limiting_distribut": 226, "r948": 226, "galton": 226, "uchicago": 226, "yibi": 226, "stat317": 226, "lecture4_6up": 226, "continuousmarkovchain": 226, "gen_mat": 226, "generator_matrix": 226, "45279": 226, "58602": 226, "37933": 226, "34211": 226, "7143": 226, "4002723175": 226, "6832579186": 226, "r949": 226, "r950": 226, "biu": 226, "il": 226, "amirgi": 226, "ctmcnote": 226, "bernoulliprocess": 226, "processs": 226, "joint_distribut": 226, "jointdistributionhandmad": 226, "r951": 226, "bernoulli_process": 226, "r952": 226, "mathc": 226, "clarku": 226, "djoyc": 226, "ma217": 226, "given_condit": 226, "poissonprocess": 226, "648": 226, "r953": 226, "11_0_0_intro": 226, "r954": 226, "poisson_point_process": 226, "wiener": 226, "brownian": 226, "scottish": 226, "botanist": 226, "r955": 226, "11_4_0_brownian_motion_wiener_process": 226, "r956": 226, "wiener_process": 226, "gammaprocess": 226, "jump": [226, 283], "472": 226, "r957": 226, "gamma_process": 226, "matrixgamma": 226, "scale_matrix": 226, "r958": 226, "matrix_gamma_distribut": 226, "wishart": 226, "r959": 226, "wishart_distribut": 226, "matrixnorm": 226, "location_matrix": 226, "scale_matrix_1": 226, "scale_matrix_2": 226, "r960": 226, "matrix_normal_distribut": 226, "compound_rv": 226, "compounddistribut": 226, "crv_type": 226, "r961": 226, "compound_probability_distribut": 226, "numsampl": 226, "evaluate_integr": 226, "r962": 226, "entropy_": 226, "information_theori": 226, "r963": 226, "crmarsh": 226, "charles_marsh_continuous_entropi": 226, "r964": 226, "uconn": 226, "kconrad": 226, "blurb": 226, "entropypost": 226, "arg1": 226, "arg2": 226, "cexpr": 226, "coskew": 226, "sigma_": 226, "r965": 226, "r966": 226, "probability_distribut": 226, "randomst": 226, "die_rol": 226, "samp": 226, "pspace": 226, "samp_list": 226, "sam": 226, "42519758": 226, "40207856": 226, "94991743": 226, "85819627": 226, "83403519": 226, "9412172": 226, "85768055": 226, "38954165": 226, "11163337": 226, "3176591": 226, "79115232": 226, "63232916": 226, "01747268": 226, "96716083": 226, "sampling_p": 226, "sampling_": 226, "factorial_mo": 226, "r967": 226, "r968": 226, "factorialmo": 226, "kurtosi": 226, "outlier": 226, "sigma_x": 226, "r969": 226, "r970": 226, "asymmetri": 226, "pearson": 226, "sampling_dens": 226, "centralmo": 226, "cmoment": 226, "expectationmatrix": 226, "randommatrixsymbol": 226, "n11": 226, "n12": 226, "n21": 226, "n22": 226, "variancematrix": 226, "crosscovariancematrix": 226, "randomdomain": 226, "singledomain": 226, "singlepspac": 226, "productdomain": 226, "productpspac": 226, "conditionaldomain": 226, "frv": 226, "finitedomain": 226, "finitepspac": 226, "crv": 226, "continuousdomain": 226, "continuouspspac": 226, "diepspac": 226, "singlefinitepspac": 226, "normalpspac": 226, "singlecontinuouspspac": 226, "frv_type": 226, "randomvari": 226, "tactic": 226, "random_symbol": 226, "rs_swap": 226, "pspace1": 226, "pspace2": 226, "immutabledensendimarrai": 227, "tomatrix": 227, "j_m": 227, "i_a": 227, "i_b": 227, "sum_k": 227, "tensorcontract": [227, 228], "tensordiagon": [227, 228], "derive_by_arrai": 227, "sum_m": 227, "immutablesparsendimarrai": 227, "mutabledensendimarrai": 227, "mutablesparsendimarrai": 227, "index_order_old": 227, "index_order_new": 227, "cab": 227, "contraction_ax": 227, "diagonal_ax": 227, "arraycontract": 228, "arraydiagon": 228, "arraysymbol": 228, "convert_indexed_to_arrai": 228, "arrayadd": 228, "convert_matrix_to_arrai": 228, "convert_array_to_matrix": 228, "expr_tr": 228, "array_der": 228, "index_method": 230, "get_contraction_structur": [230, 231], "deepest": 230, "nested_contract": 230, "get_indic": [230, 231, 232, 233], "indexconformanceexcept": 230, "______": 231, "stem": 231, "dim1": 231, "dim2": 231, "qwerti": 231, "a_ij": 231, "b_ij": 231, "syntact": 231, "a_real": 231, "c_inherit": 231, "c_explicit": 231, "unrol": 231, "tensorindextyp": [232, 233], "eps_dim": 232, "metric_nam": 232, "su": 232, "lorentz": 232, "tensor_index_typ": 232, "is_up": 232, "tensor_inde_typ": 232, "typ": 232, "tensorhead": [232, 233], "index_typ": 232, "tensorsymmetri": 232, "monoterm": 232, "_tensormanag": 232, "set_comm": 232, "asym2": 232, "fully_symmetr": 232, "tensori": [232, 233], "e_z": 232, "no_symmetri": 232, "p_x": 232, "p_y": 232, "p_z": 232, "ipos1": 232, "ipos2": 232, "icomp1": 232, "icomp2": 232, "nameless": 232, "replacement_dict": 232, "free_arg": 232, "addend": 232, "canon_bp": 232, "contract_metr": 232, "contract_al": 232, "ipo": 232, "icomp": 232, "nonrep": 232, "dum": 232, "ext_rank": 232, "is_canon_bp": 232, "get_free_indic": [232, 233], "perm2tensor": 232, "tid": 232, "sorted_compon": 232, "riemann_cyclic_replac": 232, "riemann_cycl": 232, "cadabra": 232, "multiterm": 232, "bianchi": 232, "sym2": 232, "direct_product": 232, "monotorem": 232, "tableaux": 232, "tensortyp": 232, "repetit": [232, 244], "tensormanag": 232, "comm_i2symbol": 232, "comm_symbols2i": 232, "get_comm": 232, "gcomm": 232, "ghcomm": 232, "toper": 233, "partialderiv": 233, "valenc": 233, "uncontract": 233, "compa": 233, "compb": 233, "derivand": 233, "xpass": [235, 237], "nocache_fail": 235, "expectedexcept": 235, "assertionerror": 235, "exceptioninfo": 235, "abort": 235, "9999": 235, "warningcl": [235, 242], "test_stacklevel": 235, "randtest": 236, "portabl": [237, 238], "pytestreport": 237, "force_color": 237, "readlin": 237, "sympydoctestfind": 237, "doctestpars": 237, "exclude_empti": 237, "sympydoctestrunn": 237, "checker": 237, "optionflag": 237, "5140": 237, "doctestrunn": 237, "clear_glob": 237, "writer": 237, "garbag": 237, "check_output": 237, "report_": 237, "sympyoutputcheck": 237, "outputcheck": 237, "stdlib": 237, "testrunn": 237, "sympytestresult": 237, "convert_to_native_path": 237, "lst": 237, "blacklist": 237, "get_sympy_dir": 237, "raise_on_deprec": 237, "deprecationwarn": [237, 242], "run_all_test": 237, "test_arg": 237, "test_kwarg": 237, "doctest_arg": 237, "doctest_kwarg": 237, "examples_arg": 237, "examples_kwarg": 237, "run_in_subprocess_with_hash_random": 237, "function_kwarg": 237, "virtualenv": 237, "pythonhashse": 237, "_test": 237, "split_list": 237, "sympytestfil": 237, "module_rel": 237, "extraglob": 237, "raise_on_error": 237, "basenam": [237, 238, 239], "slate": 237, "dont_accept_true_for_1": 237, "dont_accept_blanklin": 237, "normalize_whitespac": 237, "ellipsi": 237, "ignore_exception_detail": 237, "report_udiff": 237, "report_cdiff": 237, "report_ndiff": 237, "report_only_first_failur": 237, "mortem": 237, "tomfooleri": 237, "testmod": 237, "tester": 237, "fiddl": [237, 283], "timeout": 237, "keyboardinterrupt": 237, "interrupt": 237, "_basic": 237, "kw": 237, "test_equ": 237, "pdb": 237, "pipe": 237, "time_bal": 237, "tandem": 238, "matvec": 238, "codewrapp": 238, "distutil": 238, "fwrap": 238, "swig": 238, "binary_cal": 238, "22925376": 238, "25165824": 238, "_imp_": [238, 245], "filepath": 238, "cythoncodewrapp": 238, "dump_pyx": 238, "dummywrapp": 238, "f2pycodewrapp": 238, "ufuncifycodewrapp": 238, "dump_c": [238, 239], "funcnam": 238, "code_gen": [238, 239], "argument_tupl": 238, "include_dir": 238, "library_dir": 238, "extra_compile_arg": 238, "extra_link_arg": 238, "symfunc": [238, 245], "funtion_nam": 238, "ndimension": 238, "f_fortran": 238, "f_cython": 238, "r971": 238, "fortran77": 239, "fortran90": 239, "julia": 239, "rust": 239, "mileston": 239, "unsurmount": 239, "pyf": 239, "inputoutput": 239, "tcc": 239, "libtcc": 239, "date": 239, "hostnam": 239, "sha1": 239, "ccodegen": 239, "preprocessor_stat": 239, "dump_h": 239, "guard": 239, "get_prototyp": 239, "codegenerror": 239, "function_prototyp": 239, "dump_cod": 239, "cname": 239, "fname": 239, "pynam": 239, "jlname": 239, "octnam": 239, "rsname": 239, "fcodegen": 239, "f90": 239, "dump_f95": 239, "get_interfac": 239, "juliacodegen": 239, "dump_jl": 239, "octavecodegen": 239, "dump_m": 239, "returnvalu": 239, "destin": 239, "local_var": 239, "result_vari": 239, "ot": 239, "unnam": 239, "rustcodegen": 239, "dump_r": 239, "f_result": 239, "myfcn": 239, "fcn2": 239, "myfcn_result": 239, "void": 239, "get_default_datatyp": 239, "complex_allow": 239, "agnost": 239, "conserve_mpmath_dp": 240, "doctest_depends_on": 240, "disable_view": 240, "python_vers": 240, "memoize_properti": 240, "propfunc": 240, "no_attrs_in_subclass": 240, "__all__": 240, "some_funct": 240, "thread": 240, "xthread": 240, "threaded_factori": 240, "use_add": 240, "multiset_partitions_taocp": 241, "visitor": 241, "pstack": 241, "lpart": 241, "topmost": 241, "partcompon": 241, "peek": [241, 283], "unpredict": 241, "list_visitor": 241, "abb": [241, 244], "factoring_visitor": 241, "multisetpartitiontravers": 241, "aocp": 241, "count_partit": 241, "127750": 241, "686": 241, "4a": 241, "factorisatio": 241, "oppenheim": 241, "numerorum": 241, "canfield": 241, "erdo": 241, "OF": 241, "yorgei": 241, "monad": 241, "persist": 241, "288716": 241, "memoiz": [241, 243, 270], "dramat": 241, "hypothet": 241, "borrow": 241, "coalesc": 241, "_rang": 241, "stretch": 241, "brain": 241, "histogram": 241, "enum_al": 241, "enum_larg": 241, "enum_rang": 241, "enum_smal": 241, "ub": 241, "parti": 242, "catch_warn": 242, "simplefilt": 242, "dedent": [242, 247], "enum": [243, 270], "miscellan": [243, 270], "pkgdata": [243, 270], "notiter": 244, "binary_partit": 244, "r972": 244, "taocp": 244, "nx": 244, "common_prefix": 244, "common_suffix": 244, "unhash": 244, "r973": 244, "connected_component_": 244, "graph_theori": 244, "r974": 244, "27s_strongly_connected_components_algorithm": 244, "dict_merg": 244, "filter_symbol": 244, "myop": 244, "kog": 244, "informatik": 244, "hamburg": 244, "mein": 244, "python_trick": 244, "neighbor": 244, "xxxxxx": 244, "xxxx": 244, "r975": 244, "method_ring": 244, "r976": 244, "4856615": 244, "4857018": 244, "r977": 244, "programminggeek": 244, "r978": 244, "steinhau": 244, "93johnson": 244, "93trotter_algorithm": 244, "r979": 244, "involut": 244, "eco": 244, "vajnovszki": 244, "dmtc": 244, "generate_involut": 244, "r980": 244, "permutationinvolut": 244, "generate_oriented_forest": 244, "forest": 244, "acycl": 244, "r981": 244, "beyer": 244, "hedetniemi": 244, "novemb": 244, "r982": 244, "1633833": 244, "has_dup": 244, "has_varieti": 244, "iproduct": 244, "abcbb": 244, "is_sequ": 244, "generatortyp": 244, "_iter": 244, "kbin": 244, "ordered_flag": 244, "least_rot": 244, "rotate_left": 244, "r983": 244, "lexicographically_minimal_string_rot": 244, "minlex": 244, "acb": 244, "11010011000": 244, "00011010011": 244, "00011001011": 244, "aaa": 244, "abi": 244, "bby": 244, "abracadabra": 244, "banana": 244, "multiset_derang": 244, "uniq": 244, "1233": 244, "3312": 244, "3321": 244, "aba": 244, "baa": 244, "bead": 244, "ooo": 244, "r984": 244, "ordered_partit": 244, "r985": 244, "jeromekelleh": 244, "r986": 244, "jerom": 244, "kelleh": 244, "barri": 244, "sullivan": 244, "0909": 244, "2331v2": 244, "r987": 244, "activest": 244, "218332": 244, "random_derang": 244, "reseed": 244, "rotate_right": 244, "roundrobin": 244, "ef": 244, "credit": 244, "sakki": 244, "keyfunc": 244, "subgraph": 244, "r988": 244, "r989": 244, "longest": 244, "r990": 244, "unflatten": 244, "partion": 244, "bcd": 244, "afunc": 245, "lambdastr": 245, "dummifi": 245, "use_imp": 245, "custom_sin": 245, "38177329": 245, "49315059": 245, "8414709848078965": 245, "eager": 245, "enable_eager_execut": 245, "eagertensor": 245, "__class__": 245, "placehold": 245, "user_guid": 245, "runtimewarn": 245, "sin_cos_sympi": 245, "sin_co": 245, "sin_cos_numpi": 245, "38177329068": 245, "module_dictionari": 245, "_lambdifygener": 245, "__globals__": 245, "lambdaprint": 245, "90929743": [245, 272], "assoc_recurrence_memo": 246, "base_seq": 246, "memo": 246, "pn0": 246, "recurrence_memo": 246, "specfun": 246, "__index__": 247, "sanit": 247, "99999999999999991611392": 247, "debug_decor": 247, "fillded": 247, "strline": 247, "rawlin": 247, "find_execut": 247, "pathsep": 247, "pastabl": 247, "bee": 247, "spamham": 247, "sha": 247, "spam": 247, "egg": 247, "md5": 247, "eggsham": 247, "r991": 247, "6116978": 247, "roken": 247, "deletechar": 247, "multicharact": 247, "oldchar": 247, "newchar": 247, "acquir": 248, "getresourc": 248, "pkgname": 248, "pkgpath": 248, "dirnam": 248, "normpath": 248, "rb": 248, "__loader__": 248, "stringio": 248, "get_resourc": 248, "ioerror": 248, "mydata": 248, "mypkgdata": 248, "jpg": 248, "get_class": 249, "lookup_view": 249, "get_mod_func": 249, "callback": 249, "timeutil": 250, "coordsysrect": 251, "coordsys3d": [251, 253, 254, 255, 257, 258, 261], "rotation_matrix": [251, 253, 256], "vector_nam": 251, "variable_nam": [251, 258], "latex_vect": 251, "pretty_vect": 251, "latex_scalar": 251, "pretty_scalar": 251, "new_system": 251, "create_new": [251, 256], "transformation_to_par": 251, "transformation_from_par": 251, "locate_new": [251, 254, 255, 256, 257, 258], "position_wrt": [251, 255, 256, 257], "orient_new": [251, 253], "axisorient": [251, 253, 256], "axis_orient": [251, 256], "bodyorient": [251, 253, 256], "body_orient": [251, 253, 256], "spaceorient": [251, 253, 256], "space_orient": [251, 253], "quaternionorient": [251, 253, 256], "q_orient": [251, 253], "orient_new_axi": [251, 254, 256], "orient_new_bodi": [251, 256], "angle1": [251, 253], "angle2": [251, 253], "angle3": [251, 253], "euler_angl": [251, 253], "orient_new_quaternion": [251, 256], "orient_new_spac": [251, 256], "coordsyrect": 251, "v_a": 251, "v_b": 251, "scalar_map": 251, "basevector": [251, 255, 256], "delop": [251, 257, 258], "r992": 251, "r993": 251, "basedyad": [251, 255], "second_system": 251, "deloper": [251, 259], "parametricregion": [251, 254, 261], "implicitregion": [251, 254, 261], "parabola": 251, "rational_parametr": 251, "singular_point": 251, "regular_point": 251, "reg_point": 251, "implict": 251, "cubic_curv": 251, "calulc": 251, "hoffmann": 251, "purdu": 251, "lib": 251, "cgi": 251, "viewcont": 251, "1827": 251, "cstech": 251, "erik": 251, "hillgart": 251, "diploma": 251, "linz": 251, "universitat": 251, "availa": 251, "risc_1355": 251, "20point": 251, "20on": 251, "20conic": 251, "parametricintegr": 251, "semispher": [251, 261], "axis_orienter1": 253, "axis_orienter2": 253, "axis_orienter3": 253, "body_orienter1": 253, "body_orienter2": 253, "body_orienter3": 253, "matrix_to_vector": 254, "system2": 254, "vector_integr": [254, 261], "essenc": 255, "vectormul": 255, "vectoradd": 255, "ofcours": 255, "vectorzero": 255, "expressli": 255, "express_coordin": [255, 256], "dyadicmul": 255, "dyadicadd": 255, "cleanest": 256, "orient_new_": 256, "basescalar": [256, 258], "oabc": 257, "oa": 257, "pq": 257, "sr": 257, "wikidel": 257, "ffield": 257, "gradient_field": 258, "instantan": 258, "directional_deriv": 258, "lame": 258, "dyadicproduct": 259, "quantifi": 260, "throughtout": 260, "necesssari": 261, "param_circl": 261, "implicit_circl": 261, "obextj": 261, "solidspher": 261, "lamina": 261, "\ud835\udc45": 261, "cylind": 261, "vectorfield": 261, "hemispher": 261, "top_fac": 261, "bottom_fac": 261, "27_theorem": 261, "cone": 261, "divergence_theorem": 261, "12288": 261, "truss": 268, "str_expr": 272, "82842712474619": 272, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 272, "0874989834394464": 272, "roundoff": 272, "14112001": 272, "7568025": 272, "95892427": 272, "2794155": 272, "6569866": 272, "98935825": 272, "41211849": 272, "0998334166468": 272, "sympy_nam": 272, "numerical_funct": 272, "rephras": 273, "oh": 273, "integration_vari": 273, "dfdx": 273, "equidistantli": 273, "d2fdx2": 273, "django": 275, "oop": 275, "crazi": 275, "abcdef": 275, "reevalu": 275, "infal": 275, "entertain": 276, "preliminari": 276, "82842712475": 277, "cass": 277, "wrote": [277, 278], "theme": 277, "expanded_expr": 277, "whet": 277, "appetit": 277, "c\u2082": [277, 284], "c\u2081": [277, 284], "\u03bd": 277, "sell": 277, "battl": 277, "confid": 277, "gigabyt": 277, "tear": 278, "dotprint": [278, 282], "stopper": 278, "uexpr": 278, "unevalutedexpr": 278, "downsid": 279, "algebraic_multipl": 279, "pdp": 279, "undertest": 279, "underevalu": 279, "my_iszero": 279, "stronger": 279, "tradeoff": 279, "wonder": 279, "5b7c3e8ee5b40332abdb206c": 279, "15141": 279, "19548": 279, "10120": 279, "10279": 279, "constant_problem": 279, "possiblezeroq": 279, "mupad_ref": 279, "iszero": 279, "congratul": 280, "decent": 281, "austin": 281, "video": 281, "javascript": 282, "bvar": 282, "unnecessarili": 283, "whittl": 283, "catchal": 283, "collected_expr": 283, "cdot1": 283, "undertak": 283, "undon": 283, "cdot2": 283, "nck": 283, "pronounc": 283, "_2f_1": 283, "cfrac": 283, "list_to_frac": 283, "a\u2080": 283, "a\u2083": 283, "a\u2084": 283, "pointless": 283, "orig_frac": 283, "diffeq": 284}, "objects": {"": [[28, 0, 0, "-", "sympy"]], "sympy": [[30, 0, 0, "-", "abc"], [31, 0, 0, "-", "algebras"], [34, 0, 0, "-", "assumptions"], [37, 0, 0, "-", "calculus"], [38, 0, 0, "-", "categories"], [59, 0, 0, "-", "diffgeom"], [60, 0, 0, "-", "discrete"], [64, 0, 0, "-", "functions"], [77, 0, 0, "-", "holonomic"], [84, 0, 0, "-", "integrals"], [85, 0, 0, "-", "interactive"], [86, 0, 0, "-", "liealgebras"], [87, 0, 0, "-", "logic"], [92, 0, 0, "-", "matrices"], [99, 0, 0, "-", "parsing"], [268, 0, 0, "-", "physics"], [202, 0, 0, "-", "polys"], [224, 0, 0, "-", "solvers"], [226, 0, 0, "-", "stats"], [229, 0, 0, "-", "tensor"], [234, 0, 0, "-", "testing"], [243, 0, 0, "-", "utilities"], [259, 0, 0, "-", "vector"]], "sympy.algebras": [[31, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[31, 2, 1, "", "add"], [31, 2, 1, "", "angle"], [31, 2, 1, "", "arc_coplanar"], [31, 2, 1, "", "axis"], [31, 2, 1, "", "exp"], [31, 2, 1, "", "from_axis_angle"], [31, 2, 1, "", "from_rotation_matrix"], [31, 2, 1, "", "index_vector"], [31, 2, 1, "", "integrate"], [31, 2, 1, "", "inverse"], [31, 2, 1, "", "is_pure"], [31, 2, 1, "", "is_zero_quaternion"], [31, 2, 1, "", "mensor"], [31, 2, 1, "", "mul"], [31, 2, 1, "", "norm"], [31, 2, 1, "", "normalize"], [31, 2, 1, "", "orthogonal"], [31, 2, 1, "", "parallel"], [31, 2, 1, "", "pow"], [31, 2, 1, "", "pow_cos_sin"], [31, 2, 1, "", "rotate_point"], [31, 2, 1, "", "scalar_part"], [31, 2, 1, "", "to_axis_angle"], [31, 2, 1, "", "to_rotation_matrix"], [31, 2, 1, "", "vector_coplanar"], [31, 2, 1, "", "vector_part"]], "sympy.assumptions": [[32, 0, 0, "-", "ask"], [33, 0, 0, "-", "assume"], [35, 0, 0, "-", "predicates"], [36, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[32, 1, 1, "", "AssumptionKeys"], [32, 3, 1, "", "ask"], [32, 3, 1, "", "register_handler"], [32, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[33, 1, 1, "", "AppliedPredicate"], [33, 1, 1, "", "AssumptionsContext"], [33, 1, 1, "", "Predicate"], [33, 1, 1, "", "UndefinedPredicate"], [33, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[33, 4, 1, "", "arg"], [33, 4, 1, "", "arguments"], [33, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[33, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[33, 2, 1, "", "eval"], [33, 5, 1, "", "handler"], [33, 2, 1, "", "register"], [33, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[35, 1, 1, "", "FinitePredicate"], [35, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[35, 1, 1, "", "CommutativePredicate"], [35, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[35, 1, 1, "", "ComplexElementsPredicate"], [35, 1, 1, "", "DiagonalPredicate"], [35, 1, 1, "", "FullRankPredicate"], [35, 1, 1, "", "IntegerElementsPredicate"], [35, 1, 1, "", "InvertiblePredicate"], [35, 1, 1, "", "LowerTriangularPredicate"], [35, 1, 1, "", "NormalPredicate"], [35, 1, 1, "", "OrthogonalPredicate"], [35, 1, 1, "", "PositiveDefinitePredicate"], [35, 1, 1, "", "RealElementsPredicate"], [35, 1, 1, "", "SingularPredicate"], [35, 1, 1, "", "SquarePredicate"], [35, 1, 1, "", "SymmetricPredicate"], [35, 1, 1, "", "TriangularPredicate"], [35, 1, 1, "", "UnitTriangularPredicate"], [35, 1, 1, "", "UnitaryPredicate"], [35, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[35, 1, 1, "", "CompositePredicate"], [35, 1, 1, "", "EvenPredicate"], [35, 1, 1, "", "OddPredicate"], [35, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[35, 1, 1, "", "NegativePredicate"], [35, 1, 1, "", "NonNegativePredicate"], [35, 1, 1, "", "NonPositivePredicate"], [35, 1, 1, "", "NonZeroPredicate"], [35, 1, 1, "", "PositivePredicate"], [35, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[35, 1, 1, "", "AlgebraicPredicate"], [35, 1, 1, "", "AntihermitianPredicate"], [35, 1, 1, "", "ComplexPredicate"], [35, 1, 1, "", "ExtendedRealPredicate"], [35, 1, 1, "", "HermitianPredicate"], [35, 1, 1, "", "ImaginaryPredicate"], [35, 1, 1, "", "IntegerPredicate"], [35, 1, 1, "", "IrrationalPredicate"], [35, 1, 1, "", "RationalPredicate"], [35, 1, 1, "", "RealPredicate"], [35, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[35, 5, 1, "", "AlgebraicHandler"], [35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[35, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[36, 3, 1, "", "refine"], [36, 3, 1, "", "refine_Pow"], [36, 3, 1, "", "refine_abs"], [36, 3, 1, "", "refine_arg"], [36, 3, 1, "", "refine_atan2"], [36, 3, 1, "", "refine_im"], [36, 3, 1, "", "refine_matrixelement"], [36, 3, 1, "", "refine_re"], [36, 3, 1, "", "refine_sign"]], "sympy.calculus": [[37, 0, 0, "-", "euler"], [37, 0, 0, "-", "finite_diff"], [37, 0, 0, "-", "singularities"], [37, 0, 0, "-", "util"]], "sympy.calculus.euler": [[37, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[37, 3, 1, "", "apply_finite_diff"], [37, 3, 1, "", "differentiate_finite"], [37, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[37, 3, 1, "", "is_decreasing"], [37, 3, 1, "", "is_increasing"], [37, 3, 1, "", "is_monotonic"], [37, 3, 1, "", "is_strictly_decreasing"], [37, 3, 1, "", "is_strictly_increasing"], [37, 3, 1, "", "monotonicity_helper"], [37, 3, 1, "", "singularities"]], "sympy.calculus.util": [[37, 3, 1, "", "continuous_domain"], [37, 3, 1, "", "function_range"], [37, 3, 1, "", "is_convex"], [37, 3, 1, "", "lcim"], [37, 3, 1, "", "maximum"], [37, 3, 1, "", "minimum"], [37, 3, 1, "", "not_empty_in"], [37, 3, 1, "", "periodicity"], [37, 3, 1, "", "stationary_points"]], "sympy.categories": [[38, 1, 1, "", "Category"], [38, 1, 1, "", "CompositeMorphism"], [38, 1, 1, "", "Diagram"], [38, 1, 1, "", "IdentityMorphism"], [38, 1, 1, "", "Morphism"], [38, 1, 1, "", "NamedMorphism"], [38, 1, 1, "", "Object"], [38, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[38, 4, 1, "", "commutative_diagrams"], [38, 4, 1, "", "name"], [38, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[38, 4, 1, "", "codomain"], [38, 4, 1, "", "components"], [38, 4, 1, "", "domain"], [38, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[38, 4, 1, "", "conclusions"], [38, 2, 1, "", "hom"], [38, 2, 1, "", "is_subdiagram"], [38, 4, 1, "", "objects"], [38, 4, 1, "", "premises"], [38, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[38, 4, 1, "", "codomain"], [38, 2, 1, "", "compose"], [38, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[38, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[38, 1, 1, "", "ArrowStringDescription"], [38, 1, 1, "", "DiagramGrid"], [38, 1, 1, "", "XypicDiagramDrawer"], [38, 3, 1, "", "preview_diagram"], [38, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[38, 4, 1, "", "height"], [38, 4, 1, "", "morphisms"], [38, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[38, 2, 1, "", "draw"]], "sympy.codegen": [[39, 0, 0, "-", "algorithms"], [39, 0, 0, "-", "approximations"], [39, 0, 0, "-", "ast"], [39, 0, 0, "-", "cfunctions"], [39, 0, 0, "-", "cnodes"], [39, 0, 0, "-", "cutils"], [39, 0, 0, "-", "cxxnodes"], [39, 0, 0, "-", "fnodes"], [39, 0, 0, "-", "futils"], [39, 0, 0, "-", "matrix_nodes"], [39, 0, 0, "-", "pyutils"], [39, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[39, 3, 1, "", "newtons_method"], [39, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[39, 1, 1, "", "SeriesApprox"], [39, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[39, 1, 1, "", "Assignment"], [39, 1, 1, "", "AssignmentBase"], [39, 1, 1, "", "Attribute"], [39, 1, 1, "", "AugmentedAssignment"], [39, 1, 1, "", "BreakToken"], [39, 1, 1, "", "CodeBlock"], [39, 1, 1, "", "Comment"], [39, 1, 1, "", "ComplexType"], [39, 1, 1, "", "ContinueToken"], [39, 1, 1, "", "Declaration"], [39, 1, 1, "", "Element"], [39, 1, 1, "", "FloatBaseType"], [39, 1, 1, "", "FloatType"], [39, 1, 1, "", "For"], [39, 1, 1, "", "FunctionCall"], [39, 1, 1, "", "FunctionDefinition"], [39, 1, 1, "", "FunctionPrototype"], [39, 1, 1, "", "IntBaseType"], [39, 1, 1, "", "Node"], [39, 1, 1, "", "NoneToken"], [39, 1, 1, "", "Pointer"], [39, 1, 1, "", "Print"], [39, 1, 1, "", "QuotedString"], [39, 1, 1, "", "Return"], [39, 1, 1, "", "Scope"], [39, 1, 1, "", "SignedIntType"], [39, 1, 1, "", "Stream"], [39, 1, 1, "", "String"], [39, 1, 1, "", "Token"], [39, 1, 1, "", "Type"], [39, 1, 1, "", "UnsignedIntType"], [39, 1, 1, "", "Variable"], [39, 1, 1, "", "While"], [39, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[39, 2, 1, "", "cse"], [39, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[39, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[39, 2, 1, "", "cast_nocheck"], [39, 4, 1, "", "decimal_dig"], [39, 4, 1, "", "dig"], [39, 4, 1, "", "eps"], [39, 4, 1, "", "max"], [39, 4, 1, "", "max_exponent"], [39, 4, 1, "", "min_exponent"], [39, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[39, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[39, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[39, 2, 1, "", "cast_check"], [39, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[39, 2, 1, "", "as_Declaration"], [39, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[39, 1, 1, "", "Cbrt"], [39, 1, 1, "", "Sqrt"], [39, 1, 1, "", "exp2"], [39, 1, 1, "", "expm1"], [39, 1, 1, "", "fma"], [39, 1, 1, "", "hypot"], [39, 1, 1, "", "log10"], [39, 1, 1, "", "log1p"], [39, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[39, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[39, 1, 1, "", "CommaOperator"], [39, 1, 1, "", "Label"], [39, 1, 1, "", "PostDecrement"], [39, 1, 1, "", "PostIncrement"], [39, 1, 1, "", "PreDecrement"], [39, 1, 1, "", "PreIncrement"], [39, 3, 1, "", "alignof"], [39, 1, 1, "", "goto"], [39, 3, 1, "", "sizeof"], [39, 1, 1, "", "struct"], [39, 1, 1, "", "union"]], "sympy.codegen.cutils": [[39, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[39, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[39, 1, 1, "", "ArrayConstructor"], [39, 1, 1, "", "Do"], [39, 1, 1, "", "Extent"], [39, 1, 1, "", "FortranReturn"], [39, 1, 1, "", "GoTo"], [39, 1, 1, "", "ImpliedDoLoop"], [39, 1, 1, "", "Module"], [39, 1, 1, "", "Program"], [39, 1, 1, "", "Subroutine"], [39, 1, 1, "", "SubroutineCall"], [39, 3, 1, "", "allocated"], [39, 3, 1, "", "array"], [39, 3, 1, "", "bind_C"], [39, 1, 1, "", "cmplx"], [39, 3, 1, "", "dimension"], [39, 1, 1, "", "dsign"], [39, 1, 1, "", "isign"], [39, 1, 1, "", "kind"], [39, 3, 1, "", "lbound"], [39, 1, 1, "", "literal_dp"], [39, 1, 1, "", "literal_sp"], [39, 1, 1, "", "merge"], [39, 3, 1, "", "reshape"], [39, 3, 1, "", "shape"], [39, 3, 1, "", "size"], [39, 1, 1, "", "use"], [39, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[39, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[39, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[39, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[39, 1, 1, "", "FuncMinusOneOptim"], [39, 1, 1, "", "Optimization"], [39, 1, 1, "", "ReplaceOptim"], [39, 3, 1, "", "create_expand_pow_optimization"], [39, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[39, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[49, 0, 0, "-", "generators"], [41, 0, 0, "-", "graycode"], [42, 0, 0, "-", "group_constructs"], [43, 0, 0, "-", "group_numbers"], [45, 0, 0, "-", "named_groups"], [46, 0, 0, "-", "partitions"], [48, 0, 0, "-", "perm_groups"], [49, 0, 0, "-", "permutations"], [50, 0, 0, "-", "polyhedron"], [51, 0, 0, "-", "prufer"], [52, 0, 0, "-", "subsets"], [53, 0, 0, "-", "tensor_can"], [54, 0, 0, "-", "testutil"], [55, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[49, 2, 1, "", "alternating"], [49, 2, 1, "", "cyclic"], [49, 2, 1, "", "dihedral"], [49, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[41, 1, 1, "", "GrayCode"], [41, 2, 1, "", "bin_to_gray"], [41, 2, 1, "", "get_subset_from_bitstring"], [41, 2, 1, "", "gray_to_bin"], [41, 2, 1, "", "graycode_subsets"], [41, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[41, 4, 1, "", "current"], [41, 2, 1, "", "generate_gray"], [41, 4, 1, "", "n"], [41, 2, 1, "", "next"], [41, 4, 1, "", "rank"], [41, 4, 1, "", "selections"], [41, 2, 1, "", "skip"], [41, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[42, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[43, 3, 1, "", "is_abelian_number"], [43, 3, 1, "", "is_cyclic_number"], [43, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[45, 3, 1, "", "AbelianGroup"], [45, 3, 1, "", "AlternatingGroup"], [45, 3, 1, "", "CyclicGroup"], [45, 3, 1, "", "DihedralGroup"], [45, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[46, 1, 1, "", "IntegerPartition"], [46, 1, 1, "", "Partition"], [46, 3, 1, "", "RGS_enum"], [46, 3, 1, "", "RGS_generalized"], [46, 3, 1, "", "RGS_rank"], [46, 3, 1, "", "RGS_unrank"], [46, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[46, 2, 1, "", "as_dict"], [46, 2, 1, "", "as_ferrers"], [46, 4, 1, "", "conjugate"], [46, 2, 1, "", "next_lex"], [46, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[46, 4, 1, "", "RGS"], [46, 2, 1, "", "from_rgs"], [46, 4, 1, "", "partition"], [46, 4, 1, "", "rank"], [46, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[48, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[48, 2, 1, "", "__contains__"], [48, 2, 1, "", "__mul__"], [48, 2, 1, "", "__new__"], [48, 5, 1, "", "__weakref__"], [48, 2, 1, "", "_coset_representative"], [48, 2, 1, "", "_distinct_primes_lemma"], [48, 4, 1, "", "_elements"], [48, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [48, 2, 1, "", "_eval_is_alt_sym_naive"], [48, 2, 1, "", "_p_elements_group"], [48, 2, 1, "", "_random_pr_init"], [48, 2, 1, "", "_sylow_alt_sym"], [48, 2, 1, "", "_union_find_merge"], [48, 2, 1, "", "_union_find_rep"], [48, 2, 1, "", "_verify"], [48, 2, 1, "", "abelian_invariants"], [48, 4, 1, "", "base"], [48, 2, 1, "", "baseswap"], [48, 4, 1, "", "basic_orbits"], [48, 4, 1, "", "basic_stabilizers"], [48, 4, 1, "", "basic_transversals"], [48, 2, 1, "", "center"], [48, 2, 1, "", "centralizer"], [48, 2, 1, "", "commutator"], [48, 2, 1, "", "composition_series"], [48, 2, 1, "", "conjugacy_class"], [48, 2, 1, "", "conjugacy_classes"], [48, 2, 1, "", "contains"], [48, 2, 1, "", "coset_factor"], [48, 2, 1, "", "coset_rank"], [48, 2, 1, "", "coset_table"], [48, 2, 1, "", "coset_transversal"], [48, 2, 1, "", "coset_unrank"], [48, 4, 1, "", "degree"], [48, 2, 1, "", "derived_series"], [48, 2, 1, "", "derived_subgroup"], [48, 4, 1, "", "elements"], [48, 2, 1, "", "equals"], [48, 2, 1, "", "generate"], [48, 2, 1, "", "generate_dimino"], [48, 2, 1, "", "generate_schreier_sims"], [48, 2, 1, "", "generator_product"], [48, 4, 1, "", "generators"], [48, 4, 1, "", "identity"], [48, 2, 1, "", "index"], [48, 4, 1, "", "is_abelian"], [48, 2, 1, "", "is_alt_sym"], [48, 4, 1, "", "is_alternating"], [48, 4, 1, "", "is_cyclic"], [48, 2, 1, "", "is_elementary"], [48, 4, 1, "", "is_nilpotent"], [48, 2, 1, "", "is_normal"], [48, 4, 1, "", "is_perfect"], [48, 4, 1, "", "is_polycyclic"], [48, 2, 1, "", "is_primitive"], [48, 4, 1, "", "is_solvable"], [48, 2, 1, "", "is_subgroup"], [48, 4, 1, "", "is_symmetric"], [48, 2, 1, "", "is_transitive"], [48, 4, 1, "", "is_trivial"], [48, 2, 1, "", "lower_central_series"], [48, 2, 1, "", "make_perm"], [48, 4, 1, "", "max_div"], [48, 2, 1, "", "minimal_block"], [48, 2, 1, "", "minimal_blocks"], [48, 2, 1, "", "normal_closure"], [48, 2, 1, "", "orbit"], [48, 2, 1, "", "orbit_rep"], [48, 2, 1, "", "orbit_transversal"], [48, 2, 1, "", "orbits"], [48, 2, 1, "", "order"], [48, 2, 1, "", "pointwise_stabilizer"], [48, 2, 1, "", "polycyclic_group"], [48, 2, 1, "", "presentation"], [48, 2, 1, "", "random"], [48, 2, 1, "", "random_pr"], [48, 2, 1, "", "random_stab"], [48, 2, 1, "", "schreier_sims"], [48, 2, 1, "", "schreier_sims_incremental"], [48, 2, 1, "", "schreier_sims_random"], [48, 2, 1, "", "schreier_vector"], [48, 2, 1, "", "stabilizer"], [48, 4, 1, "", "strong_gens"], [48, 2, 1, "", "strong_presentation"], [48, 2, 1, "", "subgroup"], [48, 2, 1, "", "subgroup_search"], [48, 2, 1, "", "sylow_subgroup"], [48, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[49, 1, 1, "", "Cycle"], [49, 1, 1, "", "Permutation"], [49, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[49, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[49, 2, 1, "", "apply"], [49, 4, 1, "", "array_form"], [49, 2, 1, "", "ascents"], [49, 2, 1, "", "atoms"], [49, 4, 1, "", "cardinality"], [49, 2, 1, "", "commutator"], [49, 2, 1, "", "commutes_with"], [49, 4, 1, "", "cycle_structure"], [49, 4, 1, "", "cycles"], [49, 4, 1, "", "cyclic_form"], [49, 2, 1, "", "descents"], [49, 2, 1, "", "from_inversion_vector"], [49, 2, 1, "", "from_sequence"], [49, 4, 1, "", "full_cyclic_form"], [49, 2, 1, "", "get_adjacency_distance"], [49, 2, 1, "", "get_adjacency_matrix"], [49, 2, 1, "", "get_positional_distance"], [49, 2, 1, "", "get_precedence_distance"], [49, 2, 1, "", "get_precedence_matrix"], [49, 2, 1, "", "index"], [49, 2, 1, "", "inversion_vector"], [49, 2, 1, "", "inversions"], [49, 4, 1, "", "is_Empty"], [49, 4, 1, "", "is_Identity"], [49, 4, 1, "", "is_Singleton"], [49, 4, 1, "", "is_even"], [49, 4, 1, "", "is_odd"], [49, 2, 1, "", "josephus"], [49, 2, 1, "", "length"], [49, 2, 1, "", "list"], [49, 2, 1, "", "max"], [49, 2, 1, "", "min"], [49, 2, 1, "", "mul_inv"], [49, 2, 1, "", "next_lex"], [49, 2, 1, "", "next_nonlex"], [49, 2, 1, "", "next_trotterjohnson"], [49, 2, 1, "", "order"], [49, 2, 1, "", "parity"], [49, 2, 1, "", "random"], [49, 2, 1, "", "rank"], [49, 2, 1, "", "rank_nonlex"], [49, 2, 1, "", "rank_trotterjohnson"], [49, 2, 1, "", "resize"], [49, 2, 1, "", "rmul"], [49, 2, 1, "", "rmul_with_af"], [49, 2, 1, "", "runs"], [49, 2, 1, "", "signature"], [49, 4, 1, "", "size"], [49, 2, 1, "", "support"], [49, 2, 1, "", "transpositions"], [49, 2, 1, "", "unrank_lex"], [49, 2, 1, "", "unrank_nonlex"], [49, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[50, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[50, 4, 1, "", "array_form"], [50, 4, 1, "", "corners"], [50, 4, 1, "", "cyclic_form"], [50, 4, 1, "", "edges"], [50, 4, 1, "", "faces"], [50, 4, 1, "", "pgroup"], [50, 2, 1, "", "reset"], [50, 2, 1, "", "rotate"], [50, 4, 1, "", "size"], [50, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[51, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[51, 2, 1, "", "edges"], [51, 2, 1, "", "next"], [51, 4, 1, "", "nodes"], [51, 2, 1, "", "prev"], [51, 2, 1, "", "prufer_rank"], [51, 4, 1, "", "prufer_repr"], [51, 4, 1, "", "rank"], [51, 4, 1, "", "size"], [51, 2, 1, "", "to_prufer"], [51, 2, 1, "", "to_tree"], [51, 4, 1, "", "tree_repr"], [51, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[52, 1, 1, "", "Subset"], [52, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[52, 2, 1, "", "bitlist_from_subset"], [52, 4, 1, "", "cardinality"], [52, 2, 1, "", "iterate_binary"], [52, 2, 1, "", "iterate_graycode"], [52, 2, 1, "", "next_binary"], [52, 2, 1, "", "next_gray"], [52, 2, 1, "", "next_lexicographic"], [52, 2, 1, "", "prev_binary"], [52, 2, 1, "", "prev_gray"], [52, 2, 1, "", "prev_lexicographic"], [52, 4, 1, "", "rank_binary"], [52, 4, 1, "", "rank_gray"], [52, 4, 1, "", "rank_lexicographic"], [52, 4, 1, "", "size"], [52, 4, 1, "", "subset"], [52, 2, 1, "", "subset_from_bitlist"], [52, 2, 1, "", "subset_indices"], [52, 4, 1, "", "superset"], [52, 4, 1, "", "superset_size"], [52, 2, 1, "", "unrank_binary"], [52, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[53, 3, 1, "", "bsgs_direct_product"], [53, 3, 1, "", "canonicalize"], [53, 3, 1, "", "double_coset_can_rep"], [53, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[54, 3, 1, "", "_cmp_perm_lists"], [54, 3, 1, "", "_naive_list_centralizer"], [54, 3, 1, "", "_verify_bsgs"], [54, 3, 1, "", "_verify_centralizer"], [54, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[55, 3, 1, "", "_base_ordering"], [55, 3, 1, "", "_check_cycles_alt_sym"], [55, 3, 1, "", "_distribute_gens_by_base"], [55, 3, 1, "", "_handle_precomputed_bsgs"], [55, 3, 1, "", "_orbits_transversals_from_bsgs"], [55, 3, 1, "", "_remove_gens"], [55, 3, 1, "", "_strip"], [55, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[56, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[56, 2, 1, "", "change_index"], [56, 4, 1, "", "has_empty_sequence"], [56, 2, 1, "", "index"], [56, 2, 1, "", "reorder"], [56, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[84, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[84, 4, 1, "", "bound_symbols"], [84, 4, 1, "", "free_symbols"], [84, 4, 1, "", "function"], [84, 4, 1, "", "has_finite_limits"], [84, 4, 1, "", "has_reversed_limits"], [84, 4, 1, "", "is_number"], [84, 4, 1, "", "limits"], [84, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[56, 3, 1, "", "gosper_normal"], [56, 3, 1, "", "gosper_sum"], [56, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[56, 1, 1, "", "Product"], [56, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[56, 2, 1, "", "is_convergent"], [56, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[56, 1, 1, "", "Sum"], [56, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[56, 2, 1, "", "euler_maclaurin"], [56, 2, 1, "", "eval_zeta_function"], [56, 2, 1, "", "is_absolutely_convergent"], [56, 2, 1, "", "is_convergent"], [56, 2, 1, "", "reverse_order"]], "sympy.core": [[57, 0, 0, "-", "add"], [57, 0, 0, "-", "assumptions"], [57, 0, 0, "-", "basic"], [57, 0, 0, "-", "cache"], [57, 0, 0, "-", "containers"], [57, 0, 0, "-", "evalf"], [57, 0, 0, "-", "expr"], [57, 0, 0, "-", "exprtools"], [57, 0, 0, "-", "function"], [57, 0, 0, "-", "kind"], [57, 0, 0, "-", "mod"], [57, 0, 0, "-", "mul"], [57, 0, 0, "-", "multidimensional"], [57, 0, 0, "-", "numbers"], [57, 0, 0, "-", "power"], [57, 0, 0, "-", "random"], [57, 0, 0, "-", "relational"], [57, 0, 0, "-", "singleton"], [57, 0, 0, "-", "symbol"], [57, 0, 0, "-", "sympify"], [57, 0, 0, "-", "traversal"]], "sympy.core.add": [[57, 1, 1, "", "Add"]], "sympy.core.add.Add": [[57, 2, 1, "", "as_coeff_Add"], [57, 2, 1, "", "as_coeff_add"], [57, 2, 1, "", "as_content_primitive"], [57, 2, 1, "", "as_numer_denom"], [57, 2, 1, "", "as_real_imag"], [57, 2, 1, "", "as_two_terms"], [57, 2, 1, "", "class_key"], [57, 2, 1, "", "extract_leading_order"], [57, 2, 1, "", "flatten"], [57, 2, 1, "", "primitive"]], "sympy.core.basic": [[57, 1, 1, "", "Atom"], [57, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[57, 4, 1, "", "args"], [57, 2, 1, "", "as_content_primitive"], [57, 2, 1, "", "as_dummy"], [57, 4, 1, "", "assumptions0"], [57, 2, 1, "", "atoms"], [57, 4, 1, "", "canonical_variables"], [57, 2, 1, "", "class_key"], [57, 2, 1, "", "compare"], [57, 2, 1, "", "count"], [57, 2, 1, "", "count_ops"], [57, 2, 1, "", "doit"], [57, 2, 1, "", "dummy_eq"], [57, 2, 1, "", "find"], [57, 4, 1, "", "free_symbols"], [57, 2, 1, "", "fromiter"], [57, 4, 1, "", "func"], [57, 2, 1, "", "has"], [57, 2, 1, "", "has_free"], [57, 2, 1, "", "has_xfree"], [57, 4, 1, "", "is_comparable"], [57, 2, 1, "", "match"], [57, 2, 1, "", "matches"], [57, 2, 1, "", "rcall"], [57, 2, 1, "", "refine"], [57, 2, 1, "", "replace"], [57, 2, 1, "", "rewrite"], [57, 2, 1, "", "simplify"], [57, 2, 1, "", "sort_key"], [57, 2, 1, "", "subs"], [57, 2, 1, "", "xreplace"]], "sympy.core.cache": [[57, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[57, 1, 1, "", "Dict"], [57, 1, 1, "", "Tuple"], [57, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[57, 2, 1, "", "get"], [57, 2, 1, "", "items"], [57, 2, 1, "", "keys"], [57, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[57, 2, 1, "", "index"], [57, 4, 1, "", "kind"], [57, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[57, 1, 1, "", "EvalfMixin"], [57, 3, 1, "", "N"], [57, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[57, 2, 1, "", "evalf"], [57, 2, 1, "", "n"]], "sympy.core.expr": [[57, 1, 1, "", "AtomicExpr"], [57, 1, 1, "", "Expr"], [57, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[57, 2, 1, "", "apart"], [57, 2, 1, "", "args_cnc"], [57, 2, 1, "", "as_coeff_Add"], [57, 2, 1, "", "as_coeff_Mul"], [57, 2, 1, "", "as_coeff_add"], [57, 2, 1, "", "as_coeff_exponent"], [57, 2, 1, "", "as_coeff_mul"], [57, 2, 1, "", "as_coefficient"], [57, 2, 1, "", "as_coefficients_dict"], [57, 2, 1, "", "as_content_primitive"], [57, 2, 1, "", "as_expr"], [57, 2, 1, "", "as_independent"], [57, 2, 1, "", "as_leading_term"], [57, 2, 1, "", "as_numer_denom"], [57, 2, 1, "", "as_ordered_factors"], [57, 2, 1, "", "as_ordered_terms"], [57, 2, 1, "", "as_poly"], [57, 2, 1, "", "as_powers_dict"], [57, 2, 1, "", "as_real_imag"], [57, 2, 1, "", "as_terms"], [57, 2, 1, "", "aseries"], [57, 2, 1, "", "cancel"], [57, 2, 1, "", "coeff"], [57, 2, 1, "", "collect"], [57, 2, 1, "", "combsimp"], [57, 2, 1, "", "compute_leading_term"], [57, 2, 1, "", "conjugate"], [57, 2, 1, "", "could_extract_minus_sign"], [57, 2, 1, "", "count_ops"], [57, 2, 1, "", "equals"], [57, 2, 1, "", "expand"], [57, 4, 1, "", "expr_free_symbols"], [57, 2, 1, "", "extract_additively"], [57, 2, 1, "", "extract_branch_factor"], [57, 2, 1, "", "extract_multiplicatively"], [57, 2, 1, "", "factor"], [57, 2, 1, "", "fourier_series"], [57, 2, 1, "", "fps"], [57, 2, 1, "", "gammasimp"], [57, 2, 1, "", "getO"], [57, 2, 1, "", "getn"], [57, 2, 1, "", "integrate"], [57, 2, 1, "", "invert"], [57, 2, 1, "", "is_algebraic_expr"], [57, 2, 1, "", "is_constant"], [57, 2, 1, "", "is_meromorphic"], [57, 4, 1, "", "is_number"], [57, 2, 1, "", "is_polynomial"], [57, 2, 1, "", "is_rational_function"], [57, 2, 1, "", "leadterm"], [57, 2, 1, "", "limit"], [57, 2, 1, "", "lseries"], [57, 2, 1, "", "normal"], [57, 2, 1, "", "nseries"], [57, 2, 1, "", "nsimplify"], [57, 2, 1, "", "powsimp"], [57, 2, 1, "", "primitive"], [57, 2, 1, "", "radsimp"], [57, 2, 1, "", "ratsimp"], [57, 2, 1, "", "removeO"], [57, 2, 1, "", "round"], [57, 2, 1, "", "separate"], [57, 2, 1, "", "series"], [57, 2, 1, "", "taylor_term"], [57, 2, 1, "", "together"], [57, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[57, 3, 1, "", "factor_terms"], [57, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[57, 1, 1, "", "Derivative"], [57, 1, 1, "", "Function"], [57, 1, 1, "", "FunctionClass"], [57, 1, 1, "", "Lambda"], [57, 1, 1, "", "PoleError"], [57, 1, 1, "", "Subs"], [57, 1, 1, "", "WildFunction"], [57, 3, 1, "", "count_ops"], [57, 3, 1, "", "diff"], [57, 3, 1, "", "expand"], [57, 3, 1, "", "expand_complex"], [57, 3, 1, "", "expand_func"], [57, 3, 1, "", "expand_log"], [57, 3, 1, "", "expand_mul"], [57, 3, 1, "", "expand_multinomial"], [57, 3, 1, "", "expand_power_base"], [57, 3, 1, "", "expand_power_exp"], [57, 3, 1, "", "expand_trig"], [57, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[57, 4, 1, "", "_diff_wrt"], [57, 2, 1, "", "_sort_variable_count"], [57, 2, 1, "", "as_finite_difference"], [57, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[57, 2, 1, "", "as_base_exp"], [57, 2, 1, "", "fdiff"], [57, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[57, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[57, 4, 1, "", "bound_symbols"], [57, 4, 1, "", "expr"], [57, 4, 1, "", "is_identity"], [57, 4, 1, "", "signature"], [57, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[57, 4, 1, "", "bound_symbols"], [57, 4, 1, "", "expr"], [57, 4, 1, "", "point"], [57, 4, 1, "", "variables"]], "sympy.core.kind": [[57, 5, 1, "", "BooleanKind"], [57, 1, 1, "", "Kind"], [57, 5, 1, "", "NumberKind"], [57, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[57, 1, 1, "", "Mod"]], "sympy.core.mul": [[57, 1, 1, "", "Mul"], [57, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[57, 2, 1, "", "as_coeff_Mul"], [57, 2, 1, "", "as_content_primitive"], [57, 2, 1, "", "as_ordered_factors"], [57, 2, 1, "", "as_two_terms"], [57, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[57, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[57, 1, 1, "", "AlgebraicNumber"], [57, 1, 1, "", "Catalan"], [57, 1, 1, "", "ComplexInfinity"], [57, 1, 1, "", "EulerGamma"], [57, 1, 1, "", "Exp1"], [57, 1, 1, "", "Float"], [57, 1, 1, "", "GoldenRatio"], [57, 1, 1, "", "Half"], [57, 1, 1, "", "ImaginaryUnit"], [57, 1, 1, "", "Infinity"], [57, 1, 1, "", "Integer"], [57, 1, 1, "", "NaN"], [57, 1, 1, "", "NegativeInfinity"], [57, 1, 1, "", "NegativeOne"], [57, 1, 1, "", "Number"], [57, 1, 1, "", "NumberSymbol"], [57, 1, 1, "", "One"], [57, 1, 1, "", "Pi"], [57, 1, 1, "", "Rational"], [57, 5, 1, "", "RealNumber"], [57, 1, 1, "", "TribonacciConstant"], [57, 1, 1, "", "Zero"], [57, 3, 1, "", "igcd"], [57, 3, 1, "", "ilcm"], [57, 3, 1, "", "mod_inverse"], [57, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[57, 2, 1, "", "__new__"], [57, 2, 1, "", "as_expr"], [57, 2, 1, "", "as_poly"], [57, 2, 1, "", "coeffs"], [57, 2, 1, "", "field_element"], [57, 4, 1, "", "is_aliased"], [57, 4, 1, "", "is_primitive_element"], [57, 2, 1, "", "minpoly_of_element"], [57, 2, 1, "", "native_coeffs"], [57, 2, 1, "", "primitive_element"], [57, 2, 1, "", "to_algebraic_integer"], [57, 2, 1, "", "to_primitive_element"], [57, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[57, 2, 1, "", "as_coeff_Add"], [57, 2, 1, "", "as_coeff_Mul"], [57, 2, 1, "", "cofactors"], [57, 2, 1, "", "gcd"], [57, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[57, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[57, 2, 1, "", "as_coeff_Add"], [57, 2, 1, "", "as_coeff_Mul"], [57, 2, 1, "", "as_content_primitive"], [57, 2, 1, "", "factors"], [57, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[57, 1, 1, "", "Pow"], [57, 3, 1, "", "integer_log"], [57, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[57, 2, 1, "", "as_base_exp"], [57, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[57, 3, 1, "", "_randint"], [57, 3, 1, "", "_randrange"], [57, 3, 1, "", "random_complex_number"], [57, 3, 1, "", "test_derivative_numerically"], [57, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[57, 5, 1, "", "Eq"], [57, 1, 1, "", "Equality"], [57, 5, 1, "", "Ge"], [57, 1, 1, "", "GreaterThan"], [57, 5, 1, "", "Gt"], [57, 5, 1, "", "Le"], [57, 1, 1, "", "LessThan"], [57, 5, 1, "", "Lt"], [57, 5, 1, "", "Ne"], [57, 5, 1, "", "Rel"], [57, 1, 1, "", "Relational"], [57, 1, 1, "", "StrictGreaterThan"], [57, 1, 1, "", "StrictLessThan"], [57, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[57, 2, 1, "", "as_poly"], [57, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[57, 4, 1, "", "canonical"], [57, 2, 1, "", "equals"], [57, 4, 1, "", "lhs"], [57, 4, 1, "", "negated"], [57, 4, 1, "", "reversed"], [57, 4, 1, "", "reversedsign"], [57, 4, 1, "", "rhs"], [57, 4, 1, "", "strict"], [57, 4, 1, "", "weak"]], "sympy.core.singleton": [[57, 1, 1, "", "Singleton"], [57, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[57, 3, 1, "", "default_sort_key"], [57, 3, 1, "", "ordered"]], "sympy.core.symbol": [[57, 1, 1, "", "Dummy"], [57, 1, 1, "", "Symbol"], [57, 1, 1, "", "Wild"], [57, 3, 1, "", "symbols"], [57, 3, 1, "", "var"]], "sympy.core.sympify": [[57, 3, 1, "", "sympify"]], "sympy.core.traversal": [[57, 3, 1, "", "bottom_up"], [57, 3, 1, "", "postorder_traversal"], [57, 3, 1, "", "preorder_traversal"], [57, 3, 1, "", "use"], [57, 3, 1, "", "walk"]], "sympy.crypto": [[58, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[58, 3, 1, "", "AZ"], [58, 3, 1, "", "bifid5_square"], [58, 3, 1, "", "bifid6_square"], [58, 3, 1, "", "check_and_join"], [58, 3, 1, "", "cycle_list"], [58, 3, 1, "", "decipher_affine"], [58, 3, 1, "", "decipher_atbash"], [58, 3, 1, "", "decipher_bifid"], [58, 3, 1, "", "decipher_bifid5"], [58, 3, 1, "", "decipher_bifid6"], [58, 3, 1, "", "decipher_elgamal"], [58, 3, 1, "", "decipher_gm"], [58, 3, 1, "", "decipher_hill"], [58, 3, 1, "", "decipher_kid_rsa"], [58, 3, 1, "", "decipher_railfence"], [58, 3, 1, "", "decipher_rot13"], [58, 3, 1, "", "decipher_rsa"], [58, 3, 1, "", "decipher_shift"], [58, 3, 1, "", "decipher_vigenere"], [58, 3, 1, "", "decode_morse"], [58, 3, 1, "", "dh_private_key"], [58, 3, 1, "", "dh_public_key"], [58, 3, 1, "", "dh_shared_key"], [58, 3, 1, "", "elgamal_private_key"], [58, 3, 1, "", "elgamal_public_key"], [58, 3, 1, "", "encipher_affine"], [58, 3, 1, "", "encipher_atbash"], [58, 3, 1, "", "encipher_bifid"], [58, 3, 1, "", "encipher_bifid5"], [58, 3, 1, "", "encipher_bifid6"], [58, 3, 1, "", "encipher_elgamal"], [58, 3, 1, "", "encipher_gm"], [58, 3, 1, "", "encipher_hill"], [58, 3, 1, "", "encipher_kid_rsa"], [58, 3, 1, "", "encipher_railfence"], [58, 3, 1, "", "encipher_rot13"], [58, 3, 1, "", "encipher_rsa"], [58, 3, 1, "", "encipher_shift"], [58, 3, 1, "", "encipher_substitution"], [58, 3, 1, "", "encipher_vigenere"], [58, 3, 1, "", "encode_morse"], [58, 3, 1, "", "gm_private_key"], [58, 3, 1, "", "gm_public_key"], [58, 3, 1, "", "kid_rsa_private_key"], [58, 3, 1, "", "kid_rsa_public_key"], [58, 3, 1, "", "lfsr_autocorrelation"], [58, 3, 1, "", "lfsr_connection_polynomial"], [58, 3, 1, "", "lfsr_sequence"], [58, 3, 1, "", "padded_key"], [58, 3, 1, "", "rsa_private_key"], [58, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[59, 1, 1, "", "BaseCovarDerivativeOp"], [59, 1, 1, "", "BaseScalarField"], [59, 1, 1, "", "BaseVectorField"], [59, 1, 1, "", "Commutator"], [59, 1, 1, "", "CoordSystem"], [59, 1, 1, "", "CoordinateSymbol"], [59, 1, 1, "", "CovarDerivativeOp"], [59, 1, 1, "", "Differential"], [59, 1, 1, "", "LieDerivative"], [59, 1, 1, "", "Manifold"], [59, 1, 1, "", "Patch"], [59, 1, 1, "", "Point"], [59, 1, 1, "", "TensorProduct"], [59, 1, 1, "", "WedgeProduct"], [59, 3, 1, "", "intcurve_diffequ"], [59, 3, 1, "", "intcurve_series"], [59, 3, 1, "", "metric_to_Christoffel_1st"], [59, 3, 1, "", "metric_to_Christoffel_2nd"], [59, 3, 1, "", "metric_to_Ricci_components"], [59, 3, 1, "", "metric_to_Riemann_components"], [59, 3, 1, "", "twoform_to_matrix"], [59, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[59, 2, 1, "", "base_oneform"], [59, 2, 1, "", "base_oneforms"], [59, 2, 1, "", "base_scalar"], [59, 2, 1, "", "base_scalars"], [59, 2, 1, "", "base_vector"], [59, 2, 1, "", "base_vectors"], [59, 2, 1, "", "coord_function"], [59, 2, 1, "", "coord_functions"], [59, 2, 1, "", "coord_tuple_transform_to"], [59, 2, 1, "", "jacobian"], [59, 2, 1, "", "jacobian_determinant"], [59, 2, 1, "", "jacobian_matrix"], [59, 2, 1, "", "point"], [59, 2, 1, "", "point_to_coords"], [59, 2, 1, "", "transform"], [59, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[59, 2, 1, "", "coords"]], "sympy.discrete": [[60, 0, 0, "-", "convolutions"], [60, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[60, 3, 1, "", "convolution"], [60, 3, 1, "", "convolution_fft"], [60, 3, 1, "", "convolution_fwht"], [60, 3, 1, "", "convolution_ntt"], [60, 3, 1, "", "convolution_subset"], [60, 3, 1, "", "covering_product"], [60, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[60, 3, 1, "", "fft"], [60, 3, 1, "", "fwht"], [60, 3, 1, "", "ifft"], [60, 3, 1, "", "ifwht"], [60, 3, 1, "", "intt"], [60, 3, 1, "", "inverse_mobius_transform"], [60, 3, 1, "", "mobius_transform"], [60, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[197, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[62, 1, 1, "", "FallingFactorial"], [62, 1, 1, "", "MultiFactorial"], [62, 1, 1, "", "RisingFactorial"], [62, 1, 1, "", "binomial"], [62, 1, 1, "", "factorial"], [62, 1, 1, "", "factorial2"], [62, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[62, 1, 1, "", "andre"], [62, 1, 1, "", "bell"], [62, 1, 1, "", "bernoulli"], [62, 1, 1, "", "catalan"], [62, 1, 1, "", "euler"], [62, 1, 1, "", "fibonacci"], [62, 1, 1, "", "genocchi"], [62, 1, 1, "", "harmonic"], [62, 1, 1, "", "lucas"], [62, 3, 1, "", "nC"], [62, 3, 1, "", "nP"], [62, 3, 1, "", "nT"], [62, 1, 1, "", "partition"], [62, 3, 1, "", "stirling"], [62, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[63, 1, 1, "", "Abs"], [63, 1, 1, "", "arg"], [63, 1, 1, "", "conjugate"], [63, 1, 1, "", "im"], [63, 1, 1, "", "periodic_argument"], [63, 1, 1, "", "polar_lift"], [63, 1, 1, "", "principal_branch"], [63, 1, 1, "", "re"], [63, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[63, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[63, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[63, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[63, 1, 1, "", "LambertW"], [63, 1, 1, "", "exp"], [63, 1, 1, "", "exp_polar"], [63, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[63, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[63, 2, 1, "", "as_real_imag"], [63, 4, 1, "", "base"], [63, 2, 1, "", "fdiff"], [63, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[63, 2, 1, "", "as_base_exp"], [63, 2, 1, "", "as_real_imag"], [63, 2, 1, "", "fdiff"], [63, 2, 1, "", "inverse"], [63, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[63, 1, 1, "", "HyperbolicFunction"], [63, 1, 1, "", "acosh"], [63, 1, 1, "", "acoth"], [63, 1, 1, "", "acsch"], [63, 1, 1, "", "asech"], [63, 1, 1, "", "asinh"], [63, 1, 1, "", "atanh"], [63, 1, 1, "", "cosh"], [63, 1, 1, "", "coth"], [63, 1, 1, "", "csch"], [63, 1, 1, "", "sech"], [63, 1, 1, "", "sinh"], [63, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[63, 2, 1, "", "fdiff"], [63, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[63, 2, 1, "", "as_real_imag"], [63, 2, 1, "", "fdiff"], [63, 2, 1, "", "inverse"], [63, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[63, 1, 1, "", "RoundFunction"], [63, 1, 1, "", "ceiling"], [63, 1, 1, "", "floor"], [63, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[63, 1, 1, "", "IdentityFunction"], [63, 1, 1, "", "Max"], [63, 1, 1, "", "Min"], [63, 3, 1, "", "cbrt"], [63, 3, 1, "", "real_root"], [63, 3, 1, "", "root"], [63, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[63, 1, 1, "", "ExprCondPair"], [63, 1, 1, "", "Piecewise"], [63, 3, 1, "", "piecewise_exclusive"], [63, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[63, 4, 1, "", "cond"], [63, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[63, 2, 1, "", "_eval_integral"], [63, 2, 1, "", "as_expr_set_pairs"], [63, 2, 1, "", "doit"], [63, 2, 1, "", "eval"], [63, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[63, 1, 1, "", "acos"], [63, 1, 1, "", "acot"], [63, 1, 1, "", "acsc"], [63, 1, 1, "", "asec"], [63, 1, 1, "", "asin"], [63, 1, 1, "", "atan"], [63, 1, 1, "", "atan2"], [63, 1, 1, "", "cos"], [63, 1, 1, "", "cot"], [63, 1, 1, "", "csc"], [63, 1, 1, "", "sec"], [63, 1, 1, "", "sin"], [63, 1, 1, "", "sinc"], [63, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[63, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[63, 2, 1, "", "inverse"]], "sympy.functions.special": [[65, 0, 0, "-", "bessel"], [65, 0, 0, "-", "beta_functions"], [65, 0, 0, "-", "elliptic_integrals"], [65, 0, 0, "-", "error_functions"], [65, 0, 0, "-", "gamma_functions"], [65, 0, 0, "-", "mathieu_functions"], [65, 0, 0, "-", "polynomials"], [65, 0, 0, "-", "singularity_functions"], [65, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[65, 1, 1, "", "AiryBase"], [65, 1, 1, "", "BesselBase"], [65, 1, 1, "", "airyai"], [65, 1, 1, "", "airyaiprime"], [65, 1, 1, "", "airybi"], [65, 1, 1, "", "airybiprime"], [65, 1, 1, "", "besseli"], [65, 1, 1, "", "besselj"], [65, 1, 1, "", "besselk"], [65, 1, 1, "", "bessely"], [65, 1, 1, "", "hankel1"], [65, 1, 1, "", "hankel2"], [65, 1, 1, "", "jn"], [65, 3, 1, "", "jn_zeros"], [65, 1, 1, "", "marcumq"], [65, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[65, 4, 1, "", "argument"], [65, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[65, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[65, 3, 1, "", "bspline_basis"], [65, 3, 1, "", "bspline_basis_set"], [65, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[65, 1, 1, "", "DiracDelta"], [65, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[65, 2, 1, "", "eval"], [65, 2, 1, "", "fdiff"], [65, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[65, 2, 1, "", "eval"], [65, 2, 1, "", "fdiff"], [65, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[65, 1, 1, "", "elliptic_e"], [65, 1, 1, "", "elliptic_f"], [65, 1, 1, "", "elliptic_k"], [65, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[65, 1, 1, "", "Chi"], [65, 1, 1, "", "Ci"], [65, 3, 1, "", "E1"], [65, 1, 1, "", "Ei"], [65, 1, 1, "", "FresnelIntegral"], [65, 1, 1, "", "Li"], [65, 1, 1, "", "Shi"], [65, 1, 1, "", "Si"], [65, 1, 1, "", "erf"], [65, 1, 1, "", "erf2"], [65, 1, 1, "", "erf2inv"], [65, 1, 1, "", "erfc"], [65, 1, 1, "", "erfcinv"], [65, 1, 1, "", "erfi"], [65, 1, 1, "", "erfinv"], [65, 1, 1, "", "expint"], [65, 1, 1, "", "fresnelc"], [65, 1, 1, "", "fresnels"], [65, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[65, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[65, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[65, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[65, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[65, 1, 1, "", "digamma"], [65, 1, 1, "", "gamma"], [65, 1, 1, "", "loggamma"], [65, 1, 1, "", "lowergamma"], [65, 1, 1, "", "multigamma"], [65, 1, 1, "", "polygamma"], [65, 1, 1, "", "trigamma"], [65, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[65, 1, 1, "", "appellf1"], [65, 1, 1, "", "hyper"], [65, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[65, 4, 1, "", "ap"], [65, 4, 1, "", "argument"], [65, 4, 1, "", "bq"], [65, 4, 1, "", "convergence_statement"], [65, 4, 1, "", "eta"], [65, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[65, 4, 1, "", "an"], [65, 4, 1, "", "aother"], [65, 4, 1, "", "ap"], [65, 4, 1, "", "argument"], [65, 4, 1, "", "bm"], [65, 4, 1, "", "bother"], [65, 4, 1, "", "bq"], [65, 4, 1, "", "delta"], [65, 2, 1, "", "get_period"], [65, 2, 1, "", "integrand"], [65, 4, 1, "", "is_number"], [65, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[65, 1, 1, "", "MathieuBase"], [65, 1, 1, "", "mathieuc"], [65, 1, 1, "", "mathieucprime"], [65, 1, 1, "", "mathieus"], [65, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[65, 1, 1, "", "assoc_laguerre"], [65, 1, 1, "", "assoc_legendre"], [65, 1, 1, "", "chebyshevt"], [65, 1, 1, "", "chebyshevt_root"], [65, 1, 1, "", "chebyshevu"], [65, 1, 1, "", "chebyshevu_root"], [65, 1, 1, "", "gegenbauer"], [65, 1, 1, "", "hermite"], [65, 1, 1, "", "hermite_prob"], [65, 1, 1, "", "jacobi"], [65, 3, 1, "", "jacobi_normalized"], [65, 1, 1, "", "laguerre"], [65, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[65, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[65, 2, 1, "", "eval"], [65, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[65, 1, 1, "", "Ynm"], [65, 3, 1, "", "Ynm_c"], [65, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[65, 3, 1, "", "Eijk"], [65, 1, 1, "", "KroneckerDelta"], [65, 1, 1, "", "LeviCivita"], [65, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[65, 2, 1, "", "eval"], [65, 4, 1, "", "indices_contain_equal_information"], [65, 4, 1, "", "is_above_fermi"], [65, 4, 1, "", "is_below_fermi"], [65, 4, 1, "", "is_only_above_fermi"], [65, 4, 1, "", "is_only_below_fermi"], [65, 4, 1, "", "killable_index"], [65, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[65, 1, 1, "", "dirichlet_eta"], [65, 1, 1, "", "lerchphi"], [65, 1, 1, "", "polylog"], [65, 1, 1, "", "stieltjes"], [65, 1, 1, "", "zeta"]], "sympy.geometry": [[66, 0, 0, "-", "curve"], [67, 0, 0, "-", "ellipse"], [68, 0, 0, "-", "entity"], [70, 0, 0, "-", "line"], [71, 0, 0, "-", "plane"], [72, 0, 0, "-", "point"], [73, 0, 0, "-", "polygon"], [74, 0, 0, "-", "util"]], "sympy.geometry.curve": [[66, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[66, 4, 1, "", "ambient_dimension"], [66, 2, 1, "", "arbitrary_point"], [66, 4, 1, "", "free_symbols"], [66, 4, 1, "", "functions"], [66, 4, 1, "", "length"], [66, 4, 1, "", "limits"], [66, 4, 1, "", "parameter"], [66, 2, 1, "", "plot_interval"], [66, 2, 1, "", "rotate"], [66, 2, 1, "", "scale"], [66, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[67, 1, 1, "", "Circle"], [67, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[67, 4, 1, "", "circumference"], [67, 2, 1, "", "equation"], [67, 2, 1, "", "intersection"], [67, 4, 1, "", "radius"], [67, 2, 1, "", "reflect"], [67, 2, 1, "", "scale"], [67, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[67, 4, 1, "", "apoapsis"], [67, 2, 1, "", "arbitrary_point"], [67, 4, 1, "", "area"], [67, 2, 1, "", "auxiliary_circle"], [67, 4, 1, "", "bounds"], [67, 4, 1, "", "center"], [67, 4, 1, "", "circumference"], [67, 2, 1, "", "director_circle"], [67, 4, 1, "", "eccentricity"], [67, 2, 1, "", "encloses_point"], [67, 2, 1, "", "equation"], [67, 2, 1, "", "evolute"], [67, 4, 1, "", "foci"], [67, 4, 1, "", "focus_distance"], [67, 4, 1, "", "hradius"], [67, 2, 1, "", "intersection"], [67, 2, 1, "", "is_tangent"], [67, 4, 1, "", "major"], [67, 4, 1, "", "minor"], [67, 2, 1, "", "normal_lines"], [67, 4, 1, "", "periapsis"], [67, 2, 1, "", "plot_interval"], [67, 2, 1, "", "polar_second_moment_of_area"], [67, 2, 1, "", "random_point"], [67, 2, 1, "", "reflect"], [67, 2, 1, "", "rotate"], [67, 2, 1, "", "scale"], [67, 2, 1, "", "second_moment_of_area"], [67, 2, 1, "", "section_modulus"], [67, 4, 1, "", "semilatus_rectum"], [67, 2, 1, "", "tangent_lines"], [67, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[68, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[68, 4, 1, "", "ambient_dimension"], [68, 4, 1, "", "bounds"], [68, 2, 1, "", "encloses"], [68, 2, 1, "", "intersection"], [68, 2, 1, "", "is_similar"], [68, 2, 1, "", "parameter_value"], [68, 2, 1, "", "reflect"], [68, 2, 1, "", "rotate"], [68, 2, 1, "", "scale"], [68, 2, 1, "", "translate"]], "sympy.geometry.line": [[70, 1, 1, "", "Line"], [70, 1, 1, "", "Line2D"], [70, 1, 1, "", "Line3D"], [70, 1, 1, "", "LinearEntity"], [70, 1, 1, "", "LinearEntity2D"], [70, 1, 1, "", "LinearEntity3D"], [70, 1, 1, "", "Ray"], [70, 1, 1, "", "Ray2D"], [70, 1, 1, "", "Ray3D"], [70, 1, 1, "", "Segment"], [70, 1, 1, "", "Segment2D"], [70, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[70, 2, 1, "", "contains"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "equals"], [70, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[70, 4, 1, "", "coefficients"], [70, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[70, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[70, 4, 1, "", "ambient_dimension"], [70, 2, 1, "", "angle_between"], [70, 2, 1, "", "arbitrary_point"], [70, 2, 1, "", "are_concurrent"], [70, 2, 1, "", "bisectors"], [70, 2, 1, "", "contains"], [70, 4, 1, "", "direction"], [70, 2, 1, "", "intersection"], [70, 2, 1, "", "is_parallel"], [70, 2, 1, "", "is_perpendicular"], [70, 2, 1, "", "is_similar"], [70, 4, 1, "", "length"], [70, 4, 1, "", "p1"], [70, 4, 1, "", "p2"], [70, 2, 1, "", "parallel_line"], [70, 2, 1, "", "perpendicular_line"], [70, 2, 1, "", "perpendicular_segment"], [70, 4, 1, "", "points"], [70, 2, 1, "", "projection"], [70, 2, 1, "", "random_point"], [70, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[70, 4, 1, "", "bounds"], [70, 2, 1, "", "perpendicular_line"], [70, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[70, 4, 1, "", "direction_cosine"], [70, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[70, 2, 1, "", "contains"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "equals"], [70, 2, 1, "", "plot_interval"], [70, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[70, 2, 1, "", "closing_angle"], [70, 4, 1, "", "xdirection"], [70, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[70, 4, 1, "", "xdirection"], [70, 4, 1, "", "ydirection"], [70, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[70, 2, 1, "", "contains"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "equals"], [70, 4, 1, "", "length"], [70, 4, 1, "", "midpoint"], [70, 2, 1, "", "perpendicular_bisector"], [70, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[71, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[71, 2, 1, "", "angle_between"], [71, 2, 1, "", "arbitrary_point"], [71, 2, 1, "", "are_concurrent"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "equals"], [71, 2, 1, "", "equation"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "is_coplanar"], [71, 2, 1, "", "is_parallel"], [71, 2, 1, "", "is_perpendicular"], [71, 4, 1, "", "normal_vector"], [71, 4, 1, "", "p1"], [71, 2, 1, "", "parallel_plane"], [71, 2, 1, "", "parameter_value"], [71, 2, 1, "", "perpendicular_line"], [71, 2, 1, "", "perpendicular_plane"], [71, 2, 1, "", "projection"], [71, 2, 1, "", "projection_line"], [71, 2, 1, "", "random_point"]], "sympy.geometry.point": [[72, 1, 1, "", "Point"], [72, 1, 1, "", "Point2D"], [72, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[72, 2, 1, "", "affine_rank"], [72, 4, 1, "", "ambient_dimension"], [72, 2, 1, "", "are_coplanar"], [72, 2, 1, "", "canberra_distance"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "dot"], [72, 2, 1, "", "equals"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "is_collinear"], [72, 2, 1, "", "is_concyclic"], [72, 4, 1, "", "is_nonzero"], [72, 2, 1, "", "is_scalar_multiple"], [72, 4, 1, "", "is_zero"], [72, 4, 1, "", "length"], [72, 2, 1, "", "midpoint"], [72, 4, 1, "", "origin"], [72, 4, 1, "", "orthogonal_direction"], [72, 2, 1, "", "project"], [72, 2, 1, "", "taxicab_distance"], [72, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[72, 4, 1, "", "bounds"], [72, 4, 1, "", "coordinates"], [72, 2, 1, "", "rotate"], [72, 2, 1, "", "scale"], [72, 2, 1, "", "transform"], [72, 2, 1, "", "translate"], [72, 4, 1, "", "x"], [72, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[72, 2, 1, "", "are_collinear"], [72, 4, 1, "", "coordinates"], [72, 2, 1, "", "direction_cosine"], [72, 2, 1, "", "direction_ratio"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "scale"], [72, 2, 1, "", "transform"], [72, 2, 1, "", "translate"], [72, 4, 1, "", "x"], [72, 4, 1, "", "y"], [72, 4, 1, "", "z"]], "sympy.geometry.polygon": [[73, 1, 1, "", "Polygon"], [73, 1, 1, "", "RegularPolygon"], [73, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[73, 4, 1, "", "angles"], [73, 2, 1, "", "arbitrary_point"], [73, 4, 1, "", "area"], [73, 2, 1, "", "bisectors"], [73, 4, 1, "", "bounds"], [73, 4, 1, "", "centroid"], [73, 2, 1, "", "cut_section"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "encloses_point"], [73, 2, 1, "", "first_moment_of_area"], [73, 2, 1, "", "intersection"], [73, 2, 1, "", "is_convex"], [73, 4, 1, "", "perimeter"], [73, 2, 1, "", "plot_interval"], [73, 2, 1, "", "polar_second_moment_of_area"], [73, 2, 1, "", "second_moment_of_area"], [73, 2, 1, "", "section_modulus"], [73, 4, 1, "", "sides"], [73, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[73, 4, 1, "", "angles"], [73, 4, 1, "", "apothem"], [73, 4, 1, "", "area"], [73, 4, 1, "", "args"], [73, 4, 1, "", "center"], [73, 4, 1, "", "centroid"], [73, 4, 1, "", "circumcenter"], [73, 4, 1, "", "circumcircle"], [73, 4, 1, "", "circumradius"], [73, 2, 1, "", "encloses_point"], [73, 4, 1, "", "exterior_angle"], [73, 4, 1, "", "incircle"], [73, 4, 1, "", "inradius"], [73, 4, 1, "", "interior_angle"], [73, 4, 1, "", "length"], [73, 4, 1, "", "radius"], [73, 2, 1, "", "reflect"], [73, 2, 1, "", "rotate"], [73, 4, 1, "", "rotation"], [73, 2, 1, "", "scale"], [73, 2, 1, "", "spin"], [73, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[73, 4, 1, "", "altitudes"], [73, 2, 1, "", "bisectors"], [73, 4, 1, "", "circumcenter"], [73, 4, 1, "", "circumcircle"], [73, 4, 1, "", "circumradius"], [73, 4, 1, "", "eulerline"], [73, 4, 1, "", "excenters"], [73, 4, 1, "", "exradii"], [73, 4, 1, "", "incenter"], [73, 4, 1, "", "incircle"], [73, 4, 1, "", "inradius"], [73, 2, 1, "", "is_equilateral"], [73, 2, 1, "", "is_isosceles"], [73, 2, 1, "", "is_right"], [73, 2, 1, "", "is_scalene"], [73, 2, 1, "", "is_similar"], [73, 4, 1, "", "medial"], [73, 4, 1, "", "medians"], [73, 4, 1, "", "nine_point_circle"], [73, 4, 1, "", "orthocenter"], [73, 4, 1, "", "vertices"]], "sympy.geometry.util": [[74, 3, 1, "", "are_similar"], [74, 3, 1, "", "centroid"], [74, 3, 1, "", "convex_hull"], [74, 3, 1, "", "idiff"], [74, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[80, 1, 1, "", "DifferentialOperator"], [80, 1, 1, "", "DifferentialOperatorAlgebra"], [80, 3, 1, "", "DifferentialOperators"], [80, 1, 1, "", "HolonomicFunction"], [78, 3, 1, "", "_convert_poly_rat_alg"], [78, 3, 1, "", "_create_table"], [76, 3, 1, "", "expr_to_holonomic"], [76, 3, 1, "", "from_hyper"], [76, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[80, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[79, 2, 1, "", "composition"], [79, 2, 1, "", "diff"], [79, 2, 1, "", "evalf"], [79, 2, 1, "", "integrate"], [79, 2, 1, "", "series"], [79, 2, 1, "", "to_expr"], [79, 2, 1, "", "to_hyper"], [79, 2, 1, "", "to_meijerg"], [79, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[84, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[84, 3, 1, "", "components"], [84, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[84, 1, 1, "", "Integral"], [84, 3, 1, "", "integrate"], [84, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[84, 2, 1, "", "as_sum"], [84, 2, 1, "", "doit"], [84, 4, 1, "", "free_symbols"], [84, 6, 1, "", "is_commutative"], [84, 2, 1, "", "principal_value"], [84, 2, 1, "", "transform"]], "sympy.integrals": [[84, 0, 0, "-", "intpoly"], [82, 0, 0, "-", "meijerint"], [82, 0, 0, "-", "meijerint_doc"], [84, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[84, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[84, 3, 1, "", "integral_steps"], [84, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[82, 7, 1, "", "_CoeffExpValueError"], [82, 3, 1, "", "_check_antecedents"], [82, 3, 1, "", "_check_antecedents_1"], [82, 3, 1, "", "_check_antecedents_inversion"], [82, 3, 1, "", "_condsimp"], [82, 3, 1, "", "_create_lookup_table"], [82, 3, 1, "", "_dummy"], [82, 3, 1, "", "_dummy_"], [82, 3, 1, "", "_eval_cond"], [82, 3, 1, "", "_exponents"], [82, 3, 1, "", "_find_splitting_points"], [82, 3, 1, "", "_flip_g"], [82, 3, 1, "", "_functions"], [82, 3, 1, "", "_get_coeff_exp"], [82, 3, 1, "", "_guess_expansion"], [82, 3, 1, "", "_inflate_fox_h"], [82, 3, 1, "", "_inflate_g"], [82, 3, 1, "", "_int0oo"], [82, 3, 1, "", "_int0oo_1"], [82, 3, 1, "", "_int_inversion"], [82, 3, 1, "", "_is_analytic"], [82, 3, 1, "", "_meijerint_definite_2"], [82, 3, 1, "", "_meijerint_definite_3"], [82, 3, 1, "", "_meijerint_definite_4"], [82, 3, 1, "", "_meijerint_indefinite_1"], [82, 3, 1, "", "_mul_args"], [82, 3, 1, "", "_mul_as_two_parts"], [82, 3, 1, "", "_my_principal_branch"], [82, 3, 1, "", "_mytype"], [82, 3, 1, "", "_rewrite1"], [82, 3, 1, "", "_rewrite2"], [82, 3, 1, "", "_rewrite_inversion"], [82, 3, 1, "", "_rewrite_saxena"], [82, 3, 1, "", "_rewrite_saxena_1"], [82, 3, 1, "", "_rewrite_single"], [82, 3, 1, "", "_split_mul"], [82, 3, 1, "", "meijerint_definite"], [82, 3, 1, "", "meijerint_indefinite"], [82, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[84, 3, 1, "", "gauss_chebyshev_t"], [84, 3, 1, "", "gauss_chebyshev_u"], [84, 3, 1, "", "gauss_gen_laguerre"], [84, 3, 1, "", "gauss_hermite"], [84, 3, 1, "", "gauss_jacobi"], [84, 3, 1, "", "gauss_laguerre"], [84, 3, 1, "", "gauss_legendre"], [84, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[84, 3, 1, "", "ratint"], [84, 3, 1, "", "ratint_logpart"], [84, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[84, 1, 1, "", "NonElementaryIntegral"], [84, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[84, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[84, 1, 1, "", "CosineTransform"], [84, 1, 1, "", "FourierTransform"], [84, 1, 1, "", "HankelTransform"], [84, 1, 1, "", "IntegralTransform"], [84, 7, 1, "", "IntegralTransformError"], [84, 1, 1, "", "InverseCosineTransform"], [84, 1, 1, "", "InverseFourierTransform"], [84, 1, 1, "", "InverseHankelTransform"], [84, 1, 1, "", "InverseLaplaceTransform"], [84, 1, 1, "", "InverseMellinTransform"], [84, 1, 1, "", "InverseSineTransform"], [84, 1, 1, "", "LaplaceTransform"], [84, 1, 1, "", "MellinTransform"], [84, 1, 1, "", "SineTransform"], [84, 3, 1, "", "_fast_inverse_laplace"], [84, 3, 1, "", "_fourier_transform"], [84, 3, 1, "", "cosine_transform"], [84, 3, 1, "", "fourier_transform"], [84, 3, 1, "", "hankel_transform"], [84, 3, 1, "", "inverse_cosine_transform"], [84, 3, 1, "", "inverse_fourier_transform"], [84, 3, 1, "", "inverse_hankel_transform"], [84, 3, 1, "", "inverse_laplace_transform"], [84, 3, 1, "", "inverse_mellin_transform"], [84, 3, 1, "", "inverse_sine_transform"], [84, 3, 1, "", "laplace_transform"], [84, 3, 1, "", "mellin_transform"], [84, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[84, 2, 1, "", "doit"], [84, 4, 1, "", "function"], [84, 4, 1, "", "function_variable"], [84, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[84, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[85, 0, 0, "-", "printing"], [85, 0, 0, "-", "session"]], "sympy.interactive.printing": [[85, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[85, 3, 1, "", "enable_automatic_int_sympification"], [85, 3, 1, "", "enable_automatic_symbols"], [85, 3, 1, "", "init_ipython_session"], [85, 3, 1, "", "init_python_session"], [85, 3, 1, "", "init_session"], [85, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[86, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[86, 1, 1, "", "CartanType_generator"], [86, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[86, 2, 1, "", "rank"], [86, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[86, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[86, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[86, 2, 1, "", "add_as_roots"], [86, 2, 1, "", "add_simple_roots"], [86, 2, 1, "", "all_roots"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dynkin_diagram"], [86, 2, 1, "", "root_space"], [86, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[86, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[86, 2, 1, "", "basic_root"], [86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "highest_root"], [86, 2, 1, "", "lie_algebra"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[86, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[86, 2, 1, "", "basic_root"], [86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "lie_algebra"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[86, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[86, 2, 1, "", "basic_root"], [86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "lie_algebra"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[86, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[86, 2, 1, "", "basic_root"], [86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "lie_algebra"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[86, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[86, 2, 1, "", "basic_root"], [86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[86, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[86, 2, 1, "", "basic_root"], [86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[86, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[86, 2, 1, "", "basis"], [86, 2, 1, "", "cartan_matrix"], [86, 2, 1, "", "dimension"], [86, 2, 1, "", "positive_roots"], [86, 2, 1, "", "roots"], [86, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[86, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[86, 2, 1, "", "coxeter_diagram"], [86, 2, 1, "", "delete_doubles"], [86, 2, 1, "", "element_order"], [86, 2, 1, "", "generators"], [86, 2, 1, "", "group_name"], [86, 2, 1, "", "group_order"], [86, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[87, 3, 1, "", "ANFform"], [87, 1, 1, "", "And"], [87, 1, 1, "", "Boolean"], [87, 1, 1, "", "BooleanFalse"], [87, 1, 1, "", "BooleanTrue"], [87, 1, 1, "", "Equivalent"], [87, 1, 1, "", "Exclusive"], [87, 1, 1, "", "ITE"], [87, 1, 1, "", "Implies"], [87, 1, 1, "", "Nand"], [87, 1, 1, "", "Nor"], [87, 1, 1, "", "Not"], [87, 1, 1, "", "Or"], [87, 3, 1, "", "POSform"], [87, 3, 1, "", "SOPform"], [87, 1, 1, "", "Xnor"], [87, 1, 1, "", "Xor"], [87, 3, 1, "", "anf_coeffs"], [87, 3, 1, "", "bool_map"], [87, 3, 1, "", "bool_maxterm"], [87, 3, 1, "", "bool_minterm"], [87, 3, 1, "", "bool_monomial"], [87, 3, 1, "", "distribute_and_over_or"], [87, 3, 1, "", "distribute_or_over_and"], [87, 3, 1, "", "distribute_xor_over_and"], [87, 3, 1, "", "eliminate_implications"], [87, 3, 1, "", "gateinputcount"], [87, 3, 1, "", "integer_to_term"], [87, 3, 1, "", "is_anf"], [87, 3, 1, "", "is_cnf"], [87, 3, 1, "", "is_dnf"], [87, 3, 1, "", "is_nnf"], [87, 3, 1, "", "simplify_logic"], [87, 3, 1, "", "term_to_integer"], [87, 3, 1, "", "to_anf"], [87, 3, 1, "", "to_cnf"], [87, 3, 1, "", "to_dnf"], [87, 3, 1, "", "to_int_repr"], [87, 3, 1, "", "to_nnf"], [87, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[87, 2, 1, "", "as_set"], [87, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[87, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[87, 2, 1, "", "as_set"]], "sympy.logic": [[87, 0, 0, "-", "inference"]], "sympy.logic.inference": [[87, 3, 1, "", "satisfiable"]], "sympy.matrices": [[88, 0, 0, "-", "common"], [90, 0, 0, "-", "expressions"], [91, 0, 0, "-", "immutable"], [93, 0, 0, "-", "matrices"], [95, 0, 0, "-", "sparse"], [96, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[88, 1, 1, "", "MatrixCommon"], [88, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[88, 4, 1, "", "C"], [88, 4, 1, "", "H"], [88, 4, 1, "", "T"], [88, 2, 1, "", "__abs__"], [88, 2, 1, "", "__add__"], [88, 2, 1, "", "__getitem__"], [88, 2, 1, "", "__len__"], [88, 2, 1, "", "__mul__"], [88, 2, 1, "", "__pow__"], [88, 5, 1, "", "__weakref__"], [88, 2, 1, "", "adjoint"], [88, 2, 1, "", "applyfunc"], [88, 2, 1, "", "as_real_imag"], [88, 2, 1, "", "atoms"], [88, 2, 1, "", "col"], [88, 2, 1, "", "col_del"], [88, 2, 1, "", "col_insert"], [88, 2, 1, "", "col_join"], [88, 2, 1, "", "companion"], [88, 2, 1, "", "conjugate"], [88, 2, 1, "", "diag"], [88, 2, 1, "", "diagonal"], [88, 2, 1, "", "evalf"], [88, 2, 1, "", "expand"], [88, 2, 1, "", "extract"], [88, 2, 1, "", "eye"], [88, 4, 1, "", "free_symbols"], [88, 2, 1, "", "get_diag_blocks"], [88, 2, 1, "", "has"], [88, 2, 1, "", "hstack"], [88, 2, 1, "", "is_anti_symmetric"], [88, 2, 1, "", "is_diagonal"], [88, 4, 1, "", "is_hermitian"], [88, 4, 1, "", "is_lower"], [88, 4, 1, "", "is_lower_hessenberg"], [88, 4, 1, "", "is_square"], [88, 4, 1, "", "is_strongly_diagonally_dominant"], [88, 2, 1, "", "is_symbolic"], [88, 2, 1, "", "is_symmetric"], [88, 4, 1, "", "is_upper"], [88, 4, 1, "", "is_upper_hessenberg"], [88, 4, 1, "", "is_weakly_diagonally_dominant"], [88, 4, 1, "", "is_zero_matrix"], [88, 2, 1, "", "jordan_block"], [88, 2, 1, "", "lower_triangular"], [88, 2, 1, "", "multiply"], [88, 2, 1, "", "multiply_elementwise"], [88, 2, 1, "", "n"], [88, 2, 1, "", "ones"], [88, 2, 1, "", "permute"], [88, 2, 1, "", "permute_cols"], [88, 2, 1, "", "permute_rows"], [88, 2, 1, "", "pow"], [88, 2, 1, "", "refine"], [88, 2, 1, "", "replace"], [88, 2, 1, "", "reshape"], [88, 2, 1, "", "rmultiply"], [88, 2, 1, "", "rot90"], [88, 2, 1, "", "row"], [88, 2, 1, "", "row_del"], [88, 2, 1, "", "row_insert"], [88, 2, 1, "", "row_join"], [88, 4, 1, "", "shape"], [88, 2, 1, "", "simplify"], [88, 2, 1, "", "subs"], [88, 2, 1, "", "todod"], [88, 2, 1, "", "todok"], [88, 2, 1, "", "tolist"], [88, 2, 1, "", "trace"], [88, 2, 1, "", "transpose"], [88, 2, 1, "", "upper_triangular"], [88, 2, 1, "", "values"], [88, 2, 1, "", "vec"], [88, 2, 1, "", "vech"], [88, 2, 1, "", "vstack"], [88, 2, 1, "", "wilkinson"], [88, 2, 1, "", "xreplace"], [88, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[89, 1, 1, "", "DenseMatrix"], [93, 3, 1, "", "GramSchmidt"], [89, 5, 1, "", "Matrix"], [89, 1, 1, "", "MutableDenseMatrix"], [93, 3, 1, "", "casoratian"], [93, 3, 1, "", "diag"], [93, 3, 1, "", "eye"], [93, 3, 1, "", "hessian"], [93, 3, 1, "", "jordan_cell"], [93, 3, 1, "", "list2numpy"], [93, 3, 1, "", "matrix2numpy"], [93, 3, 1, "", "matrix_multiply_elementwise"], [93, 3, 1, "", "ones"], [93, 3, 1, "", "randMatrix"], [93, 3, 1, "", "rot_axis1"], [93, 3, 1, "", "rot_axis2"], [93, 3, 1, "", "rot_axis3"], [93, 3, 1, "", "symarray"], [93, 3, 1, "", "wronskian"], [93, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[89, 2, 1, "", "LDLdecomposition"], [89, 2, 1, "", "as_immutable"], [89, 2, 1, "", "as_mutable"], [89, 2, 1, "", "cholesky"], [89, 2, 1, "", "lower_triangular_solve"], [89, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[89, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[90, 1, 1, "", "CompanionMatrix"], [90, 1, 1, "", "FunctionMatrix"], [90, 1, 1, "", "HadamardPower"], [90, 1, 1, "", "HadamardProduct"], [90, 1, 1, "", "Identity"], [90, 1, 1, "", "Inverse"], [90, 1, 1, "", "MatAdd"], [90, 1, 1, "", "MatMul"], [90, 1, 1, "", "MatPow"], [90, 1, 1, "", "MatrixExpr"], [90, 1, 1, "", "MatrixPermute"], [90, 1, 1, "", "MatrixSet"], [90, 1, 1, "", "MatrixSymbol"], [90, 1, 1, "", "PermutationMatrix"], [90, 1, 1, "", "Trace"], [90, 1, 1, "", "Transpose"], [90, 1, 1, "", "ZeroMatrix"], [90, 0, 0, "-", "blockmatrix"], [90, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[90, 4, 1, "", "T"], [90, 2, 1, "", "as_coeff_Mul"], [90, 2, 1, "", "as_explicit"], [90, 2, 1, "", "as_mutable"], [90, 2, 1, "", "equals"], [90, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[90, 1, 1, "", "BlockDiagMatrix"], [90, 1, 1, "", "BlockMatrix"], [90, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[90, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[90, 2, 1, "", "LDUdecomposition"], [90, 2, 1, "", "LUdecomposition"], [90, 2, 1, "", "UDLdecomposition"], [90, 2, 1, "", "schur"], [90, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[91, 1, 1, "", "ImmutableDenseMatrix"], [91, 5, 1, "", "ImmutableMatrix"], [95, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[93, 1, 1, "", "MatrixBase"], [93, 1, 1, "", "MatrixCalculus"], [93, 1, 1, "", "MatrixDeterminant"], [93, 1, 1, "", "MatrixEigen"], [93, 1, 1, "", "MatrixError"], [93, 1, 1, "", "MatrixReductions"], [93, 1, 1, "", "MatrixSubspaces"], [93, 1, 1, "", "NonSquareMatrixError"], [93, 1, 1, "", "ShapeError"], [93, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[93, 4, 1, "", "D"], [93, 2, 1, "", "LDLdecomposition"], [93, 2, 1, "", "LDLsolve"], [93, 2, 1, "", "LUdecomposition"], [93, 2, 1, "", "LUdecompositionFF"], [93, 2, 1, "", "LUdecomposition_Simple"], [93, 2, 1, "", "LUsolve"], [93, 2, 1, "", "QRdecomposition"], [93, 2, 1, "", "QRsolve"], [93, 2, 1, "", "add"], [93, 2, 1, "", "analytic_func"], [93, 2, 1, "", "cholesky"], [93, 2, 1, "", "cholesky_solve"], [93, 2, 1, "", "condition_number"], [93, 2, 1, "", "connected_components"], [93, 2, 1, "", "connected_components_decomposition"], [93, 2, 1, "", "copy"], [93, 2, 1, "", "cross"], [93, 2, 1, "", "diagonal_solve"], [93, 2, 1, "", "dot"], [93, 2, 1, "", "dual"], [93, 2, 1, "", "exp"], [93, 2, 1, "", "gauss_jordan_solve"], [93, 2, 1, "", "inv"], [93, 2, 1, "", "inv_mod"], [93, 2, 1, "", "inverse_ADJ"], [93, 2, 1, "", "inverse_BLOCK"], [93, 2, 1, "", "inverse_CH"], [93, 2, 1, "", "inverse_GE"], [93, 2, 1, "", "inverse_LDL"], [93, 2, 1, "", "inverse_LU"], [93, 2, 1, "", "inverse_QR"], [93, 2, 1, "", "irregular"], [93, 2, 1, "", "is_nilpotent"], [93, 2, 1, "", "key2bounds"], [93, 2, 1, "", "key2ij"], [93, 2, 1, "", "log"], [93, 2, 1, "", "lower_triangular_solve"], [93, 2, 1, "", "norm"], [93, 2, 1, "", "normalized"], [93, 2, 1, "", "pinv"], [93, 2, 1, "", "pinv_solve"], [93, 2, 1, "", "print_nonzero"], [93, 2, 1, "", "project"], [93, 2, 1, "", "rank_decomposition"], [93, 2, 1, "", "singular_value_decomposition"], [93, 2, 1, "", "solve"], [93, 2, 1, "", "solve_least_squares"], [93, 2, 1, "", "strongly_connected_components"], [93, 2, 1, "", "strongly_connected_components_decomposition"], [93, 2, 1, "", "table"], [93, 2, 1, "", "upper_hessenberg_decomposition"], [93, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[93, 2, 1, "", "diff"], [93, 2, 1, "", "integrate"], [93, 2, 1, "", "jacobian"], [93, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[93, 2, 1, "", "adjugate"], [93, 2, 1, "", "charpoly"], [93, 2, 1, "", "cofactor"], [93, 2, 1, "", "cofactor_matrix"], [93, 2, 1, "", "det"], [93, 2, 1, "", "minor"], [93, 2, 1, "", "minor_submatrix"], [93, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[93, 2, 1, "", "bidiagonal_decomposition"], [93, 2, 1, "", "bidiagonalize"], [93, 2, 1, "", "diagonalize"], [93, 2, 1, "", "eigenvals"], [93, 2, 1, "", "eigenvects"], [93, 2, 1, "", "is_diagonalizable"], [93, 4, 1, "", "is_indefinite"], [93, 4, 1, "", "is_negative_definite"], [93, 4, 1, "", "is_negative_semidefinite"], [93, 4, 1, "", "is_positive_definite"], [93, 4, 1, "", "is_positive_semidefinite"], [93, 2, 1, "", "jordan_form"], [93, 2, 1, "", "left_eigenvects"], [93, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[93, 2, 1, "", "echelon_form"], [93, 2, 1, "", "elementary_col_op"], [93, 2, 1, "", "elementary_row_op"], [93, 4, 1, "", "is_echelon"], [93, 2, 1, "", "rank"], [93, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[93, 2, 1, "", "columnspace"], [93, 2, 1, "", "nullspace"], [93, 2, 1, "", "orthogonalize"], [93, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[94, 3, 1, "", "hermite_normal_form"], [94, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[95, 1, 1, "", "MutableSparseMatrix"], [95, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[96, 2, 1, "", "_csrtodok"], [96, 2, 1, "", "_doktocsr"], [96, 2, 1, "", "banded"]], "sympy.ntheory": [[97, 0, 0, "-", "bbp_pi"], [97, 0, 0, "-", "continued_fraction"], [97, 0, 0, "-", "digits"], [97, 0, 0, "-", "ecm"], [97, 0, 0, "-", "egyptian_fraction"], [97, 0, 0, "-", "factor_"], [97, 0, 0, "-", "generate"], [97, 1, 1, "", "mobius"], [97, 0, 0, "-", "modular"], [97, 0, 0, "-", "multinomial"], [97, 0, 0, "-", "partitions_"], [97, 0, 0, "-", "primetest"], [97, 0, 0, "-", "qs"], [97, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[97, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[97, 3, 1, "", "continued_fraction"], [97, 3, 1, "", "continued_fraction_convergents"], [97, 3, 1, "", "continued_fraction_iterator"], [97, 3, 1, "", "continued_fraction_periodic"], [97, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[97, 3, 1, "", "count_digits"], [97, 3, 1, "", "digits"], [97, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[97, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[97, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[97, 3, 1, "", "abundance"], [97, 3, 1, "", "antidivisor_count"], [97, 3, 1, "", "antidivisors"], [97, 3, 1, "", "core"], [97, 3, 1, "", "digits"], [97, 3, 1, "", "divisor_count"], [97, 1, 1, "", "divisor_sigma"], [97, 3, 1, "", "divisors"], [97, 3, 1, "", "factorint"], [97, 3, 1, "", "factorrat"], [97, 3, 1, "", "is_abundant"], [97, 3, 1, "", "is_amicable"], [97, 3, 1, "", "is_deficient"], [97, 3, 1, "", "is_mersenne_prime"], [97, 3, 1, "", "is_perfect"], [97, 3, 1, "", "mersenne_prime_exponent"], [97, 3, 1, "", "multiplicity"], [97, 3, 1, "", "perfect_power"], [97, 3, 1, "", "pollard_pm1"], [97, 3, 1, "", "pollard_rho"], [97, 3, 1, "", "primefactors"], [97, 1, 1, "", "primenu"], [97, 1, 1, "", "primeomega"], [97, 3, 1, "", "proper_divisor_count"], [97, 3, 1, "", "proper_divisors"], [97, 1, 1, "", "reduced_totient"], [97, 3, 1, "", "smoothness"], [97, 3, 1, "", "smoothness_p"], [97, 1, 1, "", "totient"], [97, 3, 1, "", "trailing"], [97, 3, 1, "", "udivisor_count"], [97, 1, 1, "", "udivisor_sigma"], [97, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[97, 1, 1, "", "Sieve"], [97, 3, 1, "", "composite"], [97, 3, 1, "", "compositepi"], [97, 3, 1, "", "cycle_length"], [97, 3, 1, "", "nextprime"], [97, 3, 1, "", "prevprime"], [97, 3, 1, "", "prime"], [97, 3, 1, "", "primepi"], [97, 3, 1, "", "primerange"], [97, 3, 1, "", "primorial"], [97, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[97, 2, 1, "", "extend"], [97, 2, 1, "", "extend_to_no"], [97, 2, 1, "", "mobiusrange"], [97, 2, 1, "", "primerange"], [97, 2, 1, "", "search"], [97, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[97, 3, 1, "", "crt"], [97, 3, 1, "", "crt1"], [97, 3, 1, "", "crt2"], [97, 3, 1, "", "solve_congruence"], [97, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[97, 3, 1, "", "binomial_coefficients"], [97, 3, 1, "", "binomial_coefficients_list"], [97, 3, 1, "", "multinomial_coefficients"], [97, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[97, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[97, 3, 1, "", "is_euler_pseudoprime"], [97, 3, 1, "", "is_extra_strong_lucas_prp"], [97, 3, 1, "", "is_gaussian_prime"], [97, 3, 1, "", "is_lucas_prp"], [97, 3, 1, "", "is_square"], [97, 3, 1, "", "is_strong_lucas_prp"], [97, 3, 1, "", "isprime"], [97, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[97, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[97, 3, 1, "", "discrete_log"], [97, 3, 1, "", "is_nthpow_residue"], [97, 3, 1, "", "is_primitive_root"], [97, 3, 1, "", "is_quad_residue"], [97, 3, 1, "", "jacobi_symbol"], [97, 3, 1, "", "legendre_symbol"], [97, 3, 1, "", "n_order"], [97, 3, 1, "", "nthroot_mod"], [97, 3, 1, "", "primitive_root"], [97, 3, 1, "", "quadratic_residues"], [97, 3, 1, "", "sqrt_mod"], [97, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[99, 1, 1, "", "LaTeXParsingError"], [99, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[99, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[99, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[99, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[99, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[99, 2, 1, "", "convert_to_c"], [99, 2, 1, "", "convert_to_expr"], [99, 2, 1, "", "convert_to_fortran"], [99, 2, 1, "", "convert_to_python"], [99, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[99, 3, 1, "", "auto_number"], [99, 3, 1, "", "auto_symbol"], [99, 3, 1, "", "convert_xor"], [99, 3, 1, "", "eval_expr"], [99, 3, 1, "", "factorial_notation"], [99, 3, 1, "", "function_exponentiation"], [99, 3, 1, "", "implicit_application"], [99, 3, 1, "", "implicit_multiplication"], [99, 3, 1, "", "implicit_multiplication_application"], [99, 3, 1, "", "lambda_notation"], [99, 3, 1, "", "parse_expr"], [99, 3, 1, "", "rationalize"], [99, 3, 1, "", "repeated_decimals"], [99, 3, 1, "", "split_symbols"], [99, 3, 1, "", "split_symbols_custom"], [99, 6, 1, "", "standard_transformations"], [99, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[100, 0, 0, "-", "beam"], [103, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[100, 1, 1, "", "Beam"], [100, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[100, 4, 1, "", "applied_loads"], [100, 2, 1, "", "apply_load"], [100, 2, 1, "", "apply_support"], [100, 4, 1, "", "area"], [100, 2, 1, "", "bending_moment"], [100, 4, 1, "", "boundary_conditions"], [100, 4, 1, "", "cross_section"], [100, 2, 1, "", "deflection"], [100, 2, 1, "", "draw"], [100, 4, 1, "", "elastic_modulus"], [100, 4, 1, "", "ild_moment"], [100, 4, 1, "", "ild_reactions"], [100, 4, 1, "", "ild_shear"], [100, 2, 1, "", "join"], [100, 4, 1, "", "length"], [100, 4, 1, "", "load"], [100, 2, 1, "", "max_bmoment"], [100, 2, 1, "", "max_deflection"], [100, 2, 1, "", "max_shear_force"], [100, 2, 1, "", "plot_bending_moment"], [100, 2, 1, "", "plot_deflection"], [100, 2, 1, "", "plot_ild_moment"], [100, 2, 1, "", "plot_ild_reactions"], [100, 2, 1, "", "plot_ild_shear"], [100, 2, 1, "", "plot_loading_results"], [100, 2, 1, "", "plot_shear_force"], [100, 2, 1, "", "plot_shear_stress"], [100, 2, 1, "", "plot_slope"], [100, 2, 1, "", "point_cflexure"], [100, 4, 1, "", "reaction_loads"], [100, 2, 1, "", "remove_load"], [100, 4, 1, "", "second_moment"], [100, 2, 1, "", "shear_force"], [100, 2, 1, "", "shear_stress"], [100, 2, 1, "", "slope"], [100, 2, 1, "", "solve_for_ild_moment"], [100, 2, 1, "", "solve_for_ild_reactions"], [100, 2, 1, "", "solve_for_ild_shear"], [100, 2, 1, "", "solve_for_reaction_loads"], [100, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[100, 2, 1, "", "angular_deflection"], [100, 2, 1, "", "apply_load"], [100, 2, 1, "", "apply_moment_load"], [100, 4, 1, "", "area"], [100, 2, 1, "", "axial_force"], [100, 2, 1, "", "axial_stress"], [100, 2, 1, "", "bending_moment"], [100, 4, 1, "", "boundary_conditions"], [100, 2, 1, "", "deflection"], [100, 4, 1, "", "load_vector"], [100, 2, 1, "", "max_bending_moment"], [100, 2, 1, "", "max_bmoment"], [100, 2, 1, "", "max_deflection"], [100, 2, 1, "", "max_shear_force"], [100, 4, 1, "", "moment_load_vector"], [100, 2, 1, "", "plot_bending_moment"], [100, 2, 1, "", "plot_deflection"], [100, 2, 1, "", "plot_loading_results"], [100, 2, 1, "", "plot_shear_force"], [100, 2, 1, "", "plot_shear_stress"], [100, 2, 1, "", "plot_slope"], [100, 2, 1, "", "polar_moment"], [100, 4, 1, "", "second_moment"], [100, 2, 1, "", "shear_force"], [100, 4, 1, "", "shear_modulus"], [100, 2, 1, "", "shear_stress"], [100, 2, 1, "", "slope"], [100, 2, 1, "", "solve_for_reaction_loads"], [100, 2, 1, "", "solve_for_torsion"], [100, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[103, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[103, 2, 1, "", "add_member"], [103, 2, 1, "", "add_node"], [103, 2, 1, "", "apply_load"], [103, 2, 1, "", "apply_support"], [103, 2, 1, "", "change_member_label"], [103, 2, 1, "", "change_node_label"], [103, 4, 1, "", "internal_forces"], [103, 4, 1, "", "loads"], [103, 4, 1, "", "member_labels"], [103, 4, 1, "", "members"], [103, 4, 1, "", "node_labels"], [103, 4, 1, "", "node_positions"], [103, 4, 1, "", "nodes"], [103, 4, 1, "", "reaction_loads"], [103, 2, 1, "", "remove_load"], [103, 2, 1, "", "remove_member"], [103, 2, 1, "", "remove_node"], [103, 2, 1, "", "remove_support"], [103, 2, 1, "", "solve"], [103, 4, 1, "", "supports"]], "sympy.physics": [[106, 0, 0, "-", "control"], [109, 0, 0, "-", "hydrogen"], [110, 0, 0, "-", "matrices"], [131, 0, 0, "-", "mechanics"], [146, 0, 0, "-", "paulialgebra"], [147, 0, 0, "-", "qho_1d"], [171, 0, 0, "-", "secondquant"], [172, 0, 0, "-", "sho"], [188, 0, 0, "-", "vector"], [191, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[105, 2, 1, "", "bode_magnitude_numerical_data"], [105, 2, 1, "", "bode_magnitude_plot"], [105, 2, 1, "", "bode_phase_numerical_data"], [105, 2, 1, "", "bode_phase_plot"], [105, 2, 1, "", "bode_plot"], [105, 2, 1, "", "impulse_response_numerical_data"], [105, 2, 1, "", "impulse_response_plot"], [105, 2, 1, "", "pole_zero_numerical_data"], [105, 2, 1, "", "pole_zero_plot"], [105, 2, 1, "", "ramp_response_numerical_data"], [105, 2, 1, "", "ramp_response_plot"], [105, 2, 1, "", "step_response_numerical_data"], [105, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[107, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[107, 1, 1, "", "Feedback"], [107, 1, 1, "", "MIMOFeedback"], [107, 1, 1, "", "MIMOParallel"], [107, 1, 1, "", "MIMOSeries"], [107, 1, 1, "", "Parallel"], [107, 1, 1, "", "Series"], [107, 1, 1, "", "TransferFunction"], [107, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[107, 2, 1, "", "doit"], [107, 4, 1, "", "sensitivity"], [107, 4, 1, "", "sign"], [107, 4, 1, "", "sys1"], [107, 4, 1, "", "sys2"], [107, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[107, 2, 1, "", "doit"], [107, 4, 1, "", "sensitivity"], [107, 4, 1, "", "sign"], [107, 4, 1, "", "sys1"], [107, 4, 1, "", "sys2"], [107, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[107, 2, 1, "", "doit"], [107, 4, 1, "", "num_inputs"], [107, 4, 1, "", "num_outputs"], [107, 4, 1, "", "shape"], [107, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[107, 2, 1, "", "doit"], [107, 4, 1, "", "num_inputs"], [107, 4, 1, "", "num_outputs"], [107, 4, 1, "", "shape"], [107, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[107, 2, 1, "", "doit"], [107, 4, 1, "", "is_biproper"], [107, 4, 1, "", "is_proper"], [107, 4, 1, "", "is_strictly_proper"], [107, 2, 1, "", "to_expr"], [107, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[107, 2, 1, "", "doit"], [107, 4, 1, "", "is_biproper"], [107, 4, 1, "", "is_proper"], [107, 4, 1, "", "is_strictly_proper"], [107, 2, 1, "", "to_expr"], [107, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[107, 2, 1, "", "dc_gain"], [107, 4, 1, "", "den"], [107, 2, 1, "", "expand"], [107, 2, 1, "", "from_rational_expression"], [107, 4, 1, "", "is_biproper"], [107, 4, 1, "", "is_proper"], [107, 2, 1, "", "is_stable"], [107, 4, 1, "", "is_strictly_proper"], [107, 4, 1, "", "num"], [107, 2, 1, "", "poles"], [107, 2, 1, "", "to_expr"], [107, 4, 1, "", "var"], [107, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[107, 2, 1, "", "elem_poles"], [107, 2, 1, "", "elem_zeros"], [107, 2, 1, "", "expand"], [107, 2, 1, "", "from_Matrix"], [107, 4, 1, "", "num_inputs"], [107, 4, 1, "", "num_outputs"], [107, 4, 1, "", "shape"], [107, 2, 1, "", "transpose"], [107, 4, 1, "", "var"]], "sympy.physics.hep": [[108, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[108, 3, 1, "", "extract_type_tens"], [108, 3, 1, "", "gamma_trace"], [108, 3, 1, "", "kahane_simplify"], [108, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[109, 3, 1, "", "E_nl"], [109, 3, 1, "", "E_nl_dirac"], [109, 3, 1, "", "Psi_nlm"], [109, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[110, 3, 1, "", "mdft"], [110, 3, 1, "", "mgamma"], [110, 3, 1, "", "msigma"], [110, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[112, 0, 0, "-", "body"], [113, 3, 1, "", "find_dynamicsymbols"], [115, 0, 0, "-", "joint"], [115, 0, 0, "-", "jointsmethod"], [116, 0, 0, "-", "kane"], [116, 0, 0, "-", "lagrange"], [117, 0, 0, "-", "linearize"], [113, 3, 1, "", "msubs"], [118, 0, 0, "-", "particle"], [118, 0, 0, "-", "rigidbody"], [120, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[112, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[112, 2, 1, "", "ang_vel_in"], [112, 2, 1, "", "apply_force"], [112, 2, 1, "", "apply_torque"], [112, 2, 1, "", "clear_loads"], [112, 2, 1, "", "dcm"], [112, 4, 1, "", "inertia"], [112, 2, 1, "", "kinetic_energy"], [112, 2, 1, "", "masscenter_vel"], [112, 2, 1, "", "parallel_axis"], [112, 2, 1, "", "remove_load"], [112, 4, 1, "", "x"], [112, 4, 1, "", "y"], [112, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[118, 3, 1, "", "Lagrangian"], [118, 3, 1, "", "angular_momentum"], [118, 3, 1, "", "inertia"], [118, 3, 1, "", "inertia_of_point_mass"], [118, 3, 1, "", "kinetic_energy"], [118, 3, 1, "", "linear_momentum"], [118, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[115, 1, 1, "", "CylindricalJoint"], [115, 1, 1, "", "Joint"], [115, 1, 1, "", "PinJoint"], [115, 1, 1, "", "PlanarJoint"], [115, 1, 1, "", "PrismaticJoint"], [115, 1, 1, "", "SphericalJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[115, 4, 1, "", "joint_axis"], [115, 4, 1, "", "rotation_coordinate"], [115, 4, 1, "", "rotation_speed"], [115, 4, 1, "", "translation_coordinate"], [115, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[115, 4, 1, "", "child"], [115, 4, 1, "", "child_axis"], [115, 4, 1, "", "child_point"], [115, 4, 1, "", "coordinates"], [115, 4, 1, "", "kdes"], [115, 4, 1, "", "name"], [115, 4, 1, "", "parent"], [115, 4, 1, "", "parent_axis"], [115, 4, 1, "", "parent_point"], [115, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[115, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[115, 4, 1, "", "planar_coordinates"], [115, 4, 1, "", "planar_speeds"], [115, 4, 1, "", "planar_vectors"], [115, 4, 1, "", "rotation_axis"], [115, 4, 1, "", "rotation_coordinate"], [115, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[115, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[115, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[115, 4, 1, "", "bodies"], [115, 4, 1, "", "forcing"], [115, 4, 1, "", "forcing_full"], [115, 2, 1, "", "form_eoms"], [115, 4, 1, "", "kdes"], [115, 4, 1, "", "loads"], [115, 4, 1, "", "mass_matrix"], [115, 4, 1, "", "mass_matrix_full"], [115, 4, 1, "", "method"], [115, 4, 1, "", "q"], [115, 2, 1, "", "rhs"], [115, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[116, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[116, 4, 1, "", "auxiliary_eqs"], [116, 4, 1, "", "forcing"], [116, 4, 1, "", "forcing_full"], [116, 4, 1, "", "forcing_kin"], [116, 2, 1, "", "kanes_equations"], [116, 2, 1, "", "kindiffdict"], [116, 2, 1, "", "linearize"], [116, 4, 1, "", "mass_matrix"], [116, 4, 1, "", "mass_matrix_full"], [116, 4, 1, "", "mass_matrix_kin"], [116, 2, 1, "", "rhs"], [116, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[116, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[116, 4, 1, "", "forcing"], [116, 4, 1, "", "forcing_full"], [116, 2, 1, "", "form_lagranges_equations"], [116, 2, 1, "", "linearize"], [116, 4, 1, "", "mass_matrix"], [116, 4, 1, "", "mass_matrix_full"], [116, 2, 1, "", "rhs"], [116, 2, 1, "", "solve_multipliers"], [116, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[117, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[117, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[118, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[118, 2, 1, "", "angular_momentum"], [118, 2, 1, "", "kinetic_energy"], [118, 2, 1, "", "linear_momentum"], [118, 4, 1, "", "mass"], [118, 2, 1, "", "parallel_axis"], [118, 4, 1, "", "point"], [118, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[118, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[118, 2, 1, "", "angular_momentum"], [118, 4, 1, "", "central_inertia"], [118, 4, 1, "", "frame"], [118, 4, 1, "", "inertia"], [118, 2, 1, "", "kinetic_energy"], [118, 2, 1, "", "linear_momentum"], [118, 4, 1, "", "mass"], [118, 4, 1, "", "masscenter"], [118, 2, 1, "", "parallel_axis"], [118, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[120, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[120, 4, 1, "", "alg_con"], [120, 4, 1, "", "bodies"], [120, 4, 1, "", "comb_explicit_rhs"], [120, 4, 1, "", "comb_implicit_mat"], [120, 4, 1, "", "comb_implicit_rhs"], [120, 2, 1, "", "compute_explicit_form"], [120, 2, 1, "", "constant_symbols"], [120, 4, 1, "", "coordinates"], [120, 4, 1, "", "dyn_implicit_mat"], [120, 4, 1, "", "dyn_implicit_rhs"], [120, 2, 1, "", "dynamic_symbols"], [120, 4, 1, "", "kin_explicit_rhs"], [120, 4, 1, "", "loads"], [120, 4, 1, "", "speeds"], [120, 4, 1, "", "states"]], "sympy.physics.optics": [[140, 0, 0, "-", "gaussopt"], [142, 0, 0, "-", "medium"], [143, 0, 0, "-", "polarization"], [144, 0, 0, "-", "utils"], [145, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[140, 1, 1, "", "BeamParameter"], [140, 1, 1, "", "CurvedMirror"], [140, 1, 1, "", "CurvedRefraction"], [140, 1, 1, "", "FlatMirror"], [140, 1, 1, "", "FlatRefraction"], [140, 1, 1, "", "FreeSpace"], [140, 1, 1, "", "GeometricRay"], [140, 1, 1, "", "RayTransferMatrix"], [140, 1, 1, "", "ThinLens"], [140, 3, 1, "", "conjugate_gauss_beams"], [140, 3, 1, "", "gaussian_conj"], [140, 3, 1, "", "geometric_conj_ab"], [140, 3, 1, "", "geometric_conj_af"], [140, 3, 1, "", "geometric_conj_bf"], [140, 3, 1, "", "rayleigh2waist"], [140, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[140, 4, 1, "", "divergence"], [140, 4, 1, "", "gouy"], [140, 4, 1, "", "q"], [140, 4, 1, "", "radius"], [140, 4, 1, "", "w"], [140, 4, 1, "", "w_0"], [140, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[140, 4, 1, "", "angle"], [140, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[140, 4, 1, "", "A"], [140, 4, 1, "", "B"], [140, 4, 1, "", "C"], [140, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[142, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[142, 4, 1, "", "refractive_index"], [142, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[143, 3, 1, "", "half_wave_retarder"], [143, 3, 1, "", "jones_2_stokes"], [143, 3, 1, "", "jones_vector"], [143, 3, 1, "", "linear_polarizer"], [143, 3, 1, "", "mueller_matrix"], [143, 3, 1, "", "phase_retarder"], [143, 3, 1, "", "polarizing_beam_splitter"], [143, 3, 1, "", "quarter_wave_retarder"], [143, 3, 1, "", "reflective_filter"], [143, 3, 1, "", "stokes_vector"], [143, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[144, 3, 1, "", "brewster_angle"], [144, 3, 1, "", "critical_angle"], [144, 3, 1, "", "deviation"], [144, 3, 1, "", "fresnel_coefficients"], [144, 3, 1, "", "hyperfocal_distance"], [144, 3, 1, "", "lens_formula"], [144, 3, 1, "", "lens_makers_formula"], [144, 3, 1, "", "mirror_formula"], [144, 3, 1, "", "refraction_angle"], [144, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[145, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[145, 4, 1, "", "amplitude"], [145, 4, 1, "", "angular_velocity"], [145, 4, 1, "", "frequency"], [145, 4, 1, "", "n"], [145, 4, 1, "", "phase"], [145, 4, 1, "", "speed"], [145, 4, 1, "", "time_period"], [145, 4, 1, "", "wavelength"], [145, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[146, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[147, 3, 1, "", "E_n"], [147, 3, 1, "", "coherent_state"], [147, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[148, 0, 0, "-", "anticommutator"], [149, 0, 0, "-", "cartesian"], [150, 0, 0, "-", "cg"], [151, 0, 0, "-", "circuitplot"], [152, 0, 0, "-", "commutator"], [153, 0, 0, "-", "constants"], [154, 0, 0, "-", "dagger"], [155, 0, 0, "-", "gate"], [156, 0, 0, "-", "grover"], [157, 0, 0, "-", "hilbert"], [159, 0, 0, "-", "innerproduct"], [160, 0, 0, "-", "operator"], [161, 0, 0, "-", "operatorset"], [162, 0, 0, "-", "piab"], [163, 0, 0, "-", "qapply"], [164, 0, 0, "-", "qft"], [165, 0, 0, "-", "qubit"], [166, 0, 0, "-", "represent"], [167, 0, 0, "-", "shor"], [168, 0, 0, "-", "spin"], [169, 0, 0, "-", "state"], [170, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[148, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[148, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[149, 1, 1, "", "PositionBra3D"], [149, 1, 1, "", "PositionKet3D"], [149, 1, 1, "", "PositionState3D"], [149, 1, 1, "", "PxBra"], [149, 1, 1, "", "PxKet"], [149, 1, 1, "", "PxOp"], [149, 1, 1, "", "XBra"], [149, 1, 1, "", "XKet"], [149, 1, 1, "", "XOp"], [149, 1, 1, "", "YOp"], [149, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[149, 4, 1, "", "position_x"], [149, 4, 1, "", "position_y"], [149, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[149, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[149, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[149, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[149, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[150, 1, 1, "", "CG"], [150, 1, 1, "", "Wigner3j"], [150, 1, 1, "", "Wigner6j"], [150, 1, 1, "", "Wigner9j"], [150, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[151, 1, 1, "", "CircuitPlot"], [151, 3, 1, "", "CreateCGate"], [151, 1, 1, "", "Mx"], [151, 1, 1, "", "Mz"], [151, 3, 1, "", "circuit_plot"], [151, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[151, 2, 1, "", "control_line"], [151, 2, 1, "", "control_point"], [151, 2, 1, "", "not_point"], [151, 2, 1, "", "one_qubit_box"], [151, 2, 1, "", "swap_point"], [151, 2, 1, "", "two_qubit_box"], [151, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[152, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[152, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[153, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[154, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[155, 1, 1, "", "CGate"], [155, 1, 1, "", "CGateS"], [155, 5, 1, "", "CNOT"], [155, 1, 1, "", "CNotGate"], [155, 1, 1, "", "Gate"], [155, 5, 1, "", "H"], [155, 1, 1, "", "HadamardGate"], [155, 1, 1, "", "IdentityGate"], [155, 1, 1, "", "OneQubitGate"], [155, 5, 1, "", "Phase"], [155, 1, 1, "", "PhaseGate"], [155, 5, 1, "", "S"], [155, 5, 1, "", "SWAP"], [155, 1, 1, "", "SwapGate"], [155, 5, 1, "", "T"], [155, 1, 1, "", "TGate"], [155, 1, 1, "", "TwoQubitGate"], [155, 1, 1, "", "UGate"], [155, 5, 1, "", "X"], [155, 1, 1, "", "XGate"], [155, 5, 1, "", "Y"], [155, 1, 1, "", "YGate"], [155, 5, 1, "", "Z"], [155, 1, 1, "", "ZGate"], [155, 3, 1, "", "gate_simp"], [155, 3, 1, "", "gate_sort"], [155, 3, 1, "", "normalized"], [155, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[155, 4, 1, "", "controls"], [155, 2, 1, "", "decompose"], [155, 2, 1, "", "eval_controls"], [155, 4, 1, "", "gate"], [155, 4, 1, "", "min_qubits"], [155, 4, 1, "", "nqubits"], [155, 2, 1, "", "plot_gate"], [155, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[155, 4, 1, "", "controls"], [155, 4, 1, "", "gate"], [155, 4, 1, "", "min_qubits"], [155, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[155, 2, 1, "", "get_target_matrix"], [155, 4, 1, "", "min_qubits"], [155, 4, 1, "", "nqubits"], [155, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[155, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[155, 2, 1, "", "get_target_matrix"], [155, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[156, 1, 1, "", "OracleGate"], [156, 1, 1, "", "WGate"], [156, 3, 1, "", "apply_grover"], [156, 3, 1, "", "grover_iteration"], [156, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[156, 4, 1, "", "search_function"], [156, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[157, 1, 1, "", "ComplexSpace"], [157, 1, 1, "", "DirectSumHilbertSpace"], [157, 1, 1, "", "FockSpace"], [157, 1, 1, "", "HilbertSpace"], [157, 1, 1, "", "L2"], [157, 1, 1, "", "TensorPowerHilbertSpace"], [157, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[157, 2, 1, "", "eval"], [157, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[157, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[157, 2, 1, "", "eval"], [157, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[159, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[160, 1, 1, "", "DifferentialOperator"], [160, 1, 1, "", "HermitianOperator"], [160, 1, 1, "", "IdentityOperator"], [160, 1, 1, "", "Operator"], [160, 1, 1, "", "OuterProduct"], [160, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[160, 4, 1, "", "expr"], [160, 4, 1, "", "free_symbols"], [160, 4, 1, "", "function"], [160, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[160, 4, 1, "", "bra"], [160, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[161, 3, 1, "", "operators_to_state"], [161, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[162, 1, 1, "", "PIABBra"], [162, 1, 1, "", "PIABHamiltonian"], [162, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[163, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[164, 1, 1, "", "IQFT"], [164, 1, 1, "", "QFT"], [164, 5, 1, "", "Rk"], [164, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[164, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[164, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[165, 1, 1, "", "IntQubit"], [165, 1, 1, "", "IntQubitBra"], [165, 1, 1, "", "Qubit"], [165, 1, 1, "", "QubitBra"], [165, 3, 1, "", "matrix_to_density"], [165, 3, 1, "", "matrix_to_qubit"], [165, 3, 1, "", "measure_all"], [165, 3, 1, "", "measure_all_oneshot"], [165, 3, 1, "", "measure_partial"], [165, 3, 1, "", "measure_partial_oneshot"], [165, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[166, 3, 1, "", "enumerate_states"], [166, 3, 1, "", "get_basis"], [166, 3, 1, "", "integrate_result"], [166, 3, 1, "", "rep_expectation"], [166, 3, 1, "", "rep_innerproduct"], [166, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[167, 1, 1, "", "CMod"], [167, 3, 1, "", "period_find"], [167, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[167, 4, 1, "", "N"], [167, 4, 1, "", "a"], [167, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[168, 1, 1, "", "J2Op"], [168, 1, 1, "", "JxBra"], [168, 1, 1, "", "JxBraCoupled"], [168, 1, 1, "", "JxKet"], [168, 1, 1, "", "JxKetCoupled"], [168, 1, 1, "", "JyBra"], [168, 1, 1, "", "JyBraCoupled"], [168, 1, 1, "", "JyKet"], [168, 1, 1, "", "JyKetCoupled"], [168, 1, 1, "", "JzBra"], [168, 1, 1, "", "JzBraCoupled"], [168, 1, 1, "", "JzKet"], [168, 1, 1, "", "JzKetCoupled"], [168, 1, 1, "", "JzOp"], [168, 1, 1, "", "Rotation"], [168, 1, 1, "", "WignerD"], [168, 3, 1, "", "couple"], [168, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[168, 2, 1, "", "D"], [168, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[169, 1, 1, "", "Bra"], [169, 1, 1, "", "BraBase"], [169, 1, 1, "", "Ket"], [169, 1, 1, "", "KetBase"], [169, 1, 1, "", "OrthogonalBra"], [169, 1, 1, "", "OrthogonalKet"], [169, 1, 1, "", "OrthogonalState"], [169, 1, 1, "", "State"], [169, 1, 1, "", "StateBase"], [169, 1, 1, "", "TimeDepBra"], [169, 1, 1, "", "TimeDepKet"], [169, 1, 1, "", "TimeDepState"], [169, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[169, 4, 1, "", "dual"], [169, 2, 1, "", "dual_class"], [169, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[169, 4, 1, "", "label"], [169, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[169, 4, 1, "", "expr"], [169, 4, 1, "", "is_commutative"], [169, 4, 1, "", "is_normalized"], [169, 4, 1, "", "limits"], [169, 4, 1, "", "norm"], [169, 2, 1, "", "normalize"], [169, 2, 1, "", "prob"], [169, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[170, 1, 1, "", "TensorProduct"], [170, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[171, 1, 1, "", "AnnihilateBoson"], [171, 1, 1, "", "AnnihilateFermion"], [171, 1, 1, "", "AntiSymmetricTensor"], [171, 5, 1, "", "B"], [171, 5, 1, "", "BBra"], [171, 5, 1, "", "BKet"], [171, 5, 1, "", "Bd"], [171, 1, 1, "", "BosonicBasis"], [171, 1, 1, "", "Commutator"], [171, 1, 1, "", "CreateBoson"], [171, 1, 1, "", "CreateFermion"], [171, 1, 1, "", "Dagger"], [171, 5, 1, "", "F"], [171, 5, 1, "", "FBra"], [171, 5, 1, "", "FKet"], [171, 5, 1, "", "Fd"], [171, 1, 1, "", "FixedBosonicBasis"], [171, 1, 1, "", "FockState"], [171, 1, 1, "", "FockStateBosonBra"], [171, 1, 1, "", "FockStateBosonKet"], [171, 1, 1, "", "FockStateBra"], [171, 1, 1, "", "FockStateFermionBra"], [171, 1, 1, "", "FockStateFermionKet"], [171, 1, 1, "", "FockStateKet"], [171, 1, 1, "", "InnerProduct"], [171, 1, 1, "", "KroneckerDelta"], [171, 1, 1, "", "NO"], [171, 1, 1, "", "PermutationOperator"], [171, 1, 1, "", "VarBosonicBasis"], [171, 3, 1, "", "apply_operators"], [171, 3, 1, "", "contraction"], [171, 3, 1, "", "evaluate_deltas"], [171, 3, 1, "", "matrix_rep"], [171, 3, 1, "", "simplify_index_permutations"], [171, 3, 1, "", "substitute_dummies"], [171, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[171, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[171, 2, 1, "", "apply_operator"], [171, 4, 1, "", "is_only_q_annihilator"], [171, 4, 1, "", "is_only_q_creator"], [171, 4, 1, "", "is_q_annihilator"], [171, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[171, 4, 1, "", "lower"], [171, 4, 1, "", "symbol"], [171, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[171, 2, 1, "", "doit"], [171, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[171, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[171, 2, 1, "", "apply_operator"], [171, 4, 1, "", "is_only_q_annihilator"], [171, 4, 1, "", "is_only_q_creator"], [171, 4, 1, "", "is_q_annihilator"], [171, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[171, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[171, 2, 1, "", "index"], [171, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[171, 4, 1, "", "bra"], [171, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[171, 2, 1, "", "eval"], [171, 4, 1, "", "indices_contain_equal_information"], [171, 4, 1, "", "is_above_fermi"], [171, 4, 1, "", "is_below_fermi"], [171, 4, 1, "", "is_only_above_fermi"], [171, 4, 1, "", "is_only_below_fermi"], [171, 4, 1, "", "killable_index"], [171, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[171, 2, 1, "", "doit"], [171, 2, 1, "", "get_subNO"], [171, 4, 1, "", "has_q_annihilators"], [171, 4, 1, "", "has_q_creators"], [171, 2, 1, "", "iter_q_annihilators"], [171, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[171, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[171, 2, 1, "", "index"], [171, 2, 1, "", "state"]], "sympy.physics.sho": [[172, 3, 1, "", "E_nl"], [172, 3, 1, "", "R_nl"]], "sympy.physics.units": [[173, 0, 0, "-", "dimensions"], [177, 0, 0, "-", "prefixes"], [178, 0, 0, "-", "quantities"], [179, 0, 0, "-", "unitsystem"], [178, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[173, 1, 1, "", "Dimension"], [173, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[173, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[173, 4, 1, "", "can_transf_matrix"], [173, 4, 1, "", "dim"], [173, 2, 1, "", "dim_can_vector"], [173, 2, 1, "", "dim_vector"], [173, 4, 1, "", "inv_can_transf_matrix"], [173, 4, 1, "", "is_consistent"], [173, 2, 1, "", "is_dimensionless"], [173, 4, 1, "", "list_can_dims"], [173, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[177, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[178, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[178, 4, 1, "", "abbrev"], [178, 2, 1, "", "convert_to"], [178, 4, 1, "", "free_symbols"], [178, 4, 1, "", "is_prefixed"], [178, 4, 1, "", "scale_factor"], [178, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[179, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[179, 4, 1, "", "dim"], [179, 2, 1, "", "extend"], [179, 2, 1, "", "get_units_non_prefixed"], [179, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[178, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[181, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[181, 2, 1, "", "applyfunc"], [181, 2, 1, "", "cross"], [181, 2, 1, "", "doit"], [181, 2, 1, "", "dot"], [181, 2, 1, "", "dt"], [181, 2, 1, "", "express"], [181, 4, 1, "", "func"], [181, 2, 1, "", "simplify"], [181, 2, 1, "", "subs"], [181, 2, 1, "", "to_matrix"], [181, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[183, 3, 1, "", "dynamicsymbols"], [185, 0, 0, "-", "functions"], [185, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[182, 3, 1, "", "curl"], [182, 3, 1, "", "divergence"], [182, 3, 1, "", "gradient"], [182, 3, 1, "", "is_conservative"], [182, 3, 1, "", "is_solenoidal"], [182, 3, 1, "", "scalar_potential"], [182, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[181, 1, 1, "", "CoordinateSym"], [181, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[181, 2, 1, "", "ang_acc_in"], [181, 2, 1, "", "ang_vel_in"], [181, 2, 1, "", "dcm"], [181, 2, 1, "", "orient"], [181, 2, 1, "", "orient_axis"], [181, 2, 1, "", "orient_body_fixed"], [181, 2, 1, "", "orient_explicit"], [181, 2, 1, "", "orient_quaternion"], [181, 2, 1, "", "orient_space_fixed"], [181, 2, 1, "", "orientnew"], [181, 2, 1, "", "partial_velocity"], [181, 2, 1, "", "set_ang_acc"], [181, 2, 1, "", "set_ang_vel"], [181, 2, 1, "", "variable_map"], [181, 4, 1, "", "x"], [181, 4, 1, "", "y"], [181, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[183, 3, 1, "", "cross"], [183, 3, 1, "", "dot"], [183, 3, 1, "", "express"], [185, 3, 1, "", "get_motion_params"], [185, 3, 1, "", "kinematic_equations"], [183, 3, 1, "", "outer"], [185, 3, 1, "", "partial_velocity"], [183, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[185, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[185, 2, 1, "", "a1pt_theory"], [185, 2, 1, "", "a2pt_theory"], [185, 2, 1, "", "acc"], [185, 2, 1, "", "locatenew"], [185, 2, 1, "", "partial_velocity"], [185, 2, 1, "", "pos_from"], [185, 2, 1, "", "set_acc"], [185, 2, 1, "", "set_pos"], [185, 2, 1, "", "set_vel"], [185, 2, 1, "", "v1pt_theory"], [185, 2, 1, "", "v2pt_theory"], [185, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[186, 3, 1, "", "init_vprinting"], [186, 3, 1, "", "vlatex"], [186, 3, 1, "", "vpprint"], [186, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[181, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[181, 2, 1, "", "angle_between"], [181, 2, 1, "", "applyfunc"], [181, 2, 1, "", "cross"], [181, 2, 1, "", "diff"], [181, 2, 1, "", "doit"], [181, 2, 1, "", "dot"], [181, 2, 1, "", "dt"], [181, 2, 1, "", "express"], [181, 2, 1, "", "free_dynamicsymbols"], [181, 2, 1, "", "free_symbols"], [181, 4, 1, "", "func"], [181, 2, 1, "", "magnitude"], [181, 2, 1, "", "normalize"], [181, 2, 1, "", "outer"], [181, 2, 1, "", "separate"], [181, 2, 1, "", "simplify"], [181, 2, 1, "", "subs"], [181, 2, 1, "", "to_matrix"], [181, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[191, 3, 1, "", "clebsch_gordan"], [191, 3, 1, "", "dot_rot_grad_Ynm"], [191, 3, 1, "", "gaunt"], [191, 3, 1, "", "racah"], [191, 3, 1, "", "real_gaunt"], [191, 3, 1, "", "wigner_3j"], [191, 3, 1, "", "wigner_6j"], [191, 3, 1, "", "wigner_9j"], [191, 3, 1, "", "wigner_d"], [191, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[192, 0, 0, "-", "plot"], [192, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[192, 1, 1, "", "BaseBackend"], [192, 1, 1, "", "BaseSeries"], [192, 1, 1, "", "Line2DBaseSeries"], [192, 1, 1, "", "Line3DBaseSeries"], [192, 1, 1, "", "LineOver1DRangeSeries"], [192, 1, 1, "", "MatplotlibBackend"], [192, 1, 1, "", "Parametric2DLineSeries"], [192, 1, 1, "", "Parametric3DLineSeries"], [192, 1, 1, "", "ParametricSurfaceSeries"], [192, 1, 1, "", "Plot"], [192, 1, 1, "", "PlotGrid"], [192, 1, 1, "", "SurfaceBaseSeries"], [192, 1, 1, "", "SurfaceOver2DRangeSeries"], [192, 1, 1, "", "TextBackend"], [192, 3, 1, "", "plot"], [192, 3, 1, "", "plot3d"], [192, 3, 1, "", "plot3d_parametric_line"], [192, 3, 1, "", "plot3d_parametric_surface"], [192, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[192, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[192, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[192, 2, 1, "", "get_segments"], [192, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[192, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[192, 2, 1, "", "append"], [192, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[192, 1, 1, "", "ImplicitSeries"], [192, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[192, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[193, 1, 1, "", "ExtensionElement"], [193, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[193, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[193, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[193, 1, 1, "", "ModuleHomomorphism"], [193, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[193, 2, 1, "", "image"], [193, 2, 1, "", "is_injective"], [193, 2, 1, "", "is_isomorphism"], [193, 2, 1, "", "is_surjective"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "kernel"], [193, 2, 1, "", "quotient_codomain"], [193, 2, 1, "", "quotient_domain"], [193, 2, 1, "", "restrict_codomain"], [193, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[193, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[193, 2, 1, "", "contains"], [193, 2, 1, "", "depth"], [193, 2, 1, "", "height"], [193, 2, 1, "", "intersect"], [193, 2, 1, "", "is_maximal"], [193, 2, 1, "", "is_primary"], [193, 2, 1, "", "is_prime"], [193, 2, 1, "", "is_principal"], [193, 2, 1, "", "is_radical"], [193, 2, 1, "", "is_whole_ring"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "product"], [193, 2, 1, "", "quotient"], [193, 2, 1, "", "radical"], [193, 2, 1, "", "reduce_element"], [193, 2, 1, "", "saturate"], [193, 2, 1, "", "subset"], [193, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[193, 1, 1, "", "FreeModule"], [193, 1, 1, "", "FreeModuleElement"], [193, 1, 1, "", "Module"], [193, 1, 1, "", "QuotientModule"], [193, 1, 1, "", "QuotientModuleElement"], [193, 1, 1, "", "SubModule"], [193, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[193, 2, 1, "", "basis"], [193, 2, 1, "", "convert"], [193, 5, 1, "", "dtype"], [193, 2, 1, "", "identity_hom"], [193, 2, 1, "", "is_submodule"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "multiply_ideal"], [193, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[193, 2, 1, "", "contains"], [193, 2, 1, "", "convert"], [193, 2, 1, "", "identity_hom"], [193, 2, 1, "", "is_submodule"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "multiply_ideal"], [193, 2, 1, "", "quotient_module"], [193, 2, 1, "", "submodule"], [193, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[193, 2, 1, "", "convert"], [193, 5, 1, "", "dtype"], [193, 2, 1, "", "identity_hom"], [193, 2, 1, "", "is_submodule"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "quotient_hom"], [193, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[193, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[193, 2, 1, "", "convert"], [193, 2, 1, "", "identity_hom"], [193, 2, 1, "", "in_terms_of_generators"], [193, 2, 1, "", "inclusion_hom"], [193, 2, 1, "", "intersect"], [193, 2, 1, "", "is_full_module"], [193, 2, 1, "", "is_submodule"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "module_quotient"], [193, 2, 1, "", "multiply_ideal"], [193, 2, 1, "", "quotient_module"], [193, 2, 1, "", "reduce_element"], [193, 2, 1, "", "submodule"], [193, 2, 1, "", "syzygy_module"], [193, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[193, 2, 1, "", "is_full_module"], [193, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[202, 3, 1, "", "andre_poly"], [202, 3, 1, "", "bernoulli_c_poly"], [202, 3, 1, "", "bernoulli_poly"], [202, 3, 1, "", "euler_poly"], [202, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[202, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[199, 3, 1, "", "dmp_abs"], [199, 3, 1, "", "dmp_add"], [199, 3, 1, "", "dmp_add_ground"], [199, 3, 1, "", "dmp_add_mul"], [199, 3, 1, "", "dmp_add_term"], [199, 3, 1, "", "dmp_div"], [199, 3, 1, "", "dmp_expand"], [199, 3, 1, "", "dmp_exquo"], [199, 3, 1, "", "dmp_exquo_ground"], [199, 3, 1, "", "dmp_ff_div"], [199, 3, 1, "", "dmp_l1_norm"], [199, 3, 1, "", "dmp_max_norm"], [199, 3, 1, "", "dmp_mul"], [199, 3, 1, "", "dmp_mul_ground"], [199, 3, 1, "", "dmp_mul_term"], [199, 3, 1, "", "dmp_neg"], [199, 3, 1, "", "dmp_pdiv"], [199, 3, 1, "", "dmp_pexquo"], [199, 3, 1, "", "dmp_pow"], [199, 3, 1, "", "dmp_pquo"], [199, 3, 1, "", "dmp_prem"], [199, 3, 1, "", "dmp_quo"], [199, 3, 1, "", "dmp_quo_ground"], [199, 3, 1, "", "dmp_rem"], [199, 3, 1, "", "dmp_rr_div"], [199, 3, 1, "", "dmp_sqr"], [199, 3, 1, "", "dmp_sub"], [199, 3, 1, "", "dmp_sub_ground"], [199, 3, 1, "", "dmp_sub_mul"], [199, 3, 1, "", "dmp_sub_term"], [199, 3, 1, "", "dup_lshift"], [199, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[199, 3, 1, "", "dmp_LC"], [199, 3, 1, "", "dmp_TC"], [199, 3, 1, "", "dmp_apply_pairs"], [199, 3, 1, "", "dmp_convert"], [199, 3, 1, "", "dmp_copy"], [199, 3, 1, "", "dmp_deflate"], [199, 3, 1, "", "dmp_degree"], [199, 3, 1, "", "dmp_degree_in"], [199, 3, 1, "", "dmp_degree_list"], [199, 3, 1, "", "dmp_eject"], [199, 3, 1, "", "dmp_exclude"], [199, 3, 1, "", "dmp_from_dict"], [199, 3, 1, "", "dmp_from_sympy"], [199, 3, 1, "", "dmp_ground"], [199, 3, 1, "", "dmp_ground_LC"], [199, 3, 1, "", "dmp_ground_TC"], [199, 3, 1, "", "dmp_ground_nth"], [199, 3, 1, "", "dmp_ground_p"], [199, 3, 1, "", "dmp_grounds"], [199, 3, 1, "", "dmp_include"], [199, 3, 1, "", "dmp_inflate"], [199, 3, 1, "", "dmp_inject"], [199, 3, 1, "", "dmp_list_terms"], [199, 3, 1, "", "dmp_multi_deflate"], [199, 3, 1, "", "dmp_negative_p"], [199, 3, 1, "", "dmp_nest"], [199, 3, 1, "", "dmp_normal"], [199, 3, 1, "", "dmp_nth"], [199, 3, 1, "", "dmp_one"], [199, 3, 1, "", "dmp_one_p"], [199, 3, 1, "", "dmp_permute"], [199, 3, 1, "", "dmp_positive_p"], [199, 3, 1, "", "dmp_raise"], [199, 3, 1, "", "dmp_slice"], [199, 3, 1, "", "dmp_strip"], [199, 3, 1, "", "dmp_swap"], [199, 3, 1, "", "dmp_terms_gcd"], [199, 3, 1, "", "dmp_to_dict"], [199, 3, 1, "", "dmp_to_tuple"], [199, 3, 1, "", "dmp_true_LT"], [199, 3, 1, "", "dmp_validate"], [199, 3, 1, "", "dmp_zero"], [199, 3, 1, "", "dmp_zero_p"], [199, 3, 1, "", "dmp_zeros"], [199, 3, 1, "", "dup_random"], [199, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[199, 3, 1, "", "dmp_clear_denoms"], [199, 3, 1, "", "dmp_compose"], [199, 3, 1, "", "dmp_diff"], [199, 3, 1, "", "dmp_diff_eval_in"], [199, 3, 1, "", "dmp_diff_in"], [199, 3, 1, "", "dmp_eval"], [199, 3, 1, "", "dmp_eval_in"], [199, 3, 1, "", "dmp_eval_tail"], [199, 3, 1, "", "dmp_ground_content"], [199, 3, 1, "", "dmp_ground_extract"], [199, 3, 1, "", "dmp_ground_monic"], [199, 3, 1, "", "dmp_ground_primitive"], [199, 3, 1, "", "dmp_ground_trunc"], [199, 3, 1, "", "dmp_integrate"], [199, 3, 1, "", "dmp_integrate_in"], [199, 3, 1, "", "dmp_lift"], [199, 3, 1, "", "dmp_revert"], [199, 3, 1, "", "dmp_trunc"], [199, 3, 1, "", "dup_content"], [199, 3, 1, "", "dup_decompose"], [199, 3, 1, "", "dup_extract"], [199, 3, 1, "", "dup_mirror"], [199, 3, 1, "", "dup_monic"], [199, 3, 1, "", "dup_primitive"], [199, 3, 1, "", "dup_real_imag"], [199, 3, 1, "", "dup_scale"], [199, 3, 1, "", "dup_shift"], [199, 3, 1, "", "dup_sign_variations"], [199, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[202, 3, 1, "", "dispersion"], [202, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[199, 3, 1, "", "sdm_LC"], [199, 3, 1, "", "sdm_LM"], [199, 3, 1, "", "sdm_LT"], [199, 3, 1, "", "sdm_add"], [199, 3, 1, "", "sdm_deg"], [199, 3, 1, "", "sdm_ecart"], [199, 3, 1, "", "sdm_from_dict"], [199, 3, 1, "", "sdm_from_vector"], [199, 3, 1, "", "sdm_groebner"], [199, 3, 1, "", "sdm_monomial_deg"], [199, 3, 1, "", "sdm_monomial_divides"], [199, 3, 1, "", "sdm_monomial_mul"], [199, 3, 1, "", "sdm_mul_term"], [199, 3, 1, "", "sdm_nf_mora"], [199, 3, 1, "", "sdm_spoly"], [199, 3, 1, "", "sdm_to_dict"], [199, 3, 1, "", "sdm_to_vector"], [199, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[197, 1, 1, "", "AlgebraicField"], [197, 1, 1, "", "ComplexField"], [197, 1, 1, "", "ExpressionDomain"], [197, 1, 1, "", "FiniteField"], [197, 1, 1, "", "FractionField"], [197, 1, 1, "", "GMPYFiniteField"], [197, 1, 1, "", "GMPYIntegerRing"], [197, 1, 1, "", "GMPYRationalField"], [197, 1, 1, "", "IntegerRing"], [197, 1, 1, "", "PolynomialRing"], [197, 1, 1, "", "PythonFiniteField"], [197, 1, 1, "", "PythonIntegerRing"], [197, 1, 1, "", "PythonRationalField"], [197, 1, 1, "", "RationalField"], [197, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[197, 2, 1, "", "algebraic_field"], [197, 2, 1, "", "denom"], [197, 2, 1, "", "discriminant"], [197, 5, 1, "", "dtype"], [197, 5, 1, "", "ext"], [197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_GaussianIntegerRing"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "integral_basis"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "maximal_order"], [197, 5, 1, "", "mod"], [197, 2, 1, "", "numer"], [197, 5, 1, "", "orig_ext"], [197, 2, 1, "", "primes_above"], [197, 2, 1, "", "to_alg_num"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[197, 2, 1, "", "almosteq"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "get_exact"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[197, 1, 1, "", "Expression"], [197, 2, 1, "", "denom"], [197, 5, 1, "", "dtype"], [197, 2, 1, "", "from_ExpressionDomain"], [197, 2, 1, "", "from_FractionField"], [197, 2, 1, "", "from_GaussianIntegerRing"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "from_PolynomialRing"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[197, 2, 1, "", "characteristic"], [197, 2, 1, "", "from_FF"], [197, 2, 1, "", "from_FF_gmpy"], [197, 2, 1, "", "from_FF_python"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[197, 2, 1, "", "denom"], [197, 2, 1, "", "factorial"], [197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_ComplexField"], [197, 2, 1, "", "from_FractionField"], [197, 2, 1, "", "from_GaussianIntegerRing"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "from_PolynomialRing"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[197, 2, 1, "", "factorial"], [197, 2, 1, "", "from_FF_gmpy"], [197, 2, 1, "", "from_FF_python"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "gcdex"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "sqrt"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[197, 2, 1, "", "denom"], [197, 2, 1, "", "div"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "factorial"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "rem"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[197, 2, 1, "", "algebraic_field"], [197, 2, 1, "", "factorial"], [197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_FF"], [197, 2, 1, "", "from_FF_gmpy"], [197, 2, 1, "", "from_FF_python"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "gcdex"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "log"], [197, 2, 1, "", "sqrt"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[197, 2, 1, "", "factorial"], [197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_ComplexField"], [197, 2, 1, "", "from_FractionField"], [197, 2, 1, "", "from_GaussianIntegerRing"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "from_GlobalPolynomialRing"], [197, 2, 1, "", "from_PolynomialRing"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "gcdex"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "is_unit"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[197, 2, 1, "", "algebraic_field"], [197, 2, 1, "", "denom"], [197, 2, 1, "", "div"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "rem"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[197, 2, 1, "", "almosteq"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "get_exact"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "to_rational"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[197, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[197, 2, 1, "", "drop"], [197, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[197, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[197, 2, 1, "", "abs"], [197, 2, 1, "", "add"], [197, 2, 1, "", "alg_field_from_poly"], [197, 2, 1, "", "algebraic_field"], [197, 2, 1, "", "almosteq"], [197, 2, 1, "", "characteristic"], [197, 2, 1, "", "cofactors"], [197, 2, 1, "", "convert"], [197, 2, 1, "", "convert_from"], [197, 2, 1, "", "cyclotomic_field"], [197, 2, 1, "", "denom"], [197, 2, 1, "", "div"], [197, 2, 1, "", "drop"], [197, 5, 1, "", "dtype"], [197, 2, 1, "", "evalf"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "frac_field"], [197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_ComplexField"], [197, 2, 1, "", "from_ExpressionDomain"], [197, 2, 1, "", "from_ExpressionRawDomain"], [197, 2, 1, "", "from_FF"], [197, 2, 1, "", "from_FF_gmpy"], [197, 2, 1, "", "from_FF_python"], [197, 2, 1, "", "from_FractionField"], [197, 2, 1, "", "from_GlobalPolynomialRing"], [197, 2, 1, "", "from_MonogenicFiniteExtension"], [197, 2, 1, "", "from_PolynomialRing"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_RealField"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "gcdex"], [197, 2, 1, "", "get_exact"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "half_gcdex"], [197, 5, 1, "", "has_assoc_Field"], [197, 5, 1, "", "has_assoc_Ring"], [197, 2, 1, "", "inject"], [197, 2, 1, "", "invert"], [197, 5, 1, "", "is_Field"], [197, 5, 1, "", "is_PID"], [197, 5, 1, "", "is_Ring"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_one"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "log"], [197, 2, 1, "", "map"], [197, 2, 1, "", "mul"], [197, 2, 1, "", "n"], [197, 2, 1, "", "neg"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "of_type"], [197, 2, 1, "", "old_frac_field"], [197, 2, 1, "", "old_poly_ring"], [197, 5, 1, "", "one"], [197, 2, 1, "", "poly_ring"], [197, 2, 1, "", "pos"], [197, 2, 1, "", "pow"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "rem"], [197, 2, 1, "", "revert"], [197, 2, 1, "", "sqrt"], [197, 2, 1, "", "sub"], [197, 2, 1, "", "to_sympy"], [197, 4, 1, "", "tp"], [197, 2, 1, "", "unify"], [197, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[197, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[197, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[197, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[197, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[197, 2, 1, "", "div"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "is_unit"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "rem"], [197, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[197, 1, 1, "", "GaussianDomain"], [197, 1, 1, "", "GaussianElement"], [197, 1, 1, "", "GaussianInteger"], [197, 1, 1, "", "GaussianIntegerRing"], [197, 1, 1, "", "GaussianRational"], [197, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[197, 2, 1, "", "from_AlgebraicField"], [197, 2, 1, "", "from_QQ"], [197, 2, 1, "", "from_QQ_gmpy"], [197, 2, 1, "", "from_QQ_python"], [197, 2, 1, "", "from_ZZ"], [197, 2, 1, "", "from_ZZ_gmpy"], [197, 2, 1, "", "from_ZZ_python"], [197, 2, 1, "", "from_sympy"], [197, 2, 1, "", "inject"], [197, 2, 1, "", "is_negative"], [197, 2, 1, "", "is_nonnegative"], [197, 2, 1, "", "is_nonpositive"], [197, 2, 1, "", "is_positive"], [197, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[197, 2, 1, "", "new"], [197, 2, 1, "", "parent"], [197, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[197, 5, 1, "", "dtype"], [197, 2, 1, "", "from_GaussianIntegerRing"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[197, 2, 1, "", "as_AlgebraicField"], [197, 2, 1, "", "denom"], [197, 5, 1, "", "dtype"], [197, 2, 1, "", "from_GaussianIntegerRing"], [197, 2, 1, "", "from_GaussianRationalField"], [197, 2, 1, "", "get_field"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[197, 1, 1, "", "ComplexElement"], [197, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[197, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[197, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[197, 2, 1, "", "denom"], [197, 2, 1, "", "div"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "free_module"], [197, 2, 1, "", "get_ring"], [197, 2, 1, "", "ideal"], [197, 2, 1, "", "invert"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "quotient_ring"], [197, 2, 1, "", "rem"], [197, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[197, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[197, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[199, 3, 1, "", "dmp_cancel"], [199, 3, 1, "", "dmp_content"], [199, 3, 1, "", "dmp_discriminant"], [199, 3, 1, "", "dmp_euclidean_prs"], [199, 3, 1, "", "dmp_ff_prs_gcd"], [199, 3, 1, "", "dmp_gcd"], [199, 3, 1, "", "dmp_gcdex"], [199, 3, 1, "", "dmp_half_gcdex"], [199, 3, 1, "", "dmp_inner_gcd"], [199, 3, 1, "", "dmp_inner_subresultants"], [199, 3, 1, "", "dmp_invert"], [199, 3, 1, "", "dmp_lcm"], [199, 3, 1, "", "dmp_primitive"], [199, 3, 1, "", "dmp_primitive_prs"], [199, 3, 1, "", "dmp_prs_resultant"], [199, 3, 1, "", "dmp_qq_collins_resultant"], [199, 3, 1, "", "dmp_qq_heu_gcd"], [199, 3, 1, "", "dmp_resultant"], [199, 3, 1, "", "dmp_rr_prs_gcd"], [199, 3, 1, "", "dmp_subresultants"], [199, 3, 1, "", "dmp_zz_collins_resultant"], [199, 3, 1, "", "dmp_zz_heu_gcd"], [199, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[199, 3, 1, "", "dmp_ext_factor"], [199, 3, 1, "", "dmp_factor_list"], [199, 3, 1, "", "dmp_factor_list_include"], [199, 3, 1, "", "dmp_irreducible_p"], [199, 3, 1, "", "dmp_trial_division"], [199, 3, 1, "", "dmp_zz_diophantine"], [199, 3, 1, "", "dmp_zz_factor"], [199, 3, 1, "", "dmp_zz_mignotte_bound"], [199, 3, 1, "", "dmp_zz_wang"], [199, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [199, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [199, 3, 1, "", "dmp_zz_wang_non_divisors"], [199, 3, 1, "", "dmp_zz_wang_test_points"], [199, 3, 1, "", "dup_cyclotomic_p"], [199, 3, 1, "", "dup_gf_factor"], [199, 3, 1, "", "dup_zz_cyclotomic_factor"], [199, 3, 1, "", "dup_zz_cyclotomic_poly"], [199, 3, 1, "", "dup_zz_factor"], [199, 3, 1, "", "dup_zz_factor_sqf"], [199, 3, 1, "", "dup_zz_hensel_lift"], [199, 3, 1, "", "dup_zz_hensel_step"], [199, 3, 1, "", "dup_zz_irreducible_p"], [199, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[199, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[197, 1, 1, "", "FracElement"], [197, 1, 1, "", "FracField"], [197, 3, 1, "", "field"], [197, 3, 1, "", "sfield"], [197, 3, 1, "", "vfield"], [197, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[197, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[199, 3, 1, "", "gf_LC"], [199, 3, 1, "", "gf_Qbasis"], [199, 3, 1, "", "gf_Qmatrix"], [199, 3, 1, "", "gf_TC"], [199, 3, 1, "", "gf_add"], [199, 3, 1, "", "gf_add_ground"], [199, 3, 1, "", "gf_add_mul"], [199, 3, 1, "", "gf_berlekamp"], [199, 3, 1, "", "gf_cofactors"], [199, 3, 1, "", "gf_compose"], [199, 3, 1, "", "gf_compose_mod"], [199, 3, 1, "", "gf_crt"], [199, 3, 1, "", "gf_crt1"], [199, 3, 1, "", "gf_crt2"], [199, 3, 1, "", "gf_csolve"], [199, 3, 1, "", "gf_degree"], [199, 3, 1, "", "gf_diff"], [199, 3, 1, "", "gf_div"], [199, 3, 1, "", "gf_eval"], [199, 3, 1, "", "gf_expand"], [199, 3, 1, "", "gf_exquo"], [199, 3, 1, "", "gf_factor"], [199, 3, 1, "", "gf_factor_sqf"], [199, 3, 1, "", "gf_from_dict"], [199, 3, 1, "", "gf_from_int_poly"], [199, 3, 1, "", "gf_gcd"], [199, 3, 1, "", "gf_gcdex"], [199, 3, 1, "", "gf_int"], [199, 3, 1, "", "gf_irreducible"], [199, 3, 1, "", "gf_irreducible_p"], [199, 3, 1, "", "gf_lcm"], [199, 3, 1, "", "gf_lshift"], [199, 3, 1, "", "gf_monic"], [199, 3, 1, "", "gf_mul"], [199, 3, 1, "", "gf_mul_ground"], [199, 3, 1, "", "gf_multi_eval"], [199, 3, 1, "", "gf_neg"], [199, 3, 1, "", "gf_normal"], [199, 3, 1, "", "gf_pow"], [199, 3, 1, "", "gf_pow_mod"], [199, 3, 1, "", "gf_quo"], [199, 3, 1, "", "gf_quo_ground"], [199, 3, 1, "", "gf_random"], [199, 3, 1, "", "gf_rem"], [199, 3, 1, "", "gf_rshift"], [199, 3, 1, "", "gf_shoup"], [199, 3, 1, "", "gf_sqf_list"], [199, 3, 1, "", "gf_sqf_p"], [199, 3, 1, "", "gf_sqf_part"], [199, 3, 1, "", "gf_sqr"], [199, 3, 1, "", "gf_strip"], [199, 3, 1, "", "gf_sub"], [199, 3, 1, "", "gf_sub_ground"], [199, 3, 1, "", "gf_sub_mul"], [199, 3, 1, "", "gf_to_dict"], [199, 3, 1, "", "gf_to_int_poly"], [199, 3, 1, "", "gf_trace_map"], [199, 3, 1, "", "gf_trunc"], [199, 3, 1, "", "gf_value"], [199, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[199, 3, 1, "", "groebner"], [199, 3, 1, "", "is_groebner"], [199, 3, 1, "", "is_minimal"], [199, 3, 1, "", "is_reduced"], [199, 3, 1, "", "red_groebner"], [199, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[195, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[195, 2, 1, "", "add"], [195, 2, 1, "", "charpoly"], [195, 2, 1, "", "det"], [195, 2, 1, "", "hstack"], [195, 2, 1, "", "inv"], [195, 2, 1, "", "is_lower"], [195, 2, 1, "", "is_upper"], [195, 2, 1, "", "is_zero_matrix"], [195, 2, 1, "", "lu"], [195, 2, 1, "", "lu_solve"], [195, 2, 1, "", "matmul"], [195, 2, 1, "", "neg"], [195, 2, 1, "", "rref"], [195, 2, 1, "", "scc"], [195, 2, 1, "", "sub"], [195, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[195, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[195, 2, 1, "", "add"], [195, 2, 1, "", "charpoly"], [195, 2, 1, "", "columnspace"], [195, 2, 1, "", "convert_to"], [195, 2, 1, "", "det"], [195, 2, 1, "", "diag"], [195, 2, 1, "", "eye"], [195, 2, 1, "", "from_Matrix"], [195, 2, 1, "", "from_dict_sympy"], [195, 2, 1, "", "from_list"], [195, 2, 1, "", "from_list_sympy"], [195, 2, 1, "", "from_rep"], [195, 2, 1, "", "hstack"], [195, 2, 1, "", "inv"], [195, 4, 1, "", "is_lower"], [195, 4, 1, "", "is_upper"], [195, 2, 1, "", "lu"], [195, 2, 1, "", "lu_solve"], [195, 2, 1, "", "matmul"], [195, 2, 1, "", "mul"], [195, 2, 1, "", "neg"], [195, 2, 1, "", "nullspace"], [195, 2, 1, "", "ones"], [195, 2, 1, "", "pow"], [195, 2, 1, "", "rowspace"], [195, 2, 1, "", "rref"], [195, 2, 1, "", "scc"], [195, 2, 1, "", "sub"], [195, 2, 1, "", "to_Matrix"], [195, 2, 1, "", "to_dense"], [195, 2, 1, "", "to_field"], [195, 2, 1, "", "to_sparse"], [195, 2, 1, "", "transpose"], [195, 2, 1, "", "unify"], [195, 2, 1, "", "vstack"], [195, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[195, 3, 1, "", "hermite_normal_form"], [195, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[195, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[195, 2, 1, "", "add"], [195, 2, 1, "", "charpoly"], [195, 2, 1, "", "convert_to"], [195, 2, 1, "", "copy"], [195, 2, 1, "", "det"], [195, 2, 1, "", "eye"], [195, 2, 1, "", "from_ddm"], [195, 2, 1, "", "from_list"], [195, 2, 1, "", "hstack"], [195, 2, 1, "", "inv"], [195, 2, 1, "", "is_lower"], [195, 2, 1, "", "is_upper"], [195, 2, 1, "", "is_zero_matrix"], [195, 2, 1, "", "lu"], [195, 2, 1, "", "lu_solve"], [195, 2, 1, "", "matmul"], [195, 2, 1, "", "mul"], [195, 2, 1, "", "neg"], [195, 2, 1, "", "new"], [195, 2, 1, "", "nullspace"], [195, 2, 1, "", "rref"], [195, 2, 1, "", "scc"], [195, 2, 1, "", "sub"], [195, 2, 1, "", "to_ddm"], [195, 2, 1, "", "to_list"], [195, 2, 1, "", "transpose"], [195, 2, 1, "", "vstack"], [195, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[199, 3, 1, "", "_modgcd_multivariate_p"], [199, 3, 1, "", "func_field_modgcd"], [199, 3, 1, "", "modgcd_bivariate"], [199, 3, 1, "", "modgcd_multivariate"], [199, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[202, 1, 1, "", "Monomial"], [202, 3, 1, "", "itermonomials"], [202, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[202, 2, 1, "", "as_expr"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[201, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[201, 3, 1, "", "minimal_polynomial"], [201, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[201, 0, 0, "-", "modules"], [201, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[201, 1, 1, "", "EndomorphismRing"], [201, 1, 1, "", "InnerEndomorphism"], [201, 1, 1, "", "Module"], [201, 1, 1, "", "ModuleElement"], [201, 1, 1, "", "ModuleEndomorphism"], [201, 1, 1, "", "ModuleHomomorphism"], [201, 1, 1, "", "PowerBasis"], [201, 1, 1, "", "PowerBasisElement"], [201, 1, 1, "", "Submodule"], [201, 3, 1, "", "find_min_poly"], [201, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[201, 2, 1, "", "__init__"], [201, 2, 1, "", "inner_endomorphism"], [201, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[201, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[201, 2, 1, "", "__call__"], [201, 2, 1, "", "ancestors"], [201, 2, 1, "", "basis_elements"], [201, 2, 1, "", "element_from_rational"], [201, 2, 1, "", "endomorphism_ring"], [201, 2, 1, "", "is_compat_col"], [201, 2, 1, "", "mult_tab"], [201, 4, 1, "", "n"], [201, 2, 1, "", "nearest_common_ancestor"], [201, 4, 1, "", "number_field"], [201, 2, 1, "", "one"], [201, 4, 1, "", "parent"], [201, 2, 1, "", "power_basis_ancestor"], [201, 2, 1, "", "represent"], [201, 2, 1, "", "starts_with_unity"], [201, 2, 1, "", "submodule_from_gens"], [201, 2, 1, "", "submodule_from_matrix"], [201, 2, 1, "", "whole_submodule"], [201, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[201, 4, 1, "", "QQ_col"], [201, 2, 1, "", "__add__"], [201, 2, 1, "", "__init__"], [201, 2, 1, "", "__mod__"], [201, 2, 1, "", "__mul__"], [201, 2, 1, "", "column"], [201, 2, 1, "", "equiv"], [201, 2, 1, "", "from_int_list"], [201, 2, 1, "", "is_compat"], [201, 4, 1, "", "n"], [201, 2, 1, "", "over_power_basis"], [201, 2, 1, "", "reduced"], [201, 2, 1, "", "reduced_mod_p"], [201, 2, 1, "", "to_ancestor"], [201, 2, 1, "", "to_parent"], [201, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[201, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[201, 2, 1, "", "__init__"], [201, 2, 1, "", "kernel"], [201, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[201, 2, 1, "", "__init__"], [201, 2, 1, "", "element_from_ANP"], [201, 2, 1, "", "element_from_alg_num"], [201, 2, 1, "", "element_from_poly"], [201, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[201, 4, 1, "", "T"], [201, 2, 1, "", "as_expr"], [201, 4, 1, "", "generator"], [201, 4, 1, "", "is_rational"], [201, 2, 1, "", "norm"], [201, 2, 1, "", "numerator"], [201, 2, 1, "", "poly"], [201, 2, 1, "", "to_ANP"], [201, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[201, 4, 1, "", "QQ_matrix"], [201, 2, 1, "", "__init__"], [201, 2, 1, "", "add"], [201, 2, 1, "", "basis_element_pullbacks"], [201, 2, 1, "", "discard_before"], [201, 2, 1, "", "mul"], [201, 2, 1, "", "reduce_element"], [201, 2, 1, "", "reduced"], [201, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[201, 1, 1, "", "PrimeIdeal"], [201, 3, 1, "", "prime_decomp"], [201, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[201, 2, 1, "", "__add__"], [201, 2, 1, "", "__init__"], [201, 2, 1, "", "__mul__"], [201, 2, 1, "", "as_submodule"], [201, 4, 1, "", "is_inert"], [201, 2, 1, "", "reduce_ANP"], [201, 2, 1, "", "reduce_alg_num"], [201, 2, 1, "", "reduce_element"], [201, 2, 1, "", "repr"], [201, 2, 1, "", "test_factor"], [201, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[201, 3, 1, "", "field_isomorphism"], [201, 3, 1, "", "primitive_element"], [201, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[201, 1, 1, "", "AlgIntPowers"], [201, 3, 1, "", "coeff_search"], [201, 3, 1, "", "extract_fundamental_discriminant"], [201, 3, 1, "", "get_num_denom"], [201, 3, 1, "", "is_int"], [201, 3, 1, "", "is_rat"], [201, 3, 1, "", "isolate"], [201, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[201, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[202, 1, 1, "", "GradedLexOrder"], [202, 1, 1, "", "LexOrder"], [202, 1, 1, "", "MonomialOrder"], [202, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[202, 3, 1, "", "chebyshevt_poly"], [202, 3, 1, "", "chebyshevu_poly"], [202, 3, 1, "", "gegenbauer_poly"], [202, 3, 1, "", "hermite_poly"], [202, 3, 1, "", "hermite_prob_poly"], [202, 3, 1, "", "jacobi_poly"], [202, 3, 1, "", "laguerre_poly"], [202, 3, 1, "", "legendre_poly"], [202, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[202, 3, 1, "", "apart"], [202, 3, 1, "", "apart_list"], [202, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[197, 1, 1, "", "ANP"], [197, 1, 1, "", "DMF"], [197, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[197, 2, 1, "", "LC"], [197, 2, 1, "", "TC"], [197, 4, 1, "", "is_ground"], [197, 4, 1, "", "is_one"], [197, 4, 1, "", "is_zero"], [197, 2, 1, "", "pow"], [197, 2, 1, "", "to_dict"], [197, 2, 1, "", "to_list"], [197, 2, 1, "", "to_sympy_dict"], [197, 2, 1, "", "to_sympy_list"], [197, 2, 1, "", "to_tuple"], [197, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[197, 2, 1, "", "add"], [197, 2, 1, "", "cancel"], [197, 2, 1, "", "denom"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "frac_unify"], [197, 2, 1, "", "half_per"], [197, 2, 1, "", "invert"], [197, 4, 1, "", "is_one"], [197, 4, 1, "", "is_zero"], [197, 2, 1, "", "mul"], [197, 2, 1, "", "neg"], [197, 2, 1, "", "numer"], [197, 2, 1, "", "per"], [197, 2, 1, "", "poly_unify"], [197, 2, 1, "", "pow"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[197, 2, 1, "", "LC"], [197, 2, 1, "", "TC"], [197, 2, 1, "", "abs"], [197, 2, 1, "", "add"], [197, 2, 1, "", "add_ground"], [197, 2, 1, "", "all_coeffs"], [197, 2, 1, "", "all_monoms"], [197, 2, 1, "", "all_terms"], [197, 2, 1, "", "cancel"], [197, 2, 1, "", "cauchy_lower_bound"], [197, 2, 1, "", "cauchy_upper_bound"], [197, 2, 1, "", "clear_denoms"], [197, 2, 1, "", "coeffs"], [197, 2, 1, "", "cofactors"], [197, 2, 1, "", "compose"], [197, 2, 1, "", "content"], [197, 2, 1, "", "convert"], [197, 2, 1, "", "count_complex_roots"], [197, 2, 1, "", "count_real_roots"], [197, 2, 1, "", "decompose"], [197, 2, 1, "", "deflate"], [197, 2, 1, "", "degree"], [197, 2, 1, "", "degree_list"], [197, 2, 1, "", "diff"], [197, 2, 1, "", "discriminant"], [197, 2, 1, "", "div"], [197, 2, 1, "", "eject"], [197, 2, 1, "", "eval"], [197, 2, 1, "", "exclude"], [197, 2, 1, "", "exquo"], [197, 2, 1, "", "exquo_ground"], [197, 2, 1, "", "factor_list"], [197, 2, 1, "", "factor_list_include"], [197, 2, 1, "", "from_dict"], [197, 2, 1, "", "from_list"], [197, 2, 1, "", "from_sympy_list"], [197, 2, 1, "", "gcd"], [197, 2, 1, "", "gcdex"], [197, 2, 1, "", "gff_list"], [197, 2, 1, "", "half_gcdex"], [197, 2, 1, "", "homogeneous_order"], [197, 2, 1, "", "homogenize"], [197, 2, 1, "", "inject"], [197, 2, 1, "", "integrate"], [197, 2, 1, "", "intervals"], [197, 2, 1, "", "invert"], [197, 4, 1, "", "is_cyclotomic"], [197, 4, 1, "", "is_ground"], [197, 4, 1, "", "is_homogeneous"], [197, 4, 1, "", "is_irreducible"], [197, 4, 1, "", "is_linear"], [197, 4, 1, "", "is_monic"], [197, 4, 1, "", "is_monomial"], [197, 4, 1, "", "is_one"], [197, 4, 1, "", "is_primitive"], [197, 4, 1, "", "is_quadratic"], [197, 4, 1, "", "is_sqf"], [197, 4, 1, "", "is_zero"], [197, 2, 1, "", "l1_norm"], [197, 2, 1, "", "l2_norm_squared"], [197, 2, 1, "", "lcm"], [197, 2, 1, "", "lift"], [197, 2, 1, "", "max_norm"], [197, 2, 1, "", "mignotte_sep_bound_squared"], [197, 2, 1, "", "monic"], [197, 2, 1, "", "monoms"], [197, 2, 1, "", "mul"], [197, 2, 1, "", "mul_ground"], [197, 2, 1, "", "neg"], [197, 2, 1, "", "norm"], [197, 2, 1, "", "nth"], [197, 2, 1, "", "pdiv"], [197, 2, 1, "", "per"], [197, 2, 1, "", "permute"], [197, 2, 1, "", "pexquo"], [197, 2, 1, "", "pow"], [197, 2, 1, "", "pquo"], [197, 2, 1, "", "prem"], [197, 2, 1, "", "primitive"], [197, 2, 1, "", "quo"], [197, 2, 1, "", "quo_ground"], [197, 2, 1, "", "refine_root"], [197, 2, 1, "", "rem"], [197, 2, 1, "", "resultant"], [197, 2, 1, "", "revert"], [197, 2, 1, "", "shift"], [197, 2, 1, "", "slice"], [197, 2, 1, "", "sqf_list"], [197, 2, 1, "", "sqf_list_include"], [197, 2, 1, "", "sqf_norm"], [197, 2, 1, "", "sqf_part"], [197, 2, 1, "", "sqr"], [197, 2, 1, "", "sturm"], [197, 2, 1, "", "sub"], [197, 2, 1, "", "sub_ground"], [197, 2, 1, "", "subresultants"], [197, 2, 1, "", "terms"], [197, 2, 1, "", "terms_gcd"], [197, 2, 1, "", "to_dict"], [197, 2, 1, "", "to_exact"], [197, 2, 1, "", "to_field"], [197, 2, 1, "", "to_list"], [197, 2, 1, "", "to_ring"], [197, 2, 1, "", "to_sympy_dict"], [197, 2, 1, "", "to_sympy_list"], [197, 2, 1, "", "to_tuple"], [197, 2, 1, "", "total_degree"], [197, 2, 1, "", "transform"], [197, 2, 1, "", "trunc"], [197, 2, 1, "", "unify"]], "sympy.polys": [[199, 0, 0, "-", "polyconfig"], [199, 0, 0, "-", "polyoptions"], [204, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[199, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[199, 1, 1, "", "BasePolynomialError"], [199, 1, 1, "", "CoercionFailed"], [199, 1, 1, "", "ComputationFailed"], [199, 1, 1, "", "DomainError"], [199, 1, 1, "", "EvaluationFailed"], [199, 1, 1, "", "ExactQuotientFailed"], [199, 1, 1, "", "ExtraneousFactors"], [199, 1, 1, "", "FlagError"], [199, 1, 1, "", "GeneratorsError"], [199, 1, 1, "", "GeneratorsNeeded"], [199, 1, 1, "", "HeuristicGCDFailed"], [199, 1, 1, "", "HomomorphismFailed"], [199, 1, 1, "", "IsomorphismFailed"], [199, 1, 1, "", "MultivariatePolynomialError"], [199, 1, 1, "", "NotAlgebraic"], [199, 1, 1, "", "NotInvertible"], [199, 1, 1, "", "NotReversible"], [199, 1, 1, "", "OperationNotSupported"], [199, 1, 1, "", "OptionError"], [199, 1, 1, "", "PolificationFailed"], [199, 1, 1, "", "PolynomialError"], [199, 1, 1, "", "RefinementFailed"], [199, 1, 1, "", "UnificationFailed"], [199, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[202, 3, 1, "", "horner"], [202, 3, 1, "", "interpolate"], [202, 3, 1, "", "symmetrize"], [202, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[199, 1, 1, "", "Options"], [199, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[199, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[202, 3, 1, "", "roots"]], "sympy.polys.polytools": [[202, 1, 1, "", "GroebnerBasis"], [202, 3, 1, "", "LC"], [202, 3, 1, "", "LM"], [202, 3, 1, "", "LT"], [202, 1, 1, "", "Poly"], [202, 1, 1, "", "PurePoly"], [202, 3, 1, "", "cancel"], [202, 3, 1, "", "cofactors"], [202, 3, 1, "", "compose"], [202, 3, 1, "", "content"], [202, 3, 1, "", "count_roots"], [202, 3, 1, "", "decompose"], [202, 3, 1, "", "degree"], [202, 3, 1, "", "degree_list"], [202, 3, 1, "", "discriminant"], [202, 3, 1, "", "div"], [202, 3, 1, "", "exquo"], [202, 3, 1, "", "factor"], [202, 3, 1, "", "factor_list"], [202, 3, 1, "", "gcd"], [202, 3, 1, "", "gcd_list"], [202, 3, 1, "", "gcdex"], [202, 3, 1, "", "gff"], [202, 3, 1, "", "gff_list"], [202, 3, 1, "", "groebner"], [202, 3, 1, "", "ground_roots"], [202, 3, 1, "", "half_gcdex"], [202, 3, 1, "", "intervals"], [202, 3, 1, "", "invert"], [202, 3, 1, "", "is_zero_dimensional"], [202, 3, 1, "", "lcm"], [202, 3, 1, "", "lcm_list"], [202, 3, 1, "", "monic"], [202, 3, 1, "", "nroots"], [202, 3, 1, "", "nth_power_roots_poly"], [202, 3, 1, "", "parallel_poly_from_expr"], [202, 3, 1, "", "pdiv"], [202, 3, 1, "", "pexquo"], [202, 3, 1, "", "poly"], [202, 3, 1, "", "poly_from_expr"], [202, 3, 1, "", "pquo"], [202, 3, 1, "", "prem"], [202, 3, 1, "", "primitive"], [202, 3, 1, "", "quo"], [202, 3, 1, "", "real_roots"], [202, 3, 1, "", "reduced"], [202, 3, 1, "", "refine_root"], [202, 3, 1, "", "rem"], [202, 3, 1, "", "resultant"], [202, 3, 1, "", "sqf"], [202, 3, 1, "", "sqf_list"], [202, 3, 1, "", "sqf_norm"], [202, 3, 1, "", "sqf_part"], [202, 3, 1, "", "sturm"], [202, 3, 1, "", "subresultants"], [202, 3, 1, "", "terms_gcd"], [202, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[202, 2, 1, "", "contains"], [202, 2, 1, "", "fglm"], [202, 4, 1, "", "is_zero_dimensional"], [202, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[202, 2, 1, "", "EC"], [202, 2, 1, "", "EM"], [202, 2, 1, "", "ET"], [202, 2, 1, "", "LC"], [202, 2, 1, "", "LM"], [202, 2, 1, "", "LT"], [202, 2, 1, "", "TC"], [202, 2, 1, "", "abs"], [202, 2, 1, "", "add"], [202, 2, 1, "", "add_ground"], [202, 2, 1, "", "all_coeffs"], [202, 2, 1, "", "all_monoms"], [202, 2, 1, "", "all_roots"], [202, 2, 1, "", "all_terms"], [202, 2, 1, "", "as_dict"], [202, 2, 1, "", "as_expr"], [202, 2, 1, "", "as_list"], [202, 2, 1, "", "as_poly"], [202, 2, 1, "", "cancel"], [202, 2, 1, "", "clear_denoms"], [202, 2, 1, "", "coeff_monomial"], [202, 2, 1, "", "coeffs"], [202, 2, 1, "", "cofactors"], [202, 2, 1, "", "compose"], [202, 2, 1, "", "content"], [202, 2, 1, "", "count_roots"], [202, 2, 1, "", "decompose"], [202, 2, 1, "", "deflate"], [202, 2, 1, "", "degree"], [202, 2, 1, "", "degree_list"], [202, 2, 1, "", "diff"], [202, 2, 1, "", "discriminant"], [202, 2, 1, "", "dispersion"], [202, 2, 1, "", "dispersionset"], [202, 2, 1, "", "div"], [202, 4, 1, "", "domain"], [202, 2, 1, "", "eject"], [202, 2, 1, "", "eval"], [202, 2, 1, "", "exclude"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "exquo_ground"], [202, 2, 1, "", "factor_list"], [202, 2, 1, "", "factor_list_include"], [202, 4, 1, "", "free_symbols"], [202, 4, 1, "", "free_symbols_in_domain"], [202, 2, 1, "", "from_dict"], [202, 2, 1, "", "from_expr"], [202, 2, 1, "", "from_list"], [202, 2, 1, "", "from_poly"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "gcdex"], [202, 4, 1, "", "gen"], [202, 2, 1, "", "get_domain"], [202, 2, 1, "", "get_modulus"], [202, 2, 1, "", "gff_list"], [202, 2, 1, "", "ground_roots"], [202, 2, 1, "", "half_gcdex"], [202, 2, 1, "", "has_only_gens"], [202, 2, 1, "", "homogeneous_order"], [202, 2, 1, "", "homogenize"], [202, 2, 1, "", "inject"], [202, 2, 1, "", "integrate"], [202, 2, 1, "", "intervals"], [202, 2, 1, "", "invert"], [202, 4, 1, "", "is_cyclotomic"], [202, 4, 1, "", "is_ground"], [202, 4, 1, "", "is_homogeneous"], [202, 4, 1, "", "is_irreducible"], [202, 4, 1, "", "is_linear"], [202, 4, 1, "", "is_monic"], [202, 4, 1, "", "is_monomial"], [202, 4, 1, "", "is_multivariate"], [202, 4, 1, "", "is_one"], [202, 4, 1, "", "is_primitive"], [202, 4, 1, "", "is_quadratic"], [202, 4, 1, "", "is_sqf"], [202, 4, 1, "", "is_univariate"], [202, 4, 1, "", "is_zero"], [202, 2, 1, "", "l1_norm"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "length"], [202, 2, 1, "", "lift"], [202, 2, 1, "", "ltrim"], [202, 2, 1, "", "match"], [202, 2, 1, "", "max_norm"], [202, 2, 1, "", "monic"], [202, 2, 1, "", "monoms"], [202, 2, 1, "", "mul"], [202, 2, 1, "", "mul_ground"], [202, 2, 1, "", "neg"], [202, 2, 1, "", "new"], [202, 2, 1, "", "norm"], [202, 2, 1, "", "nroots"], [202, 2, 1, "", "nth"], [202, 2, 1, "", "nth_power_roots_poly"], [202, 4, 1, "", "one"], [202, 2, 1, "", "pdiv"], [202, 2, 1, "", "per"], [202, 2, 1, "", "pexquo"], [202, 2, 1, "", "pow"], [202, 2, 1, "", "pquo"], [202, 2, 1, "", "prem"], [202, 2, 1, "", "primitive"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "quo_ground"], [202, 2, 1, "", "rat_clear_denoms"], [202, 2, 1, "", "real_roots"], [202, 2, 1, "", "refine_root"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "reorder"], [202, 2, 1, "", "replace"], [202, 2, 1, "", "resultant"], [202, 2, 1, "", "retract"], [202, 2, 1, "", "revert"], [202, 2, 1, "", "root"], [202, 2, 1, "", "same_root"], [202, 2, 1, "", "set_domain"], [202, 2, 1, "", "set_modulus"], [202, 2, 1, "", "shift"], [202, 2, 1, "", "slice"], [202, 2, 1, "", "sqf_list"], [202, 2, 1, "", "sqf_list_include"], [202, 2, 1, "", "sqf_norm"], [202, 2, 1, "", "sqf_part"], [202, 2, 1, "", "sqr"], [202, 2, 1, "", "sturm"], [202, 2, 1, "", "sub"], [202, 2, 1, "", "sub_ground"], [202, 2, 1, "", "subresultants"], [202, 2, 1, "", "terms"], [202, 2, 1, "", "terms_gcd"], [202, 2, 1, "", "termwise"], [202, 2, 1, "", "to_exact"], [202, 2, 1, "", "to_field"], [202, 2, 1, "", "to_ring"], [202, 2, 1, "", "total_degree"], [202, 2, 1, "", "transform"], [202, 2, 1, "", "trunc"], [202, 2, 1, "", "unify"], [202, 4, 1, "", "unit"], [202, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[202, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[202, 3, 1, "", "together"]], "sympy.polys.ring_series": [[203, 3, 1, "", "_tan1"], [203, 3, 1, "", "mul_xin"], [203, 3, 1, "", "pow_xin"], [203, 3, 1, "", "rs_LambertW"], [203, 3, 1, "", "rs_asin"], [203, 3, 1, "", "rs_atan"], [203, 3, 1, "", "rs_atanh"], [203, 3, 1, "", "rs_compose_add"], [203, 3, 1, "", "rs_cos"], [203, 3, 1, "", "rs_cos_sin"], [203, 3, 1, "", "rs_cosh"], [203, 3, 1, "", "rs_cot"], [203, 3, 1, "", "rs_diff"], [203, 3, 1, "", "rs_exp"], [203, 3, 1, "", "rs_fun"], [203, 3, 1, "", "rs_hadamard_exp"], [203, 3, 1, "", "rs_integrate"], [203, 3, 1, "", "rs_is_puiseux"], [203, 3, 1, "", "rs_log"], [203, 3, 1, "", "rs_mul"], [203, 3, 1, "", "rs_newton"], [203, 3, 1, "", "rs_nth_root"], [203, 3, 1, "", "rs_pow"], [203, 3, 1, "", "rs_puiseux"], [203, 3, 1, "", "rs_puiseux2"], [203, 3, 1, "", "rs_series_from_list"], [203, 3, 1, "", "rs_series_inversion"], [203, 3, 1, "", "rs_series_reversion"], [203, 3, 1, "", "rs_sin"], [203, 3, 1, "", "rs_sinh"], [203, 3, 1, "", "rs_square"], [203, 3, 1, "", "rs_subs"], [203, 3, 1, "", "rs_tan"], [203, 3, 1, "", "rs_tanh"], [203, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[197, 1, 1, "", "PolyElement"], [197, 1, 1, "", "PolyRing"], [197, 3, 1, "", "ring"], [197, 3, 1, "", "sring"], [197, 3, 1, "", "vring"], [197, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[197, 2, 1, "", "almosteq"], [197, 2, 1, "", "cancel"], [197, 2, 1, "", "coeff"], [197, 2, 1, "", "coeffs"], [197, 2, 1, "", "const"], [197, 2, 1, "", "content"], [197, 2, 1, "", "copy"], [197, 2, 1, "", "degree"], [197, 2, 1, "", "degrees"], [197, 2, 1, "", "diff"], [197, 2, 1, "", "div"], [197, 2, 1, "", "imul_num"], [197, 2, 1, "", "itercoeffs"], [197, 2, 1, "", "itermonoms"], [197, 2, 1, "", "iterterms"], [197, 2, 1, "", "leading_expv"], [197, 2, 1, "", "leading_monom"], [197, 2, 1, "", "leading_term"], [197, 2, 1, "", "listcoeffs"], [197, 2, 1, "", "listmonoms"], [197, 2, 1, "", "listterms"], [197, 2, 1, "", "monic"], [197, 2, 1, "", "monoms"], [197, 2, 1, "", "primitive"], [197, 2, 1, "", "square"], [197, 2, 1, "", "strip_zero"], [197, 2, 1, "", "tail_degree"], [197, 2, 1, "", "tail_degrees"], [197, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[197, 2, 1, "", "add"], [197, 2, 1, "", "add_gens"], [197, 2, 1, "", "compose"], [197, 2, 1, "", "drop"], [197, 2, 1, "", "drop_to_ground"], [197, 2, 1, "", "index"], [197, 2, 1, "", "monomial_basis"], [197, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[202, 1, 1, "", "ComplexRootOf"], [202, 1, 1, "", "RootOf"], [202, 1, 1, "", "RootSum"], [202, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[202, 2, 1, "", "_all_roots"], [202, 2, 1, "", "_complexes_index"], [202, 2, 1, "", "_complexes_sorted"], [202, 2, 1, "", "_count_roots"], [202, 2, 1, "", "_ensure_complexes_init"], [202, 2, 1, "", "_ensure_reals_init"], [202, 2, 1, "", "_eval_evalf"], [202, 2, 1, "", "_eval_is_imaginary"], [202, 2, 1, "", "_eval_is_real"], [202, 2, 1, "", "_get_complexes"], [202, 2, 1, "", "_get_complexes_sqf"], [202, 2, 1, "", "_get_interval"], [202, 2, 1, "", "_get_reals"], [202, 2, 1, "", "_get_reals_sqf"], [202, 2, 1, "", "_get_roots"], [202, 2, 1, "", "_indexed_root"], [202, 2, 1, "", "_new"], [202, 2, 1, "", "_postprocess_root"], [202, 2, 1, "", "_preprocess_roots"], [202, 2, 1, "", "_real_roots"], [202, 2, 1, "", "_reals_index"], [202, 2, 1, "", "_reals_sorted"], [202, 2, 1, "", "_refine_complexes"], [202, 2, 1, "", "_reset"], [202, 2, 1, "", "_roots_trivial"], [202, 2, 1, "", "_set_interval"], [202, 2, 1, "", "all_roots"], [202, 2, 1, "", "clear_cache"], [202, 2, 1, "", "eval_approx"], [202, 2, 1, "", "eval_rational"], [202, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[202, 2, 1, "", "new"]], "sympy.polys.solvers": [[204, 3, 1, "", "_solve_lin_sys"], [204, 3, 1, "", "_solve_lin_sys_component"], [204, 3, 1, "", "eqs_to_matrix"], [204, 3, 1, "", "solve_lin_sys"], [204, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[202, 3, 1, "", "cyclotomic_poly"], [202, 3, 1, "", "interpolating_poly"], [202, 3, 1, "", "random_poly"], [202, 3, 1, "", "swinnerton_dyer_poly"], [202, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[206, 0, 0, "-", "aesaracode"], [206, 0, 0, "-", "c"], [206, 0, 0, "-", "codeprinter"], [206, 0, 0, "-", "conventions"], [206, 0, 0, "-", "cxx"], [206, 0, 0, "-", "fortran"], [206, 0, 0, "-", "gtk"], [206, 0, 0, "-", "jscode"], [206, 0, 0, "-", "julia"], [206, 0, 0, "-", "lambdarepr"], [206, 0, 0, "-", "latex"], [206, 0, 0, "-", "maple"], [206, 0, 0, "-", "mathematica"], [206, 0, 0, "-", "mathml"], [206, 0, 0, "-", "octave"], [206, 0, 0, "-", "precedence"], [206, 0, 0, "-", "pretty"], [206, 0, 0, "-", "preview"], [206, 0, 0, "-", "printer"], [206, 0, 0, "-", "pycode"], [206, 0, 0, "-", "python"], [206, 0, 0, "-", "rcode"], [206, 0, 0, "-", "repr"], [206, 0, 0, "-", "rust"], [206, 0, 0, "-", "smtlib"], [206, 0, 0, "-", "str"], [206, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[206, 1, 1, "", "AesaraPrinter"], [206, 3, 1, "", "aesara_code"], [206, 3, 1, "", "aesara_function"], [206, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[206, 2, 1, "", "doprint"], [206, 5, 1, "", "printmethod"]], "sympy.printing.c": [[206, 1, 1, "", "C89CodePrinter"], [206, 1, 1, "", "C99CodePrinter"], [206, 3, 1, "", "ccode"], [206, 6, 1, "", "known_functions_C89"], [206, 6, 1, "", "known_functions_C99"], [206, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[206, 7, 1, "", "AssignmentError"], [206, 1, 1, "", "CodePrinter"], [206, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[206, 2, 1, "", "doprint"], [206, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[206, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[206, 1, 1, "", "CXX11CodePrinter"], [206, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[206, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[206, 1, 1, "", "FCodePrinter"], [206, 3, 1, "", "fcode"], [206, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[206, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[206, 1, 1, "", "JavascriptCodePrinter"], [206, 3, 1, "", "jscode"], [206, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[206, 1, 1, "", "JuliaCodePrinter"], [206, 3, 1, "", "julia_code"], [206, 6, 1, "", "known_fcns_src1"], [206, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[206, 1, 1, "", "LambdaPrinter"], [206, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[206, 1, 1, "", "LatexPrinter"], [206, 6, 1, "", "accepted_latex_functions"], [206, 3, 1, "", "latex"], [206, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[206, 2, 1, "", "parenthesize_super"], [206, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[206, 1, 1, "", "MapleCodePrinter"], [206, 3, 1, "", "maple_code"], [206, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[206, 1, 1, "", "MCodePrinter"], [206, 6, 1, "", "known_functions"], [206, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[206, 1, 1, "", "MathMLContentPrinter"], [206, 1, 1, "", "MathMLPresentationPrinter"], [206, 1, 1, "", "MathMLPrinterBase"], [206, 3, 1, "", "mathml"], [206, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[206, 2, 1, "", "mathml_tag"], [206, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[206, 2, 1, "", "mathml_tag"], [206, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[206, 2, 1, "", "doprint"]], "sympy.printing.octave": [[206, 1, 1, "", "OctaveCodePrinter"], [206, 6, 1, "", "known_fcns_src1"], [206, 6, 1, "", "known_fcns_src2"], [206, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[206, 6, 1, "", "PRECEDENCE"], [206, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [206, 6, 1, "", "PRECEDENCE_VALUES"], [206, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[206, 0, 0, "-", "pretty"], [206, 0, 0, "-", "pretty_symbology"], [206, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[206, 1, 1, "", "PrettyPrinter"], [206, 3, 1, "", "pretty"], [206, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[206, 3, 1, "", "G"], [206, 3, 1, "", "U"], [206, 3, 1, "", "VF"], [206, 3, 1, "", "annotated"], [206, 6, 1, "", "atoms_table"], [206, 6, 1, "", "digit_2txt"], [206, 6, 1, "", "frac"], [206, 3, 1, "", "g"], [206, 6, 1, "", "greek_letters"], [206, 3, 1, "", "hobj"], [206, 3, 1, "", "pretty_atom"], [206, 3, 1, "", "pretty_symbol"], [206, 3, 1, "", "pretty_try_use_unicode"], [206, 3, 1, "", "pretty_use_unicode"], [206, 6, 1, "", "root"], [206, 6, 1, "", "sub"], [206, 6, 1, "", "sup"], [206, 6, 1, "", "symb_2txt"], [206, 3, 1, "", "vobj"], [206, 3, 1, "", "xobj"], [206, 3, 1, "", "xstr"], [206, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[206, 1, 1, "", "prettyForm"], [206, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[206, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[206, 2, 1, "", "above"], [206, 2, 1, "", "below"], [206, 2, 1, "", "height"], [206, 2, 1, "", "left"], [206, 2, 1, "", "leftslash"], [206, 2, 1, "", "next"], [206, 2, 1, "", "parens"], [206, 2, 1, "", "render"], [206, 2, 1, "", "right"], [206, 2, 1, "", "root"], [206, 2, 1, "", "stack"], [206, 2, 1, "", "terminal_width"], [206, 2, 1, "", "width"]], "sympy.printing.preview": [[206, 3, 1, "", "preview"]], "sympy.printing.printer": [[206, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[206, 2, 1, "", "_print"], [206, 2, 1, "", "doprint"], [206, 5, 1, "", "printmethod"], [206, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[206, 1, 1, "", "MpmathPrinter"], [206, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[206, 1, 1, "", "RCodePrinter"], [206, 6, 1, "", "known_functions"], [206, 3, 1, "", "print_rcode"], [206, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[206, 1, 1, "", "ReprPrinter"], [206, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[206, 2, 1, "", "emptyPrinter"], [206, 5, 1, "", "printmethod"], [206, 2, 1, "", "reprify"]], "sympy.printing.rust": [[206, 1, 1, "", "RustCodePrinter"], [206, 6, 1, "", "known_functions"], [206, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[206, 2, 1, "", "indent_code"], [206, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[206, 1, 1, "", "SMTLibPrinter"], [206, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[206, 5, 1, "", "_default_settings"], [206, 5, 1, "", "printmethod"]], "sympy.printing.str": [[206, 1, 1, "", "StrPrinter"], [206, 3, 1, "", "sstr"], [206, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[206, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[206, 3, 1, "", "pprint_nodes"], [206, 3, 1, "", "print_node"], [206, 3, 1, "", "print_tree"], [206, 3, 1, "", "tree"]], "sympy.series.acceleration": [[213, 3, 1, "", "richardson"], [213, 3, 1, "", "shanks"]], "sympy.series.formal": [[208, 1, 1, "", "FiniteFormalPowerSeries"], [208, 1, 1, "", "FormalPowerSeries"], [208, 1, 1, "", "FormalPowerSeriesCompose"], [208, 1, 1, "", "FormalPowerSeriesInverse"], [208, 1, 1, "", "FormalPowerSeriesProduct"], [208, 3, 1, "", "compute_fps"], [208, 3, 1, "", "exp_re"], [208, 3, 1, "", "fps"], [208, 3, 1, "", "hyper_algorithm"], [208, 3, 1, "", "hyper_re"], [208, 3, 1, "", "rational_algorithm"], [208, 3, 1, "", "rational_independent"], [208, 3, 1, "", "rsolve_hypergeometric"], [208, 3, 1, "", "simpleDE"], [208, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[208, 2, 1, "", "coeff_bell"], [208, 2, 1, "", "compose"], [208, 4, 1, "", "infinite"], [208, 2, 1, "", "integrate"], [208, 2, 1, "", "inverse"], [208, 2, 1, "", "polynomial"], [208, 2, 1, "", "product"], [208, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[208, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[208, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[208, 4, 1, "", "function"]], "sympy.series.fourier": [[209, 1, 1, "", "FourierSeries"], [209, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[209, 2, 1, "", "scale"], [209, 2, 1, "", "scalex"], [209, 2, 1, "", "shift"], [209, 2, 1, "", "shiftx"], [209, 2, 1, "", "sigma_approximation"], [209, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[213, 1, 1, "", "SubsSet"], [213, 3, 1, "", "build_expression_tree"], [213, 3, 1, "", "calculate_series"], [213, 3, 1, "", "compare"], [213, 3, 1, "", "gruntz"], [213, 3, 1, "", "limitinf"], [213, 3, 1, "", "mrv"], [213, 3, 1, "", "mrv_leadterm"], [213, 3, 1, "", "mrv_max1"], [213, 3, 1, "", "mrv_max3"], [213, 3, 1, "", "rewrite"], [213, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[213, 2, 1, "", "copy"], [213, 2, 1, "", "do_subs"], [213, 2, 1, "", "meets"], [213, 2, 1, "", "union"]], "sympy.series.limits": [[213, 1, 1, "", "Limit"], [213, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[213, 2, 1, "", "doit"]], "sympy.series.limitseq": [[211, 3, 1, "", "difference_delta"], [211, 3, 1, "", "dominant"], [211, 3, 1, "", "limit_seq"]], "sympy.series.order": [[213, 1, 1, "", "Order"]], "sympy.series.order.Order": [[213, 2, 1, "", "contains"]], "sympy.series.residues": [[213, 3, 1, "", "residue"]], "sympy.series.sequences": [[212, 1, 1, "", "EmptySequence"], [212, 1, 1, "", "RecursiveSeq"], [212, 1, 1, "", "SeqAdd"], [212, 1, 1, "", "SeqBase"], [212, 1, 1, "", "SeqFormula"], [212, 1, 1, "", "SeqMul"], [212, 1, 1, "", "SeqPer"], [212, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[212, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[212, 4, 1, "", "initial"], [212, 4, 1, "", "interval"], [212, 4, 1, "", "n"], [212, 4, 1, "", "recurrence"], [212, 4, 1, "", "start"], [212, 4, 1, "", "stop"], [212, 4, 1, "", "y"], [212, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[212, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[212, 2, 1, "", "coeff"], [212, 2, 1, "", "coeff_mul"], [212, 2, 1, "", "find_linear_recurrence"], [212, 4, 1, "", "free_symbols"], [212, 4, 1, "", "gen"], [212, 4, 1, "", "interval"], [212, 4, 1, "", "length"], [212, 4, 1, "", "start"], [212, 4, 1, "", "stop"], [212, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[212, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[212, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[212, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[213, 3, 1, "", "series"]], "sympy.sets": [[214, 0, 0, "-", "conditionset"], [214, 0, 0, "-", "fancysets"], [214, 0, 0, "-", "powerset"], [214, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[214, 1, 1, "", "ConditionSet"], [214, 1, 1, "", "Contains"], [214, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[214, 1, 1, "", "CartesianComplexRegion"], [214, 1, 1, "", "ComplexRegion"], [214, 1, 1, "", "Complexes"], [214, 1, 1, "", "ImageSet"], [214, 1, 1, "", "Integers"], [214, 1, 1, "", "Naturals"], [214, 1, 1, "", "Naturals0"], [214, 1, 1, "", "PolarComplexRegion"], [214, 1, 1, "", "Range"], [214, 1, 1, "", "Rationals"], [214, 1, 1, "", "Reals"], [214, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[214, 4, 1, "", "a_interval"], [214, 4, 1, "", "b_interval"], [214, 2, 1, "", "from_real"], [214, 4, 1, "", "psets"], [214, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[214, 2, 1, "", "as_relational"], [214, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[214, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[214, 1, 1, "", "Complement"], [214, 1, 1, "", "DisjointUnion"], [214, 1, 1, "", "EmptySet"], [214, 1, 1, "", "FiniteSet"], [214, 1, 1, "", "Intersection"], [214, 1, 1, "", "Interval"], [214, 1, 1, "", "ProductSet"], [214, 1, 1, "", "Set"], [214, 1, 1, "", "SymmetricDifference"], [214, 1, 1, "", "Union"], [214, 1, 1, "", "UniversalSet"], [214, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[214, 2, 1, "", "as_relational"], [214, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[214, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[214, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[214, 2, 1, "", "Lopen"], [214, 2, 1, "", "Ropen"], [214, 2, 1, "", "as_relational"], [214, 4, 1, "", "end"], [214, 4, 1, "", "is_left_unbounded"], [214, 4, 1, "", "is_right_unbounded"], [214, 4, 1, "", "left_open"], [214, 2, 1, "", "open"], [214, 4, 1, "", "right_open"], [214, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[214, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[214, 4, 1, "", "boundary"], [214, 4, 1, "", "closure"], [214, 2, 1, "", "complement"], [214, 2, 1, "", "contains"], [214, 4, 1, "", "inf"], [214, 4, 1, "", "interior"], [214, 2, 1, "", "intersect"], [214, 2, 1, "", "intersection"], [214, 4, 1, "", "is_closed"], [214, 2, 1, "", "is_disjoint"], [214, 4, 1, "", "is_open"], [214, 2, 1, "", "is_proper_subset"], [214, 2, 1, "", "is_proper_superset"], [214, 2, 1, "", "is_subset"], [214, 2, 1, "", "is_superset"], [214, 2, 1, "", "isdisjoint"], [214, 2, 1, "", "issubset"], [214, 2, 1, "", "issuperset"], [214, 4, 1, "", "kind"], [214, 4, 1, "", "measure"], [214, 2, 1, "", "powerset"], [214, 4, 1, "", "sup"], [214, 2, 1, "", "symmetric_difference"], [214, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[214, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[214, 2, 1, "", "as_relational"]], "sympy.simplify": [[218, 0, 0, "-", "combsimp"], [218, 0, 0, "-", "cse_main"], [218, 0, 0, "-", "epathtools"], [218, 0, 0, "-", "hyperexpand"], [216, 0, 0, "-", "hyperexpand_doc"], [218, 0, 0, "-", "powsimp"], [218, 0, 0, "-", "radsimp"], [218, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [218, 0, 0, "-", "sqrtdenest"], [218, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[218, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[218, 3, 1, "", "cse"], [218, 3, 1, "", "opt_cse"], [218, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[218, 1, 1, "", "EPath"], [218, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[218, 2, 1, "", "apply"], [218, 2, 1, "", "select"]], "sympy.simplify.fu": [[215, 3, 1, "", "TR0"], [215, 3, 1, "", "TR1"], [215, 3, 1, "", "TR10"], [215, 3, 1, "", "TR10i"], [215, 3, 1, "", "TR11"], [215, 3, 1, "", "TR111"], [215, 3, 1, "", "TR12"], [215, 3, 1, "", "TR12i"], [215, 3, 1, "", "TR13"], [215, 3, 1, "", "TR14"], [215, 3, 1, "", "TR15"], [215, 3, 1, "", "TR16"], [215, 3, 1, "", "TR2"], [215, 3, 1, "", "TR22"], [215, 3, 1, "", "TR2i"], [215, 3, 1, "", "TR3"], [215, 3, 1, "", "TR4"], [215, 3, 1, "", "TR5"], [215, 3, 1, "", "TR6"], [215, 3, 1, "", "TR7"], [215, 3, 1, "", "TR8"], [215, 3, 1, "", "TR9"], [215, 3, 1, "", "TRmorrie"], [215, 3, 1, "", "TRpower"], [215, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[218, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[218, 3, 1, "", "powdenest"], [218, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[218, 3, 1, "", "collect"], [218, 3, 1, "", "collect_const"], [218, 3, 1, "", "collect_sqrt"], [218, 3, 1, "", "fraction"], [218, 3, 1, "", "rad_rationalize"], [218, 3, 1, "", "radsimp"], [218, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[218, 3, 1, "", "ratsimp"], [218, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[218, 3, 1, "", "besselsimp"], [218, 3, 1, "", "hypersimilar"], [218, 3, 1, "", "hypersimp"], [218, 3, 1, "", "kroneckersimp"], [218, 3, 1, "", "logcombine"], [218, 3, 1, "", "nsimplify"], [218, 3, 1, "", "nthroot"], [218, 3, 1, "", "posify"], [218, 3, 1, "", "separatevars"], [218, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[218, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[218, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[224, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[219, 1, 1, "", "BinaryQuadratic"], [219, 1, 1, "", "CubicThue"], [219, 1, 1, "", "DiophantineEquationType"], [219, 1, 1, "", "DiophantineSolutionSet"], [219, 1, 1, "", "GeneralPythagorean"], [219, 1, 1, "", "GeneralSumOfEvenPowers"], [219, 1, 1, "", "GeneralSumOfSquares"], [219, 1, 1, "", "HomogeneousGeneralQuadratic"], [219, 1, 1, "", "HomogeneousTernaryQuadratic"], [219, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [219, 1, 1, "", "InhomogeneousGeneralQuadratic"], [219, 1, 1, "", "InhomogeneousTernaryQuadratic"], [219, 1, 1, "", "Linear"], [219, 3, 1, "", "PQa"], [219, 1, 1, "", "Univariate"], [219, 3, 1, "", "base_solution_linear"], [219, 3, 1, "", "classify_diop"], [219, 3, 1, "", "cornacchia"], [219, 3, 1, "", "descent"], [219, 3, 1, "", "diop_DN"], [219, 3, 1, "", "diop_bf_DN"], [219, 3, 1, "", "diop_general_pythagorean"], [219, 3, 1, "", "diop_general_sum_of_even_powers"], [219, 3, 1, "", "diop_general_sum_of_squares"], [219, 3, 1, "", "diop_linear"], [219, 3, 1, "", "diop_quadratic"], [219, 3, 1, "", "diop_solve"], [219, 3, 1, "", "diop_ternary_quadratic"], [219, 3, 1, "", "diop_ternary_quadratic_normal"], [219, 3, 1, "", "diophantine"], [219, 3, 1, "", "divisible"], [219, 3, 1, "", "equivalent"], [219, 3, 1, "", "find_DN"], [219, 3, 1, "", "gaussian_reduce"], [219, 3, 1, "", "holzer"], [219, 3, 1, "", "ldescent"], [219, 3, 1, "", "merge_solution"], [219, 3, 1, "", "parametrize_ternary_quadratic"], [219, 3, 1, "", "partition"], [219, 3, 1, "", "power_representation"], [219, 3, 1, "", "prime_as_sum_of_two_squares"], [219, 3, 1, "", "reconstruct"], [219, 3, 1, "", "sqf_normal"], [219, 3, 1, "", "square_factor"], [219, 3, 1, "", "sum_of_four_squares"], [219, 3, 1, "", "sum_of_powers"], [219, 3, 1, "", "sum_of_squares"], [219, 3, 1, "", "sum_of_three_squares"], [219, 3, 1, "", "transformation_to_DN"], [219, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[219, 2, 1, "", "matches"]], "sympy.solvers": [[221, 0, 0, "-", "inequalities"], [222, 0, 0, "-", "ode"], [223, 0, 0, "-", "pde"], [224, 0, 0, "-", "recurr"], [225, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[221, 3, 1, "", "reduce_abs_inequalities"], [221, 3, 1, "", "reduce_abs_inequality"], [221, 3, 1, "", "reduce_inequalities"], [221, 3, 1, "", "reduce_rational_inequalities"], [221, 3, 1, "", "solve_poly_inequalities"], [221, 3, 1, "", "solve_poly_inequality"], [221, 3, 1, "", "solve_rational_inequalities"], [221, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[222, 6, 1, "", "allhints"], [222, 3, 1, "", "checkinfsol"], [222, 3, 1, "", "checkodesol"], [222, 3, 1, "", "classify_ode"], [222, 3, 1, "", "constantsimp"], [222, 3, 1, "", "dsolve"], [222, 3, 1, "", "homogeneous_order"], [222, 3, 1, "", "infinitesimals"], [222, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[222, 3, 1, "", "lie_heuristic_abaco1_product"], [222, 3, 1, "", "lie_heuristic_abaco1_simple"], [222, 3, 1, "", "lie_heuristic_abaco2_similar"], [222, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [222, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [222, 3, 1, "", "lie_heuristic_bivariate"], [222, 3, 1, "", "lie_heuristic_chi"], [222, 3, 1, "", "lie_heuristic_function_sum"], [222, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[222, 3, 1, "", "_handle_Integral"], [222, 3, 1, "", "_linear_2eq_order1_type6"], [222, 3, 1, "", "_linear_2eq_order1_type7"], [222, 3, 1, "", "_nonlinear_2eq_order1_type1"], [222, 3, 1, "", "_nonlinear_2eq_order1_type2"], [222, 3, 1, "", "_nonlinear_2eq_order1_type3"], [222, 3, 1, "", "_nonlinear_2eq_order1_type4"], [222, 3, 1, "", "_nonlinear_2eq_order1_type5"], [222, 3, 1, "", "_nonlinear_3eq_order1_type1"], [222, 3, 1, "", "_nonlinear_3eq_order1_type2"], [222, 3, 1, "", "_nonlinear_3eq_order1_type3"], [222, 3, 1, "", "_nonlinear_3eq_order1_type4"], [222, 3, 1, "", "_nonlinear_3eq_order1_type5"], [222, 3, 1, "", "constant_renumber"], [222, 3, 1, "", "ode_1st_power_series"], [222, 3, 1, "", "ode_2nd_power_series_ordinary"], [222, 3, 1, "", "ode_2nd_power_series_regular"], [222, 3, 1, "", "ode_sol_simplicity"], [222, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[222, 3, 1, "", "compute_m_ybar"], [222, 3, 1, "", "construct_c"], [222, 3, 1, "", "construct_d"], [222, 3, 1, "", "get_gen_sol_from_part_sol"], [222, 3, 1, "", "rational_laurent_series"], [222, 3, 1, "", "remove_redundant_sols"], [222, 3, 1, "", "riccati_inverse_normal"], [222, 3, 1, "", "riccati_normal"], [222, 3, 1, "", "riccati_reduced"], [222, 3, 1, "", "solve_aux_eq"], [222, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[222, 1, 1, "", "AlmostLinear"], [222, 1, 1, "", "Bernoulli"], [222, 1, 1, "", "Factorable"], [222, 1, 1, "", "FirstExact"], [222, 1, 1, "", "FirstLinear"], [222, 1, 1, "", "HomogeneousCoeffBest"], [222, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [222, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [222, 1, 1, "", "LieGroup"], [222, 1, 1, "", "LinearCoefficients"], [222, 1, 1, "", "Liouville"], [222, 1, 1, "", "NthAlgebraic"], [222, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [222, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [222, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [222, 1, 1, "", "NthLinearEulerEqHomogeneous"], [222, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [222, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [222, 1, 1, "", "NthOrderReducible"], [222, 1, 1, "", "RationalRiccati"], [222, 1, 1, "", "RiccatiSpecial"], [222, 1, 1, "", "SecondHypergeometric"], [222, 1, 1, "", "SecondLinearAiry"], [222, 1, 1, "", "SecondLinearBessel"], [222, 1, 1, "", "Separable"], [222, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[222, 3, 1, "", "canonical_odes"], [222, 3, 1, "", "dsolve_system"], [222, 3, 1, "", "linear_ode_to_matrix"], [222, 3, 1, "", "linodesolve"], [222, 3, 1, "", "linodesolve_type"], [222, 3, 1, "", "matrix_exp"], [222, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[223, 3, 1, "", "checkpdesol"], [223, 3, 1, "", "classify_pde"], [223, 3, 1, "", "pde_1st_linear_constant_coeff"], [223, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [223, 3, 1, "", "pde_1st_linear_variable_coeff"], [223, 3, 1, "", "pde_separate"], [223, 3, 1, "", "pde_separate_add"], [223, 3, 1, "", "pde_separate_mul"], [223, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[224, 3, 1, "", "solve_poly_system"], [224, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[224, 3, 1, "", "rsolve"], [224, 3, 1, "", "rsolve_hyper"], [224, 3, 1, "", "rsolve_poly"], [224, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[224, 3, 1, "", "checksol"], [224, 3, 1, "", "nsolve"], [224, 3, 1, "", "solve"], [224, 3, 1, "", "solve_linear"], [224, 3, 1, "", "solve_linear_system"], [224, 3, 1, "", "solve_linear_system_LU"], [224, 3, 1, "", "solve_undetermined_coeffs"], [224, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[225, 3, 1, "", "_is_exponential"], [225, 3, 1, "", "_is_logarithmic"], [225, 3, 1, "", "_solve_exponential"], [225, 3, 1, "", "_solve_logarithm"], [225, 3, 1, "", "_transolve"], [225, 3, 1, "", "domain_check"], [225, 3, 1, "", "invert_complex"], [225, 3, 1, "", "invert_real"], [225, 3, 1, "", "linear_eq_to_matrix"], [225, 3, 1, "", "linsolve"], [225, 3, 1, "", "nonlinsolve"], [225, 3, 1, "", "solveset"], [225, 3, 1, "", "solveset_complex"], [225, 3, 1, "", "solveset_real"], [225, 3, 1, "", "solvify"]], "sympy.stats": [[226, 3, 1, "", "Arcsin"], [226, 3, 1, "", "Benini"], [226, 3, 1, "", "Bernoulli"], [226, 1, 1, "", "BernoulliProcess"], [226, 3, 1, "", "Beta"], [226, 3, 1, "", "BetaBinomial"], [226, 3, 1, "", "BetaNoncentral"], [226, 3, 1, "", "BetaPrime"], [226, 3, 1, "", "Binomial"], [226, 3, 1, "", "BoundedPareto"], [226, 3, 1, "", "Cauchy"], [226, 1, 1, "", "CentralMoment"], [226, 3, 1, "", "Chi"], [226, 3, 1, "", "ChiNoncentral"], [226, 3, 1, "", "ChiSquared"], [226, 3, 1, "", "Coin"], [226, 1, 1, "", "ContinuousMarkovChain"], [226, 3, 1, "", "ContinuousRV"], [226, 1, 1, "", "Covariance"], [226, 1, 1, "", "CrossCovarianceMatrix"], [226, 3, 1, "", "Dagum"], [226, 3, 1, "", "Die"], [226, 1, 1, "", "DiscreteMarkovChain"], [226, 3, 1, "", "DiscreteUniform"], [226, 3, 1, "", "E"], [226, 3, 1, "", "Erlang"], [226, 3, 1, "", "ExGaussian"], [226, 1, 1, "", "Expectation"], [226, 1, 1, "", "ExpectationMatrix"], [226, 3, 1, "", "Exponential"], [226, 3, 1, "", "FDistribution"], [226, 3, 1, "", "FiniteRV"], [226, 3, 1, "", "FisherZ"], [226, 3, 1, "", "Frechet"], [226, 3, 1, "", "Gamma"], [226, 3, 1, "", "GammaInverse"], [226, 1, 1, "", "GammaProcess"], [226, 3, 1, "", "GeneralizedMultivariateLogGamma"], [226, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [226, 3, 1, "", "Geometric"], [226, 3, 1, "", "Gompertz"], [226, 3, 1, "", "Gumbel"], [226, 3, 1, "", "Hermite"], [226, 3, 1, "", "Hypergeometric"], [226, 3, 1, "", "JointRV"], [226, 3, 1, "", "Kumaraswamy"], [226, 3, 1, "", "Laplace"], [226, 3, 1, "", "Levy"], [226, 3, 1, "", "LogLogistic"], [226, 3, 1, "", "LogNormal"], [226, 3, 1, "", "Logarithmic"], [226, 3, 1, "", "Logistic"], [226, 3, 1, "", "Lomax"], [226, 3, 1, "", "MatrixGamma"], [226, 3, 1, "", "MatrixNormal"], [226, 3, 1, "", "Maxwell"], [226, 1, 1, "", "Moment"], [226, 3, 1, "", "Moyal"], [226, 3, 1, "", "Multinomial"], [226, 3, 1, "", "MultivariateBeta"], [226, 3, 1, "", "MultivariateEwens"], [226, 3, 1, "", "MultivariateLaplace"], [226, 3, 1, "", "MultivariateNormal"], [226, 3, 1, "", "MultivariateT"], [226, 3, 1, "", "Nakagami"], [226, 3, 1, "", "NegativeBinomial"], [226, 3, 1, "", "NegativeMultinomial"], [226, 3, 1, "", "Normal"], [226, 3, 1, "", "NormalGamma"], [226, 3, 1, "", "P"], [226, 3, 1, "", "Pareto"], [226, 3, 1, "", "Poisson"], [226, 1, 1, "", "PoissonProcess"], [226, 3, 1, "", "PowerFunction"], [226, 1, 1, "", "Probability"], [226, 3, 1, "", "QuadraticU"], [226, 3, 1, "", "Rademacher"], [226, 3, 1, "", "RaisedCosine"], [226, 3, 1, "", "Rayleigh"], [226, 3, 1, "", "Reciprocal"], [226, 3, 1, "", "ShiftedGompertz"], [226, 3, 1, "", "Skellam"], [226, 3, 1, "", "StudentT"], [226, 3, 1, "", "Trapezoidal"], [226, 3, 1, "", "Triangular"], [226, 3, 1, "", "Uniform"], [226, 3, 1, "", "UniformSum"], [226, 1, 1, "", "Variance"], [226, 1, 1, "", "VarianceMatrix"], [226, 3, 1, "", "VonMises"], [226, 3, 1, "", "Wald"], [226, 3, 1, "", "Weibull"], [226, 1, 1, "", "WienerProcess"], [226, 3, 1, "", "WignerSemicircle"], [226, 3, 1, "", "Wishart"], [226, 3, 1, "", "YuleSimon"], [226, 3, 1, "", "Zeta"], [226, 3, 1, "", "cmoment"], [226, 3, 1, "", "correlation"], [226, 3, 1, "", "coskewness"], [226, 3, 1, "", "covariance"], [226, 0, 0, "-", "crv"], [226, 0, 0, "-", "crv_types"], [226, 3, 1, "", "density"], [226, 3, 1, "", "entropy"], [226, 3, 1, "", "factorial_moment"], [226, 0, 0, "-", "frv"], [226, 0, 0, "-", "frv_types"], [226, 3, 1, "", "given"], [226, 3, 1, "", "kurtosis"], [226, 3, 1, "", "marginal_distribution"], [226, 3, 1, "", "median"], [226, 3, 1, "", "moment"], [226, 3, 1, "", "quantile"], [226, 0, 0, "-", "rv"], [226, 3, 1, "", "sample"], [226, 3, 1, "", "sample_iter"], [226, 3, 1, "", "skewness"], [226, 3, 1, "", "std"], [226, 3, 1, "", "variance"], [226, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[226, 2, 1, "", "expectation"], [226, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[226, 2, 1, "", "absorbing_probabilities"], [226, 2, 1, "", "canonical_form"], [226, 2, 1, "", "communication_classes"], [226, 2, 1, "", "decompose"], [226, 2, 1, "", "fixed_row_vector"], [226, 2, 1, "", "fundamental_matrix"], [226, 4, 1, "", "limiting_distribution"], [226, 2, 1, "", "sample"], [226, 2, 1, "", "stationary_distribution"], [226, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[226, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[226, 1, 1, "", "ContinuousDomain"], [226, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[226, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[226, 3, 1, "", "Die"], [226, 3, 1, "", "Normal"]], "sympy.stats.frv": [[226, 1, 1, "", "FiniteDomain"], [226, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[226, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[226, 1, 1, "", "ConditionalDomain"], [226, 1, 1, "", "PSpace"], [226, 1, 1, "", "ProductDomain"], [226, 1, 1, "", "ProductPSpace"], [226, 1, 1, "", "RandomDomain"], [226, 1, 1, "", "RandomSymbol"], [226, 1, 1, "", "SingleDomain"], [226, 1, 1, "", "SinglePSpace"], [226, 3, 1, "", "pspace"], [226, 3, 1, "", "random_symbols"], [226, 3, 1, "", "rs_swap"], [226, 3, 1, "", "sampling_E"], [226, 3, 1, "", "sampling_P"], [226, 3, 1, "", "sampling_density"]], "sympy.tensor": [[227, 0, 0, "-", "array"], [230, 0, 0, "-", "index_methods"], [231, 0, 0, "-", "indexed"], [232, 0, 0, "-", "tensor"], [233, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[227, 1, 1, "", "ImmutableDenseNDimArray"], [227, 1, 1, "", "ImmutableSparseNDimArray"], [227, 1, 1, "", "MutableDenseNDimArray"], [227, 1, 1, "", "MutableSparseNDimArray"], [227, 3, 1, "", "derive_by_array"], [228, 0, 0, "-", "expressions"], [227, 3, 1, "", "permutedims"], [227, 3, 1, "", "tensorcontraction"], [227, 3, 1, "", "tensordiagonal"], [227, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[230, 3, 1, "", "get_contraction_structure"], [230, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[231, 1, 1, "", "Idx"], [231, 1, 1, "", "Indexed"], [231, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[231, 4, 1, "", "label"], [231, 4, 1, "", "lower"], [231, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[231, 4, 1, "", "base"], [231, 4, 1, "", "indices"], [231, 4, 1, "", "ranges"], [231, 4, 1, "", "rank"], [231, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[231, 4, 1, "", "label"], [231, 4, 1, "", "offset"], [231, 4, 1, "", "shape"], [231, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[232, 1, 1, "", "TensAdd"], [232, 1, 1, "", "TensExpr"], [232, 1, 1, "", "TensMul"], [232, 1, 1, "", "TensorHead"], [232, 1, 1, "", "TensorIndex"], [232, 1, 1, "", "TensorIndexType"], [232, 1, 1, "", "TensorSymmetry"], [232, 1, 1, "", "TensorType"], [232, 1, 1, "", "_TensorManager"], [232, 3, 1, "", "canon_bp"], [232, 3, 1, "", "riemann_cyclic"], [232, 3, 1, "", "riemann_cyclic_replace"], [232, 3, 1, "", "tensor_heads"], [232, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[232, 2, 1, "", "canon_bp"], [232, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[232, 2, 1, "", "get_matrix"], [232, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[232, 2, 1, "", "canon_bp"], [232, 2, 1, "", "contract_metric"], [232, 2, 1, "", "get_free_indices"], [232, 2, 1, "", "get_indices"], [232, 2, 1, "", "perm2tensor"], [232, 2, 1, "", "sorted_components"], [232, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[232, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[232, 2, 1, "", "direct_product"], [232, 2, 1, "", "fully_symmetric"], [232, 2, 1, "", "no_symmetry"], [232, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[232, 2, 1, "", "clear"], [232, 2, 1, "", "comm_i2symbol"], [232, 2, 1, "", "comm_symbols2i"], [232, 2, 1, "", "get_comm"], [232, 2, 1, "", "set_comm"], [232, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[233, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[235, 0, 0, "-", "pytest"], [236, 0, 0, "-", "randtest"], [237, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[235, 3, 1, "", "SKIP"], [235, 3, 1, "", "nocache_fail"], [235, 3, 1, "", "raises"], [235, 3, 1, "", "warns"], [235, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[237, 1, 1, "", "PyTestReporter"], [237, 1, 1, "", "Reporter"], [237, 1, 1, "", "SymPyDocTestFinder"], [237, 1, 1, "", "SymPyDocTestRunner"], [237, 1, 1, "", "SymPyOutputChecker"], [237, 1, 1, "", "SymPyTestResults"], [237, 3, 1, "", "convert_to_native_paths"], [237, 3, 1, "", "doctest"], [237, 3, 1, "", "get_sympy_dir"], [237, 3, 1, "", "raise_on_deprecated"], [237, 3, 1, "", "run_all_tests"], [237, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [237, 3, 1, "", "split_list"], [237, 3, 1, "", "sympytestfile"], [237, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[237, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[237, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[237, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[237, 5, 1, "", "attempted"], [237, 5, 1, "", "failed"]], "sympy.utilities": [[238, 0, 0, "-", "autowrap"], [239, 0, 0, "-", "codegen"], [240, 0, 0, "-", "decorator"], [241, 0, 0, "-", "enumerative"], [242, 0, 0, "-", "exceptions"], [244, 0, 0, "-", "iterables"], [245, 0, 0, "-", "lambdify"], [246, 0, 0, "-", "memoization"], [247, 0, 0, "-", "misc"], [248, 0, 0, "-", "pkgdata"], [249, 0, 0, "-", "source"], [250, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[238, 1, 1, "", "CodeWrapper"], [238, 1, 1, "", "CythonCodeWrapper"], [238, 1, 1, "", "DummyWrapper"], [238, 1, 1, "", "F2PyCodeWrapper"], [238, 1, 1, "", "UfuncifyCodeWrapper"], [238, 3, 1, "", "autowrap"], [238, 3, 1, "", "binary_function"], [238, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[238, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[238, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[239, 1, 1, "", "Argument"], [239, 1, 1, "", "CCodeGen"], [239, 1, 1, "", "CodeGen"], [239, 1, 1, "", "DataType"], [239, 1, 1, "", "FCodeGen"], [239, 1, 1, "", "JuliaCodeGen"], [239, 1, 1, "", "OctaveCodeGen"], [239, 1, 1, "", "OutputArgument"], [239, 1, 1, "", "Result"], [239, 1, 1, "", "Routine"], [239, 1, 1, "", "RustCodeGen"], [239, 3, 1, "", "codegen"], [239, 3, 1, "", "get_default_datatype"], [239, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[239, 2, 1, "", "dump_c"], [239, 2, 1, "", "dump_h"], [239, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[239, 2, 1, "", "dump_code"], [239, 2, 1, "", "routine"], [239, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[239, 2, 1, "", "dump_f95"], [239, 2, 1, "", "dump_h"], [239, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[239, 2, 1, "", "dump_jl"], [239, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[239, 2, 1, "", "dump_m"], [239, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[239, 4, 1, "", "result_variables"], [239, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[239, 2, 1, "", "dump_rs"], [239, 2, 1, "", "get_prototype"], [239, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[240, 3, 1, "", "conserve_mpmath_dps"], [240, 3, 1, "", "deprecated"], [240, 3, 1, "", "doctest_depends_on"], [240, 3, 1, "", "memoize_property"], [240, 1, 1, "", "no_attrs_in_subclass"], [240, 3, 1, "", "public"], [240, 3, 1, "", "threaded"], [240, 3, 1, "", "threaded_factory"], [240, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[241, 1, 1, "", "MultisetPartitionTraverser"], [241, 3, 1, "", "factoring_visitor"], [241, 3, 1, "", "list_visitor"], [241, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[241, 2, 1, "", "count_partitions"], [241, 2, 1, "", "enum_all"], [241, 2, 1, "", "enum_large"], [241, 2, 1, "", "enum_range"], [241, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[242, 7, 1, "", "SymPyDeprecationWarning"], [242, 3, 1, "", "ignore_warnings"], [242, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[244, 1, 1, "", "NotIterable"], [244, 3, 1, "", "binary_partitions"], [244, 3, 1, "", "bracelets"], [244, 3, 1, "", "capture"], [244, 3, 1, "", "common_prefix"], [244, 3, 1, "", "common_suffix"], [244, 3, 1, "", "connected_components"], [244, 3, 1, "", "dict_merge"], [244, 3, 1, "", "filter_symbols"], [244, 3, 1, "", "flatten"], [244, 3, 1, "", "generate_bell"], [244, 3, 1, "", "generate_derangements"], [244, 3, 1, "", "generate_involutions"], [244, 3, 1, "", "generate_oriented_forest"], [244, 3, 1, "", "group"], [244, 3, 1, "", "has_dups"], [244, 3, 1, "", "has_variety"], [244, 3, 1, "", "ibin"], [244, 3, 1, "", "iproduct"], [244, 3, 1, "", "is_palindromic"], [244, 3, 1, "", "is_sequence"], [244, 3, 1, "", "iterable"], [244, 3, 1, "", "kbins"], [244, 3, 1, "", "least_rotation"], [244, 3, 1, "", "minlex"], [244, 3, 1, "", "multiset"], [244, 3, 1, "", "multiset_combinations"], [244, 3, 1, "", "multiset_derangements"], [244, 3, 1, "", "multiset_partitions"], [244, 3, 1, "", "multiset_permutations"], [244, 3, 1, "", "necklaces"], [244, 3, 1, "", "numbered_symbols"], [244, 3, 1, "", "ordered_partitions"], [244, 3, 1, "", "partitions"], [244, 3, 1, "", "permute_signs"], [244, 3, 1, "", "postfixes"], [244, 3, 1, "", "prefixes"], [244, 3, 1, "", "random_derangement"], [244, 3, 1, "", "reshape"], [244, 3, 1, "", "rotate_left"], [244, 3, 1, "", "rotate_right"], [244, 3, 1, "", "rotations"], [244, 3, 1, "", "roundrobin"], [244, 3, 1, "", "runs"], [244, 3, 1, "", "sift"], [244, 3, 1, "", "signed_permutations"], [244, 3, 1, "", "strongly_connected_components"], [244, 3, 1, "", "subsets"], [244, 3, 1, "", "take"], [244, 3, 1, "", "topological_sort"], [244, 3, 1, "", "unflatten"], [244, 3, 1, "", "uniq"], [244, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[245, 3, 1, "", "implemented_function"], [245, 3, 1, "", "lambdastr"], [245, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[246, 3, 1, "", "assoc_recurrence_memo"], [246, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[247, 3, 1, "", "as_int"], [247, 3, 1, "", "debug"], [247, 3, 1, "", "debug_decorator"], [247, 3, 1, "", "filldedent"], [247, 3, 1, "", "find_executable"], [247, 3, 1, "", "func_name"], [247, 3, 1, "", "ordinal"], [247, 3, 1, "", "rawlines"], [247, 3, 1, "", "replace"], [247, 3, 1, "", "strlines"], [247, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[248, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[249, 3, 1, "", "get_class"], [249, 3, 1, "", "get_mod_func"], [249, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[250, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[251, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "create_new"], [251, 2, 1, "", "locate_new"], [251, 2, 1, "", "orient_new"], [251, 2, 1, "", "orient_new_axis"], [251, 2, 1, "", "orient_new_body"], [251, 2, 1, "", "orient_new_quaternion"], [251, 2, 1, "", "orient_new_space"], [251, 2, 1, "", "position_wrt"], [251, 2, 1, "", "rotation_matrix"], [251, 2, 1, "", "scalar_map"]], "sympy.vector": [[254, 3, 1, "", "curl"], [254, 3, 1, "", "divergence"], [254, 3, 1, "", "express"], [254, 3, 1, "", "gradient"], [254, 3, 1, "", "is_conservative"], [254, 3, 1, "", "is_solenoidal"], [254, 3, 1, "", "matrix_to_vector"], [254, 3, 1, "", "scalar_potential"], [254, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[251, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[251, 2, 1, "", "cross"], [251, 2, 1, "", "dot"], [251, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[251, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[251, 4, 1, "", "components"], [251, 2, 1, "", "cross"], [251, 2, 1, "", "dot"], [251, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[251, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[251, 2, 1, "", "multiplicity"], [251, 2, 1, "", "rational_parametrization"], [251, 2, 1, "", "regular_point"], [251, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[251, 1, 1, "", "ParametricIntegral"], [254, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[253, 1, 1, "", "AxisOrienter"], [253, 1, 1, "", "BodyOrienter"], [253, 1, 1, "", "Orienter"], [253, 1, 1, "", "QuaternionOrienter"], [253, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[253, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[253, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[253, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[253, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[251, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[251, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[251, 4, 1, "", "components"], [251, 2, 1, "", "cross"], [251, 2, 1, "", "dot"], [251, 2, 1, "", "magnitude"], [251, 2, 1, "", "normalize"], [251, 2, 1, "", "outer"], [251, 2, 1, "", "projection"], [251, 2, 1, "", "separate"], [251, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 23, 24, 26, 28, 29, 39, 80, 99, 138, 187, 196, 251, 254, 255, 258, 272, 274, 277], "build": [1, 3], "document": [1, 3, 4, 6, 7, 28], "requir": [1, 4], "depend": [1, 3, 135, 196, 256], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 192], "10": [1, 10, 101], "doc": [1, 197], "local": 1, "instal": [1, 28, 29, 99, 281], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 24, 26, 27, 199], "recommend": [3, 7], "interact": [3, 85, 192], "us": [3, 7, 10, 16, 23, 24, 25, 26, 27, 39, 60, 81, 82, 98, 101, 130, 135, 136, 190, 192, 203, 225, 256], "print": [3, 10, 20, 39, 85, 111, 119, 180, 186, 206, 282], "pars": [3, 27, 99], "logic": [3, 19, 87, 262, 265], "plot": [3, 10, 105, 151, 192], "lambdifi": [3, 10, 98, 245, 272], "code": [3, 4, 5, 7, 10, 39, 41, 111, 190, 206, 249, 262, 264], "gener": [3, 6, 7, 39, 47, 49, 196, 201, 225, 257, 262, 264], "autowrap": [3, 39, 238], "printer": [3, 39, 206, 282], "test": [3, 5, 10, 54, 87, 205, 234, 236, 237, 279], "onli": [3, 23, 225], "statist": 3, "symengin": 3, "backend": [3, 192], "experiment": [3, 99], "rubi": 3, "integr": [3, 10, 61, 65, 79, 81, 82, 83, 84, 111, 194, 201, 261, 273], "sage": 3, "develop": [3, 5, 57], "get": [3, 5, 12], "sourc": [3, 10, 12, 249], "run": [3, 5, 29, 237], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 135, 195, 196, 225, 277, 280], "i": [4, 12, 25, 82, 98, 135, 195, 206, 225, 277], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 27, 82], "doe": [4, 12, 225], "public": 4, "api": [4, 28, 78, 82, 84, 107, 114, 184, 225, 238, 239, 252, 262], "Not": [4, 23, 24, 25, 26, 27], "The": [4, 10, 18, 20, 40, 47, 82, 135, 176, 188, 201, 213, 216, 257, 258, 277], "purpos": 4, "technic": 4, "possibl": [4, 24, 279], "how": [4, 21, 28, 82, 190, 225], "long": 4, "should": [4, 98], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 57, 69, 135, 213, 215, 275, 284], "entri": [4, 93], "environ": 5, "setup": 5, "git": [5, 29], "virtual": 5, "docstr": [6, 7, 100, 103, 112, 113, 115, 116, 117, 118, 119, 120, 182, 183, 185, 186, 251, 253, 254], "style": [6, 7], "guid": [6, 7, 21, 28, 131, 188, 259], "guidelin": [6, 7], "format": [6, 7, 10, 27], "section": 6, "1": [6, 10, 82, 101, 121, 135, 147], "singl": [6, 12, 14, 23], "sentenc": 6, "summari": 6, "2": [6, 10, 82, 101, 121, 135], "explan": [6, 13, 28], "3": [6, 10, 84, 101, 121, 172], "exampl": [6, 20, 23, 25, 26, 30, 57, 69, 81, 84, 97, 101, 108, 122, 135, 139, 143, 174, 176, 190, 205, 206, 213, 216, 226, 227, 228, 231, 257, 277, 283], "4": [6, 10, 101], "paramet": [6, 216, 225], "5": [6, 10, 101], "see": [6, 57, 244, 257], "also": [6, 57, 244], "6": [6, 10, 101], "refer": [6, 18, 28, 31, 38, 56, 57, 59, 69, 75, 82, 84, 90, 91, 93, 95, 97, 99, 114, 137, 143, 146, 176, 188, 190, 191, 192, 193, 197, 199, 201, 202, 203, 213, 215, 216, 219, 225, 238, 239, 259, 262], "sampl": [6, 10], "class": [6, 15, 38, 39, 56, 59, 91, 93, 95, 97, 135, 181, 192, 201, 206, 219, 227, 251, 253], "ar": [6, 23, 190, 196, 225], "mathemat": [6, 12, 138], "function": [6, 10, 12, 20, 23, 25, 27, 39, 47, 56, 57, 63, 64, 65, 75, 76, 79, 80, 82, 87, 93, 97, 99, 101, 111, 136, 158, 161, 182, 183, 187, 192, 194, 196, 197, 202, 205, 206, 216, 219, 222, 223, 227, 254, 258, 282, 283], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 23, 39, 65, 182, 225, 226], "narr": 7, "markdown": 7, "prefer": [7, 27], "math": [7, 39], "latex": [7, 99, 282], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 28, 203], "make": [9, 24, 27], "list": [10, 12, 14, 23], "activ": 10, "silenc": 10, "warn": [10, 242], "version": 10, "12": 10, "new": [10, 256], "joint": [10, 115, 132, 226], "coordin": [10, 111, 125, 135, 192, 255, 256, 258, 260], "intermedi": 10, "frame": [10, 190], "attach": 10, "point": [10, 20, 61, 72, 111, 180, 189, 255], "argument": [10, 12, 225], "11": [10, 101], "mathematica": [10, 206], "parser": [10, 121], "redund": 10, "static": 10, "method": [10, 16, 20, 29, 116, 125, 128, 129, 130, 133, 134, 135, 206, 223, 225, 230, 256, 279], "carmichael": 10, "check": [10, 182], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 138, 225], "travers": [10, 57], "have": [10, 24, 26, 205], "been": 10, "move": [10, 216], "core": [10, 57, 90], "trace": 10, "compat": [10, 228], "submodul": [10, 69], "9": [10, 101], "expr_free_symbol": 10, "stat": [10, 226], "numsampl": 10, "n": [10, 227, 228], "poli": [10, 195, 196, 197, 204], "solver": [10, 204, 220, 221, 222, 224, 225, 284], "rawmatrix": 10, "non": 10, "expr": [10, 57], "object": [10, 15, 231], "matrix": [10, 35, 90, 93, 94, 135, 226, 279], "get_seg": 10, "attribut": [10, 40, 47], "mdft": 10, "physic": [10, 108, 111, 122, 132, 133, 134, 135, 136, 137, 138, 139, 178, 180, 184, 187, 188, 189, 190, 262, 268], "matric": [10, 16, 88, 89, 90, 91, 92, 93, 95, 108, 110, 228, 262, 266, 279], "privat": 10, "sparsematrix": [10, 95], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 101], "theanocod": 10, "assumpt": [10, 15, 18, 20, 34, 57], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 23, 57, 65, 87, 187, 190, 258], "7": [10, 101], "call": [10, 23, 27], "stochasticprocess": 10, "distribut": [10, 199, 226], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 39, 54, 55, 74, 93, 144, 201, 224, 243, 250, 262, 270], "misc": [10, 34], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 282], "pretti": [10, 206, 282], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 24, 26, 35, 69, 190, 214, 225, 282], "oper": [10, 12, 79, 93, 149, 158, 160, 161, 182, 187, 190, 216, 227, 233, 255, 257, 258, 272, 279], "longer": 10, "accept": 10, "arg": [10, 278], "variou": [10, 205], "randtest": 10, "mix": 10, "polynomi": [10, 65, 79, 194, 196, 197, 198, 199, 201, 202, 203, 205, 224, 283], "express": [10, 12, 24, 25, 39, 69, 76, 79, 87, 90, 99, 113, 196, 205, 228, 256, 272, 278], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 44], "permut": [10, 48, 49], "string": [10, 18, 27, 272], "fallback": 10, "sympifi": [10, 57], "creat": [10, 12, 20, 25, 93], "an": [10, 24, 25, 69, 121, 176, 216, 225, 278], "indefinit": 10, "eq": [10, 24], "tensor": [10, 53, 65, 170, 229, 232, 233], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 175, 176, 177, 179], "quantiti": [10, 174, 176, 178, 256], "is_emptyset": 10, "productset": 10, "iter": [10, 214, 244], "set_potential_energi": 10, "mechan": [10, 18, 102, 111, 114, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 158, 226], "condit": [10, 82, 214], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 193], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 23, 202], "lambda": 10, "evalu": [10, 12, 20, 61, 79, 138, 278], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 279], "col": 10, "jordan_block": 10, "dimens": [10, 69, 173, 176], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 24, 27, 205, 228], "dot": [10, 282], "product": [10, 60, 159, 170, 227, 257], "column": [10, 279], "vector": [10, 47, 131, 180, 182, 184, 187, 188, 189, 190, 199, 251, 252, 254, 255, 256, 258, 259, 260, 261], "geometri": [10, 59, 69, 193], "line3d": 10, "equat": [10, 22, 24, 25, 26, 27, 133, 134, 135, 174, 194, 219, 224, 225, 284], "need": [10, 176], "k": [10, 197], "modul": [10, 106, 141, 180, 188, 193, 194, 195, 196, 199, 201, 202, 219, 222, 223, 225, 238], "arrai": [10, 227, 228], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 121, 275], "pitfal": 12, "introduct": [12, 16, 31, 38, 39, 40, 47, 59, 69, 87, 121, 138, 176, 187, 189, 192, 193, 194, 201, 205, 260, 277], "equal": [12, 24, 275], "sign": [12, 275], "doubl": 12, "variabl": [12, 23, 27, 192, 226, 256], "assign": 12, "between": [12, 18, 178, 196], "symbol": [12, 18, 19, 20, 23, 57, 76, 135, 139, 191, 196, 202, 205, 225, 275, 277], "python": [12, 39], "number": [12, 35, 43, 57, 60, 61, 82, 97, 196, 201, 205, 262, 267], "v": [12, 19, 196], "float": [12, 61], "ration": [12, 196, 197, 202, 205, 208, 222, 283], "immut": [12, 91], "invers": [12, 20, 63, 82], "trig": 12, "sqrt": 12, "special": [12, 17, 39, 65, 202, 214, 283], "dictionari": [12, 14, 26], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 26, 27, 101, 194, 201, 224, 225, 284], "output": [14, 111, 225], "empti": 14, "Of": 14, "valu": [14, 19, 27], "boolean": [14, 19, 87], "classif": 15, "kind": [15, 57], "func": [15, 278], "finit": [16, 37, 40, 193, 196, 199, 201, 205, 216, 226, 273], "differ": [16, 18, 37, 138, 196, 256, 273], "approxim": [16, 39], "deriv": [16, 190, 227, 258, 273], "A": [16, 123, 124, 127, 128, 129, 130, 135, 277, 284], "direct": [16, 258], "topic": [17, 111, 180, 262, 269], "old": [18, 196], "system": [18, 23, 25, 26, 105, 126, 139, 173, 175, 176, 179, 222, 224, 255, 256, 258, 260], "appli": [18, 82, 216], "input": [18, 225], "predic": [18, 34, 35], "abov": 18, "definit": [18, 20, 75], "implic": 18, "interpret": 18, "other": [18, 20, 29, 76, 187, 256], "is_": 18, "implement": [18, 82, 187, 206, 216, 238, 239, 255, 258], "limit": [18, 23, 81, 121, 211, 213, 273], "combin": [18, 79], "fuzzi": 19, "three": [19, 69], "bool": 19, "custom": [20, 192, 206], "easi": 20, "case": [20, 225], "fulli": 20, "defin": 20, "automat": [20, 205], "eval": 20, "remind": 20, "kei": [20, 138, 278], "numer": [20, 25, 27, 61, 79, 84, 98, 111, 138], "evalf": [20, 57, 98, 272], "rewrit": [20, 39, 207, 283], "simplif": [20, 61, 87, 215, 283], "doit": 20, "expand": [20, 205, 207, 283], "differenti": [20, 59, 79, 111, 224, 225, 284], "as_real_imag": 20, "miscellan": [20, 63, 69, 247], "_eval_": 20, "complet": [20, 121], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 57], "fma": 20, "addit": [20, 79], "tip": [20, 272, 273, 275, 278, 279], "reduc": [23, 205], "One": [23, 25], "inequ": [23, 221, 224, 225], "algebra": [23, 24, 26, 31, 86, 93, 146, 190, 193, 196, 201, 205, 224, 284], "altern": [23, 25, 26, 190], "consid": [23, 25, 26], "guidanc": [23, 24, 25, 26, 27], "includ": [23, 27], "Be": [23, 24, 25], "result": [23, 24, 25, 26, 205], "extract": 23, "decompos": 23, "reduct": [23, 216], "can": [23, 24, 25, 26, 27], "interest": [23, 277], "per": 23, "That": [23, 24, 25, 26, 27], "all": [23, 24, 25, 26], "return": [23, 225], "period": 23, "which": [23, 24, 26, 98, 206], "cannot": [23, 24, 26], "satisfi": 23, "analyt": [23, 158], "report": [23, 25], "problem": [23, 25, 101, 201, 257], "your": 24, "Into": [24, 25, 26], "zero": [24, 27, 105, 199, 205, 279], "put": 24, "form": [24, 26, 27, 87, 94, 135, 228], "restrict": 24, "domain": [24, 194, 196, 197, 202, 205, 225], "solut": [24, 25, 26, 27, 158, 225, 257], "explicitli": 24, "repres": [24, 27, 82, 166, 196, 201], "infinit": [24, 225], "substitut": [24, 25, 111, 180, 272], "solveset": [24, 225], "necessarili": 24, "interrog": 24, "programmat": 24, "speed": [24, 26, 27, 111, 135], "up": [24, 26, 27, 282], "With": [24, 25, 26, 27], "No": 24, "close": [24, 26, 27], "find": [25, 201, 202], "complex": [25, 63, 196], "root": [25, 202], "real": [25, 196], "ensur": [25, 27, 225], "found": 25, "given": [25, 26], "interv": [25, 192], "increas": 25, "precis": 25, "scipi": 25, "linear": [26, 79, 93, 111, 117, 135, 136, 176, 205], "nonlinear": 26, "you": 27, "might": 27, "exact": 27, "consist": 27, "ani": [27, 225], "denomin": 27, "do": [27, 225], "simplifi": [27, 39, 199, 217, 218, 283], "welcom": 28, "": [28, 116, 125, 128, 129, 130, 133, 134, 135, 156, 167, 205, 215, 224, 225, 256, 261, 280], "tutori": [28, 219, 271, 276], "anaconda": 29, "mpmath": 29, "question": 29, "abc": 30, "caveat": [30, 99], "quaternion": 31, "ask": 32, "assum": 33, "queri": 34, "content": [34, 44, 64, 77, 83, 198, 210, 220, 229], "perform": 34, "improv": [34, 121], "common": [35, 88, 111, 180, 205, 206, 207], "calculu": [35, 37, 190, 273], "theori": [35, 38, 97, 262, 267], "order": [35, 202, 213, 216], "refin": 36, "singular": [37, 101], "weight": 37, "categori": 38, "base": [38, 59, 93, 193, 194, 205, 212, 225], "diagram": 38, "draw": 38, "codegen": [39, 239], "tool": [39, 96], "abstract": [39, 102, 106, 108, 131, 141, 158, 188, 197], "syntax": 39, "tree": [39, 196, 206, 278], "ast": [39, 121], "predefin": 39, "node": 39, "c": [39, 206], "cfunction": 39, "specif": 39, "cnode": 39, "cxxnode": 39, "fortran": [39, 206], "fnode": 39, "algorithm": [39, 40, 156, 167, 199, 202, 208, 213, 216], "pyutil": 39, "cutil": 39, "futil": 39, "present": [40, 47], "group": [40, 42, 45, 47, 48, 176], "overview": [40, 47, 82], "facil": 40, "construct": [40, 47, 228], "free": [40, 194], "word": [40, 47], "coset": 40, "enumer": [40, 62], "todd": 40, "coxet": 40, "cosett": 40, "compress": 40, "standard": 40, "subgroup": 40, "index": [40, 47, 228, 231], "low": 40, "reidemeist": 40, "schreier": 40, "bibliographi": [40, 47], "grai": 41, "constructor": [42, 202, 279], "nilpot": 43, "abelian": 43, "cyclic": 43, "name": 45, "partit": [46, 244], "polycycl": 47, "polycyclicgroup": 47, "collector": 47, "comput": [47, 82, 98, 158, 205, 277], "minim": [47, 201], "uncollect": 47, "subword": 47, "collect": [47, 207, 283], "expon": [47, 205], "depth": [47, 69], "lead": 47, "polyhedron": 50, "prufer": 51, "sequenc": [51, 79, 199, 202, 211, 212], "subset": [52, 60], "canonic": 53, "concret": 56, "hypergeometr": [56, 65, 76, 79, 208, 216], "term": [56, 205, 207, 213], "cach": 57, "basic": [57, 61, 93, 182, 194, 196, 202, 214, 255, 262, 263, 272, 279], "singleton": [57, 212, 214], "power": [57, 208, 214, 277, 283], "mul": 57, "mod": 57, "multidimension": 57, "contain": 57, "exprtool": 57, "sort": 57, "random": [57, 226], "cryptographi": 58, "discret": [60, 226], "transform": [60, 82, 84, 99, 256], "fast": 60, "fourier": [60, 209], "theoret": 60, "walsh": 60, "hadamard": 60, "m\u00f6biu": 60, "convolut": 60, "cover": 60, "intersect": [60, 69], "accuraci": 61, "error": [61, 65], "handl": [61, 225], "sum": 61, "combinatori": 62, "elementari": [63, 193, 212, 214], "trigonometr": [63, 65, 215, 283], "hyperbol": 63, "integ": [63, 196], "exponenti": [63, 65, 283], "piecewis": 63, "dirac": 65, "delta": 65, "discontinu": 65, "gamma": [65, 108], "beta": 65, "fresnel": 65, "logarithm": [65, 283], "bessel": 65, "airi": 65, "b": 65, "spline": 65, "riemann": 65, "zeta": 65, "ellipt": 65, "mathieu": 65, "orthogon": [65, 202, 258], "jacobi": 65, "gegenbau": 65, "chebyshev": 65, "legendr": 65, "hermit": 65, "laguerr": 65, "spheric": 65, "harmon": [65, 147, 172], "curv": 66, "ellips": 67, "entiti": [68, 69, 192], "avail": 69, "usag": [69, 121, 139, 196, 257], "median": 69, "pappu": 69, "hexagon": 69, "theorem": [69, 82, 261], "futur": [69, 111, 121, 180], "work": [69, 205], "truth": [69, 87], "beyond": 69, "visual": [69, 138], "line": 70, "plane": [71, 82], "polygon": [73, 84], "about": [75, 225, 256, 284], "holonom": [75, 76, 77, 79, 80, 126], "convert": [76, 79, 196, 272], "represent": [76, 80, 176, 190, 196], "meijer": [76, 79, 82, 216], "g": [76, 79, 82, 216], "intern": [78, 82, 84, 196, 199, 201, 219], "multipl": [79, 190, 201], "composit": 79, "seri": [79, 192, 203, 208, 209, 210, 213, 273], "expans": [79, 213, 216, 273], "current": 81, "polar": [82, 143], "branch": 82, "argand": 82, "tabl": [82, 87, 216], "lookup": 82, "mellin": 82, "converg": 82, "laplac": 82, "thi": [82, 225], "valid": 82, "exist": 82, "formula": [82, 216], "todo": 84, "bug": 84, "over": [84, 205, 214], "polytop": 84, "For": 84, "2d": 84, "polyhedra": 84, "session": 85, "lie": [86, 222], "equival": [87, 138], "manipul": [87, 93, 113, 198, 199, 202, 203, 225, 278], "infer": 87, "dens": [89, 196, 197, 199], "block": 90, "immutablematrix": 91, "except": [93, 99, 199, 242], "numpi": 93, "normal": [94, 205], "spars": [95, 96, 196, 197, 199], "immutablesparsematrix": 95, "ntheori": 97, "ecm": 97, "q": 97, "sub": 98, "ufuncifi": 98, "aesara": [98, 206], "so": 98, "mathrm": [99, 282], "runtim": 99, "beam": [100, 101, 102], "bend": 101, "continuum": 102, "truss": [102, 103], "control": [104, 105, 106, 107, 192], "pole": 105, "bode": 105, "impuls": 105, "respons": [105, 206], "step": [105, 225], "ramp": 105, "lti": 107, "high": 108, "energi": [108, 136], "hydrogen": 109, "wavefunct": 109, "potenti": [111, 135, 136, 180, 187, 258], "issu": [111, 121, 135, 180, 279], "advanc": [111, 180, 205, 278, 279], "featur": [111, 180, 274], "choic": 111, "acceler": [111, 180, 189, 213], "interfac": [111, 180, 192, 226], "bodi": [112, 136, 261], "framework": [115, 132], "kane": [116, 125, 128, 129, 133, 135], "lagrang": [116, 125, 130, 134, 135], "mass": [118, 136, 261], "inertia": [118, 136, 180], "particl": [118, 136, 162], "rigidbodi": 118, "mechanics_print": 119, "mprint": 119, "mpprint": 119, "mlatex": 119, "symbolicsystem": [120, 139], "autolev": [121, 138], "dynam": 121, "onlin": 121, "fix": 121, "switch": 121, "bicycl": 123, "four": 124, "bar": 124, "linkag": 124, "nonminim": 125, "pendulum": 125, "multi": 126, "degre": 126, "freedom": 126, "roll": [127, 128, 129, 130], "disc": [127, 128, 129, 130], "constraint": 129, "forc": 129, "classic": [131, 199], "jointsmethod": 132, "structur": [133, 134, 176, 219], "background": 135, "directli": [135, 256], "new_method": 135, "kwarg": 135, "a_and_b": 135, "true": 135, "slow": 135, "ha": 135, "nan": 135, "zoo": 135, "oo": 135, "element": [135, 196, 201], "further": [135, 275], "rigid": 136, "dyadic": [136, 180, 255, 256], "momentum": 136, "angular": [136, 189], "momenta": 136, "kinet": 136, "lagrangian": 136, "user": [138, 219, 222, 223], "rough": 138, "link": 138, "gaussian": [140, 196, 197, 205], "optic": [140, 141], "medium": 142, "wave": 145, "pauli": 146, "quantum": [147, 158, 172], "oscil": [147, 172], "d": [147, 172], "anticommut": 148, "cartesian": 149, "state": [149, 158, 161, 169], "clebsch": 150, "gordan": 150, "coeffici": [150, 199], "circuit": 151, "commut": [152, 193], "constant": [153, 176], "dagger": 154, "gate": 155, "grover": 156, "hilbert": 157, "space": [157, 176, 216], "inner": 159, "helper": [161, 206], "box": 162, "qappli": 163, "qft": 164, "qubit": 165, "shor": 167, "spin": 168, "second": 171, "quantiz": 171, "dimension": 174, "analysi": 174, "philosophi": 176, "behind": 176, "literatur": [176, 200, 205], "prefix": 177, "convers": 178, "referencefram": [180, 190], "dynamicsymbol": 180, "essenti": [181, 183, 251, 254], "field": [182, 187, 196, 199, 201, 205, 258, 260], "kinemat": [185, 189], "kinematic_equ": 185, "scalar": [187, 258, 260], "curl": [187, 258], "diverg": [187, 258, 261], "gradient": [187, 258], "conserv": [187, 258], "solenoid": [187, 258], "veloc": 189, "basi": [190, 199, 201], "wigner": 191, "credit": 191, "copyright": 191, "author": 191, "plotgrid": 192, "pyglet": 192, "mode": 192, "specifi": 192, "color": 192, "geometr": 192, "ascii": [192, 282], "art": 192, "agca": 193, "ring": [193, 196, 197], "ideal": 193, "homomorph": [193, 201], "syzygi": 193, "extens": [193, 205], "concept": 194, "divis": 194, "factori": 194, "euclidean": 194, "gcd": [194, 199, 205], "lcm": 194, "squar": 194, "factor": [194, 199, 205, 283], "groebner": [194, 199], "introduc": [195, 196], "domainmatrix": 195, "dup": 196, "dmp": 196, "polyr": 196, "polynomialr": 196, "choos": 196, "unifi": 196, "gf": 197, "p": [197, 201], "zz": 197, "qq": 197, "mpq": 197, "zz_i": 197, "qq_i": 197, "rr": 197, "cc": 197, "x": 197, "ex": 197, "quotient": 197, "level": 199, "multivari": [199, 205], "univari": [199, 205], "remaind": 199, "subresult": 199, "configur": 199, "modular": 199, "undocu": 199, "main": 201, "prime": 201, "decomposit": [201, 202, 205], "adic": 201, "valuat": 201, "subfield": 201, "As": 201, "arithmet": 201, "extra": 202, "monomi": 202, "encod": 202, "formal": [202, 208], "appel": 202, "partial": [202, 205, 224, 225], "fraction": [202, 205, 283], "dispers": 202, "rs_seri": 203, "wester": 205, "articl": 205, "simpl": 205, "support": 205, "back": 205, "cyclotom": 205, "gr\u00f6bner": 205, "mistak": 206, "prettyprint": 206, "rcodeprint": 206, "smt": 206, "lib": 206, "mapl": 206, "javascript": 206, "julia": 206, "octav": 206, "matlab": 206, "rust": 206, "gtk": 206, "lambdaprint": 206, "latexprint": 206, "mathmlprint": 206, "pythoncodeprint": 206, "pythonprint": 206, "srepr": [206, 282], "strprinter": 206, "preview": 206, "codeprint": 206, "preced": 206, "dotprint": 206, "subexpress": 207, "detect": 207, "compound": [212, 214, 226], "recurs": [212, 278], "gruntz": 213, "more": [213, 256, 277], "intuit": 213, "residu": 213, "setkind": 214, "hongguang": 215, "fu": 215, "rule": [215, 257], "notat": 216, "increment": 216, "decrement": 216, "indic": 216, "around": 216, "loos": 216, "end": 216, "confluenc": 216, "extend": 216, "diophantin": [219, 224, 225], "od": [222, 224, 225], "hint": [222, 223], "heurist": 222, "riccati": 222, "inform": [222, 223], "pde": [223, 224, 225], "ordinari": [224, 225], "deutil": 224, "recurr": 224, "de": [224, 225], "wrong": 225, "why": [225, 277], "we": 225, "emploi": 225, "search": 225, "deal": 225, "where": 225, "known": 225, "plan": 225, "transolv": 225, "continu": [226, 283], "stochast": 226, "process": 226, "dim": [227, 228], "contract": 227, "diagon": [227, 279], "explicit": 228, "pytest": 235, "randomis": 236, "detail": [238, 239, 255], "routin": 239, "decor": 240, "enum": 241, "variat": 244, "memoiz": 246, "pkgdata": 248, "inspect": 249, "time": 250, "orient": [253, 256], "locat": 256, "coordsys3d": 256, "orient_new": 256, "AND": 256, "quadrilater": 257, "third": 257, "del": [257, 258], "curvilinear": 258, "applic": 261, "calcul": 261, "perimet": 261, "surfac": 261, "area": 261, "volum": 261, "flux": 261, "verifi": 261, "stoke": 261, "introductori": [271, 276], "quick": [272, 273, 275, 278, 279], "two": 275, "final": 275, "read": 275, "understand": 278, "through": 278, "invari": 278, "walk": 278, "prevent": 278, "shape": 279, "access": 279, "delet": 279, "insert": 279, "determin": 279, "rref": 279, "nullspac": 279, "columnspac": 279, "eigenvalu": 279, "eigenvector": 279, "next": 280, "preliminari": 281, "exercis": 281, "str": 282, "mathml": 282, "cancel": 283, "apart": 283, "trigsimp": 283, "expand_trig": 283, "powsimp": 283, "expand_power_exp": 283, "expand_power_bas": 283, "powdenest": 283, "expand_log": 283, "logcombin": 283, "expand_func": 283, "hyperexpand": 283, "combsimp": 283, "gammasimp": 283}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [85, "module-sympy.interactive.printing"], [111, "printing"], [180, "printing"], [206, "printing"], [282, "printing"]], "Parsing": [[3, "parsing"], [99, "module-sympy.parsing"]], "Logic": [[3, "logic"], [87, "module-sympy.logic"], [262, "logic"], [265, "logic"]], "Plotting": [[3, "plotting"], [192, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [272, "lambdify"]], "Code Generation": [[3, "code-generation"], [39, "code-generation"], [262, "code-generation"], [264, "code-generation"]], "Autowrap": [[3, "autowrap"], [39, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [28, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [31, "introduction"], [38, "introduction"], [39, "introduction"], [40, "introduction"], [47, "introduction"], [59, "introduction"], [69, "introduction"], [87, "introduction"], [121, "introduction"], [138, "introduction"], [176, "introduction"], [187, "introduction"], [192, "introduction"], [193, "introduction"], [194, "introduction"], [201, "introduction"], [205, "introduction"], [260, "introduction"], [277, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [275, "symbols"]], "Functions": [[12, "functions"], [64, "functions"], [227, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [28, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [57, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [278, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [34, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [35, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [81, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [29, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [75, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [23, "examples"], [30, "examples"], [57, "examples"], [57, "id47"], [81, "examples"], [84, "examples"], [84, "id37"], [97, "examples"], [97, "id61"], [101, "examples"], [108, "examples"], [143, "examples"], [174, "examples"], [190, "examples"], [190, "id1"], [205, "examples"], [213, "examples"], [213, "id3"], [226, "examples"], [227, "examples"], [228, "examples"], [231, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [28, "how-to-guides"]], "Solve Equations": [[22, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[23, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Alternatives to Consider": [[23, "alternatives-to-consider"], [25, "alternatives-to-consider"], [26, "alternatives-to-consider"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[23, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[23, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Guidance": [[23, "guidance"], [24, "guidance"], [25, "guidance"], [26, "guidance"]], "Include the Variable to Be Reduced for in the Function Call": [[23, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[23, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[23, "use-the-result"]], "Extract a List of Decomposed Relations": [[23, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[23, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[23, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[23, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[23, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[23, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[23, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[23, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[23, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[23, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Report a Problem": [[23, "report-a-problem"], [25, "report-a-problem"]], "Solve an Equation Algebraically": [[24, "solve-an-equation-algebraically"], [24, "id1"]], "Make Your Equation Into an Expression That Equals Zero": [[24, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[24, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[24, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[24, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Use the Solution Result": [[24, "use-the-solution-result"], [25, "use-the-solution-result"]], "Substitute Solutions From solve() Into an Expression": [[24, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[24, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[24, "options-that-can-speed-up-solve"], [26, "options-that-can-speed-up-solve"], [27, "options-that-can-speed-up-solve"]], "Not All Equations Can Be Solved": [[24, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[24, "equations-with-no-closed-form-solution"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[24, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [26, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve One or a System of Equations Numerically": [[25, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[25, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[25, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[25, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[25, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[25, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[25, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[25, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[25, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[25, "equations-with-no-solution"]], "Solve a System of Equations Algebraically": [[26, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[26, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[26, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[26, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[26, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[26, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[26, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[26, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[26, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[26, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[26, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[27, "solving-guidance"]], "Numeric Solutions": [[27, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[27, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[27, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[27, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[27, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[27, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[27, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[27, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[27, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[28, "welcome-to-sympy-s-documentation"]], "Installation": [[28, "installation"], [29, "installation"], [281, "installation"]], "Tutorials": [[28, "tutorials"], [271, "tutorials"]], "API Reference": [[28, "api-reference"], [238, "module-sympy.utilities.autowrap"], [239, "module-sympy.utilities.codegen"], [262, "api-reference"]], "Anaconda": [[29, "anaconda"]], "Git": [[29, "git"]], "Run SymPy": [[29, "run-sympy"]], "mpmath": [[29, "mpmath"]], "Questions": [[29, "questions"]], "abc": [[30, "module-sympy.abc"]], "Caveats": [[30, "caveats"]], "Algebras": [[31, "algebras"]], "Quaternion Reference": [[31, "module-sympy.algebras"]], "Ask": [[32, "module-sympy.assumptions.ask"]], "Assume": [[33, "module-sympy.assumptions.assume"]], "Predicate": [[34, "predicate"]], "Querying": [[34, "querying"]], "Contents": [[34, "contents"], [44, "contents"], [64, "contents"], [77, "contents"], [83, "contents"], [198, "contents"], [210, "contents"], [220, "contents"], [229, "contents"]], "Performance improvements": [[34, "performance-improvements"]], "Misc": [[34, "misc"]], "Common": [[35, "common"]], "Calculus": [[35, "calculus"], [37, "module-sympy.calculus"], [273, "calculus"]], "Matrix": [[35, "matrix"]], "Number Theory": [[35, "number-theory"], [97, "module-sympy.ntheory.generate"], [262, "number-theory"], [267, "number-theory"]], "Order": [[35, "order"]], "Sets": [[35, "sets"], [214, "sets"]], "Refine": [[36, "module-sympy.assumptions.refine"]], "Singularities": [[37, "singularities"]], "Finite difference weights": [[37, "finite-difference-weights"]], "Category Theory": [[38, "category-theory"]], "Base Class Reference": [[38, "module-sympy.categories"], [59, "base-class-reference"]], "Diagram Drawing": [[38, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[39, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[39, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[39, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[39, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[39, "module-sympy.codegen.ast"]], "AST Type Tree": [[39, "ast-type-tree"]], "Predefined types": [[39, "predefined-types"]], "Using the nodes": [[39, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[39, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[39, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[39, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[39, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[39, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[39, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[39, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[39, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[40, "finitely-presented-groups"]], "Overview of Facilities": [[40, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[40, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[40, "free-groups-and-words"]], "Construction of a Free Group": [[40, "construction-of-a-free-group"]], "Construction of words": [[40, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[40, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[40, "cosettable"]], "Attributes of CosetTable": [[40, "attributes-of-cosettable"]], "Compression and Standardization": [[40, "compression-and-standardization"]], "Subgroups of Finite Index": [[40, "subgroups-of-finite-index"]], "Low Index Subgroups": [[40, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[40, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[40, "reidemeister-schreier-algorithm"]], "Bibliography": [[40, "bibliography"], [47, "bibliography"]], "Gray Code": [[41, "module-sympy.combinatorics.graycode"]], "Group constructors": [[42, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[43, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[44, "combinatorics"]], "Named Groups": [[45, "module-sympy.combinatorics.named_groups"]], "Partitions": [[46, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[47, "polycyclic-groups"]], "Overview of functionalities": [[47, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[47, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[47, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[47, "the-construction-of-collector"]], "Attributes of Collector": [[47, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[47, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[47, "computation-of-subword-index"]], "Computation of Collected Word": [[47, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[47, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[47, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[47, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[47, "computation-of-leading-exponent"]], "Permutation Groups": [[48, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[49, "module-sympy.combinatorics.permutations"]], "Generators": [[49, "module-sympy.combinatorics.generators"]], "Polyhedron": [[50, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[51, "module-sympy.combinatorics.prufer"]], "Subsets": [[52, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[53, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[54, "module-sympy.combinatorics.testutil"]], "Utilities": [[55, "module-sympy.combinatorics.util"], [144, "module-sympy.physics.optics.utils"], [201, "utilities"], [243, "module-sympy.utilities"], [262, "utilities"], [270, "utilities"]], "Concrete": [[56, "concrete"]], "Hypergeometric terms": [[56, "hypergeometric-terms"]], "Concrete Class Reference": [[56, "concrete-class-reference"]], "Concrete Functions Reference": [[56, "concrete-functions-reference"]], "Core": [[57, "core"]], "sympify": [[57, "module-sympy.core.sympify"]], "assumptions": [[57, "module-sympy.core.assumptions"]], "See Also": [[57, "see-also"], [244, "see-also"]], "Notes": [[57, "notes"], [213, "notes"], [215, "notes"]], "Developers Notes": [[57, "developers-notes"]], "References": [[57, "references"], [69, "references"], [75, "references"], [84, "references"], [143, "references"], [146, "references"], [191, "references"], [215, "references"], [216, "references"], [219, "references"], [225, "references"]], "cache": [[57, "module-sympy.core.cache"]], "basic": [[57, "module-sympy.core.basic"]], "singleton": [[57, "module-sympy.core.singleton"]], "expr": [[57, "module-sympy.core.expr"]], "symbol": [[57, "module-sympy.core.symbol"]], "numbers": [[57, "module-sympy.core.numbers"]], "power": [[57, "module-sympy.core.power"]], "mul": [[57, "module-sympy.core.mul"]], "add": [[57, "module-sympy.core.add"]], "mod": [[57, "module-sympy.core.mod"]], "relational": [[57, "module-sympy.core.relational"]], "multidimensional": [[57, "module-sympy.core.multidimensional"]], "function": [[57, "module-sympy.core.function"]], "evalf": [[57, "module-sympy.core.evalf"], [272, "evalf"]], "containers": [[57, "module-sympy.core.containers"]], "exprtools": [[57, "module-sympy.core.exprtools"]], "Sorting": [[57, "sorting"]], "Random": [[57, "module-sympy.core.random"]], "Traversal": [[57, "module-sympy.core.traversal"]], "Cryptography": [[58, "cryptography"]], "Differential Geometry": [[59, "module-sympy.diffgeom"]], "Discrete": [[60, "discrete"]], "Transforms": [[60, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[60, "fast-fourier-transform"]], "Number Theoretic Transform": [[60, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[60, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[60, "mobius-transform"]], "Convolutions": [[60, "module-sympy.discrete.convolutions"]], "Convolution": [[60, "convolution"]], "Convolution using Fast Fourier Transform": [[60, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[60, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[60, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[60, "subset-convolution"]], "Covering Product": [[60, "covering-product"]], "Intersecting Product": [[60, "intersecting-product"]], "Numerical Evaluation": [[61, "numerical-evaluation"]], "Basics": [[61, "basics"], [262, "basics"], [263, "basics"]], "Floating-point numbers": [[61, "floating-point-numbers"]], "Accuracy and error handling": [[61, "accuracy-and-error-handling"]], "Sums and integrals": [[61, "sums-and-integrals"]], "Numerical simplification": [[61, "numerical-simplification"]], "Combinatorial": [[62, "combinatorial"]], "Enumeration": [[62, "enumeration"]], "Elementary": [[63, "elementary"]], "Complex Functions": [[63, "complex-functions"]], "Trigonometric": [[63, "trigonometric"]], "Trigonometric Functions": [[63, "trigonometric-functions"]], "Trigonometric Inverses": [[63, "trigonometric-inverses"]], "Hyperbolic": [[63, "hyperbolic"]], "Hyperbolic Functions": [[63, "hyperbolic-functions"]], "Hyperbolic Inverses": [[63, "hyperbolic-inverses"]], "Integer Functions": [[63, "integer-functions"]], "Exponential": [[63, "exponential"]], "Piecewise": [[63, "piecewise"]], "Miscellaneous": [[63, "miscellaneous"], [247, "module-sympy.utilities.misc"]], "Special": [[65, "special"]], "Dirac Delta and Related Discontinuous Functions": [[65, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[65, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[65, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[65, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[65, "module-sympy.functions.special.bessel"]], "Airy Functions": [[65, "airy-functions"]], "B-Splines": [[65, "b-splines"]], "Riemann Zeta and Related Functions": [[65, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[65, "hypergeometric-functions"]], "Elliptic integrals": [[65, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[65, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[65, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[65, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[65, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[65, "chebyshev-polynomials"]], "Legendre Polynomials": [[65, "legendre-polynomials"]], "Hermite Polynomials": [[65, "hermite-polynomials"]], "Laguerre Polynomials": [[65, "laguerre-polynomials"]], "Spherical Harmonics": [[65, "spherical-harmonics"]], "Tensor Functions": [[65, "tensor-functions"]], "Curves": [[66, "module-sympy.geometry.curve"]], "Ellipses": [[67, "module-sympy.geometry.ellipse"]], "Entities": [[68, "module-sympy.geometry.entity"]], "Geometry": [[69, "geometry"]], "Available Entities": [[69, "available-entities"]], "Example Usage": [[69, "example-usage"]], "Intersection of medians": [[69, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[69, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[69, "miscellaneous-notes"]], "Future Work": [[69, "future-work"]], "Truth Setting Expressions": [[69, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[69, "three-dimensions-and-beyond"]], "Geometry Visualization": [[69, "geometry-visualization"]], "Submodules": [[69, "submodules"]], "Lines": [[70, "module-sympy.geometry.line"]], "Plane": [[71, "module-sympy.geometry.plane"]], "Points": [[72, "module-sympy.geometry.point"], [255, "points"]], "Polygons": [[73, "module-sympy.geometry.polygon"]], "Utils": [[74, "module-sympy.geometry.util"]], "About Holonomic Functions": [[75, "about-holonomic-functions"]], "Converting other representations to holonomic": [[76, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[76, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[76, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[76, "converting-symbolic-expressions"]], "Holonomic": [[77, "module-sympy.holonomic"]], "Internal API": [[78, "internal-api"]], "Operations on holonomic functions": [[79, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[79, "addition-and-multiplication"]], "Integration and Differentiation": [[79, "integration-and-differentiation"]], "Composition with polynomials": [[79, "composition-with-polynomials"]], "Convert to holonomic sequence": [[79, "convert-to-holonomic-sequence"]], "Series expansion": [[79, "series-expansion"]], "Numerical evaluation": [[79, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[79, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[79, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[79, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[80, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[81, "uses-and-current-limitations"]], "Integration": [[81, "integration"]], "Computing Integrals using Meijer G-Functions": [[82, "computing-integrals-using-meijer-g-functions"]], "Overview": [[82, "overview"]], "Polar Numbers and Branched Functions": [[82, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[82, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[82, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[82, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[82, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[82, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[82, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[82, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[82, "how-to-compute-the-integral"]], "When this computation is valid": [[82, "when-this-computation-is-valid"]], "When the integral exists": [[82, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[82, "implemented-g-function-formulae"]], "Internal API Reference": [[82, "module-sympy.integrals.meijerint"]], "Integrals": [[83, "integrals"], [84, "module-sympy.integrals"], [273, "integrals"]], "Integral Transforms": [[84, "module-sympy.integrals.transforms"]], "Internals": [[84, "internals"], [201, "internals"]], "API reference": [[84, "api-reference"], [84, "id38"]], "TODO and Bugs": [[84, "todo-and-bugs"]], "Numeric Integrals": [[84, "numeric-integrals"]], "Integration over Polytopes": [[84, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[84, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[84, "for-3-polytopes-polyhedra"]], "Interactive": [[85, "module-sympy.interactive"]], "Session": [[85, "module-sympy.interactive.session"]], "Lie Algebra": [[86, "module-sympy.liealgebras"]], "Forming logical expressions": [[87, "forming-logical-expressions"]], "Boolean functions": [[87, "boolean-functions"]], "Simplification and equivalence-testing": [[87, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[87, "manipulating-expressions"]], "Truth tables and related functions": [[87, "truth-tables-and-related-functions"]], "Inference": [[87, "module-sympy.logic.inference"]], "Common Matrices": [[88, "module-sympy.matrices.common"]], "Dense Matrices": [[89, "dense-matrices"]], "Matrix Expressions": [[90, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[90, "matrix-expressions-core-reference"]], "Block Matrices": [[90, "block-matrices"]], "Immutable Matrices": [[91, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[91, "module-sympy.matrices.immutable"]], "Matrices": [[92, "module-sympy.matrices"], [110, "module-sympy.physics.matrices"], [262, "matrices"], [266, "matrices"], [279, "matrices"]], "Matrices (linear algebra)": [[93, "module-sympy.matrices.matrices"]], "Creating Matrices": [[93, "creating-matrices"]], "Basic Manipulation": [[93, "basic-manipulation"]], "Operations on entries": [[93, "operations-on-entries"]], "Linear algebra": [[93, "linear-algebra"]], "Reference": [[93, "reference"], [193, "reference"], [199, "reference"], [203, "reference"], [213, "reference"], [213, "id2"], [213, "id4"], [213, "id7"], [213, "id8"]], "Matrix Base Classes": [[93, "matrix-base-classes"]], "Matrix Exceptions": [[93, "matrix-exceptions"]], "Matrix Functions": [[93, "matrix-functions"]], "Numpy Utility Functions": [[93, "numpy-utility-functions"]], "Matrix Normal Forms": [[94, "matrix-normal-forms"]], "Sparse Matrices": [[95, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[95, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[95, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[96, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[97, "ntheory-class-reference"]], "Ntheory Functions Reference": [[97, "ntheory-functions-reference"]], "ECM function": [[97, "ecm-function"]], "QS function": [[97, "qs-function"]], "Numeric Computation": [[98, "numeric-computation"]], "Subs/evalf": [[98, "subs-evalf"]], "Lambdify": [[98, "lambdify"], [245, "module-sympy.utilities.lambdify"]], "uFuncify": [[98, "ufuncify"]], "Aesara": [[98, "aesara"]], "So Which Should I Use?": [[98, "so-which-should-i-use"]], "Parsing Functions Reference": [[99, "parsing-functions-reference"]], "Parsing Transformations Reference": [[99, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[99, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[99, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[99, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[99, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[99, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[99, "runtime-installation"]], "Beam (Docstrings)": [[100, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[101, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[101, "beam"], [102, "beam"]], "Example 1": [[101, "example-1"]], "Example 2": [[101, "example-2"]], "Example 3": [[101, "example-3"]], "Example 4": [[101, "example-4"]], "Example 5": [[101, "example-5"]], "Example 6": [[101, "example-6"]], "Example 7": [[101, "example-7"]], "Example 8": [[101, "example-8"]], "Example 9": [[101, "example-9"]], "Example 10": [[101, "example-10"]], "Example 11": [[101, "example-11"]], "Continuum Mechanics": [[102, "continuum-mechanics"]], "Abstract": [[102, null], [106, null], [108, null], [131, null], [141, null], [158, null], [188, null]], "Truss": [[102, "truss"]], "Truss (Docstrings)": [[103, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[104, "control"]], "Control System Plots": [[105, "control-system-plots"]], "Pole-Zero Plot": [[105, "pole-zero-plot"]], "Bode Plot": [[105, "bode-plot"]], "Impulse-Response Plot": [[105, "impulse-response-plot"]], "Step-Response Plot": [[105, "step-response-plot"]], "Ramp-Response Plot": [[105, "ramp-response-plot"]], "Control Module": [[106, "module-sympy.physics.control"]], "Control API": [[107, "control-api"]], "lti": [[107, "module-sympy.physics.control.lti"]], "High energy physics": [[108, "high-energy-physics"]], "Gamma matrices": [[108, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[109, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[111, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[111, "common-issues"], [180, "common-issues"]], "Numerically Integrating Code": [[111, "numerically-integrating-code"]], "Differentiating": [[111, "differentiating"]], "Choice of Coordinates and Speeds": [[111, "choice-of-coordinates-and-speeds"]], "Substitution": [[111, "substitution"], [180, "substitution"], [272, "substitution"]], "Linearization": [[111, "linearization"]], "Acceleration of Points": [[111, "acceleration-of-points"], [180, "acceleration-of-points"]], "Advanced Interfaces": [[111, "advanced-interfaces"], [180, "advanced-interfaces"]], "Advanced Functionality": [[111, "advanced-functionality"]], "Future Features": [[111, "future-features"]], "Code Output": [[111, "code-output"]], "Body (Docstrings)": [[112, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[113, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[114, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[115, "joints-framework-docstrings"]], "Joint (Docstrings)": [[115, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[116, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[117, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[118, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[119, "printing-docstrings"], [186, "printing-docstrings"]], "mechanics_printing": [[119, "mechanics-printing"]], "mprint": [[119, "mprint"]], "mpprint": [[119, "mpprint"]], "mlatex": [[119, "mlatex"]], "SymbolicSystem (Docstrings)": [[120, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[121, "autolev-parser"]], "Usage": [[121, "usage"]], "Gotchas": [[121, "gotchas"], [275, "gotchas"]], "Limitations and Issues": [[121, "limitations-and-issues"]], "Future Improvements": [[121, "future-improvements"]], "1. Completing Dynamics Online": [[121, "completing-dynamics-online"]], "2. Fixing Issues": [[121, "fixing-issues"]], "3. Switching to an AST": [[121, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[122, "examples-for-physics-mechanics"]], "A bicycle": [[123, "a-bicycle"]], "A four bar linkage": [[124, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[125, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[125, "kane-s-method"]], "Lagrange\u2019s Method": [[125, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[126, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[127, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[128, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[129, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[130, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[131, "classical-mechanics"]], "Vector": [[131, "vector"], [190, "vector"], [259, "vector"]], "Mechanics": [[131, "mechanics"], [226, "module-sympy.stats.rv"]], "Guide to Mechanics": [[131, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[132, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[132, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[132, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[133, "kane-s-method-in-physics-mechanics"], [133, "id2"]], "Structure of Equations": [[133, "structure-of-equations"], [134, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[134, "lagrange-s-method-in-physics-mechanics"], [134, "id1"]], "Linearization in Physics/Mechanics": [[135, "linearization-in-physics-mechanics"]], "Background": [[135, "background"]], "A Note on Dependent Coordinates and Speeds": [[135, null]], "Linearizing Kane\u2019s Equations": [[135, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[135, "using-the-linearizer-class-directly"], [135, "id2"]], "2. Using the linearize class method:": [[135, "using-the-linearize-class-method"], [135, "id3"]], "What\u2019s with the new_method kwarg?": [[135, null]], "Linearizing Lagrange\u2019s Equations": [[135, "linearizing-lagrange-s-equations"]], "Potential Issues": [[135, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[135, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[135, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[135, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[136, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[136, "mass"]], "Particle": [[136, "particle"]], "Inertia": [[136, "inertia"]], "Rigid Body": [[136, "rigid-body"]], "Dyadic": [[136, "dyadic"]], "Linear Momentum": [[136, "linear-momentum"]], "Angular Momentum": [[136, "angular-momentum"]], "Using momenta functions in Mechanics": [[136, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[136, "kinetic-energy"]], "Potential Energy": [[136, "potential-energy"]], "Lagrangian": [[136, "lagrangian"]], "Using energy functions in Mechanics": [[136, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[137, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[138, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[138, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[138, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[138, "mathematical-equivalents"]], "Physical Equivalents": [[138, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[138, "numerical-evaluation-and-visualization"]], "Links": [[138, "links"]], "Symbolic Systems in Physics/Mechanics": [[139, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[139, "symbolicsystem-example-usage"]], "Gaussian Optics": [[140, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[141, "optics-module"]], "Medium": [[142, "module-sympy.physics.optics.medium"]], "Polarization": [[143, "module-sympy.physics.optics.polarization"]], "Waves": [[145, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[146, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[147, "module-sympy.physics.qho_1d"]], "Anticommutator": [[148, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[149, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[150, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[151, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[152, "module-sympy.physics.quantum.commutator"]], "Constants": [[153, "module-sympy.physics.quantum.constants"], [176, "constants"]], "Dagger": [[154, "module-sympy.physics.quantum.dagger"]], "Gates": [[155, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[156, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[157, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[158, "quantum-mechanics"]], "Quantum Functions": [[158, "quantum-functions"]], "States and Operators": [[158, "states-and-operators"]], "Quantum Computation": [[158, "quantum-computation"]], "Analytic Solutions": [[158, "analytic-solutions"]], "Inner Product": [[159, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[160, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[161, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[162, "module-sympy.physics.quantum.piab"]], "Qapply": [[163, "module-sympy.physics.quantum.qapply"]], "QFT": [[164, "module-sympy.physics.quantum.qft"]], "Qubit": [[165, "module-sympy.physics.quantum.qubit"]], "Represent": [[166, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[167, "module-sympy.physics.quantum.shor"]], "Spin": [[168, "module-sympy.physics.quantum.spin"]], "State": [[169, "module-sympy.physics.quantum.state"]], "Tensor Product": [[170, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[171, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[172, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[173, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[174, "dimensional-analysis"]], "Equation with quantities": [[174, "equation-with-quantities"]], "Unit systems": [[175, "unit-systems"]], "Philosophy behind unit systems": [[176, "philosophy-behind-unit-systems"]], "Dimensions": [[176, "dimensions"]], "Group structure": [[176, "group-structure"]], "Linear space representation": [[176, "linear-space-representation"]], "An example": [[176, "an-example"], [216, "an-example"]], "Quantities": [[176, "quantities"]], "Units": [[176, "units"]], "The need for a reference": [[176, "the-need-for-a-reference"]], "Literature": [[176, "literature"], [200, "literature"], [205, "literature"]], "Unit prefixes": [[177, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[178, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[178, "module-sympy.physics.units.util"]], "Units and unit systems": [[179, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[180, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[180, "inertia-dyadics"]], "ReferenceFrame": [[180, "referenceframe"]], "dynamicsymbols": [[180, "dynamicsymbols"]], "Essential Classes": [[181, "essential-classes"]], "Docstrings for basic field functions": [[182, "docstrings-for-basic-field-functions"]], "Field operation functions": [[182, "field-operation-functions"]], "Checking the type of vector field": [[182, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[183, "essential-functions-docstrings"]], "Physics Vector API": [[184, "physics-vector-api"]], "Kinematics (Docstrings)": [[185, "module-sympy.physics.vector.point"]], "kinematic_equations": [[185, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[187, "scalar-and-vector-field-functionality"], [258, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[187, "vectors-and-scalars"], [260, "vectors-and-scalars"]], "Fields": [[187, "fields"], [260, "fields"]], "Implementation of fields in sympy.physics.vector": [[187, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[187, "field-operators-and-other-related-functions"]], "Curl": [[187, "curl"], [258, "curl"]], "Divergence": [[187, "divergence"], [258, "divergence"]], "Gradient": [[187, "gradient"], [258, "gradient"]], "Conservative and Solenoidal fields": [[187, "conservative-and-solenoidal-fields"], [258, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[187, "scalar-potential-functions"], [258, "scalar-potential-functions"]], "The Physics Vector Module": [[188, "the-physics-vector-module"]], "References for Physics/Vector": [[188, "references-for-physics-vector"]], "Guide to Vector": [[188, "guide-to-vector"], [259, "guide-to-vector"]], "Vector: Kinematics": [[189, "vector-kinematics"]], "Introduction to Kinematics": [[189, "introduction-to-kinematics"]], "Angular Velocity": [[189, "angular-velocity"]], "Angular Acceleration": [[189, "angular-acceleration"]], "Point Velocity & Acceleration": [[189, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[189, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[190, "vector-referenceframe"]], "Vector Algebra": [[190, "vector-algebra"]], "Vector Operations": [[190, "vector-operations"]], "Alternative Representation": [[190, "alternative-representation"]], "Vector Calculus": [[190, "vector-calculus"]], "Derivatives of Vectors": [[190, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[190, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[190, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[190, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[190, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[190, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[190, "how-vectors-are-coded"]], "Wigner Symbols": [[191, "module-sympy.physics.wigner"]], "Credits and Copyright": [[191, "credits-and-copyright"]], "Authors": [[191, "authors"]], "Plot Class": [[192, "plot-class"]], "Plotting Function Reference": [[192, "plotting-function-reference"]], "PlotGrid Class": [[192, "plotgrid-class"]], "Series Classes": [[192, "series-classes"]], "Backends": [[192, "backends"]], "Pyglet Plotting": [[192, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[192, "plot-window-controls"]], "Coordinate Modes": [[192, "coordinate-modes"]], "Specifying Intervals for Variables": [[192, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[192, "using-the-interactive-interface"]], "Using Custom Color Functions": [[192, "using-custom-color-functions"]], "Plotting Geometric Entities": [[192, "plotting-geometric-entities"]], "Plotting with ASCII art": [[192, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[193, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[193, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[193, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[193, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[193, "finite-extensions"]], "Basic functionality of the module": [[194, "basic-functionality-of-the-module"]], "Basic concepts": [[194, "basic-concepts"]], "Polynomials": [[194, "polynomials"]], "Divisibility": [[194, "divisibility"]], "Integral domains": [[194, "integral-domains"]], "Factorial domains": [[194, "factorial-domains"]], "Euclidean domains": [[194, "euclidean-domains"]], "Divisibility of polynomials": [[194, "divisibility-of-polynomials"]], "Basic functionality": [[194, "basic-functionality"]], "Division": [[194, "division"]], "GCD and LCM": [[194, "gcd-and-lcm"]], "Square-free factorization": [[194, "square-free-factorization"]], "Factorization": [[194, "factorization"]], "Groebner bases": [[194, "groebner-bases"]], "Solving Equations": [[194, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[195, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[195, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[196, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[196, "what-are-the-domains"]], "Representing expressions symbolically": [[196, "representing-expressions-symbolically"]], "Tree representation": [[196, "tree-representation"]], "DUP representation": [[196, "dup-representation"]], "DMP representation": [[196, "dmp-representation"]], "Sparse polynomial representation": [[196, "sparse-polynomial-representation"]], "Basic usage of domains": [[196, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[196, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[196, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[196, "finite-fields"]], "Real and complex fields": [[196, "real-and-complex-fields"]], "Algebraic number fields": [[196, "algebraic-number-fields"], [201, "algebraic-number-fields"]], "Polynomial ring domains": [[196, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[196, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[196, "polyring-vs-polynomialring"]], "Rational function fields": [[196, "rational-function-fields"]], "Expression domain": [[196, "expression-domain"]], "Choosing a domain": [[196, "choosing-a-domain"]], "Converting elements between different domains": [[196, "converting-elements-between-different-domains"]], "Unifying domains": [[196, "unifying-domains"]], "Internals of a Poly": [[196, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[196, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[196, "choosing-generators"]], "Algebraically dependent generators": [[196, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[197, "reference-docs-for-the-poly-domains"]], "Domains": [[197, "domains"]], "Abstract Domains": [[197, "abstract-domains"]], "GF(p)": [[197, "gf-p"]], "ZZ": [[197, "zz"]], "QQ": [[197, "qq"]], "MPQ": [[197, "mpq"]], "Gaussian domains": [[197, "gaussian-domains"]], "ZZ_I": [[197, "zz-i"]], "QQ_I": [[197, "qq-i"]], "QQ<a>": [[197, "qq-a"]], "RR": [[197, "rr"]], "CC": [[197, "cc"]], "K[x]": [[197, "k-x"]], "K(x)": [[197, "id11"]], "EX": [[197, "ex"]], "Quotient ring": [[197, "quotient-ring"]], "Sparse polynomials": [[197, "sparse-polynomials"]], "Sparse rational functions": [[197, "sparse-rational-functions"]], "Dense polynomials": [[197, "dense-polynomials"]], "Polynomial Manipulation": [[198, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[199, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[199, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[199, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[199, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[199, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[199, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[199, "classical-remainder-sequence"]], "Simplified remainder sequences": [[199, "simplified-remainder-sequences"]], "Subresultant sequence": [[199, "subresultant-sequence"]], "Groebner basis algorithms": [[199, "groebner-basis-algorithms"]], "Options": [[199, "module-sympy.polys.polyoptions"]], "Configuration": [[199, "module-sympy.polys.polyconfig"]], "Exceptions": [[199, "exceptions"]], "Modular GCD": [[199, "modular-gcd"]], "Undocumented": [[199, "undocumented"]], "Number Fields": [[201, "number-fields"]], "Solving the Main Problems": [[201, "solving-the-main-problems"]], "Integral Basis": [[201, "integral-basis"]], "Prime Decomposition": [[201, "prime-decomposition"]], "p-adic Valuation": [[201, "p-adic-valuation"]], "Finding Minimal Polynomials": [[201, "finding-minimal-polynomials"]], "The Subfield Problem": [[201, "the-subfield-problem"]], "Representing algebraic numbers": [[201, "representing-algebraic-numbers"]], "As number field elements": [[201, "as-number-field-elements"]], "As elements of finitely-generated modules": [[201, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[201, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[201, "arithmetic-with-module-elements"]], "Multiplication": [[201, "multiplication"]], "Module Homomorphisms": [[201, "module-homomorphisms"]], "Class Reference": [[201, "class-reference"]], "Polynomials Manipulation Module Reference": [[202, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[202, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[202, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[202, "domain-constructors"]], "Monomials encoded as tuples": [[202, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[202, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[202, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[202, "symbolic-root-finding-algorithms"]], "Special polynomials": [[202, "special-polynomials"]], "Orthogonal polynomials": [[202, "orthogonal-polynomials"]], "Appell sequences": [[202, "appell-sequences"]], "Manipulation of rational functions": [[202, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[202, "partial-fraction-decomposition"], [205, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[202, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[203, "series-manipulation-using-polynomials"]], "rs_series": [[203, "rs-series"]], "Contribute": [[203, "contribute"]], "Poly solvers": [[204, "poly-solvers"]], "Examples from Wester\u2019s Article": [[205, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[205, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[205, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[205, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[205, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[205, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[205, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[205, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[205, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[205, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[205, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[205, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[205, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[205, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[205, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[205, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[205, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[206, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[206, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[206, "example-of-custom-printer"]], "Example of Custom Printing Method": [[206, "example-of-custom-printing-method"]], "Common mistakes": [[206, "common-mistakes"]], "PrettyPrinter Class": [[206, "prettyprinter-class"]], "C code printers": [[206, "module-sympy.printing.c"]], "C++ code printers": [[206, "module-sympy.printing.cxx"]], "RCodePrinter": [[206, "module-sympy.printing.rcode"]], "Fortran Printing": [[206, "fortran-printing"]], "SMT-Lib printing": [[206, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[206, "module-sympy.printing.mathematica"]], "Maple code printing": [[206, "module-sympy.printing.maple"]], "Javascript Code printing": [[206, "module-sympy.printing.jscode"]], "Julia code printing": [[206, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[206, "module-sympy.printing.octave"]], "Rust code printing": [[206, "module-sympy.printing.rust"]], "Aesara Code printing": [[206, "module-sympy.printing.aesaracode"]], "Gtk": [[206, "module-sympy.printing.gtk"]], "LambdaPrinter": [[206, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[206, "module-sympy.printing.latex"]], "MathMLPrinter": [[206, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[206, "module-sympy.printing.pycode"]], "PythonPrinter": [[206, "module-sympy.printing.python"]], "srepr": [[206, "module-sympy.printing.repr"], [282, "srepr"]], "StrPrinter": [[206, "module-sympy.printing.str"]], "Tree Printing": [[206, "module-sympy.printing.tree"]], "Preview": [[206, "preview"]], "Implementation - Helper Classes/Functions": [[206, "module-sympy.printing.conventions"]], "CodePrinter": [[206, "module-sympy.printing.codeprinter"]], "Precedence": [[206, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[206, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[206, "dotprint"]], "Term Rewriting": [[207, "term-rewriting"]], "Expanding": [[207, "expanding"]], "Common Subexpression Detection and Collection": [[207, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[208, "formal-power-series"]], "Rational Algorithm": [[208, "rational-algorithm"]], "Hypergeometric Algorithm": [[208, "hypergeometric-algorithm"]], "Fourier Series": [[209, "fourier-series"]], "Series": [[210, "series"]], "Limits of Sequences": [[211, "limits-of-sequences"]], "Sequences": [[212, "sequences"]], "Sequences Base": [[212, "sequences-base"]], "Elementary Sequences": [[212, "elementary-sequences"]], "Singleton Sequences": [[212, "singleton-sequences"]], "Compound Sequences": [[212, "compound-sequences"]], "Recursive Sequences": [[212, "recursive-sequences"]], "Series Expansions": [[213, "series-expansions"]], "Limits": [[213, "limits"], [273, "limits"]], "The Gruntz Algorithm": [[213, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[213, "more-intuitive-series-expansion"]], "Order Terms": [[213, "order-terms"]], "Series Acceleration": [[213, "series-acceleration"]], "Residues": [[213, "residues"]], "Basic Sets": [[214, "module-sympy.sets.sets"]], "Elementary Sets": [[214, "elementary-sets"]], "Compound Sets": [[214, "compound-sets"]], "Singleton Sets": [[214, "singleton-sets"]], "Special Sets": [[214, "module-sympy.sets.fancysets"]], "Power sets": [[214, "module-sympy.sets.powerset"]], "Condition Sets": [[214, "module-sympy.sets.conditionset"]], "SetKind": [[214, "setkind"]], "Iteration over sets": [[214, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[215, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[215, "rules"]], "Hypergeometric Expansion": [[216, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[216, "hypergeometric-function-expansion-algorithm"]], "Notation": [[216, "notation"]], "Incrementing and decrementing indices": [[216, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[216, "reduction-of-order"]], "Moving Around in the Parameter Space": [[216, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[216, "applying-the-operators"]], "Loose Ends": [[216, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[216, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[216, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[216, "implemented-hypergeometric-formulae"]], "Simplify": [[217, "simplify"], [218, "simplify"]], "Diophantine": [[219, "diophantine"]], "Diophantine equations": [[219, "diophantine-equations"]], "Module structure": [[219, "module-structure"]], "Tutorial": [[219, "tutorial"]], "User Functions": [[219, "user-functions"], [222, "user-functions"], [223, "user-functions"]], "Internal Functions": [[219, "internal-functions"]], "Internal Classes": [[219, "internal-classes"]], "Solvers": [[220, "solvers"], [224, "module-sympy.solvers"], [284, "solvers"]], "Inequality Solvers": [[221, "inequality-solvers"]], "ODE": [[222, "ode"]], "Hint Functions": [[222, "hint-functions"]], "Lie heuristics": [[222, "lie-heuristics"]], "Rational Riccati Solver": [[222, "rational-riccati-solver"]], "System of ODEs": [[222, "system-of-odes"]], "Information on the ode module": [[222, "module-sympy.solvers.ode.ode"]], "PDE": [[223, "pde"]], "Hint Methods": [[223, "hint-methods"]], "Information on the pde module": [[223, "module-sympy.solvers.pde"]], "Algebraic equations": [[224, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[224, "ordinary-differential-equations-odes"], [225, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[224, "partial-differential-equations-pdes"], [225, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[224, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[224, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[224, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[224, "diophantine-equations-des"], [225, "diophantine-equations-des"]], "Inequalities": [[224, "inequalities"], [225, "inequalities"]], "Solveset": [[225, "solveset"]], "What\u2019s wrong with solve():": [[225, "what-s-wrong-with-solve"]], "Why Solveset?": [[225, "why-solveset"]], "Why do we use Sets as an output type?": [[225, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[225, "input-api-of-solveset"]], "What is this domain argument about?": [[225, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[225, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[225, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[225, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[225, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[225, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[225, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[225, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[225, "solveset-module-reference"]], "transolve": [[225, "transolve"]], "Stats": [[226, "module-sympy.stats"]], "Random Variable Types": [[226, "random-variable-types"]], "Finite Types": [[226, "finite-types"]], "Discrete Types": [[226, "discrete-types"]], "Continuous Types": [[226, "continuous-types"]], "Joint Types": [[226, "joint-types"]], "Stochastic Processes": [[226, "stochastic-processes"]], "Matrix Distributions": [[226, "matrix-distributions"]], "Compound Distribution": [[226, "compound-distribution"]], "Interface": [[226, "interface"]], "N-dim array": [[227, "module-sympy.tensor.array"]], "Products and contractions": [[227, "products-and-contractions"]], "Diagonal operator": [[227, "diagonal-operator"]], "Derivatives by array": [[227, "derivatives-by-array"]], "Classes": [[227, "classes"]], "N-dim array expressions": [[228, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[228, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[228, "compatibility-with-matrices"]], "Tensor": [[229, "module-sympy.tensor"], [232, "module-sympy.tensor.tensor"]], "Methods": [[230, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[231, "module-sympy.tensor.indexed"]], "Tensor Operators": [[233, "module-sympy.tensor.toperators"]], "Testing": [[234, "testing"]], "pytest": [[235, "module-sympy.testing.pytest"]], "Randomised Testing": [[236, "module-sympy.testing.randtest"]], "Run Tests": [[237, "module-sympy.testing.runtests"]], "Autowrap Module": [[238, "autowrap-module"]], "Implementation details": [[238, "implementation-details"]], "Codegen": [[239, "codegen"]], "Implementation Details": [[239, "implementation-details"]], "Routine": [[239, "routine"]], "Decorator": [[240, "module-sympy.utilities.decorator"]], "Enumerative": [[241, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[242, "module-sympy.utilities.exceptions"]], "Iterables": [[244, "module-sympy.utilities.iterables"]], "variations": [[244, "variations"]], "partitions": [[244, "partitions"]], "Memoization": [[246, "module-sympy.utilities.memoization"]], "PKGDATA": [[248, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[249, "module-sympy.utilities.source"]], "Timing Utilities": [[250, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[251, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[252, "vector-api"]], "Orienter classes (docstrings)": [[253, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[254, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[255, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[255, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[255, "sympy-operations-on-vectors"]], "Dyadics": [[255, "dyadics"]], "More about Coordinate Systems": [[256, "more-about-coordinate-systems"]], "Locating new systems": [[256, "locating-new-systems"]], "Orienting new systems": [[256, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[256, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[256, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[256, "orienting-and-locating-new-systems"]], "Transforming new system": [[256, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[256, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[256, "vectors-and-dyadics"]], "Coordinate Variables": [[256, "coordinate-variables"]], "Other expression-dependent methods": [[256, "other-expression-dependent-methods"]], "General examples of usage": [[257, "general-examples-of-usage"]], "Quadrilateral problem": [[257, "quadrilateral-problem"]], "The Problem": [[257, "the-problem"], [257, "id1"]], "Solution": [[257, "solution"], [257, "id2"]], "Third product rule for Del operator": [[257, "third-product-rule-for-del-operator"]], "See": [[257, "see"]], "Implementation in sympy.vector": [[258, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[258, "scalar-and-vector-fields"]], "The Del operator": [[258, "the-del-operator"]], "Field operators and related functions": [[258, "field-operators-and-related-functions"]], "Directional Derivative": [[258, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[258, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[259, "references-for-vector"]], "Coordinate Systems": [[260, "coordinate-systems"]], "Applications of Vector Integrals": [[261, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[261, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[261, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[261, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[261, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[261, "verifying-divergence-theorem"]], "Physics": [[262, "physics"], [268, "module-sympy.physics"]], "Topics": [[262, "topics"], [269, "topics"]], "Introductory Tutorial": [[271, "introductory-tutorial"], [276, "introductory-tutorial"]], "Basic Operations": [[272, "basic-operations"], [279, "basic-operations"]], "Quick Tip": [[272, null], [273, null], [275, null], [278, null], [279, null]], "Converting Strings to SymPy Expressions": [[272, "converting-strings-to-sympy-expressions"]], "Derivatives": [[273, "derivatives"]], "Series Expansion": [[273, "series-expansion"]], "Finite differences": [[273, "finite-differences"]], "SymPy Features": [[274, "sympy-features"]], "Equals signs": [[275, "equals-signs"]], "Two Final Notes: ^ and /": [[275, "two-final-notes-and"]], "Further Reading": [[275, "further-reading"]], "What is Symbolic Computation?": [[277, "what-is-symbolic-computation"]], "A More Interesting Example": [[277, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[277, "the-power-of-symbolic-computation"]], "Why SymPy?": [[277, "why-sympy"]], "Advanced Expression Manipulation": [[278, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[278, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[278, "recursing-through-an-expression-tree"]], "args": [[278, "args"]], "Key Invariant": [[278, null]], "Walking the Tree": [[278, "walking-the-tree"]], "Prevent expression evaluation": [[278, "prevent-expression-evaluation"]], "Shape": [[279, "shape"]], "Accessing Rows and Columns": [[279, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[279, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[279, "basic-methods"]], "Matrix Constructors": [[279, "matrix-constructors"]], "Advanced Methods": [[279, "advanced-methods"]], "Determinant": [[279, "determinant"]], "RREF": [[279, "rref"]], "Nullspace": [[279, "nullspace"]], "Columnspace": [[279, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[279, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[279, "possible-issues"]], "Zero Testing": [[279, "zero-testing"]], "What\u2019s Next": [[280, "whats-next"]], "Preliminaries": [[281, "preliminaries"]], "Exercises": [[281, "exercises"]], "Printers": [[282, "printers"]], "Setting up Pretty Printing": [[282, "setting-up-pretty-printing"]], "Printing Functions": [[282, "printing-functions"]], "str": [[282, "str"]], "ASCII Pretty Printer": [[282, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[282, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[282, "mathrm-latex"]], "MathML": [[282, "mathml"]], "Dot": [[282, "dot"]], "Simplification": [[283, "simplification"]], "simplify": [[283, "simplify"]], "Polynomial/Rational Function Simplification": [[283, "polynomial-rational-function-simplification"]], "expand": [[283, "expand"]], "factor": [[283, "factor"]], "collect": [[283, "collect"]], "cancel": [[283, "cancel"]], "apart": [[283, "apart"]], "Trigonometric Simplification": [[283, "trigonometric-simplification"]], "trigsimp": [[283, "trigsimp"]], "expand_trig": [[283, "expand-trig"]], "Powers": [[283, "powers"]], "powsimp": [[283, "powsimp"]], "expand_power_exp / expand_power_base": [[283, "expand-power-exp-expand-power-base"]], "powdenest": [[283, "powdenest"]], "Exponentials and logarithms": [[283, "exponentials-and-logarithms"]], "expand_log": [[283, "expand-log"]], "logcombine": [[283, "logcombine"]], "Special Functions": [[283, "special-functions"]], "rewrite": [[283, "rewrite"]], "expand_func": [[283, "expand-func"]], "hyperexpand": [[283, "hyperexpand"]], "combsimp": [[283, "combsimp"]], "gammasimp": [[283, "gammasimp"]], "Example: Continued Fractions": [[283, "example-continued-fractions"]], "A Note about Equations": [[284, "a-note-about-equations"]], "Solving Equations Algebraically": [[284, "solving-equations-algebraically"]], "Solving Differential Equations": [[284, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [28, "module-sympy"], [30, "module-sympy.abc"], [31, "module-sympy.algebras"], [32, "module-sympy.assumptions.ask"], [33, "module-sympy.assumptions.assume"], [34, "module-sympy.assumptions"], [35, "module-sympy.assumptions.predicates"], [36, "module-sympy.assumptions.refine"], [37, "module-sympy.calculus"], [37, "module-sympy.calculus.euler"], [37, "module-sympy.calculus.finite_diff"], [37, "module-sympy.calculus.singularities"], [37, "module-sympy.calculus.util"], [38, "module-sympy.categories"], [38, "module-sympy.categories.diagram_drawing"], [39, "module-sympy.codegen.algorithms"], [39, "module-sympy.codegen.approximations"], [39, "module-sympy.codegen.ast"], [39, "module-sympy.codegen.cfunctions"], [39, "module-sympy.codegen.cnodes"], [39, "module-sympy.codegen.cutils"], [39, "module-sympy.codegen.cxxnodes"], [39, "module-sympy.codegen.fnodes"], [39, "module-sympy.codegen.futils"], [39, "module-sympy.codegen.matrix_nodes"], [39, "module-sympy.codegen.pyutils"], [39, "module-sympy.codegen.rewriting"], [41, "module-sympy.combinatorics.graycode"], [42, "module-sympy.combinatorics.group_constructs"], [43, "module-sympy.combinatorics.group_numbers"], [45, "module-sympy.combinatorics.named_groups"], [46, "module-sympy.combinatorics.partitions"], [48, "module-sympy.combinatorics.perm_groups"], [49, "module-sympy.combinatorics.generators"], [49, "module-sympy.combinatorics.permutations"], [50, "module-sympy.combinatorics.polyhedron"], [51, "module-sympy.combinatorics.prufer"], [52, "module-sympy.combinatorics.subsets"], [53, "module-sympy.combinatorics.tensor_can"], [54, "module-sympy.combinatorics.testutil"], [55, "module-sympy.combinatorics.util"], [57, "module-sympy.core.add"], [57, "module-sympy.core.assumptions"], [57, "module-sympy.core.basic"], [57, "module-sympy.core.cache"], [57, "module-sympy.core.containers"], [57, "module-sympy.core.evalf"], [57, "module-sympy.core.expr"], [57, "module-sympy.core.exprtools"], [57, "module-sympy.core.function"], [57, "module-sympy.core.kind"], [57, "module-sympy.core.mod"], [57, "module-sympy.core.mul"], [57, "module-sympy.core.multidimensional"], [57, "module-sympy.core.numbers"], [57, "module-sympy.core.power"], [57, "module-sympy.core.random"], [57, "module-sympy.core.relational"], [57, "module-sympy.core.singleton"], [57, "module-sympy.core.symbol"], [57, "module-sympy.core.sympify"], [57, "module-sympy.core.traversal"], [58, "module-sympy.crypto.crypto"], [59, "module-sympy.diffgeom"], [60, "module-sympy.discrete"], [60, "module-sympy.discrete.convolutions"], [60, "module-sympy.discrete.transforms"], [64, "module-sympy.functions"], [65, "module-sympy.functions.special.bessel"], [65, "module-sympy.functions.special.beta_functions"], [65, "module-sympy.functions.special.elliptic_integrals"], [65, "module-sympy.functions.special.error_functions"], [65, "module-sympy.functions.special.gamma_functions"], [65, "module-sympy.functions.special.mathieu_functions"], [65, "module-sympy.functions.special.polynomials"], [65, "module-sympy.functions.special.singularity_functions"], [65, "module-sympy.functions.special.zeta_functions"], [66, "module-sympy.geometry.curve"], [67, "module-sympy.geometry.ellipse"], [68, "module-sympy.geometry.entity"], [70, "module-sympy.geometry.line"], [71, "module-sympy.geometry.plane"], [72, "module-sympy.geometry.point"], [73, "module-sympy.geometry.polygon"], [74, "module-sympy.geometry.util"], [77, "module-sympy.holonomic"], [82, "module-sympy.integrals.meijerint"], [82, "module-sympy.integrals.meijerint_doc"], [84, "module-sympy.integrals"], [84, "module-sympy.integrals.intpoly"], [84, "module-sympy.integrals.transforms"], [85, "module-sympy.interactive"], [85, "module-sympy.interactive.printing"], [85, "module-sympy.interactive.session"], [86, "module-sympy.liealgebras"], [87, "module-sympy.logic"], [87, "module-sympy.logic.inference"], [88, "module-sympy.matrices.common"], [90, "module-sympy.matrices.expressions"], [90, "module-sympy.matrices.expressions.blockmatrix"], [91, "module-sympy.matrices.immutable"], [92, "module-sympy.matrices"], [93, "module-sympy.matrices.matrices"], [95, "module-sympy.matrices.sparse"], [96, "module-sympy.matrices.sparsetools"], [97, "module-sympy.ntheory.bbp_pi"], [97, "module-sympy.ntheory.continued_fraction"], [97, "module-sympy.ntheory.digits"], [97, "module-sympy.ntheory.ecm"], [97, "module-sympy.ntheory.egyptian_fraction"], [97, "module-sympy.ntheory.factor_"], [97, "module-sympy.ntheory.generate"], [97, "module-sympy.ntheory.modular"], [97, "module-sympy.ntheory.multinomial"], [97, "module-sympy.ntheory.partitions_"], [97, "module-sympy.ntheory.primetest"], [97, "module-sympy.ntheory.qs"], [97, "module-sympy.ntheory.residue_ntheory"], [99, "module-sympy.parsing"], [99, "module-sympy.parsing.sym_expr"], [100, "module-sympy.physics.continuum_mechanics.beam"], [103, "module-sympy.physics.continuum_mechanics.truss"], [106, "module-sympy.physics.control"], [107, "module-sympy.physics.control.lti"], [108, "module-sympy.physics.hep.gamma_matrices"], [109, "module-sympy.physics.hydrogen"], [110, "module-sympy.physics.matrices"], [112, "module-sympy.physics.mechanics.body"], [115, "module-sympy.physics.mechanics.joint"], [115, "module-sympy.physics.mechanics.jointsmethod"], [116, "module-sympy.physics.mechanics.kane"], [116, "module-sympy.physics.mechanics.lagrange"], [117, "module-sympy.physics.mechanics.linearize"], [118, "module-sympy.physics.mechanics.particle"], [118, "module-sympy.physics.mechanics.rigidbody"], [120, "module-sympy.physics.mechanics.system"], [131, "module-sympy.physics.mechanics"], [140, "module-sympy.physics.optics.gaussopt"], [142, "module-sympy.physics.optics.medium"], [143, "module-sympy.physics.optics.polarization"], [144, "module-sympy.physics.optics.utils"], [145, "module-sympy.physics.optics.waves"], [146, "module-sympy.physics.paulialgebra"], [147, "module-sympy.physics.qho_1d"], [148, "module-sympy.physics.quantum.anticommutator"], [149, "module-sympy.physics.quantum.cartesian"], [150, "module-sympy.physics.quantum.cg"], [151, "module-sympy.physics.quantum.circuitplot"], [152, "module-sympy.physics.quantum.commutator"], [153, "module-sympy.physics.quantum.constants"], [154, "module-sympy.physics.quantum.dagger"], [155, "module-sympy.physics.quantum.gate"], [156, "module-sympy.physics.quantum.grover"], [157, "module-sympy.physics.quantum.hilbert"], [159, "module-sympy.physics.quantum.innerproduct"], [160, "module-sympy.physics.quantum.operator"], [161, "module-sympy.physics.quantum.operatorset"], [162, "module-sympy.physics.quantum.piab"], [163, "module-sympy.physics.quantum.qapply"], [164, "module-sympy.physics.quantum.qft"], [165, "module-sympy.physics.quantum.qubit"], [166, "module-sympy.physics.quantum.represent"], [167, "module-sympy.physics.quantum.shor"], [168, "module-sympy.physics.quantum.spin"], [169, "module-sympy.physics.quantum.state"], [170, "module-sympy.physics.quantum.tensorproduct"], [171, "module-sympy.physics.secondquant"], [172, "module-sympy.physics.sho"], [173, "module-sympy.physics.units.dimensions"], [177, "module-sympy.physics.units.prefixes"], [178, "module-sympy.physics.units.quantities"], [178, "module-sympy.physics.units.util"], [179, "module-sympy.physics.units.unitsystem"], [185, "module-sympy.physics.vector.functions"], [185, "module-sympy.physics.vector.point"], [188, "module-sympy.physics.vector"], [191, "module-sympy.physics.wigner"], [192, "module-sympy.plotting.plot"], [192, "module-sympy.plotting.pygletplot"], [199, "module-sympy.polys.polyconfig"], [199, "module-sympy.polys.polyoptions"], [201, "module-sympy.polys.numberfields.modules"], [201, "module-sympy.polys.numberfields.subfield"], [202, "module-sympy.polys"], [204, "module-sympy.polys.solvers"], [206, "module-sympy.printing.aesaracode"], [206, "module-sympy.printing.c"], [206, "module-sympy.printing.codeprinter"], [206, "module-sympy.printing.conventions"], [206, "module-sympy.printing.cxx"], [206, "module-sympy.printing.fortran"], [206, "module-sympy.printing.gtk"], [206, "module-sympy.printing.jscode"], [206, "module-sympy.printing.julia"], [206, "module-sympy.printing.lambdarepr"], [206, "module-sympy.printing.latex"], [206, "module-sympy.printing.maple"], [206, "module-sympy.printing.mathematica"], [206, "module-sympy.printing.mathml"], [206, "module-sympy.printing.octave"], [206, "module-sympy.printing.precedence"], [206, "module-sympy.printing.pretty"], [206, "module-sympy.printing.pretty.pretty"], [206, "module-sympy.printing.pretty.pretty_symbology"], [206, "module-sympy.printing.pretty.stringpict"], [206, "module-sympy.printing.preview"], [206, "module-sympy.printing.printer"], [206, "module-sympy.printing.pycode"], [206, "module-sympy.printing.python"], [206, "module-sympy.printing.rcode"], [206, "module-sympy.printing.repr"], [206, "module-sympy.printing.rust"], [206, "module-sympy.printing.smtlib"], [206, "module-sympy.printing.str"], [206, "module-sympy.printing.tree"], [214, "module-sympy.sets.conditionset"], [214, "module-sympy.sets.fancysets"], [214, "module-sympy.sets.powerset"], [214, "module-sympy.sets.sets"], [216, "module-sympy.simplify.hyperexpand_doc"], [218, "module-sympy.simplify.combsimp"], [218, "module-sympy.simplify.cse_main"], [218, "module-sympy.simplify.epathtools"], [218, "module-sympy.simplify.hyperexpand"], [218, "module-sympy.simplify.powsimp"], [218, "module-sympy.simplify.radsimp"], [218, "module-sympy.simplify.ratsimp"], [218, "module-sympy.simplify.sqrtdenest"], [218, "module-sympy.simplify.trigsimp"], [221, "module-sympy.solvers.inequalities"], [222, "module-sympy.solvers.ode"], [222, "module-sympy.solvers.ode.ode"], [223, "module-sympy.solvers.pde"], [224, "module-sympy.solvers"], [224, "module-sympy.solvers.recurr"], [225, "module-sympy.solvers.solveset"], [226, "module-sympy.stats"], [226, "module-sympy.stats.crv"], [226, "module-sympy.stats.crv_types"], [226, "module-sympy.stats.frv"], [226, "module-sympy.stats.frv_types"], [226, "module-sympy.stats.rv"], [227, "module-sympy.tensor.array"], [228, "module-sympy.tensor.array.expressions"], [229, "module-sympy.tensor"], [230, "module-sympy.tensor.index_methods"], [231, "module-sympy.tensor.indexed"], [232, "module-sympy.tensor.tensor"], [233, "module-sympy.tensor.toperators"], [234, "module-sympy.testing"], [235, "module-sympy.testing.pytest"], [236, "module-sympy.testing.randtest"], [237, "module-sympy.testing.runtests"], [238, "module-sympy.utilities.autowrap"], [239, "module-sympy.utilities.codegen"], [240, "module-sympy.utilities.decorator"], [241, "module-sympy.utilities.enumerative"], [242, "module-sympy.utilities.exceptions"], [243, "module-sympy.utilities"], [244, "module-sympy.utilities.iterables"], [245, "module-sympy.utilities.lambdify"], [246, "module-sympy.utilities.memoization"], [247, "module-sympy.utilities.misc"], [248, "module-sympy.utilities.pkgdata"], [249, "module-sympy.utilities.source"], [250, "module-sympy.utilities.timeutils"], [259, "module-sympy.vector"], [268, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[28, "module-sympy"]], "sympy.abc": [[30, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[31, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[31, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[31, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[31, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[31, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[31, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[31, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[32, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[32, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[32, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[32, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[32, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[33, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[33, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[33, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[33, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[33, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[33, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[33, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[33, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[33, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[33, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[33, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[33, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[33, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[33, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[34, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[35, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[35, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[35, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[35, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[35, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[35, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[35, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[35, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[35, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[35, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[35, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[35, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[35, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[35, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[35, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[35, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[35, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[35, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[35, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[35, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[35, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[35, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[35, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[35, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[35, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[35, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[35, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[35, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[35, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[35, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[35, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[35, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[35, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[35, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[36, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[36, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[37, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[37, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[37, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[37, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[37, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[37, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[37, "module-sympy.calculus"]], "sympy.calculus.euler": [[37, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[37, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[37, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[37, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[38, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[38, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[38, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[38, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[38, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[38, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[38, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[38, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[38, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[38, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[38, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[38, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[38, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[38, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[38, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[38, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[38, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[38, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[38, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[38, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[38, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[38, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[38, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[38, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[38, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[38, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[38, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[38, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[38, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[38, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[38, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[38, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[38, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[38, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[38, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[39, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[39, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[39, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[39, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[39, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[39, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[39, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[39, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[39, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[39, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[39, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[39, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[39, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[39, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[39, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[39, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[39, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[39, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[39, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[39, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[39, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[39, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[39, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[39, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[39, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[39, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[39, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[39, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[39, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[39, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[39, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[39, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[39, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[39, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[39, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[39, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[39, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[39, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[39, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[39, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[39, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[39, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[39, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[39, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[39, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[39, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[39, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[39, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[39, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[39, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[39, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[39, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[41, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[41, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[41, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[41, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[41, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[41, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[41, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[41, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[41, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[41, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[41, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[41, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[41, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[41, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[41, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[42, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[42, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[43, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[43, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[43, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[43, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[45, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[45, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[45, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[45, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[45, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[45, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[46, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[46, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[46, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[46, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[46, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[46, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[46, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[46, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[46, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[46, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[46, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[46, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[48, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[48, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[49, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[49, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[49, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[49, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[49, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[49, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[49, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[49, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[49, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[49, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[49, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[49, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[49, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[49, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[50, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[50, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[50, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[51, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[51, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[51, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[51, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[51, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[51, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[51, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[51, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[51, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[51, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[51, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[51, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[51, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[51, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[52, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[52, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[52, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[52, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[52, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[52, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[52, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[52, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[52, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[52, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[53, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[53, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[53, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[53, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[53, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[54, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[54, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[54, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[54, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[54, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[54, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[55, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[55, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[56, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[56, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[56, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[56, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[56, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[56, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[56, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[56, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[56, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[56, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[56, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[56, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[56, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[56, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[56, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[56, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[56, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[56, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[56, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[56, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[57, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[57, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[57, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[57, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[57, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[57, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[57, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[57, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[57, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[57, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[57, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[57, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[57, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[57, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[57, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[57, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[57, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[57, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[57, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[57, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[57, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[57, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[57, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[57, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[57, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[57, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[57, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[57, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[57, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[57, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[57, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[57, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[57, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[57, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[57, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[57, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[57, "sympy.core.numbers.One"]], "pep 335": [[57, "index-0"], [57, "index-1"], [57, "index-2"], [57, "index-3"]], "pi (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[57, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[57, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[57, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[57, "index-0"], [57, "index-1"], [57, "index-2"], [57, "index-3"]], "rational (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[57, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[57, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[57, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[57, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[57, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[57, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[57, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[57, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[57, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[57, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[57, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[57, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[57, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[57, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[57, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[57, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[57, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[57, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[57, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[57, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[57, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[57, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[57, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[57, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[57, "term-algebraic"]], "antihermitian": [[57, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[57, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[57, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[57, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[57, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.as_coeff_Add"], [57, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_coeff_Add"], [57, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[57, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[57, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_coeff_Mul"], [57, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[57, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[57, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[57, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[57, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[57, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[57, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[57, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[57, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[57, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[57, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[57, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[57, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[57, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[57, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[57, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[57, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[57, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[57, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.combsimp"]], "commutative": [[57, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.compare"]], "complex": [[57, "term-complex"]], "composite": [[57, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[57, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[57, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[57, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[57, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[57, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[57, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[57, "term-even"]], "expand() (in module sympy.core.function)": [[57, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[57, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[57, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[57, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[57, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[57, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[57, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[57, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[57, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[57, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[57, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[57, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[57, "term-extended_negative"]], "extended_nonnegative": [[57, "term-extended_nonnegative"]], "extended_nonpositive": [[57, "term-extended_nonpositive"]], "extended_nonzero": [[57, "term-extended_nonzero"]], "extended_positive": [[57, "term-extended_positive"]], "extended_real": [[57, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[57, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[57, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[57, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.find"]], "finite": [[57, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[57, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[57, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[57, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[57, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[57, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[57, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[57, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[57, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[57, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[57, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[57, "sympy.core.numbers.ilcm"]], "imaginary": [[57, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[57, "sympy.core.containers.Tuple.index"]], "infinite": [[57, "term-infinite"]], "integer": [[57, "term-integer"]], "integer_log() (in module sympy.core.power)": [[57, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[57, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[57, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.invert"]], "irrational": [[57, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[57, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[57, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[57, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[57, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[57, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[57, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[57, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[57, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[57, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[57, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[57, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[57, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[57, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[57, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.negated"]], "negative": [[57, "term-negative"]], "nfloat() (in module sympy.core.function)": [[57, "sympy.core.function.nfloat"]], "nonnegative": [[57, "term-nonnegative"]], "nonpositive": [[57, "term-nonpositive"]], "nonzero": [[57, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.nsimplify"]], "odd": [[57, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[57, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[57, "sympy.core.function.Subs.point"]], "positive": [[57, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[57, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[57, "sympy.core.traversal.preorder_traversal"]], "prime": [[57, "term-prime"]], "primitive() (sympy.core.add.add method)": [[57, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[57, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[57, "sympy.core.random.random_complex_number"]], "rational": [[57, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.rcall"]], "real": [[57, "term-real"]], "refine() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[57, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[57, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[57, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[57, "sympy.core.sympify.sympify"]], "sympy.core.add": [[57, "module-sympy.core.add"]], "sympy.core.assumptions": [[57, "module-sympy.core.assumptions"]], "sympy.core.basic": [[57, "module-sympy.core.basic"]], "sympy.core.cache": [[57, "module-sympy.core.cache"]], "sympy.core.containers": [[57, "module-sympy.core.containers"]], "sympy.core.evalf": [[57, "module-sympy.core.evalf"]], "sympy.core.expr": [[57, "module-sympy.core.expr"]], "sympy.core.exprtools": [[57, "module-sympy.core.exprtools"]], "sympy.core.function": [[57, "module-sympy.core.function"]], "sympy.core.kind": [[57, "module-sympy.core.kind"]], "sympy.core.mod": [[57, "module-sympy.core.mod"]], "sympy.core.mul": [[57, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[57, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[57, "module-sympy.core.numbers"]], "sympy.core.power": [[57, "module-sympy.core.power"]], "sympy.core.random": [[57, "module-sympy.core.random"]], "sympy.core.relational": [[57, "module-sympy.core.relational"]], "sympy.core.singleton": [[57, "module-sympy.core.singleton"]], "sympy.core.symbol": [[57, "module-sympy.core.symbol"]], "sympy.core.sympify": [[57, "module-sympy.core.sympify"]], "sympy.core.traversal": [[57, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[57, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[57, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.together"]], "transcendental": [[57, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[57, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[57, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[57, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[57, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[57, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[57, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[57, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[57, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[57, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[57, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[57, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[57, "sympy.core.basic.Basic.xreplace"]], "zero": [[57, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[58, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[58, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[59, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[59, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[59, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[59, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[59, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[59, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[59, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[59, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[59, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[59, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[59, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[59, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[59, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[59, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[59, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[59, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[59, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[59, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[60, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[60, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[60, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[60, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[60, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[62, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[62, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[63, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[63, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[63, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[63, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[63, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[63, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[63, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[63, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[63, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[63, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[63, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[63, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[63, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[63, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[63, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[63, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[63, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[63, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[63, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[63, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[63, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[63, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[63, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[63, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[63, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[63, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[63, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[63, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[63, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[63, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[63, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[63, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[63, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[63, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[63, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[63, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[63, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[63, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[63, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[63, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[63, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[63, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[63, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[63, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[63, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[63, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[63, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[63, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[63, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[63, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[63, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[63, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[63, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[63, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[63, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[63, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[63, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[63, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[64, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[65, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[65, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[65, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[65, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.Li"], [65, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[65, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[65, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[65, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[65, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[65, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[65, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[65, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[65, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[65, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[65, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[65, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[65, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[65, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[65, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[65, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[65, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[65, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[65, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[65, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[65, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[65, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[65, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[65, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[65, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[65, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[65, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[65, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[65, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[65, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[65, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[65, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[65, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[65, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[65, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[65, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[65, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[65, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[65, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[65, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[65, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[65, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[65, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[65, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[65, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[65, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[65, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[65, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[65, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[65, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[65, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[65, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[65, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[65, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[65, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[65, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[65, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[65, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[65, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[65, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[65, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[65, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[65, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[65, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[66, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[66, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[66, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[66, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[66, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[66, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[66, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[66, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[66, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[66, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[66, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[66, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[66, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[67, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[67, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[67, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[67, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[67, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[67, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[67, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[67, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[67, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[67, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[67, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[67, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[68, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[68, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[68, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[68, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[68, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[70, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[70, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[70, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[70, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[70, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[70, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[70, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[70, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[70, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[70, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[70, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[70, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[70, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[70, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[70, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[70, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[70, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[70, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[70, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[70, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[70, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[70, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[70, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[70, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[70, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[70, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[70, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[70, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[70, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[70, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[70, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[70, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[70, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[70, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[70, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[70, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[70, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[70, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[70, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[70, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[70, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[71, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[71, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[71, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[71, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[71, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[71, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[72, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[72, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[72, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[72, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[72, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[72, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[72, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[72, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[72, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[72, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[72, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[72, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[72, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[72, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[72, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[72, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[72, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[72, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[72, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[72, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[72, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[72, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[72, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[72, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[72, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[72, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[72, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[72, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[73, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[73, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[73, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[73, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[73, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[73, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[73, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[73, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[73, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[73, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[73, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[73, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[73, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[73, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[73, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[73, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[73, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[73, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[73, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[74, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[74, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[74, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[74, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[74, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[74, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[76, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[76, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[76, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[77, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[79, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[80, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[82, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[82, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[82, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[82, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[84, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[84, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[84, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[84, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[84, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[84, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[84, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[84, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[84, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[84, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[84, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[84, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[84, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[84, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[84, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[84, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[84, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[84, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[84, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[84, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[84, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[84, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[84, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[84, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[84, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[84, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[84, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[84, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[84, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[84, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[84, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[84, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[84, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[85, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[85, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[85, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[85, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[85, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[85, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[85, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[85, "module-sympy.interactive"]], "sympy.interactive.printing": [[85, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[85, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[86, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[86, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[86, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[86, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[86, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[86, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[86, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[86, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[86, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[86, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[86, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[86, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[86, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[86, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[86, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[86, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[86, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[86, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[86, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[86, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[86, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[86, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[86, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[86, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[86, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[86, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[86, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[86, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[86, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[86, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[87, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[87, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[87, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[87, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[87, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[87, "module-sympy.logic"]], "sympy.logic.inference": [[87, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[87, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[88, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[88, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[88, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[88, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[88, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[88, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[88, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[89, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[89, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[89, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[89, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[89, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[89, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[89, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[89, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[89, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[89, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[90, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[90, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[90, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[90, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[90, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[90, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[90, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[90, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[90, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[90, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[90, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[90, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[90, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[90, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[90, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[90, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[90, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[90, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[91, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[91, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[91, "module-sympy.matrices.immutable"]], "sympy.matrices": [[92, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[93, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[93, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[93, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[93, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[93, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[93, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[93, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[93, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[93, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[93, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[93, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[93, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[93, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[93, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[93, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[93, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[93, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[93, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[93, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[93, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[93, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[93, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[93, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[93, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[93, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[93, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[94, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[94, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[95, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[95, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[95, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[95, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[96, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[96, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[96, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[96, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[97, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[97, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[97, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[97, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[97, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[97, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[97, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[97, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[97, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[97, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[97, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[97, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[97, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[97, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[97, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[97, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[97, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[97, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[97, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[97, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[97, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[97, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[97, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[97, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[97, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[97, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[97, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[97, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[97, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[97, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[97, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[97, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[97, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[97, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[97, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[97, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[97, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[97, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[97, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[97, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[97, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[97, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[97, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[97, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[97, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[97, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[99, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[99, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[99, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[99, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[99, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[99, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[99, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[99, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[99, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[99, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[99, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[99, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[99, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[100, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[100, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[100, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[100, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[103, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[103, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[103, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[105, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[106, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[107, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[107, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[107, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[107, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[107, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[107, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[107, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[107, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[107, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[107, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[107, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[107, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[107, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[107, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[107, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[107, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[107, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[107, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[107, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[107, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[107, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[107, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[107, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[107, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[107, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[107, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[107, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[107, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[107, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[107, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[107, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[107, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[107, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[107, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[107, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[107, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[107, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[107, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[107, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[107, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[107, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[107, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[107, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[107, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[107, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[107, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[107, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[107, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[107, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[108, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[108, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[108, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[108, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[108, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[109, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[109, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[109, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[109, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[109, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[110, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[110, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[110, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[110, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[110, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[112, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[112, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[112, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[112, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[112, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[112, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[112, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[113, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[113, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[115, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[115, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[115, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[115, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[115, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[115, "sympy.physics.mechanics.joint.SphericalJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[115, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[115, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[115, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[115, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[115, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[115, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[115, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[115, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[115, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[115, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[115, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[115, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[115, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[115, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[115, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[115, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[115, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[116, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[116, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[116, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[116, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[116, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[116, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[116, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[116, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[116, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[116, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[117, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[117, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[117, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[118, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[118, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[118, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[118, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[118, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[118, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[118, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[118, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[118, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[118, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[118, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[118, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[120, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[120, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[120, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[131, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[140, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[140, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[140, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[140, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[140, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[140, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[140, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[140, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[140, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[142, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[142, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[142, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[142, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[143, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[143, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[144, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[144, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[145, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[145, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[145, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[146, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[146, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[147, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[147, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[147, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[147, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[148, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[148, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[148, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[149, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[149, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[149, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[149, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[149, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[149, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[149, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[149, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[149, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[150, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[150, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[150, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[150, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[150, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[150, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[151, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[151, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[151, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[151, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[151, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[151, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[151, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[152, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[152, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[152, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[153, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[153, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[154, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[154, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[155, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[155, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[155, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[155, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[155, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[155, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[155, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[155, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[155, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[155, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[155, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[155, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[155, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[155, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[155, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[155, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[155, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[155, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[155, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[155, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[155, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[156, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[156, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[156, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[156, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[156, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[156, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[156, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[156, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[157, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[157, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[157, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[157, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[157, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[157, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[157, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[159, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[159, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[160, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[160, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[160, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[160, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[160, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[160, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[160, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[160, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[160, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[160, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[160, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[160, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[160, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[161, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[161, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[161, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[162, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[162, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[162, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[162, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[163, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[163, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[164, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[164, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[164, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[164, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[164, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[164, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[164, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[165, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[165, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[166, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[166, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[166, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[166, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[166, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[166, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[166, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[167, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[167, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[167, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[167, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[167, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[167, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[167, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[168, "sympy.physics.quantum.spin.Rotation.D"], [168, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[168, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[168, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[169, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[169, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[169, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[169, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[169, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[169, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[169, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[169, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[169, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[169, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[169, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[169, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[169, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[169, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[169, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[170, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[170, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[170, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[171, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[171, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[171, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[171, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[171, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[171, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[171, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[171, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[171, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[171, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[171, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[171, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[171, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[171, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[171, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[171, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[171, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[171, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[171, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[171, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[171, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[171, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[171, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[171, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[171, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[171, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[171, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[171, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[171, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[171, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[171, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[171, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[171, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[171, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[171, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[172, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[172, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[172, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[173, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[173, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[173, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[173, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[173, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[173, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[173, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[173, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[173, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[173, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[173, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[173, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[173, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[177, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[177, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[178, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[178, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[178, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[178, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[178, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[178, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[178, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[178, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[178, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[178, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[179, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[179, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[179, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[179, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[179, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[179, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[181, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[181, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[181, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[181, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[181, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[181, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[181, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[181, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[181, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[181, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[181, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[181, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[182, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[183, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[183, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[183, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[183, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[183, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[183, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[185, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[185, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[185, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[185, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[186, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[186, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[186, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[186, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[188, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[191, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[191, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[192, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[192, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[192, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[192, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[192, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[192, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[192, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[192, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[192, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[192, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[192, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[192, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[192, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[192, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[192, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[192, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[192, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[192, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[193, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[193, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[193, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[193, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[193, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[193, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[193, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[193, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[193, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[193, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[193, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[193, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[193, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[193, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[193, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[193, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[193, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[193, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[193, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[193, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[193, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[193, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[193, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[195, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[195, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[195, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[195, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[195, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[195, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[195, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[195, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[195, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[195, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[195, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[195, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[197, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[197, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[197, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[197, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[197, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[197, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[197, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[197, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[197, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[197, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[197, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[197, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[197, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[197, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[197, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[197, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[197, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[197, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[197, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[197, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[197, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[197, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[197, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[197, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[197, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[197, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[197, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[197, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[197, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[197, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[197, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[197, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[197, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[197, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[197, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[197, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[197, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[197, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[197, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[197, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[197, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[197, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[197, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[197, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[197, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[197, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[197, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[197, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[197, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[197, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[197, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[197, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[197, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[197, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[197, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[197, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[197, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[197, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[197, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[197, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[197, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[197, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[197, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[197, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[197, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[197, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[197, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[197, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[197, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[197, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[197, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[197, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[197, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[197, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[197, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[197, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[199, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[199, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[199, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[199, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[199, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[199, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[199, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[199, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[199, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[199, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[199, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[199, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[199, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[199, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[199, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[199, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[199, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[199, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[199, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[199, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[199, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[199, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[199, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[199, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[199, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[199, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[201, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[201, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[201, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[201, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[201, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[201, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[201, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[201, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[201, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[201, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[201, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[201, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[201, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[201, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[201, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[201, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[201, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[201, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[201, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[201, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[201, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[201, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[201, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[201, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[201, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[201, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[201, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[201, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[201, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[201, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[201, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[201, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[201, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[201, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[201, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[201, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[201, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[202, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[202, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[202, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[202, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[202, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[202, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[202, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[202, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[202, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[202, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[202, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[202, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[202, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[202, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[202, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[202, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[202, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[202, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[202, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[202, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[202, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[202, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[202, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[202, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[202, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[202, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[202, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[202, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[202, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[202, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[202, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[202, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[202, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[202, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[202, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[202, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[202, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[202, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[202, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[202, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[202, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[202, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[202, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[202, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[202, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[202, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[202, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[202, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[202, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[202, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[202, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[202, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[202, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[202, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[202, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[202, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[202, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[203, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[204, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[204, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[204, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[204, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[204, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[204, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[206, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[206, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[206, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[206, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[206, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[206, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[206, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[206, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.G"], [206, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[206, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[206, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[206, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[206, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[206, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[206, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[206, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[206, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[206, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[206, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[206, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[206, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[206, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[206, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[206, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[206, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[206, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[206, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[206, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[206, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[206, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[206, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[206, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[206, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[206, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[206, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[206, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[206, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[206, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[206, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[206, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[206, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[206, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[206, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[206, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[206, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[206, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[206, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[206, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[206, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[206, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[206, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[206, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[206, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[206, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[206, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[206, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[206, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[206, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[206, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[206, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[206, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[206, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[206, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[206, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[206, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[206, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[206, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[206, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[206, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[206, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[206, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[206, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[206, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[206, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[206, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[206, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[206, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[206, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[206, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[206, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[206, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[206, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[206, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[206, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[206, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[206, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[206, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[206, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[206, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[206, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[206, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[206, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[206, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[206, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[206, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[206, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[206, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[206, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[206, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[206, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[206, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[206, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[206, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[206, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[206, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[206, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[206, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[206, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[206, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[206, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[206, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[206, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[206, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[206, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[206, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[206, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[206, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[206, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[206, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[206, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[206, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[206, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[206, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[206, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[206, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[206, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[206, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[206, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[206, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[206, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[206, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[206, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[206, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[206, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[206, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[206, "module-sympy.printing.latex"]], "sympy.printing.maple": [[206, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[206, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[206, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[206, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[206, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[206, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[206, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[206, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[206, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[206, "module-sympy.printing.preview"]], "sympy.printing.printer": [[206, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[206, "module-sympy.printing.pycode"]], "sympy.printing.python": [[206, "module-sympy.printing.python"]], "sympy.printing.rcode": [[206, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[206, "module-sympy.printing.repr"]], "sympy.printing.rust": [[206, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[206, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[206, "module-sympy.printing.str"]], "sympy.printing.tree": [[206, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[206, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[206, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[206, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[208, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[208, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[208, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[208, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[208, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[208, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[208, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[208, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[208, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[208, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[208, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[208, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[208, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[208, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[208, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[208, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[208, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[208, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[208, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[208, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[209, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[209, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[209, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[209, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[209, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[209, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[209, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[209, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[211, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[211, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[211, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[212, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[212, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[212, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[212, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[212, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[212, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[212, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[212, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[212, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[212, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[212, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[212, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[212, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[212, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[212, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[212, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[212, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[212, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[213, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[213, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[213, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[213, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[213, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[213, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[213, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[213, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[213, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[213, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[213, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[213, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[213, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[213, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[213, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[214, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[214, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[214, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[214, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[214, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[214, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[214, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[214, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[214, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[214, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[214, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[214, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[214, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[214, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[214, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[214, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[214, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[214, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[214, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[214, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[214, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[214, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[214, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[214, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[214, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[214, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[214, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[214, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[214, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[214, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[214, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[214, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[214, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[214, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[214, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[214, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[214, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[214, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[214, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[214, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[214, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[214, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[214, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[214, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[214, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[214, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[214, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[215, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[216, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[218, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[218, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[218, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[218, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[218, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[218, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[218, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[218, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[218, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[218, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[218, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[218, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[218, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[218, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[218, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[218, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[218, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[218, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[218, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[218, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[218, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[218, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[218, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[218, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[218, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[218, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[219, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[219, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[221, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[221, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[222, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[222, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[222, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[222, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[222, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[222, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[222, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[222, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[223, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[223, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[224, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[224, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[224, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[224, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[224, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[224, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[224, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[224, "module-sympy.solvers"]], "sympy.solvers.recurr": [[224, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[224, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[225, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[225, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[226, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[226, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[226, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[226, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[226, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[226, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[226, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[226, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[226, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[226, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[226, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[226, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[226, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[226, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[226, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[226, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[226, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[226, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[226, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[226, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[226, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[226, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[226, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[226, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[226, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[226, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[226, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[226, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[226, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[226, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[226, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[226, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[226, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[226, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[226, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[226, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[226, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[226, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[226, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[226, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[226, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[226, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[226, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[226, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[226, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[226, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[226, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[226, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[226, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[226, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[226, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[226, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[226, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[226, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[226, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[226, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[226, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[226, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[226, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[226, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[226, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[226, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[226, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[226, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[226, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[226, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[226, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[226, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[226, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[226, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[226, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[226, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[226, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[226, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[226, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[226, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[226, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[226, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[226, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[226, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[226, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[226, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[226, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[226, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[226, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[226, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[226, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[226, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[226, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[226, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[226, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[226, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[226, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[226, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[226, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[226, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[226, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[226, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[226, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[226, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[226, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[226, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[226, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[226, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[226, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[226, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[226, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[226, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[226, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[226, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[226, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[226, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[226, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[226, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[226, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[226, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[226, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[226, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[226, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[226, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[226, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[226, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[226, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[226, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[226, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[226, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[226, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[226, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[226, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[226, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[226, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[226, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[226, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[226, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[226, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[226, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[226, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[226, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[226, "sympy.stats.std"]], "sympy.stats": [[226, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[226, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[226, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[226, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[226, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[226, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[226, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[226, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[226, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[226, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[226, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[227, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[227, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[227, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[227, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[227, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[227, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[227, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[227, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[227, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[227, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[228, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[229, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[230, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[230, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[230, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[231, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[231, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[231, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[231, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[231, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[231, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[231, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[231, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[231, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[231, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[231, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[231, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[231, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[231, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[231, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[231, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[232, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[232, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[232, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[232, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[232, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[232, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[232, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[232, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[232, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[232, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[232, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[232, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[232, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[232, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[232, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[232, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[232, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[232, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[232, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[233, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[233, "module-sympy.tensor.toperators"]], "sympy.testing": [[234, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[235, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[235, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[235, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[235, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[235, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[235, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[236, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[237, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[237, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[237, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[237, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[237, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[237, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[237, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[237, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[237, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[237, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[237, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[237, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[237, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[238, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[238, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[238, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[238, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[239, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[239, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[239, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[239, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[239, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[239, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[239, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[239, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[239, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[239, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[239, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[239, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[239, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[239, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[239, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[239, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[239, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[239, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[239, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[239, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[240, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[240, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[241, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[241, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[241, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[241, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[241, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[241, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[241, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[241, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[241, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[241, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[242, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[242, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[242, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[242, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[243, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[244, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[244, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[245, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[245, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[245, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[245, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[246, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[246, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[246, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[247, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[247, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[248, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[248, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[249, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[249, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[249, "sympy.utilities.source.source"]], "sympy.utilities.source": [[249, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[250, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[250, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[251, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[251, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[251, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[251, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[251, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[251, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[251, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[251, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[251, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[251, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[251, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[251, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[251, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[251, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[251, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[251, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[251, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[251, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[251, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[251, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[251, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[253, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[253, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[253, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[253, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[253, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[253, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[253, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[253, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[253, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[253, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[253, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[254, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[254, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[254, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[254, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[254, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[254, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[254, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[254, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[254, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[254, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[259, "module-sympy.vector"]], "sympy.physics": [[268, "module-sympy.physics"]]}})