Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/index", "guides/solving/solve-equation-algebraically", "guides/solving/solve-numerically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/index.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-numerically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Solve Equations", "Solve an Equation Algebraically", "Solve One or a System of Equations Numerically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Introduction", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Ntheory Class Reference", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 23, 24, 25, 27, 28, 31, 32, 35, 36, 37, 38, 45, 46, 47, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 68, 78, 80, 82, 84, 85, 86, 88, 91, 95, 97, 98, 99, 103, 105, 106, 108, 110, 112, 113, 131, 132, 135, 145, 149, 162, 171, 173, 177, 183, 186, 188, 190, 192, 193, 195, 197, 198, 199, 201, 202, 209, 210, 212, 215, 218, 219, 220, 221, 222, 223, 226, 227, 231, 233, 234, 237, 238, 240, 241, 247, 248, 250, 251, 253, 255, 256, 267, 268, 270, 271, 273, 274, 277, 278, 279], "public": [0, 6, 37, 55, 56, 77, 192, 193, 195, 196, 200, 215, 218, 222, 236, 239, 247], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 22, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 135, 136, 137, 140, 141, 143, 145, 147, 148, 149, 152, 154, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 250, 252, 253, 255, 256, 258, 259, 264, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 24, 25, 26, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 99, 101, 103, 105, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 142, 145, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 240, 241, 247, 248, 250, 251, 252, 253, 255, 256, 263, 269, 271, 273, 274, 278], "smith": [0, 10, 92, 191], "cp": [0, 47, 96, 190], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 29, 33, 37, 38, 43, 44, 46, 47, 51, 54, 55, 56, 57, 58, 60, 63, 65, 67, 71, 72, 80, 82, 84, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 99, 101, 105, 107, 108, 110, 112, 113, 114, 115, 117, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 144, 151, 165, 166, 169, 171, 173, 183, 187, 189, 190, 191, 193, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 218, 220, 221, 222, 223, 224, 227, 228, 234, 235, 237, 240, 242, 247, 249, 251, 255, 256, 268, 274, 277, 278, 279], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 28, 36, 37, 46, 47, 53, 55, 56, 61, 63, 65, 66, 68, 69, 71, 77, 80, 95, 99, 110, 113, 115, 117, 118, 130, 131, 132, 133, 135, 136, 158, 168, 179, 181, 183, 185, 187, 195, 196, 198, 199, 202, 204, 209, 212, 218, 222, 227, 233, 240, 243, 244, 249, 252, 268], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 221], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 77, 78, 80, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 96, 97, 98, 99, 103, 105, 107, 109, 110, 112, 115, 118, 120, 124, 128, 129, 133, 135, 139, 140, 141, 147, 148, 150, 152, 154, 155, 158, 162, 163, 165, 166, 168, 171, 173, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 228, 233, 234, 235, 236, 237, 238, 240, 241, 243, 247, 248, 252, 253, 254, 255, 258, 266, 267, 268, 270, 271, 272, 273, 274, 278, 279], "moor": [0, 88, 91], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 29, 32, 33, 35, 37, 38, 39, 46, 47, 48, 49, 51, 55, 56, 57, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 82, 84, 85, 86, 87, 88, 91, 95, 96, 97, 101, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 121, 122, 123, 130, 131, 132, 133, 135, 136, 140, 142, 148, 152, 155, 164, 166, 168, 170, 171, 173, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 205, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 228, 231, 233, 236, 240, 241, 247, 249, 251, 255, 267, 268, 272, 273, 274, 277, 278, 279], "vig": 0, "granger": [0, 154], "BE": 0, "muller": 0, "rp": [0, 71, 140], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 23, 24, 35, 36, 37, 38, 45, 46, 47, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 73, 78, 79, 80, 82, 84, 86, 88, 91, 95, 96, 97, 99, 103, 112, 113, 117, 123, 128, 130, 131, 135, 137, 141, 142, 153, 154, 157, 166, 168, 171, 178, 182, 183, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 227, 228, 233, 234, 235, 236, 237, 240, 241, 243, 252, 253, 256, 263, 267, 268, 273, 277, 278, 279], "gupta": [0, 221], "h": [0, 12, 16, 35, 36, 37, 38, 39, 46, 51, 54, 55, 56, 60, 63, 77, 80, 82, 86, 87, 91, 92, 97, 105, 112, 115, 133, 137, 140, 152, 154, 155, 157, 162, 166, 173, 187, 188, 189, 190, 191, 195, 196, 197, 198, 201, 202, 210, 214, 218, 220, 221, 222, 223, 228, 235, 256, 268, 277], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 154], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 140, 141, 142, 143, 145, 147, 149, 152, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 255, 257, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 152, 154, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 267, 268, 270, 271, 273, 274, 276, 277, 278, 279], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 29, 36, 37, 38, 39, 46, 47, 55, 56, 57, 59, 60, 61, 68, 69, 71, 73, 77, 78, 80, 82, 91, 95, 97, 99, 101, 105, 107, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 126, 127, 132, 133, 134, 135, 136, 137, 140, 164, 165, 168, 169, 171, 178, 179, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 209, 210, 212, 214, 215, 218, 220, 221, 222, 228, 233, 235, 237, 247, 249, 251, 252, 253, 256, 278], "scopatz": 0, "2017": [0, 187], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 45, 47, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 77, 78, 79, 80, 82, 83, 85, 86, 88, 91, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 133, 135, 137, 140, 141, 142, 143, 145, 147, 148, 150, 152, 154, 156, 157, 160, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 234, 240, 241, 247, 248, 249, 251, 252, 253, 256, 258, 263, 267, 268, 271, 273, 274, 277, 278, 279], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 27, 29, 35, 37, 38, 39, 42, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 70, 74, 77, 78, 79, 81, 82, 84, 86, 88, 91, 92, 94, 95, 97, 98, 99, 103, 105, 109, 112, 113, 114, 117, 118, 120, 121, 125, 128, 135, 152, 153, 154, 162, 167, 168, 170, 172, 173, 177, 178, 179, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 205, 207, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 224, 234, 237, 240, 241, 247, 248, 249, 250, 251, 252, 253, 255, 258, 263, 267, 268, 270, 271, 274, 278], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 35, 47, 55, 56, 59, 61, 67, 83, 85, 86, 88, 91, 95, 96, 97, 98, 109, 118, 135, 178, 188, 189, 190, 192, 193, 199, 201, 202, 210, 214, 218, 221, 223, 233, 234, 235, 236, 237, 240, 241, 243, 247, 259, 270, 271, 272, 273, 274, 276, 277, 278], "peerj": 0, "scienc": [0, 47, 80, 91, 134, 135, 189, 196, 212, 268], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 115, 117, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 135, 136, 137, 139, 141, 145, 147, 148, 149, 153, 157, 162, 163, 165, 167, 168, 171, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 233, 234, 236, 237, 238, 240, 241, 243, 245, 247, 248, 249, 250, 251, 253, 255, 256, 263, 267, 268, 270, 272, 273, 274, 277, 278, 279], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 27, 29, 31, 32, 33, 35, 36, 37, 39, 43, 44, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 71, 72, 73, 77, 80, 82, 83, 84, 85, 86, 88, 91, 95, 98, 103, 105, 107, 108, 137, 139, 140, 141, 143, 144, 145, 149, 150, 151, 154, 156, 157, 166, 168, 178, 180, 182, 184, 187, 196, 198, 201, 202, 205, 207, 209, 210, 211, 214, 215, 218, 221, 222, 234, 235, 236, 238, 240, 241, 243, 247, 248, 252, 254, 256, 274, 277], "doi": [0, 6, 35, 47, 91, 196, 211, 214, 222], "org": [0, 3, 6, 7, 12, 18, 20, 29, 31, 32, 33, 35, 36, 37, 43, 44, 46, 47, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 71, 72, 73, 82, 83, 84, 85, 86, 88, 91, 95, 103, 105, 107, 108, 137, 139, 140, 141, 143, 144, 145, 149, 150, 151, 154, 156, 157, 166, 168, 178, 180, 182, 184, 196, 198, 202, 205, 209, 210, 211, 215, 218, 221, 222, 234, 235, 236, 238, 240, 247, 248, 252, 254, 256, 274, 277], "10": [0, 3, 6, 12, 20, 24, 25, 27, 29, 35, 37, 44, 46, 47, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 68, 69, 71, 72, 80, 82, 83, 85, 86, 88, 91, 92, 95, 96, 97, 98, 100, 101, 103, 105, 106, 111, 115, 118, 120, 135, 137, 141, 152, 162, 163, 174, 178, 179, 180, 181, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 205, 208, 209, 210, 211, 214, 215, 218, 221, 222, 223, 232, 233, 238, 240, 241, 243, 247, 249, 267, 274, 278], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 28, 29, 35, 36, 39, 40, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 78, 80, 82, 84, 85, 86, 88, 91, 95, 96, 97, 98, 99, 101, 105, 107, 109, 111, 112, 113, 118, 123, 125, 126, 127, 129, 131, 132, 133, 135, 137, 138, 141, 147, 148, 149, 152, 154, 157, 162, 165, 167, 168, 173, 178, 181, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 227, 228, 234, 235, 237, 240, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 259, 265, 268, 270, 277, 278, 279], "103": [0, 46], "bibtex": 0, "entri": [0, 10, 33, 38, 45, 47, 53, 56, 67, 80, 84, 86, 87, 88, 90, 94, 113, 118, 120, 133, 140, 191, 195, 197, 198, 212, 222, 241], "latex": [0, 1, 3, 6, 11, 20, 25, 27, 63, 83, 177, 178, 182, 186, 188, 193, 202, 265, 272, 273], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 36, 37, 38, 46, 47, 54, 55, 56, 57, 63, 67, 80, 84, 88, 91, 97, 98, 99, 103, 105, 109, 118, 128, 131, 133, 136, 156, 157, 166, 172, 173, 177, 178, 181, 185, 189, 192, 195, 197, 199, 200, 201, 202, 203, 211, 214, 216, 220, 221, 222, 231, 234, 235, 237, 238, 241, 247, 250, 251, 256, 267, 270, 271, 273, 274, 275], "articl": [0, 55, 56, 88, 91, 194, 196, 197, 202, 247, 272], "titl": [0, 6, 7, 188], "author": [0, 6, 95, 154, 197, 263], "aaron": 0, "christoph": [0, 247], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 29, 31, 32, 33, 37, 38, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 68, 69, 70, 71, 72, 77, 78, 80, 82, 86, 88, 91, 95, 97, 98, 99, 101, 105, 106, 110, 112, 113, 114, 115, 117, 118, 122, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 147, 166, 168, 173, 179, 181, 183, 185, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 202, 204, 205, 209, 210, 212, 214, 215, 218, 220, 221, 222, 223, 227, 228, 240, 247, 249, 250, 251, 252, 253, 255, 274, 278], "mateusz": 0, "v": [0, 1, 5, 14, 23, 25, 29, 37, 45, 51, 54, 55, 56, 57, 58, 59, 63, 69, 80, 84, 86, 91, 95, 99, 110, 111, 112, 115, 120, 132, 133, 135, 136, 140, 141, 153, 168, 173, 178, 180, 181, 183, 185, 186, 188, 194, 195, 196, 197, 198, 202, 212, 214, 215, 218, 220, 222, 233, 240, 247, 249, 250, 251, 252, 253, 255], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 29, 35, 36, 37, 38, 39, 41, 45, 46, 49, 50, 53, 54, 55, 56, 58, 59, 60, 61, 63, 68, 73, 80, 82, 85, 86, 88, 91, 95, 112, 113, 123, 130, 132, 133, 135, 142, 156, 157, 160, 164, 166, 168, 177, 183, 187, 189, 191, 192, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 218, 220, 222, 223, 224, 226, 227, 228, 229, 233, 237, 240, 247, 248, 249, 250, 251, 252, 253, 255, 256, 277, 278], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 29, 36, 37, 38, 39, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 78, 80, 82, 84, 85, 86, 87, 88, 91, 95, 97, 98, 99, 101, 103, 105, 110, 111, 112, 113, 114, 115, 118, 122, 123, 132, 133, 135, 137, 138, 140, 145, 147, 149, 151, 156, 157, 160, 165, 166, 167, 168, 178, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 233, 236, 237, 240, 243, 247, 248, 249, 250, 251, 252, 263, 268, 270, 274, 278, 279], "matthew": 0, "amit": [0, 221], "sergiu": 0, "jason": [0, 202], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 154], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 24, 25, 28, 29, 33, 35, 36, 37, 38, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 84, 85, 86, 91, 95, 97, 98, 99, 101, 105, 106, 110, 112, 113, 115, 117, 118, 131, 132, 135, 136, 137, 140, 147, 148, 152, 157, 158, 160, 163, 165, 167, 168, 173, 174, 178, 182, 183, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 247, 250, 253, 255, 256, 267, 268, 272, 273, 278], "richard": [0, 95], "francesco": 0, "harsh": [0, 221], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 29, 33, 35, 37, 38, 41, 45, 46, 47, 51, 53, 54, 56, 57, 59, 60, 63, 77, 80, 82, 84, 86, 88, 91, 95, 103, 106, 112, 133, 134, 135, 140, 147, 148, 165, 168, 173, 177, 183, 187, 189, 191, 193, 195, 196, 197, 198, 199, 201, 202, 204, 210, 212, 214, 215, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 234, 240, 247, 248, 249, 250, 251, 252, 253, 255, 256], "andi": [0, 134], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 23, 28, 33, 35, 37, 38, 39, 41, 43, 44, 45, 46, 47, 49, 51, 53, 54, 56, 57, 59, 60, 61, 63, 65, 68, 69, 70, 71, 72, 77, 78, 80, 82, 84, 85, 86, 88, 91, 92, 95, 97, 98, 99, 101, 105, 107, 108, 110, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 144, 148, 153, 154, 155, 157, 162, 164, 165, 166, 168, 169, 171, 173, 175, 177, 178, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 220, 221, 222, 225, 227, 228, 231, 234, 240, 242, 243, 247, 248, 249, 250, 251, 255, 268, 274, 277, 278, 279], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 222], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 56], "keyword": [0, 4, 6, 11, 14, 20, 36, 37, 38, 46, 47, 55, 56, 59, 60, 68, 70, 71, 72, 86, 91, 95, 98, 103, 105, 113, 130, 131, 162, 168, 182, 188, 190, 192, 193, 195, 197, 198, 201, 202, 203, 209, 214, 215, 220, 227, 233, 234, 236, 238, 241, 243, 251, 274], "algebra": [0, 7, 11, 12, 14, 18, 22, 24, 25, 32, 38, 46, 55, 56, 59, 61, 73, 76, 77, 78, 80, 82, 85, 86, 90, 92, 95, 96, 97, 117, 128, 135, 136, 184, 187, 190, 191, 193, 194, 195, 196, 198, 199, 202, 204, 212, 215, 216, 218, 221, 257, 258, 261, 263, 264, 269, 270, 272, 274], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 30, 32, 46, 55, 56, 57, 61, 80, 83, 84, 85, 86, 91, 96, 97, 98, 101, 102, 104, 105, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 133, 135, 146, 147, 162, 165, 166, 168, 171, 175, 178, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 210, 211, 216, 217, 221, 222, 233, 234, 247, 248, 249, 252, 254, 256, 263, 270, 272, 274, 278, 279], "abstract": [0, 10, 35, 36, 44, 55, 57, 61, 63, 68, 73, 88, 112, 118, 152, 154, 163, 166, 167, 168, 189, 194, 197, 221, 222, 224, 228, 235, 255, 259], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 105, 106, 107, 109, 110, 112, 113, 115, 117, 120, 122, 128, 130, 132, 133, 135, 136, 139, 140, 141, 145, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 161, 162, 163, 165, 166, 168, 169, 170, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 247, 248, 250, 251, 253, 254, 255, 256, 264, 267, 268, 269, 270, 271, 272, 274, 277, 278, 279], "open": [0, 1, 3, 4, 6, 7, 9, 10, 23, 24, 27, 35, 55, 57, 61, 82, 85, 105, 118, 121, 135, 202, 210, 217, 221, 222, 244, 272, 274], "sourc": [0, 1, 5, 6, 7, 11, 20, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 253, 265, 272], "written": [0, 3, 6, 7, 11, 18, 20, 33, 37, 43, 46, 47, 51, 55, 60, 63, 67, 73, 78, 80, 84, 85, 94, 95, 122, 128, 135, 168, 183, 184, 185, 186, 189, 190, 198, 202, 205, 209, 212, 215, 218, 235, 253, 255, 271, 272, 273, 278], "pure": [0, 3, 11, 23, 24, 29, 56, 61, 82, 85, 88, 105, 132, 173, 192, 193, 195, 198, 202, 222, 240], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 27, 29, 30, 31, 32, 35, 36, 37, 43, 46, 47, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 71, 72, 78, 80, 82, 84, 85, 91, 95, 96, 97, 98, 99, 101, 103, 105, 107, 109, 110, 111, 112, 113, 118, 120, 126, 128, 129, 130, 131, 133, 135, 137, 141, 142, 152, 157, 158, 163, 164, 165, 166, 167, 168, 170, 173, 176, 178, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 205, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 233, 234, 235, 236, 237, 238, 241, 247, 249, 250, 251, 253, 255, 256, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278], "built": [0, 1, 3, 6, 7, 11, 12, 15, 30, 32, 38, 55, 61, 82, 118, 135, 190, 193, 202, 203, 207, 218, 221, 222, 228, 237, 240, 241, 272, 273, 277], "focu": [0, 10, 18, 65, 220, 272], "extens": [0, 3, 6, 7, 18, 20, 46, 55, 60, 61, 67, 71, 82, 91, 115, 135, 190, 192, 193, 194, 195, 196, 197, 198, 202, 212, 214, 218, 220, 221, 234, 235, 244, 271, 278], "eas": [0, 118, 186, 188, 202, 205], "through": [0, 4, 6, 11, 12, 18, 20, 23, 25, 27, 35, 37, 46, 47, 49, 54, 55, 56, 59, 60, 63, 65, 66, 67, 68, 69, 71, 80, 84, 85, 91, 95, 98, 99, 103, 110, 113, 118, 120, 128, 133, 139, 140, 178, 188, 189, 195, 197, 202, 208, 212, 214, 218, 220, 221, 222, 223, 234, 240, 247, 248, 253, 256, 269, 270, 271, 276], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 28, 29, 35, 36, 37, 47, 50, 51, 53, 54, 55, 56, 60, 61, 63, 70, 79, 80, 82, 85, 86, 91, 95, 97, 98, 99, 105, 110, 112, 113, 120, 122, 123, 129, 132, 140, 141, 152, 158, 165, 168, 173, 178, 181, 185, 186, 188, 189, 190, 192, 193, 195, 197, 198, 200, 201, 202, 204, 209, 210, 211, 212, 214, 215, 218, 220, 221, 223, 227, 233, 235, 240, 241, 247, 248, 268, 271, 272, 273, 278, 279], "interact": [0, 11, 14, 23, 28, 55, 69, 82, 89, 91, 135, 165, 182, 186, 192, 193, 214, 222, 238, 245, 257, 264, 265, 270, 272, 273, 277, 278], "programmat": [0, 11, 14, 15, 25, 221, 251], "applic": [0, 7, 10, 23, 38, 39, 45, 46, 47, 48, 55, 56, 61, 82, 86, 91, 95, 98, 101, 113, 117, 118, 128, 132, 134, 135, 152, 153, 178, 181, 185, 190, 195, 196, 197, 198, 202, 204, 209, 215, 218, 221, 235, 240, 247, 253, 254, 272], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 25, 26, 28, 36, 37, 46, 54, 55, 56, 57, 63, 80, 82, 85, 91, 97, 99, 105, 113, 114, 120, 122, 126, 132, 135, 158, 163, 164, 178, 179, 183, 185, 186, 189, 190, 191, 192, 193, 195, 198, 202, 212, 215, 218, 219, 221, 222, 224, 229, 233, 234, 235, 240, 253, 268, 271, 274, 277, 278], "characterist": [0, 57, 73, 91, 185, 191, 193, 195, 196, 218, 220, 274], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 24, 25, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 66, 70, 71, 73, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 103, 105, 106, 108, 109, 112, 113, 115, 118, 119, 120, 126, 128, 132, 135, 152, 154, 157, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 207, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 223, 226, 228, 229, 231, 232, 233, 235, 236, 237, 240, 241, 243, 247, 248, 250, 251, 252, 253, 256, 267, 268, 270, 271, 272, 273, 274, 277, 278, 279], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 46, 51, 54, 55, 56, 59, 78, 83, 91, 97, 182, 185, 189, 190, 192, 199, 202, 205, 211, 218, 221, 222, 228, 243, 249, 251, 278], "popular": [0, 3, 56, 96, 135, 272], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 24, 26, 27, 37, 55, 56, 60, 80, 82, 83, 91, 96, 109, 118, 135, 188, 192, 193, 222, 233, 234, 235, 240, 241, 267, 270, 271, 272], "scientif": [0, 11, 27, 55, 135], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 152, 154, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279], "paper": [0, 6, 95, 120, 186, 197, 198, 211, 212, 215, 218, 222], "present": [0, 3, 7, 10, 11, 12, 16, 35, 36, 39, 42, 46, 47, 49, 53, 55, 58, 82, 91, 95, 98, 101, 103, 105, 113, 120, 168, 170, 178, 180, 182, 183, 188, 189, 195, 196, 197, 201, 202, 215, 221, 235, 241, 244, 249, 250, 251, 255, 279], "architectur": [0, 135, 192, 233], "descript": [0, 4, 6, 7, 10, 22, 26, 36, 38, 45, 63, 82, 95, 140, 158, 165, 176, 185, 186, 187, 202, 226, 233, 235, 237, 238, 257, 275], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 29, 31, 32, 33, 36, 37, 38, 39, 43, 45, 46, 47, 54, 55, 56, 57, 60, 61, 63, 65, 67, 71, 73, 80, 82, 83, 85, 86, 88, 91, 95, 97, 98, 99, 101, 105, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 129, 132, 133, 135, 136, 141, 147, 153, 154, 156, 157, 162, 163, 166, 168, 173, 175, 178, 179, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 208, 209, 210, 214, 217, 218, 220, 221, 222, 226, 227, 228, 233, 236, 237, 240, 241, 244, 247, 249, 250, 251, 253, 256, 272, 273, 274, 277, 278], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 26, 27, 55, 57, 59, 86, 97, 118, 128, 135, 184, 202, 218, 222, 231, 235, 238, 254, 266, 271, 272, 276, 278], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 26, 38, 46, 56, 63, 95, 109, 113, 118, 128, 132, 133, 177, 184, 185, 186, 192, 228, 237, 257, 267, 269, 270, 272, 273, 275, 277, 278], "select": [0, 1, 13, 14, 26, 37, 39, 46, 47, 54, 55, 56, 64, 69, 83, 85, 86, 95, 97, 111, 133, 173, 182, 192, 193, 195, 196, 198, 202, 211, 214, 220], "submodul": [0, 3, 4, 6, 11, 37, 109, 189, 193, 195, 197], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 247, 248, 249, 250, 251, 254, 255, 256, 263, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279], "supplementari": 0, "materi": [0, 98, 139, 276], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 24, 26, 29, 35, 36, 37, 38, 44, 45, 46, 47, 53, 54, 55, 57, 59, 63, 64, 66, 71, 74, 77, 78, 82, 83, 85, 86, 88, 91, 92, 94, 95, 96, 97, 99, 101, 103, 109, 110, 112, 113, 115, 117, 120, 121, 122, 123, 128, 129, 130, 131, 132, 133, 135, 136, 141, 142, 162, 170, 171, 172, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 205, 207, 210, 211, 212, 214, 218, 219, 220, 221, 222, 223, 227, 228, 233, 234, 235, 237, 238, 240, 241, 243, 247, 249, 250, 251, 253, 254, 256, 268, 272, 273, 274, 278], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 27, 37, 45, 46, 47, 54, 55, 61, 63, 67, 73, 75, 79, 80, 82, 83, 85, 88, 91, 97, 102, 103, 105, 109, 110, 113, 132, 133, 136, 154, 166, 167, 170, 182, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 202, 208, 211, 212, 214, 215, 218, 219, 220, 221, 222, 233, 234, 235, 237, 238, 240, 241, 243, 250, 270, 272, 273, 274, 277, 278], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 204, 205, 207, 208, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 225, 226, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 258, 262, 263, 264, 267, 268, 269, 270, 271, 273, 274, 276, 277, 279], "further": [0, 3, 5, 18, 20, 32, 36, 56, 61, 63, 67, 80, 82, 87, 88, 91, 97, 98, 102, 103, 110, 112, 113, 128, 133, 140, 185, 187, 188, 189, 195, 197, 198, 211, 212, 214, 218, 222, 228, 271, 272], "outlin": [0, 3, 4, 18, 20, 53, 82, 189, 218], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 26, 36, 46, 55, 57, 60, 62, 63, 80, 81, 82, 83, 86, 91, 95, 103, 112, 113, 118, 133, 135, 140, 158, 162, 178, 180, 187, 188, 189, 195, 197, 204, 209, 214, 215, 216, 218, 219, 222, 227, 228, 233, 236, 238, 239, 241, 251, 252, 253, 254, 257, 268, 270, 274, 275, 277], "volum": [0, 6, 37, 54, 63, 80, 187, 196, 212, 215, 218, 237, 247, 254], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 24, 26, 37, 38, 54, 60, 80, 95, 96, 112, 113, 135, 173, 188, 191, 192, 193, 196, 202, 212, 215, 238, 255, 278], "journal": [0, 6, 54, 60, 95, 106, 196, 214, 237], "issn": 0, "2376": 0, "5992": 0, "url": [0, 56, 238], "bsd": [0, 1, 3, 272], "licens": [0, 1, 3, 272], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 43, 44, 46, 47, 49, 51, 53, 55, 56, 59, 61, 63, 65, 67, 68, 69, 71, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 91, 92, 95, 97, 98, 99, 105, 109, 112, 113, 118, 120, 122, 128, 129, 130, 132, 135, 136, 141, 152, 154, 162, 164, 165, 166, 168, 170, 172, 173, 177, 178, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 226, 227, 231, 233, 234, 237, 238, 240, 241, 243, 252, 256, 258, 267, 268, 270, 272, 273, 274, 277, 278, 279], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 26, 27, 28, 31, 32, 33, 35, 37, 38, 46, 47, 54, 55, 56, 57, 59, 61, 62, 63, 67, 69, 71, 73, 74, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 95, 96, 97, 105, 107, 108, 109, 112, 113, 114, 115, 118, 119, 129, 130, 132, 133, 135, 157, 162, 163, 166, 168, 177, 178, 180, 183, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 203, 205, 209, 210, 214, 215, 218, 219, 220, 221, 222, 226, 227, 228, 231, 233, 234, 235, 236, 238, 240, 241, 244, 250, 251, 252, 253, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279], "free": [0, 10, 11, 24, 27, 35, 36, 37, 42, 45, 46, 51, 55, 67, 82, 86, 88, 91, 95, 98, 99, 103, 106, 128, 137, 157, 175, 178, 184, 188, 189, 193, 194, 195, 197, 198, 202, 204, 210, 212, 214, 215, 218, 220, 221, 228, 240, 272], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 30, 32, 37, 46, 47, 51, 54, 55, 56, 57, 60, 61, 63, 65, 80, 82, 85, 86, 91, 95, 96, 97, 98, 101, 112, 118, 132, 136, 168, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 209, 210, 211, 212, 214, 218, 219, 220, 221, 233, 234, 241, 250, 251, 255, 267, 270, 272, 274, 278, 279], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 25, 26, 27, 37, 38, 40, 46, 47, 54, 55, 56, 59, 60, 61, 63, 65, 75, 78, 82, 83, 85, 86, 88, 89, 90, 91, 95, 96, 97, 101, 105, 109, 112, 115, 118, 120, 129, 132, 133, 135, 136, 150, 152, 162, 163, 166, 167, 168, 173, 177, 178, 181, 183, 185, 188, 189, 190, 192, 193, 194, 195, 197, 198, 200, 201, 202, 205, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 228, 229, 231, 233, 234, 235, 236, 240, 241, 243, 244, 250, 251, 253, 255, 267, 268, 270, 271, 272, 273, 274, 278], "academ": [0, 36, 39, 196], "commerci": [0, 272], "creat": [0, 3, 4, 5, 6, 7, 9, 11, 18, 19, 23, 25, 31, 36, 37, 38, 44, 46, 47, 55, 56, 57, 59, 61, 62, 63, 65, 67, 68, 70, 71, 76, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 101, 105, 110, 112, 113, 115, 118, 121, 122, 123, 125, 127, 129, 131, 132, 133, 135, 136, 145, 147, 149, 153, 156, 157, 158, 162, 163, 165, 166, 168, 171, 174, 177, 178, 180, 181, 185, 186, 188, 189, 191, 192, 193, 195, 197, 198, 199, 202, 209, 214, 218, 221, 222, 223, 227, 228, 233, 234, 235, 237, 238, 240, 241, 247, 251, 253, 268, 270, 273, 274, 277, 278, 279], "fork": [0, 5, 7, 10, 120], "deriv": [0, 6, 10, 11, 17, 20, 23, 35, 36, 37, 39, 45, 46, 57, 61, 62, 63, 65, 72, 77, 78, 80, 82, 83, 85, 88, 91, 101, 105, 109, 111, 112, 113, 117, 120, 122, 123, 125, 128, 130, 131, 132, 133, 157, 166, 170, 173, 174, 177, 178, 180, 181, 182, 183, 185, 188, 189, 190, 193, 195, 197, 198, 199, 202, 204, 212, 214, 218, 219, 220, 224, 225, 229, 235, 247, 249, 250, 269, 272, 279], "long": [0, 6, 7, 8, 25, 37, 47, 54, 55, 56, 58, 68, 80, 82, 83, 85, 91, 95, 98, 99, 120, 182, 198, 199, 202, 211, 212, 220, 222, 234, 243, 249, 270, 273], "copi": [0, 1, 5, 10, 12, 18, 38, 47, 48, 55, 71, 91, 95, 96, 191, 193, 195, 197, 201, 202, 209, 220, 233, 240, 243, 277], "statement": [0, 6, 18, 19, 20, 27, 36, 37, 55, 63, 80, 85, 88, 118, 147, 202, 222, 231, 235, 240], "redistribut": [0, 198], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 26, 30, 31, 32, 33, 35, 36, 37, 41, 43, 46, 47, 48, 51, 54, 56, 57, 60, 61, 62, 63, 67, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 91, 92, 95, 96, 97, 103, 109, 112, 113, 124, 126, 130, 132, 133, 137, 140, 143, 144, 153, 157, 158, 162, 163, 164, 165, 167, 168, 171, 173, 178, 182, 185, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 204, 205, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 227, 228, 231, 233, 234, 235, 236, 237, 238, 241, 242, 247, 248, 256, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 37, 91, 118, 135, 157, 202, 209, 212, 214, 231, 233, 234, 235, 241, 244], "That": [0, 4, 7, 11, 12, 18, 19, 20, 55, 56, 61, 85, 91, 128, 165, 170, 176, 185, 186, 189, 190, 192, 193, 195, 197, 208, 209, 218, 222, 234, 235, 241, 267, 270, 273, 278], "said": [0, 4, 11, 29, 33, 37, 41, 95, 173, 183, 185, 186, 190, 218, 221, 222, 247, 253], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 47, 55, 56, 61, 67, 79, 80, 83, 85, 86, 88, 91, 95, 98, 109, 120, 135, 189, 192, 193, 195, 197, 198, 210, 211, 214, 215, 220, 234, 240, 241, 270, 273, 278], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 25, 27, 37, 46, 55, 56, 58, 59, 63, 65, 66, 68, 69, 72, 74, 85, 91, 94, 95, 96, 97, 98, 103, 109, 110, 113, 115, 117, 118, 120, 122, 129, 133, 142, 165, 177, 178, 180, 187, 188, 189, 192, 193, 195, 197, 199, 202, 205, 211, 212, 215, 218, 220, 221, 222, 226, 233, 234, 235, 236, 238, 240, 241, 249, 250, 251, 274, 276], "conveni": [0, 1, 10, 11, 12, 23, 25, 28, 35, 37, 47, 55, 56, 60, 63, 82, 85, 97, 118, 135, 177, 180, 185, 186, 188, 189, 190, 191, 192, 193, 197, 200, 209, 210, 214, 220, 226, 227, 234, 236, 237, 241, 253, 268, 270], "pleas": [0, 4, 6, 7, 9, 10, 23, 24, 27, 33, 35, 55, 63, 67, 80, 95, 109, 113, 118, 128, 132, 133, 140, 141, 162, 177, 186, 187, 188, 189, 195, 196, 210, 214, 215, 220, 221, 241, 247, 251, 275, 279], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 46, 47, 48, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 79, 81, 82, 83, 85, 86, 87, 91, 95, 96, 97, 101, 103, 105, 106, 109, 112, 118, 120, 126, 128, 129, 130, 131, 132, 133, 136, 141, 142, 147, 152, 153, 157, 160, 162, 170, 171, 172, 177, 182, 185, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 226, 227, 231, 233, 234, 235, 236, 238, 240, 241, 243, 244, 246, 250, 268, 270, 272, 273, 278, 279], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 25, 27, 31, 55, 56, 82, 83, 91, 96, 97, 105, 109, 112, 130, 132, 186, 188, 202, 209, 214, 218, 221, 222, 240, 241, 268, 272, 274, 275, 277, 278], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 24, 27, 30, 32, 35, 36, 37, 46, 47, 48, 55, 56, 59, 63, 80, 82, 84, 85, 86, 88, 91, 92, 95, 97, 109, 112, 118, 120, 129, 133, 135, 148, 152, 157, 161, 162, 163, 164, 167, 170, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 202, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 228, 233, 234, 235, 237, 240, 241, 242, 243, 250, 251, 264, 270, 271, 272, 273, 274, 277, 278], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 44, 46, 47, 54, 56, 57, 59, 60, 61, 62, 63, 67, 71, 73, 75, 77, 78, 80, 82, 84, 85, 86, 89, 91, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 135, 136, 137, 141, 151, 152, 154, 158, 162, 167, 168, 171, 173, 177, 178, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 241, 243, 247, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 23, 25, 33, 36, 37, 44, 47, 50, 54, 55, 56, 58, 59, 60, 61, 63, 65, 67, 71, 79, 80, 82, 83, 84, 85, 86, 88, 91, 95, 105, 109, 110, 115, 119, 130, 136, 158, 165, 168, 173, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 205, 209, 214, 215, 218, 219, 220, 221, 222, 233, 235, 240, 249, 251, 253, 255, 256, 270, 274, 278], "contribut": [0, 3, 4, 5, 6, 7, 27, 71, 95, 113, 123, 126, 192, 194, 195, 197, 218, 256, 275], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 26, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 80, 82, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 101, 103, 105, 106, 110, 111, 112, 113, 115, 117, 118, 120, 121, 123, 128, 130, 132, 135, 136, 142, 147, 148, 152, 162, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 231, 233, 234, 235, 236, 238, 240, 241, 243, 247, 248, 250, 252, 253, 254, 255, 257, 267, 268, 270, 272, 273, 274, 277, 278, 279], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 27, 36, 37, 38, 46, 47, 51, 54, 55, 56, 59, 60, 61, 63, 69, 70, 80, 82, 85, 91, 95, 97, 98, 101, 105, 112, 115, 118, 120, 125, 142, 153, 163, 173, 174, 177, 183, 185, 186, 187, 188, 189, 190, 191, 195, 198, 199, 202, 209, 210, 211, 212, 214, 218, 220, 221, 222, 223, 233, 240, 241, 251, 253, 267, 270, 273, 277], "back": [0, 20, 23, 24, 36, 37, 51, 54, 55, 56, 61, 63, 70, 71, 77, 79, 80, 82, 83, 86, 95, 96, 105, 162, 182, 185, 192, 194, 197, 198, 200, 202, 212, 218, 220, 223, 224], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 25, 30, 31, 32, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 63, 68, 73, 78, 79, 80, 82, 83, 84, 85, 86, 91, 92, 94, 95, 105, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 140, 143, 151, 154, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 173, 177, 178, 180, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 226, 228, 233, 234, 235, 237, 238, 240, 241, 247, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 135, 136, 140, 141, 142, 147, 149, 152, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 237, 238, 240, 241, 243, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279], "incorpor": [0, 3, 16, 190, 214], "u": [0, 12, 16, 18, 19, 20, 23, 29, 35, 36, 37, 46, 51, 54, 55, 56, 58, 69, 72, 77, 80, 82, 88, 91, 95, 110, 112, 113, 114, 117, 118, 120, 122, 125, 128, 129, 130, 132, 133, 135, 136, 140, 141, 152, 157, 163, 173, 181, 183, 185, 187, 188, 189, 190, 191, 195, 197, 198, 201, 202, 209, 212, 214, 215, 218, 219, 220, 221, 222, 227, 241, 253, 270, 272, 273, 274], "benefit": [0, 3, 20, 37, 109, 132, 182], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 22, 35, 36, 37, 45, 46, 51, 53, 54, 55, 56, 60, 61, 63, 65, 67, 71, 80, 83, 85, 86, 88, 91, 95, 97, 98, 99, 101, 117, 120, 122, 125, 130, 131, 132, 133, 173, 178, 182, 183, 186, 187, 191, 195, 202, 205, 208, 210, 211, 213, 215, 218, 219, 220, 221, 222, 223, 233, 235, 236, 238, 240, 243, 253, 268, 272, 274, 278], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 26, 27, 35, 38, 53, 97, 135, 172, 188, 189, 192, 195, 220, 221, 272, 275], "team": [0, 4], "member": [0, 6, 10, 18, 36, 44, 46, 56, 78, 101, 189, 210, 227], "list": [0, 3, 4, 6, 7, 13, 18, 23, 24, 25, 27, 29, 32, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 83, 84, 85, 86, 88, 91, 94, 95, 96, 97, 98, 105, 110, 112, 113, 117, 120, 122, 125, 129, 130, 131, 135, 136, 141, 152, 154, 157, 158, 162, 163, 165, 166, 168, 170, 178, 181, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 267, 271, 272, 274, 277, 278, 279], "github": [0, 1, 3, 4, 5, 7, 10, 23, 24, 27, 35, 55, 71, 82, 91, 172, 210, 221, 274], "found": [0, 1, 3, 4, 6, 7, 18, 19, 23, 35, 38, 46, 47, 49, 51, 53, 55, 56, 57, 65, 66, 71, 80, 82, 91, 95, 105, 111, 112, 113, 114, 132, 135, 172, 185, 189, 190, 192, 197, 198, 199, 202, 204, 205, 208, 209, 212, 215, 218, 219, 220, 221, 222, 226, 240, 241, 243, 244, 277], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 24, 26, 27, 36, 37, 39, 44, 45, 46, 47, 51, 54, 55, 56, 57, 63, 85, 86, 88, 91, 94, 95, 96, 98, 99, 101, 118, 120, 130, 131, 163, 164, 167, 171, 185, 186, 188, 192, 195, 197, 198, 202, 205, 208, 210, 211, 212, 215, 218, 220, 221, 222, 223, 226, 233, 234, 240, 242, 243, 252, 266, 267, 270, 272], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 23, 24, 29, 33, 35, 36, 39, 47, 54, 55, 56, 59, 60, 61, 63, 70, 72, 78, 80, 82, 83, 85, 86, 91, 95, 105, 110, 112, 113, 114, 117, 118, 131, 133, 135, 152, 158, 165, 168, 170, 182, 186, 188, 190, 191, 192, 193, 195, 197, 198, 202, 204, 209, 210, 211, 212, 215, 218, 219, 220, 221, 222, 223, 226, 227, 234, 240, 241, 247, 255, 270, 273, 274], "machin": [1, 3, 5, 6, 203, 214, 218, 267], "imag": [1, 3, 46, 124, 129, 135, 137, 141, 189, 193, 195, 202, 210, 221], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 23, 25, 28, 30, 31, 35, 36, 37, 38, 46, 47, 51, 53, 54, 57, 58, 59, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 81, 82, 84, 85, 86, 88, 91, 94, 95, 96, 97, 98, 100, 103, 104, 106, 110, 113, 114, 115, 117, 120, 122, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 155, 158, 160, 163, 165, 168, 177, 186, 187, 188, 189, 190, 191, 192, 193, 195, 198, 202, 203, 204, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 247, 249, 257, 258, 268, 270, 274, 278], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 28, 31, 33, 36, 37, 44, 46, 47, 54, 55, 56, 57, 59, 60, 63, 66, 71, 73, 75, 77, 78, 80, 84, 85, 88, 91, 94, 95, 96, 109, 113, 115, 118, 120, 122, 123, 128, 130, 132, 133, 135, 141, 145, 161, 162, 168, 170, 173, 176, 178, 183, 185, 186, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 209, 210, 211, 212, 214, 215, 218, 220, 221, 223, 224, 233, 235, 237, 240, 249, 267, 268, 270, 272, 273, 278], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 44, 46, 47, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 130, 131, 132, 133, 135, 136, 141, 145, 149, 152, 158, 162, 163, 164, 165, 166, 168, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 247, 249, 251, 253, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 25, 28, 30, 32, 36, 37, 46, 48, 51, 55, 57, 58, 59, 60, 63, 82, 83, 85, 86, 88, 89, 91, 95, 103, 106, 108, 117, 118, 120, 122, 132, 135, 166, 170, 172, 178, 182, 183, 185, 186, 189, 192, 193, 195, 197, 198, 200, 202, 204, 212, 214, 218, 220, 221, 222, 226, 227, 228, 231, 236, 237, 238, 240, 241, 245, 253, 256, 267, 268, 270, 272, 273, 274, 278, 279], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 23, 24, 25, 27, 30, 32, 35, 36, 37, 38, 44, 45, 46, 47, 48, 51, 54, 55, 56, 59, 60, 61, 63, 67, 69, 71, 78, 79, 80, 82, 85, 86, 88, 91, 95, 96, 98, 99, 101, 112, 113, 118, 120, 128, 129, 130, 131, 132, 133, 135, 137, 141, 160, 163, 165, 168, 171, 173, 178, 183, 185, 186, 187, 188, 189, 190, 195, 196, 197, 198, 200, 201, 202, 203, 204, 209, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 233, 236, 237, 240, 241, 244, 250, 251, 253, 267, 268, 270, 271, 273, 274, 278, 279], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 26, 46, 47, 55, 56, 57, 63, 67, 82, 84, 86, 91, 110, 112, 113, 117, 118, 128, 135, 137, 173, 186, 188, 189, 193, 195, 197, 198, 201, 202, 203, 208, 214, 215, 218, 219, 220, 222, 228, 233, 234, 235, 240, 259, 274, 278], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 26, 37, 202, 220, 234, 235], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 23, 25, 27, 35, 36, 37, 45, 46, 47, 55, 56, 60, 62, 63, 64, 65, 71, 72, 78, 80, 82, 86, 91, 94, 95, 97, 98, 99, 105, 110, 112, 113, 117, 118, 120, 122, 123, 124, 129, 130, 131, 132, 135, 162, 168, 173, 178, 186, 187, 188, 189, 191, 198, 202, 203, 205, 211, 214, 215, 218, 219, 220, 221, 222, 233, 235, 240, 241, 243, 251, 253, 256, 257, 274, 278], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 33, 35, 36, 37, 38, 46, 47, 48, 54, 55, 56, 57, 59, 60, 61, 63, 65, 67, 68, 70, 71, 72, 80, 82, 83, 85, 86, 87, 91, 92, 94, 95, 97, 101, 111, 113, 114, 118, 122, 128, 132, 154, 163, 168, 169, 170, 175, 178, 181, 183, 185, 188, 189, 190, 191, 195, 197, 201, 202, 203, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 253, 255, 267, 268, 270, 273, 274, 278, 279], "choos": [1, 6, 23, 46, 51, 55, 57, 60, 91, 95, 99, 103, 122, 133, 168, 172, 178, 185, 186, 194, 198, 199, 202, 209, 211, 212, 218, 219, 222, 233, 238, 278], "cd": [1, 5, 6, 221, 240], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 30, 32, 35, 37, 46, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 68, 69, 71, 72, 74, 82, 83, 86, 88, 91, 92, 95, 96, 97, 98, 103, 105, 109, 110, 111, 112, 113, 114, 117, 135, 141, 152, 157, 158, 160, 163, 165, 170, 177, 178, 182, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 227, 228, 233, 234, 235, 238, 240, 241, 247, 271, 277, 278], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 27, 36, 37, 47, 55, 56, 60, 63, 66, 71, 72, 77, 79, 80, 84, 91, 95, 105, 110, 112, 117, 118, 121, 123, 126, 128, 135, 136, 171, 173, 178, 182, 185, 186, 189, 190, 192, 195, 198, 199, 203, 210, 211, 212, 214, 215, 218, 220, 221, 222, 223, 228, 233, 234, 241, 251, 252, 270, 272, 273, 278, 279], "skip": [1, 3, 4, 6, 12, 36, 39, 55, 86, 91, 95, 178, 197, 201, 202, 204, 218, 220, 230, 231, 233, 268, 276, 277], "down": [1, 4, 6, 18, 60, 88, 107, 120, 122, 185, 186, 188, 193, 204, 210, 212, 214, 218, 237, 274, 278], "section": [1, 4, 7, 8, 11, 18, 20, 21, 29, 36, 38, 46, 47, 54, 55, 56, 58, 62, 63, 65, 71, 80, 85, 86, 91, 98, 99, 112, 118, 133, 171, 173, 177, 183, 186, 189, 192, 195, 197, 202, 205, 209, 212, 218, 228, 237, 238, 240, 250, 251, 252, 253, 257, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 67, 69, 70, 73, 76, 78, 79, 80, 81, 84, 85, 86, 91, 95, 96, 97, 98, 99, 105, 107, 111, 112, 113, 114, 118, 122, 128, 129, 130, 131, 132, 133, 135, 137, 151, 152, 157, 161, 163, 165, 166, 167, 168, 170, 173, 174, 178, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 233, 234, 235, 237, 238, 240, 241, 244, 245, 247, 248, 251, 253, 255, 256, 259, 267, 268, 270, 273, 274, 278, 279], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 23, 24, 27, 28, 31, 32, 35, 36, 37, 39, 44, 45, 47, 48, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 68, 78, 80, 82, 84, 88, 91, 95, 97, 98, 103, 105, 108, 118, 121, 122, 130, 131, 132, 135, 140, 141, 148, 152, 157, 162, 163, 164, 165, 170, 173, 186, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 228, 229, 234, 240, 241, 242, 244, 247, 250, 267, 270, 272, 273, 274, 277, 278, 279], "python3": [1, 3, 37, 97, 202, 233], "sphinx": [1, 4, 7, 8, 61, 218, 233, 238], "texliv": [1, 3, 202], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 22, 23, 24, 25, 26, 27, 36, 37, 55, 56, 59, 86, 109, 130, 135, 162, 178, 185, 190, 191, 192, 193, 199, 215, 218, 221, 227, 231, 238, 250, 251, 276, 279], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 83, 202, 233, 240], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 273, 277], "pip": [1, 3, 27, 97], "txt": [1, 202], "mpmath": [1, 3, 5, 11, 20, 24, 37, 60, 63, 91, 96, 135, 192, 193, 202, 210, 220, 236, 241], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 23, 24, 25, 28, 35, 37, 44, 47, 54, 55, 56, 61, 62, 65, 70, 80, 82, 91, 94, 95, 97, 118, 186, 187, 190, 192, 193, 195, 199, 202, 204, 210, 218, 219, 220, 221, 222, 233, 234, 235, 238, 240, 243, 247, 258, 267], "packag": [1, 3, 22, 24, 27, 83, 96, 97, 102, 128, 135, 182, 202, 233, 244, 252, 253, 272], "matplotlib": [1, 3, 6, 7, 10, 27, 78, 83, 103, 135, 148, 182, 188, 277], "mayb": [1, 19], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 23, 25, 29, 33, 36, 37, 38, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 80, 82, 85, 86, 88, 91, 95, 96, 97, 98, 99, 105, 109, 110, 112, 118, 119, 122, 123, 128, 129, 132, 133, 135, 137, 140, 141, 142, 152, 163, 165, 166, 167, 168, 171, 173, 174, 175, 177, 178, 180, 181, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 228, 229, 231, 234, 235, 236, 237, 240, 241, 247, 249, 250, 253, 255, 257, 267, 268, 270, 272, 273, 274, 278], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 27, 31, 32, 35, 37, 38, 44, 45, 46, 51, 52, 53, 55, 56, 58, 60, 61, 62, 63, 66, 68, 71, 78, 82, 83, 84, 85, 87, 88, 91, 95, 96, 102, 110, 112, 118, 120, 135, 136, 137, 146, 148, 152, 153, 157, 163, 164, 166, 168, 170, 173, 174, 176, 178, 180, 182, 183, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 202, 204, 206, 209, 210, 211, 212, 214, 215, 216, 218, 220, 222, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 240, 241, 242, 247, 249, 250, 253, 264, 273, 278], "distribut": [1, 3, 27, 46, 53, 55, 63, 71, 82, 98, 99, 167, 190, 193, 194, 198, 202, 228], "prerequisit": 1, "dnf": [1, 85], "scheme": [1, 4, 18, 47, 54, 59, 187, 188, 195, 198, 227], "medium": [1, 20, 137, 138, 141, 142, 152, 195, 263], "tool": [1, 7, 11, 20, 46, 83, 90, 91, 96, 105, 135, 186, 189, 194, 195, 202, 213, 234, 240, 246, 254, 259, 261], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 23, 27, 36, 37, 38, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 68, 69, 71, 72, 79, 80, 82, 84, 85, 86, 91, 94, 95, 98, 99, 105, 106, 111, 112, 113, 117, 118, 120, 121, 122, 123, 128, 129, 132, 133, 136, 140, 141, 145, 149, 152, 157, 158, 161, 162, 163, 164, 165, 167, 168, 171, 173, 178, 181, 185, 186, 188, 189, 191, 193, 195, 196, 197, 198, 199, 202, 203, 204, 205, 208, 209, 211, 212, 214, 215, 218, 219, 220, 221, 222, 226, 228, 231, 233, 234, 235, 236, 240, 241, 243, 251, 256, 267, 268, 270, 272, 273, 274, 276, 278, 279], "homebrew": 1, "brew": 1, "sh": 1, "Then": [1, 5, 11, 16, 18, 46, 51, 54, 55, 80, 84, 91, 95, 111, 113, 115, 125, 127, 128, 133, 137, 165, 173, 185, 189, 190, 192, 195, 197, 199, 202, 209, 212, 214, 215, 218, 220, 241], "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 27, 97], "Or": [1, 7, 10, 12, 19, 23, 46, 55, 56, 57, 63, 80, 85, 95, 115, 189, 199, 201, 202, 214, 221, 222, 233, 241, 253, 273, 276], "forg": [1, 3, 97], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 24, 28, 31, 32, 33, 35, 37, 38, 45, 46, 54, 55, 56, 57, 58, 59, 60, 61, 63, 67, 71, 82, 83, 85, 91, 94, 95, 96, 97, 98, 99, 101, 113, 117, 118, 120, 121, 125, 126, 130, 132, 133, 135, 148, 165, 170, 182, 185, 188, 191, 192, 193, 195, 197, 198, 199, 201, 202, 205, 210, 211, 212, 214, 218, 219, 220, 221, 226, 228, 231, 233, 234, 235, 236, 238, 240, 241, 250, 255, 256, 270, 271, 272, 273, 274, 278], "success": [1, 7, 36, 46, 55, 63, 80, 82, 95, 120, 178, 189, 195, 197, 210, 211, 218, 221, 222, 240, 247, 248], "tricki": [1, 55, 80], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 24, 25, 27, 28, 33, 37, 47, 54, 55, 56, 61, 67, 71, 72, 80, 82, 85, 89, 91, 95, 97, 112, 118, 122, 148, 156, 168, 170, 173, 185, 188, 189, 191, 192, 193, 195, 197, 198, 199, 201, 202, 205, 209, 212, 214, 215, 218, 219, 220, 221, 231, 233, 234, 236, 240, 241, 243, 250, 268, 270, 272, 273, 274, 277, 278, 279], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 23, 24, 25, 27, 28, 33, 36, 37, 38, 43, 46, 47, 53, 54, 55, 56, 59, 60, 61, 63, 65, 66, 67, 71, 80, 82, 84, 85, 86, 88, 91, 95, 96, 97, 103, 106, 109, 110, 112, 115, 117, 118, 119, 120, 121, 122, 123, 128, 129, 130, 132, 133, 136, 148, 153, 157, 165, 168, 173, 174, 177, 179, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 228, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 251, 253, 257, 267, 268, 270, 272, 273, 274, 276, 277, 278], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 24, 25, 26, 27, 36, 37, 46, 47, 54, 55, 60, 63, 82, 91, 96, 97, 118, 132, 135, 192, 193, 195, 198, 202, 203, 208, 210, 212, 214, 215, 220, 221, 222, 223, 227, 228, 233, 240, 241, 246, 247, 264, 270, 277], "subsystem": [1, 202], "linux": [1, 27], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 27, 35, 37, 38, 39, 44, 46, 47, 49, 50, 51, 55, 56, 60, 61, 63, 65, 67, 69, 70, 72, 77, 79, 80, 82, 84, 85, 86, 88, 91, 95, 106, 107, 109, 120, 131, 133, 162, 164, 168, 170, 173, 181, 183, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 208, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 223, 228, 233, 235, 236, 237, 238, 240, 241, 250, 251, 253, 269, 270, 273, 278], "workaround": [1, 241], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 22, 37, 51, 55, 56, 61, 63, 65, 73, 77, 78, 79, 82, 91, 95, 98, 102, 109, 113, 118, 122, 128, 132, 137, 173, 177, 189, 195, 196, 197, 198, 199, 200, 201, 210, 215, 216, 217, 218, 219, 220, 263, 279], "shell": [1, 12, 83, 135, 201], "after": [1, 4, 5, 6, 7, 10, 12, 27, 29, 31, 32, 36, 38, 43, 46, 47, 51, 53, 54, 55, 56, 57, 61, 70, 72, 77, 82, 86, 91, 95, 97, 98, 105, 129, 130, 132, 135, 137, 141, 153, 165, 173, 177, 183, 186, 191, 195, 197, 198, 199, 200, 202, 203, 208, 215, 218, 219, 220, 221, 223, 233, 236, 241, 243, 247, 249, 253, 267, 268, 270, 274, 278], "tutori": [1, 7, 11, 12, 16, 17, 27, 71, 118, 135, 190, 201, 202, 216, 218, 241, 270, 273, 275, 276, 277, 278, 279], "com": [1, 3, 4, 5, 6, 7, 10, 20, 27, 29, 33, 35, 46, 48, 49, 55, 56, 58, 59, 60, 61, 63, 65, 71, 72, 80, 82, 86, 91, 95, 103, 187, 196, 205, 207, 210, 211, 214, 215, 218, 221, 222, 240, 243, 274], "microsoftdoc": 1, "wsl": 1, "blob": [1, 82], "win10": 1, "md": [1, 4, 7, 231, 238], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 27, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 54, 55, 56, 57, 59, 60, 61, 63, 68, 70, 71, 72, 73, 80, 82, 83, 84, 85, 86, 88, 91, 92, 95, 97, 99, 101, 105, 109, 112, 113, 118, 121, 122, 123, 128, 129, 130, 131, 132, 133, 135, 136, 154, 156, 157, 158, 163, 167, 168, 171, 173, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 228, 231, 233, 235, 237, 238, 240, 241, 244, 247, 250, 251, 253, 255, 267, 270, 271, 272, 273, 274, 277, 278, 279], "command": [1, 3, 5, 6, 11, 12, 27, 37, 59, 83, 118, 130, 135, 182, 188, 202, 233, 234, 277], "prompt": [1, 6, 11], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 38, 46, 47, 49, 55, 56, 80, 91, 96, 97, 113, 120, 135, 168, 182, 188, 189, 202, 212, 214, 218, 219, 220, 230, 234, 236, 237, 240, 241, 265, 270, 277], "transfer": [1, 102, 103, 105, 137, 221], "termin": [1, 46, 55, 61, 83, 95, 182, 202, 209, 233, 277], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 24, 25, 35, 36, 37, 38, 39, 45, 46, 47, 51, 54, 55, 59, 60, 63, 65, 68, 71, 72, 80, 82, 85, 86, 91, 95, 96, 97, 99, 105, 109, 112, 113, 115, 117, 118, 120, 121, 122, 123, 128, 129, 131, 132, 133, 136, 163, 165, 168, 178, 183, 185, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 209, 212, 214, 215, 218, 220, 221, 222, 226, 227, 234, 235, 241, 250, 251, 252, 253, 256, 270, 272, 273, 274, 278], "html": [1, 3, 4, 6, 7, 33, 37, 39, 47, 48, 49, 55, 56, 58, 60, 61, 63, 65, 71, 72, 82, 83, 91, 95, 103, 196, 202, 205, 207, 210, 211, 215, 218, 222, 234, 236, 238, 240, 241, 274], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 24, 29, 30, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 48, 51, 53, 54, 56, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 80, 82, 83, 85, 86, 88, 91, 95, 97, 105, 106, 110, 111, 112, 113, 114, 117, 118, 120, 122, 125, 133, 135, 141, 144, 152, 162, 163, 165, 167, 168, 169, 171, 177, 178, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 227, 228, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 251, 253, 255, 264, 267, 268, 269, 271, 272, 273, 274, 278], "via": [1, 3, 11, 16, 20, 25, 27, 30, 31, 32, 46, 47, 55, 60, 63, 80, 82, 85, 91, 95, 96, 97, 98, 178, 187, 189, 193, 195, 197, 198, 201, 202, 221, 231, 234, 235, 247, 255, 273], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 33, 35, 37, 38, 39, 47, 55, 56, 62, 67, 69, 71, 74, 80, 82, 86, 88, 91, 92, 95, 96, 103, 105, 108, 114, 118, 135, 151, 161, 162, 165, 168, 171, 173, 180, 181, 185, 186, 188, 190, 191, 192, 195, 197, 198, 199, 201, 202, 203, 209, 210, 212, 214, 215, 218, 219, 220, 221, 222, 228, 231, 233, 235, 237, 240, 241, 251, 253, 256, 267, 268, 270, 272, 273, 274, 275, 277, 278], "directori": [1, 3, 6, 7, 27, 32, 37, 218, 233, 234, 243], "folder": 1, "prepend": [1, 36, 46, 91, 105, 175, 202, 228], "mnt": 1, "path": [1, 5, 6, 10, 46, 71, 77, 105, 126, 183, 185, 211, 214, 218, 221, 233, 234, 237, 238, 240, 243, 244, 245, 253], "navig": 1, "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 23, 24, 31, 32, 33, 35, 36, 37, 38, 39, 46, 47, 48, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 71, 74, 77, 79, 80, 82, 84, 86, 87, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 109, 112, 117, 118, 121, 123, 124, 128, 129, 134, 135, 142, 145, 147, 149, 157, 158, 163, 165, 168, 170, 175, 176, 177, 178, 180, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 218, 220, 222, 223, 225, 227, 228, 229, 233, 235, 237, 240, 241, 247, 250, 253, 256, 257, 267, 268, 269, 270, 273, 278], "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 36, 37, 47, 55, 59, 63, 82, 85, 105, 118, 148, 172, 176, 188, 191, 192, 193, 205, 209, 210, 211, 212, 218, 219, 220, 221, 222, 234, 240, 241, 272, 278], "compat": [1, 3, 4, 15, 37, 55, 63, 83, 86, 91, 96, 109, 170, 175, 182, 188, 191, 193, 197, 198, 202, 222, 225, 226, 229, 233, 235, 241], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 24, 25, 28, 33, 37, 38, 40, 46, 47, 48, 54, 55, 56, 59, 60, 61, 63, 64, 69, 70, 71, 73, 77, 80, 82, 84, 85, 86, 88, 91, 92, 94, 95, 96, 97, 101, 103, 105, 109, 113, 117, 118, 122, 125, 142, 148, 162, 165, 166, 168, 177, 186, 187, 190, 191, 192, 193, 195, 198, 199, 200, 202, 205, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 229, 234, 235, 237, 240, 241, 243, 244, 267, 268, 270, 271, 272, 273, 274, 276, 278], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 32, 33, 35, 36, 37, 38, 41, 45, 46, 47, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 77, 80, 82, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 103, 105, 109, 112, 113, 114, 118, 120, 122, 124, 126, 128, 130, 131, 132, 133, 135, 137, 140, 152, 156, 157, 162, 165, 166, 167, 168, 173, 177, 178, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 214, 215, 218, 219, 220, 221, 222, 233, 235, 236, 237, 240, 241, 243, 247, 250, 254, 267, 268, 270, 271, 273, 274, 276, 277, 278, 279], "virtual": [1, 4, 8, 27, 55, 71, 186, 271], "partial": [1, 11, 35, 46, 53, 54, 55, 57, 59, 60, 61, 95, 97, 135, 162, 178, 181, 183, 193, 194, 196, 199, 202, 204, 211, 214, 216, 218, 219, 223, 229, 247, 253, 268, 278], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 27, 28, 29, 31, 32, 35, 36, 37, 40, 46, 47, 51, 53, 54, 55, 56, 57, 61, 63, 66, 70, 71, 78, 79, 80, 82, 83, 85, 86, 91, 95, 96, 97, 98, 99, 101, 105, 109, 113, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 148, 152, 160, 166, 171, 172, 177, 178, 182, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 209, 210, 212, 214, 215, 217, 218, 220, 221, 222, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 240, 243, 247, 250, 252, 253, 256, 267, 268, 270, 273, 274, 276, 278], "environ": [1, 3, 8, 9, 10, 11, 55, 83, 182, 202, 222, 233, 243, 270, 272, 277], "workflow": [1, 3, 5, 8, 9, 24, 26, 135, 192, 235, 241, 275], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 69, 71, 72, 73, 78, 80, 82, 83, 84, 85, 86, 91, 92, 95, 96, 97, 101, 103, 105, 111, 112, 118, 120, 121, 122, 124, 125, 127, 129, 130, 132, 133, 136, 141, 143, 162, 163, 167, 168, 170, 172, 173, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 247, 249, 251, 253, 255, 256, 267, 268, 270, 271, 273, 274, 278, 279], "viabl": [1, 56], "64": [1, 40, 46, 95, 134, 187, 201, 211, 220, 222, 233, 240, 243, 277], "bit": [1, 16, 20, 36, 37, 39, 55, 56, 58, 85, 86, 91, 95, 162, 173, 189, 198, 212, 215, 221, 233, 240, 250, 251, 277], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 24, 29, 33, 37, 39, 47, 51, 55, 56, 59, 60, 61, 69, 70, 72, 75, 76, 79, 83, 85, 86, 91, 94, 95, 97, 105, 162, 165, 171, 172, 173, 175, 181, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 210, 211, 212, 214, 215, 219, 221, 222, 223, 224, 227, 233, 234, 240, 241, 243, 245, 249, 269, 270, 273, 278], "chose": [1, 56], "rm": [1, 37], "absolut": [1, 10, 33, 34, 37, 54, 55, 61, 63, 70, 80, 82, 86, 91, 107, 166, 193, 197, 198, 212, 214, 217, 222, 233, 255, 256, 257], "Be": [1, 4, 6, 20, 35, 55, 85, 91, 195, 218, 221, 229, 241], "sure": [1, 4, 6, 7, 20, 37, 46, 55, 67, 117, 118, 148, 173, 198, 199, 209, 218, 220, 221, 234, 240, 270, 273, 278], "substitut": [1, 10, 11, 12, 16, 19, 25, 37, 55, 56, 61, 63, 80, 82, 91, 96, 97, 105, 113, 114, 118, 120, 122, 132, 157, 166, 168, 171, 178, 180, 181, 199, 200, 203, 204, 209, 212, 214, 215, 218, 219, 220, 221, 241, 249, 269, 270], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 36, 37, 38, 44, 46, 53, 55, 56, 63, 67, 80, 82, 84, 88, 91, 95, 105, 109, 118, 120, 130, 131, 132, 182, 189, 192, 197, 202, 210, 212, 214, 215, 218, 221, 229, 233, 234, 237, 238, 240, 241, 272], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 23, 27, 30, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 70, 71, 72, 80, 82, 83, 85, 86, 89, 91, 92, 95, 97, 98, 99, 101, 105, 107, 110, 112, 113, 114, 115, 117, 118, 128, 131, 132, 133, 136, 137, 141, 154, 157, 162, 163, 166, 168, 170, 173, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 203, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 224, 227, 228, 233, 234, 236, 237, 238, 240, 241, 247, 250, 251, 252, 253, 255, 256, 267, 268, 270, 273, 274, 277, 278, 279], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 25, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 49, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 78, 80, 82, 84, 85, 86, 88, 91, 92, 94, 95, 96, 98, 99, 101, 105, 106, 110, 112, 113, 118, 120, 122, 128, 133, 135, 141, 142, 152, 153, 162, 165, 170, 173, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 207, 209, 210, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 233, 234, 235, 236, 237, 238, 240, 243, 247, 248, 250, 251, 253, 255, 256, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "collect": [1, 3, 7, 17, 36, 37, 46, 55, 72, 82, 95, 98, 105, 117, 126, 135, 168, 175, 187, 193, 198, 211, 212, 218, 222, 233, 240, 258], "offici": [1, 12, 27, 55, 109, 135, 177, 186, 221, 241, 276], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 71, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 117, 118, 120, 121, 123, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 154, 157, 163, 164, 165, 166, 168, 172, 173, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 226, 228, 233, 234, 235, 236, 237, 238, 240, 241, 243, 247, 248, 251, 255, 256, 258, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 27, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 69, 71, 73, 78, 80, 82, 83, 84, 85, 88, 91, 95, 96, 97, 105, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 131, 132, 133, 135, 136, 140, 151, 152, 153, 154, 157, 162, 163, 166, 167, 168, 173, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 227, 228, 234, 235, 237, 238, 239, 240, 241, 247, 250, 251, 253, 254, 255, 268, 270, 271, 272, 273, 274, 278, 279], "svg": [1, 83, 182], "store": [1, 5, 10, 12, 18, 36, 37, 45, 46, 55, 77, 79, 88, 91, 95, 97, 110, 113, 115, 117, 118, 133, 162, 168, 181, 185, 186, 188, 189, 192, 197, 198, 199, 209, 212, 223, 226, 227, 235, 236, 237, 240, 251, 253, 273], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 29, 30, 31, 32, 33, 35, 36, 37, 44, 45, 46, 47, 51, 54, 55, 56, 57, 60, 62, 63, 65, 68, 69, 70, 71, 72, 77, 78, 80, 82, 84, 85, 86, 88, 91, 95, 97, 98, 99, 105, 106, 109, 110, 112, 116, 118, 122, 125, 126, 129, 132, 133, 152, 154, 162, 165, 166, 168, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 227, 228, 229, 231, 233, 235, 236, 237, 238, 240, 241, 243, 247, 248, 250, 251, 255, 268, 270, 273, 274, 277, 278], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 25, 26, 32, 33, 36, 37, 38, 41, 46, 47, 53, 55, 56, 60, 63, 67, 80, 82, 84, 88, 91, 96, 99, 110, 111, 112, 113, 117, 118, 120, 128, 129, 130, 132, 133, 135, 136, 163, 168, 173, 177, 178, 182, 186, 188, 192, 197, 198, 202, 203, 209, 212, 214, 215, 216, 220, 221, 222, 226, 227, 228, 233, 234, 235, 236, 237, 247, 251, 253, 278], "onc": [1, 4, 11, 12, 18, 19, 20, 37, 39, 46, 51, 55, 56, 60, 63, 71, 80, 82, 96, 99, 111, 112, 128, 132, 173, 178, 180, 186, 188, 190, 192, 198, 202, 203, 211, 212, 214, 218, 221, 228, 240, 250, 267, 268, 278, 279], "under": [1, 3, 4, 6, 11, 12, 18, 19, 31, 32, 34, 35, 37, 38, 45, 46, 51, 53, 63, 73, 80, 82, 84, 85, 91, 95, 97, 98, 99, 137, 163, 187, 189, 190, 197, 198, 202, 209, 210, 212, 215, 218, 220, 221, 222, 228, 231, 272, 278], "prefer": [1, 3, 6, 10, 11, 18, 20, 24, 37, 47, 54, 55, 63, 95, 97, 112, 118, 168, 173, 178, 188, 191, 193, 195, 197, 202, 210, 214, 218, 220, 227, 233, 235, 238, 241, 272, 274], "web": [1, 7, 56, 67, 135, 184, 196, 215], "browser": 1, "drop": [1, 61, 82, 96, 125, 193, 195], "menu": 1, "index": [1, 3, 10, 12, 20, 25, 29, 37, 42, 44, 46, 47, 51, 54, 55, 56, 57, 60, 61, 63, 66, 71, 80, 82, 85, 86, 88, 91, 94, 95, 105, 117, 118, 135, 136, 137, 139, 141, 142, 152, 161, 163, 165, 168, 173, 178, 188, 189, 193, 197, 198, 199, 202, 207, 208, 212, 220, 222, 223, 225, 226, 228, 229, 234], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 29, 31, 32, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 82, 84, 85, 86, 88, 91, 94, 95, 97, 98, 101, 103, 106, 110, 111, 112, 115, 117, 118, 122, 133, 141, 158, 163, 165, 173, 174, 176, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 227, 228, 231, 233, 235, 237, 240, 241, 243, 244, 245, 247, 249, 251, 253, 255, 267, 273, 276, 278, 279], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 36, 37, 46, 47, 54, 55, 61, 62, 63, 67, 78, 81, 82, 85, 86, 88, 91, 95, 97, 98, 109, 112, 113, 118, 119, 125, 130, 131, 133, 135, 139, 140, 156, 160, 163, 164, 165, 170, 171, 178, 185, 188, 189, 192, 193, 195, 197, 201, 202, 205, 209, 210, 212, 214, 215, 216, 218, 219, 220, 222, 228, 233, 234, 235, 236, 238, 240, 241, 251, 268, 270, 272, 273, 274, 275, 277, 278], "load": [1, 37, 55, 83, 98, 99, 101, 110, 112, 113, 117, 121, 123, 136, 148, 182], "ll": [1, 36, 53, 91, 122, 185, 186, 231], "manual": [1, 3, 4, 7, 10, 11, 20, 37, 38, 46, 59, 65, 82, 83, 97, 105, 117, 118, 121, 132, 136, 188, 195, 202, 218, 220, 221, 236, 268, 278], "repeat": [1, 11, 12, 46, 49, 54, 55, 61, 63, 82, 84, 86, 91, 95, 97, 152, 154, 168, 188, 189, 190, 195, 197, 198, 202, 208, 218, 222, 226, 227, 234, 236, 240, 278], "step": [1, 4, 5, 20, 21, 26, 35, 37, 46, 50, 51, 54, 55, 56, 63, 79, 80, 82, 91, 95, 96, 104, 113, 125, 128, 130, 135, 136, 170, 181, 186, 187, 188, 192, 193, 195, 198, 202, 203, 204, 207, 210, 211, 212, 214, 215, 216, 218, 220, 222, 227, 234, 240, 241, 268], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 37, 38, 46, 47, 48, 49, 52, 54, 55, 56, 59, 60, 63, 79, 80, 82, 83, 84, 85, 88, 91, 95, 98, 99, 101, 105, 109, 117, 128, 130, 132, 141, 158, 163, 177, 178, 182, 185, 186, 188, 192, 193, 194, 195, 197, 198, 199, 202, 203, 204, 210, 211, 212, 214, 215, 218, 220, 221, 222, 227, 236, 237, 240, 241, 243, 251, 267, 268, 270, 272, 273, 277, 278], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 23, 27, 37, 43, 46, 47, 54, 55, 59, 60, 61, 62, 63, 86, 88, 92, 96, 118, 130, 132, 178, 185, 187, 188, 190, 191, 192, 197, 198, 202, 207, 209, 211, 220, 221, 223, 240, 270, 272, 274], "approach": [1, 16, 23, 25, 36, 54, 55, 82, 105, 122, 128, 192, 195, 196, 199, 210, 219, 220, 222, 234, 237, 240, 268, 274], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 25, 28, 31, 32, 35, 36, 37, 38, 43, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 68, 70, 72, 73, 74, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 97, 98, 99, 105, 109, 112, 113, 117, 118, 120, 121, 122, 127, 129, 130, 131, 132, 135, 136, 152, 158, 163, 168, 170, 173, 175, 176, 177, 178, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 195, 197, 198, 201, 202, 203, 204, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 226, 227, 228, 231, 233, 234, 235, 236, 240, 241, 247, 249, 251, 257, 260, 267, 269, 278], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 27, 32, 35, 37, 46, 47, 49, 55, 56, 57, 59, 60, 61, 63, 64, 71, 72, 76, 80, 82, 83, 85, 86, 91, 95, 96, 98, 107, 109, 115, 117, 120, 121, 125, 127, 132, 133, 135, 136, 148, 163, 165, 181, 187, 188, 189, 192, 193, 197, 199, 202, 203, 204, 209, 211, 212, 214, 215, 218, 219, 220, 221, 234, 235, 236, 237, 238, 241, 269, 270, 273, 274, 276], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 23, 25, 36, 37, 38, 47, 55, 57, 58, 59, 60, 61, 63, 68, 70, 74, 80, 83, 85, 95, 97, 98, 113, 118, 120, 126, 154, 156, 157, 166, 168, 181, 185, 188, 189, 192, 193, 194, 197, 198, 199, 202, 205, 208, 209, 211, 212, 214, 215, 218, 220, 221, 227, 228, 233, 234, 235, 238, 251, 256, 268, 270, 272, 273, 277, 278, 279], "detect": [1, 3, 28, 35, 88, 91, 95, 188, 192, 202, 218, 219, 221, 223, 240, 258, 277], "procedur": [1, 38, 40, 46, 52, 53, 54, 82, 91, 113, 133, 195, 197, 214, 215, 220, 221, 247, 274], "again": [1, 4, 12, 16, 19, 47, 55, 70, 95, 118, 120, 133, 163, 164, 178, 185, 189, 190, 197, 205, 212, 218, 231, 250, 270, 278], "whether": [1, 4, 10, 11, 18, 19, 20, 25, 35, 36, 37, 41, 46, 54, 55, 56, 62, 63, 67, 70, 82, 83, 85, 86, 91, 95, 101, 109, 114, 117, 118, 156, 175, 180, 186, 188, 191, 192, 193, 197, 198, 202, 205, 209, 210, 214, 215, 218, 220, 221, 222, 223, 233, 235, 240, 241, 247, 249, 270, 274], "8000": [1, 98], "80": [1, 4, 6, 12, 20, 35, 46, 55, 58, 82, 91, 95, 98, 99, 103, 198, 201, 218, 222, 238, 240], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24, 28, 36, 37, 38, 44, 45, 46, 47, 51, 54, 55, 56, 57, 59, 60, 61, 63, 66, 68, 70, 71, 75, 77, 79, 80, 82, 83, 84, 85, 88, 91, 95, 96, 97, 98, 103, 109, 110, 115, 118, 120, 124, 128, 132, 133, 136, 140, 141, 153, 154, 162, 163, 166, 168, 170, 173, 177, 178, 179, 181, 182, 183, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 223, 226, 228, 231, 233, 234, 235, 236, 237, 238, 240, 241, 247, 249, 253, 254, 255, 258, 269, 270, 272, 273, 274, 277, 278], "port": [1, 97, 120, 140], "finish": [1, 37, 38, 162, 236, 275], "stop": [1, 4, 37, 38, 47, 55, 91, 95, 188, 208, 210, 218, 222], "ctrl": 1, "detach": 1, "mode": [1, 2, 55, 83, 97, 140, 163, 182, 198, 202, 233, 244, 264], "d": [1, 6, 7, 10, 11, 12, 16, 20, 29, 36, 39, 44, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 60, 63, 65, 69, 73, 78, 80, 82, 84, 85, 86, 87, 88, 91, 92, 94, 95, 97, 98, 101, 112, 113, 135, 137, 138, 140, 141, 147, 155, 157, 165, 167, 168, 173, 177, 178, 180, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 204, 208, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 226, 228, 240, 243, 247, 248, 249, 250, 251, 255, 263, 274, 279], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 28, 31, 32, 36, 37, 38, 42, 45, 48, 51, 54, 55, 56, 57, 60, 61, 62, 63, 65, 68, 80, 82, 83, 84, 88, 91, 95, 97, 98, 101, 110, 112, 115, 117, 118, 120, 135, 139, 148, 163, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 186, 188, 189, 190, 192, 193, 195, 197, 199, 202, 208, 212, 214, 215, 218, 219, 221, 222, 227, 228, 231, 233, 234, 235, 236, 241, 243, 244, 245, 247, 250, 253, 267, 270, 273, 274, 278], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 33, 38, 54, 55, 57, 61, 65, 86, 88, 91, 95, 97, 98, 101, 106, 110, 118, 120, 132, 158, 163, 173, 183, 186, 192, 198, 199, 210, 211, 212, 218, 221, 238, 240, 241, 253], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 25, 28, 30, 32, 35, 36, 37, 38, 46, 47, 48, 49, 51, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 68, 69, 70, 72, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 91, 95, 97, 98, 103, 105, 109, 118, 120, 122, 130, 132, 133, 135, 136, 137, 148, 152, 156, 158, 160, 162, 163, 166, 168, 170, 171, 173, 174, 178, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 201, 202, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 226, 227, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 247, 250, 258, 267, 268, 270, 271, 274], "new": [1, 3, 4, 5, 7, 11, 18, 20, 26, 31, 32, 36, 37, 38, 46, 47, 54, 55, 56, 57, 63, 68, 71, 80, 82, 83, 86, 91, 95, 98, 101, 105, 110, 112, 118, 125, 127, 133, 134, 135, 137, 158, 164, 165, 168, 170, 173, 174, 176, 178, 181, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 202, 209, 212, 214, 215, 218, 220, 221, 222, 223, 233, 234, 238, 241, 247, 248, 250, 254, 266, 267, 270, 273, 274, 276], "tab": [1, 10, 12, 51, 135], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 37, 47, 54, 55, 59, 61, 78, 80, 82, 91, 95, 98, 99, 103, 109, 118, 124, 129, 133, 135, 163, 167, 171, 173, 178, 185, 186, 188, 189, 192, 193, 195, 197, 198, 202, 203, 205, 209, 210, 211, 212, 214, 215, 218, 220, 222, 223, 231, 234, 235, 238, 240, 241, 270, 272, 274, 277], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 26, 35, 36, 46, 47, 55, 65, 80, 82, 85, 91, 95, 113, 120, 128, 188, 190, 192, 197, 198, 202, 205, 211, 214, 218, 219, 220, 221, 222, 223, 228, 233, 235, 240, 241, 247, 271, 276], "major": [1, 3, 4, 7, 10, 25, 65, 67, 109, 227, 272, 278], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 46, 84, 160, 163, 173, 198, 214, 221], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 27, 37, 55, 60, 63, 167, 203, 214, 218, 221, 274, 278], "request": [1, 3, 4, 6, 7, 9, 10, 18, 27, 35, 55, 59, 71, 80, 95, 118, 168, 195, 198, 226, 234], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 23, 26, 32, 33, 35, 36, 37, 38, 39, 46, 47, 51, 55, 56, 57, 58, 59, 60, 61, 63, 65, 70, 71, 72, 77, 78, 80, 82, 84, 85, 86, 88, 91, 95, 98, 101, 103, 105, 111, 112, 113, 118, 120, 122, 125, 127, 129, 130, 133, 152, 165, 168, 177, 178, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 200, 202, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 235, 237, 240, 241, 243, 247, 248, 249, 251, 253, 255, 268, 271, 273, 278, 279], "releas": [1, 7, 10, 55, 82, 86, 97, 132, 188, 227, 238, 241, 273], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 23, 27, 32, 33, 35, 36, 37, 47, 51, 54, 55, 56, 57, 59, 60, 61, 63, 67, 73, 80, 82, 85, 86, 88, 90, 91, 95, 96, 97, 107, 109, 117, 118, 120, 122, 123, 128, 130, 132, 135, 148, 152, 157, 162, 165, 166, 176, 183, 186, 190, 193, 194, 195, 197, 198, 201, 202, 203, 208, 209, 210, 212, 214, 217, 218, 219, 220, 222, 225, 228, 231, 233, 235, 236, 237, 238, 240, 247, 248, 250, 255, 257, 268, 272, 273, 274, 278, 279], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 37, 46, 47, 51, 54, 55, 59, 61, 79, 80, 82, 83, 91, 92, 95, 97, 120, 158, 163, 182, 188, 191, 192, 193, 195, 197, 198, 202, 209, 212, 218, 220, 222, 231, 233, 240, 241, 274], "99": [1, 37, 55, 56, 91, 95, 195, 196], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 25, 28, 32, 33, 37, 46, 47, 51, 55, 56, 60, 63, 78, 80, 85, 86, 91, 92, 94, 95, 96, 97, 102, 103, 105, 109, 113, 114, 117, 118, 120, 122, 125, 126, 128, 130, 131, 132, 133, 135, 136, 142, 152, 155, 157, 165, 166, 170, 171, 173, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 195, 196, 197, 198, 199, 201, 202, 209, 210, 211, 212, 214, 218, 220, 222, 231, 233, 234, 239, 240, 241, 253, 255, 265, 268, 272, 273, 274], "due": [1, 6, 10, 16, 20, 24, 35, 37, 45, 46, 55, 57, 72, 91, 95, 98, 101, 118, 120, 132, 141, 168, 183, 186, 192, 198, 202, 205, 215, 217, 219, 222, 238, 249, 255, 278], "bad": [1, 10, 54, 95, 170, 202], "math": [1, 3, 6, 20, 25, 29, 33, 36, 38, 46, 55, 60, 63, 65, 82, 91, 95, 96, 118, 128, 183, 188, 193, 196, 201, 202, 218, 219, 222, 234, 235, 241, 251, 252, 253, 254, 255, 259, 267, 268, 272], "format": [1, 4, 8, 11, 14, 16, 23, 36, 47, 56, 77, 78, 82, 85, 91, 94, 95, 98, 117, 136, 141, 152, 162, 188, 191, 192, 197, 198, 200, 202, 212, 218, 221, 233, 243, 247, 250, 271, 274, 277], "doubl": [1, 6, 7, 35, 37, 51, 55, 56, 62, 91, 97, 112, 127, 128, 185, 192, 202, 211, 212, 235, 278], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 25, 31, 32, 35, 36, 37, 41, 44, 46, 47, 48, 53, 54, 55, 56, 60, 63, 67, 78, 80, 84, 85, 86, 88, 91, 92, 95, 105, 110, 111, 118, 132, 135, 148, 156, 168, 170, 171, 176, 183, 184, 188, 189, 191, 192, 193, 195, 197, 198, 204, 210, 212, 214, 218, 219, 220, 221, 222, 226, 227, 231, 233, 235, 238, 240, 249, 253, 270, 278], "ad": [1, 6, 7, 10, 18, 23, 29, 36, 37, 39, 45, 46, 55, 56, 66, 70, 77, 80, 84, 95, 97, 101, 109, 110, 112, 118, 119, 135, 142, 170, 173, 179, 187, 188, 197, 199, 201, 202, 204, 212, 215, 218, 221, 222, 224, 227, 228, 233, 249, 270], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 35, 59, 80, 83, 91, 118, 120, 132, 202, 209, 215, 218], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 24, 25, 27, 28, 38, 42, 46, 49, 50, 55, 56, 57, 59, 63, 67, 80, 82, 83, 91, 95, 96, 97, 110, 112, 118, 120, 126, 128, 129, 133, 135, 136, 162, 168, 177, 182, 185, 187, 188, 189, 190, 192, 195, 201, 212, 214, 218, 220, 221, 222, 227, 230, 231, 233, 234, 235, 238, 239, 240, 241, 250, 265, 270, 272, 275, 277], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 28, 36, 37, 39, 46, 55, 56, 60, 61, 63, 68, 69, 71, 72, 73, 80, 82, 85, 86, 91, 94, 97, 105, 106, 111, 112, 122, 129, 148, 152, 154, 162, 165, 168, 175, 178, 181, 188, 189, 191, 192, 193, 195, 197, 198, 202, 203, 204, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 227, 233, 235, 237, 240, 241, 243, 268, 270, 273, 274, 279], "render": [1, 3, 6, 7, 37, 55, 83, 182, 188, 202, 277], "resourc": [1, 6, 7, 20, 91, 196, 218, 234, 244], "style": [1, 8, 36, 55, 83, 162, 182, 188, 202, 221, 277], "guid": [1, 3, 8, 9, 11, 13, 20, 22, 27, 36, 55, 62, 118, 132, 202, 228, 261, 263, 271, 275, 276], "tip": [1, 6, 55, 132, 218, 219, 278], "few": [1, 3, 4, 10, 11, 18, 25, 33, 45, 47, 55, 56, 82, 83, 95, 96, 120, 128, 171, 177, 182, 185, 186, 189, 197, 202, 210, 211, 212, 218, 221, 222, 235, 240, 278], "extra": [1, 10, 37, 55, 56, 95, 96, 126, 173, 183, 194, 195, 202, 212, 218, 233, 234, 235, 253], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 32, 48, 55, 57, 63, 82, 85, 95, 118, 173, 183, 192, 195, 196, 197, 198, 218, 220, 237, 241, 253, 255], "xetex": 1, "font": [1, 83, 182, 202], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 22, 35, 37, 38, 46, 47, 51, 55, 56, 58, 60, 61, 63, 71, 72, 80, 82, 85, 86, 91, 94, 95, 97, 98, 99, 105, 113, 117, 118, 132, 133, 135, 136, 140, 147, 152, 154, 156, 157, 162, 165, 168, 178, 183, 186, 187, 188, 189, 191, 197, 198, 199, 200, 202, 204, 205, 209, 210, 212, 218, 219, 221, 222, 233, 235, 237, 240, 253, 268, 272, 274, 278], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 25, 29, 30, 31, 32, 33, 35, 36, 37, 45, 46, 47, 51, 54, 55, 56, 57, 59, 61, 63, 67, 72, 73, 77, 79, 80, 82, 84, 85, 86, 88, 91, 94, 95, 96, 97, 98, 105, 106, 109, 110, 111, 114, 118, 122, 128, 132, 135, 153, 160, 162, 163, 165, 167, 168, 170, 171, 173, 177, 178, 186, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 229, 233, 234, 235, 237, 238, 240, 241, 243, 247, 249, 251, 270, 272, 273, 274, 278], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 25, 26, 27, 30, 36, 37, 46, 47, 53, 55, 56, 60, 61, 63, 68, 82, 85, 86, 87, 89, 91, 93, 95, 108, 110, 112, 118, 152, 166, 170, 178, 187, 188, 189, 192, 193, 195, 197, 198, 202, 205, 214, 220, 222, 232, 233, 235, 236, 237, 238, 240, 241, 245, 247, 252, 270, 273, 274], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 28, 29, 33, 35, 36, 37, 38, 44, 45, 46, 47, 49, 51, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 68, 70, 71, 72, 73, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 95, 98, 101, 102, 105, 109, 112, 113, 114, 115, 117, 118, 120, 131, 132, 133, 135, 136, 142, 152, 157, 163, 165, 167, 168, 169, 170, 171, 178, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 226, 228, 233, 234, 235, 236, 240, 241, 243, 247, 253, 255, 268, 270, 272, 274, 278, 279], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 24, 25, 35, 36, 37, 38, 40, 43, 45, 46, 47, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 71, 72, 73, 75, 78, 81, 82, 84, 85, 86, 91, 95, 97, 98, 105, 106, 110, 112, 115, 117, 118, 120, 122, 123, 125, 126, 127, 132, 133, 135, 136, 148, 152, 157, 163, 165, 166, 168, 171, 173, 174, 178, 183, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 233, 234, 235, 236, 238, 240, 241, 242, 243, 255, 268, 273, 277, 278, 279], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 147, 150, 151, 152, 153, 154, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 245, 247, 249, 250, 251, 253, 256, 263, 267, 268, 270, 272, 273, 274, 277, 278, 279], "dev": [1, 3, 4, 5, 238], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 251, 252, 254, 255, 256, 257, 259, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279], "sympy_debug": [2, 82, 243], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 23, 24, 28, 29, 30, 32, 33, 35, 37, 38, 50, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 72, 74, 80, 82, 83, 85, 86, 91, 97, 98, 99, 101, 103, 105, 117, 118, 125, 127, 135, 136, 142, 155, 157, 162, 166, 168, 171, 177, 178, 180, 183, 190, 192, 193, 195, 197, 198, 199, 202, 203, 208, 209, 214, 215, 217, 218, 219, 220, 221, 229, 233, 235, 236, 237, 241, 247, 249, 250, 252, 253, 255, 259, 264, 268, 270, 272, 274, 279], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 30, 31, 32, 34, 36, 37, 46, 48, 50, 55, 57, 59, 60, 61, 63, 68, 71, 72, 73, 78, 79, 82, 83, 86, 88, 91, 95, 97, 98, 106, 110, 113, 117, 118, 136, 141, 148, 152, 158, 162, 163, 165, 167, 168, 178, 180, 182, 183, 188, 192, 193, 197, 198, 199, 200, 202, 210, 212, 214, 218, 220, 221, 222, 226, 227, 228, 233, 234, 235, 237, 240, 241, 247, 248, 249, 250, 251, 253, 255, 267, 268, 273, 278, 279], "unix": [2, 233, 234], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 27, 36, 37, 38, 44, 46, 47, 54, 55, 56, 60, 61, 67, 71, 80, 82, 86, 91, 95, 97, 98, 105, 106, 107, 109, 111, 112, 118, 122, 132, 135, 163, 165, 168, 173, 177, 178, 183, 185, 188, 191, 192, 193, 195, 198, 199, 201, 202, 203, 205, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 226, 227, 233, 235, 237, 240, 241, 243, 244, 251, 252, 253, 255, 267, 268, 270, 272, 273, 274, 277, 278, 279], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 23, 24, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 47, 51, 54, 55, 56, 57, 58, 61, 63, 65, 67, 70, 71, 74, 80, 82, 83, 85, 86, 88, 89, 91, 92, 95, 96, 102, 105, 109, 112, 113, 115, 117, 118, 119, 121, 122, 126, 129, 130, 135, 140, 143, 148, 152, 157, 160, 162, 164, 170, 172, 173, 176, 177, 179, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 205, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 224, 227, 228, 231, 233, 234, 236, 238, 240, 241, 243, 249, 251, 252, 253, 255, 259, 267, 268, 270, 271, 272, 273, 274, 276, 278], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 80, 82, 83, 85, 86, 87, 88, 91, 92, 95, 97, 98, 99, 103, 105, 106, 107, 108, 109, 111, 113, 114, 118, 120, 122, 135, 139, 140, 149, 152, 153, 160, 162, 163, 166, 167, 168, 171, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 231, 233, 234, 235, 236, 238, 240, 241, 243, 247, 249, 250, 251, 252, 253, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "isympi": [2, 3, 11, 12, 83], "window": [2, 243, 264], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 23, 27, 33, 36, 37, 46, 53, 55, 56, 57, 61, 78, 80, 82, 83, 84, 85, 91, 95, 96, 107, 109, 110, 115, 118, 122, 126, 132, 133, 135, 148, 153, 158, 168, 173, 177, 182, 183, 185, 189, 191, 192, 193, 195, 197, 201, 202, 209, 210, 211, 212, 214, 218, 221, 231, 233, 235, 236, 238, 252, 253, 255, 267, 268, 270, 271, 272, 273, 274, 278, 279], "limit": [2, 4, 10, 12, 23, 25, 27, 33, 35, 37, 54, 55, 57, 59, 60, 61, 63, 64, 67, 75, 77, 82, 83, 85, 91, 95, 103, 128, 133, 155, 157, 163, 166, 182, 188, 193, 195, 198, 199, 202, 205, 206, 208, 210, 214, 215, 217, 218, 219, 220, 222, 227, 234, 237, 240, 241, 243, 246, 247, 256, 269, 270, 272, 274], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 22, 23, 26, 30, 31, 32, 34, 35, 36, 38, 46, 47, 50, 51, 53, 56, 57, 58, 59, 60, 64, 65, 66, 67, 72, 75, 76, 79, 81, 82, 83, 84, 86, 88, 90, 94, 96, 98, 100, 102, 103, 105, 106, 107, 111, 112, 115, 116, 117, 118, 121, 122, 123, 124, 128, 130, 131, 135, 140, 141, 142, 143, 147, 152, 153, 154, 157, 162, 163, 164, 165, 166, 167, 168, 171, 177, 178, 181, 182, 184, 186, 187, 189, 194, 195, 196, 197, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 220, 221, 222, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279], "nice": [2, 4, 6, 27, 55, 67, 91, 95, 118, 132, 135, 188, 202, 212, 243, 273], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 23, 24, 27, 30, 31, 32, 33, 35, 36, 38, 39, 44, 46, 47, 54, 55, 56, 59, 60, 61, 63, 82, 84, 85, 88, 91, 92, 95, 96, 97, 98, 99, 105, 113, 118, 120, 128, 134, 140, 148, 161, 162, 166, 168, 178, 184, 186, 188, 191, 192, 193, 197, 198, 208, 209, 211, 212, 214, 218, 220, 227, 229, 233, 235, 240, 241, 243, 245, 247, 250, 257, 259, 265, 268, 269, 270, 271, 272, 273, 274, 278], "tree": [2, 10, 11, 15, 46, 49, 55, 97, 111, 118, 160, 163, 178, 194, 198, 209, 211, 214, 221, 224, 226, 237, 240, 243, 259, 265, 269], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 37, 51, 55, 56, 59, 60, 65, 67, 73, 77, 80, 82, 85, 91, 95, 105, 109, 118, 122, 135, 140, 173, 185, 186, 189, 192, 195, 197, 198, 199, 201, 202, 203, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 233, 234, 235, 241, 267, 270, 273, 278], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 23, 27, 37, 40, 46, 47, 54, 55, 59, 60, 62, 63, 67, 80, 82, 95, 111, 129, 173, 175, 188, 190, 192, 195, 197, 201, 202, 203, 209, 210, 218, 222, 233, 235, 245, 257, 270, 274, 277], "instal": [3, 5, 7, 11, 12, 59, 96, 192, 193, 202, 234, 241, 265, 271, 277], "enabl": [3, 7, 11, 20, 27, 55, 82, 83, 95, 99, 118, 120, 168, 178, 182, 202, 218, 222, 233, 238, 241, 274, 277, 278], "certain": [3, 7, 11, 20, 25, 27, 34, 36, 37, 46, 53, 55, 59, 63, 71, 80, 82, 95, 97, 132, 178, 179, 189, 192, 195, 197, 202, 203, 209, 212, 214, 215, 218, 220, 221, 222, 224, 235, 236, 241, 247, 249, 255, 278], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 30, 31, 32, 35, 36, 37, 38, 46, 47, 54, 55, 56, 59, 61, 65, 67, 82, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 105, 109, 112, 113, 118, 126, 129, 132, 133, 136, 170, 177, 178, 181, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 209, 210, 212, 215, 218, 219, 220, 221, 222, 231, 234, 235, 236, 237, 238, 240, 241, 243, 249, 251, 267, 270, 272, 273, 274, 276, 277, 278], "mention": [3, 4, 6, 20, 46, 80, 82, 105, 120, 136, 137, 183, 212, 215, 218, 222, 250, 251, 252, 253, 274], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 25, 35, 37, 46, 47, 55, 56, 59, 60, 61, 63, 80, 82, 90, 95, 126, 174, 187, 189, 192, 193, 194, 197, 198, 199, 200, 202, 211, 214, 215, 218, 219, 221, 226, 231, 233, 235, 236, 239, 240, 241, 250, 253, 265, 267, 270, 273, 274], "unless": [3, 6, 11, 18, 20, 30, 32, 35, 37, 46, 54, 55, 56, 60, 63, 70, 71, 80, 91, 94, 141, 185, 186, 190, 192, 197, 198, 202, 207, 210, 211, 218, 220, 233, 237, 240, 241, 243, 247, 255, 268, 274, 278], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 25, 27, 33, 36, 37, 38, 43, 45, 46, 47, 53, 54, 55, 56, 57, 60, 61, 63, 65, 68, 69, 70, 71, 72, 77, 80, 82, 83, 85, 86, 88, 89, 91, 94, 95, 97, 109, 112, 113, 115, 117, 118, 120, 126, 128, 130, 131, 132, 135, 136, 142, 147, 152, 157, 160, 165, 170, 171, 173, 174, 178, 181, 182, 183, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 202, 203, 208, 209, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 228, 231, 233, 235, 237, 240, 241, 243, 247, 253, 255, 268, 270, 271, 272, 273, 274, 278], "intend": [3, 4, 6, 10, 14, 18, 55, 56, 66, 75, 80, 95, 97, 111, 163, 192, 193, 197, 200, 215, 218, 219, 231, 236, 267], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 29, 34, 46, 47, 54, 55, 56, 60, 61, 63, 71, 78, 80, 82, 85, 86, 88, 95, 105, 109, 110, 112, 113, 117, 118, 120, 126, 128, 129, 133, 135, 152, 164, 168, 177, 186, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 210, 212, 214, 215, 218, 220, 233, 235, 237, 240, 268, 273, 278], "those": [3, 6, 10, 11, 12, 14, 18, 19, 23, 25, 28, 33, 36, 37, 38, 46, 47, 53, 54, 55, 56, 59, 68, 69, 80, 82, 85, 91, 94, 95, 109, 112, 120, 126, 129, 141, 165, 177, 180, 182, 185, 186, 188, 192, 193, 195, 197, 198, 200, 201, 202, 208, 210, 214, 218, 219, 220, 221, 222, 228, 231, 233, 237, 240, 247, 249, 270, 272, 278], "everi": [3, 4, 6, 11, 18, 20, 23, 26, 31, 32, 33, 36, 41, 43, 46, 47, 55, 56, 70, 84, 86, 91, 95, 105, 133, 183, 185, 186, 188, 189, 190, 192, 193, 195, 197, 202, 207, 210, 212, 214, 215, 218, 221, 222, 224, 250, 253, 255, 271, 273, 274, 278], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 46, 47, 51, 53, 54, 55, 56, 57, 59, 61, 63, 65, 66, 68, 69, 71, 80, 82, 85, 86, 91, 94, 95, 97, 107, 109, 111, 118, 120, 125, 129, 148, 152, 158, 162, 164, 167, 177, 185, 186, 188, 190, 191, 192, 193, 195, 197, 198, 199, 202, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 227, 228, 231, 233, 235, 237, 240, 241, 243, 247, 248, 251, 267, 268, 270, 273, 274, 277, 278, 279], "themselv": [3, 7, 10, 20, 33, 36, 47, 51, 53, 55, 82, 95, 128, 129, 172, 192, 193, 197, 208, 222, 228, 237, 240, 243, 278], "incomplet": [3, 6, 7, 55, 60, 63, 190, 192, 198, 202, 204, 220, 221], "main": [3, 5, 6, 7, 10, 12, 24, 32, 33, 37, 55, 61, 80, 86, 91, 94, 118, 126, 166, 172, 182, 186, 188, 189, 193, 194, 202, 209, 218, 221, 227, 234, 278, 279], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 23, 32, 37, 55, 56, 57, 59, 61, 62, 63, 71, 80, 82, 91, 95, 109, 113, 114, 122, 128, 135, 154, 157, 158, 186, 195, 198, 199, 203, 209, 214, 215, 218, 221, 222, 233, 235, 243, 272, 273, 278], "io": [3, 7, 83, 202, 241], "onearbitrari": [3, 6, 10, 11, 12, 18, 20, 23, 24, 25, 35, 40, 47, 48, 54, 55, 56, 59, 60, 63, 66, 67, 69, 85, 86, 91, 99, 129, 133, 154, 157, 186, 188, 189, 192, 193, 195, 197, 199, 214, 218, 219, 220, 228, 238, 241, 247, 248, 267, 268, 273, 278, 279], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 23, 37, 46, 55, 58, 59, 60, 63, 71, 82, 91, 95, 103, 133, 187, 189, 192, 193, 197, 198, 199, 202, 209, 214, 215, 220, 221, 234, 235, 243, 267, 278], "arithmet": [3, 37, 55, 56, 59, 86, 91, 95, 157, 164, 187, 188, 189, 191, 192, 193, 195, 196, 200, 203], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 53, 80, 82, 91, 175, 188, 189, 190, 204, 209, 212, 222, 268, 270, 273], "calcul": [3, 12, 16, 18, 24, 29, 35, 38, 47, 53, 55, 56, 57, 58, 59, 61, 63, 65, 67, 68, 69, 71, 72, 82, 86, 88, 91, 95, 98, 99, 107, 109, 110, 112, 113, 117, 120, 121, 122, 137, 140, 141, 144, 147, 163, 164, 165, 166, 168, 169, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 192, 193, 195, 197, 198, 199, 204, 209, 218, 222, 226, 234, 235, 241, 247, 249, 253, 254, 255, 274, 277], "float": [3, 11, 18, 20, 37, 46, 61, 63, 70, 72, 82, 83, 86, 91, 95, 97, 103, 105, 135, 141, 182, 188, 192, 193, 202, 214, 220, 222, 233, 241, 243, 258, 267, 270], "point": [3, 4, 6, 7, 11, 12, 16, 18, 23, 24, 27, 29, 35, 37, 38, 46, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 77, 78, 79, 80, 82, 91, 95, 98, 99, 101, 103, 110, 112, 113, 114, 115, 117, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 148, 170, 173, 179, 183, 184, 186, 188, 189, 192, 193, 195, 197, 198, 202, 204, 208, 209, 210, 218, 220, 221, 222, 234, 237, 240, 241, 243, 247, 249, 251, 252, 253, 254, 255, 256, 258, 267, 268, 270, 273], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 47, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 83, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 105, 107, 110, 112, 113, 114, 115, 117, 118, 120, 132, 135, 137, 141, 144, 147, 152, 154, 157, 160, 162, 163, 164, 165, 168, 169, 171, 172, 173, 178, 179, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 202, 203, 208, 209, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 233, 235, 236, 240, 241, 243, 249, 251, 253, 256, 268, 270, 273], "evalf": [3, 6, 11, 12, 18, 24, 25, 37, 54, 59, 60, 61, 63, 74, 77, 78, 86, 91, 97, 118, 120, 135, 150, 193, 198, 202, 209, 210, 214, 222, 234, 241, 258, 269], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 24, 27, 30, 31, 32, 33, 34, 35, 37, 47, 52, 54, 55, 57, 59, 61, 65, 67, 68, 70, 72, 77, 82, 84, 87, 89, 91, 93, 95, 105, 163, 171, 173, 185, 186, 188, 193, 195, 197, 198, 199, 202, 209, 210, 214, 215, 217, 218, 220, 221, 222, 223, 231, 233, 234, 235, 240, 244, 247, 248, 272, 273, 274, 278, 279], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 27, 31, 33, 34, 37, 54, 55, 56, 57, 59, 63, 80, 82, 83, 86, 88, 91, 105, 106, 118, 124, 126, 131, 132, 168, 173, 177, 178, 179, 185, 188, 191, 192, 195, 198, 202, 204, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 224, 227, 228, 231, 233, 234, 235, 238, 240, 241, 243, 249, 252, 274, 278], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 256, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279], "importerror": 3, "extern": [3, 27, 83, 97, 101, 103, 120, 128, 182, 192, 193, 203, 210, 214, 222, 233, 234], "doc": [3, 4, 6, 7, 8, 12, 26, 37, 46, 54, 55, 71, 83, 133, 170, 192, 194, 215, 218, 233, 234, 236, 238, 240, 247, 251], "latest": [3, 5, 27, 36, 236, 238, 241], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 33, 38, 47, 54, 55, 56, 57, 73, 80, 82, 83, 85, 86, 89, 91, 95, 98, 109, 129, 168, 170, 173, 178, 182, 185, 188, 189, 190, 192, 195, 197, 201, 202, 212, 214, 215, 218, 220, 221, 222, 223, 224, 226, 227, 233, 240, 251, 267, 268, 270, 272, 273, 274, 278, 279], "did": [3, 7, 19, 55, 82, 95, 109, 125, 173, 195, 199, 210, 220, 231, 241, 270, 272, 278], "explain": [3, 4, 6, 7, 18, 25, 36, 51, 55, 63, 73, 78, 189, 192, 195, 197, 199, 209], "ones": [3, 4, 10, 20, 27, 37, 46, 51, 55, 80, 82, 85, 86, 88, 91, 94, 95, 118, 141, 162, 168, 191, 195, 205, 215, 218, 223, 229, 235, 243, 247, 251, 274, 277], "typic": [3, 4, 10, 11, 20, 51, 61, 80, 95, 105, 110, 115, 119, 177, 186, 188, 190, 195, 199, 212, 234, 235, 251], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 27, 31, 32, 35, 36, 37, 46, 54, 55, 57, 61, 66, 86, 88, 91, 95, 118, 154, 166, 171, 178, 181, 188, 189, 191, 192, 193, 197, 198, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 233, 234, 235, 236, 237, 238, 268, 279], "git": [3, 8], "repositori": [3, 5, 7, 27], "vast": [3, 25, 82, 194], "wrap": [3, 4, 6, 30, 31, 32, 33, 37, 44, 55, 61, 83, 96, 182, 186, 188, 191, 192, 195, 202, 205, 221, 227, 234, 238, 241, 243, 273], "addition": [3, 6, 10, 55, 130, 166, 186, 195, 202, 222, 231, 238, 250], "ci": [3, 7, 63, 80, 202, 277], "wish": [3, 6, 12, 20, 27, 37, 55, 56, 59, 80, 95, 163, 177, 186, 237, 241, 268, 272, 274, 279], "local": [3, 28, 30, 31, 32, 55, 57, 80, 97, 125, 127, 180, 189, 195, 220, 233], "improv": [3, 4, 10, 19, 20, 55, 80, 128, 188, 192, 195, 196, 198, 199, 201, 203, 218, 221, 227, 258, 268, 274], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 34, 36, 37, 38, 46, 47, 50, 54, 55, 56, 58, 59, 61, 68, 72, 79, 82, 89, 91, 95, 96, 111, 113, 120, 122, 128, 132, 133, 135, 152, 153, 162, 165, 168, 183, 186, 190, 191, 192, 195, 197, 198, 203, 204, 205, 209, 214, 215, 218, 220, 221, 222, 223, 234, 240, 247, 248, 250, 253, 258, 267, 268, 272, 273, 278], "gmpy2": [3, 192, 193], "wrapper": [3, 10, 11, 20, 31, 33, 37, 47, 55, 63, 91, 132, 180, 182, 191, 192, 195, 202, 209, 218, 221, 222, 234, 238, 240], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 23, 25, 31, 32, 33, 35, 36, 37, 38, 44, 46, 47, 51, 54, 55, 56, 60, 61, 63, 65, 70, 73, 75, 80, 82, 84, 85, 86, 88, 91, 92, 95, 97, 102, 105, 109, 120, 128, 135, 136, 152, 153, 154, 158, 165, 167, 170, 173, 174, 175, 178, 181, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 202, 207, 208, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 228, 231, 235, 236, 237, 238, 240, 241, 243, 247, 251, 262, 267, 268, 270, 271, 273, 274, 279], "larg": [3, 4, 6, 12, 18, 46, 47, 55, 56, 65, 80, 82, 94, 95, 109, 114, 132, 135, 148, 173, 177, 187, 192, 193, 195, 198, 201, 202, 203, 209, 212, 214, 222, 227, 234, 241, 243, 249, 267, 272, 278], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 22, 23, 30, 31, 32, 35, 37, 38, 44, 46, 47, 48, 49, 51, 54, 56, 57, 58, 59, 60, 62, 63, 65, 68, 79, 80, 82, 83, 84, 85, 86, 88, 91, 92, 95, 97, 98, 105, 107, 157, 162, 164, 165, 166, 168, 170, 178, 180, 182, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 207, 208, 209, 211, 212, 214, 215, 218, 220, 221, 222, 226, 227, 228, 234, 235, 237, 240, 243, 268, 270, 273, 277, 278], "faster": [3, 18, 24, 37, 40, 55, 63, 86, 95, 96, 109, 111, 113, 114, 132, 191, 192, 193, 195, 197, 198, 199, 203, 205, 209, 214, 215, 218, 219, 221, 234, 237], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 29, 35, 37, 47, 55, 56, 57, 60, 61, 63, 64, 71, 80, 82, 83, 85, 86, 91, 92, 95, 97, 103, 105, 148, 152, 153, 162, 178, 180, 181, 182, 187, 188, 192, 193, 197, 198, 199, 202, 204, 205, 207, 218, 219, 222, 234, 238, 240, 243, 270, 272, 273, 277, 278], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 33, 35, 37, 46, 56, 61, 62, 64, 72, 86, 90, 95, 97, 166, 167, 190, 192, 193, 194, 195, 197, 198, 199, 202, 209, 210, 214, 215, 218, 222, 232, 233, 234, 240, 241, 245, 257, 258, 262, 270, 273], "oper": [3, 5, 6, 11, 18, 19, 20, 24, 25, 29, 33, 37, 46, 47, 48, 54, 55, 56, 57, 58, 59, 61, 63, 65, 73, 75, 78, 80, 85, 86, 88, 90, 95, 97, 105, 106, 109, 113, 114, 122, 126, 132, 135, 140, 144, 145, 149, 151, 152, 153, 154, 159, 160, 163, 165, 166, 167, 168, 177, 178, 180, 184, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 205, 207, 210, 211, 213, 214, 217, 218, 220, 221, 224, 225, 226, 227, 233, 234, 237, 240, 241, 247, 254, 257, 263, 269, 270, 271, 273, 278], "poli": [3, 11, 12, 54, 55, 56, 60, 61, 63, 64, 71, 77, 82, 86, 88, 91, 95, 135, 189, 190, 194, 195, 197, 198, 199, 201, 204, 217, 218, 220, 221, 233], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 23, 24, 25, 27, 31, 32, 33, 35, 37, 39, 41, 43, 44, 46, 47, 48, 49, 53, 56, 58, 60, 61, 63, 65, 70, 71, 72, 75, 77, 81, 83, 84, 85, 90, 92, 96, 98, 103, 105, 106, 108, 110, 112, 113, 115, 117, 118, 120, 128, 130, 133, 135, 136, 137, 138, 139, 141, 145, 147, 149, 150, 151, 154, 156, 157, 165, 166, 168, 172, 177, 178, 179, 180, 181, 183, 185, 192, 194, 199, 202, 204, 205, 207, 210, 213, 214, 216, 218, 219, 220, 222, 228, 237, 239, 240, 241, 243, 247, 250, 251, 255, 258, 261, 262, 263, 264, 265, 270, 274, 275, 278], "domain": [3, 6, 10, 11, 16, 20, 35, 36, 55, 56, 58, 60, 61, 63, 74, 76, 77, 80, 82, 88, 91, 92, 95, 102, 105, 118, 135, 189, 191, 194, 195, 197, 199, 200, 216, 217, 218, 220, 222, 274, 279], "No": [3, 6, 7, 12, 25, 36, 55, 63, 70, 85, 95, 98, 106, 118, 163, 188, 198, 204, 205, 214, 215, 220, 221, 222, 227, 231, 237, 238, 240, 267, 279], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 27, 35, 36, 37, 38, 43, 46, 51, 55, 56, 57, 59, 61, 63, 67, 80, 82, 85, 86, 91, 95, 96, 113, 114, 118, 120, 128, 131, 132, 135, 152, 168, 176, 186, 189, 191, 192, 193, 195, 197, 206, 209, 210, 212, 214, 215, 218, 219, 220, 221, 222, 226, 235, 240, 267, 268, 270, 271, 272, 273, 277, 278, 279], "algorithm": [3, 6, 11, 12, 18, 23, 24, 25, 35, 39, 40, 42, 45, 46, 47, 49, 51, 53, 54, 55, 56, 59, 60, 61, 67, 72, 80, 82, 85, 88, 91, 92, 95, 98, 106, 112, 132, 155, 173, 178, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 203, 206, 207, 210, 211, 213, 214, 215, 218, 220, 221, 222, 228, 237, 240, 259, 268, 273, 274, 278], "simplif": [3, 11, 12, 18, 30, 32, 34, 35, 37, 55, 57, 60, 61, 80, 86, 91, 97, 111, 118, 132, 135, 152, 168, 178, 198, 203, 213, 218, 220, 221, 257, 258, 260, 267, 269, 271, 272], "factor": [3, 10, 11, 12, 38, 46, 47, 54, 55, 56, 59, 60, 61, 63, 80, 82, 91, 95, 98, 105, 135, 137, 145, 149, 152, 164, 168, 173, 174, 175, 189, 192, 193, 194, 196, 197, 198, 205, 211, 212, 214, 215, 220, 222, 226, 237, 250, 253, 272, 274], "matric": [3, 6, 11, 17, 18, 33, 37, 55, 56, 82, 92, 94, 105, 112, 113, 114, 118, 122, 132, 135, 137, 140, 141, 143, 151, 152, 162, 167, 178, 186, 187, 191, 197, 202, 203, 210, 212, 214, 215, 218, 220, 221, 223, 225, 235, 236, 263, 269, 271, 272], "thu": [3, 4, 10, 11, 12, 16, 23, 33, 40, 46, 47, 55, 56, 57, 61, 63, 78, 80, 82, 86, 89, 91, 94, 95, 106, 117, 122, 128, 132, 173, 178, 190, 195, 197, 199, 203, 209, 212, 214, 235, 240, 241, 251, 252, 270, 273, 278, 279], "speed": [3, 6, 10, 32, 37, 46, 55, 56, 59, 86, 95, 96, 107, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 135, 136, 138, 139, 142, 177, 178, 181, 186, 187, 199, 202, 203, 209, 214, 218, 234, 237, 240, 273, 274], "non": [3, 4, 11, 12, 18, 20, 24, 25, 28, 33, 35, 38, 45, 48, 54, 55, 56, 60, 61, 62, 63, 64, 65, 68, 69, 70, 82, 84, 85, 86, 87, 88, 91, 92, 94, 109, 113, 115, 120, 122, 126, 130, 131, 135, 152, 157, 167, 168, 170, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 205, 209, 210, 212, 214, 215, 217, 218, 220, 221, 222, 223, 226, 227, 228, 233, 235, 240, 243, 253, 273, 278, 279], "who": [3, 4, 6, 16, 20, 56, 57, 135, 186, 195, 202, 271], "abl": [3, 4, 6, 11, 16, 18, 20, 36, 37, 46, 51, 55, 56, 57, 66, 74, 82, 88, 91, 95, 102, 118, 130, 132, 133, 135, 136, 189, 192, 199, 218, 221, 233, 250, 272, 277, 279], "experi": [3, 120, 221, 222], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 22, 24, 26, 33, 38, 45, 55, 91, 94, 97, 135, 136, 192, 196, 202, 207, 212, 218, 221, 272, 273, 277], "interfac": [3, 7, 11, 23, 35, 55, 83, 112, 128, 137, 163, 182, 184, 186, 192, 195, 200, 221, 234, 235, 264], "ipython": [3, 6, 10, 11, 12, 27, 83, 135, 182, 241, 245, 246, 276, 277], "jupyt": [3, 10, 11, 20, 241, 245], "notebook": [3, 11, 20, 27, 83, 182, 241, 276, 277], "init_sess": [3, 83, 277], "usual": [3, 10, 11, 12, 16, 18, 36, 38, 46, 54, 55, 56, 73, 80, 82, 91, 128, 154, 166, 173, 183, 185, 186, 189, 190, 192, 193, 195, 201, 202, 203, 209, 212, 218, 221, 222, 223, 227, 228, 235, 237, 241, 247, 255, 267, 270, 273, 277, 278], "flag": [3, 4, 14, 20, 35, 37, 46, 47, 51, 53, 55, 68, 70, 82, 85, 86, 87, 91, 95, 112, 118, 152, 188, 193, 195, 198, 199, 202, 203, 204, 210, 214, 215, 218, 220, 221, 228, 233, 234, 240, 243, 267, 278], "auto_symbol": [3, 83, 97], "auto_int_to_integ": [3, 83], "qt": 3, "consol": [3, 4, 12, 55, 83, 182, 188, 277], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 22, 25, 30, 31, 32, 33, 34, 35, 47, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 68, 70, 71, 75, 78, 79, 80, 82, 83, 86, 89, 90, 91, 94, 95, 96, 98, 105, 106, 108, 109, 110, 112, 114, 115, 118, 122, 128, 129, 130, 131, 132, 133, 135, 136, 143, 147, 151, 152, 156, 157, 160, 163, 165, 166, 167, 168, 170, 171, 173, 175, 177, 178, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 197, 198, 199, 202, 203, 205, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 241, 243, 247, 248, 250, 252, 253, 254, 255, 259, 260, 261, 265, 268, 269, 270, 271, 272, 274, 277, 278, 279], "mathjax": [3, 7, 83, 182, 277], "preview": [3, 36, 236, 265], "save": [3, 11, 35, 55, 91, 95, 188, 201, 220, 237], "viewer": [3, 7, 36, 202, 236], "parser": [3, 88, 97, 128, 135, 233], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 45, 47, 55, 56, 58, 60, 61, 63, 67, 71, 75, 78, 81, 82, 83, 85, 88, 89, 90, 91, 96, 97, 98, 100, 101, 103, 106, 109, 118, 119, 124, 128, 130, 131, 135, 137, 140, 142, 143, 155, 158, 171, 172, 173, 174, 183, 186, 188, 193, 194, 196, 199, 200, 202, 206, 209, 212, 216, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 249, 251, 253, 254, 255, 256, 257, 259, 263, 265, 267, 270, 272, 278, 279], "parse_expr": [3, 10, 18, 25, 97], "mathematca": 3, "parse_mathematica": [3, 10, 97], "maxima": [3, 23, 97, 221], "parse_maxima": [3, 97], "antlr": [3, 97, 118], "runtim": [3, 11, 37, 55, 114, 265], "autolev": [3, 120, 128], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 44, 45, 46, 47, 53, 55, 56, 58, 59, 60, 62, 63, 65, 70, 71, 73, 78, 80, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 97, 98, 99, 105, 109, 118, 120, 122, 129, 132, 133, 158, 160, 163, 168, 173, 178, 183, 185, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 209, 210, 212, 214, 215, 217, 218, 220, 221, 222, 224, 226, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 247, 249, 250, 253, 255, 268, 270, 272, 273, 274, 277, 278, 279], "antlr4": [3, 97], "awar": [3, 4, 6, 11, 12, 19, 35, 55, 59, 85, 91, 212, 222, 241], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 29, 30, 31, 32, 37, 46, 47, 49, 51, 53, 54, 55, 56, 57, 60, 61, 63, 65, 68, 71, 74, 77, 78, 80, 82, 85, 86, 87, 88, 91, 94, 95, 98, 99, 101, 103, 105, 106, 113, 114, 118, 120, 128, 130, 131, 132, 133, 135, 148, 163, 165, 168, 177, 178, 186, 187, 188, 189, 190, 193, 195, 197, 198, 202, 203, 210, 211, 212, 214, 215, 218, 220, 221, 222, 226, 227, 233, 234, 235, 236, 237, 238, 240, 241, 244, 270, 272, 273, 277, 278], "match": [3, 4, 6, 10, 12, 18, 20, 46, 47, 54, 55, 63, 68, 80, 82, 86, 91, 117, 144, 169, 177, 178, 191, 198, 214, 215, 218, 219, 220, 222, 231, 233, 235, 240, 241, 252, 268], "wa": [3, 4, 10, 12, 14, 18, 20, 44, 46, 47, 49, 55, 56, 57, 63, 68, 91, 95, 97, 109, 110, 118, 120, 122, 132, 133, 163, 173, 185, 186, 187, 189, 195, 197, 198, 199, 201, 202, 211, 212, 214, 218, 220, 222, 231, 233, 236, 238, 240, 241, 268, 270, 272, 273, 276], "compil": [3, 37, 83, 96, 109, 135, 182, 202, 214, 227, 233, 234, 235, 257, 272], "4": [3, 7, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 29, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 105, 106, 107, 111, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 140, 144, 147, 152, 162, 163, 165, 166, 167, 168, 169, 171, 177, 178, 179, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 233, 234, 237, 240, 241, 247, 249, 250, 251, 253, 255, 256, 267, 268, 270, 272, 273, 274, 278, 279], "clang": [3, 97], "bind": [3, 37, 202, 234], "parse_c": 3, "lfortran": [3, 97], "fortran": [3, 11, 16, 20, 35, 96, 97, 109, 135, 187, 235, 259, 265, 277], "satisfi": [3, 7, 10, 18, 23, 32, 33, 35, 38, 43, 46, 51, 55, 56, 60, 63, 65, 78, 80, 84, 85, 91, 95, 114, 132, 152, 157, 189, 190, 195, 197, 198, 202, 208, 209, 210, 215, 218, 219, 220, 221, 222, 228, 273, 278], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 23, 24, 25, 26, 29, 30, 31, 32, 35, 36, 37, 38, 40, 45, 46, 47, 52, 55, 56, 58, 60, 61, 63, 66, 68, 75, 76, 78, 79, 81, 82, 85, 86, 87, 91, 95, 96, 97, 109, 118, 128, 137, 139, 140, 143, 152, 153, 161, 162, 164, 172, 177, 179, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 206, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 226, 227, 237, 239, 240, 241, 244, 254, 257, 265, 268, 272, 278], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 25, 54, 55, 63, 69, 79, 86, 91, 95, 156, 157, 168, 173, 178, 189, 190, 195, 199, 209, 211, 212, 214, 215, 218, 220, 221, 227, 237, 240, 241, 249, 268, 270, 272, 273, 278], "sat": [3, 31], "solver": [3, 6, 11, 24, 31, 63, 91, 95, 117, 128, 135, 136, 191, 194, 202, 214, 215, 219, 233, 257, 258, 269, 271], "ask": [3, 6, 11, 12, 15, 18, 19, 31, 32, 33, 34, 55, 67, 80, 118, 173, 189, 208, 214, 221, 240, 270], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 55, 59, 61, 65, 71, 80, 82, 85, 98, 99, 101, 110, 112, 113, 117, 120, 122, 123, 124, 125, 128, 130, 131, 132, 135, 156, 157, 171, 183, 186, 188, 190, 192, 211, 214, 215, 220, 233, 253, 255, 277, 278], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 222, 273], "primarili": [3, 11, 18, 37, 55, 61, 95, 98, 167, 198, 200, 234, 237, 243, 250], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 24, 27, 29, 30, 31, 32, 35, 36, 37, 47, 55, 59, 62, 63, 65, 79, 82, 88, 91, 95, 96, 97, 98, 99, 101, 102, 105, 109, 118, 135, 163, 178, 185, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 207, 208, 209, 210, 214, 218, 219, 220, 221, 222, 223, 227, 231, 233, 234, 235, 241, 251, 253, 268, 270, 273, 277], "give": [3, 4, 6, 12, 14, 18, 19, 20, 23, 24, 25, 30, 32, 37, 38, 44, 46, 47, 48, 49, 54, 55, 56, 57, 60, 61, 63, 65, 67, 68, 70, 71, 79, 80, 82, 83, 85, 88, 91, 94, 95, 96, 98, 101, 105, 112, 118, 135, 147, 162, 163, 165, 166, 170, 171, 173, 174, 176, 178, 181, 183, 185, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 202, 203, 204, 205, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 233, 234, 235, 240, 250, 255, 270, 271, 273, 278, 279], "rudimentari": [3, 20, 195], "text": [3, 4, 6, 7, 11, 20, 27, 37, 46, 56, 60, 61, 63, 73, 80, 83, 86, 91, 95, 133, 173, 182, 187, 188, 189, 202, 209, 215, 218, 221, 222, 233], "pyglet": [3, 202, 264], "pygletplot": [3, 188], "2d": [3, 10, 68, 69, 71, 81, 98, 99, 101, 146, 178, 188, 202, 215, 227, 272], "3d": [3, 10, 29, 39, 68, 69, 98, 146, 169, 183, 188, 250, 252, 253, 254, 255], "evalu": [3, 6, 11, 16, 18, 19, 22, 25, 30, 31, 32, 35, 37, 55, 57, 60, 61, 63, 66, 70, 71, 75, 80, 82, 85, 88, 91, 95, 96, 97, 105, 109, 111, 118, 128, 132, 133, 143, 145, 147, 149, 154, 157, 165, 168, 187, 188, 192, 193, 195, 196, 198, 202, 203, 208, 209, 210, 212, 214, 215, 218, 220, 221, 222, 224, 234, 235, 236, 241, 253, 258, 267, 268, 269, 270, 272, 274], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 22, 23, 33, 35, 37, 54, 55, 60, 63, 67, 71, 75, 78, 91, 95, 97, 101, 102, 103, 105, 112, 113, 114, 118, 120, 128, 132, 136, 140, 147, 150, 165, 172, 177, 186, 188, 192, 193, 195, 196, 197, 198, 201, 202, 211, 212, 214, 218, 220, 221, 227, 233, 234, 240, 241, 258, 267, 270, 274, 278], "variou": [3, 6, 7, 11, 16, 20, 35, 37, 39, 46, 54, 55, 60, 75, 80, 82, 85, 115, 147, 151, 152, 163, 165, 177, 189, 190, 193, 194, 195, 197, 203, 209, 212, 215, 218, 219, 221, 235, 278], "primari": [3, 4, 6, 7, 18, 20, 55, 67, 85, 186, 189, 235, 241], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 23, 36, 37, 45, 46, 47, 49, 53, 55, 57, 60, 63, 65, 67, 68, 69, 70, 71, 72, 82, 84, 85, 88, 89, 91, 95, 96, 97, 101, 102, 103, 105, 112, 115, 117, 118, 121, 125, 127, 129, 132, 133, 135, 136, 137, 140, 141, 147, 154, 156, 157, 158, 162, 165, 166, 167, 168, 171, 172, 173, 178, 179, 180, 181, 183, 185, 186, 188, 189, 191, 194, 195, 197, 198, 202, 204, 214, 218, 219, 220, 221, 222, 223, 236, 241, 247, 249, 250, 253, 255, 270], "standard": [3, 7, 10, 11, 12, 18, 20, 23, 25, 37, 55, 59, 61, 63, 78, 80, 82, 83, 84, 85, 89, 91, 95, 96, 97, 108, 145, 149, 178, 183, 187, 189, 192, 193, 195, 202, 205, 210, 214, 215, 218, 221, 222, 235, 241, 244, 250, 255, 267, 270, 278], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 23, 28, 36, 38, 39, 44, 46, 47, 48, 51, 55, 57, 60, 63, 71, 75, 79, 80, 82, 84, 88, 91, 94, 95, 97, 98, 101, 109, 113, 115, 117, 118, 122, 124, 125, 128, 132, 148, 162, 165, 166, 171, 173, 176, 177, 178, 180, 181, 183, 185, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 209, 212, 214, 215, 218, 219, 221, 223, 224, 227, 228, 231, 235, 237, 240, 241, 244, 247, 250, 251, 252, 253, 255, 267, 268, 270, 271, 272, 273, 278, 279], "principl": [3, 56, 86, 95, 139, 187, 189, 190, 195, 211, 220], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 24, 25, 28, 29, 32, 35, 36, 37, 46, 47, 55, 56, 57, 59, 61, 62, 63, 65, 68, 69, 71, 82, 83, 85, 86, 88, 91, 92, 95, 97, 98, 103, 105, 110, 117, 118, 122, 135, 136, 140, 157, 158, 162, 163, 165, 166, 178, 182, 188, 189, 191, 192, 193, 195, 197, 198, 200, 202, 203, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 238, 240, 241, 243, 246, 247, 267, 268, 273, 277, 278, 279], "appropri": [3, 6, 7, 12, 16, 23, 46, 55, 61, 70, 91, 109, 120, 157, 158, 168, 178, 185, 191, 192, 198, 199, 202, 208, 209, 214, 215, 220, 222, 227, 235, 251, 277], "namespac": [3, 6, 10, 28, 37, 38, 55, 193, 215, 218, 219, 233, 235, 236, 241], "dictionari": [3, 10, 11, 25, 36, 37, 44, 46, 47, 53, 55, 60, 69, 71, 84, 86, 91, 94, 95, 97, 98, 111, 113, 114, 117, 118, 120, 122, 125, 130, 132, 158, 168, 178, 186, 188, 190, 193, 195, 197, 198, 200, 202, 209, 214, 215, 218, 219, 220, 221, 222, 226, 228, 233, 237, 240, 241, 247, 267, 274], "third": [3, 4, 14, 37, 46, 47, 55, 63, 65, 69, 105, 112, 165, 171, 185, 190, 198, 212, 218, 221, 222, 238, 240, 254, 268, 273], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 46, 47, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 68, 71, 72, 80, 82, 83, 85, 86, 88, 91, 94, 95, 97, 98, 103, 105, 112, 113, 117, 118, 130, 131, 135, 142, 145, 149, 151, 154, 157, 162, 163, 165, 166, 167, 168, 176, 182, 183, 187, 188, 189, 190, 192, 193, 195, 197, 198, 201, 202, 203, 204, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 226, 227, 233, 234, 235, 236, 237, 238, 240, 241, 243, 250, 251, 253, 267, 268, 273, 274, 278], "default": [3, 4, 6, 7, 11, 12, 18, 20, 23, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 45, 46, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 77, 82, 83, 85, 86, 88, 91, 92, 95, 96, 97, 98, 99, 101, 103, 105, 107, 109, 110, 111, 112, 113, 114, 118, 132, 141, 158, 160, 163, 165, 166, 168, 174, 177, 178, 180, 181, 182, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 227, 228, 233, 234, 235, 237, 238, 240, 241, 243, 247, 267, 268, 272, 274, 277, 278], "translat": [3, 10, 37, 46, 55, 64, 66, 67, 70, 72, 96, 97, 105, 108, 112, 113, 125, 127, 129, 133, 185, 188, 202, 218, 220, 234, 235, 239, 241, 243, 251], "numpi": [3, 6, 10, 11, 20, 24, 27, 37, 55, 78, 83, 90, 96, 103, 118, 135, 152, 162, 191, 202, 222, 227, 234, 235, 241, 267, 270], "By": [3, 12, 18, 20, 23, 30, 32, 37, 45, 54, 55, 57, 59, 60, 63, 69, 70, 74, 78, 80, 85, 86, 91, 94, 95, 96, 97, 98, 99, 103, 110, 163, 168, 188, 190, 192, 193, 195, 197, 198, 199, 201, 202, 204, 209, 211, 214, 215, 218, 220, 221, 222, 226, 228, 229, 233, 236, 240, 241, 253, 267, 272, 273, 278], "produc": [3, 6, 7, 11, 19, 20, 24, 25, 36, 46, 55, 56, 68, 82, 85, 91, 178, 192, 197, 198, 202, 209, 218, 219, 220, 222, 231, 233, 237, 238, 240, 277], "behavior": [3, 4, 10, 11, 12, 20, 46, 55, 60, 63, 82, 97, 108, 109, 128, 132, 163, 189, 190, 197, 198, 202, 203, 207, 209, 211, 214, 231, 234, 236, 240, 241, 270], "backward": [3, 8, 16, 35, 55, 86, 91, 202, 240, 278], "scipi": [3, 11, 37, 55, 63, 109, 135, 162, 202, 222, 234, 241, 267, 276], "special": [3, 6, 11, 13, 18, 20, 25, 28, 29, 47, 55, 56, 58, 59, 60, 62, 70, 73, 80, 82, 86, 91, 135, 152, 157, 183, 189, 192, 194, 195, 196, 197, 202, 211, 212, 214, 217, 218, 219, 220, 222, 233, 234, 235, 238, 240, 241, 250, 253, 255, 259, 260, 268, 269, 273], "cupi": [3, 96], "cuda": [3, 96], "gpu": [3, 96, 135], "jax": [3, 96, 241], "xla": [3, 96], "program": [3, 7, 12, 18, 37, 39, 47, 135, 173, 187, 235, 237, 259, 270, 272, 276, 278], "tpu": [3, 96], "compatibli": 3, "tensorflow": [3, 241], "learn": [3, 5, 7, 22, 25, 91, 133, 186, 211, 221, 267, 270, 271, 272, 276], "numexpr": [3, 241], "fast": [3, 18, 37, 55, 82, 90, 91, 95, 140, 193, 194, 195, 196, 197, 198, 199, 205, 209, 218, 220, 237, 240, 241], "alreadi": [3, 4, 10, 12, 18, 20, 23, 25, 27, 46, 47, 55, 56, 64, 65, 68, 69, 71, 80, 82, 86, 92, 95, 101, 106, 110, 118, 132, 137, 163, 165, 168, 183, 185, 186, 188, 191, 192, 195, 197, 201, 205, 211, 212, 214, 218, 221, 222, 228, 251, 253, 268, 270, 271, 272, 276, 277, 278, 279], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 23, 25, 29, 31, 32, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 61, 63, 65, 68, 69, 70, 71, 72, 74, 81, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 96, 97, 99, 101, 103, 105, 106, 107, 109, 113, 114, 117, 118, 122, 132, 133, 135, 141, 144, 147, 148, 151, 152, 153, 154, 156, 157, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 176, 177, 178, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 202, 204, 208, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 223, 227, 228, 233, 235, 237, 240, 243, 247, 249, 250, 252, 253, 255, 258, 267, 268, 270, 272, 273, 274, 278], "languag": [3, 7, 11, 12, 16, 20, 37, 61, 91, 97, 109, 118, 135, 202, 207, 222, 234, 235, 270, 272, 274, 276, 278], "valid": [3, 6, 7, 10, 18, 19, 20, 30, 32, 34, 35, 36, 37, 48, 54, 55, 60, 61, 71, 81, 91, 95, 111, 112, 113, 118, 120, 133, 137, 141, 160, 165, 175, 178, 182, 186, 192, 195, 198, 201, 202, 210, 214, 215, 218, 220, 221, 222, 241, 274, 278], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 28, 33, 37, 38, 46, 47, 48, 55, 59, 61, 66, 71, 73, 80, 85, 86, 88, 91, 95, 97, 117, 125, 135, 148, 162, 166, 168, 177, 185, 189, 192, 195, 198, 200, 205, 212, 215, 217, 218, 221, 222, 237, 240, 241, 244, 255, 270, 272, 273], "string": [3, 4, 6, 7, 11, 12, 20, 30, 36, 37, 39, 44, 55, 56, 57, 58, 59, 62, 68, 78, 83, 84, 85, 88, 91, 95, 97, 98, 101, 103, 109, 110, 112, 115, 139, 148, 152, 162, 166, 170, 176, 177, 178, 181, 182, 183, 188, 191, 193, 197, 202, 203, 209, 214, 218, 222, 223, 226, 227, 228, 233, 234, 235, 240, 241, 243, 245, 247, 248, 250, 259, 269, 270, 273, 277], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 29, 31, 33, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 54, 55, 56, 57, 60, 61, 63, 65, 66, 68, 70, 71, 72, 77, 78, 81, 82, 84, 85, 86, 88, 91, 95, 97, 98, 99, 102, 103, 105, 110, 112, 113, 115, 117, 118, 120, 121, 122, 123, 126, 128, 130, 131, 132, 133, 135, 137, 139, 140, 142, 154, 155, 157, 161, 162, 165, 166, 168, 170, 173, 174, 175, 176, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 200, 202, 204, 205, 208, 209, 210, 212, 214, 215, 218, 220, 221, 222, 224, 226, 227, 228, 235, 237, 240, 241, 247, 249, 253, 255, 268, 270, 272, 273, 278, 279], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 23, 32, 35, 37, 38, 40, 45, 46, 50, 54, 55, 56, 57, 61, 63, 67, 68, 78, 82, 84, 85, 86, 91, 95, 96, 97, 98, 101, 105, 109, 112, 113, 115, 117, 118, 120, 132, 133, 135, 137, 151, 154, 157, 158, 162, 164, 165, 166, 167, 168, 170, 173, 176, 177, 178, 179, 180, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 198, 199, 202, 205, 208, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 224, 227, 233, 234, 236, 237, 240, 241, 247, 248, 249, 267, 268, 270, 272, 273, 274, 278], "within": [3, 7, 10, 11, 18, 24, 35, 36, 37, 55, 61, 68, 71, 85, 86, 88, 95, 96, 98, 125, 163, 177, 178, 185, 186, 190, 192, 198, 200, 210, 218, 220, 221, 222, 233, 234, 243], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 23, 24, 25, 35, 36, 37, 38, 40, 43, 46, 47, 51, 54, 55, 56, 57, 59, 60, 61, 63, 67, 70, 71, 72, 73, 77, 80, 82, 85, 86, 88, 91, 92, 95, 96, 97, 99, 105, 109, 112, 113, 118, 120, 121, 122, 123, 129, 131, 133, 135, 141, 152, 158, 163, 165, 167, 168, 173, 174, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 228, 231, 233, 235, 236, 238, 240, 241, 242, 243, 244, 247, 249, 250, 268, 272, 273, 274, 277, 278, 279], "subpackag": [3, 257], "f2py": [3, 37, 96, 234, 235], "ufuncifi": [3, 37, 234, 258], "cython": [3, 37, 96, 135, 234], "codegen": [3, 20, 96, 202, 234, 239, 259, 265], "relat": [3, 4, 6, 7, 11, 19, 30, 32, 33, 35, 38, 39, 45, 46, 53, 57, 60, 61, 62, 71, 77, 80, 82, 86, 91, 95, 101, 108, 122, 125, 128, 129, 135, 137, 142, 150, 152, 178, 181, 184, 185, 187, 188, 189, 195, 197, 198, 199, 201, 202, 206, 208, 209, 212, 214, 215, 217, 218, 220, 221, 222, 240, 254, 258, 260, 278], "reli": [3, 10, 12, 37, 91, 96, 102, 195, 201, 202, 209, 214, 221, 236, 241, 274], "llvm": 3, "gcc": [3, 235], "ifort": 3, "therefor": [3, 4, 6, 20, 23, 38, 46, 51, 55, 59, 63, 71, 84, 95, 105, 112, 183, 186, 187, 188, 192, 195, 198, 202, 218, 221, 222, 223, 228, 247, 248, 250, 251, 253, 255], "aesara": [3, 10, 37, 135, 258, 265], "aesaracod": [3, 10, 37, 96, 202], "aeseara": 3, "previous": [3, 4, 10, 54, 112, 126, 129, 183, 201, 214, 222, 253], "theano": [3, 10, 135, 277], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 84, 85, 86, 87, 88, 91, 92, 94, 95, 97, 98, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 126, 130, 132, 133, 135, 137, 139, 140, 141, 142, 144, 145, 149, 152, 153, 154, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 247, 249, 251, 253, 259, 267, 268, 273, 274, 277, 278, 279], "graph": [3, 6, 11, 47, 63, 84, 91, 96, 191, 202, 221, 240, 273, 277], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 54, 55, 57, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 80, 82, 85, 86, 88, 89, 91, 96, 97, 98, 99, 103, 105, 106, 109, 110, 112, 113, 114, 115, 117, 118, 122, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 141, 142, 143, 151, 152, 154, 162, 163, 167, 168, 170, 171, 174, 175, 177, 178, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 202, 204, 205, 208, 209, 210, 211, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 233, 234, 235, 236, 237, 240, 241, 244, 245, 249, 250, 251, 256, 257, 267, 268, 270, 272, 273, 274, 277, 278], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 211], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 27, 35, 44, 47, 55, 56, 57, 59, 61, 64, 71, 75, 94, 95, 101, 110, 112, 128, 132, 136, 186, 192, 195, 197, 202, 204, 209, 213, 215, 218, 221, 222, 233, 247, 248, 268, 270, 272], "llvm_callabl": 3, "callabl": [3, 12, 37, 46, 91, 97, 153, 197, 202, 203, 214, 231, 234, 235, 240, 241, 242], "unlik": [3, 6, 11, 12, 18, 19, 34, 56, 82, 91, 95, 97, 118, 185, 195, 202, 215, 218, 221, 237, 238, 270, 272, 273, 274, 277], "two": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 29, 35, 36, 37, 38, 40, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 80, 82, 84, 85, 86, 88, 91, 95, 96, 98, 99, 101, 102, 105, 106, 109, 110, 112, 113, 121, 126, 128, 129, 130, 132, 133, 140, 141, 142, 147, 148, 152, 154, 157, 158, 163, 164, 165, 166, 167, 168, 170, 173, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 227, 237, 240, 241, 247, 249, 251, 252, 253, 255, 267, 268, 271, 273, 274, 278], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 32, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 63, 65, 68, 71, 72, 74, 77, 80, 82, 83, 84, 85, 86, 91, 92, 95, 96, 97, 98, 99, 105, 106, 109, 112, 113, 117, 118, 119, 120, 121, 129, 130, 131, 132, 133, 141, 145, 149, 152, 162, 163, 164, 165, 166, 167, 168, 173, 177, 178, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 201, 202, 203, 204, 205, 206, 208, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 228, 229, 233, 234, 235, 237, 240, 241, 243, 247, 248, 250, 251, 256, 268, 270, 271, 273, 277, 278, 279], "assum": [3, 6, 11, 12, 15, 18, 20, 23, 32, 37, 38, 39, 44, 46, 54, 55, 56, 57, 60, 61, 63, 65, 72, 73, 80, 82, 91, 95, 98, 101, 105, 117, 118, 124, 130, 131, 132, 133, 135, 141, 163, 167, 168, 178, 181, 183, 189, 190, 192, 195, 198, 200, 202, 209, 210, 212, 214, 215, 218, 219, 221, 222, 226, 227, 228, 235, 240, 243, 249, 251, 255, 271, 273, 276, 278, 279], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 33, 36, 37, 38, 39, 46, 48, 51, 54, 55, 56, 59, 61, 63, 65, 66, 67, 80, 83, 85, 86, 88, 89, 91, 95, 96, 97, 99, 113, 118, 120, 128, 132, 133, 135, 140, 152, 168, 172, 173, 174, 186, 188, 189, 192, 193, 195, 197, 198, 199, 202, 207, 209, 210, 211, 214, 215, 218, 220, 221, 222, 223, 227, 233, 236, 238, 240, 241, 251, 270, 273], "captur": [3, 55, 240], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 23, 25, 36, 37, 55, 56, 63, 79, 82, 83, 85, 86, 88, 91, 95, 96, 97, 102, 105, 113, 117, 118, 126, 132, 135, 136, 140, 141, 152, 164, 168, 177, 178, 181, 182, 183, 186, 192, 195, 198, 202, 203, 212, 214, 215, 216, 217, 218, 220, 222, 227, 233, 234, 235, 237, 240, 241, 247, 270, 272, 273, 274, 277, 278, 279], "suit": [3, 4, 7, 18, 20, 23, 36, 188, 198, 231, 233], "stat": [3, 257, 264], "sampl": [3, 8, 16, 46, 58, 103, 152, 188, 202, 222, 268, 272], "At": [3, 10, 18, 20, 23, 35, 51, 61, 63, 82, 95, 98, 99, 109, 173, 177, 186, 197, 212, 241], "least": [3, 4, 7, 10, 14, 18, 33, 35, 37, 46, 55, 61, 67, 79, 80, 82, 91, 95, 96, 113, 148, 162, 170, 189, 190, 192, 193, 195, 197, 198, 209, 211, 214, 218, 220, 221, 222, 235, 278], "random": [3, 6, 10, 39, 44, 46, 47, 53, 56, 65, 68, 69, 90, 91, 95, 152, 164, 188, 195, 202, 232, 233, 236, 240, 258, 264, 270, 274, 278], "pymc": [3, 222], "manipul": [3, 11, 15, 16, 18, 36, 37, 38, 46, 55, 61, 63, 80, 90, 95, 96, 118, 128, 133, 166, 185, 191, 192, 193, 196, 201, 202, 204, 211, 214, 216, 225, 240, 257, 260, 264, 267, 268, 269, 270, 271, 272, 274, 277, 278], "use_symengin": 3, "physic": [3, 6, 16, 37, 48, 91, 95, 98, 99, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 187, 196, 222, 237, 240, 253, 272, 278], "mechan": [3, 20, 55, 78, 82, 98, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 150, 154, 157, 163, 165, 166, 167, 170, 177, 178, 184, 187, 263, 264], "liealgebra": [3, 84], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 26, 33, 37, 45, 46, 47, 55, 57, 67, 83, 84, 85, 86, 91, 96, 109, 115, 118, 132, 135, 152, 168, 173, 185, 186, 199, 201, 209, 210, 211, 214, 218, 221, 226, 236, 238, 240, 267, 268, 270, 272, 273, 274, 277, 278], "configur": [3, 4, 5, 10, 47, 85, 105, 112, 113, 121, 122, 125, 127, 128, 130, 132, 194, 202], "otherwis": [3, 4, 14, 18, 19, 20, 35, 36, 37, 46, 47, 51, 54, 55, 56, 59, 61, 63, 64, 65, 68, 69, 70, 71, 80, 82, 84, 85, 87, 91, 94, 95, 97, 103, 105, 107, 110, 117, 118, 153, 158, 164, 181, 184, 185, 189, 193, 195, 197, 198, 200, 202, 204, 205, 207, 208, 210, 214, 215, 218, 219, 220, 221, 222, 223, 231, 233, 235, 240, 241, 267, 268, 277], "ordinari": [3, 18, 19, 22, 35, 37, 46, 55, 59, 60, 61, 63, 73, 77, 78, 82, 92, 105, 128, 189, 191, 192, 201, 208, 216, 218, 223, 237, 272, 278], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 44, 46, 47, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 101, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 140, 142, 143, 144, 145, 146, 148, 149, 152, 155, 157, 158, 163, 165, 166, 167, 168, 169, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 233, 234, 235, 236, 238, 240, 241, 243, 247, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 27, 28, 36, 47, 54, 55, 56, 63, 67, 82, 86, 91, 118, 168, 186, 188, 189, 190, 195, 197, 202, 209, 211, 212, 214, 218, 220, 221, 227, 233, 240, 253, 274], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 55, 80, 82, 85, 86, 97, 162, 192, 212, 214, 218, 220, 268, 273], "anywher": [3, 4, 6, 10, 18, 37, 55, 63, 69, 168, 243, 272], "els": [3, 4, 10, 11, 12, 18, 19, 20, 37, 45, 47, 51, 55, 56, 63, 65, 69, 71, 72, 80, 82, 85, 91, 95, 105, 168, 178, 188, 193, 197, 198, 202, 203, 210, 214, 218, 220, 221, 226, 228, 233, 240, 243, 247, 249, 267, 273], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 23, 24, 25, 26, 31, 32, 35, 37, 38, 41, 45, 47, 54, 55, 56, 57, 60, 61, 62, 63, 68, 69, 80, 82, 85, 88, 91, 95, 96, 97, 105, 106, 109, 122, 134, 173, 183, 185, 186, 189, 190, 192, 193, 196, 201, 202, 210, 211, 215, 218, 221, 222, 227, 234, 235, 241, 247, 250, 253, 255, 267, 270, 271, 272, 273, 276, 278], "softwar": [3, 7, 82, 196, 272], "itself": [3, 4, 6, 7, 10, 11, 20, 33, 44, 46, 47, 53, 55, 57, 60, 61, 68, 72, 77, 95, 113, 117, 118, 133, 158, 165, 183, 185, 188, 189, 192, 195, 197, 198, 202, 210, 211, 214, 221, 226, 227, 228, 235, 237, 240, 255, 272], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 25, 29, 31, 36, 37, 38, 43, 46, 50, 53, 54, 58, 61, 71, 73, 78, 79, 80, 85, 86, 89, 90, 92, 105, 112, 118, 130, 131, 133, 135, 136, 142, 152, 166, 173, 176, 183, 184, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 202, 203, 209, 214, 215, 218, 219, 220, 221, 222, 233, 235, 240, 241, 245, 252, 253, 254, 260, 268, 269, 270, 271, 276], "beyond": [3, 18, 49, 71, 95, 132, 189, 192, 211, 214, 274], "control": [3, 5, 10, 12, 14, 18, 20, 36, 38, 55, 56, 59, 80, 85, 86, 132, 135, 148, 152, 155, 163, 164, 168, 172, 198, 199, 203, 210, 215, 221, 240, 263, 264, 267], "pytest": [3, 4, 10, 230, 236, 238, 241, 265], "entir": [3, 4, 18, 46, 55, 56, 59, 60, 63, 69, 71, 80, 94, 111, 129, 133, 178, 189, 191, 197, 210, 227, 236, 238, 272, 278], "import_modul": 3, "own": [3, 5, 6, 12, 20, 31, 39, 46, 47, 55, 71, 99, 112, 118, 135, 197, 202, 209, 214, 218, 237, 240, 241, 272], "runner": [3, 233], "access": [3, 6, 7, 11, 12, 18, 20, 30, 31, 32, 37, 55, 63, 84, 85, 88, 91, 96, 99, 105, 106, 112, 113, 117, 118, 136, 177, 178, 183, 186, 188, 192, 193, 195, 197, 214, 218, 222, 223, 226, 234, 235, 250, 253, 273, 277], "script": [3, 5, 6, 11, 28, 63, 182, 234], "cloudpickl": 3, "effect": [3, 6, 10, 20, 24, 27, 46, 48, 55, 72, 80, 82, 86, 91, 98, 118, 120, 132, 140, 168, 178, 188, 192, 195, 199, 201, 218, 270], "pickl": 3, "util": [3, 4, 5, 6, 7, 23, 35, 42, 44, 46, 47, 60, 61, 66, 67, 68, 71, 85, 86, 90, 95, 96, 138, 172, 175, 191, 194, 195, 199, 202, 214, 215, 216, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 259, 263], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 27, 36, 55, 66, 80, 82, 91, 146, 148, 188, 191, 193, 199, 202, 209, 212, 218, 219, 228, 231, 233, 238, 241], "pdf": [3, 7, 8, 26, 35, 36, 46, 56, 58, 60, 77, 82, 91, 95, 98, 99, 103, 188, 196, 201, 202, 205, 211, 214, 215, 218, 222, 240, 247], "view": [3, 6, 8, 11, 25, 37, 38, 55, 91, 98, 170, 173, 186, 188, 195, 202, 218, 221, 235, 237, 240], "host": [3, 7], "onlin": [3, 6, 113, 215, 240], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 25, 37, 120, 236, 268], "reproduc": [3, 198, 233, 278], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 29, 31, 32, 35, 37, 44, 46, 51, 56, 59, 62, 70, 72, 80, 84, 88, 91, 95, 98, 101, 110, 118, 135, 146, 152, 162, 167, 168, 171, 185, 186, 188, 191, 192, 193, 195, 197, 198, 199, 202, 203, 212, 214, 215, 218, 219, 221, 222, 224, 226, 227, 228, 236, 241, 245, 258, 268, 270, 273, 277, 278], "asv": 3, "airspe": 3, "veloc": [3, 109, 110, 112, 113, 115, 120, 121, 122, 125, 126, 127, 129, 132, 133, 135, 142, 170, 173, 177, 178, 181, 183, 186, 253, 255], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 36, 38, 45, 46, 47, 49, 50, 53, 54, 55, 56, 60, 63, 65, 70, 71, 80, 82, 86, 91, 94, 95, 105, 109, 112, 113, 115, 117, 118, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 147, 168, 172, 173, 177, 178, 183, 185, 186, 189, 192, 195, 197, 203, 209, 212, 214, 215, 218, 221, 222, 226, 235, 240, 241, 247, 248, 253, 268], "properli": [4, 11, 20, 36, 55, 61, 67, 80, 91, 114, 118, 130, 145, 149, 152, 166, 190, 192, 202, 218, 221, 231, 235, 241, 274, 279], "current": [4, 7, 10, 12, 18, 29, 32, 35, 36, 37, 38, 39, 46, 49, 50, 52, 53, 54, 55, 57, 61, 63, 65, 67, 70, 75, 78, 80, 82, 84, 86, 91, 95, 97, 98, 102, 109, 112, 118, 128, 162, 167, 168, 172, 176, 186, 188, 189, 190, 191, 193, 195, 198, 199, 201, 202, 203, 209, 212, 214, 215, 217, 218, 219, 220, 221, 222, 228, 233, 234, 235, 237, 250, 274, 279], "activ": [4, 5, 13, 120, 188, 231, 236, 238], "updat": [4, 10, 12, 27, 55, 122, 148, 155, 158, 161, 162, 164, 187, 195, 198, 202, 215, 228, 238], "continu": [4, 6, 7, 10, 16, 19, 20, 35, 37, 45, 47, 49, 55, 60, 61, 63, 80, 83, 86, 95, 102, 103, 163, 166, 182, 193, 195, 198, 215, 217, 218, 226, 269], "someon": [4, 218, 237, 271], "warn": [4, 6, 12, 20, 55, 56, 70, 97, 178, 186, 190, 202, 218, 220, 230, 231, 233, 235, 239, 240, 265, 274], "screen": [4, 11, 83, 182, 186, 233, 277], "indic": [4, 6, 12, 15, 18, 23, 35, 36, 37, 38, 39, 44, 46, 47, 48, 50, 51, 53, 54, 55, 58, 59, 60, 63, 65, 70, 71, 80, 82, 85, 86, 88, 91, 94, 95, 106, 117, 122, 152, 163, 165, 166, 168, 173, 177, 178, 187, 191, 192, 193, 197, 198, 199, 202, 209, 210, 211, 213, 214, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 240, 274], "remov": [4, 10, 18, 30, 31, 46, 49, 53, 55, 59, 61, 70, 71, 80, 85, 86, 91, 95, 98, 101, 110, 112, 125, 127, 132, 152, 168, 193, 195, 198, 200, 201, 202, 214, 215, 218, 220, 221, 223, 224, 234, 235, 236, 238, 240, 241, 267, 278], "futur": [4, 12, 18, 19, 37, 38, 55, 80, 82, 86, 91, 97, 112, 117, 120, 128, 132, 168, 172, 184, 188, 190, 201, 202, 214, 218, 227, 233, 236, 238, 241, 264, 273, 279], "chanc": [4, 12, 19, 55, 83, 212, 222, 273], "break": [4, 6, 10, 20, 36, 37, 47, 55, 56, 95, 185, 199, 202, 210, 240], "opportun": [4, 6, 214], "messag": [4, 10, 56, 83, 236, 238], "wrong": [4, 7, 10, 46, 55, 56, 63, 65, 91, 178, 192, 216, 218, 236, 270, 274], "answer": [4, 18, 20, 46, 55, 59, 77, 80, 82, 85, 91, 95, 173, 195, 199, 211, 212, 214, 220, 222, 237, 243, 272, 274, 278], "made": [4, 7, 10, 11, 12, 18, 20, 49, 51, 55, 56, 61, 64, 65, 68, 71, 72, 82, 85, 91, 95, 97, 118, 129, 132, 135, 186, 189, 193, 195, 197, 198, 202, 203, 209, 210, 211, 214, 218, 220, 221, 222, 235, 240, 243, 255, 273], "lightli": 4, "fix": [4, 6, 9, 10, 37, 46, 48, 51, 53, 56, 60, 63, 67, 84, 98, 99, 101, 110, 112, 115, 120, 129, 135, 152, 157, 161, 164, 168, 173, 178, 181, 185, 186, 188, 192, 195, 197, 198, 199, 202, 208, 212, 220, 222, 240, 247, 248], "worth": [4, 18, 20, 178, 251, 253], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 27, 36, 37, 46, 56, 60, 61, 80, 113, 118, 120, 133, 135, 136, 162, 173, 181, 188, 197, 198, 209, 212, 218, 270, 272, 273, 276, 278], "seek": [4, 220], "stabl": [4, 6, 20, 55, 83, 91, 97, 101, 105, 267], "done": [4, 6, 10, 11, 12, 16, 20, 31, 32, 34, 35, 36, 37, 46, 48, 53, 55, 56, 57, 60, 63, 66, 67, 80, 82, 86, 91, 95, 112, 118, 120, 126, 133, 135, 154, 163, 164, 165, 168, 170, 171, 178, 183, 185, 186, 188, 189, 191, 195, 198, 199, 201, 202, 203, 211, 214, 215, 218, 220, 221, 222, 227, 228, 233, 234, 237, 241, 250, 251, 267, 270, 272, 273, 274], "exist": [4, 10, 11, 16, 18, 20, 24, 25, 35, 36, 39, 46, 55, 59, 65, 67, 70, 71, 72, 73, 81, 82, 85, 91, 95, 101, 158, 183, 186, 188, 189, 190, 191, 195, 197, 202, 209, 210, 212, 215, 218, 220, 221, 233, 241, 251, 272, 274, 279], "necessarili": [4, 6, 18, 33, 55, 56, 57, 80, 82, 85, 189, 190, 197, 198, 200, 214, 218, 220, 221], "supplant": 4, "old": [4, 10, 11, 12, 55, 56, 57, 83, 132, 137, 172, 173, 182, 188, 189, 193, 194, 202, 203, 214, 218, 221, 223, 267], "sometim": [4, 6, 7, 11, 12, 18, 20, 36, 37, 55, 60, 63, 79, 80, 105, 128, 132, 160, 168, 186, 189, 192, 197, 202, 204, 209, 211, 215, 218, 220, 231, 240, 267, 274], "alongsid": [4, 10, 20, 88], "newer": [4, 11, 185, 220], "solveset": [4, 20, 24, 25, 135, 200, 216, 217, 220, 279], "superior": [4, 202], "replac": [4, 6, 10, 11, 12, 18, 35, 37, 46, 54, 55, 56, 59, 60, 61, 63, 65, 69, 82, 85, 86, 91, 95, 96, 97, 109, 111, 112, 135, 157, 163, 178, 189, 195, 198, 199, 203, 209, 211, 212, 214, 218, 220, 221, 228, 229, 239, 240, 241, 243, 267, 276], "older": [4, 7, 11, 78, 118, 192, 202, 220], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 37, 39, 51, 54, 55, 63, 68, 80, 82, 86, 87, 91, 98, 100, 101, 112, 113, 114, 118, 121, 122, 125, 127, 128, 130, 132, 135, 171, 191, 194, 195, 199, 200, 201, 202, 204, 214, 215, 216, 217, 218, 219, 222, 263, 268, 269, 272, 274, 277], "remain": [4, 10, 11, 20, 31, 32, 37, 46, 47, 49, 51, 55, 56, 61, 80, 86, 95, 97, 106, 118, 167, 183, 185, 186, 197, 198, 199, 208, 211, 212, 218, 219, 220, 222, 224, 228, 237, 240, 241, 250, 255, 267, 270, 272, 273, 274], "intact": [4, 10, 37, 234], "cogniz": 4, "properti": [4, 11, 15, 20, 31, 32, 35, 36, 37, 38, 39, 43, 44, 46, 47, 48, 49, 50, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 78, 80, 82, 86, 88, 91, 95, 98, 99, 101, 102, 105, 110, 112, 113, 115, 117, 133, 135, 137, 139, 142, 143, 146, 147, 152, 153, 154, 156, 157, 164, 166, 168, 170, 173, 175, 176, 178, 179, 180, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 201, 204, 205, 208, 209, 210, 212, 215, 218, 221, 222, 227, 228, 233, 235, 236, 247, 249, 250, 251, 253, 255, 274], "attr": [4, 37], "imposs": [4, 6, 10, 11, 20, 55, 192, 211, 218, 219, 231, 270, 278], "later": [4, 10, 16, 37, 46, 80, 85, 86, 109, 114, 115, 120, 122, 123, 130, 132, 133, 135, 142, 177, 185, 192, 195, 201, 202, 203, 212, 214, 218, 237, 250, 267, 268, 270, 272, 273, 278], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 25, 26, 27, 29, 30, 32, 33, 36, 37, 46, 47, 48, 49, 55, 59, 61, 63, 65, 66, 67, 69, 70, 71, 75, 77, 81, 82, 84, 91, 95, 98, 99, 105, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 132, 133, 163, 165, 166, 168, 172, 177, 178, 185, 186, 187, 189, 191, 192, 197, 199, 202, 204, 209, 214, 215, 216, 218, 222, 226, 227, 233, 234, 235, 236, 237, 238, 247, 248, 250, 253, 254, 267, 269, 270, 272, 273, 274, 278], "mark": [4, 6, 7, 103, 141, 153, 215, 231, 236, 238], "explicitli": [4, 10, 11, 18, 20, 37, 46, 47, 55, 56, 58, 61, 63, 68, 72, 88, 91, 96, 105, 118, 177, 178, 188, 190, 192, 193, 195, 198, 202, 214, 218, 220, 238, 270, 274, 277, 279], "privat": [4, 6, 55, 56, 118, 188, 235], "experiment": [4, 214, 265], "With": [4, 12, 19, 27, 37, 54, 55, 59, 80, 95, 121, 122, 123, 129, 131, 132, 141, 165, 168, 186, 188, 189, 190, 192, 193, 200, 201, 202, 209, 214, 223, 240, 272, 273], "being": [4, 7, 10, 11, 12, 14, 18, 19, 33, 35, 37, 46, 47, 53, 54, 55, 56, 60, 61, 63, 65, 67, 68, 71, 72, 80, 85, 86, 91, 92, 95, 98, 99, 101, 109, 117, 118, 120, 132, 133, 135, 136, 164, 173, 180, 183, 185, 186, 187, 188, 189, 191, 192, 197, 198, 199, 201, 202, 211, 212, 214, 215, 218, 219, 220, 221, 222, 228, 231, 237, 238, 240, 241, 243, 247, 251, 255, 272, 274], "decid": [4, 6, 16, 18, 19, 20, 36, 54, 86, 109, 132, 161, 172, 192, 195, 197, 198, 202, 218, 221, 235, 274], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 24, 37, 47, 53, 55, 59, 63, 80, 83, 89, 91, 113, 114, 118, 120, 125, 128, 132, 139, 173, 182, 186, 192, 195, 196, 199, 202, 210, 212, 214, 218, 221, 231, 237, 238, 240, 241, 267, 268, 272, 273, 274], "confus": [4, 7, 10, 11, 18, 55, 60, 85, 141, 186, 190, 198, 221, 267, 268, 270], "unnecessari": [4, 6, 7, 33, 37, 198, 201, 222, 233, 271], "redund": [4, 18, 46, 53, 85, 91, 218, 235], "usabl": [4, 192, 193, 202, 221, 272], "breakag": 4, "serious": 4, "taken": [4, 11, 37, 38, 43, 46, 53, 54, 55, 60, 61, 63, 72, 86, 95, 105, 107, 109, 110, 132, 135, 165, 171, 178, 181, 187, 188, 192, 197, 198, 202, 205, 209, 211, 212, 221, 222, 227, 235, 240, 247], "commun": [4, 7, 27, 187, 218, 220, 222, 274], "inde": [4, 16, 20, 43, 46, 54, 80, 189, 212, 218, 229, 233, 272], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 28, 32, 35, 37, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 68, 69, 71, 82, 91, 95, 96, 98, 99, 103, 105, 106, 109, 110, 112, 113, 118, 122, 125, 127, 128, 129, 131, 133, 139, 141, 142, 145, 149, 154, 157, 162, 163, 165, 166, 171, 173, 175, 177, 178, 179, 185, 186, 188, 191, 192, 195, 196, 197, 198, 202, 204, 212, 214, 215, 218, 220, 221, 222, 223, 224, 240, 241, 247, 249, 250, 251, 263, 267, 272, 273, 274], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 25, 30, 32, 36, 47, 55, 56, 59, 67, 72, 80, 82, 91, 95, 115, 118, 136, 162, 166, 170, 171, 173, 177, 178, 185, 186, 188, 198, 199, 201, 202, 212, 214, 218, 220, 221, 222, 236, 240, 241, 251, 267, 268, 270, 271, 272, 273, 276, 278], "count": [4, 7, 11, 47, 54, 55, 56, 60, 65, 85, 91, 94, 95, 163, 198, 210, 211, 214, 221, 222, 228, 237, 240], "basi": [4, 55, 57, 84, 88, 91, 110, 125, 127, 153, 162, 163, 165, 168, 170, 173, 176, 177, 178, 183, 185, 187, 189, 191, 193, 194, 198, 201, 212, 214, 220, 221, 223, 228, 249, 250, 253, 276], "exact": [4, 10, 11, 12, 18, 20, 24, 33, 54, 55, 56, 59, 65, 70, 77, 80, 82, 86, 91, 98, 135, 162, 192, 193, 195, 198, 209, 214, 218, 220, 233, 243, 270, 272, 277], "rule": [4, 7, 10, 16, 18, 20, 37, 46, 47, 54, 55, 63, 78, 80, 82, 85, 86, 91, 98, 118, 149, 152, 173, 178, 183, 186, 187, 199, 201, 202, 203, 208, 212, 213, 214, 218, 228, 240, 241, 253, 254, 270, 273], "doesn": [4, 6, 10, 12, 20, 37, 79, 118, 122, 132, 135, 186, 190, 199, 201, 211, 214, 221, 279], "constitut": [4, 7, 11, 82, 95, 202], "yet": [4, 5, 12, 18, 20, 30, 32, 35, 36, 59, 82, 132, 148, 189, 192, 193, 197, 199, 201, 210, 218, 221, 268], "fulli": [4, 6, 10, 18, 46, 55, 72, 82, 85, 97, 98, 99, 112, 118, 135, 168, 185, 192, 193, 199, 209, 222, 228, 244], "codifi": 4, "clean": [4, 233], "distinct": [4, 7, 11, 14, 18, 20, 37, 46, 47, 55, 56, 60, 68, 80, 85, 91, 95, 117, 185, 192, 197, 198, 202, 210, 212, 278], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 27, 33, 35, 36, 37, 38, 39, 47, 54, 55, 60, 61, 63, 82, 86, 89, 91, 101, 106, 109, 112, 118, 120, 122, 123, 132, 158, 167, 170, 171, 177, 185, 187, 188, 189, 191, 192, 193, 195, 197, 202, 209, 210, 211, 212, 214, 218, 220, 221, 233, 234, 250, 251, 255, 270, 272, 273, 278], "categor": [4, 91, 189], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 23, 24, 27, 28, 35, 54, 55, 72, 82, 85, 91, 96, 114, 128, 148, 184, 187, 196, 197, 199, 202, 210, 211, 220, 221, 233, 235, 237, 238, 240, 243, 269, 270, 273, 278], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 23, 24, 26, 27, 31, 32, 37, 38, 39, 44, 45, 46, 47, 53, 54, 55, 56, 57, 59, 60, 61, 63, 71, 72, 73, 77, 78, 80, 82, 85, 86, 91, 94, 95, 96, 97, 98, 101, 105, 109, 113, 118, 119, 120, 125, 126, 127, 130, 132, 133, 135, 136, 158, 163, 168, 177, 182, 183, 185, 186, 188, 189, 192, 193, 195, 197, 198, 199, 202, 203, 209, 211, 212, 214, 215, 218, 220, 221, 222, 226, 227, 234, 235, 237, 238, 240, 241, 251, 253, 255, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278], "guidelin": [4, 8, 25, 218], "exhaust": [4, 18, 212, 240, 271], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 27, 29, 36, 46, 47, 54, 55, 56, 57, 59, 61, 63, 65, 67, 70, 71, 79, 80, 82, 85, 86, 91, 94, 95, 101, 105, 106, 117, 118, 120, 122, 126, 136, 168, 170, 173, 174, 183, 185, 189, 190, 192, 193, 195, 197, 198, 202, 203, 204, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 229, 233, 235, 240, 241, 247, 248, 253, 268, 270, 271, 272, 273, 278], "posit": [4, 10, 11, 12, 18, 19, 20, 23, 30, 31, 32, 34, 36, 37, 38, 39, 44, 46, 47, 48, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 65, 67, 68, 71, 80, 82, 84, 85, 86, 87, 91, 92, 94, 95, 98, 99, 101, 105, 107, 112, 115, 118, 120, 122, 125, 127, 129, 132, 133, 135, 137, 140, 142, 146, 155, 163, 166, 168, 179, 180, 181, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 207, 208, 210, 211, 212, 214, 215, 218, 220, 221, 222, 223, 228, 240, 247, 249, 250, 251, 253, 255, 256, 274, 278, 279], "convent": [4, 6, 7, 9, 20, 46, 47, 51, 54, 55, 56, 60, 61, 63, 65, 70, 80, 82, 85, 97, 98, 99, 101, 105, 108, 120, 135, 137, 141, 162, 163, 165, 170, 171, 183, 188, 202, 218, 219, 221, 222, 228, 255, 270, 278], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 25, 28, 29, 31, 32, 35, 37, 38, 39, 45, 46, 47, 50, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 78, 80, 82, 83, 86, 88, 91, 95, 98, 99, 103, 109, 110, 112, 115, 117, 118, 120, 121, 125, 127, 128, 129, 133, 135, 136, 139, 145, 147, 149, 154, 157, 163, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 204, 205, 208, 209, 210, 212, 214, 215, 218, 220, 221, 222, 223, 227, 228, 234, 235, 236, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 270, 272, 278], "And": [4, 10, 12, 19, 20, 22, 31, 46, 47, 54, 55, 56, 63, 80, 85, 86, 91, 94, 112, 140, 186, 188, 190, 198, 199, 202, 210, 214, 215, 220, 221, 222, 240, 241, 251, 278], "aren": [4, 10, 11, 20, 37, 55, 118, 201, 221], "don": [4, 10, 12, 19, 20, 32, 37, 80, 85, 91, 96, 97, 109, 118, 177, 185, 186, 192, 202, 212, 221, 231, 236, 255, 267, 268, 272, 273, 278], "form": [4, 7, 10, 11, 16, 18, 20, 24, 29, 32, 33, 34, 35, 37, 38, 45, 46, 47, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 71, 75, 77, 78, 80, 82, 84, 86, 88, 90, 91, 95, 97, 98, 99, 101, 102, 105, 109, 110, 112, 113, 114, 117, 118, 120, 122, 125, 127, 128, 129, 130, 131, 133, 135, 136, 145, 148, 149, 150, 152, 162, 163, 166, 168, 170, 173, 176, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 210, 211, 212, 214, 215, 219, 220, 221, 222, 225, 227, 228, 233, 234, 240, 247, 249, 250, 252, 253, 255, 260, 261, 268, 272, 273, 274, 277, 278, 279], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 29, 33, 37, 38, 45, 46, 51, 55, 56, 59, 61, 63, 80, 82, 91, 95, 97, 102, 103, 105, 118, 128, 151, 162, 165, 168, 171, 178, 182, 186, 188, 189, 190, 192, 193, 197, 198, 202, 209, 210, 214, 218, 220, 221, 223, 224, 227, 228, 237, 241, 243, 244, 260], "intern": [4, 10, 11, 12, 18, 19, 35, 37, 38, 46, 55, 58, 59, 60, 63, 71, 72, 75, 81, 87, 91, 95, 99, 101, 103, 120, 132, 141, 162, 163, 173, 189, 191, 193, 194, 196, 198, 200, 202, 212, 214, 216, 217, 219, 220, 221, 222, 226, 228, 231, 235, 237, 240, 273, 277], "Such": [4, 6, 18, 37, 55, 71, 122, 189, 190, 197, 203, 211, 212, 214, 267, 273], "prefix": [4, 37, 55, 91, 95, 172, 175, 176, 192, 195, 199, 202, 215, 218, 234, 235, 240, 263], "underscor": [4, 6, 10, 55, 91, 218, 228, 236], "_": [4, 5, 6, 7, 10, 12, 14, 16, 20, 31, 32, 36, 43, 44, 46, 47, 48, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 66, 68, 69, 70, 71, 80, 82, 85, 86, 87, 88, 89, 91, 93, 95, 97, 105, 130, 133, 135, 147, 168, 173, 177, 182, 185, 187, 193, 198, 201, 202, 203, 205, 209, 210, 211, 212, 214, 215, 218, 219, 220, 223, 240, 249, 251, 277], "univers": [4, 11, 37, 187, 196, 210, 215, 220, 221], "adher": [4, 7, 80], "codebas": [4, 10, 18, 192, 231], "anyth": [4, 6, 7, 10, 12, 20, 35, 37, 55, 56, 66, 70, 91, 118, 142, 152, 199, 202, 208, 210, 214, 218, 220, 234, 240, 243, 270], "were": [4, 7, 10, 11, 12, 14, 18, 20, 36, 47, 49, 55, 56, 61, 72, 80, 86, 91, 95, 96, 97, 109, 117, 132, 177, 183, 186, 189, 195, 196, 197, 198, 201, 202, 203, 211, 214, 220, 240, 241, 243, 270, 272, 273, 277, 278], "incorrect": [4, 7, 10, 19, 20, 24, 46, 55, 65, 95, 103, 181, 193, 218, 221, 234, 237, 238], "bug": [4, 6, 18, 20, 23, 27, 35, 56, 81, 192, 210, 218, 221, 270], "despit": [4, 25, 55, 278], "sai": [4, 7, 11, 12, 16, 18, 38, 45, 54, 55, 56, 84, 109, 113, 118, 128, 135, 173, 185, 186, 189, 190, 191, 195, 197, 201, 202, 209, 212, 215, 218, 220, 221, 222, 241, 267, 272, 278], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 25, 27, 37, 46, 47, 49, 51, 55, 56, 57, 63, 83, 86, 91, 95, 97, 98, 99, 109, 114, 118, 120, 121, 122, 125, 126, 132, 135, 137, 168, 177, 182, 186, 190, 192, 197, 198, 202, 203, 209, 210, 214, 215, 218, 220, 221, 222, 229, 233, 236, 240, 241, 250, 271, 272, 273, 278], "recent": [4, 10, 12, 15, 18, 19, 20, 23, 24, 25, 30, 31, 32, 37, 38, 47, 55, 56, 59, 63, 65, 82, 85, 86, 87, 88, 89, 91, 93, 94, 97, 105, 187, 189, 192, 193, 195, 198, 201, 209, 210, 218, 220, 221, 231, 234, 236, 238, 240, 241, 243, 270, 274], "best": [4, 8, 12, 23, 24, 26, 27, 37, 55, 63, 80, 82, 96, 167, 188, 199, 202, 211, 212, 214, 218, 221, 226, 234, 266, 270, 271, 277, 278], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 30, 32, 33, 34, 35, 37, 38, 39, 46, 55, 56, 57, 58, 59, 61, 65, 66, 68, 70, 71, 82, 83, 84, 88, 91, 95, 97, 98, 99, 105, 111, 112, 114, 115, 117, 127, 133, 136, 147, 160, 162, 164, 165, 168, 171, 173, 178, 183, 188, 189, 190, 191, 195, 197, 202, 208, 209, 210, 212, 214, 215, 217, 218, 220, 221, 222, 226, 238, 240, 247, 253, 256, 270, 278], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 25, 35, 37, 55, 56, 59, 65, 80, 85, 86, 91, 95, 109, 118, 119, 135, 161, 174, 177, 188, 192, 193, 201, 209, 210, 214, 218, 221, 233, 235, 241, 267, 270, 272, 273, 276], "re": [4, 12, 20, 34, 35, 37, 46, 47, 55, 56, 59, 62, 63, 80, 82, 91, 178, 180, 183, 189, 195, 202, 203, 204, 210, 211, 212, 218, 220, 233, 249, 251, 268, 270, 273], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 24, 25, 30, 31, 32, 34, 37, 38, 43, 46, 47, 54, 55, 56, 59, 60, 61, 63, 67, 71, 80, 82, 85, 86, 91, 94, 95, 106, 118, 128, 153, 164, 171, 173, 178, 187, 190, 191, 192, 193, 195, 197, 198, 199, 202, 203, 210, 211, 212, 214, 215, 218, 220, 221, 229, 233, 255, 267, 268, 270, 272, 273, 278, 279], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 24, 35, 55, 59, 61, 68, 77, 80, 88, 91, 95, 97, 109, 118, 119, 135, 148, 178, 185, 188, 192, 193, 198, 199, 202, 203, 210, 211, 212, 214, 215, 220, 221, 222, 234, 235, 238, 240, 243, 267, 270, 272, 273, 275, 278], "while": [4, 6, 10, 11, 12, 18, 20, 22, 25, 36, 37, 38, 46, 47, 48, 51, 54, 55, 56, 57, 59, 60, 61, 65, 69, 71, 79, 85, 86, 91, 95, 96, 97, 98, 101, 110, 112, 114, 118, 122, 132, 152, 173, 178, 183, 189, 197, 200, 202, 218, 221, 233, 235, 237, 240, 255, 259, 267, 273, 274], "peopl": [4, 6, 58, 63, 82, 91, 173, 222], "upgrad": [4, 28], "immedi": [4, 18, 46, 55, 80, 85, 168, 189, 192, 234, 241], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 37, 44, 46, 52, 54, 55, 59, 61, 79, 80, 82, 91, 95, 105, 118, 132, 185, 186, 195, 198, 209, 215, 218, 220, 221, 226, 234, 240, 270, 277], "question": [4, 6, 7, 16, 18, 54, 57, 65, 72, 80, 82, 85, 95, 109, 170, 173, 177, 189, 192, 197, 212, 221, 240, 243], "read": [4, 6, 7, 9, 10, 20, 25, 47, 61, 80, 95, 99, 135, 185, 186, 191, 192, 193, 199, 202, 215, 228, 229, 237, 244, 271, 277, 278], "previou": [4, 6, 10, 20, 39, 44, 45, 46, 47, 50, 55, 60, 61, 82, 85, 86, 94, 110, 132, 170, 185, 186, 195, 208, 215, 219, 223, 240, 271, 273, 278], "unchang": [4, 10, 11, 20, 46, 47, 55, 82, 91, 105, 198, 202, 208, 211, 214, 221, 267], "dure": [4, 10, 12, 28, 37, 55, 56, 86, 91, 95, 97, 110, 113, 135, 136, 185, 197, 202, 211, 220, 221, 238, 240], "period": [4, 6, 10, 23, 35, 55, 56, 61, 80, 95, 132, 142, 164, 171, 197, 202, 205, 208, 217, 221, 222, 240, 258], "silenc": [4, 231, 238], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 27, 55, 56, 59, 61, 91, 118, 126, 132, 185, 202, 211, 218, 219, 220, 237, 238, 274], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 33, 36, 37, 47, 52, 54, 55, 56, 57, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 80, 82, 88, 91, 95, 98, 99, 110, 115, 129, 157, 173, 175, 178, 181, 185, 186, 188, 190, 192, 193, 195, 197, 198, 199, 202, 203, 209, 210, 212, 218, 220, 221, 222, 234, 235, 241, 247, 250, 251, 255, 267, 270, 272, 273, 278, 279], "over": [4, 7, 8, 10, 12, 15, 20, 26, 29, 35, 36, 37, 38, 46, 47, 50, 54, 55, 56, 57, 58, 59, 60, 69, 71, 78, 80, 84, 85, 88, 91, 92, 95, 98, 99, 107, 112, 118, 135, 136, 147, 163, 166, 168, 172, 173, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 205, 207, 209, 214, 215, 217, 218, 220, 221, 222, 223, 226, 227, 236, 240, 241, 247, 249, 253, 256, 272, 276, 278], "defeat": [4, 218], "three": [4, 11, 12, 14, 16, 18, 20, 29, 33, 37, 46, 47, 48, 51, 55, 56, 60, 63, 65, 69, 70, 71, 80, 84, 85, 86, 98, 99, 117, 121, 124, 125, 126, 141, 163, 165, 170, 178, 181, 185, 186, 187, 188, 189, 190, 193, 195, 198, 202, 212, 214, 215, 220, 221, 222, 233, 247, 248, 253, 256, 270, 273, 278], "natur": [4, 10, 12, 18, 29, 33, 37, 38, 46, 55, 56, 60, 61, 89, 95, 118, 170, 172, 173, 189, 192, 193, 195, 197, 199, 202, 211, 215, 221, 222, 240, 256, 273, 278], "heavili": [4, 209, 219], "consider": [4, 19, 55, 96, 109, 192, 201, 210, 215, 218, 250], "easi": [4, 11, 43, 47, 55, 63, 80, 96, 115, 122, 128, 185, 189, 192, 197, 202, 209, 212, 215, 218, 221, 226, 227, 228, 267, 268, 270, 271, 272, 273, 274, 277], "account": [4, 11, 61, 91, 205, 214, 218], "nonetheless": [4, 56, 170, 214, 218], "deprecat": 4, "won": [4, 12, 20, 37, 214, 221, 273], "until": [4, 16, 18, 23, 24, 28, 47, 49, 55, 56, 65, 82, 91, 95, 132, 186, 195, 198, 211, 218, 270], "come": [4, 27, 46, 51, 53, 54, 55, 61, 63, 80, 82, 91, 96, 109, 118, 120, 130, 171, 186, 189, 192, 195, 197, 198, 212, 215, 218, 221, 231, 233, 238, 241, 270, 272, 273, 276, 278], "minimum": [4, 10, 23, 35, 37, 46, 47, 49, 51, 55, 56, 59, 61, 91, 109, 113, 120, 152, 177, 188, 190, 195, 221, 222, 236, 258, 268], "longer": [4, 6, 12, 17, 55, 65, 95, 122, 132, 190, 195, 202, 211, 214, 240, 243, 270, 278], "especi": [4, 6, 20, 25, 54, 91, 109, 118, 135, 162, 177, 186, 214, 218, 220, 233, 267, 268], "hard": [4, 8, 11, 18, 47, 56, 91, 95, 118, 168, 192, 202, 209, 218, 221, 270, 272], "migrat": 4, "lengthen": 4, "impos": [4, 99], "signific": [4, 12, 18, 37, 55, 56, 59, 82, 91, 109, 133, 162, 192, 221, 241, 273], "mainten": [4, 32], "burden": [4, 202], "keep": [4, 6, 12, 15, 20, 51, 55, 56, 59, 60, 63, 80, 91, 113, 121, 129, 133, 152, 168, 188, 191, 192, 193, 198, 209, 210, 212, 214, 218, 220, 228, 255, 268, 273], "firstli": [4, 10, 18, 20, 212], "regular": [4, 10, 12, 18, 19, 38, 43, 55, 56, 59, 63, 71, 77, 78, 82, 95, 118, 162, 192, 199, 218, 228, 233, 277, 278], "schedul": 4, "Being": [4, 51, 65, 71, 192], "assur": [4, 95, 198], "suffici": [4, 6, 18, 36, 37, 46, 47, 51, 55, 91, 173, 205, 209, 218, 222, 237, 278], "regardless": [4, 6, 10, 20, 47, 55, 82, 95, 195, 210, 214, 240, 250, 255, 278], "often": [4, 6, 11, 18, 19, 20, 24, 36, 37, 38, 45, 55, 63, 65, 67, 80, 82, 91, 95, 96, 105, 128, 132, 177, 185, 186, 189, 190, 192, 195, 198, 203, 209, 210, 215, 218, 222, 240, 267, 272, 273, 274, 278], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 23, 29, 37, 47, 54, 55, 59, 67, 70, 79, 112, 163, 167, 173, 189, 195, 197, 198, 201, 210, 214, 218, 222, 241, 251, 270, 277, 278], "secondli": [4, 20, 212], "rigor": [4, 63, 186, 235], "semant": [4, 11, 18, 88, 220], "surfac": [4, 61, 63, 69, 80, 99, 112, 137, 141, 168, 188, 214, 247, 254], "enough": [4, 6, 23, 46, 55, 59, 82, 91, 94, 95, 105, 118, 135, 193, 195, 202, 218, 268, 270], "encod": [4, 10, 39, 47, 53, 56, 85, 194, 202, 233, 237, 240], "backport": 4, "prior": [4, 10, 27, 181, 198, 214, 274], "extrem": [4, 46, 59, 65, 71, 82, 88, 101, 132, 186, 214, 222], "accur": [4, 10, 12, 16, 20, 35, 46, 55, 59, 60, 77, 82, 102, 188, 209, 267, 274], "model": [4, 11, 59, 85, 95, 105, 114, 120, 122, 123, 124, 140, 198, 211, 222], "final": [4, 6, 7, 10, 18, 20, 36, 47, 54, 55, 61, 63, 80, 82, 85, 91, 95, 99, 103, 112, 113, 120, 125, 127, 128, 130, 133, 148, 160, 163, 165, 166, 168, 170, 171, 173, 178, 185, 186, 189, 192, 195, 197, 204, 210, 211, 212, 214, 215, 218, 220, 221, 228, 240, 241, 271, 272, 273], "temptat": [4, 211, 278], "fudg": 4, "earli": [4, 55, 95, 157, 215], "acceler": [4, 96, 115, 120, 125, 127, 132, 133, 135, 171, 178, 181, 183, 206, 237, 255], "myst": [4, 7], "checkbox": 4, "tag": [4, 202, 220], "nest": [4, 55, 57, 61, 63, 82, 86, 105, 190, 192, 195, 202, 212, 214, 217, 221, 222, 223, 224, 226, 229, 240, 241, 273], "ensur": [4, 12, 20, 23, 27, 55, 56, 59, 87, 91, 112, 133, 197, 198, 202, 216, 233, 238, 241], "realli": [4, 10, 11, 16, 18, 19, 20, 55, 67, 95, 120, 170, 192, 201, 203, 209, 211, 212, 214, 218, 234, 243, 270, 272], "per": [4, 56, 91, 96, 101, 142, 178, 183, 188, 193, 198, 199, 247, 250, 252, 255], "everywher": [4, 11, 12, 55, 63, 80, 105, 183, 255], "doctest": [4, 6, 7, 12, 20, 48, 63, 91, 95, 120, 157, 168, 192, 198, 218, 230, 233, 236, 238, 277], "sympy_deprecation_warn": [4, 231, 236, 238, 239], "write": [4, 8, 10, 11, 16, 18, 19, 21, 28, 37, 44, 55, 56, 62, 63, 80, 82, 88, 135, 148, 185, 186, 190, 195, 197, 202, 211, 212, 215, 218, 221, 227, 233, 234, 235, 241, 271, 272, 273, 278], "multilin": [4, 202], "deprecated_since_vers": [4, 231, 236, 238], "active_deprecations_target": [4, 231, 236, 238], "target": [4, 6, 11, 35, 36, 37, 55, 95, 111, 148, 152, 153, 155, 211, 214, 217, 220, 221, 231, 234, 235, 238, 278], "stacklevel": [4, 231, 236, 238], "line": [4, 6, 10, 11, 12, 16, 18, 27, 36, 37, 46, 47, 51, 56, 65, 66, 67, 69, 70, 71, 72, 77, 80, 82, 83, 84, 91, 95, 98, 103, 106, 118, 120, 126, 148, 178, 182, 183, 185, 187, 188, 202, 205, 212, 214, 218, 222, 223, 231, 233, 234, 235, 238, 241, 243, 253, 256, 270], "visual": [4, 55, 95, 99, 105, 128, 201, 214], "confirm": [4, 10, 46, 95, 218], "look": [4, 6, 7, 10, 12, 18, 19, 20, 28, 36, 37, 46, 55, 60, 61, 63, 76, 91, 95, 113, 118, 120, 128, 152, 162, 163, 166, 181, 188, 192, 193, 197, 202, 204, 205, 209, 212, 214, 215, 218, 219, 233, 237, 241, 243, 251, 268, 273, 276, 277], "good": [4, 7, 11, 18, 20, 25, 37, 55, 56, 59, 67, 80, 91, 95, 120, 132, 135, 189, 192, 193, 202, 209, 211, 212, 214, 218, 240, 267, 271, 274], "top": [4, 6, 7, 10, 11, 37, 54, 55, 56, 71, 72, 82, 85, 91, 98, 99, 117, 163, 170, 192, 202, 212, 218, 235, 236, 241, 256, 273], "relev": [4, 6, 7, 18, 37, 53, 68, 83, 84, 110, 113, 115, 120, 173, 182, 186, 192, 212, 218, 219, 228, 233, 254], "docstr": [4, 8, 10, 12, 20, 36, 37, 48, 55, 77, 80, 82, 91, 95, 100, 104, 106, 128, 133, 138, 155, 161, 162, 164, 184, 198, 205, 208, 209, 211, 214, 218, 219, 220, 221, 227, 228, 233, 236, 241, 243, 254, 257], "src": [4, 6, 7, 97, 218, 233, 238], "explan": [4, 7, 12, 14, 18, 21, 29, 30, 31, 32, 33, 34, 36, 37, 40, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 61, 63, 67, 77, 78, 80, 82, 86, 91, 95, 105, 108, 110, 111, 112, 113, 115, 126, 137, 139, 142, 145, 147, 149, 151, 163, 168, 187, 188, 189, 191, 193, 197, 198, 200, 204, 205, 207, 208, 209, 210, 212, 214, 215, 218, 220, 222, 223, 227, 228, 233, 236, 238, 241, 275], "cross": [4, 7, 8, 11, 55, 65, 71, 86, 91, 98, 99, 112, 126, 133, 135, 148, 178, 184, 185, 186, 215, 221, 247, 250, 252, 253], "xyz": [4, 67, 97, 98, 178, 186, 247, 248, 251], "header": [4, 37, 234, 235], "why": [4, 10, 12, 18, 37, 55, 186, 193, 199, 209, 212, 216, 241, 271, 273, 274], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 32, 33, 35, 36, 37, 42, 46, 47, 54, 55, 56, 62, 65, 70, 80, 86, 88, 91, 95, 148, 157, 161, 162, 163, 171, 186, 192, 193, 194, 195, 197, 199, 210, 212, 215, 218, 219, 220, 221, 231, 234, 235, 236, 237, 238, 240, 241, 243, 257, 260, 265, 270, 272, 273], "warns_deprecated_sympi": [4, 230, 231, 236, 238], "pr": [4, 10, 54, 193, 195, 196, 198, 221], "merg": [4, 37, 46, 47, 55, 176, 202, 210, 222, 233, 240, 241, 259], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 26, 29, 31, 32, 33, 35, 36, 37, 43, 44, 46, 47, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 71, 72, 73, 82, 83, 84, 85, 86, 88, 91, 95, 103, 105, 108, 137, 139, 140, 141, 143, 144, 145, 149, 150, 151, 154, 156, 157, 166, 168, 172, 178, 180, 184, 188, 198, 205, 209, 210, 211, 215, 218, 221, 222, 235, 240, 247, 248, 252, 254, 256, 274, 275], "decor": [4, 20, 46, 55, 63, 231, 233, 238, 239, 242, 243, 265], "sympydeprecationwarn": [4, 10, 231, 233, 236, 238, 239], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 23, 25, 26, 29, 30, 31, 32, 33, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 78, 80, 82, 83, 84, 85, 88, 90, 97, 98, 101, 102, 103, 105, 110, 112, 113, 114, 115, 117, 118, 122, 123, 128, 129, 133, 135, 136, 137, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 181, 182, 184, 189, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 212, 216, 218, 219, 220, 221, 222, 225, 227, 228, 229, 233, 234, 235, 236, 237, 238, 240, 241, 245, 250, 251, 253, 254, 256, 257, 258, 259, 262, 264, 265, 268, 270, 273, 278], "context": [4, 6, 7, 10, 14, 18, 20, 24, 30, 31, 32, 55, 57, 63, 82, 85, 118, 173, 192, 195, 197, 210, 231, 233, 238, 247], "manag": [4, 10, 27, 31, 32, 97, 148, 195, 214, 228, 231, 233, 238], "filter": [4, 10, 15, 23, 55, 56, 80, 140, 198, 231, 233, 238, 240], "emit": [4, 202, 231, 238], "assert": [4, 36, 44, 45, 46, 47, 55, 65, 67, 97, 132, 202, 210, 218, 219, 231, 238, 240], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 36, 43, 55, 56, 61, 63, 80, 82, 91, 106, 112, 117, 132, 133, 136, 141, 165, 168, 177, 178, 188, 190, 193, 195, 198, 199, 202, 211, 214, 215, 219, 221, 226, 231, 233, 237, 241, 243, 247, 270], "block": [4, 6, 10, 25, 37, 44, 46, 56, 86, 90, 91, 112, 117, 118, 120, 123, 178, 186, 191, 215, 241, 250], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 37, 55, 57, 63, 82, 89, 107, 132, 164, 165, 188, 202, 273, 277], "ignore_warn": [4, 231, 236, 238, 239, 241], "prevent": [4, 12, 23, 25, 37, 55, 61, 92, 95, 109, 191, 193, 198, 202, 214, 222, 231, 238, 269], "trigger": [4, 20, 47, 97, 168, 231], "twice": [4, 12, 37, 55, 57, 69, 95, 178, 180, 185, 198, 202, 237, 238, 247, 248, 268], "similar": [4, 5, 10, 12, 16, 18, 20, 47, 54, 55, 56, 59, 60, 61, 63, 66, 71, 72, 76, 85, 91, 96, 105, 118, 120, 122, 132, 133, 166, 183, 185, 186, 190, 192, 193, 195, 199, 209, 211, 212, 214, 218, 220, 223, 228, 231, 234, 237, 238, 247, 248, 250, 251, 255, 267, 272, 273, 274, 276, 278], "somewher": [4, 6, 7, 11, 37], "sign": [4, 6, 7, 11, 23, 25, 29, 34, 37, 51, 55, 56, 60, 62, 65, 71, 80, 82, 91, 95, 98, 99, 101, 105, 120, 141, 153, 178, 183, 185, 187, 195, 202, 207, 209, 214, 215, 220, 240, 253, 256, 271], "readi": [4, 18, 117, 192, 202, 218], "paragraph": [4, 6, 7, 20, 36], "metadata": [4, 36, 236, 238], "link": [4, 6, 7, 11, 12, 22, 37, 56, 65, 71, 82, 106, 112, 121, 128, 129, 234, 237, 238, 276], "rememb": [4, 6, 12, 20, 85, 91, 106, 109, 135, 185, 186, 202, 214, 220, 223, 241, 273, 278], "shown": [4, 6, 10, 11, 18, 19, 20, 44, 47, 54, 55, 59, 61, 63, 80, 97, 99, 103, 105, 109, 113, 115, 121, 122, 123, 129, 130, 131, 133, 177, 178, 185, 186, 188, 191, 192, 193, 198, 202, 218, 222, 238, 240, 250, 251, 271], "plain": [4, 6, 18, 63, 83, 182, 198, 202], "rst": [4, 6, 7, 11, 38, 218, 233], "markdown": [4, 8, 11], "markup": [4, 202], "clearli": [4, 6, 20, 95, 186, 192, 212, 274], "delin": 4, "newlin": [4, 91, 243], "charact": [4, 6, 7, 55, 56, 80, 83, 97, 148, 178, 182, 202, 218, 233, 235, 238, 243, 270, 272, 277], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 26, 32, 35, 37, 46, 47, 55, 59, 63, 67, 68, 82, 88, 91, 97, 130, 131, 178, 192, 195, 196, 198, 202, 204, 214, 215, 272, 275, 278], "abc": [4, 6, 12, 14, 15, 20, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 37, 44, 46, 48, 54, 55, 56, 57, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 78, 79, 80, 82, 83, 85, 86, 88, 91, 94, 96, 103, 105, 107, 139, 141, 143, 144, 149, 166, 168, 169, 189, 191, 193, 195, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 227, 229, 234, 235, 236, 237, 238, 240, 241, 243, 247, 249, 250, 251, 256, 258, 270, 273, 277], "func": [4, 6, 11, 17, 20, 31, 35, 37, 55, 57, 60, 63, 74, 76, 82, 95, 157, 178, 195, 198, 202, 203, 214, 218, 219, 220, 231, 236, 238, 240, 241, 243, 246], "larger": [4, 7, 11, 20, 37, 46, 47, 54, 55, 56, 63, 80, 88, 91, 95, 122, 126, 193, 199, 203, 209, 214, 220, 235, 237, 270, 278], "easier": [4, 11, 19, 55, 99, 118, 120, 185, 193, 197, 199, 212, 218, 221, 235, 241, 250, 272, 278, 279], "exactli": [4, 6, 7, 10, 11, 12, 20, 25, 33, 39, 46, 55, 58, 59, 91, 97, 133, 187, 212, 214, 218, 221, 223, 237, 240, 241, 268, 270, 272, 277, 278], "direct": [4, 6, 7, 10, 11, 17, 29, 31, 32, 36, 40, 43, 46, 51, 54, 55, 57, 59, 61, 64, 67, 68, 69, 70, 71, 85, 86, 91, 98, 99, 101, 109, 110, 112, 120, 122, 126, 135, 154, 178, 183, 185, 186, 189, 191, 192, 195, 199, 209, 212, 228, 231, 240, 247, 251, 252, 255], "syntax": [4, 6, 7, 10, 11, 12, 20, 30, 32, 47, 55, 82, 97, 118, 135, 165, 188, 192, 201, 202, 214, 220, 224, 243, 259, 268, 270, 272, 277, 279], "paramet": [4, 7, 10, 11, 12, 24, 29, 30, 32, 35, 37, 38, 46, 47, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 80, 82, 83, 85, 86, 88, 91, 92, 94, 95, 97, 98, 101, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 135, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 193, 195, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 227, 228, 231, 233, 234, 235, 237, 238, 240, 241, 247, 248, 249, 250, 251, 256, 268, 273], "short": [4, 7, 12, 28, 38, 45, 47, 51, 55, 56, 57, 58, 61, 89, 95, 109, 154, 173, 177, 186, 189, 196, 223, 233, 243, 273, 277], "renam": [4, 37, 82], "rest": [4, 10, 80, 83, 85, 89, 99, 107, 118, 122, 128, 173, 189, 192, 222, 240, 270, 271, 278], "left": [4, 7, 10, 16, 18, 20, 22, 35, 37, 38, 46, 47, 51, 55, 56, 57, 60, 61, 63, 71, 72, 78, 80, 82, 83, 85, 86, 91, 94, 95, 105, 110, 117, 133, 140, 147, 152, 156, 157, 160, 165, 178, 183, 187, 188, 189, 191, 198, 199, 200, 201, 202, 204, 205, 209, 210, 211, 212, 214, 218, 219, 220, 221, 222, 233, 234, 235, 237, 240, 253, 268, 272, 274, 278], "imaginari": [4, 6, 12, 18, 20, 23, 24, 29, 32, 34, 55, 59, 61, 63, 86, 135, 192, 193, 198, 202, 203, 210, 214, 221], "simplify_thi": [4, 6, 236], "expr": [4, 6, 11, 12, 18, 20, 23, 24, 25, 31, 32, 34, 35, 37, 47, 54, 57, 59, 61, 63, 65, 77, 80, 82, 85, 88, 91, 96, 97, 105, 109, 111, 118, 132, 145, 149, 151, 153, 155, 157, 160, 163, 165, 166, 168, 175, 178, 180, 182, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 234, 235, 236, 238, 241, 247, 248, 249, 250, 251, 253, 258, 267, 268, 270, 272, 273, 277, 278, 279], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 24, 30, 32, 34, 35, 54, 55, 57, 59, 60, 61, 63, 67, 72, 77, 80, 82, 85, 86, 87, 88, 91, 98, 105, 106, 111, 112, 114, 121, 122, 125, 126, 127, 132, 140, 147, 152, 167, 168, 175, 178, 183, 189, 197, 199, 201, 203, 208, 210, 211, 212, 215, 218, 219, 220, 221, 222, 236, 238, 241, 250, 252, 258, 259, 267, 269, 270, 272, 273, 274], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 31, 32, 36, 55, 60, 67, 85, 91, 95, 97, 126, 163, 192, 198, 202, 211, 214, 221, 236, 238, 240, 241, 244, 267, 270, 273, 274, 278], "ref": [4, 46, 61, 91, 103, 135, 207, 222, 236, 274], "is_this_zero": [4, 238], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 46, 47, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 80, 82, 83, 84, 85, 86, 87, 88, 91, 95, 96, 97, 98, 99, 101, 103, 105, 110, 111, 112, 115, 118, 120, 121, 122, 123, 125, 126, 127, 129, 133, 135, 136, 145, 146, 149, 152, 155, 157, 163, 165, 166, 168, 169, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 234, 235, 238, 240, 241, 243, 247, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 277, 278, 279], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 125, 127, 130, 131, 132, 133, 135, 136, 137, 140, 141, 142, 144, 147, 152, 153, 154, 157, 162, 163, 164, 165, 166, 167, 168, 169, 173, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "zero": [4, 11, 12, 14, 18, 19, 20, 24, 29, 32, 34, 37, 45, 46, 47, 51, 54, 58, 59, 60, 61, 63, 65, 69, 70, 71, 80, 82, 84, 85, 86, 88, 90, 91, 94, 95, 97, 98, 104, 105, 112, 115, 118, 120, 123, 126, 129, 130, 131, 135, 140, 162, 166, 168, 170, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 197, 198, 200, 202, 205, 209, 210, 212, 214, 215, 218, 219, 220, 221, 222, 223, 238, 240, 241, 250, 252, 253, 273, 279], "is_zero": [4, 18, 20, 67, 70, 91, 189, 193, 198, 238, 274], "mail": [4, 10, 23, 24, 27, 202, 271], "summar": [4, 233, 278], "idea": [4, 11, 18, 19, 20, 40, 46, 53, 55, 56, 67, 73, 80, 82, 95, 106, 118, 168, 172, 173, 189, 191, 192, 211, 214, 215, 218, 221, 235, 241, 278], "fit": [4, 11, 36, 80, 91, 94, 95, 186, 202, 218, 243, 273], "put": [4, 6, 10, 11, 12, 16, 20, 37, 51, 52, 55, 56, 57, 61, 85, 86, 91, 140, 145, 149, 164, 165, 198, 202, 203, 211, 212, 214, 218, 223, 229, 234, 274, 278], "word": [4, 7, 11, 20, 33, 42, 51, 54, 55, 56, 61, 63, 85, 105, 118, 133, 189, 192, 197, 214, 215, 218, 220, 235, 247, 251, 270], "global": [4, 6, 10, 30, 31, 32, 35, 37, 38, 55, 67, 80, 97, 152, 158, 178, 180, 188, 189, 192, 193, 195, 202, 215, 218, 219, 222, 233, 235, 236, 241, 249], "uniqu": [4, 10, 11, 35, 36, 38, 46, 49, 51, 55, 56, 57, 60, 63, 70, 73, 78, 82, 84, 85, 91, 95, 112, 157, 166, 178, 186, 189, 190, 192, 195, 197, 198, 203, 207, 214, 215, 218, 220, 221, 222, 226, 235, 240, 243, 250, 255, 270, 273], "across": [4, 7, 46, 53, 55, 66, 82, 99, 167, 168, 175, 188, 202, 237, 239, 240, 241, 276], "level": [4, 6, 7, 10, 11, 12, 18, 19, 23, 37, 46, 53, 55, 61, 63, 82, 85, 91, 95, 109, 122, 135, 163, 168, 173, 177, 180, 186, 188, 191, 192, 194, 200, 202, 211, 215, 221, 222, 226, 234, 235, 240, 273, 274, 276], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 35, 36, 37, 38, 45, 46, 47, 49, 50, 51, 54, 55, 56, 57, 58, 61, 65, 66, 68, 69, 70, 71, 78, 80, 84, 85, 86, 91, 94, 95, 98, 99, 105, 111, 112, 113, 117, 118, 120, 122, 136, 140, 144, 158, 162, 163, 165, 169, 170, 173, 178, 181, 183, 187, 188, 190, 191, 192, 193, 195, 197, 198, 202, 208, 209, 212, 214, 215, 218, 219, 220, 221, 222, 224, 226, 227, 228, 235, 236, 237, 238, 240, 241, 243, 247, 248, 250, 251, 253, 255, 273, 279], "share": [4, 18, 20, 56, 95, 193, 197, 202, 222, 235], "__init__": [4, 6, 20, 55, 113, 197, 247, 248, 273], "func_nam": [4, 37, 61, 86, 239, 243], "help": [4, 5, 6, 7, 18, 23, 28, 37, 45, 55, 63, 80, 82, 91, 95, 96, 98, 103, 118, 135, 143, 153, 186, 188, 197, 199, 202, 211, 212, 215, 218, 219, 222, 233, 234, 235, 241, 263, 271, 274], "rais": [4, 10, 12, 14, 18, 19, 20, 30, 32, 35, 37, 44, 47, 55, 56, 57, 59, 61, 64, 65, 68, 70, 71, 72, 80, 82, 86, 88, 91, 92, 94, 95, 103, 105, 142, 154, 183, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 210, 214, 217, 218, 219, 220, 221, 222, 226, 228, 230, 231, 233, 235, 238, 240, 241, 243, 244, 253, 274], "been": [4, 12, 18, 20, 35, 37, 38, 46, 47, 48, 51, 54, 55, 56, 61, 67, 80, 82, 91, 95, 96, 97, 113, 118, 120, 128, 132, 133, 141, 153, 163, 165, 173, 177, 183, 184, 185, 186, 189, 192, 193, 197, 199, 200, 202, 204, 209, 212, 214, 219, 220, 221, 223, 232, 233, 235, 236, 238, 240, 243, 250, 253, 270, 271, 273, 274, 278], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 33, 36, 38, 45, 46, 47, 53, 55, 56, 60, 61, 71, 78, 84, 86, 88, 91, 106, 108, 112, 133, 152, 154, 157, 173, 189, 190, 191, 195, 196, 197, 198, 202, 211, 214, 218, 221, 226, 228, 233, 240, 241, 243, 251, 270, 274, 278], "much": [4, 6, 10, 16, 18, 19, 20, 24, 36, 37, 40, 51, 59, 63, 77, 80, 82, 132, 176, 177, 185, 186, 187, 189, 192, 195, 198, 209, 212, 214, 218, 219, 220, 221, 235, 237, 270, 272, 278], "trivial": [4, 38, 46, 51, 54, 55, 56, 61, 70, 85, 88, 91, 95, 130, 168, 189, 190, 195, 198, 212, 215, 218, 221, 226], "furthermor": [4, 10, 20, 33, 55, 56, 85, 197, 211, 270, 272, 273], "particular": [4, 6, 10, 11, 12, 18, 19, 22, 33, 38, 46, 55, 56, 59, 63, 66, 80, 82, 85, 88, 91, 95, 98, 101, 128, 152, 163, 190, 191, 192, 193, 195, 197, 198, 208, 210, 212, 214, 215, 218, 220, 221, 233, 235, 237, 274, 276, 278], "expr1": [4, 18, 105, 188, 220, 273], "expr2": [4, 18, 105, 188, 273], "dozen": [4, 11, 20, 278], "search": [4, 6, 35, 46, 47, 51, 53, 55, 61, 91, 95, 118, 189, 197, 198, 202, 211, 212, 214, 216, 219, 222, 234], "upcom": 4, "bot": 4, "push": [5, 80], "respect": [5, 6, 10, 11, 12, 20, 30, 32, 33, 35, 36, 37, 38, 45, 46, 47, 50, 51, 53, 54, 55, 57, 60, 61, 63, 65, 67, 71, 72, 77, 78, 80, 82, 85, 86, 88, 91, 95, 97, 98, 99, 101, 105, 110, 111, 112, 115, 122, 129, 131, 133, 135, 142, 157, 170, 171, 172, 177, 178, 181, 183, 186, 187, 188, 189, 192, 195, 197, 198, 199, 202, 204, 205, 208, 210, 214, 218, 219, 220, 221, 222, 223, 227, 228, 233, 235, 247, 248, 249, 250, 251, 252, 253, 254, 255, 268, 278], "handbook": [5, 6, 38, 45, 46, 53, 63, 95], "internet": 5, "practic": [5, 8, 16, 18, 24, 25, 44, 46, 56, 65, 129, 132, 135, 188, 189, 190, 192, 197, 199, 226, 270, 271], "project": [5, 7, 10, 37, 67, 68, 69, 70, 84, 91, 134, 234, 235, 247], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 36, 37, 46, 52, 55, 56, 82, 91, 118, 135, 173, 177, 186, 192, 195, 199, 201, 202, 209, 218, 221, 227, 237, 239, 241, 250, 251, 268, 278], "nn": 5, "brows": 5, "clone": [5, 27, 195], "download": [5, 7, 27, 36, 77, 196, 211, 218, 222, 247, 272], "origin": [5, 11, 12, 16, 18, 27, 29, 46, 47, 48, 51, 54, 55, 56, 59, 60, 61, 63, 64, 66, 67, 68, 70, 80, 82, 86, 91, 95, 103, 105, 106, 112, 122, 132, 135, 160, 163, 173, 179, 183, 188, 189, 193, 197, 198, 201, 202, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 228, 233, 240, 241, 247, 249, 250, 251, 252, 253, 255, 256, 278], "77": [5, 44, 63, 91, 95, 201, 202, 235], "mib": 5, "remot": [5, 55], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 35, 55, 60, 61, 62, 63, 81, 199, 212, 221, 273, 278], "checkout": [5, 36], "advantag": [5, 10, 14, 18, 20, 32, 35, 37, 55, 56, 60, 82, 85, 91, 95, 102, 172, 191, 192, 199, 210, 215, 218, 221, 237, 270, 272, 274, 278], "isol": [5, 35, 61, 193, 197, 198, 199, 220, 235], "wide": [5, 18, 83, 91, 135, 182, 192, 198, 202, 222], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 55, 189, 192, 215, 241, 251, 267, 273, 278], "consult": [5, 38], "kwarg": [5, 12, 31, 32, 33, 37, 46, 47, 54, 55, 56, 57, 61, 63, 65, 66, 68, 69, 70, 71, 72, 77, 80, 82, 86, 87, 88, 89, 91, 93, 94, 103, 105, 111, 113, 122, 137, 146, 148, 152, 153, 157, 159, 161, 162, 164, 165, 166, 178, 181, 182, 188, 191, 193, 198, 202, 204, 208, 209, 210, 214, 218, 219, 220, 222, 223, 228, 233, 234, 236, 243, 251], "test_bas": [5, 233], "similari": 5, "qualiti": [5, 96, 202], "code_qu": 5, "liter": [6, 12, 20, 37, 45, 55, 83, 85, 97, 168, 175, 214], "occur": [6, 10, 11, 12, 46, 47, 55, 59, 63, 72, 80, 86, 97, 109, 112, 132, 177, 178, 185, 197, 205, 214, 219, 220, 223, 233, 240, 273], "definit": [6, 10, 11, 12, 19, 29, 32, 37, 38, 46, 47, 52, 54, 55, 57, 58, 60, 61, 63, 68, 71, 75, 78, 80, 82, 86, 87, 88, 91, 95, 97, 112, 120, 125, 126, 133, 170, 173, 176, 178, 185, 186, 189, 190, 193, 198, 199, 202, 209, 222, 223, 234, 235, 236, 240, 241, 247, 250, 251, 252, 253, 268, 278], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 31, 32, 36, 37, 46, 47, 55, 63, 64, 65, 68, 69, 70, 71, 88, 91, 97, 99, 105, 110, 112, 113, 114, 115, 117, 125, 133, 136, 157, 162, 166, 173, 177, 178, 183, 186, 188, 189, 192, 193, 197, 202, 210, 214, 215, 227, 228, 234, 236, 240, 241, 244, 250, 259, 273], "fdiff": [6, 20, 37, 55, 61, 62, 63], "self": [6, 18, 20, 29, 31, 32, 36, 37, 46, 47, 52, 54, 55, 57, 61, 64, 65, 66, 68, 69, 70, 71, 82, 86, 91, 95, 110, 120, 163, 168, 178, 180, 181, 189, 191, 193, 195, 197, 198, 202, 204, 209, 210, 228, 247], "argindex": [6, 20, 37, 55, 61, 62, 63], "heavisid": [6, 62, 80, 82, 202], "diff": [6, 10, 11, 16, 20, 23, 35, 37, 60, 61, 62, 63, 72, 77, 88, 91, 109, 111, 121, 122, 135, 166, 178, 180, 182, 183, 186, 188, 193, 198, 201, 202, 212, 218, 219, 220, 223, 224, 229, 250, 253, 268, 272, 279], "diracdelta": [6, 62, 82, 163, 168, 202], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 26, 35, 37, 47, 49, 54, 55, 56, 57, 61, 62, 65, 66, 70, 80, 82, 84, 91, 95, 97, 110, 112, 113, 115, 118, 122, 129, 135, 167, 168, 171, 173, 178, 185, 186, 193, 194, 195, 198, 201, 202, 203, 209, 211, 212, 214, 215, 216, 218, 220, 227, 231, 233, 235, 236, 241, 250, 251, 256, 268, 270, 271, 273, 277, 278], "scope": [6, 37, 128, 132, 231, 259, 278], "high": [6, 7, 12, 16, 18, 23, 37, 55, 59, 60, 83, 95, 135, 182, 192, 197, 200, 202, 215, 220, 263, 274], "od": [6, 11, 20, 78, 113, 117, 128, 135, 216, 219, 279], "seen": [6, 16, 18, 29, 47, 80, 82, 97, 101, 117, 129, 173, 185, 189, 192, 195, 198, 218, 221, 238, 240, 250, 270, 273, 277], "hand": [6, 10, 16, 18, 20, 36, 37, 47, 48, 55, 61, 63, 82, 85, 86, 91, 95, 98, 113, 117, 118, 132, 136, 140, 157, 160, 178, 183, 186, 187, 189, 192, 193, 195, 197, 200, 212, 221, 233, 235, 237, 241, 244, 253, 255, 272], "less": [6, 7, 10, 11, 16, 33, 37, 38, 46, 47, 54, 55, 56, 59, 60, 61, 63, 69, 70, 71, 86, 91, 95, 103, 105, 118, 120, 168, 192, 195, 197, 198, 211, 212, 214, 215, 218, 220, 221, 222, 233, 235], "understand": [6, 12, 18, 19, 20, 25, 55, 56, 80, 118, 128, 130, 131, 135, 173, 185, 188, 191, 192, 197, 202, 212, 215, 234, 241, 269, 270, 277, 278], "clear": [6, 10, 18, 31, 45, 55, 80, 84, 110, 185, 186, 188, 193, 195, 198, 212, 220, 221, 225, 228, 233, 237, 255, 270], "begin": [6, 10, 12, 18, 20, 22, 55, 56, 60, 61, 63, 80, 86, 88, 91, 95, 122, 130, 131, 132, 133, 164, 173, 178, 186, 187, 191, 202, 212, 215, 218, 219, 221, 222, 233, 243, 270, 272, 274, 278], "convers": [6, 7, 10, 18, 37, 55, 75, 97, 132, 172, 190, 191, 192, 193, 195, 197, 199, 202, 215, 227, 234, 247], "aim": [6, 7, 73, 80, 173, 189, 212, 218, 221, 271, 272], "comment": [6, 7, 37, 46, 118, 120, 199, 202, 235, 240, 259], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 23, 29, 35, 38, 51, 55, 56, 58, 59, 60, 61, 69, 82, 84, 85, 91, 95, 97, 102, 103, 105, 109, 114, 117, 118, 120, 121, 122, 132, 135, 136, 141, 164, 178, 180, 181, 192, 193, 195, 198, 199, 200, 201, 202, 203, 210, 214, 215, 216, 218, 220, 222, 224, 234, 235, 237, 238, 240, 241, 243, 267, 273, 274, 278], "consum": [6, 37, 63, 114, 132], "human": [6, 14, 80, 170, 198, 202], "beings": 6, "english": [6, 56], "likewis": [6, 18, 36, 98, 121, 122], "reader": [6, 7, 20, 36, 38, 133, 189, 202, 237, 271, 276], "machineri": [6, 55, 197, 241], "mind": [6, 12, 15, 18, 23, 55, 91, 133, 188, 209, 210, 255, 273], "platform": [6, 55, 168, 186, 218, 234], "anyon": [6, 7, 10, 26, 198, 202, 266, 276, 277], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 32, 37, 46, 47, 55, 56, 60, 67, 80, 82, 91, 95, 135, 176, 182, 188, 190, 193, 195, 197, 198, 199, 202, 209, 211, 215, 217, 218, 221, 222, 223, 235, 237, 270, 272], "concis": [6, 135], "quick": [6, 7, 20, 55, 91, 95, 214, 220, 241], "depth": [6, 7, 9, 12, 13, 26, 46, 55, 120, 188, 189, 202, 264], "tripl": [6, 72, 91, 186, 187, 189, 197, 243], "quot": [6, 12, 37, 85, 202, 243], "raw": [6, 7, 37, 55, 56, 61, 96, 97, 162, 167, 192, 193, 198, 210, 214, 277], "backslash": [6, 55, 202], "blank": [6, 97, 114, 188], "close": [6, 11, 24, 37, 54, 55, 59, 60, 63, 71, 73, 80, 82, 84, 105, 121, 188, 189, 190, 196, 197, 210, 220, 221, 235, 268, 278], "rare": [6, 20, 55, 218, 222, 231, 270], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 31, 32, 37, 55, 57, 63, 85, 135, 162, 173, 178, 186, 189, 194, 197, 198, 199, 209, 222, 250, 267, 270, 273], "consist": [6, 7, 10, 11, 16, 18, 23, 36, 46, 47, 51, 55, 56, 60, 61, 63, 65, 71, 73, 80, 85, 98, 101, 129, 133, 142, 162, 168, 173, 176, 181, 188, 190, 192, 193, 195, 210, 218, 220, 221, 222, 226, 231, 234, 235, 240, 271, 273], "review": [6, 7, 134], "head": [6, 15, 36, 55, 220, 222, 228, 243, 273], "plural": [6, 7], "length": [6, 10, 37, 39, 45, 46, 47, 49, 53, 55, 56, 58, 60, 61, 63, 64, 67, 68, 70, 71, 72, 85, 86, 91, 94, 95, 98, 99, 109, 113, 117, 121, 122, 123, 133, 137, 141, 165, 170, 171, 173, 178, 181, 186, 197, 198, 202, 208, 212, 214, 218, 222, 233, 234, 240, 243, 247, 248, 256], "equal": [6, 10, 11, 14, 18, 19, 20, 25, 29, 33, 36, 37, 38, 44, 45, 46, 47, 51, 53, 54, 56, 57, 59, 60, 61, 63, 67, 68, 69, 70, 71, 72, 74, 80, 85, 86, 88, 91, 95, 98, 101, 105, 106, 110, 113, 115, 120, 130, 131, 152, 153, 168, 173, 178, 181, 186, 189, 190, 191, 192, 193, 195, 197, 198, 200, 202, 208, 210, 212, 215, 218, 219, 220, 221, 222, 228, 233, 234, 235, 240, 243, 247, 251, 256, 268, 271, 279], "clutter": 6, "harder": [6, 10, 18, 55, 80, 192, 233], "minim": [6, 18, 20, 35, 46, 47, 51, 54, 55, 56, 80, 82, 85, 95, 110, 122, 137, 191, 192, 193, 194, 195, 198, 201, 211, 214, 215, 220, 240, 244], "amount": [6, 36, 55, 56, 67, 128, 178, 183, 186, 195, 205, 233, 247, 248], "deprec": [6, 8, 13, 30, 47, 55, 68, 82, 86, 108, 112, 132, 198, 202, 222, 228, 231, 232, 236, 238, 239, 241, 245], "notifi": 6, "awai": [6, 36, 38, 56, 98, 99, 101, 120, 197, 202], "encourag": [6, 10, 36, 130, 131, 197], "label": [6, 36, 37, 49, 55, 65, 78, 82, 101, 141, 148, 152, 155, 157, 166, 168, 188, 202, 203, 205, 214, 225, 227, 228, 259, 277], "elabor": [6, 21, 183, 253], "suffic": [6, 190, 220], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 24, 37, 46, 54, 56, 57, 59, 60, 61, 63, 80, 82, 88, 128, 130, 168, 186, 192, 195, 199, 201, 212, 214, 221, 222, 226, 227, 235, 237, 241, 243, 268, 270, 273, 274], "demonstr": [6, 7, 12, 18, 20, 23, 24, 46, 47, 55, 82, 95, 110, 112, 118, 122, 123, 132, 189, 192, 252, 278], "api": [6, 7, 10, 18, 21, 37, 55, 67, 75, 81, 96, 97, 104, 135, 164, 177, 188, 195, 215, 216, 217, 239, 241, 244, 250, 251, 261, 263, 271, 272, 275], "simpl": [6, 11, 12, 16, 18, 20, 23, 24, 27, 36, 37, 46, 54, 55, 59, 63, 67, 71, 73, 80, 82, 84, 91, 95, 96, 98, 99, 105, 106, 109, 112, 113, 115, 117, 120, 122, 123, 125, 127, 128, 132, 136, 142, 156, 157, 165, 166, 167, 178, 185, 186, 192, 193, 194, 198, 199, 202, 204, 209, 211, 212, 214, 215, 218, 221, 228, 234, 235, 240, 244, 246, 247, 248, 249, 253, 267, 270, 273, 274, 278], "too": [6, 12, 20, 25, 46, 47, 55, 61, 63, 65, 68, 70, 80, 85, 94, 95, 96, 130, 137, 209, 210, 214, 215, 218, 220, 221, 222, 233, 234, 249, 250], "thought": [6, 11, 55, 209, 218, 270, 273], "perfect": [6, 20, 46, 55, 95, 215, 221, 272, 273], "tell": [6, 7, 18, 19, 23, 37, 47, 56, 59, 63, 86, 97, 117, 173, 192, 197, 201, 209, 212, 218, 234, 270], "think": [6, 10, 11, 18, 19, 20, 23, 27, 35, 46, 120, 173, 237, 241, 270, 278], "test_": [6, 233], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 219, 220, 268, 272, 279], "co": [6, 10, 12, 20, 22, 23, 24, 25, 29, 35, 37, 54, 55, 57, 59, 60, 62, 63, 64, 65, 68, 69, 71, 73, 77, 78, 79, 80, 82, 86, 91, 95, 97, 110, 111, 112, 118, 120, 121, 123, 125, 126, 127, 132, 135, 140, 142, 178, 180, 181, 183, 185, 186, 187, 188, 192, 195, 198, 199, 201, 202, 203, 204, 205, 209, 210, 211, 212, 214, 218, 220, 221, 222, 223, 229, 241, 247, 248, 249, 250, 251, 256, 267, 268, 270, 272, 278, 279], "sin": [6, 7, 10, 11, 12, 18, 20, 22, 23, 24, 25, 27, 29, 35, 37, 54, 55, 57, 59, 60, 62, 63, 64, 65, 69, 73, 74, 77, 78, 79, 80, 82, 83, 86, 91, 96, 97, 107, 110, 111, 112, 117, 118, 120, 121, 123, 125, 126, 127, 132, 135, 140, 142, 166, 178, 180, 181, 183, 185, 186, 187, 188, 190, 192, 198, 199, 201, 202, 203, 204, 205, 209, 210, 211, 212, 214, 217, 218, 220, 221, 223, 229, 235, 241, 247, 248, 249, 250, 251, 256, 267, 268, 270, 272, 273, 278, 279], "hint": [6, 20, 36, 39, 46, 55, 58, 61, 82, 86, 91, 95, 105, 135, 145, 149, 165, 167, 168, 178, 198, 209, 212, 216, 220, 278], "1st_exact": 6, "eq": [6, 11, 12, 14, 18, 20, 25, 33, 35, 37, 60, 61, 63, 65, 68, 72, 80, 85, 171, 188, 189, 193, 198, 200, 202, 204, 208, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 234, 235, 241, 247, 270, 272, 279], "c1": [6, 16, 56, 65, 72, 86, 88, 112, 154, 168, 210, 215, 218, 220, 252, 279], "comma": [6, 7, 12, 37, 55, 202, 241, 270], "readabl": [6, 28, 36, 83, 109, 198, 201, 202, 209, 211, 244], "accept": [6, 11, 20, 25, 36, 37, 46, 55, 61, 69, 82, 85, 86, 88, 91, 94, 97, 118, 162, 178, 182, 188, 197, 198, 201, 202, 203, 210, 212, 214, 220, 234, 241, 247, 248, 251, 274], "rang": [6, 10, 11, 16, 20, 23, 35, 37, 44, 45, 46, 47, 49, 51, 55, 56, 60, 61, 63, 69, 86, 91, 95, 99, 103, 107, 137, 168, 188, 192, 193, 194, 195, 197, 198, 199, 204, 205, 208, 211, 214, 218, 221, 222, 223, 225, 227, 233, 240, 267, 278], "30": [6, 29, 35, 37, 41, 55, 56, 58, 59, 60, 63, 69, 71, 82, 86, 91, 92, 95, 98, 99, 118, 141, 191, 193, 197, 198, 202, 208, 211, 214, 222, 223, 278], "7": [6, 12, 18, 20, 22, 29, 31, 32, 35, 37, 39, 41, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 65, 68, 69, 70, 71, 77, 80, 82, 85, 86, 88, 89, 91, 95, 97, 98, 100, 103, 105, 120, 127, 130, 131, 135, 168, 173, 175, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 227, 228, 233, 234, 237, 240, 241, 247, 256, 268, 273, 274, 277], "8": [6, 16, 24, 27, 29, 30, 35, 37, 39, 46, 47, 48, 51, 53, 55, 56, 58, 59, 60, 61, 63, 65, 68, 69, 71, 77, 80, 82, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 103, 105, 107, 120, 135, 140, 141, 152, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 204, 205, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 227, 233, 235, 237, 240, 247, 249, 250, 256, 267, 268, 272, 274, 278], "9": [6, 14, 25, 27, 35, 37, 43, 45, 46, 47, 51, 53, 54, 55, 56, 58, 60, 61, 63, 64, 65, 68, 69, 71, 77, 80, 82, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 103, 105, 106, 107, 108, 110, 118, 120, 123, 129, 135, 137, 141, 173, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 208, 210, 211, 212, 214, 215, 218, 220, 221, 222, 223, 233, 237, 240, 247, 249, 272, 274, 279], "11": [6, 18, 31, 32, 37, 46, 49, 51, 53, 55, 56, 58, 60, 63, 67, 68, 69, 71, 72, 80, 82, 85, 86, 87, 91, 95, 97, 100, 105, 118, 120, 133, 152, 162, 187, 188, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 209, 211, 215, 218, 220, 221, 222, 223, 234, 240, 250], "12": [6, 12, 20, 29, 35, 36, 37, 41, 43, 44, 46, 47, 48, 51, 53, 54, 55, 56, 58, 60, 61, 63, 65, 68, 69, 71, 80, 82, 86, 91, 92, 95, 98, 99, 103, 105, 107, 112, 120, 121, 133, 165, 178, 187, 190, 191, 192, 195, 197, 198, 199, 201, 202, 208, 210, 211, 215, 217, 218, 222, 223, 234, 237, 240, 249, 274, 278], "13": [6, 29, 37, 44, 46, 51, 55, 56, 58, 60, 63, 67, 68, 69, 70, 80, 85, 91, 95, 99, 103, 105, 118, 133, 188, 195, 197, 198, 199, 201, 202, 208, 215, 217, 219, 220, 222, 223, 233, 234, 256], "14": [6, 37, 44, 46, 50, 51, 53, 55, 56, 60, 61, 63, 80, 91, 92, 95, 96, 98, 103, 118, 187, 188, 191, 193, 195, 196, 197, 198, 199, 201, 202, 211, 214, 215, 218, 220, 222, 223, 268], "15": [6, 12, 20, 35, 41, 44, 46, 51, 53, 55, 56, 58, 59, 60, 63, 65, 68, 69, 71, 72, 80, 82, 85, 86, 87, 91, 92, 95, 98, 110, 141, 187, 188, 190, 191, 192, 193, 197, 198, 199, 201, 202, 204, 208, 209, 211, 214, 215, 219, 220, 221, 222, 223, 240, 267, 268, 273, 274], "16": [6, 25, 29, 35, 37, 46, 47, 50, 54, 55, 56, 60, 63, 64, 65, 69, 80, 82, 85, 91, 92, 94, 95, 99, 183, 190, 191, 192, 195, 196, 197, 198, 201, 202, 208, 210, 211, 212, 215, 222, 223, 240, 247, 255, 274], "17": [6, 10, 24, 25, 44, 46, 47, 55, 56, 59, 60, 61, 65, 68, 71, 80, 91, 95, 105, 192, 193, 197, 198, 201, 202, 209, 211, 215, 218, 223, 237, 241, 272], "18": [6, 24, 46, 47, 58, 60, 63, 65, 68, 71, 87, 91, 95, 98, 99, 103, 105, 107, 179, 187, 195, 196, 201, 202, 210, 211, 215, 218, 220, 221, 222, 223, 249], "19": [6, 24, 46, 55, 58, 63, 65, 68, 71, 91, 95, 97, 98, 187, 193, 197, 198, 201, 211, 215, 217, 220, 234, 267], "20": [6, 12, 24, 25, 33, 37, 44, 46, 47, 54, 55, 56, 59, 60, 63, 71, 72, 82, 91, 95, 98, 99, 101, 105, 115, 173, 175, 187, 188, 192, 196, 197, 198, 199, 201, 202, 208, 209, 210, 211, 214, 215, 218, 221, 222, 247, 268], "21": [6, 10, 41, 46, 55, 58, 60, 68, 69, 77, 91, 95, 97, 98, 133, 188, 193, 195, 196, 197, 199, 201, 202, 208, 218, 222, 223, 278], "22": [6, 12, 46, 55, 58, 59, 60, 63, 91, 95, 98, 99, 133, 196, 201, 214, 215, 220, 222], "23": [6, 35, 46, 47, 55, 58, 61, 63, 69, 71, 91, 95, 98, 133, 193, 198, 201, 208, 215, 240], "24": [6, 24, 29, 35, 43, 47, 48, 55, 58, 60, 63, 69, 77, 82, 91, 95, 98, 99, 103, 105, 165, 175, 187, 193, 195, 197, 198, 199, 201, 204, 209, 215, 218, 222, 237, 240, 256, 268, 274], "25": [6, 12, 24, 46, 47, 56, 58, 60, 63, 65, 68, 70, 87, 91, 94, 95, 98, 99, 105, 110, 115, 181, 187, 195, 197, 198, 201, 202, 208, 209, 211, 215, 217, 218, 219, 222, 234], "26": [6, 44, 55, 56, 58, 63, 67, 91, 95, 98, 99, 198, 215, 222], "27": [6, 23, 37, 38, 46, 50, 60, 65, 91, 95, 98, 99, 105, 107, 195, 198, 220], "28": [6, 37, 46, 54, 58, 59, 63, 91, 95, 98, 120, 211, 215, 218, 273], "29": [6, 29, 44, 46, 47, 55, 56, 58, 60, 61, 68, 69, 91, 95, 105, 157, 192, 210, 222], "assumpt": [6, 11, 12, 17, 19, 21, 23, 30, 31, 33, 34, 36, 37, 46, 47, 49, 54, 57, 59, 61, 62, 82, 85, 86, 91, 92, 98, 105, 109, 135, 175, 180, 191, 201, 202, 210, 211, 214, 218, 220, 221, 227, 235, 240, 257, 258, 278], "parenthes": [6, 12, 55, 97, 109, 156, 157, 186, 202, 226, 243], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 23, 25, 31, 32, 35, 46, 47, 51, 54, 55, 56, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 73, 80, 82, 83, 84, 85, 86, 87, 88, 91, 95, 96, 97, 98, 99, 101, 103, 105, 109, 113, 118, 129, 135, 140, 154, 162, 163, 164, 166, 178, 181, 182, 184, 186, 188, 189, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 210, 211, 212, 214, 215, 216, 217, 220, 226, 227, 228, 231, 233, 234, 235, 240, 241, 243, 250, 253, 256, 259, 264, 268, 270, 272, 273, 274, 277, 278, 279], "enclos": [6, 65, 66, 67, 71, 94, 106, 202, 212, 241], "colon": [6, 55], "preced": [6, 7, 12, 38, 47, 55, 56, 59, 60, 148, 214, 241], "space": [6, 12, 20, 35, 36, 37, 55, 56, 57, 64, 65, 66, 68, 70, 71, 84, 91, 97, 98, 107, 113, 114, 115, 137, 139, 142, 152, 155, 157, 163, 165, 172, 178, 181, 183, 186, 187, 188, 189, 197, 213, 221, 222, 233, 237, 247, 248, 250, 251, 252, 253, 255, 256, 270, 273], "omit": [6, 10, 18, 20, 37, 47, 54, 55, 56, 60, 80, 82, 85, 91, 170, 202, 203, 210, 212, 220, 226, 235, 240, 268], "absent": [6, 39, 220], "specifi": [6, 7, 10, 14, 18, 20, 24, 25, 36, 37, 38, 50, 54, 55, 56, 57, 58, 61, 63, 64, 68, 71, 80, 82, 84, 85, 86, 88, 91, 95, 97, 98, 99, 105, 110, 112, 113, 117, 118, 120, 122, 123, 125, 128, 130, 131, 132, 133, 135, 136, 152, 157, 162, 163, 165, 166, 171, 177, 178, 180, 181, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 205, 208, 209, 210, 212, 214, 218, 219, 220, 221, 222, 223, 227, 228, 229, 233, 234, 235, 240, 241, 247, 248, 249, 252, 255, 264, 274], "displai": [6, 7, 12, 18, 19, 55, 56, 59, 80, 84, 98, 99, 103, 139, 172, 178, 181, 182, 188, 192, 193, 202, 210, 226, 233], "signatur": [6, 20, 31, 32, 47, 55, 91, 235, 236, 240, 241], "brace": [6, 60, 118, 202], "appear": [6, 7, 11, 12, 14, 36, 37, 39, 44, 46, 55, 56, 60, 61, 64, 65, 68, 71, 74, 78, 80, 82, 86, 91, 95, 97, 118, 122, 152, 168, 170, 173, 188, 190, 192, 195, 197, 198, 202, 211, 214, 218, 219, 220, 222, 226, 228, 233, 240, 241, 247, 251], "shape": [6, 10, 37, 71, 86, 88, 91, 93, 94, 103, 105, 112, 117, 118, 178, 188, 189, 191, 202, 205, 212, 222, 223, 224, 225, 226, 227, 228, 241, 259, 277], "combin": [6, 10, 12, 20, 36, 55, 59, 60, 63, 75, 82, 84, 85, 86, 95, 99, 105, 112, 117, 121, 128, 136, 147, 154, 162, 163, 165, 166, 167, 171, 173, 174, 189, 190, 192, 193, 195, 197, 198, 202, 203, 211, 212, 214, 215, 218, 220, 222, 223, 237, 240, 267, 270, 273], "incorrectli": [6, 10, 20, 64, 65, 91, 190], "opt_cs": 6, "canon": [6, 11, 18, 37, 39, 44, 46, 47, 51, 55, 56, 57, 61, 71, 80, 85, 91, 95, 97, 113, 145, 149, 168, 170, 173, 175, 195, 203, 210, 211, 214, 220, 222, 228, 240, 278], "find": [6, 11, 12, 14, 16, 17, 20, 22, 23, 25, 29, 32, 35, 37, 38, 46, 49, 50, 51, 54, 55, 59, 61, 63, 65, 67, 68, 69, 72, 77, 80, 82, 84, 91, 95, 97, 111, 119, 126, 133, 135, 137, 153, 160, 162, 163, 164, 168, 171, 173, 185, 188, 189, 190, 191, 192, 193, 194, 195, 199, 201, 202, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 228, 237, 240, 241, 243, 247, 256, 268, 270, 272, 274, 279], "optim": [6, 11, 24, 37, 39, 46, 59, 85, 95, 109, 135, 148, 152, 198, 202, 203, 211, 214, 222, 234, 259], "mul": [6, 10, 11, 12, 15, 20, 29, 80, 82, 86, 95, 148, 152, 162, 163, 191, 192, 193, 197, 198, 202, 203, 204, 211, 214, 218, 219, 220, 221, 226, 258, 273], "pow": [6, 10, 11, 12, 29, 34, 37, 56, 61, 80, 86, 95, 167, 191, 192, 193, 198, 202, 204, 211, 214, 220, 221, 273, 277], "neg": [6, 11, 12, 18, 19, 23, 32, 34, 37, 38, 50, 54, 55, 60, 61, 63, 65, 67, 68, 71, 80, 82, 84, 85, 86, 91, 94, 95, 98, 99, 101, 102, 103, 105, 168, 178, 187, 190, 191, 193, 195, 197, 198, 199, 202, 208, 210, 211, 212, 214, 215, 218, 220, 221, 222], "coeffici": [6, 14, 16, 18, 32, 35, 37, 54, 55, 57, 59, 60, 63, 67, 68, 73, 74, 77, 78, 80, 84, 85, 88, 91, 92, 95, 106, 113, 118, 141, 155, 165, 173, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 204, 205, 208, 209, 212, 214, 215, 217, 218, 219, 220, 221, 222, 228, 234, 250, 253, 273, 278], "none": [6, 7, 10, 11, 18, 19, 20, 29, 30, 31, 32, 33, 35, 36, 37, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 82, 83, 85, 86, 88, 91, 92, 95, 96, 97, 98, 105, 110, 111, 112, 113, 114, 115, 117, 118, 137, 139, 141, 142, 148, 153, 158, 163, 165, 168, 170, 174, 175, 176, 178, 180, 181, 182, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 240, 241, 243, 246, 247, 249, 274, 278, 279], "process": [6, 7, 10, 11, 12, 18, 34, 37, 46, 47, 53, 55, 56, 61, 63, 71, 80, 82, 91, 95, 105, 114, 118, 120, 126, 129, 130, 132, 135, 188, 189, 195, 202, 203, 210, 214, 218, 220, 233, 237, 278], "concern": [6, 11, 18, 35, 38, 54, 59, 95, 183, 188, 190, 191, 192, 201, 202, 203, 214, 215, 220, 234, 235, 237, 243], "item": [6, 7, 11, 12, 14, 37, 44, 45, 47, 55, 60, 66, 72, 86, 91, 95, 113, 188, 192, 195, 198, 202, 210, 218, 219, 222, 233, 234, 237, 240, 241, 278], "fragment": [6, 56], "desir": [6, 10, 12, 16, 20, 25, 28, 46, 47, 55, 56, 58, 59, 60, 61, 65, 69, 71, 85, 86, 91, 94, 95, 96, 113, 114, 115, 117, 128, 132, 153, 178, 185, 186, 191, 193, 195, 197, 198, 199, 202, 203, 205, 210, 214, 218, 220, 221, 234, 236, 237, 240, 253, 267], "span": [6, 10, 84, 91, 98, 99, 112, 197, 202, 238, 274], "subsequ": [6, 12, 55, 61, 178, 193, 195, 198, 237, 240, 250, 253], "indent": [6, 12, 243], "embed": [6, 7, 35, 47, 55, 83, 197], "hyperlink": 6, "classnam": 6, "erf": [6, 63, 80, 82, 202, 212, 222], "gauss": [6, 63, 82, 91, 137, 190, 197, 200, 220, 221], "erfc": [6, 63, 80, 202, 222], "complementari": [6, 63, 105], "erfi": [6, 63, 80, 202], "erf2": [6, 63, 202], "erfinv": [6, 63, 202, 222], "invers": [6, 29, 46, 47, 55, 56, 57, 62, 63, 81, 82, 88, 91, 95, 112, 113, 157, 161, 162, 165, 170, 173, 189, 190, 191, 193, 195, 198, 199, 202, 204, 212, 214, 218, 220, 221, 222, 240, 274, 278], "erfcinv": [6, 63, 202], "erf2inv": [6, 63, 202], "besselj": [6, 63, 77, 202, 214, 218, 272], "besselbas": [6, 63], "bessel": [6, 7, 61, 62, 73, 82, 198, 214, 218, 222, 272], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 36, 37, 57, 60, 63, 75, 82, 86, 98, 101, 113, 118, 131, 183, 190, 192, 193, 198, 203, 204, 210, 218, 219, 222, 240, 253, 255, 258, 259, 268, 278], "bess": [6, 63, 202, 214, 218, 222], "besselk": [6, 63, 202, 222], "cite": [6, 21], "citat": [6, 54, 196], "meant": [6, 7, 10, 12, 18, 20, 37, 55, 63, 68, 82, 95, 118, 135, 188, 193, 210, 214, 219, 251, 273], "augment": [6, 37, 91, 113, 130, 131, 135, 200, 220, 221, 238, 241, 279], "freeli": [6, 28, 89, 112, 189], "wikipedia": [6, 11, 18, 20, 29, 31, 32, 33, 35, 36, 37, 43, 44, 46, 47, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 71, 72, 73, 82, 84, 85, 86, 88, 91, 95, 103, 105, 108, 137, 139, 140, 141, 143, 144, 145, 149, 150, 151, 154, 156, 157, 166, 168, 171, 178, 180, 184, 198, 205, 209, 210, 211, 218, 221, 222, 235, 240, 247, 248, 252, 254, 256, 272, 274, 276], "wolfram": [6, 33, 48, 49, 55, 56, 58, 60, 61, 63, 65, 71, 82, 91, 95, 97, 196, 202, 204, 205, 207, 210, 215, 222, 240, 274], "mathworld": [6, 11, 33, 48, 49, 55, 56, 58, 60, 61, 63, 65, 71, 82, 91, 95, 196, 205, 210, 215, 222, 240], "nist": [6, 61, 63, 173], "digit": [6, 11, 12, 24, 37, 55, 56, 58, 59, 65, 82, 85, 95, 128, 178, 192, 198, 209, 214, 240, 262, 267], "dlmf": [6, 61, 63], "suffer": 6, "rot": [6, 71, 165], "publish": [6, 80, 212], "identifi": [6, 10, 18, 19, 35, 48, 55, 58, 59, 82, 91, 101, 130, 156, 157, 189, 192, 193, 203, 211, 214, 218, 219, 221, 222, 241, 244], "clickabl": 6, "kozen89": [6, 195, 196], "kozen": [6, 196], "landau": [6, 196, 268], "polynomi": [6, 7, 11, 16, 18, 22, 25, 33, 46, 54, 55, 56, 59, 60, 62, 73, 74, 75, 76, 78, 82, 85, 86, 88, 91, 95, 99, 105, 133, 135, 189, 191, 196, 200, 204, 209, 211, 212, 214, 215, 216, 217, 218, 221, 233, 257, 264, 269, 274, 279], "decomposit": [6, 46, 53, 87, 88, 91, 191, 193, 194, 195, 196, 204, 278], "1989": [6, 196, 220], "pp": [6, 46, 47, 53, 54, 55, 56, 60, 61, 82, 86, 91, 122, 132, 187, 190, 195, 196, 218, 219, 222], "445": [6, 196], "456": [6, 55, 196], "abramowitz": [6, 63], "milton": [6, 63], "stegun": [6, 63], "iren": [6, 63], "chapter": [6, 46, 63, 95, 118, 196], "formula": [6, 16, 35, 49, 54, 55, 59, 60, 61, 63, 68, 81, 85, 91, 95, 187, 189, 195, 198, 202, 204, 208, 211, 214, 215, 218, 272, 278], "tabl": [6, 18, 38, 46, 55, 60, 63, 76, 81, 82, 91, 95, 112, 135, 187, 197, 224, 260], "ed": [6, 47, 63, 91, 196, 220, 222], "1965": [6, 63, 86], "luke": [6, 63, 80, 212], "l": [6, 10, 12, 35, 36, 37, 38, 44, 46, 47, 54, 56, 63, 66, 67, 68, 69, 70, 72, 73, 78, 80, 82, 84, 87, 88, 91, 95, 98, 99, 105, 107, 112, 113, 115, 117, 118, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 140, 166, 169, 170, 171, 173, 185, 186, 187, 189, 191, 193, 195, 196, 202, 204, 205, 211, 212, 215, 218, 220, 222, 226, 227, 228, 229, 233, 235, 240, 256, 278], "Their": [6, 55, 63, 80, 187, 188, 192, 195, 212], "approxim": [6, 12, 17, 25, 35, 46, 54, 55, 56, 59, 63, 65, 71, 80, 82, 91, 95, 99, 102, 137, 171, 188, 192, 193, 198, 205, 209, 212, 222, 259, 268, 272], "1969": [6, 56, 63, 80, 196, 212], "en": [6, 7, 18, 20, 29, 31, 32, 33, 35, 36, 37, 43, 44, 46, 47, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 71, 72, 73, 82, 83, 84, 85, 86, 88, 91, 95, 103, 105, 108, 137, 139, 140, 141, 143, 144, 145, 149, 150, 151, 154, 156, 157, 166, 168, 178, 180, 184, 198, 199, 205, 209, 210, 211, 218, 221, 222, 235, 240, 241, 247, 248, 252, 254, 256, 274], "bessel_funct": [6, 63], "typefunct": [6, 63], "gamma": [6, 7, 12, 20, 54, 55, 57, 59, 60, 62, 80, 82, 108, 135, 165, 186, 187, 202, 212, 214, 218, 222, 263, 278], "infti": [6, 11, 18, 33, 54, 55, 56, 60, 61, 63, 80, 82, 189, 198, 205, 209, 212, 218, 221, 222, 268, 272, 278], "mathrm": [6, 27, 45, 54, 55, 56, 63, 80, 82, 91, 193, 195, 202, 210, 212, 218, 221, 222, 265, 268, 272], "factori": [6, 16, 20, 54, 55, 59, 62, 63, 91, 95, 97, 187, 193, 195, 197, 198, 202, 204, 214, 220, 222, 235, 236, 240, 241, 278], "z": [6, 10, 11, 12, 14, 18, 20, 24, 33, 34, 37, 38, 46, 47, 54, 55, 56, 57, 58, 60, 61, 63, 67, 68, 69, 70, 71, 80, 82, 85, 86, 88, 91, 97, 98, 99, 107, 110, 111, 112, 115, 118, 120, 121, 122, 123, 125, 126, 127, 129, 132, 133, 135, 136, 137, 146, 148, 152, 155, 162, 163, 165, 169, 173, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 234, 235, 241, 247, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 277, 278, 279], "whole": [6, 10, 18, 55, 57, 63, 82, 99, 107, 188, 189, 197, 198, 202, 205, 210, 212, 218, 221, 240], "complex": [6, 10, 11, 12, 15, 18, 20, 23, 25, 29, 32, 34, 35, 37, 46, 55, 56, 58, 59, 60, 62, 63, 67, 77, 80, 86, 87, 91, 95, 96, 97, 103, 105, 109, 118, 135, 137, 141, 151, 154, 156, 157, 168, 177, 178, 186, 190, 191, 193, 194, 197, 198, 202, 203, 207, 212, 214, 218, 220, 221, 222, 235, 243, 278, 279], "plane": [6, 29, 55, 63, 65, 67, 68, 70, 71, 81, 82, 103, 112, 120, 140, 141, 185, 186, 210, 221, 256, 278], "pole": [6, 11, 63, 80, 104, 105, 112, 141, 209, 212, 218], "pi": [6, 10, 11, 12, 15, 18, 20, 23, 25, 28, 29, 30, 32, 33, 34, 35, 37, 47, 54, 57, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 74, 80, 82, 91, 95, 107, 120, 135, 137, 139, 140, 141, 142, 144, 152, 163, 165, 166, 169, 171, 178, 187, 188, 190, 192, 193, 198, 202, 205, 209, 210, 211, 212, 214, 217, 218, 220, 221, 222, 240, 247, 249, 256, 267, 272, 278], "oo": [6, 11, 14, 18, 19, 33, 35, 54, 55, 59, 60, 61, 63, 68, 80, 82, 85, 91, 105, 107, 154, 166, 169, 193, 195, 198, 207, 208, 209, 210, 214, 217, 218, 220, 221, 222, 227, 240, 243, 268, 272], "known": [6, 11, 18, 19, 20, 32, 36, 37, 38, 44, 46, 47, 55, 56, 59, 60, 63, 65, 68, 73, 80, 82, 83, 92, 95, 103, 105, 106, 108, 110, 115, 132, 171, 178, 185, 191, 192, 193, 197, 198, 202, 205, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 222, 240, 241, 247, 253, 255, 278], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 25, 29, 33, 34, 35, 37, 55, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 79, 80, 82, 83, 86, 87, 91, 95, 97, 98, 101, 105, 107, 120, 137, 139, 141, 142, 147, 152, 162, 163, 165, 166, 168, 169, 171, 178, 183, 186, 187, 190, 192, 193, 195, 197, 198, 201, 202, 203, 208, 211, 212, 214, 215, 217, 218, 220, 221, 222, 240, 241, 243, 247, 255, 256, 259, 267, 272, 277, 278, 279], "obei": [6, 63, 187, 202, 212], "mirror": [6, 63, 82, 141], "symmetri": [6, 10, 43, 48, 51, 63, 86, 147, 187, 218, 226, 228, 267, 278], "conjug": [6, 33, 44, 45, 46, 55, 62, 63, 86, 91, 107, 137, 151, 154, 168, 198, 202, 218, 228], "differenti": [6, 7, 10, 11, 22, 35, 55, 60, 61, 63, 72, 73, 75, 78, 105, 112, 113, 117, 118, 120, 122, 125, 128, 129, 130, 131, 132, 135, 136, 157, 163, 177, 178, 180, 181, 183, 186, 189, 195, 199, 201, 202, 207, 212, 214, 216, 218, 219, 247, 253, 254, 257, 264, 268, 269, 272], "polygamma": [6, 60, 63, 202], "seri": [6, 16, 35, 36, 37, 38, 45, 46, 54, 55, 57, 59, 60, 61, 63, 75, 78, 79, 80, 84, 95, 102, 104, 105, 118, 125, 127, 135, 181, 185, 194, 195, 202, 207, 208, 212, 218, 221, 258, 264, 269], "expans": [6, 16, 20, 37, 55, 57, 60, 61, 63, 75, 82, 91, 95, 132, 147, 149, 198, 199, 204, 205, 206, 211, 213, 218, 220, 221, 258, 269, 278], "eulergamma": [6, 59, 60, 63], "zeta": [6, 11, 12, 54, 55, 59, 60, 62, 193, 197, 202, 209, 222], "40": [6, 25, 37, 58, 60, 63, 65, 72, 86, 91, 95, 98, 188, 199, 201, 202, 222, 243, 267], "288037795340032417959588909060233922890": [6, 63], "49801566811835604271": [6, 63], "15494982830181068512": [6, 63], "lowergamma": [6, 63, 222], "lower": [6, 10, 11, 18, 32, 35, 37, 46, 47, 54, 55, 57, 63, 64, 66, 71, 72, 82, 86, 87, 88, 91, 103, 108, 112, 168, 181, 187, 189, 191, 193, 195, 198, 202, 211, 212, 214, 218, 225, 227, 228, 237, 247, 268, 276], "uppergamma": [6, 60, 63, 202, 222], "upper": [6, 32, 54, 56, 59, 63, 64, 71, 72, 86, 87, 88, 91, 94, 95, 103, 112, 161, 168, 187, 191, 193, 195, 197, 198, 202, 212, 220, 225, 227, 247], "loggamma": [6, 7, 63, 202], "log": [6, 7, 12, 20, 27, 29, 35, 37, 46, 54, 55, 59, 60, 62, 63, 73, 77, 79, 80, 82, 86, 91, 95, 188, 193, 202, 204, 209, 212, 214, 218, 221, 222, 229, 268, 278, 279], "digamma": [6, 60, 63, 202], "trigamma": [6, 63, 202], "beta": [6, 12, 37, 46, 55, 62, 82, 165, 178, 187, 197, 199, 202, 218, 222], "euler": [6, 35, 36, 54, 55, 56, 59, 62, 63, 71, 77, 83, 95, 165, 178, 182, 186, 187, 198, 202, 218, 222, 247, 248], "gamma_funct": [6, 63], "gov": [6, 61, 63], "gammafunct": [6, 63], "gammabetaerf": [6, 60, 63], "unusu": [6, 18, 120, 233], "inlin": [6, 83, 182, 202, 235], "pretti": [6, 11, 20, 36, 37, 63, 82, 83, 91, 95, 99, 105, 120, 182, 212, 214, 221, 255, 265, 269, 272, 274, 278], "As": [6, 10, 15, 16, 19, 20, 24, 28, 37, 46, 47, 55, 56, 59, 60, 61, 63, 79, 80, 85, 91, 94, 95, 97, 117, 118, 120, 122, 129, 132, 133, 168, 173, 185, 189, 190, 192, 193, 195, 198, 199, 201, 202, 209, 210, 212, 218, 221, 222, 240, 241, 250, 251, 267, 268, 270, 272, 273, 274, 277, 278], "literatur": [6, 11, 80, 172, 194], "fact": [6, 10, 11, 18, 19, 20, 23, 32, 33, 55, 60, 63, 73, 80, 95, 101, 120, 132, 173, 189, 190, 192, 195, 197, 199, 201, 212, 214, 218, 221, 233, 241, 255, 267, 270, 271, 272, 273, 278], "eval": [6, 10, 18, 31, 32, 37, 55, 61, 63, 154, 155, 168, 193, 198, 202, 235, 267], "illumin": 6, "tone": 6, "narr": [6, 8, 271], "excerpt": 6, "geometri": [6, 64, 65, 66, 68, 69, 70, 71, 72, 82, 128, 141, 194, 249, 256, 257, 264, 272], "autofunct": 6, "intersect": [6, 18, 23, 35, 36, 46, 65, 66, 68, 69, 70, 71, 72, 141, 189, 198, 202, 208, 209, 221, 264], "convex_hul": [6, 67, 71, 72], "are_similar": [6, 66, 67, 72], "autoclass": 6, "linearent": [6, 65, 67, 68, 69, 70, 71], "rai": [6, 65, 67, 68, 69, 71, 72, 137, 141], "segment": [6, 10, 46, 65, 67, 68, 69, 70, 71, 72, 185, 188, 218, 233], "curv": [6, 36, 57, 67, 82, 95, 98, 137, 188, 189, 218, 247, 256, 268], "ellips": [6, 66, 67, 71, 140, 188, 202, 277], "circl": [6, 20, 55, 65, 66, 67, 69, 70, 71, 72, 80, 141, 148, 188, 221, 247, 249, 256], "polygon": [6, 65, 66, 67, 72, 81, 188, 256], "regularpolygon": [6, 66, 67, 71, 188], "triangl": [6, 20, 36, 60, 66, 67, 71, 72, 82, 86, 95, 187, 188, 249, 256], "rel": [6, 7, 10, 36, 37, 45, 46, 47, 48, 52, 53, 54, 56, 59, 66, 80, 95, 110, 112, 115, 123, 132, 133, 140, 167, 178, 181, 185, 186, 189, 191, 192, 195, 197, 210, 212, 217, 220, 222, 233, 240, 250, 251, 255, 272], "cumbersom": [6, 25], "viewcod": 6, "aco": [6, 12, 29, 62, 68, 71, 120, 135, 141, 178, 202, 218, 247, 278], "obj": [6, 10, 18, 55, 193, 198, 202, 236], "qualifi": [6, 244], "elementari": [6, 18, 19, 20, 46, 55, 56, 59, 62, 63, 77, 80, 82, 86, 91, 95, 133, 161, 164, 194, 198, 199, 206, 240, 241, 250, 260], "trigonometr": [6, 20, 25, 55, 62, 82, 199, 205, 213, 217, 218, 221, 241, 258, 269, 279], "trail": [6, 47, 95, 193, 195, 198, 238, 243, 262], "pair": [6, 12, 16, 36, 37, 46, 47, 55, 56, 61, 67, 72, 79, 91, 95, 118, 122, 158, 160, 162, 163, 168, 177, 187, 189, 192, 195, 197, 198, 203, 208, 209, 211, 212, 214, 215, 218, 221, 222, 235, 240, 250, 267, 274], "www": [6, 7, 29, 35, 46, 47, 56, 58, 60, 63, 77, 82, 83, 95, 103, 182, 196, 201, 202, 211, 214, 215, 218, 222, 240, 274, 277], "master": [6, 7, 27, 82, 233], "usag": [6, 7, 11, 12, 18, 19, 20, 28, 31, 57, 61, 82, 128, 165, 183, 188, 189, 194, 195, 202, 210, 212, 215, 218, 219, 223, 237, 241, 242, 253, 254, 264, 273], "expect": [6, 7, 12, 18, 20, 36, 38, 40, 55, 61, 63, 67, 85, 95, 96, 105, 118, 162, 192, 195, 197, 199, 200, 209, 214, 217, 220, 221, 222, 231, 233, 234, 237, 240, 241, 272, 273], "vector": [6, 16, 29, 33, 37, 39, 42, 46, 47, 57, 63, 68, 69, 70, 77, 78, 84, 86, 91, 96, 98, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 140, 141, 154, 163, 165, 170, 173, 180, 181, 182, 189, 194, 197, 202, 212, 218, 220, 222, 227, 228, 233, 234, 248, 252, 257, 261, 263, 274], "dynamicsymbol": [6, 109, 110, 111, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 178, 181, 182, 183, 184, 185, 186], "custom": [6, 10, 21, 37, 47, 55, 59, 62, 83, 86, 91, 111, 112, 177, 182, 183, 204, 208, 215, 222, 228, 234, 241, 247, 255, 264, 272, 274], "sine": [6, 20, 55, 61, 63, 80, 82, 142, 199, 205, 211, 267], "expand": [6, 10, 11, 12, 16, 18, 37, 57, 59, 60, 61, 63, 80, 82, 86, 105, 118, 120, 135, 149, 157, 160, 167, 168, 190, 192, 194, 195, 197, 198, 199, 202, 205, 209, 211, 212, 214, 218, 221, 222, 226, 234, 241, 252, 258, 267, 272], "troubleshoot": [6, 132], "spell": [6, 10, 11, 218], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 24, 25, 47, 54, 55, 59, 63, 65, 70, 80, 82, 85, 88, 91, 94, 95, 158, 160, 167, 168, 188, 192, 197, 202, 207, 209, 210, 211, 212, 214, 215, 218, 220, 241, 243, 267, 270, 273, 274, 278], "referencefram": [6, 10, 110, 111, 112, 113, 115, 118, 120, 121, 122, 125, 126, 127, 130, 131, 132, 133, 135, 136, 179, 180, 181, 182, 183, 184, 185], "though": [6, 11, 12, 18, 19, 20, 24, 25, 28, 38, 55, 56, 57, 67, 71, 80, 82, 86, 91, 95, 109, 113, 120, 130, 132, 163, 177, 178, 185, 186, 190, 192, 193, 198, 199, 211, 212, 214, 218, 219, 220, 221, 233, 253, 268, 273, 278], "frame": [6, 109, 110, 111, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 135, 136, 177, 178, 179, 180, 181, 183, 184, 185, 237, 247, 253], "notimplementederror": [6, 23, 25, 35, 54, 65, 68, 72, 82, 91, 103, 191, 197, 201, 210, 217, 218, 219, 220, 221], "outsid": [6, 23, 33, 46, 55, 63, 66, 71, 86, 95, 109, 173, 186, 198, 214, 268, 273], "plot": [6, 20, 27, 64, 65, 67, 68, 71, 78, 83, 91, 98, 99, 104, 135, 152, 155, 161, 205, 257, 263, 264, 272, 277], "ahead": [6, 95], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 23, 24, 37, 54, 61, 63, 64, 65, 66, 67, 68, 69, 71, 82, 85, 86, 88, 91, 95, 97, 98, 99, 105, 109, 111, 118, 120, 121, 122, 125, 126, 132, 135, 165, 166, 171, 178, 187, 189, 191, 192, 193, 198, 202, 209, 210, 214, 215, 218, 219, 220, 222, 233, 234, 236, 258, 267, 268, 270], "common": [6, 7, 10, 11, 12, 18, 19, 20, 22, 23, 32, 35, 37, 46, 47, 55, 56, 61, 66, 69, 72, 82, 88, 90, 91, 95, 96, 103, 105, 110, 112, 114, 121, 128, 133, 135, 140, 173, 178, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 204, 210, 211, 212, 213, 215, 218, 222, 234, 235, 238, 240, 241, 253, 255, 258, 261, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278], "matrixcommon": [6, 88, 90, 91], "dyadic": [6, 58, 110, 115, 118, 120, 125, 127, 128, 135, 180, 182, 184, 249, 254], "shorten": 6, "highli": [7, 55, 59, 102, 192, 198, 207, 235], "aspect": [7, 18, 91, 192], "teach": [7, 47, 56, 222], "conduct": 7, "accord": [7, 12, 37, 43, 46, 47, 51, 54, 55, 56, 63, 85, 88, 91, 95, 97, 112, 119, 128, 162, 168, 188, 193, 195, 197, 199, 215, 220, 221, 228, 233, 235, 240, 255], "survei": 7, "commonli": [7, 11, 47, 60, 63, 82, 91, 109, 185, 190, 218, 253], "encount": [7, 12, 16, 55, 82, 91, 160, 190, 195, 198, 220, 221, 235, 247, 274], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 25, 39, 49, 51, 55, 56, 67, 80, 82, 86, 91, 95, 98, 100, 101, 106, 109, 118, 122, 123, 126, 128, 130, 177, 185, 186, 189, 190, 194, 195, 212, 214, 215, 218, 221, 237, 240, 254, 263, 268, 270, 274], "offer": [7, 36, 37, 46, 55, 96, 109, 135, 177, 186, 192, 197, 237, 254], "bring": [7, 80, 113, 126, 191, 205, 214, 274], "greater": [7, 33, 47, 55, 60, 61, 63, 80, 84, 95, 105, 195, 198, 201, 209, 214, 218, 220, 222, 237, 240, 253, 268], "clariti": [7, 46, 181], "mission": [7, 36, 89], "ca": [7, 27, 56, 63, 82, 201, 202, 240], "dedic": [7, 37, 194, 217, 235, 251, 253], "essenti": [7, 39, 50, 55, 59, 61, 62, 63, 80, 115, 120, 183, 184, 186, 189, 190, 193, 197, 209, 212, 250, 253, 254, 255], "element": [7, 10, 11, 12, 15, 18, 29, 32, 36, 37, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 71, 78, 80, 82, 84, 85, 86, 87, 88, 91, 94, 95, 96, 98, 99, 105, 106, 115, 135, 137, 140, 154, 165, 173, 181, 184, 186, 188, 189, 190, 191, 193, 194, 195, 198, 200, 201, 202, 208, 209, 210, 212, 214, 215, 218, 220, 221, 222, 223, 227, 234, 236, 237, 240, 241, 242, 249, 259, 268, 273, 274, 277, 278], "deviat": [7, 138, 141, 222], "advanc": [7, 15, 17, 20, 31, 46, 55, 59, 60, 91, 92, 128, 133, 184, 188, 191, 192, 194, 196, 197, 204, 211, 218, 233, 234, 235, 240, 267, 269, 271, 275, 276, 277, 278], "docutil": 7, "sourceforg": [7, 36], "net": [7, 36, 71, 196, 218, 222, 240], "ext": [7, 189, 193], "autodoc": 7, "associ": [7, 10, 11, 18, 36, 38, 53, 55, 56, 62, 63, 77, 78, 80, 84, 133, 135, 158, 166, 177, 178, 185, 186, 190, 191, 192, 193, 195, 197, 202, 210, 212, 215, 228, 242], "graphic": [7, 103], "info": [7, 12, 105, 202, 218, 219], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 83, 241], "subset": [7, 16, 18, 20, 35, 36, 39, 42, 46, 47, 53, 60, 61, 67, 78, 80, 82, 84, 95, 189, 191, 195, 197, 202, 210, 240], "modifi": [7, 11, 12, 36, 37, 46, 55, 61, 63, 95, 97, 131, 140, 188, 195, 197, 198, 199, 202, 214, 220, 221, 222, 233, 236, 237, 240, 241, 267, 272, 274], "sphinx_math_dollar": 7, "delimit": [7, 55, 202], "dollar": [7, 272], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 231, 233, 234, 235, 236, 237, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 267, 268, 270, 272, 273, 274, 277, 278, 279], "sphinxext": 7, "plot_direct": 7, "figur": [7, 55, 56, 65, 66, 68, 70, 71, 82, 99, 118, 163, 185, 186, 187, 188, 199, 202, 256, 278], "devel": [7, 187], "supersed": [7, 118, 135], "pep": [7, 37, 55, 85], "257": [7, 95, 220], "our": [7, 9, 10, 16, 20, 27, 37, 55, 63, 80, 91, 95, 121, 173, 185, 186, 188, 189, 191, 197, 198, 199, 202, 209, 212, 215, 218, 221, 233, 267, 270, 271, 273, 278], "introduct": [7, 10, 17, 42, 46, 47, 60, 63, 128, 184, 193, 194, 195, 196, 198, 202, 215, 218, 221, 254, 258, 259, 260, 264, 271, 277], "four": [7, 37, 47, 55, 59, 63, 85, 88, 95, 101, 106, 119, 128, 133, 141, 178, 188, 189, 195, 198, 202, 210, 215, 218, 220, 222, 223, 247, 248, 251], "locat": [7, 10, 47, 55, 69, 91, 95, 98, 99, 101, 112, 122, 129, 132, 136, 181, 183, 197, 198, 202, 214, 222, 236, 245, 247, 250, 252, 254, 255], "websit": [7, 276], "advertis": 7, "serv": [7, 11, 16, 20, 31, 32, 37, 52, 55, 62, 78, 197, 218, 219, 243, 271], "initi": [7, 11, 18, 24, 31, 46, 50, 55, 56, 57, 60, 63, 71, 73, 74, 77, 78, 79, 80, 83, 95, 97, 99, 101, 103, 105, 110, 113, 115, 117, 118, 120, 122, 127, 130, 131, 132, 135, 136, 140, 148, 157, 179, 180, 182, 186, 187, 195, 197, 198, 202, 208, 212, 214, 218, 220, 221, 227, 235, 242, 243, 247, 248, 249, 250, 251], "obtain": [7, 11, 12, 14, 16, 23, 25, 31, 32, 36, 38, 39, 46, 47, 48, 51, 55, 56, 58, 59, 60, 61, 63, 65, 66, 68, 69, 71, 77, 80, 82, 84, 86, 91, 94, 95, 102, 105, 128, 131, 133, 141, 163, 168, 173, 189, 190, 193, 195, 197, 198, 201, 203, 210, 211, 212, 214, 215, 218, 219, 220, 221, 240, 243, 250, 251], "technic": [7, 10, 13, 20, 26, 36, 55, 135, 154, 189, 218, 235, 240, 253, 270, 273], "place": [7, 8, 10, 11, 12, 18, 20, 23, 26, 36, 47, 48, 55, 56, 61, 71, 87, 91, 94, 95, 97, 105, 135, 136, 196, 197, 202, 203, 209, 211, 214, 218, 237, 240, 266, 267, 274, 278], "site": [7, 95, 236], "upload": [7, 95], "belong": [7, 18, 33, 36, 46, 51, 55, 78, 91, 168, 178, 185, 188, 189, 191, 192, 195, 197, 198, 209, 210, 214, 215, 221, 228], "insid": [7, 10, 11, 12, 20, 46, 47, 52, 55, 65, 66, 71, 98, 109, 111, 122, 132, 167, 168, 173, 182, 186, 198, 202, 210, 212, 215, 220, 221, 222, 224, 226, 237, 273, 274], "spars": [7, 11, 88, 90, 91, 162, 191, 194, 197, 198, 199, 222, 223, 261, 273], "substanti": [7, 96], "edit": [7, 82, 91, 95, 195, 196, 198], "arg": [7, 11, 18, 20, 23, 29, 31, 32, 33, 34, 35, 36, 37, 39, 46, 47, 49, 52, 54, 55, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 70, 71, 72, 77, 80, 82, 85, 86, 87, 88, 89, 91, 93, 95, 97, 105, 137, 143, 146, 148, 151, 152, 153, 154, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 178, 182, 186, 188, 191, 193, 195, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 214, 218, 220, 221, 222, 223, 227, 228, 233, 234, 235, 236, 240, 241, 243, 247, 248], "invari": [7, 10, 20, 46, 51, 102, 105, 187, 193, 197, 198, 212, 218], "polici": [7, 8, 10, 236, 238], "5": [7, 12, 14, 18, 20, 22, 23, 24, 25, 29, 31, 32, 33, 35, 37, 38, 39, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 105, 107, 108, 110, 115, 118, 120, 121, 125, 126, 127, 128, 130, 137, 141, 162, 163, 166, 168, 175, 177, 179, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 227, 228, 233, 234, 240, 241, 247, 249, 251, 253, 255, 256, 267, 268, 270, 273, 274, 277, 278], "center": [7, 10, 16, 35, 46, 54, 55, 65, 67, 69, 71, 72, 82, 91, 110, 112, 115, 118, 120, 125, 127, 129, 133, 135, 141, 185, 188, 197, 202, 210, 256], "resid": 7, "standalon": [7, 135], "restructur": 7, "appli": [7, 10, 11, 19, 20, 25, 29, 30, 31, 32, 33, 37, 46, 47, 48, 53, 54, 55, 56, 57, 58, 61, 62, 65, 70, 71, 73, 81, 82, 85, 86, 87, 91, 95, 97, 98, 99, 101, 105, 106, 110, 111, 120, 123, 130, 132, 134, 145, 149, 152, 153, 157, 160, 161, 165, 168, 178, 186, 188, 190, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 218, 219, 220, 221, 222, 223, 226, 233, 236, 240, 247, 248, 251, 274, 277, 278], "surround": [7, 55, 72, 141, 210, 243], "nu": [7, 12, 63, 82, 95, 169, 190, 202, 214, 222, 228, 272], "equat": [7, 11, 12, 14, 16, 21, 35, 37, 51, 54, 55, 57, 61, 63, 65, 67, 68, 69, 73, 77, 78, 79, 80, 83, 86, 91, 98, 101, 105, 107, 109, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 134, 135, 136, 137, 141, 172, 177, 181, 182, 185, 186, 187, 188, 189, 194, 195, 196, 197, 200, 201, 202, 208, 212, 214, 216, 217, 219, 227, 247, 251, 252, 256, 268, 269, 272], "strip": [7, 56, 82, 95, 195, 238, 243], "out": [7, 12, 18, 19, 20, 36, 37, 46, 47, 55, 56, 57, 60, 63, 71, 80, 82, 88, 91, 95, 98, 105, 106, 118, 120, 122, 125, 135, 145, 149, 160, 163, 165, 167, 168, 189, 190, 192, 193, 197, 198, 199, 200, 202, 203, 209, 212, 214, 218, 223, 233, 235, 240, 241, 270, 272, 273, 277, 278], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 37, 38, 55, 56, 61, 80, 82, 85, 91, 94, 97, 122, 132, 162, 185, 186, 190, 192, 198, 202, 203, 210, 214, 218, 220, 222, 226, 235, 238, 241, 270, 271], "whitespac": [7, 55, 238], "invalid": [7, 12, 25, 55, 56, 97, 120, 192, 195, 210], "dx": [7, 10, 11, 16, 20, 35, 37, 51, 55, 57, 59, 63, 72, 74, 77, 78, 79, 80, 82, 91, 98, 108, 113, 114, 157, 186, 198, 199, 205, 215, 218, 219, 223, 268, 272, 277, 279], "meta": [7, 55, 218, 219], "stackexchang": [7, 65], "5020": 7, "wikibook": [7, 82, 83], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 202], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 25, 55, 91, 118, 199, 212, 218, 219, 221, 234, 256, 272, 278], "sentenc": [7, 85], "thumb": [7, 85, 240], "greek": [7, 11, 28, 55, 95, 97, 189, 202], "letter": [7, 11, 12, 28, 48, 55, 56, 95, 168, 202, 240, 268, 270], "\u03b1": [7, 187, 201], "alpha": [7, 12, 46, 55, 63, 82, 84, 140, 144, 147, 165, 181, 185, 186, 187, 193, 195, 197, 198, 201, 202, 214, 218, 222], "logarithm": [7, 12, 29, 35, 37, 55, 56, 61, 62, 80, 82, 91, 95, 193, 195, 199, 202, 212, 214, 221, 222, 269], "italic": 7, "emphasi": [7, 192], "asterisk": 7, "stirl": [7, 47, 62, 240], "fals": [7, 11, 12, 18, 19, 20, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 80, 82, 83, 85, 86, 87, 88, 91, 92, 95, 97, 98, 99, 103, 105, 107, 108, 111, 113, 114, 115, 118, 120, 121, 125, 126, 127, 129, 130, 131, 132, 133, 136, 140, 152, 153, 157, 160, 165, 166, 167, 168, 171, 175, 178, 179, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 227, 228, 231, 233, 234, 235, 236, 240, 241, 243, 247, 249, 270, 273, 274, 277], "permut": [7, 38, 40, 42, 43, 45, 48, 51, 52, 53, 56, 60, 63, 86, 88, 91, 114, 168, 187, 191, 193, 198, 215, 223, 224, 228, 240, 278], "cycl": [7, 10, 37, 42, 43, 46, 47, 53, 55, 58, 60, 86, 95, 142, 210, 240], "partit": [7, 42, 46, 62, 95, 122, 132, 134, 222, 237, 239], "reduc": [7, 12, 19, 30, 32, 34, 38, 51, 55, 56, 58, 60, 61, 63, 70, 71, 80, 82, 91, 95, 105, 106, 132, 150, 168, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 240, 274], "ge": [7, 18, 60, 61, 63, 80, 86, 91, 95, 187, 190, 195, 198, 212, 240], "consecut": [7, 37, 46, 51, 54, 56, 60, 71, 214, 220], "group": [7, 36, 41, 42, 47, 48, 51, 52, 53, 55, 58, 60, 84, 85, 95, 147, 156, 157, 168, 187, 188, 189, 197, 198, 214, 218, 220, 221, 228, 240], "pairwis": [7, 33, 36, 55, 60, 72, 91, 95, 215, 220], "ital": [7, 202], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 30, 31, 32, 36, 37, 38, 45, 46, 47, 51, 54, 55, 56, 59, 65, 82, 85, 86, 87, 88, 89, 91, 93, 94, 95, 97, 105, 117, 140, 173, 187, 188, 189, 190, 192, 193, 195, 198, 201, 202, 209, 210, 215, 218, 220, 221, 222, 223, 228, 231, 233, 234, 235, 236, 238, 240, 241, 243, 268, 270, 273, 274], "talk": [7, 13, 26, 56, 189, 197, 250], "handl": [7, 16, 18, 19, 20, 35, 43, 47, 55, 61, 82, 83, 85, 90, 95, 96, 97, 98, 106, 109, 118, 132, 148, 151, 157, 158, 163, 192, 198, 199, 208, 214, 216, 218, 220, 223, 226, 234, 240, 241, 243, 258, 273, 278], "referenc": [7, 8, 39, 44, 95, 117, 120, 165, 197], "overlin": [7, 18, 63], "normal": [7, 10, 12, 18, 19, 20, 25, 29, 32, 37, 46, 54, 55, 59, 61, 65, 68, 69, 70, 82, 83, 85, 89, 90, 91, 95, 97, 107, 109, 112, 118, 120, 126, 135, 141, 152, 155, 162, 165, 166, 167, 168, 169, 173, 176, 178, 186, 189, 192, 193, 194, 195, 197, 198, 202, 203, 205, 210, 211, 215, 218, 222, 227, 233, 238, 240, 247, 261], "assign": [7, 18, 36, 37, 38, 51, 55, 60, 71, 82, 84, 85, 91, 97, 113, 118, 125, 135, 173, 183, 186, 188, 190, 195, 202, 220, 221, 228, 235, 250, 253, 259, 270], "structur": [7, 10, 11, 15, 18, 20, 34, 36, 37, 43, 46, 47, 53, 55, 80, 82, 85, 86, 91, 98, 99, 101, 117, 128, 166, 168, 188, 189, 192, 195, 197, 198, 199, 214, 216, 218, 220, 221, 222, 226, 227, 235, 237, 240, 241, 270, 278], "suggest": [7, 10, 22, 38, 46, 82, 91, 95, 118, 200, 274], "american": [7, 41, 56], "color": [7, 83, 103, 182, 202, 233, 240, 264, 277], "colour": 7, "quotat": 7, "line_color": [7, 188, 205], "aesthet": [7, 11, 188], "ariti": [7, 188], "term": [7, 10, 11, 12, 16, 18, 20, 25, 37, 46, 55, 56, 57, 59, 60, 61, 63, 74, 78, 79, 80, 82, 85, 86, 91, 95, 99, 103, 105, 111, 113, 120, 122, 125, 128, 130, 132, 133, 147, 152, 164, 165, 168, 170, 173, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 226, 227, 240, 247, 249, 253, 258, 268, 270, 272, 273, 278], "unrestrict": [7, 44, 240], "necklac": [7, 240], "bracelet": [7, 240], "impli": [7, 11, 12, 18, 29, 33, 37, 46, 85, 101, 168, 188, 193, 195, 202, 210, 212, 218, 220, 223, 226, 227, 240, 253], "turn": [7, 10, 11, 18, 25, 37, 55, 61, 63, 70, 80, 89, 126, 130, 183, 189, 197, 199, 202, 209, 210, 212, 214, 215, 218, 233, 240, 255, 270, 272], "sequenc": [7, 12, 35, 37, 39, 42, 45, 46, 47, 51, 53, 54, 55, 56, 58, 60, 63, 65, 68, 69, 70, 71, 72, 75, 79, 85, 86, 88, 91, 94, 95, 135, 141, 167, 168, 193, 194, 196, 202, 204, 206, 209, 211, 212, 214, 215, 218, 219, 221, 228, 231, 234, 235, 240, 242, 243], "revers": [7, 39, 44, 47, 54, 55, 56, 61, 82, 83, 85, 91, 95, 105, 167, 178, 182, 189, 191, 195, 198, 199, 202, 203, 210, 214, 218, 240, 278], "ambigu": [7, 10, 12, 14, 55, 156, 162, 214, 226, 231], "person": [7, 11], "chebyshev": [7, 35, 55, 82, 195, 198], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 36, 38, 39, 44, 47, 54, 55, 56, 61, 65, 69, 71, 72, 78, 82, 85, 91, 95, 115, 130, 140, 163, 173, 179, 180, 183, 186, 190, 191, 193, 197, 198, 209, 210, 214, 218, 219, 220, 222, 228, 233, 237, 240, 241, 247, 249, 251, 253], "transliter": 7, "russian": 7, "chebyshevt": [7, 63, 202], "orthogonalpolynomi": 7, "t_n": [7, 60, 63, 82, 195, 198, 251], "tens": 7, "inclus": [7, 54, 101, 161, 189, 208, 209, 210, 221], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 60, 80, 195], "she": [7, 221], "extran": [7, 218], "belittl": 7, "obvious": [7, 38, 46, 171, 185, 192, 212], "easili": [7, 10, 18, 20, 27, 55, 56, 78, 80, 91, 95, 96, 112, 130, 166, 185, 198, 201, 202, 207, 214, 215, 218, 220, 221, 234, 272], "straightforward": [7, 20, 46, 56, 91, 212], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 56], "friendli": [7, 37, 80, 235], "mistak": [7, 12, 46, 241], "goe": [8, 20, 26, 91, 209, 212, 221, 270, 273], "content": [8, 13, 37, 55, 56, 90, 190, 193, 195, 198, 201, 202, 230, 235, 238, 239, 258, 259, 260, 261, 262, 263, 264, 265, 269, 271], "setup": [8, 10, 37, 55, 121, 122, 123, 137, 178, 194, 195, 198, 200, 201, 212, 233, 234, 236, 246, 277], "depend": [8, 10, 11, 12, 14, 18, 20, 24, 27, 35, 37, 38, 46, 47, 54, 55, 56, 57, 60, 61, 63, 67, 72, 79, 80, 82, 83, 84, 91, 95, 96, 97, 103, 107, 110, 113, 114, 117, 118, 120, 122, 128, 130, 140, 141, 142, 157, 166, 168, 170, 173, 182, 183, 188, 190, 193, 194, 195, 197, 198, 199, 201, 202, 203, 208, 212, 214, 215, 218, 219, 220, 221, 222, 233, 234, 235, 236, 240, 241, 253, 255, 256, 270, 272], "document": [8, 10, 11, 17, 20, 31, 32, 33, 46, 51, 55, 56, 61, 62, 63, 67, 77, 80, 81, 83, 88, 91, 96, 99, 109, 113, 128, 130, 131, 133, 135, 143, 157, 163, 177, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 198, 202, 212, 216, 218, 220, 221, 231, 233, 235, 236, 238, 240, 247, 253, 254, 257, 268, 270, 271, 277, 278], "auto": [8, 10, 12, 35, 55, 56, 83, 188, 195, 198, 202, 214, 218, 222], "rebuild": [8, 11, 20, 55, 198, 273], "live": [8, 28, 38, 135, 197, 215], "server": 8, "debug": [8, 37, 55, 82, 120, 157, 233, 234, 239, 243], "incompat": 8, "pick": [9, 18, 56, 60, 132, 162, 164, 278], "ignor": [10, 12, 14, 20, 37, 46, 55, 56, 60, 61, 65, 70, 80, 85, 91, 95, 105, 111, 120, 165, 168, 178, 188, 198, 202, 203, 214, 220, 221, 234, 278], "regex": 10, "categori": [10, 189, 257, 264], "lead": [10, 11, 18, 19, 20, 25, 54, 55, 61, 65, 82, 85, 91, 95, 107, 114, 152, 178, 186, 190, 193, 195, 197, 198, 199, 202, 209, 211, 214, 218, 221, 235, 238, 243, 271, 278], "against": [10, 18, 20, 25, 56, 98, 118, 234], "unrel": [10, 55, 62, 190, 270], "capabl": [10, 11, 18, 24, 35, 37, 55, 59, 67, 80, 95, 98, 99, 128, 135, 188, 199, 202, 221, 271, 272, 278, 279], "w": [10, 12, 25, 37, 39, 45, 54, 55, 56, 57, 58, 61, 63, 80, 82, 85, 91, 92, 112, 115, 126, 133, 134, 137, 138, 142, 153, 157, 166, 181, 183, 184, 187, 188, 190, 191, 195, 196, 197, 198, 199, 203, 209, 210, 212, 214, 215, 218, 219, 221, 222, 233, 241, 243, 253, 279], "pythonwarn": 10, "NOT": [10, 85, 105, 148, 152, 167, 170, 231, 234], "blog": [10, 20, 37, 60, 86, 215, 221], "post": [10, 18, 23, 24, 37, 49, 55, 202, 203, 214, 233, 273], "ned": 10, "batcheld": 10, "kanesmethod": [10, 112, 113, 118, 120, 121, 122, 123, 125, 126, 129, 130, 132, 135], "pinjoint": [10, 121, 123, 129], "prismaticjoint": [10, 123, 129], "q_": [10, 55, 112, 182, 215, 218], "u_": [10, 91, 112], "had": [10, 20, 23, 47, 55, 56, 91, 95, 118, 132, 197, 198, 199, 202, 210, 212, 218, 220, 221, 236, 241, 267, 270, 273, 274], "templat": [10, 240], "axi": [10, 29, 48, 60, 61, 65, 66, 68, 69, 71, 77, 80, 82, 88, 91, 98, 103, 108, 112, 118, 120, 122, 125, 126, 127, 129, 132, 135, 136, 137, 140, 141, 165, 178, 180, 181, 183, 185, 186, 188, 193, 221, 247, 248, 251, 253, 256], "parent_axi": [10, 112], "child_axi": [10, 112], "parent": [10, 46, 55, 78, 112, 129, 178, 181, 188, 192, 193, 197, 233, 237, 247, 250, 251], "child": [10, 11, 112, 129, 178, 192, 237], "bodi": [10, 12, 37, 80, 97, 108, 109, 112, 113, 115, 117, 118, 120, 121, 122, 123, 125, 128, 129, 130, 135, 136, 171, 177, 178, 181, 185, 186, 247, 248, 254], "parent_interfram": [10, 112, 129], "child_interfram": [10, 112, 129], "rotat": [10, 29, 43, 46, 48, 55, 64, 65, 66, 67, 68, 70, 71, 86, 91, 98, 99, 112, 120, 123, 125, 127, 129, 133, 136, 152, 155, 165, 178, 181, 183, 185, 186, 187, 188, 240, 247, 248, 251, 253, 255], "joint_axi": [10, 112, 121, 123, 129], "transform": [10, 11, 25, 29, 34, 37, 51, 54, 55, 56, 57, 59, 60, 63, 67, 70, 81, 88, 91, 103, 105, 112, 120, 129, 140, 161, 163, 165, 170, 187, 190, 193, 195, 197, 198, 204, 209, 210, 211, 214, 215, 218, 219, 220, 221, 222, 227, 235, 241, 247, 253, 254, 258, 265, 272], "suppos": [10, 19, 20, 47, 54, 55, 56, 80, 189, 191, 195, 197, 198, 202, 209, 212, 218, 220, 231, 240, 251, 256, 270, 272, 278], "pin": [10, 29, 98, 99, 101, 112], "dcm": [10, 110, 112, 118, 120, 135, 178, 185, 186, 247], "q_pin": 10, "inspect": [10, 18, 91, 197, 208, 239, 241, 265], "notic": [10, 12, 20, 46, 47, 53, 55, 91, 156, 177, 192, 212, 228, 229, 240, 241, 270, 272, 273, 278], "theta_pin": 10, "rad": [10, 56, 103, 118, 197], "int_fram": 10, "orient_axi": [10, 110, 112, 178, 180], "align": [10, 37, 65, 91, 112, 186, 187, 202, 220, 233], "orient": [10, 29, 67, 71, 86, 118, 120, 122, 125, 129, 133, 135, 178, 181, 183, 185, 186, 195, 240, 247, 254, 255], "parent_joint_po": [10, 112], "child_joint_po": [10, 112], "parent_point": [10, 112, 121, 123, 129], "child_point": [10, 112, 121, 123, 129], "mass": [10, 72, 107, 108, 109, 110, 112, 113, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 135, 136, 144, 169, 171, 172, 173, 183, 185, 233, 254, 255], "pos_from": [10, 112, 118, 120, 121, 122, 129, 135, 181, 185], "masscent": [10, 110, 112, 115, 121, 129, 133, 135], "parent_fram": [10, 129], "child_fram": [10, 129], "locatenew": [10, 110, 115, 120, 122, 125, 126, 127, 132, 133, 135, 136, 179, 181, 183, 185], "pars": [10, 47, 55, 88, 118, 129, 199, 201, 257, 265], "comprehens": [10, 18, 23, 196, 210, 222, 267], "additional_transl": 10, "recogn": [10, 12, 55, 56, 60, 70, 95, 98, 106, 190, 193, 201, 210, 211, 220, 227, 270], "logic": [10, 11, 18, 20, 30, 31, 32, 33, 36, 55, 57, 80, 82, 95, 160, 162, 163, 167, 202, 204, 210, 218, 222, 240, 270, 271, 272, 274], "node": [10, 11, 35, 49, 55, 82, 97, 101, 111, 144, 169, 178, 187, 192, 202, 209, 221, 226, 237, 259, 273, 277], "maximum": [10, 12, 23, 35, 37, 38, 46, 47, 55, 61, 82, 91, 95, 98, 120, 165, 173, 188, 193, 195, 198, 202, 209, 210, 214, 215, 218, 221, 222, 237, 240, 258], "multipli": [10, 12, 29, 33, 37, 46, 55, 66, 70, 77, 84, 86, 91, 95, 113, 122, 131, 132, 133, 145, 154, 168, 173, 174, 189, 190, 191, 193, 195, 197, 198, 202, 204, 211, 212, 215, 218, 223, 240, 250, 270, 273], "max": [10, 37, 46, 47, 55, 62, 63, 65, 82, 91, 95, 97, 98, 187, 188, 197, 198, 202, 209, 211, 212, 241], "min": [10, 47, 51, 55, 60, 62, 91, 97, 187, 188, 197, 202, 208, 218], "is_perfect_squar": 10, "ntheori": [10, 33, 46, 55, 56, 195, 198, 215, 240, 262], "primetest": [10, 55, 95], "is_squar": [10, 55, 86, 95, 262], "is_prim": [10, 18, 55, 189], "isprim": [10, 33, 56, 95, 262], "divid": [10, 11, 46, 54, 55, 56, 71, 91, 95, 172, 173, 190, 192, 193, 195, 197, 198, 202, 218, 237, 273], "bottom_up": 10, "interactive_travers": 10, "postorder_travers": [10, 273], "preorder_travers": [10, 273], "refactor": [10, 218, 226, 237], "tr": [10, 38, 46, 202, 211], "quantum": [10, 107, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 187, 263], "ever": [10, 11, 20, 61, 186, 189, 198, 212, 218, 235, 238, 273], "helper": [10, 35, 37, 46, 50, 53, 55, 80, 83, 84, 153, 155, 164, 199, 209, 212, 215, 218, 219, 221, 234, 265], "default_sort_kei": [10, 36, 44, 226], "matrixel": [10, 37], "matrixsymbol": [10, 15, 18, 33, 34, 37, 55, 86, 88, 91, 202, 222, 224], "layer": [10, 105, 195, 241], "imprecis": 10, "free_symbol": [10, 11, 37, 55, 64, 67, 82, 86, 155, 157, 175, 178, 198, 208, 215], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 30, 35, 37, 38, 46, 47, 48, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 65, 67, 68, 71, 73, 79, 80, 82, 84, 85, 86, 91, 95, 108, 112, 120, 133, 135, 144, 168, 169, 173, 177, 183, 186, 189, 190, 192, 193, 195, 197, 198, 202, 205, 210, 211, 212, 214, 215, 218, 220, 221, 222, 228, 232, 236, 237, 238, 240, 241, 245, 250, 252, 253, 255, 267, 272, 274, 277, 278, 279], "atomicexpr": 10, "concept": [10, 11, 18, 46, 120, 186, 192, 194, 197, 202, 221, 226, 255, 271, 276], "misappli": 10, "noth": [10, 36, 46, 55, 68, 82, 152, 168, 189, 193, 201, 202, 214, 218, 220, 231, 233, 241, 243, 270], "introduc": [10, 19, 51, 54, 55, 63, 80, 91, 96, 99, 118, 120, 125, 126, 127, 131, 168, 173, 186, 193, 194, 198, 199, 202, 209, 212, 215, 222, 238, 271, 274, 276, 278], "21494": 10, "size": [10, 16, 37, 38, 39, 44, 46, 47, 48, 49, 50, 51, 55, 56, 58, 60, 83, 86, 88, 91, 94, 95, 103, 120, 130, 131, 132, 141, 163, 164, 182, 188, 191, 195, 202, 214, 215, 218, 222, 240, 259, 268], "die": [10, 197, 222], "histor": [10, 11, 14, 20, 56, 218, 222], "21563": 10, "revert": [10, 193, 198], "sample_it": [10, 222], "consequ": [10, 20, 33, 55, 190, 192, 270, 278], "subclass": [10, 11, 18, 20, 31, 32, 37, 55, 62, 66, 68, 82, 85, 137, 143, 152, 156, 157, 158, 163, 165, 166, 188, 189, 191, 192, 193, 197, 198, 202, 222, 233, 234, 235, 238, 241, 247, 250, 273], "kei": [10, 11, 12, 14, 30, 33, 36, 44, 46, 47, 55, 56, 57, 60, 71, 84, 86, 91, 94, 95, 98, 117, 118, 128, 160, 163, 168, 186, 188, 190, 192, 193, 194, 195, 197, 198, 199, 200, 202, 214, 218, 219, 220, 222, 226, 237, 240, 241, 243, 274, 275, 278], "domainmatrix": [10, 87, 91, 194, 197, 200], "switch": [10, 46, 53, 82, 95, 105, 195, 198], "21402": 10, "earlier": [10, 109, 199, 203, 212, 214, 241, 251, 253, 273], "could": [10, 11, 12, 16, 18, 20, 23, 24, 32, 37, 48, 55, 67, 80, 82, 85, 112, 115, 118, 128, 132, 168, 171, 173, 189, 192, 195, 197, 199, 202, 210, 212, 214, 218, 219, 220, 221, 222, 223, 226, 227, 234, 238, 251, 252, 270, 273, 278], "traceback": [10, 12, 15, 18, 19, 20, 23, 24, 25, 30, 31, 32, 37, 38, 47, 55, 56, 59, 65, 82, 85, 86, 87, 88, 89, 91, 93, 94, 97, 105, 187, 189, 192, 193, 195, 198, 201, 209, 210, 218, 220, 221, 231, 233, 234, 236, 238, 240, 241, 243, 270, 274], "typeerror": [10, 12, 19, 20, 23, 30, 31, 32, 47, 55, 65, 70, 85, 87, 89, 93, 105, 142, 209, 210, 234, 241], "unsupport": [10, 12, 15, 105, 202], "operand": [10, 12, 47, 55, 179, 197, 249], "dict": [10, 12, 14, 18, 23, 25, 37, 47, 56, 57, 71, 72, 85, 86, 91, 95, 97, 113, 114, 148, 160, 163, 174, 176, 178, 188, 191, 192, 193, 195, 197, 198, 199, 200, 202, 214, 215, 218, 219, 220, 221, 222, 226, 233, 234, 240, 247, 279], "solve_lin_si": [10, 194], "heurisch": [10, 82], "smith_normal_form": [10, 90, 92, 191, 194], "newmatrix": 10, "holonom": [10, 76, 79, 119, 120, 121, 122, 128, 130, 131, 257, 264], "polymatrix": 10, "risch": [10, 82, 268], "broken": [10, 44, 55, 185, 202, 218, 243], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 67, 88, 91, 95, 113, 114, 115, 117, 127, 128, 179, 184, 192, 197, 202, 209, 212, 214, 218, 236, 237, 249, 254, 255], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 36, 109, 136, 197, 199, 233, 234, 236, 271, 272], "perhap": [10, 14, 37, 55, 85, 95, 153, 192, 220, 235, 267], "tableform": [10, 220, 243], "isn": [10, 20, 82, 109, 118, 221, 272], "advis": [10, 18, 25, 36, 112, 118], "usecas": 10, "unclear": [10, 18, 109], "line2dbaseseri": [10, 188], "linecollect": [10, 188], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 188], "get_point": [10, 188], "uniformli": [10, 16, 46, 71, 72, 98, 103, 188, 236], "adapt": [10, 103, 188, 208, 220, 240, 246], "get_data": [10, 188, 244], "dft": [10, 58, 108], "fourier": [10, 55, 63, 82, 108, 161, 206], "as_explicit": [10, 88, 91, 108, 224], "exp": [10, 11, 12, 14, 18, 20, 24, 25, 29, 35, 37, 45, 54, 55, 57, 59, 60, 62, 63, 73, 74, 77, 80, 82, 86, 88, 91, 95, 107, 144, 147, 163, 169, 187, 192, 193, 198, 199, 202, 204, 209, 212, 214, 218, 219, 220, 221, 222, 223, 240, 256, 268, 272, 274, 279], "discret": [10, 35, 37, 38, 45, 47, 55, 56, 63, 95, 168, 173, 204, 207, 218, 220, 221, 258, 267], "unevalu": [10, 11, 18, 19, 20, 31, 32, 35, 47, 54, 55, 61, 63, 72, 82, 95, 105, 145, 149, 156, 157, 168, 198, 201, 209, 210, 214, 218, 220, 221, 222, 268, 272, 273, 279], "represent": [10, 11, 20, 23, 29, 36, 37, 38, 46, 49, 55, 56, 61, 63, 67, 75, 77, 79, 80, 82, 84, 85, 86, 87, 88, 94, 95, 102, 103, 108, 109, 110, 117, 128, 132, 133, 137, 157, 162, 163, 165, 166, 168, 170, 177, 182, 183, 185, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 212, 214, 215, 218, 221, 222, 227, 228, 243, 247, 249, 256, 268, 270, 273], "21626": 10, "expos": [10, 36, 222], "mutat": [10, 105, 191, 193, 222], "flat": [10, 69, 86, 234], "todok": [10, 86], "ey": [10, 86, 87, 88, 89, 90, 91, 93, 191, 197, 223, 243, 274], "converg": [10, 37, 54, 59, 63, 81, 82, 95, 137, 198, 205, 209, 212, 268], "legacy_matrix": [10, 82], "discontinu": [10, 35, 59, 61, 63, 82, 98, 205, 220], "theano_cod": 10, "aesara_cod": [10, 202], "theanoprint": 10, "aesaraprint": [10, 202], "predic": [10, 11, 30, 31, 35, 97, 198, 214, 240, 258], "experienc": [10, 38], "big": [10, 12, 16, 18, 39, 55, 57, 95, 135, 148, 187, 201, 202, 209, 243, 268, 270], "registr": 10, "add_handl": 10, "remove_handl": [10, 30, 32], "multipledispatch": [10, 30], "regist": [10, 30, 31, 32, 56, 164], "register_mani": [10, 31, 32], "askprimehandl": 10, "staticmethod": [10, 233], "register_handl": [10, 30, 32], "prime": [10, 18, 30, 31, 32, 46, 53, 54, 55, 56, 58, 60, 63, 95, 139, 189, 190, 192, 193, 194, 195, 198, 212, 214, 215, 222, 237, 262], "Not": [10, 11, 19, 20, 55, 60, 85, 105, 202, 221, 222, 240, 272, 279], "primepred": [10, 33], "q": [10, 11, 12, 15, 18, 28, 29, 30, 31, 32, 33, 34, 37, 47, 51, 54, 55, 56, 63, 72, 77, 78, 80, 82, 84, 86, 91, 97, 98, 105, 106, 112, 113, 114, 117, 118, 120, 122, 127, 129, 130, 131, 132, 135, 136, 137, 138, 148, 162, 168, 171, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 204, 212, 215, 218, 220, 222, 227, 228, 243, 247, 249, 250, 252, 255, 262, 274, 278], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 222], "normaldistribut": [10, 222], "20078": 10, "misspel": 10, "absorbing_prob": [10, 222], "absorb": [10, 11, 80, 218, 222, 268], "probabilit": [10, 222], "shutil": 10, "power": [10, 12, 29, 34, 37, 45, 46, 47, 56, 58, 59, 61, 77, 78, 80, 82, 84, 86, 88, 95, 96, 105, 118, 135, 140, 151, 154, 167, 170, 173, 174, 178, 189, 190, 192, 193, 194, 195, 197, 198, 201, 202, 203, 206, 209, 211, 213, 215, 218, 220, 221, 222, 226, 235, 240, 258, 260, 267, 268, 269, 270, 271, 273, 274, 277], "immut": [10, 11, 55, 87, 90, 93, 186, 193, 218, 223, 261, 267, 274], "coordsystem": [10, 57], "explicit": [10, 11, 18, 20, 23, 47, 54, 55, 59, 71, 72, 82, 94, 95, 117, 118, 122, 132, 136, 186, 189, 198, 201, 202, 204, 210, 212, 218, 219, 220, 221, 225, 237], "appropi": 10, "patch": [10, 57, 202], "real": [10, 11, 12, 15, 16, 18, 19, 20, 23, 29, 31, 32, 34, 35, 37, 47, 55, 56, 57, 59, 60, 61, 62, 63, 67, 71, 72, 77, 80, 82, 85, 86, 88, 91, 95, 97, 101, 107, 118, 135, 137, 140, 141, 148, 166, 180, 187, 190, 193, 194, 197, 198, 199, 202, 203, 205, 209, 212, 214, 217, 218, 220, 221, 222, 227, 231, 235, 244, 272, 278, 279], "similarli": [10, 18, 51, 55, 56, 63, 67, 91, 98, 99, 105, 113, 133, 188, 189, 192, 197, 199, 209, 210, 212, 218, 233, 241, 251, 252, 274], "manifold": [10, 57], "track": [10, 12, 46, 55, 59, 63, 117, 129, 133, 152, 186, 209, 228, 268], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 57], "constructor": [10, 11, 20, 31, 32, 36, 37, 42, 46, 47, 48, 55, 62, 63, 84, 89, 91, 122, 161, 162, 166, 170, 188, 189, 191, 192, 193, 194, 202, 210, 218, 227, 235, 250, 269, 273], "str": [10, 11, 20, 31, 36, 37, 38, 47, 55, 56, 57, 59, 64, 65, 68, 71, 72, 83, 85, 88, 95, 97, 103, 112, 113, 115, 135, 152, 162, 168, 178, 180, 181, 188, 193, 197, 202, 214, 218, 222, 238, 240, 241, 243, 247], "unord": [10, 12, 55, 95, 193, 221, 240, 241], "lambidfi": 10, "guess": [10, 14, 36, 56, 59, 80, 83, 182, 195, 198, 212, 215, 273], "construct": [10, 16, 31, 32, 36, 37, 42, 55, 57, 61, 63, 65, 69, 71, 83, 88, 91, 96, 99, 109, 110, 113, 115, 118, 120, 153, 157, 166, 167, 170, 174, 189, 192, 193, 195, 197, 198, 202, 215, 220, 222, 223, 225, 227, 235, 237, 238, 250, 252, 253, 270, 273, 274, 278], "superclass": [10, 11, 18, 54, 55, 82, 88, 193], "scalar": [10, 24, 29, 55, 57, 70, 84, 86, 88, 91, 96, 115, 118, 167, 178, 179, 180, 184, 186, 189, 191, 195, 202, 218, 223, 235, 241, 247, 248, 249, 250, 251, 252, 254, 256], "boolean": [10, 11, 20, 21, 30, 31, 32, 33, 34, 35, 37, 55, 61, 65, 69, 70, 71, 72, 83, 86, 91, 92, 95, 98, 103, 105, 153, 178, 180, 182, 188, 191, 193, 195, 197, 199, 202, 214, 218, 220, 222, 240, 249, 260, 274], "sens": [10, 11, 16, 18, 20, 29, 33, 35, 36, 55, 57, 60, 63, 80, 85, 113, 120, 173, 178, 186, 189, 195, 197, 211, 212, 214, 221, 222, 234, 235, 240, 255, 278], "exponenti": [10, 12, 18, 29, 37, 46, 51, 55, 56, 60, 62, 82, 85, 86, 91, 95, 97, 154, 170, 199, 214, 221, 222, 269, 270, 274], "trick": [10, 11, 12, 51, 212, 228], "treat": [10, 11, 18, 19, 20, 45, 46, 53, 55, 60, 63, 70, 71, 91, 97, 115, 118, 141, 178, 183, 190, 192, 193, 195, 197, 198, 199, 201, 202, 209, 210, 212, 214, 215, 218, 220, 226, 234, 237, 253, 270, 274], "cdot": [10, 18, 38, 54, 60, 63, 73, 77, 78, 80, 86, 88, 91, 95, 106, 108, 133, 173, 183, 185, 186, 187, 189, 190, 198, 205, 209, 212, 218, 220, 223, 224, 252, 253, 272, 273, 278], "attributeerror": [10, 18, 55, 91, 221, 241, 274], "as_coeff_mul": [10, 55, 80, 88], "tri": [10, 11, 12, 18, 23, 36, 55, 63, 71, 80, 82, 120, 132, 163, 189, 190, 197, 202, 204, 214, 218, 219, 221, 233, 270, 278], "benchmark": [10, 120, 134], "runtest": [10, 233], "tmpfile": 10, "random_complex_numb": 10, "verify_numer": 10, "test_derivative_numer": 10, "_randrang": [10, 56], "_randint": [10, 195], "as_poli": [10, 55, 190, 198], "as_expr": [10, 55, 91, 192, 197, 198, 199, 274], "combintor": 10, "perm_cycl": [10, 47, 202], "printer": [10, 11, 20, 47, 55, 63, 83, 91, 96, 182, 227, 234, 235, 241, 259, 265, 269, 273], "init_print": [10, 27, 37, 47, 59, 82, 83, 91, 99, 182, 189, 190, 201, 268, 272, 274, 277, 278, 279], "problemat": [10, 20, 192], "affect": [10, 18, 20, 54, 55, 91, 177, 198, 220, 221, 251], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 59], "significantli": [10, 37, 59, 109, 130, 193, 204, 234, 237], "slower": [10, 20, 51, 91, 192, 197, 241, 267], "_sympifi": [10, 55, 88, 273], "strict": [10, 11, 46, 47, 55, 59, 60, 86, 91, 195, 198, 220, 221, 240, 243, 278], "lot": [10, 46, 55, 73, 80, 82, 91, 118, 135, 188, 201, 205, 215, 221, 233, 278], "secur": 10, "whatev": [10, 12, 20, 46, 55, 56, 214, 218, 219, 221, 241], "__repr__": [10, 202], "12524": 10, "repr": [10, 37, 82, 162, 192, 197, 202, 233, 277], "plenti": 10, "_sympy_": [10, 55], "disabl": [10, 11, 55, 56, 80, 82, 95, 195, 198, 202, 210, 218, 220, 231, 233, 236, 240], "constant": [10, 11, 35, 37, 54, 55, 59, 61, 63, 79, 80, 82, 98, 99, 105, 117, 118, 120, 135, 136, 145, 149, 155, 171, 172, 174, 175, 176, 179, 181, 183, 188, 190, 193, 195, 197, 198, 199, 202, 204, 209, 212, 214, 215, 218, 219, 220, 221, 222, 233, 235, 240, 241, 249, 253, 256, 268, 274, 279], "lh": [10, 14, 37, 45, 55, 200, 202, 218, 220, 221, 252], "tensexpr": [10, 106, 225, 228], "substitute_indic": 10, "danger": [10, 190], "tensor_head": [10, 106, 225, 228], "shorter": [10, 25, 55, 65, 109, 130, 177, 189, 193, 202, 235, 243], "creation": [10, 12, 20, 55, 57, 91, 110, 115, 125, 128, 129, 130, 131, 132, 142, 152, 156, 157, 158, 168, 185, 186, 202, 222, 227, 235, 241], "_dummy_fmt": 10, "l_": [10, 82, 91, 187], "obsolet": 10, "dummy_nam": [10, 228], "clearer": [10, 250], "metric_symmetri": [10, 228], "set_metr": [10, 228], "delta": [10, 12, 37, 39, 49, 60, 63, 78, 80, 84, 103, 132, 140, 168, 187, 202, 209, 215, 218, 222, 223, 228], "epsilon": [10, 12, 54, 56, 63, 80, 82, 139, 202, 228], "latter": [10, 15, 20, 37, 46, 55, 60, 63, 80, 95, 189, 193, 197, 202, 212, 215, 228, 235, 240, 241, 270], "involv": [10, 12, 16, 18, 23, 32, 34, 46, 54, 55, 56, 60, 67, 68, 80, 82, 95, 105, 110, 113, 118, 147, 157, 163, 165, 175, 185, 186, 189, 190, 193, 195, 197, 198, 199, 203, 204, 209, 210, 211, 212, 214, 215, 218, 220, 223, 241, 278], "obscur": [10, 18], "young": [10, 98, 228], "tableau": 10, "favor": 10, "tensorindex": [10, 225, 228], "tensor_indic": [10, 106, 228], "denot": [10, 11, 12, 16, 46, 47, 55, 57, 63, 77, 78, 80, 82, 84, 85, 86, 91, 95, 97, 105, 173, 178, 183, 188, 189, 190, 195, 197, 205, 209, 210, 212, 218, 222, 227, 228, 247, 248, 250, 251, 253, 255], "set_dimens": 10, "unit_system": [10, 175], "set_quantity_dimens": [10, 171], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 171], "set_global_relative_scale_factor": [10, 175], "get_dimensional_expr": 10, "unitsystem": [10, 172, 176], "dimension": [10, 35, 37, 39, 57, 67, 68, 69, 70, 71, 88, 91, 99, 106, 135, 142, 144, 154, 170, 172, 183, 184, 188, 189, 195, 197, 198, 201, 202, 220, 221, 223, 224, 228, 234, 255, 279], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 26, 198], "emptyset": [10, 18, 23, 35, 36, 85, 202, 221, 247, 279], "is_empti": [10, 18, 47], "unknown": [10, 11, 15, 18, 19, 20, 29, 55, 56, 99, 153, 200, 217, 218, 219, 220, 221, 240, 279], "empti": [10, 11, 18, 23, 31, 35, 36, 37, 38, 46, 50, 54, 55, 67, 70, 71, 72, 85, 86, 91, 95, 113, 132, 163, 176, 193, 197, 198, 202, 208, 209, 210, 212, 218, 220, 221, 233, 235, 240, 243, 273], "individu": [10, 18, 20, 55, 61, 66, 71, 72, 84, 86, 88, 91, 105, 133, 140, 158, 162, 187, 210, 218, 233, 274], "denest": [10, 55, 198, 213, 220, 240], "particl": [10, 110, 112, 113, 118, 122, 123, 128, 130, 132, 135, 136, 144, 147, 154, 155, 166, 168, 171, 173, 185, 228], "rigidbodi": [10, 110, 113, 117, 120, 125, 126, 127, 128, 133, 135], "potential_energi": [10, 112, 113, 127, 128, 133], "energi": [10, 107, 110, 113, 115, 118, 127, 128, 144, 169, 173, 183, 228, 253, 263], "setter": [10, 118, 135], "getter": [10, 55, 118, 135], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 23, 37, 46, 47, 55, 67, 71, 82, 91, 95, 98, 105, 113, 117, 132, 133, 136, 156, 157, 173, 178, 187, 189, 195, 197, 200, 202, 219, 221, 222, 226, 233, 235, 256, 268], "unpack": [10, 55, 86, 91, 240, 241], "emul": [10, 214, 221, 223, 241], "is_deriv": [10, 55], "as_finite_differ": [10, 35, 55, 268], "17881": 10, "get_matrix": [10, 225, 228], "__getitem__": [10, 55, 86, 227], "__iter__": [10, 47, 55, 214], "_components_data_full_destroi": 10, "__pow__": [10, 86, 193, 199], "flaw": 10, "replace_with_arrai": [10, 225, 228, 229], "cach": [10, 18, 60, 80, 189, 198, 202, 231, 236, 237, 258], "safe": [10, 55, 95, 192, 198, 220, 226, 268], "squar": [10, 12, 18, 23, 25, 29, 32, 37, 46, 55, 56, 61, 71, 72, 80, 82, 86, 87, 91, 94, 95, 98, 105, 107, 130, 131, 154, 170, 178, 187, 191, 193, 194, 195, 197, 198, 199, 202, 210, 213, 215, 218, 221, 222, 272], "jordan": [10, 80, 86, 91, 200, 220, 221], "band": [10, 86, 90, 94], "eigenvalu": [10, 86, 91, 118, 120, 162, 165, 272], "elif": [10, 18, 19, 20, 61], "getsourc": [10, 241, 245], "sum": [10, 16, 18, 37, 44, 47, 54, 55, 58, 60, 63, 68, 70, 78, 80, 82, 84, 85, 86, 88, 91, 95, 101, 115, 130, 147, 151, 154, 162, 165, 167, 168, 187, 189, 190, 192, 193, 197, 198, 199, 202, 204, 205, 207, 209, 211, 212, 214, 215, 218, 220, 221, 222, 223, 224, 226, 228, 237, 240, 258, 278], "meter": [10, 98, 99, 139, 142, 171, 173, 174, 175], "si": [10, 20, 63, 79, 80, 141, 170, 171, 173, 174, 175, 202], "cg": [10, 147, 155, 165], "aris": [10, 18, 19, 55, 60, 80, 82, 165, 186, 192, 197], "scale": [10, 64, 65, 66, 67, 70, 71, 72, 83, 98, 148, 169, 171, 173, 175, 176, 182, 186, 188, 198, 205, 222, 253, 255], "kilomet": [10, 174, 175], "1000": [10, 12, 37, 39, 55, 56, 59, 88, 95, 135, 173, 174, 175, 187, 201, 202, 211], "dimensionsystem": [10, 170, 172], "14318": 10, "duplic": [10, 12, 46, 49, 56, 61, 63, 91, 95, 210, 218, 240, 271], "flatten": [10, 36, 55, 192, 224, 229, 240, 241], "neither": [10, 18, 19, 33, 55, 142, 163, 188, 198, 209, 210, 211, 218, 228, 241, 247, 255, 278], "polymorph": 10, "anymor": [10, 188], "temporarili": [10, 55], "point3d": [10, 67, 68, 69, 70, 141], "p1": [10, 38, 46, 47, 51, 54, 65, 67, 68, 69, 70, 71, 98, 105, 110, 112, 122, 135, 137, 181, 188, 192, 193, 195, 199, 211, 222, 223], "p2": [10, 19, 46, 47, 54, 65, 67, 68, 69, 70, 71, 98, 105, 110, 112, 135, 181, 188, 192, 193, 195, 199, 211, 222], "conflict": [10, 61, 95, 105, 118, 235], "throughout": [11, 80, 85, 195, 205, 221, 270], "elsewher": [11, 18, 60, 84, 120, 191, 233], "termnam": 11, "antideriv": [11, 61, 63, 82, 218, 268], "frac": [11, 16, 18, 20, 35, 54, 55, 56, 57, 60, 62, 63, 80, 82, 91, 95, 97, 105, 122, 133, 171, 182, 183, 185, 186, 187, 191, 195, 198, 202, 204, 205, 209, 212, 215, 218, 219, 221, 222, 223, 240, 253, 255, 268, 272, 273, 277, 278], "indefinit": [11, 29, 61, 79, 80, 82, 91, 193, 195, 196, 198, 207, 268], "integr": [11, 12, 15, 22, 27, 29, 35, 47, 54, 55, 57, 60, 61, 62, 73, 74, 75, 78, 84, 86, 91, 94, 95, 105, 107, 113, 118, 128, 135, 154, 163, 166, 169, 172, 177, 179, 183, 187, 189, 192, 193, 194, 195, 198, 199, 202, 204, 205, 212, 218, 219, 222, 235, 243, 247, 249, 250, 253, 254, 258, 269, 272, 277], "primit": [11, 46, 55, 56, 63, 95, 162, 166, 189, 190, 192, 193, 194, 195, 197, 198, 201, 202, 215, 268], "terminologi": [11, 22, 228], "tupl": [11, 20, 24, 29, 31, 32, 35, 36, 37, 38, 46, 47, 54, 56, 57, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 77, 80, 82, 86, 91, 94, 95, 97, 98, 99, 103, 110, 112, 113, 115, 117, 130, 131, 133, 135, 137, 152, 153, 154, 157, 162, 165, 166, 167, 168, 178, 181, 186, 188, 189, 191, 192, 193, 194, 195, 199, 200, 202, 203, 204, 208, 210, 214, 215, 218, 219, 220, 221, 222, 223, 227, 228, 233, 234, 235, 236, 240, 241, 243, 247, 250, 268, 273, 274, 277], "subexpress": [11, 20, 37, 55, 61, 86, 109, 111, 197, 198, 202, 209, 213, 221, 235, 241, 258, 267], "togeth": [11, 12, 16, 37, 46, 55, 59, 84, 91, 95, 128, 154, 165, 173, 186, 189, 193, 194, 195, 197, 198, 201, 202, 214, 218, 220, 222, 233, 234, 240, 272, 278], "walk": [11, 37, 39, 160, 163, 212], "extract": [11, 23, 25, 35, 55, 82, 86, 88, 91, 95, 106, 120, 128, 177, 186, 195, 197, 198, 220, 221, 222, 233, 235, 240], "rebuilt": [11, 273], "atom": [11, 37, 47, 82, 85, 86, 107, 169, 192, 199, 202, 220, 221, 227], "queri": [11, 18, 19, 20, 30, 33, 34, 35, 37, 55, 67, 198, 214, 222, 258], "is_real": [11, 18, 20, 23, 55, 57, 61, 62, 91, 180, 202, 227], "restrict": [11, 18, 20, 37, 44, 55, 56, 63, 91, 98, 99, 168, 189, 192, 197, 199, 217], "never": [11, 18, 20, 55, 61, 82, 170, 198, 199, 202, 210, 220, 222, 231, 250, 270, 271], "is_": [11, 20, 55], "leav": [11, 18, 20, 24, 37, 55, 82, 91, 95, 114, 128, 152, 168, 209, 237, 267, 273, 278], "recurs": [11, 12, 15, 18, 20, 35, 55, 60, 80, 82, 85, 86, 95, 120, 188, 195, 198, 199, 202, 203, 206, 207, 209, 214, 220, 221, 226, 231, 233, 237, 238, 240, 269, 278], "canonic": [11, 42, 55, 211, 228], "excess": 11, "discourag": [11, 18, 55, 214], "expens": [11, 20, 55, 132, 211, 218, 219, 220, 236, 274], "matrix": [11, 15, 16, 18, 22, 24, 29, 32, 37, 44, 47, 55, 56, 57, 63, 70, 80, 82, 84, 86, 89, 90, 93, 94, 96, 97, 105, 106, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 135, 136, 137, 140, 141, 143, 151, 152, 157, 162, 163, 165, 167, 168, 170, 173, 177, 178, 186, 187, 189, 191, 195, 197, 200, 202, 203, 210, 212, 214, 215, 220, 221, 223, 224, 226, 227, 228, 229, 234, 235, 240, 241, 243, 247, 248, 249, 251, 255, 261, 269, 272, 273, 278, 279], "sympifi": [11, 12, 18, 19, 37, 59, 65, 85, 133, 141, 166, 168, 178, 179, 192, 193, 258, 267, 273], "bound": [11, 33, 37, 38, 54, 55, 64, 65, 66, 67, 68, 70, 71, 82, 95, 166, 193, 195, 197, 198, 202, 208, 218, 220, 221, 222, 227, 237, 243, 247], "dummi": [11, 37, 51, 54, 61, 80, 82, 91, 118, 135, 163, 168, 192, 193, 197, 198, 199, 208, 209, 210, 212, 214, 218, 221, 226, 228, 231, 235, 240, 241], "ration": [11, 18, 20, 30, 32, 35, 37, 54, 59, 60, 61, 63, 65, 68, 70, 72, 76, 80, 82, 83, 88, 91, 95, 97, 105, 137, 170, 187, 190, 194, 195, 196, 197, 199, 202, 206, 207, 211, 212, 214, 215, 216, 217, 220, 221, 222, 240, 247, 269, 270, 273, 277], "unequ": [11, 12, 14, 98, 202], "accident": 11, "clash": [11, 28, 55, 91], "contrast": [11, 20, 54, 55, 122, 192, 212, 218, 272], "_eval_": 11, "_eval_deriv": [11, 20, 55, 63], "overrid": [11, 12, 37, 55, 64, 65, 71, 97, 166, 202, 227, 234, 235, 240, 241], "pre": [11, 36, 37, 55, 187, 188, 203, 211, 214, 220, 221, 233, 251, 255, 273], "dispatch": [11, 31, 32, 33, 55, 56, 163, 202, 221, 237], "shorthand": [11, 12, 18, 20, 55, 85, 162, 197, 210, 231], "stand": [11, 54, 55, 135, 190, 192, 193, 199], "reserv": [11, 18, 118, 228, 235, 274], "smaller": [11, 37, 46, 47, 55, 56, 60, 63, 71, 82, 88, 95, 130, 190, 192, 195, 198, 205, 211, 212, 220, 240, 267, 278], "children": [11, 55, 56, 192, 237], "leaf": [11, 192, 202, 211, 273], "strictli": [11, 12, 15, 17, 18, 33, 35, 55, 63, 91, 95, 105, 195, 214, 220], "dag": 11, "map": [11, 18, 20, 35, 36, 37, 45, 46, 47, 55, 56, 67, 71, 78, 80, 82, 85, 86, 95, 103, 113, 122, 146, 157, 158, 163, 178, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 209, 214, 218, 219, 220, 221, 222, 226, 227, 234, 237, 240, 241, 243, 247], "colloqui": [11, 22], "lambda": [11, 12, 20, 24, 31, 32, 35, 37, 46, 47, 56, 57, 61, 82, 86, 87, 88, 91, 94, 95, 97, 118, 131, 132, 135, 136, 153, 188, 195, 197, 198, 202, 203, 210, 211, 214, 218, 220, 221, 222, 223, 231, 240, 241, 247, 248, 251, 267, 274], "hyper": [11, 55, 60, 63, 74, 77, 202, 204, 212, 214, 220, 222, 278], "primepi": [11, 20, 95, 262], "divisor_sigma": [11, 95, 262], "undefin": [11, 20, 23, 31, 32, 35, 55, 61, 62, 63, 82, 88, 97, 110, 186, 197, 208, 209, 212, 241, 268, 279], "interchang": [11, 51, 54, 80, 218], "memori": [11, 37, 55, 95, 198, 223, 234, 237], "maintain": [11, 12, 55, 56, 95, 99, 202, 210, 211, 218, 221, 237], "mental": 11, "hidden": [11, 177], "state": [11, 16, 18, 46, 53, 55, 63, 95, 98, 105, 107, 112, 113, 114, 117, 120, 122, 136, 140, 144, 145, 147, 148, 149, 151, 152, 153, 157, 160, 162, 163, 164, 165, 167, 168, 198, 202, 211, 212, 214, 222, 237, 263, 274], "hashabl": [11, 52, 80, 240], "repl": [11, 228], "intermedi": [11, 37, 38, 78, 86, 112, 118, 120, 125, 129, 152, 162, 170, 171, 178, 181, 185, 221, 235, 275], "execut": [11, 18, 27, 37, 83, 86, 135, 188, 202, 218, 221, 231, 233, 235, 236, 241, 243, 246, 257, 272, 277], "idiom": [11, 244, 270, 271], "anti": [11, 29, 33, 51, 61, 82, 86, 140, 145, 228], "frown": 11, "upon": [11, 18, 37, 55, 95, 117, 120, 130, 131, 132, 135, 162, 168, 183, 185, 186, 210, 218, 227, 234, 253, 278], "lowercas": [11, 12, 218, 233, 268], "is_integ": [11, 18, 20, 55, 180, 202, 227], "capit": [11, 54, 56, 105, 218], "wherea": [11, 16, 18, 33, 37, 56, 65, 71, 80, 85, 105, 173, 189, 192, 198, 202, 220, 221, 240, 278], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 55, 59, 63, 88, 95, 118, 135, 201, 209, 212, 214, 221, 236, 251], "isinst": [11, 15, 18, 20, 37, 55, 86, 88, 105, 192, 193, 202, 203, 214, 223, 226, 235, 273], "ship": [11, 96], "session": [11, 28, 37, 55, 67, 82, 182, 186, 192, 238, 265, 270, 277], "sort": [11, 31, 32, 36, 37, 44, 47, 51, 80, 82, 85, 91, 94, 95, 106, 109, 113, 152, 168, 173, 177, 188, 195, 198, 199, 209, 214, 215, 218, 219, 220, 226, 228, 233, 235, 240, 250, 258, 270, 272, 273], "numberkind": [11, 15, 86, 210], "matrixkind": [11, 15, 55, 90, 210], "booleankind": 11, "ring": [11, 58, 78, 91, 92, 185, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 240], "classif": [11, 17, 55, 218, 219], "lamda": [11, 88, 202, 210, 222, 274], "\u03bb": [11, 274], "lambdifi": [11, 20, 24, 37, 63, 120, 202, 220, 234, 239, 258, 265, 269], "matrixexpr": [11, 20, 86, 88, 89], "mutabl": [11, 12, 38, 55, 87, 88, 89, 98, 193, 202, 203, 214, 223, 274], "dens": [11, 86, 88, 90, 91, 191, 194, 197, 198, 223, 261, 273], "underli": [11, 37, 47, 53, 55, 84, 91, 103, 118, 163, 176, 220, 221, 222], "quit": [11, 16, 20, 63, 91, 95, 120, 185, 188, 199, 201, 212, 220, 240, 255, 270, 273], "rung": [11, 35, 77], "kutta": [11, 77], "condit": [11, 18, 19, 37, 46, 55, 57, 61, 63, 73, 74, 77, 78, 79, 81, 82, 85, 91, 95, 97, 98, 99, 101, 105, 111, 114, 120, 128, 132, 135, 137, 181, 187, 199, 202, 205, 212, 215, 217, 218, 220, 221, 222, 227, 260, 278], "loss": [11, 37, 80, 168, 234, 252], "stabil": [11, 46, 51, 53, 59, 105, 132, 226], "focus": [11, 24, 195], "is_numb": [11, 18, 55, 63, 82], "infin": [11, 18, 33, 54, 60, 61, 63, 68, 80, 82, 91, 141, 193, 195, 198, 202, 207, 208, 209, 210, 214, 217, 218, 222], "resembl": [11, 57, 63, 82, 227], "zoo": [11, 14, 18, 33, 55, 60, 61, 63, 82, 209, 211, 214], "data": [11, 16, 37, 46, 55, 56, 63, 82, 91, 96, 103, 113, 147, 188, 189, 192, 193, 195, 198, 199, 202, 214, 227, 228, 233, 235, 237, 240, 244], "effici": [11, 16, 18, 35, 37, 39, 46, 51, 55, 58, 59, 60, 71, 72, 88, 91, 95, 96, 105, 112, 113, 135, 187, 190, 191, 192, 193, 195, 198, 199, 200, 201, 214, 215, 220, 234, 241, 267, 273, 274, 278], "act": [11, 36, 45, 46, 47, 51, 55, 63, 71, 84, 85, 91, 98, 101, 110, 112, 117, 118, 123, 131, 140, 152, 157, 160, 161, 210, 221, 223, 251, 255, 267], "pprint": [11, 12, 20, 23, 35, 36, 57, 63, 82, 91, 95, 105, 140, 187, 202, 203, 210, 214, 218, 219, 221, 222, 240, 277], "inequ": [11, 18, 19, 20, 22, 55, 188, 195, 210, 212, 216], "neq": [11, 20, 55, 61, 63, 80, 82, 86, 173, 186, 187, 195, 198, 215, 218, 220, 278], "ne": [11, 14, 18, 56, 60, 61, 68, 80, 95, 190, 192, 195, 212, 218, 222], "hold": [11, 12, 20, 32, 36, 46, 51, 55, 56, 57, 61, 63, 77, 80, 91, 94, 97, 105, 107, 112, 114, 115, 133, 164, 198, 212, 214, 218, 222, 235, 278], "singleton": [11, 47, 85, 206, 221, 258, 260, 273], "gotcha": [11, 13, 55, 128, 186, 241, 271, 279], "somehow": [11, 20], "simpler": [11, 19, 20, 55, 59, 63, 79, 80, 125, 186, 195, 211, 212, 214, 218, 220, 221, 278], "adject": [11, 222], "heurist": [11, 18, 47, 80, 82, 86, 195, 196, 209, 211, 214, 216, 220, 221, 233, 268, 278], "appar": [11, 12, 55, 243, 278], "commut": [11, 18, 29, 32, 36, 46, 47, 51, 55, 57, 78, 82, 91, 145, 152, 155, 156, 157, 167, 168, 173, 180, 186, 190, 193, 194, 195, 196, 198, 202, 209, 210, 212, 218, 228, 263, 273], "law": [11, 36, 128, 171, 186, 190], "xreplac": [11, 55, 86, 91, 178], "knowledg": [11, 54, 55, 56, 197, 218, 273, 276], "round": [11, 20, 24, 35, 37, 55, 59, 60, 61, 91, 141, 197, 198, 209, 211, 222], "analyt": [11, 27, 60, 63, 80, 91, 128, 218, 263, 268], "implicitli": [11, 18, 19, 20, 47, 55, 82, 189, 192, 220], "independ": [11, 12, 20, 33, 35, 37, 46, 54, 55, 57, 63, 72, 80, 82, 84, 91, 105, 113, 114, 118, 120, 122, 130, 132, 166, 173, 183, 188, 190, 192, 197, 198, 204, 205, 212, 214, 215, 218, 219, 220, 221, 222, 228, 233, 234, 253, 272, 273], "nativ": [11, 55, 105, 193, 198, 233], "parsabl": 11, "iter": [11, 23, 25, 35, 37, 44, 46, 47, 50, 51, 55, 56, 57, 58, 60, 63, 71, 85, 95, 110, 111, 112, 113, 114, 117, 132, 136, 153, 168, 181, 188, 189, 190, 191, 193, 195, 198, 202, 203, 204, 205, 208, 214, 215, 218, 220, 221, 222, 223, 226, 234, 235, 236, 237, 239, 241, 247, 251, 265], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 35, 58, 85, 195], "One": [11, 12, 15, 18, 20, 35, 36, 37, 45, 47, 54, 60, 61, 63, 74, 77, 79, 80, 82, 85, 91, 95, 98, 99, 118, 133, 135, 144, 173, 193, 195, 196, 198, 201, 204, 210, 214, 220, 221, 222, 223, 228, 241, 253, 267, 268, 270, 273, 274, 278], "care": [11, 12, 19, 20, 46, 55, 63, 82, 85, 91, 98, 109, 118, 132, 178, 186, 192, 197, 214, 215, 218, 220, 221, 226, 229, 234, 267, 270, 272], "falsi": 11, "is_posit": [11, 18, 19, 20, 55, 180, 193], "unevaluatedexpr": [11, 202, 273], "surpris": [11, 18, 221], "north": 11, "riemann": [11, 57, 60, 61, 62, 80, 189, 214, 225, 228], "sphere": [11, 140, 247, 256], "behav": [12, 33, 35, 55, 56, 61, 63, 95, 198, 210, 214, 220, 223, 229, 274], "mapl": [12, 82, 218, 265, 272], "mathematica": [12, 37, 47, 97, 265, 272, 274], "faq": 12, "introductori": [12, 16, 26, 27, 135, 192, 193, 198], "remaind": [12, 54, 55, 56, 95, 190, 192, 193, 196, 198, 218], "familiar": [12, 20, 82, 118, 133, 152, 199, 268, 270, 276], "java": 12, "minut": [12, 109, 120, 177], "subtract": [12, 23, 37, 47, 55, 59, 70, 95, 105, 112, 170, 190, 191, 192, 193, 195, 197, 198, 273, 278], "proper": [12, 46, 55, 82, 95, 109, 118, 177, 192, 193, 197, 202, 210, 218, 223, 234, 235, 253, 274], "trigsimp": [12, 29, 55, 91, 112, 118, 126, 178, 211, 250], "fill": [12, 17, 46, 56, 86, 88, 91, 94, 168, 188, 233, 236, 240, 243, 274], "alter": [12, 38, 46, 55, 178, 192, 202, 204, 221], "afterward": [12, 37, 55, 115, 122], "quantiti": [12, 47, 55, 60, 63, 67, 72, 99, 109, 113, 126, 133, 147, 170, 172, 176, 183, 185, 186, 197, 214, 222, 250, 254, 255, 263], "simultan": [12, 55, 61, 68, 86, 95, 188, 211], "var": [12, 35, 37, 54, 59, 60, 78, 82, 85, 91, 105, 178, 188, 197, 201, 202, 214, 215, 241, 279], "rate": [12, 120, 185, 222, 253, 268], "short_lif": 12, "haven": 12, "160": [12, 98, 196], "ctimesd": 12, "circular": [12, 18, 103, 140, 195], "relationship": [12, 14, 18, 37, 55, 60, 62, 82, 95, 129, 152, 178, 183, 186, 192, 220], "runtimeerror": [12, 35, 210, 221, 240], "compileflag": [12, 233], "glob": [12, 233], "exceed": [12, 120], "stdin": [12, 236, 238], "nameerror": [12, 83, 236, 270], "__future__": [12, 16, 270, 277], "divis": [12, 20, 55, 91, 95, 170, 189, 192, 193, 194, 195, 198, 200, 202, 218, 220, 233, 241, 270, 273, 277], "cl": [12, 18, 20, 37, 46, 55, 82, 86, 168, 181, 193, 197, 218, 227, 236, 240, 252, 268, 277, 279], "dir": [12, 55, 98, 204, 209, 240], "__builtins__": 12, "__file__": [12, 244], "__name__": [12, 202, 244], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 63, 80, 140, 202, 212, 222, 228], "eta": [12, 63, 80, 197, 202, 218, 219, 222], "iota": [12, 202], "kappa": [12, 187, 202, 222], "mu": [12, 63, 80, 95, 106, 108, 139, 202, 222, 228], "omega": [12, 37, 38, 46, 80, 95, 110, 115, 117, 133, 136, 142, 144, 169, 178, 181, 182, 185, 187, 202, 209, 222], "omicron": [12, 202], "phi": [12, 46, 55, 56, 60, 63, 80, 84, 91, 95, 107, 135, 142, 151, 153, 187, 189, 197, 202, 218, 247, 256], "psi": [12, 60, 63, 80, 140, 151, 152, 158, 166, 197, 202, 228], "rho": [12, 57, 80, 91, 95, 121, 162, 202, 222, 228, 256], "sigma": [12, 47, 78, 80, 86, 91, 202, 205, 222], "tau": [12, 37, 80, 82, 91, 197, 202, 218], "theta": [12, 55, 57, 61, 63, 80, 83, 91, 97, 107, 117, 136, 140, 178, 186, 187, 193, 197, 202, 205, 210, 221, 222, 247, 248, 251, 253, 256], "upsilon": [12, 202], "xi": [12, 20, 57, 80, 202, 218, 219, 220], "lastli": [12, 82, 99, 136, 218], "unit": [12, 20, 29, 32, 36, 55, 56, 60, 67, 68, 69, 70, 82, 91, 95, 98, 103, 105, 107, 108, 112, 118, 133, 135, 144, 169, 170, 171, 175, 177, 178, 183, 186, 188, 190, 193, 195, 197, 198, 200, 202, 210, 212, 215, 221, 223, 247, 248, 250, 255, 256, 263], "mnemon": [12, 211, 240], "osineq": 12, "reimport": 12, "restor": [12, 192, 214], "__": [12, 63, 82, 202, 222, 227], "press": [12, 36, 38, 39, 47, 56, 82, 86, 187, 196, 215, 220], "autocomplet": 12, "lose": [12, 189], "abil": [12, 18, 35, 91, 128, 197, 201, 218, 221, 272, 278], "past": [12, 61, 95, 201, 202, 277], "f1": [12, 24, 46, 80, 82, 91, 105, 110, 118, 126, 135, 188, 193, 195, 198, 202, 204, 220], "f2": [12, 24, 55, 80, 91, 105, 110, 118, 126, 135, 171, 188, 195, 198, 202, 204, 220], "6": [12, 14, 16, 25, 29, 31, 32, 35, 37, 38, 39, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 68, 69, 70, 71, 77, 78, 80, 82, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 105, 106, 107, 120, 121, 125, 126, 127, 137, 141, 147, 165, 177, 178, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 204, 207, 208, 209, 210, 211, 214, 215, 219, 220, 221, 222, 223, 233, 234, 237, 240, 241, 247, 249, 251, 256, 268, 274, 278, 279], "accuraci": [12, 16, 35, 55, 198, 258, 274], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 55, 273], "reus": [12, 20, 37, 168, 272], "142857142857143": 12, "receiv": [12, 25, 55, 56, 95, 110, 163, 197, 227], "fraction": [12, 55, 56, 59, 61, 71, 82, 91, 95, 111, 174, 192, 193, 194, 195, 196, 199, 202, 204, 215, 218, 220, 269], "interpret": [12, 19, 25, 37, 46, 54, 55, 60, 61, 63, 68, 71, 82, 86, 88, 91, 95, 97, 109, 173, 188, 190, 197, 198, 202, 209, 215, 220, 221, 222, 227, 233, 234, 237, 243, 274], "100": [12, 20, 37, 39, 44, 54, 55, 56, 59, 63, 71, 78, 85, 86, 91, 95, 98, 188, 192, 197, 199, 201, 202, 209, 220, 221, 240, 267], "000000000000": 12, "00": [12, 55, 95, 152, 162, 215, 240], "null": [12, 55, 91], "34": [12, 37, 47, 60, 68, 91, 95, 110, 150, 196, 201, 208, 214, 215], "3400000000000": 12, "250": [12, 95, 215], "143": [12, 147, 187], "next": [12, 16, 18, 20, 28, 37, 38, 39, 44, 46, 47, 49, 50, 55, 56, 61, 80, 82, 85, 91, 95, 109, 110, 113, 121, 122, 123, 125, 127, 128, 129, 136, 185, 186, 189, 193, 197, 198, 202, 210, 212, 215, 218, 237, 238, 240, 271, 272, 273], "binari": [12, 19, 20, 33, 37, 39, 50, 55, 56, 82, 85, 95, 96, 162, 174, 189, 192, 198, 215, 234, 237, 240], "decim": [12, 20, 37, 55, 58, 59, 95, 97, 103, 192, 198, 272], "far": [12, 36, 55, 69, 82, 187, 189, 192, 202, 212, 241, 267, 268, 270], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 40, 46, 57, 85, 95, 122, 189, 190, 195, 222], "pad": [12, 37, 56, 57, 58, 70, 95], "inexact": [12, 25, 55, 193], "low": [12, 18, 19, 37, 55, 56, 63, 95, 192, 195, 200, 202, 214, 234, 235, 240], "higher": [12, 16, 35, 37, 55, 57, 59, 63, 66, 91, 181, 187, 189, 192, 195, 198, 204, 205, 209, 211, 214, 218, 220, 223, 241, 268], "engin": [12, 101, 134, 135, 184, 218, 277], "increas": [12, 35, 36, 47, 53, 54, 55, 58, 59, 63, 86, 95, 96, 109, 119, 152, 177, 178, 180, 185, 186, 192, 195, 197, 198, 204, 207, 211, 218, 222, 238, 240], "2000061035": 12, "highest": [12, 37, 49, 84, 109, 189, 198, 205, 215, 218], "hopefulli": [12, 17, 80], "unsimplifi": [12, 211], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 34, 37, 38, 54, 55, 56, 59, 60, 62, 63, 67, 78, 80, 85, 86, 91, 101, 107, 135, 168, 190, 193, 197, 198, 202, 215, 217, 220, 221, 222, 228, 237, 240, 243, 252, 278], "gave": [12, 55, 240], "gain": [12, 56, 105, 130, 131, 135], "impress": 12, "91": [12, 38, 196, 201, 208, 222], "compar": [12, 18, 25, 35, 37, 47, 52, 55, 60, 61, 72, 85, 91, 95, 96, 120, 147, 171, 175, 192, 195, 198, 199, 202, 207, 209, 214, 218, 221, 223, 227, 233, 240, 270, 273, 278], "4e": [12, 220], "nearli": [12, 95, 211], "snippet": [12, 37], "expr_modifi": 12, "__main__": [12, 37, 274], "declar": [12, 18, 23, 37, 68, 80, 91, 97, 106, 118, 120, 135, 147, 191, 202, 209, 212, 217, 218, 219, 222, 235, 259], "asid": [12, 85, 218, 219, 272], "2x": [12, 55, 63, 80, 97, 214, 215, 221, 222, 267, 270, 278], "syntaxerror": [12, 97], "asin": [12, 62, 63, 69, 199, 202, 212, 214, 218, 222, 278], "arcsin": [12, 61, 199, 202, 222], "arcco": [12, 61, 202], "root": [12, 18, 20, 22, 23, 25, 35, 37, 54, 55, 56, 62, 63, 77, 78, 79, 80, 82, 84, 87, 91, 95, 135, 173, 187, 189, 190, 193, 194, 197, 199, 201, 202, 212, 213, 218, 220, 221, 222, 233, 237, 240, 272, 274, 277, 279], "expon": [12, 25, 34, 37, 42, 55, 56, 61, 62, 63, 80, 82, 88, 95, 103, 105, 174, 190, 191, 192, 194, 198, 199, 202, 211, 214, 218, 221, 226, 237, 278], "half": [12, 20, 37, 56, 60, 61, 63, 65, 71, 82, 84, 91, 95, 97, 98, 137, 140, 165, 187, 193, 195, 197, 198, 210, 211, 212, 214, 222, 233, 240], "denomin": [12, 55, 59, 63, 82, 95, 105, 111, 190, 192, 193, 195, 197, 198, 201, 202, 211, 212, 214, 215, 218, 220, 278], "wild": [12, 214, 240], "interest": [12, 14, 20, 25, 51, 55, 57, 60, 61, 71, 80, 82, 91, 95, 119, 120, 168, 173, 186, 189, 193, 197, 198, 199, 201, 209, 212, 214, 215, 220, 221, 234, 235, 251, 268, 271, 273, 274, 275, 278], "sq": [12, 215], "is_pow": [12, 37, 55, 61], "is_rat": [12, 18, 197, 240], "bracket": [12, 20, 24, 47, 55, 63, 166, 168, 178, 202], "notat": [12, 16, 23, 25, 43, 47, 48, 54, 55, 56, 60, 63, 80, 88, 91, 97, 105, 166, 177, 178, 182, 186, 189, 202, 209, 213, 214, 221, 227, 228, 240, 253, 268], "curli": [12, 118, 202], "suppli": [12, 24, 35, 36, 37, 46, 47, 55, 57, 65, 69, 91, 95, 110, 112, 113, 115, 120, 122, 125, 130, 131, 141, 168, 177, 181, 186, 188, 197, 199, 204, 211, 218, 234, 240, 241, 247, 248, 251], "powsimp": [12, 55, 61, 211], "deep": [12, 20, 55, 61, 85, 86, 198, 209, 214, 222, 273], "measur": [12, 29, 61, 63, 71, 87, 109, 148, 157, 162, 170, 173, 175, 177, 178, 181, 183, 186, 198, 210, 211, 214, 222, 246, 247, 249, 250, 252, 253, 255], "count_op": [12, 211, 214], "radic": [12, 55, 56, 91, 189, 197, 198, 214, 220, 221], "join": [12, 47, 55, 56, 68, 86, 98, 99, 202, 214, 218, 220, 223, 240, 244], "autoexpand": [12, 214], "violat": [12, 118, 187, 199, 214], "naiv": [12, 15, 46, 52, 55, 80, 86, 91, 173, 212, 220, 221, 228], "strategi": [12, 38, 55, 82, 195, 196, 209, 212, 214, 219], "radsimp": [12, 55, 213], "logcombin": [12, 213, 218, 221], "robust": [12, 52, 55, 59, 194, 214, 218], "cancel": [12, 16, 20, 37, 55, 59, 63, 71, 80, 82, 91, 95, 105, 106, 192, 193, 194, 195, 198, 201, 214, 220, 272], "topic": [13, 21, 26, 37, 128, 133, 184, 185, 186, 187, 189, 191, 192, 197, 221, 270, 275], "behind": [13, 26, 106, 118, 132, 172, 191, 211, 214, 218, 221, 263, 270], "decis": [13, 26, 55, 61, 82, 211, 220, 235], "opinion": [13, 26], "pitfal": [13, 20, 186, 192, 270, 275, 278], "glossari": 13, "seem": [14, 18, 20, 79, 80, 118, 173, 189, 214, 218, 278], "unwieldi": 14, "arbitrarili": [14, 35, 55, 68, 95, 195, 197, 209, 212, 218, 219, 222], "six": [14, 99, 202, 215, 221, 222], "bias": 14, "toward": [14, 37, 55, 63, 189, 209, 221], "enter": [14, 47, 55, 56, 60, 68, 95, 97, 98, 113, 117, 120, 130, 202, 212, 220, 233, 273, 277], "attempt": [14, 16, 19, 20, 25, 37, 46, 51, 53, 55, 59, 60, 67, 80, 82, 91, 95, 109, 111, 163, 192, 197, 202, 204, 211, 214, 215, 218, 220, 221, 222, 233, 270, 278], "unambigu": [14, 202, 218, 243], "univari": [14, 25, 35, 54, 55, 61, 78, 82, 189, 190, 192, 193, 194, 196, 197, 198, 199, 204, 217, 220, 222], "linear": [14, 20, 22, 24, 25, 36, 37, 47, 54, 55, 56, 58, 59, 63, 68, 75, 78, 80, 82, 84, 86, 88, 90, 98, 102, 105, 112, 113, 115, 120, 122, 123, 128, 130, 134, 135, 140, 162, 165, 166, 181, 188, 189, 193, 194, 195, 197, 198, 200, 208, 210, 212, 219, 220, 221, 240, 261, 279], "undetermin": [14, 55, 91, 198, 204, 218, 220], "nonlinear": [14, 22, 25, 54, 135, 198, 220, 221], "sol": [14, 24, 91, 215, 218, 219, 220], "insuffici": [14, 86], "elimin": [14, 16, 37, 51, 55, 85, 87, 91, 109, 193, 200, 201, 203, 205, 213, 218, 220, 221, 228, 235, 274], "nsolv": [14, 24, 25, 135, 220], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 216, 217, 220], "rh": [14, 37, 45, 47, 55, 86, 87, 91, 112, 113, 118, 125, 126, 127, 191, 200, 202, 204, 218, 220, 221, 252], "classifi": [15, 91, 192, 218, 219, 221, 222], "distinguish": [15, 18, 19, 36, 46, 59, 84, 118, 167, 173, 189], "former": [15, 37, 55, 60, 118, 195, 197, 198, 215, 240], "retriev": [15, 53, 86, 198, 214, 228], "guarante": [15, 18, 24, 37, 46, 47, 55, 67, 80, 82, 91, 192, 195, 197, 198, 218, 220, 221, 238, 243, 274, 278], "catch": [15, 55, 218, 233, 274], "theori": [15, 20, 32, 38, 44, 45, 46, 47, 53, 55, 56, 60, 63, 84, 92, 95, 113, 118, 132, 134, 147, 165, 168, 178, 181, 191, 195, 196, 197, 201, 215, 237, 247, 264, 272], "is_subset": [15, 210], "valueerror": [15, 18, 24, 30, 32, 35, 37, 38, 47, 55, 56, 64, 65, 68, 70, 71, 82, 86, 88, 91, 94, 95, 98, 103, 105, 142, 181, 183, 187, 189, 191, 195, 197, 210, 218, 220, 221, 240, 243, 253], "odd": [15, 18, 30, 32, 34, 43, 47, 55, 56, 60, 61, 63, 85, 94, 95, 106, 187, 197, 198, 202, 220], "appliedpred": [15, 30, 31, 32], "analysi": [16, 37, 38, 46, 55, 56, 61, 102, 120, 132, 133, 136, 172, 189, 198, 212, 215, 222], "vari": [16, 35, 37, 55, 69, 71, 98, 103, 109, 113, 133, 166, 186, 209, 220, 240, 253], "hope": [16, 46, 109, 189], "research": [16, 47, 199, 214], "establish": [16, 51, 80, 112, 123, 212], "envis": 16, "along": [16, 20, 37, 46, 55, 56, 57, 61, 63, 64, 65, 69, 70, 73, 75, 78, 80, 86, 88, 91, 98, 99, 101, 108, 109, 112, 113, 120, 122, 125, 126, 127, 130, 131, 132, 135, 137, 165, 177, 178, 183, 186, 188, 191, 192, 197, 198, 218, 221, 249, 253, 255], "small": [16, 37, 38, 46, 47, 55, 59, 60, 82, 85, 91, 95, 105, 122, 126, 135, 165, 187, 188, 195, 196, 197, 214, 215, 220, 240, 267, 270, 272], "x_": [16, 37, 45, 55, 56, 60, 97, 193, 195, 198, 204, 215, 218, 223], "taylor": [16, 55, 61, 118, 132, 135, 193, 195, 198, 199, 209, 218], "let": [16, 18, 19, 20, 35, 37, 46, 51, 55, 56, 65, 73, 78, 80, 84, 88, 91, 92, 95, 97, 110, 118, 135, 173, 178, 185, 189, 190, 191, 195, 197, 198, 199, 202, 209, 212, 214, 215, 218, 220, 221, 228, 231, 234, 238, 241, 251, 252, 256, 267, 270, 272, 273, 278], "df": [16, 57, 218], "c_": [16, 22, 56, 78, 80, 186, 190, 218], "grid": [16, 35, 36, 103, 188], "f_": [16, 55, 60, 63, 82, 130, 131, 132, 195, 201, 202, 212, 218], "constraint": [16, 91, 99, 105, 112, 113, 114, 117, 118, 120, 121, 122, 124, 128, 130, 131, 132, 135, 199], "formul": [16, 112, 121, 122, 128, 130, 131, 168, 186], "assess": 16, "brute": [16, 211, 215], "frequent": [16, 46, 197, 209, 221], "cover": [16, 61, 95, 97, 109, 118, 177, 185, 228, 235, 268, 270], "treatment": [16, 80, 198], "shall": [16, 46, 80, 118, 135, 209, 212, 273], "job": [16, 20, 47, 148, 199, 202], "truncat": [16, 47, 55, 91, 95, 99, 173, 188, 199, 201, 204, 205], "approx": [16, 22, 24, 55, 82], "lowest": [16, 37, 46, 51, 95, 189, 204, 221], "2h": 16, "print_funct": 16, "x0": [16, 35, 37, 45, 55, 63, 74, 76, 78, 79, 95, 140, 192, 203, 204, 209, 214, 218, 220, 222, 240, 268], "x_0": [16, 45, 46, 56, 77, 78, 79, 195, 204, 215, 218, 222, 268], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 56, 78], "c_1": [16, 56, 78, 80, 209, 212, 218], "c_2": [16, 80, 209, 218], "2f": [16, 279], "c_i": [16, 80, 209, 212, 218], "nth": [16, 55, 60, 63, 84, 95, 193, 198, 199, 208, 214, 218, 222], "degre": [16, 38, 46, 53, 54, 60, 63, 71, 82, 86, 91, 98, 101, 103, 105, 112, 113, 118, 119, 122, 128, 136, 140, 186, 189, 190, 193, 194, 195, 197, 198, 201, 205, 208, 211, 212, 214, 215, 218, 220, 222, 247], "x_i": [16, 20, 45, 63, 82, 91, 190, 193, 195, 198, 199, 202, 221], "m11": [16, 222], "m12": [16, 222], "m13": 16, "m21": [16, 222], "m22": [16, 222], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 95], "3x3": [16, 70, 91, 251], "invert": [16, 25, 32, 55, 56, 86, 88, 91, 105, 122, 170, 190, 192, 193, 194, 197, 198, 218, 220, 221, 228, 274], "inv": [16, 47, 87, 91, 112, 113, 120, 125, 126, 135, 157, 191, 218], "fim1": 16, "eight": [16, 25, 202], "dfdxcheck": 16, "c3": [16, 58, 84, 86, 88, 95, 218, 222, 252, 279], "c5": [16, 218], "120": [16, 54, 55, 60, 61, 77, 95, 98, 99, 199, 201, 202, 204, 218, 268], "c7": [16, 46], "5040": [16, 60, 77, 198, 199], "quickli": [16, 20, 46, 47, 55, 56, 59, 95, 195, 198, 211, 221, 237], "tediou": [16, 82], "certainli": [16, 67, 97, 237], "fine": [16, 20, 55, 59, 83, 182, 192, 202, 214], "devis": 16, "xn": [16, 20, 193], "x_n": [16, 20, 38, 45, 56, 77, 91, 190, 193, 195, 198, 215, 221], "fn": [16, 82, 91, 189, 198], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 54, 80, 91, 218, 221, 240, 278], "cours": [16, 18, 39, 46, 54, 63, 80, 82, 91, 92, 95, 183, 191, 192, 196, 197, 209, 211, 212, 253, 278], "etc": [16, 18, 19, 32, 35, 37, 51, 55, 56, 60, 61, 73, 84, 85, 90, 95, 118, 139, 148, 152, 165, 168, 172, 180, 183, 185, 186, 188, 189, 190, 192, 195, 197, 202, 203, 210, 211, 212, 214, 218, 221, 222, 226, 234, 235, 240, 251, 255], "discrit": 16, "bengt": [16, 35], "fornberg": [16, 35], "weight": [16, 55, 63, 70, 72, 82, 84, 91, 152, 214, 258, 268], "gap": [17, 46, 95, 118, 199], "matur": [17, 18, 220, 221], "finit": [17, 18, 23, 32, 37, 41, 42, 43, 46, 54, 55, 56, 58, 59, 82, 84, 85, 154, 178, 187, 190, 193, 194, 196, 198, 199, 202, 204, 205, 208, 210, 215, 217, 218, 221, 240, 247, 248, 258, 269, 272, 278], "concret": [18, 36, 47, 55, 60, 61, 82, 84, 91, 95, 118, 173, 193, 197, 202, 258], "obviou": [18, 19, 20, 46, 54, 189, 192, 201, 215, 272], "situat": [18, 25, 59, 80, 186, 218, 220, 222, 238, 270], "refus": [18, 278], "roughli": [18, 55, 56, 96, 119, 218, 241], "possibli": [18, 37, 47, 53, 55, 80, 82, 95, 171, 172, 195, 209, 210, 220, 235, 268, 274], "infinit": [18, 20, 32, 54, 55, 56, 59, 60, 61, 68, 69, 82, 91, 95, 105, 124, 154, 173, 189, 197, 202, 203, 204, 207, 208, 209, 210, 214, 215, 216, 217, 220, 227, 240, 278, 279], "is_neg": [18, 20, 193], "interprett": 18, "unknow": 18, "resolv": [18, 19, 23, 24, 55, 211, 214, 220], "undecid": [18, 20, 23, 91, 192, 221, 274], "conclud": [18, 63, 78, 120, 183, 209, 220, 255], "particularli": [18, 59, 82, 192, 193, 212, 278, 279], "mix": [18, 28, 54, 61, 86, 91, 97, 177, 192, 193, 198, 202, 221, 224, 226, 228, 241], "ideal": [18, 37, 92, 115, 118, 128, 178, 185, 191, 193, 194, 195, 196, 197, 198, 199, 214, 221, 247], "slow": [18, 20, 51, 55, 59, 82, 96, 109, 120, 140, 177, 186, 192, 193, 202, 203, 204, 205, 214, 218, 220, 221, 233, 234, 278], "indetermin": [18, 19, 55, 91, 195, 207, 220], "contradict": 18, "infer": [18, 31, 32, 47, 55, 82, 192, 201, 202, 207, 212, 218, 234, 260], "prepar": [18, 113, 200], "presum": [18, 80, 192, 212, 235], "singletonregistri": [18, 55], "x1": [18, 20, 24, 45, 55, 60, 135, 140, 192, 193, 203, 204, 214, 218, 220, 222, 240], "x2": [18, 24, 45, 55, 60, 135, 140, 192, 204, 218, 220, 222], "posifi": [18, 213], "_x": [18, 20, 91, 129, 133, 182, 185, 186, 193, 199, 214, 218, 234], "rep": [18, 46, 51, 55, 152, 189, 191, 192, 193, 196, 197, 198, 211, 214, 243], "feel": [18, 27, 135, 136, 214, 218, 220], "among": [18, 36, 37, 38, 39, 46, 47, 56, 83, 96, 198, 218, 223, 226, 228, 250], "behaviour": [18, 80, 85, 110, 195, 199, 205, 208], "symbolc": 18, "implicit": [18, 37, 53, 55, 97, 117, 136, 188, 218, 220, 224, 227, 234, 235, 247, 249, 256, 270], "tailor": 18, "assumptions0": [18, 55], "extended_neg": [18, 55], "extended_nonneg": [18, 55], "extended_nonposit": [18, 55], "extended_nonzero": [18, 55, 202], "extended_posit": [18, 55], "extended_r": [18, 33, 55, 202, 217, 221], "hermitian": [18, 32, 55, 86, 87, 91, 151, 157, 168, 202], "irrat": [18, 32, 35, 55, 95, 192, 198, 202, 210, 272], "noninteg": [18, 33, 55, 192, 202], "nonneg": [18, 20, 32, 55, 56, 57, 60, 63, 88, 135, 190, 192, 198, 215, 222, 278], "nonposit": [18, 32, 55, 60, 63, 135], "nonzero": [18, 20, 32, 34, 54, 55, 70, 91, 107, 190, 191, 192, 193, 202, 205, 221], "transcendent": [18, 23, 25, 32, 55, 63, 82, 192, 197, 202, 220, 221, 274, 279], "field": [18, 29, 33, 37, 55, 56, 57, 63, 73, 82, 140, 141, 180, 184, 189, 190, 191, 193, 194, 196, 198, 199, 200, 215, 220, 233, 247, 249, 251, 252, 254, 256], "antihermitian": [18, 32, 55], "mathbb": [18, 20, 33, 38, 46, 54, 55, 56, 61, 63, 80, 86, 91, 132, 187, 189, 190, 192, 193, 195, 197, 198, 201, 209, 210, 212, 215, 221, 222, 278], "ii": [18, 61, 80, 82, 95, 198, 202, 210, 218, 221], "cup": [18, 198, 210, 221], "pm": [18, 54, 80, 82, 190, 201, 209, 215, 218], "yi": 18, "composit": [18, 32, 36, 44, 46, 47, 55, 56, 73, 75, 82, 95, 98, 193, 195, 198, 201, 214, 221, 236, 262], "2k": [18, 55, 60, 80, 95, 215], "pariti": [18, 47, 198], "product": [18, 29, 40, 43, 46, 47, 51, 53, 54, 55, 56, 57, 59, 60, 63, 65, 68, 70, 71, 78, 80, 82, 84, 85, 86, 88, 91, 95, 96, 105, 106, 107, 109, 112, 120, 133, 135, 143, 147, 148, 151, 153, 154, 155, 157, 160, 162, 163, 165, 166, 168, 173, 174, 177, 178, 180, 184, 185, 186, 187, 189, 190, 191, 193, 195, 197, 198, 199, 202, 203, 204, 207, 210, 211, 214, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 237, 240, 247, 250, 254], "le": [18, 38, 51, 63, 80, 86, 95, 127, 195, 212, 222], "commutative_properti": [18, 55], "skew": [18, 78, 95, 222], "hermitian_matrix": 18, "complex_numb": [18, 33, 55], "algebraic_numb": [18, 33, 55], "transcendental_numb": [18, 55], "extended_real_number_lin": 18, "real_numb": [18, 33], "imaginary_numb": [18, 33, 55], "rational_numb": [18, 33], "irrational_numb": [18, 33, 55], "parity_": [18, 55], "prime_numb": [18, 55, 95], "composite_numb": [18, 55], "positive_real_numb": 18, "negative_numb": [18, 55], "inconsist": [18, 20, 30, 32, 54, 173, 178, 181, 185, 214, 218, 221], "inconsistentassumpt": 18, "deal": [18, 37, 54, 55, 59, 67, 75, 80, 82, 102, 109, 113, 114, 118, 183, 185, 186, 190, 195, 198, 215, 216, 220, 231, 241, 243, 250, 255, 270, 272, 278], "is_zero_matrix": [18, 86, 191], "generalis": [18, 63, 80, 189], "gaussian": [18, 63, 82, 91, 95, 138, 194, 195, 198, 215, 220, 222, 263, 274], "notion": [18, 36, 173, 176, 189, 221, 250, 255], "chain": [18, 20, 37, 46, 51, 55, 63, 72, 96, 185, 197, 222], "superset": [18, 35, 44, 50, 58, 135, 192, 210, 220], "vanilla": 18, "attach": [18, 49, 80, 96, 98, 112, 113, 129, 186, 234, 236, 241], "is_commut": [18, 82, 155, 157, 166, 240], "is_complex": [18, 55], "is_finit": [18, 55], "permit": [18, 47, 57, 61, 85, 95, 188], "formal": [18, 36, 54, 55, 63, 80, 85, 137, 173, 192, 194, 195, 206, 209], "littl": [18, 20, 36, 47, 65, 91, 95, 96, 120, 173, 196, 198, 202, 212, 214, 222, 237, 250], "n1": [18, 37, 46, 55, 56, 118, 135, 137, 141, 177, 215, 222, 247], "n2": [18, 37, 46, 55, 56, 135, 137, 141, 215, 222], "misunderstand": 18, "is_nonneg": [18, 20, 193], "intent": [18, 37, 54, 55, 97, 235], "meaning": [18, 30, 32, 36, 56], "alon": [18, 56, 83, 195, 218, 220, 227, 240, 272, 273], "tempt": [18, 20, 55, 95], "meet": [18, 56, 209], "criteria": [18, 55, 273], "noncommut": [18, 55, 78, 273], "finiteset": [18, 23, 35, 36, 221, 222, 279], "s1": [18, 46, 54, 68, 71, 78, 105, 179, 189, 198, 205, 215, 240, 249], "s2": [18, 46, 47, 54, 68, 71, 105, 179, 189, 198, 205, 209, 215, 240, 249], "bool": [18, 35, 37, 51, 53, 55, 56, 58, 61, 82, 83, 85, 86, 88, 91, 95, 97, 114, 152, 180, 182, 188, 197, 198, 200, 202, 203, 204, 209, 210, 214, 217, 222, 234, 235, 240, 241, 247, 249, 270], "plai": [18, 54, 120, 130, 215, 270, 272, 273], "role": [18, 61, 200], "connect": [18, 49, 56, 57, 70, 71, 91, 96, 98, 101, 110, 112, 120, 123, 129, 189, 190, 191, 200, 218, 222, 240, 247], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 55], "capitalis": 18, "4142135623731": [18, 24, 202, 220], "predict": [18, 168, 214, 240], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 29, 31, 32, 37, 39, 44, 46, 47, 49, 50, 55, 61, 62, 63, 70, 86, 91, 105, 154, 165, 166, 168, 191, 193, 197, 198, 202, 210, 228, 233], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 67, 70], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 37, 46, 55, 273], "verifi": [18, 27, 35, 46, 52, 56, 57, 118, 189, 195, 201, 218, 220, 221, 223, 224, 254, 278], "importantli": [18, 20, 199, 237], "reject": [18, 19, 95, 215, 243], "_eval_is_": 18, "is_algebra": [18, 55, 193], "interfer": [18, 202], "determinist": [18, 46, 82, 95, 195, 196], "reach": [18, 95, 105, 197, 198, 218], "claus": [18, 85], "flow": [18, 197], "inner": [18, 54, 80, 91, 151, 154, 155, 160, 162, 163, 166, 168, 178, 181, 191, 197, 204, 247], "optimis": [18, 218], "stage": [18, 36, 54, 95, 209, 278], "briefli": [18, 190, 195], "managedproperti": [18, 55], "metaclass": [18, 55], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 26, 39, 42, 44, 47, 50, 58, 62, 80, 85, 95, 197, 198, 212, 237, 240], "randomis": [18, 230, 265], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 82, 200], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 55, 240], "precomput": [18, 60, 95, 241], "static": [18, 29, 37, 46, 47, 49, 55, 61, 68, 69, 70, 71, 88, 99, 120, 128, 188, 202, 208, 210, 222, 234], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 198], "_assumpt": [18, 55], "amongst": [18, 220], "indirectli": 18, "manifest": [18, 190], "jointli": 18, "fundament": [18, 20, 35, 38, 45, 73, 80, 82, 91, 173, 192, 197, 215, 218, 222, 274], "theoret": [18, 36, 38, 46, 56, 60, 196, 197, 212, 270], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 202], "analogu": [19, 33, 54, 69, 192, 193], "piecewis": [19, 20, 37, 54, 60, 62, 63, 82, 85, 98, 166, 202, 204, 205, 220, 221, 222, 241, 268], "nonetyp": [19, 37], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 33, 55, 61, 85, 105, 178, 191, 193, 195, 198], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 59, 95, 234], "carefulli": [19, 55, 178, 195, 204], "truth": [19, 30, 31, 32, 33, 34, 55, 86, 214, 260], "bitwis": [19, 58, 85], "footnot": [19, 173, 273, 274, 277], "combinatori": [20, 39, 47, 54, 55, 62, 63, 198, 204, 213, 240, 242, 278], "dig": [20, 37, 273], "th": [20, 29, 38, 46, 47, 53, 56, 57, 59, 60, 61, 63, 84, 85, 91, 95, 113, 193, 195, 197, 198, 204, 207, 212, 215, 218, 220, 222, 223, 228], "handler": [20, 30, 31, 32, 33, 34, 55, 62, 91], "spectrum": 20, "matter": [20, 35, 44, 47, 54, 55, 60, 80, 82, 133, 209, 240, 272, 273], "use_unicod": [20, 35, 36, 37, 59, 63, 82, 83, 91, 99, 105, 140, 182, 187, 189, 190, 201, 202, 203, 221, 222, 268, 272, 274, 277, 278, 279], "np": [20, 62, 78, 95, 118, 234, 241], "arang": [20, 234, 267], "arrai": [20, 22, 24, 37, 46, 47, 51, 52, 56, 63, 82, 86, 88, 91, 95, 96, 103, 135, 165, 188, 191, 193, 198, 202, 221, 222, 225, 227, 228, 229, 234, 235, 237, 241, 259, 274], "ultim": [20, 61, 173], "cosin": [20, 55, 61, 63, 70, 82, 110, 112, 178, 186, 198, 199, 205, 211, 222, 247, 278], "todai": [20, 189], "operatornam": [20, 60, 61, 63, 80, 82, 187, 190, 198, 202, 205, 210, 212, 220], "modern": [20, 37, 189, 196, 202], "recal": [20, 55, 91, 195, 197, 212, 270, 272, 273, 279], "redefin": [20, 47, 55, 130, 132, 190, 241], "antipattern": [20, 271], "stai": [20, 197], "trig": [20, 55, 82, 198, 202, 211, 214, 278], "wouldn": 20, "cheap": [20, 55, 95], "as_two_term": [20, 55], "split": [20, 37, 55, 56, 59, 80, 82, 97, 195, 197, 200, 201, 202, 220, 222, 225, 228, 233, 240, 245, 273, 278], "hadn": 20, "wors": [20, 85, 214], "expand_trig": [20, 267], "mid": [20, 38, 56, 59, 99, 210, 215], "troubl": [20, 63], "bigger": [20, 37, 55, 60, 212, 218, 278], "deduc": [20, 37, 80, 85, 212, 272], "disallow": [20, 55, 198, 203, 214, 236], "great": [20, 137, 199, 202, 215, 241], "simplest": [20, 36, 85, 91, 95, 96, 187, 188, 199, 203, 211, 214, 218, 268, 278], "\u03c0": [20, 59, 140, 202, 221, 268, 272, 278, 279], "as_independ": [20, 55, 221], "coeff": [20, 55, 57, 85, 135, 193, 197, 198, 208, 214, 218, 220, 228, 278], "apart": [20, 29, 46, 51, 55, 59, 61, 82, 183, 190, 193, 194, 195, 198, 201, 204, 215, 221, 228, 251, 253, 273], "is_even": [20, 43, 46, 47], "nonreal": [20, 24, 220], "cosh": [20, 55, 62, 63, 74, 80, 199, 202, 203, 212, 214, 220, 274, 278], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 46, 237, 271, 278], "_eval_is_posit": 20, "as_add": [20, 55], "pi_": 20, "fuzzy_": 20, "deduct": [20, 37], "subtl": [20, 211], "nontrivi": [20, 46, 55, 95], "_eval_evalf": [20, 198], "prec": [20, 24, 55, 65, 71, 95, 103, 187, 193, 198, 199, 214, 220], "dp": [20, 37, 55, 58, 63, 95, 192, 193, 220, 236], "53": [20, 56, 58, 91, 137, 190, 192, 193], "459697694131860": 20, "hook": [20, 96, 202], "_eval_rewrit": [20, 55], "rewritten": [20, 55, 60, 61, 63, 82, 118, 165, 209, 214, 218, 220, 278], "caller": 20, "ve": [20, 120], "nonintegr": 20, "iff": [20, 33, 47, 56, 85, 91, 186, 189, 197, 212, 215, 233], "isint": 20, "xy": [20, 35, 36, 69, 91, 115, 186, 188, 189, 195, 202, 214, 221, 256, 273, 278], "happi": 20, "demand": [20, 28], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 57, 135, 192, 202, 203, 214, 221, 228, 247, 251, 259], "expand_log": [20, 37, 214], "_eval_expand_trig": 20, "sophist": [20, 96, 220], "x_1": [20, 38, 45, 46, 56, 60, 77, 91, 163, 190, 193, 195, 198, 204, 215, 221], "ldot": [20, 38, 45, 46, 54, 55, 56, 60, 63, 80, 95, 99, 173, 187, 189, 190, 193, 195, 197, 202, 205, 209, 212, 215, 220, 223, 278], "x_k": [20, 56, 195], "dy": [20, 37, 57, 72, 91, 98, 108, 135, 198, 202, 215, 218, 219, 268], "dz": [20, 98, 108, 212], "argumentindexerror": 20, "varion": 20, "middl": [20, 63, 71, 80, 91, 99, 148, 188, 212, 278], "iverson": 20, "printmethod": [20, 202], "latexprint": [20, 265], "_latex": [20, 202], "_print": [20, 202], "_m": [20, 63], "_n": [20, 56, 60, 63, 82, 198, 212, 221], "arcversin": 20, "aversin": 20, "im": [20, 34, 55, 62, 80, 89, 189, 202, 203, 210, 218, 274], "sinh": [20, 35, 55, 59, 62, 63, 74, 80, 199, 202, 203, 212, 278], "expand_complex": 20, "analog": [20, 48, 54, 56, 60, 133, 185, 186, 189, 190, 191, 195, 207, 223, 240], "vers": 20, "geometr": [20, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 91, 137, 186, 189, 196, 222, 264, 274], "angl": [20, 29, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 101, 107, 112, 117, 118, 120, 121, 122, 123, 129, 132, 137, 138, 140, 141, 142, 165, 173, 178, 185, 186, 187, 202, 211, 221, 247, 248, 251, 278], "horizont": [20, 25, 36, 65, 68, 70, 86, 101, 140, 188, 191, 202], "distanc": [20, 36, 39, 47, 65, 67, 68, 69, 70, 71, 98, 99, 108, 109, 112, 122, 123, 137, 141, 171, 181, 183, 255], "rightmost": [20, 168], "scientificamerican": 20, "uniti": [20, 61, 63, 80, 163, 197], "secret": [20, 56], "teacher": 20, "taught": [20, 82], "nr": 20, "sake": [20, 60, 215], "simplic": [20, 212, 214, 218], "divisor": [20, 33, 46, 55, 56, 91, 95, 189, 190, 192, 193, 195, 196, 197, 198, 201, 262], "hardwar": [20, 37], "regard": [20, 38, 56, 63, 83, 136, 168, 189, 190, 204, 220, 221], "c99codeprint": [20, 37, 202], "cxx11codeprint": [20, 202], "cfunction": [20, 259], "e2": [20, 35, 55, 58, 65, 72, 82, 91, 95, 103, 118, 192, 197, 209, 218, 221, 222, 240], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 37, 202, 227, 235], "cxxcode": [20, 37, 202], "_ccode": [20, 202], "_y": [20, 129, 133, 182, 185, 186], "_z": [20, 82, 129, 133, 185, 186, 222], "_cxxcode": [20, 202], "std": [20, 202, 222], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 218], "fragil": 20, "tend": [20, 28, 37, 55, 60, 195, 197, 207, 209, 212, 271, 278], "prone": [20, 37, 55], "move": [20, 46, 47, 55, 56, 69, 71, 98, 112, 120, 122, 128, 156, 181, 185, 186, 213, 214, 223, 232, 253], "task": [21, 22, 26, 61, 128, 129, 135, 192, 197, 268, 275], "deeper": [21, 226, 273], "explor": [21, 130, 131, 188, 197, 237, 278], "diophantin": [22, 95, 195, 216], "739085133215161": [22, 24, 25, 220], "9y": 22, "3x": [22, 55, 97, 195, 221, 270], "cc": [22, 56, 71, 187, 190, 192, 194, 198, 274], "4xy": [22, 183, 255], "8y": 22, "7y": [22, 215], "yield": [23, 35, 37, 46, 55, 56, 60, 63, 79, 80, 95, 98, 105, 111, 162, 187, 190, 195, 197, 198, 203, 204, 209, 210, 211, 214, 215, 220, 237, 240, 274], "rearrang": [23, 106, 113, 130, 131, 152, 218], "eqn": [23, 35, 221], "solutions_set": 23, "solution_set": 23, "256": [23, 37, 46, 95, 198, 202], "techniqu": [23, 38, 50, 80, 82, 202, 204, 214, 218, 221, 274], "solution_outside_2_3": 23, "interv": [23, 33, 35, 46, 55, 59, 61, 63, 64, 65, 68, 71, 80, 82, 85, 95, 154, 163, 193, 194, 195, 197, 198, 205, 208, 217, 221, 222, 264, 279], "calculu": [23, 32, 55, 60, 82, 91, 135, 183, 184, 211, 222, 252, 253, 254, 257, 258, 269, 271, 276], "critic": [23, 35, 141, 185, 197, 221], "minima": [23, 221], "critical_point": 23, "point1": [23, 179, 249], "point2": [23, 179, 249], "curvatur": [23, 137, 141], "solution_list": 23, "membership": [23, 53, 197, 210], "candid": [23, 55, 91, 95, 195, 214], "solution_set_arg": 23, "overli": 24, "float64": [24, 37, 96, 222], "fsolv": 24, "linalg": [24, 37], "findroot": [24, 63, 220], "overdetermin": [24, 220, 221], "toler": [24, 37, 55, 59, 193, 214, 220], "18466446988997098217": 24, "16840434497100886801e": 24, "tweak": [24, 202, 220], "closest": [24, 55, 68], "closer": [24, 120, 221, 273], "00000000000000": [24, 55, 59, 169, 202, 222], "bisect": [24, 95, 198, 220], "multidimension": [24, 196, 233, 258], "19287309935246": [24, 220], "27844411169911": [24, 220], "192873099352460791205211": 24, "278444111699106966687122": 24, "root_scalar": 24, "lam_f": [24, 241], "3416277185114782": 24, "slightli": [24, 28, 37, 51, 95, 97, 120, 188, 189, 193, 195, 198, 202, 212, 214], "x_valu": 24, "12757857962640e": 24, "73908513321516": 24, "4877893607115270300540019e": 24, "6543612251060553497428174e": 24, "solvabl": [25, 46, 101, 215, 218, 221, 279], "abel": [25, 91], "ruffini": [25, 91], "theorem": [25, 43, 56, 63, 65, 71, 81, 82, 86, 91, 95, 108, 109, 120, 168, 177, 185, 189, 192, 195, 209, 212, 215, 221, 254, 264], "groebnerbasi": [25, 190, 194, 198, 201], "lambert": [25, 61, 82, 199], "decompos": [25, 46, 47, 53, 55, 57, 61, 66, 91, 95, 152, 155, 161, 162, 164, 193, 194, 198, 201, 222], "reflect": [25, 39, 43, 47, 55, 65, 66, 67, 71, 84, 101, 137, 140, 141, 178], "lack": [25, 37, 57, 59, 115, 202, 268], "crootof": [25, 55, 198, 218, 220], "765": 25, "352": 25, "181": 25, "08": [25, 120], "total": [25, 38, 44, 46, 55, 60, 71, 84, 85, 86, 88, 120, 122, 130, 137, 141, 147, 152, 165, 174, 187, 193, 195, 198, 211, 214, 218, 226, 228, 256], "scroll": 25, "56": [25, 58, 82, 95, 198], "1307": 25, "432": [25, 68, 197], "434607": 25, "144": [25, 60, 82, 187], "0509758447494279": 25, "313552108895239": 25, "14751999969868": 25, "estim": [25, 35, 54, 55, 59, 80, 268], "preserv": [25, 36, 37, 46, 55, 91, 166, 193, 198, 203, 204, 214], "77245385090552": 25, "4142135623730951": 25, "varieti": [25, 37, 38, 47, 55, 96, 99, 133, 189, 196, 198, 222, 240], "exclud": [25, 37, 54, 55, 82, 91, 111, 135, 190, 193, 195, 198, 208, 218, 220, 233, 236, 240], "risk": 25, "parse_latex": [25, 97], "central": [26, 46, 52, 63, 65, 71, 110, 115, 133, 188, 197, 198, 215, 222], "pypi": 27, "continuum": [27, 263], "qtconsol": [27, 277], "nicer": [27, 55, 126], "setupegg": 27, "enthought": 27, "canopi": 27, "activepython": 27, "spack": 27, "freshli": 27, "starter": 27, "sy": [27, 37, 57, 118, 135, 202, 233, 244, 252, 270], "wherev": [27, 118, 214, 221, 250], "visit": [27, 39, 46, 55, 60, 275], "chat": 27, "gitter": [27, 274], "excel": [27, 59, 197, 276], "ticket": 27, "export": [28, 202], "latin": 28, "clunki": 28, "collid": [28, 228], "win": 28, "throwawai": 28, "surviv": 28, "foo": [28, 35, 37, 55, 163, 182, 240, 243], "report": [28, 35, 46, 55, 68, 86, 95, 199, 210, 221, 230, 233, 274, 279], "stick": 28, "_clash1": [28, 55], "_clash2": [28, 55], "multi": [28, 55, 56, 119, 128, 135, 148, 152, 162, 188, 202, 221], "_clash": [28, 55], "union": [28, 33, 35, 37, 44, 46, 53, 85, 97, 189, 197, 202, 208, 209, 217, 221, 222, 240, 259], "sympif": [28, 55], "real_field": 29, "instanti": [29, 36, 37, 47, 55, 63, 68, 70, 71, 88, 91, 158, 166, 178, 188, 189, 193, 197, 222, 247, 250], "q1": [29, 91, 98, 109, 118, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 136, 177, 178, 180, 181, 182, 185, 186, 192, 247, 248], "q2": [29, 98, 109, 118, 120, 121, 122, 123, 125, 126, 127, 130, 131, 136, 177, 178, 180, 181, 182, 185, 186, 192, 247, 248], "r1": [29, 65, 68, 84, 98, 99, 141, 178, 183, 198, 247], "euclideanspac": 29, "realnormedalgebra": 29, "r2": [29, 57, 68, 84, 86, 98, 99, 141, 178, 198, 202, 214, 247], "q3": [29, 109, 120, 121, 123, 125, 126, 127, 130, 178, 180, 181, 186, 247, 248], "bi": [29, 55, 61, 63, 82, 186, 209, 218], "cj": 29, "dk": [29, 98, 197], "atan2": [29, 34, 57, 62, 142, 202, 247], "atan": [29, 34, 57, 59, 62, 66, 71, 79, 82, 122, 136, 137, 199, 202, 204], "arc_coplanar": 29, "arc": [29, 61, 278], "coplanar": [29, 69, 186], "ax": [29, 56, 59, 65, 68, 80, 87, 91, 98, 103, 140, 165, 178, 186, 187, 188, 191, 199, 215, 218, 221, 223, 224, 227, 247, 248, 250, 253, 255, 278], "parallel": [29, 65, 68, 69, 71, 82, 102, 104, 105, 108, 185, 186, 195, 252, 256], "vector_coplanar": 29, "is_pur": 29, "mathbf": [29, 88, 128, 130, 131, 133, 173, 177, 178, 182, 183, 185, 186, 202, 212, 223, 250, 251, 253, 255, 256], "versor": 29, "0i": 29, "0j": [29, 192], "0k": 29, "vector_part": 29, "from_axis_angl": 29, "radian": [29, 61, 64, 65, 66, 68, 69, 70, 91, 103, 118, 141, 142, 178], "from_rotation_matrix": 29, "orthogon": [29, 32, 62, 70, 84, 91, 166, 178, 186, 194, 247, 248, 254], "det": [29, 91, 92, 135, 186, 191, 274], "index_vector": 29, "mod": [29, 56, 61, 85, 91, 92, 95, 164, 189, 191, 192, 193, 195, 197, 198, 202, 204, 212, 215, 258], "magnitud": [29, 37, 54, 55, 59, 63, 96, 98, 99, 101, 103, 122, 135, 166, 175, 178, 183, 186, 188, 247, 253, 255], "norm": [29, 91, 155, 166, 178, 193, 195, 197, 198], "scalar_part": 29, "is_zero_quaternion": 29, "mensor": 29, "60": [29, 41, 46, 48, 54, 55, 60, 63, 82, 91, 95, 98, 99, 201, 202, 215, 218, 240], "pth": 29, "668": 29, "224": [29, 171, 196], "336": 29, "448": 29, "pow_cos_sin": 29, "900": 29, "1800": [29, 56], "2700": [29, 98], "3600": [29, 60], "rotate_point": 29, "coordin": [29, 37, 56, 57, 61, 63, 64, 66, 67, 70, 72, 88, 91, 98, 101, 103, 107, 112, 113, 114, 117, 118, 119, 120, 121, 123, 125, 128, 129, 130, 131, 134, 136, 144, 146, 165, 166, 169, 177, 178, 179, 180, 181, 183, 186, 189, 197, 198, 210, 218, 247, 248, 249, 252, 254, 256, 264], "to_axis_angl": 29, "to_rotation_matrix": 29, "assumptionkei": [30, 32], "proposit": [30, 32, 85], "is_tru": [30, 32, 33], "assumptionscontext": [30, 31, 32], "global_assumpt": [30, 31, 32], "discern": [30, 32], "refin": [30, 32, 55, 86, 189, 193, 197, 198, 214, 235], "progress": [30, 32, 95, 235], "inherit": [30, 55, 62, 85, 88, 89, 112, 157, 166, 187, 202, 222, 227, 235, 236], "askhandl": 30, "mere": [31, 32, 37, 59, 163], "thin": [31, 91, 124, 137], "undefinedpred": [31, 32], "sexi": [31, 32], "sexyprimepred": [31, 32], "sexyprim": [31, 32], "int1": [31, 32], "int2": [31, 32], "assump": [31, 32], "r3": [31, 84, 98, 99, 214], "predicate_": [31, 32], "mathematical_log": [31, 32], "r4": [31, 84, 98], "sexy_prim": [31, 32], "resolut": [31, 32, 215], "askpredicatehandl": [31, 32], "r5": [32, 214], "r6": 32, "refine_pow": [32, 34], "refine_ab": [32, 34], "refine_arg": [32, 34], "refine_atan2": [32, 34], "refine_im": [32, 34], "refine_matrixel": [32, 34], "refine_r": [32, 34], "refine_sign": [32, 34], "tautolog": 32, "symmetr": [32, 34, 38, 43, 46, 47, 51, 71, 86, 87, 88, 91, 95, 177, 187, 193, 194, 195, 198, 201, 210, 212, 228, 240], "unitari": [32, 82, 95, 152, 157, 187], "triangular": [32, 86, 87, 91, 191, 197, 220, 222, 256], "diagon": [32, 60, 86, 87, 88, 91, 94, 117, 140, 191, 224, 225], "rank": [32, 37, 38, 39, 44, 46, 47, 49, 50, 51, 70, 84, 91, 92, 178, 180, 189, 191, 193, 195, 197, 223, 225, 227, 228, 274], "singular": [32, 37, 47, 55, 59, 61, 62, 77, 78, 80, 82, 91, 98, 100, 132, 178, 189, 196, 209, 218, 221, 247, 258, 268], "notabl": [32, 37, 58, 63, 80, 96, 192], "truth_maintenance_system": 32, "istruepred": 33, "gt": [33, 37, 222, 240], "istruehandl": 33, "commutativepred": 33, "commutativehandl": 33, "finitepred": 33, "nor": [33, 35, 55, 85, 95, 142, 188, 198, 209, 211, 218, 228, 247], "nan": [33, 34, 61, 63, 111, 214, 222, 268], "finitehandl": 33, "r7": 33, "infinitepred": 33, "infinitehandl": 33, "symmetricpred": 33, "transpos": [33, 36, 86, 88, 91, 105, 135, 151, 178, 186, 191, 197, 215, 223, 228, 229, 274], "symmetrichandl": 33, "r8": 33, "symmetric_matrix": 33, "invertiblepred": 33, "fullrank": [33, 37], "invertiblehandl": 33, "r9": 33, "invertible_matrix": 33, "orthogonalpred": 33, "tm": [33, 141], "mm": [33, 36, 95, 113, 120, 125, 126, 166, 191], "orthogonalhandl": 33, "r10": 33, "orthogonal_matrix": 33, "unitarypred": 33, "unitaryhandl": 33, "r11": 33, "unitary_matrix": 33, "positivedefinitepred": 33, "tmz": 33, "column": [33, 36, 37, 38, 83, 85, 86, 88, 91, 92, 94, 105, 113, 117, 120, 133, 163, 170, 178, 182, 187, 191, 197, 202, 218, 221, 227, 247], "positive_definit": 33, "positivedefinitehandl": 33, "r12": 33, "definite_matrix": 33, "uppertriangularpred": 33, "m_": [33, 131, 187, 195], "ij": [33, 168, 173, 187, 222], "zeromatrix": [33, 88], "upper_triangular": [33, 86], "uppertriangularhandl": 33, "r13": 33, "uppertriangularmatrix": 33, "lowertriangularpred": 33, "lower_triangular": [33, 86], "lowertriangularhandl": 33, "r14": 33, "lowertriangularmatrix": 33, "diagonalpred": 33, "diagonalhandl": 33, "r15": 33, "diagonal_matrix": 33, "fullrankpred": 33, "row": [33, 36, 37, 38, 44, 47, 55, 60, 86, 87, 88, 91, 92, 94, 95, 105, 117, 118, 120, 133, 135, 136, 163, 178, 186, 191, 197, 202, 212, 221, 222, 227, 241, 247, 248], "linearli": [33, 37, 63, 79, 91, 195, 218, 220, 228], "fullrankhandl": 33, "squarepred": 33, "squarehandl": 33, "r16": 33, "square_matrix": 33, "integerelementspred": 33, "integer_el": 33, "integerelementshandl": 33, "realelementspred": 33, "real_el": 33, "realelementshandl": 33, "complexelementspred": 33, "complex_el": 33, "complexelementshandl": 33, "singularpred": 33, "singularhandl": 33, "fore": 33, "r17": 33, "singularmatrix": 33, "normalpred": 33, "normalhandl": 33, "r18": 33, "normal_matrix": 33, "triangularpred": 33, "triangularhandl": 33, "r19": 33, "triangular_matrix": 33, "unittriangularpred": 33, "unit_triangular": 33, "unittriangularhandl": 33, "evenpred": 33, "evenhandl": 33, "oddpred": 33, "oddhandl": 33, "primehandl": 33, "subject": [33, 65, 71, 99, 109, 136, 197], "compositepred": 33, "compositehandl": 33, "positivepred": 33, "positivehandl": 33, "negativepred": 33, "negativehandl": 33, "zeropred": 33, "zerohandl": 33, "nonzeropred": 33, "nonzerohandl": 33, "nonpositivepred": 33, "nonpositivehandl": 33, "nonnegativepred": 33, "nonnegativehandl": 33, "integerpred": 33, "integerhandl": 33, "r20": 33, "rationalpred": 33, "rationalhandl": 33, "r21": 33, "irrationalpred": 33, "ratio": [33, 45, 46, 54, 55, 59, 60, 63, 65, 68, 69, 70, 71, 87, 95, 105, 141, 173, 202, 211, 214, 220], "irrationalhandl": 33, "r22": 33, "realpred": 33, "disjoint": [33, 36, 44, 47, 198, 210, 240], "realhandl": 33, "r23": 33, "extendedrealpred": 33, "extendedrealhandl": 33, "hermitianpred": 33, "hermitianhandl": 33, "r24": 33, "hermitianoper": [33, 155, 157], "complexpred": 33, "complexhandl": 33, "r25": 33, "imaginarypred": 33, "imaginaryhandl": 33, "r26": 33, "antihermitianpred": 33, "antihermitianhandl": 33, "r27": 33, "algebraicpred": 33, "askalgebraicpredicatehandl": 33, "r28": 33, "algebraichandl": 33, "transcendentalpred": 33, "transcedent": 33, "lagrang": [35, 55, 112, 124, 128, 198, 215], "lagrangian": [35, 113, 122, 127, 128, 131, 132], "euler_equ": [35, 258], "r29": 35, "93lagrange_equ": 35, "decreas": [35, 37, 47, 195], "monoton": [35, 37, 72], "is_decreas": [35, 258], "lopen": [35, 55, 210, 217, 222], "ropen": [35, 61, 210, 222], "is_increas": [35, 258], "72": [35, 55, 68, 91, 95, 98, 187, 201], "is_monoton": [35, 258], "is_strictly_decreas": [35, 258], "is_strictly_increas": [35, 258], "monotonicity_help": [35, 258], "held": [35, 56, 132, 226, 278], "r30": 35, "mathematical_singular": 35, "interpol": [35, 60, 64, 135, 194, 195, 198], "finite_diff_weight": [35, 55, 258, 268], "apply_finite_diff": [35, 55, 258, 268], "differentiate_finit": [35, 55, 258, 268], "finite_diff": [35, 55], "x_list": [35, 268], "y_list": [35, 268], "cube": [35, 37, 39, 46, 48, 61, 82, 195, 196, 215, 221, 256], "xlist": 35, "55271367880050e": 35, "indexedbas": [35, 37, 54, 55, 202, 220, 225, 226, 227, 234], "idx": [35, 37, 202, 225, 226, 227, 234], "zip": [35, 45, 56, 85, 95, 198, 208, 215, 218, 237, 240], "region": [35, 63, 72, 82, 188, 210, 218, 221, 222, 247, 249, 256], "bewar": [35, 63], "phenomenon": [35, 173, 195, 205, 273], "90": [35, 46, 53, 63, 86, 91, 97, 98, 101, 109, 118, 136, 202, 204, 214, 222, 235], "finitediff": 35, "wrt": [35, 37, 55, 57, 63, 72, 91, 118, 135, 178, 179, 195, 198, 247, 248, 249, 253], "len": [35, 43, 44, 45, 46, 47, 51, 53, 55, 56, 60, 63, 70, 80, 85, 122, 137, 141, 152, 162, 198, 214, 218, 227, 240], "nearest": [35, 197], "furthest": [35, 56], "sublist": [35, 51, 56, 82, 165, 268], "fd": [35, 37, 168, 263], "0th": [35, 47, 56, 63], "1st": [35, 47, 95, 105, 218, 219, 243, 268], "classic": [35, 61, 63, 91, 154, 170, 178, 186, 189, 263], "forward": [35, 37, 86, 105, 120, 128, 161, 185, 214, 233], "pai": 35, "attent": [35, 46, 61], "gridpoint": 35, "plan": [35, 109, 193, 216, 277], "mycoeff": 35, "3rd": [35, 47, 61, 95, 135, 198, 220, 223, 240], "2nd": [35, 47, 56, 95, 105, 135, 218, 223, 240], "cost": [35, 37, 95, 122, 221, 272], "poorer": 35, "grand": 35, "r31": 35, "51": [35, 91, 95], "184": [35, 218], "1988": [35, 147, 165, 195, 196], "699": 35, "706": [35, 91], "1090": [35, 198], "s0025": [35, 95], "5718": [35, 95], "0935077": 35, "continuous_domain": [35, 217, 258], "tan": [35, 55, 60, 62, 82, 97, 111, 125, 126, 127, 132, 199, 201, 202, 209, 211, 218, 221, 278], "function_rang": [35, 258], "is_convex": [35, 67, 71, 258], "sym": [35, 45, 46, 51, 55, 60, 178, 202, 205, 210, 214, 215, 220, 222, 228, 240, 278], "convex": [35, 71, 72, 82], "unspecifi": [35, 55, 70, 268], "multivari": [35, 55, 63, 189, 190, 192, 193, 194, 196, 198, 199, 209, 214, 220, 221, 222, 278], "concav": [35, 137], "r32": 35, "convex_funct": 35, "r33": 35, "ifp": 35, "illinoi": 35, "edu": [35, 39, 46, 47, 56, 58, 60, 82, 91, 95, 196, 201, 211, 214, 215, 218, 222, 247], "angelia": 35, "l3_convfunc": 35, "r34": 35, "logarithmically_convex_funct": 35, "r35": 35, "logarithmically_concave_funct": 35, "r36": 35, "concave_funct": 35, "lcim": [35, 258], "mixtur": [35, 37, 72, 189, 235], "incommensur": 35, "not_empty_in": [35, 221, 258], "finset_intersect": 35, "finite_set": [35, 210], "tracker": [35, 210, 221, 274], "aperiod": 35, "smallest": [35, 49, 61, 68, 70, 77, 85, 91, 95, 165, 178, 193, 238, 240], "verif": [35, 191, 220], "reliabl": [35, 55, 218, 238, 268], "henc": [35, 37, 45, 46, 55, 57, 61, 63, 67, 80, 83, 85, 95, 101, 183, 188, 189, 190, 195, 202, 212, 215, 219, 221, 233, 237, 251, 252, 253, 273, 278], "stationary_point": [35, 258], "stationari": [35, 222], "tikz": 36, "joyofcat": 36, "adamek": 36, "herrlich": 36, "strecker": 36, "joi": 36, "cat": [36, 177], "book": [36, 46, 56, 61, 113, 118, 121, 129, 133, 134, 153, 196, 201, 202, 271], "katmat": 36, "uni": [36, 82, 240], "bremen": 36, "de": [36, 56, 60, 95, 173, 187, 188, 199, 204, 215, 216, 218, 240], "acc": [36, 135, 181, 185], "embryon": 36, "morphism": [36, 189], "codomain": [36, 189, 197], "arrow": [36, 84, 98, 188, 202], "namedmorph": 36, "prohibit": [36, 47, 48, 178], "identitymorph": 36, "compositemorph": 36, "compos": [36, 55, 56, 122, 132, 170, 172, 173, 185, 189, 193, 194, 197, 198, 199, 202, 204, 214], "circ": [36, 55, 66, 72, 80, 88], "compon": [36, 37, 51, 55, 57, 70, 82, 88, 91, 106, 112, 115, 128, 129, 133, 140, 165, 170, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 198, 200, 222, 224, 227, 228, 237, 240, 247, 249, 252, 253], "new_nam": 36, "forget": [36, 278], "id_a": 36, "id_b": 36, "commutative_diagram": 36, "quadrupl": [36, 198], "mbox": 36, "hom": 36, "id": [36, 51, 61], "rightarrow": [36, 47, 51, 56, 60, 61, 63, 77, 78, 80, 82, 85, 86, 95, 188, 197, 209, 221, 240, 268], "monoid": 36, "pare1970": 36, "accompani": 36, "premis": 36, "conclus": [36, 55], "carri": [36, 37, 55, 160, 166, 173, 189, 192, 195, 197, 199, 200, 241], "premises_kei": 36, "et": [36, 82, 147, 195, 198, 199, 211, 214], "pareigi": 36, "functor": 36, "1970": [36, 91], "is_subdiagram": 36, "subdiagram": 36, "d1": [36, 51, 178, 189, 209, 222, 247], "subdiagram_from_object": 36, "veryuniqu": 36, "diagram_draw": 36, "diagramgrid": 36, "analys": [36, 103, 105, 135, 222], "drawn": [36, 46, 84, 188, 192, 200], "moprhism": 36, "strive": 36, "nevertheless": 36, "laid": [36, 118, 165], "width": [36, 37, 83, 182, 188, 198, 202, 233], "height": [36, 37, 71, 88, 137, 138, 188, 189, 202, 209, 256], "emploi": [36, 54, 59, 82, 95, 198, 201, 216, 218, 222], "lai": 36, "layout": 36, "sequenti": [36, 39, 56, 61, 247, 248], "test_draw": 36, "five": [36, 44, 80, 101, 202, 215], "lemma": [36, 46, 80, 190], "fivelemma": 36, "five_lemma": 36, "arrowstringdescript": 36, "curving_amount": 36, "looping_start": 36, "looping_end": 36, "horizontal_direct": 36, "vertical_direct": 36, "label_posit": 36, "pic": 36, "princip": [36, 56, 61, 63, 80, 82, 92, 107, 120, 141, 189, 190, 191, 192, 193, 195, 197, 198, 199], "offset": [36, 37, 55, 60, 63, 225, 227], "cell": 36, "vertic": [36, 39, 48, 49, 65, 66, 67, 68, 70, 71, 72, 82, 84, 86, 91, 99, 117, 123, 140, 148, 187, 188, 191, 197, 202, 210, 240, 256], "disregard": 36, "unexplain": 36, "astr": 36, "dr": [36, 57, 202, 218], "12mm": 36, "loop": [36, 37, 95, 105, 121, 178, 188, 199, 202, 218, 237, 240, 273], "correspondingli": 36, "label_displac": 36, "arrow_styl": 36, "dash": 36, "xypicdiagramdraw": 36, "formatt": 36, "utilis": 36, "xypic": 36, "drawer": 36, "xymatrix": 36, "ld": 36, "arrow_formatt": 36, "therebi": 36, "default_arrow_formatt": 36, "farther": 36, "centr": [36, 52, 188], "default_formatt": 36, "45": [36, 55, 60, 71, 91, 95, 101, 198, 199, 215], "_3mm": 36, "default_curving_amount": 36, "cm": [36, 135, 222], "_1cm": 36, "default_curving_step": 36, "h1": [36, 115], "1cm": 36, "rr": [36, 55, 73, 191, 192, 194, 198, 199], "h_": [36, 46, 51, 60, 63, 82], "_2cm": 36, "mask": [36, 202], "diagram_format": 36, "proceed": [36, 38, 80, 82, 134, 196, 212], "xypic_draw_diagram": 36, "shortcut": [36, 55, 87, 186, 202, 210, 214, 278], "insert": [36, 38, 86, 97, 98, 163, 168, 202, 222, 243], "preview_diagram": 36, "png": [36, 83, 91, 98, 99, 103, 182, 188, 202, 205], "brief": [37, 221, 233, 255], "fab": [37, 202], "cse_main": [37, 203, 214], "cse": [37, 96, 109, 157, 203, 235, 241], "meat": 37, "lightweight": [37, 197, 272], "pycod": [37, 202], "lambdarepr": [37, 202, 241], "aesara_funct": [37, 96, 202], "float80": [37, 202], "assign_to": [37, 202], "type_alias": [37, 202], "0l": [37, 202], "powl": [37, 202], "c99": [37, 202, 235], "expm1": [37, 202, 259], "ternari": [37, 55, 202, 215], "thrown": [37, 202], "fcode": [37, 202], "contract": [37, 57, 106, 168, 202, 211, 224, 225, 226, 227, 228, 229, 263], "len_i": [37, 202], "mat_1": 37, "mat_2": 37, "jscode": [37, 202], "user_funct": [37, 202], "argument_test": [37, 202], "cfunction_str": [37, 202], "octav": [37, 135, 235, 265], "custom_funct": [37, 202], "existing_octave_fcn": [37, 202], "is_matrix": [37, 202], "my_mat_fcn": [37, 202], "my_fcn": [37, 202], "mat": [37, 88, 137, 162, 202], "octave_cod": [37, 202], "summat": [37, 54, 55, 59, 60, 63, 168, 196, 198, 202, 205, 214, 222, 223, 226, 227, 228, 234], "mathematica_cod": [37, 202], "g1": [37, 40, 45, 46, 80, 91, 105], "g2": [37, 40, 45, 46, 80, 84, 91, 105], "gamma_1": [37, 108], "gamma_2": [37, 108], "\u03b3\u2081": 37, "\u03b3\u2082": 37, "\u03b2": [37, 187], "h_i": [37, 51], "c89": [37, 202, 235], "julia_cod": [37, 202], "rust_cod": [37, 202], "powi": [37, 202], "make_routin": [37, 235], "f95": [37, 234, 235], "matlab": [37, 109, 135, 235, 265, 274], "breadth": [37, 55, 222], "c_name": [37, 235], "c_code": [37, 235], "h_name": [37, 235], "c_header": [37, 235], "volume_result": 37, "ifndef": [37, 235], "project__test__h": [37, 235], "endif": [37, 235], "preprocessor": [37, 203, 214, 235], "global_var": [37, 235], "insensit": [37, 91, 135, 202, 233, 235], "argument_sequ": [37, 235], "routin": [37, 44, 54, 55, 56, 57, 80, 85, 86, 91, 95, 140, 168, 191, 195, 198, 201, 202, 203, 214, 215, 218, 219, 220, 221, 234, 239, 240, 253], "name_expr": [37, 235], "to_fil": [37, 235], "f_name": [37, 235], "f_code": [37, 235], "choic": [37, 47, 60, 63, 80, 82, 96, 132, 164, 173, 177, 178, 185, 193, 195, 198, 202, 214, 218, 240, 272], "hydrogen": [37, 263], "r_nl": [37, 107, 169, 263], "my_routin": 37, "result_var": [37, 235], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 37, "__________": [37, 190], "\u212f": [37, 140, 187, 202, 268, 272, 274, 278, 279], "assoc_laguerr": [37, 63, 202], "fcn": [37, 235], "result_5397460570204848505": [37, 235], "out_8598435338387848786": [37, 235], "examin": [37, 56, 157, 233, 235, 278], "inputargu": [37, 235], "outputargu": [37, 235], "inoutargu": [37, 235], "disk": [37, 56, 210, 221, 241], "binary_funct": [37, 96, 234], "tensor": [37, 42, 57, 62, 91, 106, 115, 133, 147, 153, 154, 155, 165, 168, 177, 178, 202, 223, 224, 226, 227, 234, 241, 250, 251, 257, 261], "binary_func": [37, 234], "servic": [37, 222], "tempdir": [37, 234], "qho_1d": [37, 144], "psi_n": [37, 144, 263], "y_": [37, 63, 80, 107, 187], "qho": 37, "tmp": 37, "reveal": [37, 95, 221, 273], "subroutin": [37, 46, 164, 195, 259], "autofunc": 37, "dimens": [37, 39, 56, 57, 63, 64, 66, 68, 69, 70, 72, 84, 86, 88, 91, 94, 98, 106, 122, 142, 152, 154, 155, 157, 162, 171, 172, 175, 176, 178, 188, 191, 202, 215, 218, 220, 222, 223, 227, 228, 235, 247, 249, 251, 259, 263], "hbar": [37, 144, 150, 155, 163, 169, 173, 175, 187], "05457162d": 37, "14159265358979d0": 37, "0d0": [37, 202], "74126166983329d": 37, "33": [37, 55, 58, 91, 133, 141, 195, 199, 202, 222], "verbos": [37, 55, 86, 95, 202, 233, 234, 277], "mute": [37, 234], "backend": [37, 83, 96, 97, 103, 121, 123, 129, 182, 199, 234, 241, 264], "auxiliari": [37, 82, 113, 118, 130, 218, 234], "function_nam": [37, 234], "sympy_express": [37, 234], "mandatori": [37, 202, 234], "illustr": [37, 91, 119, 122, 173, 192, 205, 209], "psi_nl": 37, "766": 37, "incur": [37, 96], "get_numpy_arrai": 37, "tight": 37, "temp": [37, 120], "alloc": [37, 61, 259], "fuse": 37, "wise": [37, 38, 61, 86, 191, 195, 202, 208, 234], "unabl": [37, 68, 72, 97, 220, 247, 267, 268], "fortun": [37, 96, 122, 198, 199], "reconnect": 37, "autom": [37, 61, 96, 211, 234, 272], "ideologi": [37, 221], "fashion": [37, 55, 61, 88, 120, 130, 131, 133, 186, 189, 240], "broadcast": [37, 96, 202, 227, 234], "outperform": 37, "jensen": 37, "quantit": [37, 170], "leverag": [37, 96, 202], "ufunc": [37, 96, 234, 241], "fn_numpi": 37, "fn_fortran": 37, "linspac": [37, 78, 96, 118, 135], "xx": [37, 91, 115, 186, 240], "21306132": 37, "98101184": 37, "44626032": 37, "timeit": [37, 199], "10000": [37, 59, 95, 96, 98, 220], "18891601900395472": 37, "004707066000264604": 37, "facil": 37, "comparison": [37, 54, 55, 85, 91, 118, 189, 197, 201, 220, 233, 240], "thereof": [37, 55, 189, 195, 197], "optims_c99": 37, "log1p": [37, 202, 259], "expm1_opt": 37, "log1p_opt": 37, "exp2_opt": 37, "log2_opt": 37, "log2const_opt": 37, "funcminusoneoptim": [37, 259], "func_m_1": 37, "opportunist": 37, "replaceoptim": [37, 259], "catastroph": 37, "replace_in_add": 37, "cost_funct": 37, "prioriti": [37, 78, 109, 118, 186, 241], "__call__": [37, 47, 55, 197], "exp2": [37, 202, 259], "create_expand_pow_optim": [37, 259], "base_req": 37, "is_symbol": [37, 86], "expand_opt": 37, "opt2": 37, "is_funct": 37, "log2": [37, 63, 202, 259], "matin_opt": 37, "matinv_opt": 37, "matrixsolv": [37, 202, 259], "matrix_nod": 37, "numpyprint": 37, "doprint": [37, 202], "seriesapprox": [37, 259], "reltol": 37, "max_ord": 37, "n_point_check": 37, "threshold": [37, 95], "largest": [37, 47, 49, 55, 61, 63, 91, 94, 95, 148, 189, 193, 220, 240], "series_approx2": 37, "1e": [37, 55, 59, 91, 103, 137, 198, 220], "series_approx3": 37, "series_approx8": 37, "sumapprox": [37, 259], "neglect": 37, "2000": [37, 41, 82, 95, 196], "sum_approx3": 37, "sum_approx2": 37, "sum_approx1": 37, "token": [37, 80, 83, 97, 259], "diagram": [37, 44, 84, 98, 121, 122, 123, 128, 148, 227, 251, 264, 273], "codegenast": 37, "assignmentbas": [37, 259], "augmentedassign": [37, 259], "addaugmentedassign": 37, "subaugmentedassign": 37, "mulaugmentedassign": 37, "divaugmentedassign": 37, "modaugmentedassign": 37, "codeblock": [37, 97, 259], "quotedstr": [37, 259], "intbasetyp": [37, 259], "_sizedinttyp": 37, "signedinttyp": [37, 259], "unsignedinttyp": [37, 259], "floatbasetyp": [37, 259], "floattyp": [37, 259], "complexbasetyp": 37, "complextyp": [37, 259], "pointer": [37, 235, 236, 259], "functionprototyp": [37, 259], "functiondefinit": [37, 97, 259], "stream": [37, 56, 203, 214, 240, 259], "functioncal": [37, 259], "breaktoken": [37, 259], "continuetoken": [37, 259], "nonetoken": [37, 259], "float32": [37, 96, 97, 241], "codeprint": 37, "complex_": 37, "bool_": 37, "intc": [37, 97], "intp": 37, "unsign": [37, 60, 214], "int8": 37, "int16": 37, "int32": 37, "int64": [37, 222], "uint8": 37, "uint16": 37, "uint32": 37, "uint64": 37, "x86": 37, "amd64": 37, "complex64": 37, "complex128": 37, "newton": [37, 63, 128, 171, 175, 195, 199], "aug_assign": [37, 259], "tol": [37, 55, 193], "val": [37, 55, 67, 193, 197, 241], "whl": 37, "py_str": 37, "inf": [37, 47, 55, 91, 193, 198, 210, 218, 222], "exec": [37, 55, 83, 241], "1121416371": 37, "909672693737": 37, "867263818209": 37, "865477135298": 37, "865474033111": 37, "1g": 37, "3e": 37, "2003": [37, 187, 196, 202, 215], "source_format": [37, 202], "op": [37, 55, 91, 157, 168, 181, 185, 211, 240, 241], "parametr": [37, 63, 64, 68, 91, 188, 215, 221, 247, 249, 256], "volatil": 37, "binop": 37, "exit": [37, 95, 233], "premad": 37, "break_": 37, "lift": [37, 51, 61, 63, 80, 193, 195, 198], "left_hand_sid": 37, "topological_sort": [37, 240], "postprocess": [37, 198, 203, 214], "topolog": [37, 55, 57, 191, 240], "continue_": 37, "untyp": 37, "compliant": 37, "ok": [37, 47, 202, 218], "elem": [37, 46, 189], "ijk": [37, 227], "stride": [37, 225, 227], "lmn": 37, "cast_nocheck": 37, "alia": [37, 48, 55, 65, 71, 86, 87, 89, 93, 152, 161, 168, 189, 192, 193, 197, 201, 210, 233, 243, 278], "nbit": 37, "storag": [37, 55, 91, 162, 187, 195], "nmant": 37, "mantissa": 37, "nexp": 37, "half_precis": 37, "f16": 37, "65504": 37, "tini": [37, 55], "ep": [37, 46, 54, 193, 197, 198], "decimal_dig": 37, "cast_check": 37, "1e5": 37, "cast": [37, 88, 270], "subnorm": [37, 46], "idempot": 37, "loos": [37, 55, 213], "overflow": [37, 237], "max_expon": 37, "min_expon": 37, "for_i": 37, "for_ji": 37, "for_kji": 37, "function_arg": [37, 233], "fcall": 37, "bar": [37, 63, 119, 128, 157, 163, 243], "baz": 37, "return_typ": 37, "fp": [37, 38, 55, 198, 204, 206], "from_functionprototyp": 37, "prototyp": [37, 96, 235], "value_const": 37, "pointer_const": 37, "attr_param": 37, "looking_for": 37, "as_declar": 37, "formatstr": 37, "5g": 37, "stdout": [37, 233], "stderr": 37, "oppos": [37, 241, 268], "_field": 37, "_construct_": 37, "not_in_arg": 37, "float16": 37, "inttyp": 37, "super": [37, 63, 193, 202, 247, 248], "from_expr": [37, 198], "42": [37, 44, 55, 58, 60, 68, 69, 71, 86, 87, 89, 91, 93, 95, 193, 198, 215, 233], "v6": 37, "123456": [37, 55, 95], "v10": 37, "12345": [37, 59], "67894": 37, "boost_mp50": 37, "boost": 37, "multiprecis": [37, 192], "cpp_dec_float_50": 37, "r37": 37, "rtol": 37, "atol": 37, "precision_target": 37, "v18": 37, "123456789012345646": 37, "123456789012345649": 37, "Will": [37, 91, 97, 197, 202, 233], "decl1": 37, "decl2": 37, "alt": 37, "secondarili": [37, 198], "mathcin": 37, "cbrt": [37, 62, 202, 259], "minu": [37, 54, 55, 183, 195, 202, 253], "0e": [37, 55], "fma": [37, 202, 259], "cpu": [37, 96, 135], "hypot": [37, 202, 259], "hypotenus": [37, 71], "log10": [37, 202, 259], "ten": [37, 96], "plu": [37, 54, 91, 97, 135, 148, 198, 202, 212, 241], "famili": [37, 39, 73, 82, 190], "commaoper": [37, 259], "goto": [37, 259], "preincrement": [37, 259], "postdecr": [37, 259], "decrement": [37, 213, 237], "postincr": [37, 259], "increment": [37, 46, 47, 48, 54, 71, 95, 213, 222], "predecr": [37, 259], "alignof": [37, 259], "sizeof": [37, 259], "struct": [37, 187, 259], "dsign": [37, 259], "arrayconstructor": [37, 259], "ac": [37, 47, 67, 101, 115, 133, 145, 215, 222, 240, 243], "95": [37, 53, 95, 195, 202, 218, 220, 235], "do1": 37, "1d0": 37, "do2": 37, "extent": [37, 259], "intent_out": 37, "dim": [37, 57, 70, 96, 170, 176, 202, 225, 228], "arr": 37, "fortranreturn": [37, 259], "aid": [37, 120], "implieddoloop": [37, 259], "idl": 37, "signallib": 37, "prog": [37, 147], "myprogram": 37, "mysub": 37, "subroutinecal": [37, 259], "passs": 37, "inout": 37, "bind_c": [37, 259], "sum_": [37, 54, 55, 56, 60, 63, 80, 82, 86, 88, 95, 187, 198, 199, 204, 205, 212, 218, 222], "cmplx": [37, 202, 259], "intent_in": 37, "intrins": 37, "isign": [37, 259], "lbound": [37, 259], "lb": [37, 77, 237], "literal_dp": [37, 259], "num": [37, 46, 55, 95, 105, 193, 214, 218, 237, 243], "literal_sp": [37, 259], "reshap": [37, 86, 118, 135, 223, 229, 240, 259], "arrayexpr": 37, "shp": 37, "metric": [37, 47, 51, 57, 106, 214, 218, 221, 228], "snr": 37, "convolution2d": 37, "use_renam": [37, 259], "ren": 37, "thingi": 37, "newtons_method": [37, 259], "itermax": 37, "counter": [37, 55, 61, 67, 86, 99, 101], "raphson": 37, "criterion": [37, 46, 134, 190, 195], "netwon": 37, "algo": [37, 47], "r38": 37, "27s_method": 37, "newtons_method_funct": [37, 259], "param": [37, 57, 91, 215], "render_as_modul": [37, 259], "py_mod": 37, "865474033102": 37, "render_as_source_fil": [37, 259], "printer_set": 37, "fcodeprint": [37, 202], "fpgroup": [38, 46], "studi": [38, 45, 54, 57, 91, 186, 189, 195, 198, 215, 222], "combinator": [38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 88, 95, 204, 223, 228, 237, 240, 258, 272, 278], "free_group": [38, 45, 46], "vfree_group": 38, "xfree_group": 38, "fp_group": [38, 46], "coset_enumeration_r": 38, "fall": [38, 54, 55, 60, 83, 182, 197, 202, 215, 219, 222], "famou": [38, 63, 82, 95, 215], "langl": [38, 46, 147, 187], "rangl": [38, 46, 147, 165, 187], "gen0": 38, "gen1": 38, "gen_": 38, "freegroup": 38, "x_2": [38, 45, 60, 77, 163, 190, 195, 198, 204, 215, 221], "x_3": [38, 45, 77, 163], "s_1": 38, "r_1": [38, 189, 199], "s_2": 38, "r_2": 38, "s_k": 38, "r_k": [38, 161], "s_i": [38, 51, 82, 84], "r_i": [38, 199], "reduct": [38, 91, 114, 195, 197, 213, 215], "ho05": [38, 45], "cdhw73": 38, "hav91": 38, "coset_enumeration_c": 38, "coset_enumer": 38, "relator_bas": 38, "coset_table_bas": 38, "influenc": [38, 98, 189, 190], "coset_table_max_limit": 38, "4096000": 38, "safeti": [38, 47, 89], "max_coset": 38, "cox": [38, 196, 198], "c_r": [38, 212], "50": [38, 46, 58, 59, 60, 63, 71, 91, 95, 98, 99, 141, 198, 202, 211, 220], "max_stack_s": 38, "500": [38, 59, 115], "deduction_stack": 38, "stack": [38, 72, 86, 135, 191, 197, 202, 231, 237, 274], "occurr": [38, 55, 95, 118, 178, 214, 222], "exce": [38, 95, 228], "modest": 38, "low_index_subgroup": 38, "conjugaci": [38, 46], "coset_t": [38, 46], "reidemeister_present": 38, "y_1": [38, 215, 222], "y_2": [38, 215, 222], "john": [38, 46, 63, 198, 215, 218], "cannon": 38, "lucien": 38, "dimino": [38, 46], "georg": [38, 189, 218, 240], "hava": 38, "jane": 38, "watson": [38, 214], "comp": [38, 218], "463": [38, 134], "490": [38, 47], "1973": [38, 56, 184], "derek": [38, 45], "holt": [38, 45, 46, 53], "chapman": [38, 45], "hall": [38, 45, 222], "crc": [38, 45, 47], "2005": [38, 45, 82, 95, 198], "xvi": [38, 45], "514": [38, 45, 196], "symposium": [38, 80, 195, 196, 212], "issac": [38, 82, 196, 220], "bonn": 38, "1991": [38, 196], "191": [38, 221], "199": 38, "acm": [38, 54, 80, 82, 196, 212, 218, 220], "graycod": [39, 42], "kw_arg": [39, 49, 168, 227, 228], "hamiltonian": [39, 159], "edg": [39, 48, 49, 84, 191, 202, 221, 240, 277], "hamilton": [39, 86], "vertex": [39, 49, 66, 71, 82, 191], "000": [39, 59, 82, 85, 162, 240], "110": [39, 85, 218, 220, 234, 240], "010": [39, 85, 240], "011": [39, 85, 162, 240], "111": [39, 58, 65, 85, 95, 240], "101": [39, 63, 85, 95, 162, 240], "001": [39, 59, 85, 137, 240], "delet": [39, 84, 86, 91, 199, 243, 278], "statist": [39, 56, 63, 222, 233, 272], "manner": [39, 56, 63, 132, 166, 183, 215, 218, 223, 240, 255], "generate_grai": 39, "0000": 39, "0001": [39, 59], "0011": [39, 50], "0010": 39, "0110": 39, "0111": [39, 162], "0101": [39, 162], "0100": 39, "1100": 39, "1101": 39, "1111": 39, "1110": 39, "1010": 39, "1011": 39, "1001": 39, "r39": 39, "nijenhui": 39, "wilf": [39, 54, 220], "1978": [39, 46, 173, 196], "r40": 39, "knuth": [39, 47, 237], "2011": [39, 47, 80, 95, 184, 211], "art": [39, 47, 189, 202, 204, 237, 264], "vol": [39, 47, 56, 60, 63, 80, 91, 106, 197, 198, 212, 237, 240], "addison": [39, 47, 95, 196], "weslei": [39, 47, 95, 196], "r41": 39, "brgc": 39, "6th": [39, 95], "unrank": [39, 44, 46, 47, 49], "r42": 39, "statweb": 39, "stanford": 39, "susan": 39, "s208": 39, "node12": 39, "tail": [39, 54, 55, 193, 222], "00010": 39, "random_bitstr": [39, 42], "bitlist": [39, 50], "gray_to_bin": [39, 42], "endian": 39, "bin_to_grai": [39, 42], "get_subset_from_bitstr": [39, 42], "bitstr": 39, "graycode_subset": [39, 42], "group_construct": 40, "directproduct": [40, 42, 43], "__mul__": [40, 46, 86, 91, 193, 197], "shift": [40, 46, 47, 49, 56, 63, 66, 70, 72, 85, 188, 193, 195, 198, 205, 212, 220, 222], "gn": 40, "named_group": [40, 43, 45, 46, 52, 53], "cyclicgroup": [40, 42, 43, 46], "perm_group": [40, 45, 46, 47, 52, 53], "permutationgroup": [40, 42, 43, 45, 46, 47, 52, 53], "group_numb": 41, "is_nilpotent_numb": [41, 42], "r43": 41, "randprim": [41, 95, 262], "pakianathan": 41, "shankar": 41, "monthli": [41, 56, 91], "107": [41, 196], "631": 41, "634": 41, "is_abelian_numb": [41, 42], "r44": 41, "is_cyclic_numb": [41, 42], "r45": 41, "integerpartit": [42, 44, 240], "random_integer_partit": [42, 44], "rgs_gener": [42, 44], "rgs_enum": [42, 44], "rgs_unrank": [42, 44], "rgs_rank": [42, 44], "_af_par": [42, 47], "polyhedron": [42, 46, 82, 240], "prufer": 42, "ksubset": [42, 50], "grai": [42, 50, 83, 137, 182, 188], "symmetricgroup": [42, 43, 45, 46, 52, 53], "dihedralgroup": [42, 43, 46, 53], "alternatinggroup": [42, 43, 46, 52], "abeliangroup": [42, 43, 46], "nilpot": [42, 46, 91], "abelian": [42, 43, 46, 84, 173, 189], "cyclic": [42, 43, 46, 47, 48, 58, 86, 95, 228, 240], "_base_ord": [42, 53], "_check_cycles_alt_sym": [42, 46, 53], "_distribute_gens_by_bas": [42, 53], "_handle_precomputed_bsg": [42, 53], "_orbits_transversals_from_bsg": [42, 53], "_remove_gen": [42, 53], "_strip": [42, 46, 53], "_strong_gens_from_distr": [42, 53], "_cmp_perm_list": [42, 52], "_naive_list_centr": [42, 52], "_verify_bsg": [42, 46, 52, 53], "_verify_centr": [42, 52], "_verify_normal_closur": [42, 52], "double_coset_can_rep": [42, 51], "get_symmetric_group_sg": [42, 51, 228], "bsgs_direct_product": [42, 51], "coset": [42, 46, 51, 197], "todd": 42, "coxet": [42, 84], "subgroup": [42, 46, 47, 51, 53, 84, 95], "bibliographi": 42, "polycycl": [42, 46], "collector": 42, "transposit": [43, 46, 47, 56, 86, 88, 224], "is_group": [43, 46], "generate_schreier_sim": [43, 46], "af": [43, 46, 52, 135], "r46": 43, "symmetric_group": 43, "generators_and_rel": 43, "dihedr": [43, 47], "d_n": [43, 84, 198], "gon": 43, "bab": 43, "generate_dimino": [43, 46], "perm": [43, 45, 46, 47, 48, 53, 60, 86, 88, 91, 223], "cyclic_form": [43, 47, 48], "r47": 43, "dihedral_group": 43, "31": [43, 55, 58, 59, 71, 95, 133, 187, 198, 215], "ex": [43, 82, 106, 117, 192, 194, 197, 198, 228, 236], "r48": 43, "armstrong": 43, "cyclic_ord": 43, "r49": 43, "groupprop": [43, 46], "subwiki": [43, 46], "structure_theorem_for_finitely_generated_abelian_group": 43, "multiset_partit": [44, 60, 80, 237, 240], "rg": 44, "growth": [44, 95, 195, 268], "from_rg": 44, "abcd": [44, 48, 168, 240, 243], "cbead": 44, "sort_kei": [44, 55, 218], "ti": [44, 47, 55, 95], "summand": [44, 197], "r50": 44, "partition_": [44, 60], "28number_theori": 44, "as_dict": [44, 192, 198], "as_ferr": 44, "char": 44, "ferrer": 44, "next_lex": [44, 47], "lexic": [44, 148, 240], "prev_lex": 44, "seed": [44, 46, 55, 56, 65, 68, 69, 91, 95, 195, 222, 233, 240], "85": [44, 59, 60, 91, 95, 120, 166, 187, 222], "37": [44, 56, 61, 65, 91, 95, 99, 187, 202, 215], "52": [44, 60, 95, 98, 99, 187, 201, 215, 218, 240, 268], "151": 44, "203": [44, 60], "pcgroup": 45, "pcg": 45, "pc_seri": [45, 46], "polycyl": 45, "pc_present": 45, "pc_sequenc": [45, 46], "miss": [45, 46, 72, 202, 220, 235, 278], "adjac": [45, 46, 47, 55, 60, 105, 140, 191, 240], "der": [45, 46], "relative_ord": [45, 46], "polycyclic_group": [45, 46], "gen": [45, 46, 51, 52, 53, 55, 91, 189, 192, 193, 195, 197, 198, 199, 200, 208, 214, 217, 220], "is_ident": [45, 47, 55], "poss": [45, 120, 186], "pc_group": 45, "a_j": [45, 63, 80, 173, 195, 204, 212], "notin": [45, 80, 210], "_order": 45, "minimal_uncollected_subword": 45, "subword_index": 45, "i_1": [45, 168, 198, 223], "a_1": [45, 46, 56, 63, 77, 80, 86, 91, 106, 168, 173, 190, 195, 212, 215, 218, 222, 278], "i_r": 45, "a_r": [45, 212], "i_2": [45, 168, 198], "s_": [45, 51, 118, 195], "s_j": [45, 84, 195], "x3": [45, 55, 60, 192, 218, 222], "collected_word": 45, "free_to_perm": 45, "bottom": [45, 46, 55, 56, 71, 86, 91, 94, 117, 197, 202, 211, 256], "pictur": [45, 202], "x_3x_2": 45, "x_3x_1": 45, "x_2x_1": 45, "x_3x_0": 45, "x_2x_0": 45, "x_1x_0": 45, "varii": 45, "derived_seri": [45, 46], "pc_resent": 45, "k_arrai": 45, "array_form": [45, 47, 48], "v_arrai": 45, "e_1": [45, 91, 189, 195, 198], "e_n": [45, 60, 84, 91, 144, 189, 198, 263], "exponent_vector": 45, "leading_expon": 45, "dup": [46, 193, 194], "pn": [46, 122, 132], "motion": [46, 109, 112, 113, 114, 117, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 135, 136, 181, 182, 185, 186, 222], "front": [46, 55, 120, 121, 137, 167, 193, 195, 198, 202, 214, 278], "face": [46, 48, 68, 82, 118, 195, 199, 202, 215, 256, 274], "rubik": 46, "3674160": 46, "pgroup": [46, 48], "corner": [46, 48, 86, 198, 218, 221, 241], "reset": [46, 48, 188, 195, 198, 233, 236, 238], "p10": 46, "make_perm": 46, "r51": 46, "eick": [46, 53], "brien": [46, 53], "r52": 46, "seress": 46, "r53": 46, "schreier_vector": 46, "r54": 46, "nielsen_transform": 46, "product_replacement_algorithm": 46, "r55": 46, "frank": [46, 47, 91], "celler": 46, "charl": 46, "leedham": 46, "green": [46, 129, 188], "scott": 46, "murrai": 46, "alic": [46, 56], "niemey": 46, "r56": 46, "block_": 46, "28permutation_group_theori": 46, "r57": 46, "algorithmist": 46, "php": [46, 63, 95, 215, 222], "union_find": 46, "r58": 46, "multiply_transitive_group": 46, "r59": 46, "center_": 46, "28group_theori": 46, "centralizer_and_norm": 46, "derived_subgroup": 46, "nilpotent_group": 46, "colost": 46, "hulpk": 46, "cgt": 46, "cgtnote": 46, "__contains__": 46, "__weakref__": [46, 86], "weak": [46, 55, 86, 192, 195], "_coset_repres": 46, "hg": 46, "transvers": [46, 51, 53, 141, 142], "coset_transvers": 46, "_distinct_primes_lemma": 46, "_element": 46, "_eval_is_alt_sym_monte_carlo": 46, "05": [46, 77, 103, 184, 187], "mont": 46, "carlo": 46, "candidat": 46, "randomli": [46, 55, 56, 95, 162], "n_ep": 46, "_eval_is_alt_sym_na": 46, "only_sym": 46, "only_alt": 46, "_p_elements_group": 46, "_random_pr_init": 46, "_random_prec_n": 46, "modif": [46, 61, 91, 221, 222, 237], "69": [46, 91, 220, 237], "71": [46, 71, 91, 171], "_random_gen": 46, "append": [46, 55, 56, 91, 99, 135, 163, 188, 193, 202, 220, 223, 235, 236, 240, 278], "accumul": [46, 233, 237], "random_pr": 46, "chosen": [46, 47, 56, 57, 68, 69, 91, 95, 98, 136, 170, 173, 188, 189, 193, 195, 197, 202, 209, 212, 218, 222, 233, 247], "gh": [46, 190, 221, 228], "eventu": [46, 63, 82, 188, 189, 209, 235, 240], "_sylow_alt_sym": 46, "sylow": 46, "p_1": [46, 51, 56, 73, 95, 185, 212, 215], "p_2": [46, 56, 73, 95, 185, 212], "p_p": 46, "sylow_subgroup": 46, "is_alt_sym": [46, 53], "_union_find_merg": 46, "not_rep": 46, "atkinson": 46, "83": [46, 201], "87": [46, 61, 91, 95], "minimal_block": 46, "_union_find_rep": 46, "r60": 46, "r66": 46, "compress": [46, 91, 94, 101], "r62": 46, "r68": [46, 47], "_verifi": 46, "_h": [46, 221], "gens_k": 46, "rels_k": 46, "gens_h": 46, "inject": [46, 55, 189, 193, 198, 274], "homomorph": [46, 194], "rels_h": 46, "strong_present": 46, "abelian_invari": 46, "isomorph": [46, 49, 189, 192, 195, 197], "t_1": [46, 60, 215], "t_2": [46, 60, 215], "t_r": [46, 133, 228], "542": 46, "adopt": [46, 228], "schreier": [46, 51, 53], "sim": [46, 51, 53, 80], "b_1": [46, 53, 63, 77, 80, 189, 212, 215, 218, 278], "b_2": [46, 53, 63, 77, 212, 218], "dot": [46, 47, 51, 53, 56, 67, 68, 70, 77, 86, 91, 105, 120, 121, 122, 125, 126, 127, 130, 131, 132, 133, 135, 152, 178, 182, 184, 185, 186, 187, 189, 190, 195, 198, 202, 221, 222, 240, 247, 250, 252, 253], "b_k": [46, 53, 56, 60, 63, 204, 205], "strong": [46, 51, 52, 53, 95, 96], "89": [46, 53, 82], "55": [46, 58, 60, 91, 187, 188, 198, 215], "57": [46, 91, 95, 222], "strong_gen": [46, 52, 53], "basic_transvers": [46, 53], "basic_orbit": [46, 53], "basic_stabil": 46, "baseswap": 46, "po": [46, 80, 85, 86, 115, 133, 135, 193, 220], "strong_gens_distr": [46, 53], "swap": [46, 47, 48, 86, 91, 148, 152, 155, 161, 222, 240], "orbit": [46, 53, 168, 169, 171], "b_": [46, 51, 53, 55, 60, 63, 80, 88, 105, 204, 212, 215, 223], "b_i": [46, 51, 53, 80, 189, 212], "la": [46, 135, 173], "vega": 46, "testutil": [46, 52, 53], "schreier_sim": [46, 52, 53], "bsg": [46, 51, 53, 228], "102": [46, 91], "98": [46, 56, 134, 198, 218], "pseudocod": 46, "beta_": 46, "g_": [46, 53, 54, 63, 80, 215], "foral": [46, 54, 57, 173], "zg": 46, "gz": 46, "c_g": 46, "sg": [46, 222, 228], "is_subgroup": 46, "subgroup_search": 46, "hgh": 46, "closur": [46, 52, 78, 148, 197, 210], "composition_seri": 46, "h_0": [46, 51], "h_1": [46, 51, 221], "h_2": [46, 221], "1024": [46, 202, 222], "512": [46, 63], "128": [46, 60, 63, 65, 95, 196, 202], "32": [46, 58, 61, 63, 65, 91, 95, 98, 103, 133, 196, 198, 199, 211, 212, 215, 222, 233], "243": [46, 63, 220], "81": [46, 60, 65, 86, 91, 95, 118, 120, 187, 201], "conjugacy_class": 46, "xax": 46, "s_3": 46, "s3": [46, 54, 105, 205, 215], "feasibl": [46, 105], "resiz": [46, 47, 86, 88], "coset_factor": 46, "factor_index": 46, "_basic_orbit": 46, "u1": [46, 95, 118, 120, 121, 122, 123, 125, 126, 130, 132, 135, 178, 180, 181, 182, 185, 218], "u2": [46, 94, 95, 118, 120, 121, 122, 123, 125, 126, 130, 135, 178, 181, 185, 218], "coset_rank": 46, "lexicograph": [46, 47, 50, 51, 55, 195, 198, 240], "coset_unrank": 46, "standardis": [46, 192], "subsect": [46, 253], "compris": [46, 56, 88, 115, 133, 136, 198, 240], "g_0": [46, 215], "g_1": [46, 198, 209, 215, 218], "g_2": [46, 84, 209, 218], "g_i": [46, 209], "g_k": 46, "tetrahedron": [46, 48], "r64": 46, "axiom": [46, 189], "doy": 46, "sc": [46, 82], "thesi": [46, 55, 209, 247], "generator_product": 46, "sn": [46, 47, 54, 77], "is_abelian": 46, "_random_prec": 46, "probabl": [46, 55, 60, 63, 67, 95, 118, 162, 166, 212, 218, 221, 222, 234, 270, 276], "transit": [46, 135, 195, 222], "82": [46, 82, 91, 222], "proport": [46, 56, 209], "226": 46, "227": 46, "is_altern": 46, "quicker": [46, 95], "taxonomi": 46, "is_cycl": 46, "p_": [46, 51, 55, 82, 173, 215, 218, 223], "p_i": [46, 51, 95], "equiv": [46, 56, 60, 95, 197, 212, 215], "pmod": [46, 55, 56, 60, 91, 212], "p_j": [46, 51], "r65": 46, "35": [46, 49, 58, 60, 68, 69, 82, 91, 95, 120, 197, 202, 215, 218, 222], "rose": 46, "is_elementari": 46, "is_nilpot": [46, 91], "lower_central_seri": 46, "is_solv": 46, "is_norm": [46, 155, 166], "gr": 46, "is_perfect": [46, 95, 262], "is_polycycl": 46, "is_primit": [46, 193, 198], "cardin": [46, 47, 50, 189, 210], "badli": 46, "random_stab": 46, "g3": [46, 105], "s5": 46, "is_symmetr": [46, 86], "is_transit": 46, "is_trivi": 46, "cba": [46, 223, 240], "mainli": [46, 63, 91, 96, 173, 182, 195, 212, 215, 218], "max_div": 46, "siev": [46, 95, 262], "nonempti": 46, "gb": 46, "moreov": [46, 56, 80, 172, 183, 189, 190, 195, 203, 251], "congruenc": [46, 55, 95, 212, 215], "p_0": [46, 51, 73, 212, 215], "maxim": [46, 56, 84, 189, 193, 197, 209, 211], "intransit": 46, "normal_closur": 46, "adjoin": [46, 190], "yx": [46, 186], "73": [46, 54, 55, 68, 95, 218], "74": [46, 60, 95], "orb": 46, "78": [46, 69, 91, 95, 99, 173, 218, 222], "orbit_transvers": 46, "orbit_rep": 46, "send": [46, 55, 56, 61, 95, 189, 218, 220], "proof": [46, 49, 80, 82, 221], "79": [46, 47, 99], "pointwise_stabil": 46, "pointwis": [46, 53], "p_k": [46, 95], "p20": 46, "stab": 46, "schreier_sims_increment": [46, 53], "polycyclicgroup": 46, "eliminate_gen": 46, "gen_count": 46, "b1": [46, 51, 63, 95, 98, 99, 110, 118, 135, 178, 193, 202, 212, 215, 218, 252], "b_r": 46, "slp_dict": 46, "seq": [46, 55, 58, 91, 193, 195, 198, 208, 220, 240], "93": [46, 196], "schreier_sims_random": [46, 53], "consec_succ": 46, "consec": 46, "_succ": 46, "97": [46, 56, 95, 195], "sift": [46, 53, 240], "amend": 46, "unsuccess": [46, 53], "accordingli": [46, 190, 197], "halt": 46, "signifi": [46, 55, 98, 198, 222], "g_t": 46, "leq": [46, 54, 56, 63, 80, 91, 95, 187, 195, 197, 208, 209, 215, 222], "prop": [46, 197], "init_subgroup": 46, "supergroup": 46, "sought": [46, 95, 153, 163, 214, 220, 221], "prune": 46, "prop_even": 46, "lengthi": 46, "114": [46, 95], "117": [46, 63], "terribl": 46, "crucial": [46, 54, 192], "len1": 46, "len2": 46, "len3": 46, "transitivity_degre": 46, "fold": [46, 55, 61, 202, 209, 214], "a_2": [46, 56, 77, 91, 195, 212, 215, 218, 222, 278], "a_k": [46, 56, 199, 205], "arrang": [47, 105, 113, 133, 135, 211, 215, 228], "r69": 47, "reorder": [47, 54, 61, 168, 198, 218, 222, 240], "pretty_print": [47, 83, 115, 120, 121, 125, 126, 127, 129, 130, 131, 133, 136, 178, 180, 181, 182, 185, 186, 202], "understood": [47, 95, 173, 189, 193], "economi": 47, "caution": [47, 55, 61, 202, 214], "indexerror": [47, 91, 198], "autos": [47, 94], "watch": 47, "print_cycl": 47, "econom": [47, 82, 240], "retain": [47, 55, 61, 63, 82, 97, 198, 203, 211, 214], "biject": [47, 49, 56, 86, 189], "full_cyclic_form": 47, "rmul": 47, "unrank_lex": 47, "r73": 47, "zo42": 47, "from_sequ": 47, "a1": [47, 51, 55, 83, 86, 95, 99, 118, 135, 142, 218, 222, 223, 252, 278], "a2": [47, 51, 55, 84, 86, 95, 99, 118, 135, 142, 191, 222, 223, 252, 278], "a3": [47, 51, 55, 84, 86, 135, 252, 278], "perfectli": [47, 54, 55, 56, 195, 198, 201], "skiena": 47, "ma": [47, 54, 123], "1990": [47, 80, 212, 247], "r70": 47, "wendi": 47, "myrvold": 47, "ruskei": 47, "2001": [47, 95, 196], "lett": 47, "septemb": [47, 237], "281": 47, "284": [47, 95], "1016": 47, "s0020": 47, "0190": 47, "01": [47, 55, 59, 118, 162, 196, 214, 240], "00141": 47, "r71": 47, "kreher": 47, "stinson": 47, "1999": [47, 91, 196, 201, 218], "r72": 47, "graham": [47, 60, 61, 95], "patashnik": 47, "foundat": [47, 196, 197], "1994": [47, 195, 196, 198], "product_and_invers": 47, "r74": 47, "lehmer_cod": 47, "appliedpermut": 47, "magic": [47, 214, 233, 270], "attatch": 47, "_array_form": 47, "ascent": 47, "ie": [47, 215], "descent": 47, "fg": [47, 57, 218, 221], "gf": [47, 56, 189, 191, 192, 194, 195, 197], "r75": 47, "commutes_with": [47, 225, 228], "cycle_structur": 47, "from_inversion_vector": 47, "get_adjacency_dist": 47, "n_adj": 47, "reev": 47, "colin": 47, "landscap": 47, "annal": 47, "86": [47, 91, 134, 201, 211], "473": 47, "josephu": 47, "get_precedence_matrix": 47, "get_precedence_dist": 47, "get_adjacency_matrix": 47, "get_positional_dist": 47, "subscript": [47, 193, 202, 212, 215, 240], "inversion_vector": 47, "lesser": [47, 101, 198], "lie": [47, 57, 69, 70, 71, 198, 216, 222, 257, 264], "lehmer": 47, "ith": [47, 84, 95, 193, 199, 221, 222], "variat": [47, 55, 195, 209, 218, 239], "r76": 47, "eng": 47, "chula": 47, "piak": 47, "algo2008": 47, "htm": [47, 63, 82, 215], "is_singleton": 47, "is_odd": 47, "shuffl": [47, 91, 278], "012345": 47, "345": 47, "253": 47, "2531": 47, "25314": 47, "253140": 47, "r77": 47, "flavius_josephu": 47, "r78": 47, "josephus_problem": 47, "r79": 47, "wou": 47, "burtonl": 47, "trim": [47, 132], "unmov": 47, "mul_inv": 47, "next_nonlex": 47, "nonlex": 47, "rank_nonlex": 47, "unrank_nonlex": 47, "next_trotterjohnson": [47, 240], "trotter": 47, "johnson": [47, 91], "generate_bel": [47, 240], "rank_trotterjohnson": 47, "unrank_trotterjohnson": 47, "pseudo": [47, 91, 95, 193, 195, 198], "inv_perm": 47, "enforc": [47, 120], "rmul_with_af": 47, "ascend": [47, 240], "r80": 47, "transposition_": 47, "28mathemat": [47, 55, 210], "flexibl": [47, 55, 118, 135, 185, 188, 192, 221, 268], "investig": [47, 80, 187, 189, 212, 240, 270], "cn": [47, 202, 277], "2n": [47, 54, 60, 63, 82, 86, 101, 106, 131, 187, 205, 212], "dn": [47, 222], "klein": 47, "s4": [47, 105], "polyhedr": 48, "psg": 48, "platon": 48, "solid": [48, 69, 112, 188, 256], "tetrahedr": 48, "octahedr": 48, "icosahedr": 48, "r81": 48, "polyhedralgroup": 48, "polyhedra": [48, 81], "shadow": 48, "h5": 48, "heinz": 49, "caylei": [49, 86], "r82": 49, "labeledtre": 49, "tree_repr": 49, "prufer_rank": 49, "prev": [49, 55], "36": [49, 56, 60, 71, 82, 86, 91, 95, 99, 198, 202, 215, 218, 222, 256], "prufer_repr": 49, "record": [49, 55, 197, 202, 233], "to_pruf": 49, "778": 49, "779": 49, "777": [49, 58], "1296": 49, "to_tre": 49, "r83": 49, "hamberg": 49, "erlend": 49, "2010": [49, 219, 240], "06": [49, 55, 120, 187, 222], "compact": [49, 55, 102, 135, 166, 182, 198, 202, 220, 237], "next_binari": 50, "prev_binari": 50, "bitlist_from_subset": 50, "subset_from_bitlist": 50, "superset_s": 50, "iterate_binari": 50, "iterate_graycod": 50, "prev_grai": 50, "next_grai": 50, "next_lexicograph": 50, "prev_lexicograph": 50, "rank_binari": 50, "unrank_binari": 50, "rank_grai": 50, "unrank_grai": 50, "rank_lexicograph": 50, "43": [50, 91, 95, 98, 99, 222, 278], "super_set": 50, "subset_indic": 50, "itertool": [50, 240], "tensor_can": [51, 228], "msym": 51, "contravari": [51, 91, 228, 229], "covari": [51, 57, 91, 222, 228, 229], "d0": 51, "base_i": 51, "gens_i": 51, "n_i": [51, 195, 220], "sym_i": 51, "failur": [51, 59, 72, 80, 95, 222, 233, 278], "canonicalize_na": 51, "exchang": [51, 56, 91, 187, 191, 240], "anticommut": [51, 155, 157, 167, 168, 228], "canonical_fre": 51, "slot": [51, 152, 223, 227, 228, 273], "residu": [51, 56, 95, 195, 206, 212], "tensor_gen": 51, "list_free_indic": 51, "reintroduc": 51, "a_": [51, 55, 56, 63, 80, 84, 86, 88, 105, 106, 133, 204, 212, 215, 218, 220, 222, 223], "antisymmetr": [51, 57, 86, 168, 228], "d2": [51, 178, 189, 209, 222, 240, 247], "ord": [51, 56, 91], "t_c": 51, "base2a": 51, "gens2a": 51, "t0": 51, "t1": [51, 71, 72, 95, 110, 115, 215, 222], "a_m": [51, 218], "a_n": [51, 56, 63, 80, 84, 173, 190, 195, 205, 215, 218, 278], "_a": [51, 63, 168, 198], "_b": [51, 63, 168], "base_f": 51, "gens_f": 51, "base1": 51, "gens1": 51, "base_a": 51, "gens_a": 51, "sgen": 51, "s_transvers": 51, "butler": [51, 228], "portug": [51, 228], "grow": [51, 55, 80, 91, 95, 192, 195], "computation": [51, 61, 112, 113, 114], "absenc": [51, 85], "observ": [51, 77, 80, 157, 186, 189, 212, 215, 218, 222, 255, 278], "opposit": [51, 71, 85, 86, 110, 190, 193, 210, 214, 221, 229, 240, 247, 248, 278], "ind": [51, 204, 228], "d3": [51, 209], "a0": [51, 218, 278], "a4": [51, 55, 84, 135, 278], "a5": [51, 55], "leftrightarrow": 51, "_af_rmul": 51, "t_": [51, 60], "b0": [51, 63, 193, 212, 218], "d_": [51, 212], "p0": [51, 65, 197, 218], "dbase": 51, "recomput": [51, 198], "d_i": [51, 80, 173], "s_0": 51, "d_0": [51, 56], "b_0": [51, 56, 60, 212, 215, 218], "b_j": [51, 53, 63, 80, 212], "sx": 51, "trace": [51, 86, 88, 106, 135, 195, 202, 222, 223, 224, 226, 240, 274], "h_n": [51, 63, 82, 198, 221], "tab1": 51, "get_transvers": 51, "antisym": 51, "base2": 51, "gens2": 51, "ls1": 52, "ls2": 52, "base_ord": 53, "backtrack": 53, "108": [53, 95, 99], "132": [53, 60, 178], "r84": 53, "transversals_onli": 53, "slp": 53, "new_gen": 53, "r85": 53, "r86": 53, "recurr": [54, 60, 77, 91, 197, 208, 214, 216, 218, 222, 242], "annihil": [54, 73, 74, 78, 144, 168, 220], "is_hypergeometr": 54, "binomi": [54, 59, 62, 63, 95, 198, 202, 207, 214, 218, 222, 240, 278], "rf": [54, 60, 198], "ff": [54, 56, 60, 187, 190, 191, 192, 197, 198], "speci": [54, 55], "rise": [54, 60, 63, 187, 214, 218, 222, 250], "hypersimp": [54, 213], "quotient": [54, 55, 58, 61, 95, 189, 190, 192, 194, 195, 198, 212, 214, 218], "dummy_vari": 54, "karr": 54, "quad": [54, 55, 57, 59, 63, 82, 86], "exclus": [54, 55, 61, 85, 91, 195, 270], "emphas": 54, "typeset": [54, 202], "doit": [54, 55, 57, 60, 61, 63, 82, 88, 105, 145, 147, 149, 155, 160, 162, 165, 166, 168, 178, 187, 198, 204, 209, 214, 218, 219, 222, 224, 247, 249, 250, 252, 253, 268, 273], "seemingli": [54, 221], "nonsens": [54, 63], "r87": 54, "michael": [54, 196, 201], "april": 54, "1981": [54, 196], "305": 54, "350": [54, 115], "dl": [54, 186, 196], "cfm": [54, 196], "doid": [54, 196], "322248": 54, "322255": 54, "r88": 54, "sigma_not": 54, "r89": 54, "empty_sum": 54, "euler_maclaurin": [54, 59], "eval_integr": 54, "maclaurin": [54, 59], "endpoint": [54, 55, 59, 183, 210, 253], "28333333333333": 54, "sstr": [54, 182, 202], "full_prec": [54, 202], "26629073187415": 54, "0175000000000000": 54, "soon": [54, 55, 118, 173, 199], "eval_zeta_funct": 54, "is_absolutely_converg": 54, "sequence_term": 54, "is_converg": 54, "r90": 54, "absolute_converg": 54, "analogi": [54, 195], "prod_": [54, 60, 63, 80, 95, 173, 212], "respons": [54, 55, 104, 105, 118, 188, 235], "diverg": [54, 63, 137, 138, 247, 254], "dirichlet": [54, 63, 222], "r91": 54, "convergence_test": 54, "reverse_ord": 54, "selector": [54, 86, 214, 240], "handi": [54, 55, 91, 202, 273], "s0": [54, 78, 80, 140], "expr_with_intlimit": [54, 82], "exprwithintlimit": [54, 82], "reorder_limit": 54, "r92": 54, "walli": 54, "w2": [54, 142], "w2e": 54, "risingfactori": [54, 62, 63, 202, 204], "combsimp": [54, 55, 60], "pe": 54, "gammasimp": [54, 55, 214], "rewrit": [54, 55, 57, 60, 61, 63, 80, 82, 85, 98, 105, 165, 198, 209, 210, 211, 214, 218, 219, 220, 221, 222, 258, 259, 272, 274], "r93": 54, "r94": 54, "capital_pi_not": 54, "r95": 54, "empty_product": 54, "r96": 54, "infinite_product": 54, "r97": 54, "expr_with_limit": [54, 82], "exprwithlimit": [54, 82], "change_index": 54, "trafo": 54, "newvar": 54, "mapsto": [54, 80, 86, 197], "p3": [54, 65, 67, 68, 70, 71, 105, 188, 192, 211, 222], "has_empty_sequ": [54, 82], "has_reversed_limit": [54, 82], "has_finite_limit": [54, 82], "____": [54, 59, 82, 140, 190, 203, 222, 240, 279], "___": [54, 59, 82, 83, 91, 190, 214, 222, 227, 240, 277], "rubric": [54, 55], "_____": [54, 222], "gosper": 54, "gosper_norm": 54, "monic": [54, 63, 189, 190, 193, 194, 195, 197, 198, 201], "gcd": [54, 55, 56, 91, 95, 164, 192, 193, 194, 196, 197, 198, 202, 214, 215], "gosper_term": 54, "s_n": [54, 198], "f_k": [54, 130, 195], "g_n": [54, 60, 198], "f_n": [54, 60, 63, 189, 195, 198, 218], "gosper_sum": 54, "r98": 54, "marko": 54, "petkovsek": [54, 220], "herbert": 54, "doron": 54, "zeilberg": [54, 220], "ak": [54, 204], "peter": [54, 60, 63, 95, 134, 184, 198, 240], "ltd": 54, "welleslei": 54, "usa": [54, 196], "1997": [54, 80, 95, 196, 212], "convert_xor": [55, 97], "09": [55, 103, 187], "2e": 55, "xor": [55, 58, 85, 97, 202, 270], "sympifyerror": 55, "coerc": [55, 132, 195], "cooper": 55, "sage": [55, 95, 187, 272], "shouldn": [55, 199], "unsanit": [55, 241, 267], "bitcount": 55, "improperli": 55, "unbound": [55, 227], "23903": 55, "fallback": [55, 83, 168, 182, 192, 202, 220], "ast": [55, 202, 259], "mylist1": 55, "mylist": 55, "mylist2": 55, "xxx": [55, 82, 91, 240, 242], "autosimplif": [55, 211, 214], "kern": 55, "r101": 55, "7649": 55, "r100": 55, "r104": 55, "r102": 55, "r103": 55, "r105": 55, "r106": 55, "r107": 55, "r99": 55, "recreat": [55, 112], "isfinit": 55, "__cacheit": 55, "maxsiz": 55, "noqa": [55, 83, 193, 236], "f811": 55, "sympy_use_cach": 55, "cot": [55, 62, 63, 97, 199, 202, 211], "_arg": [55, 61], "as_mut": [55, 87, 88], "as_content_primit": [55, 91, 190, 198], "stub": 55, "as_dummi": [55, 82], "_0": [55, 60, 80, 86, 91, 198, 241], "_r": [55, 168, 212, 221], "bound_symbol": [55, 82], "besid": [55, 195, 220], "typeinfo": 55, "truli": [55, 63, 173], "piec": [55, 59, 212, 235], "scan": 55, "appliedundef": 55, "canonical_vari": 55, "class_kei": 55, "sorted_class": 55, "dummy_eq": 55, "eg": [55, 118, 175, 221], "fromit": 55, "has_fre": 55, "has_xfre": 55, "exp_polar": [55, 62, 63, 212], "dif": 55, "_prec": 55, "r_": [55, 107, 169, 199], "repl_dict": 55, "rcall": [55, 57], "simul": [55, 118, 135, 201], "abus": [55, 228], "succe": [55, 80, 85, 95, 158, 197, 220], "newtyp": 55, "intuit": [55, 173, 206, 218], "is_mul": 55, "is_add": [55, 221], "mysin": [55, 241, 267], "_eval_rewrite_as_": 55, "_eval_rewrite_as_co": 55, "tie": [55, 240], "delai": [55, 103, 132, 211, 233, 268], "unsort": [55, 109, 177], "333333333333333333333": 55, "333333333333333314830": 55, "wildcard": [55, 214], "registri": 55, "metaprogram": 55, "address": [55, 202, 221], "mostli": [55, 61, 82, 91, 135, 163, 185, 189, 201, 202, 212, 220, 277], "__truediv__": [55, 193], "class_nam": 55, "mysingleton": 55, "_eval_is_g": 55, "_eval_is_eq": 55, "args_cnc": 55, "cset": 55, "split_1": 55, "suppress": [55, 97, 231, 238], "as_coeff_add": 55, "dep": [55, 218], "as_coeff_expon": 55, "as_coeffici": 55, "zz": [55, 60, 77, 78, 82, 88, 91, 92, 95, 115, 186, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 217], "coeff_monomi": [55, 198], "polytool": [55, 198, 221], "monomi": [55, 82, 85, 95, 190, 192, 193, 194, 195, 201, 202, 278], "as_coefficients_dict": 55, "inquiri": 55, "121": [55, 60, 95, 105, 178, 220], "84": [55, 59, 95], "separatevar": [55, 213, 218], "n3": [55, 118], "as_leading_term": [55, 209], "logx": [55, 209], "cdir": 55, "_eval_as_leading_term": 55, "as_numer_denom": [55, 220], "as_ordered_factor": 55, "as_ordered_term": 55, "as_powers_dict": 55, "lost": 55, "as_real_imag": [55, 61, 86, 203], "as_term": 55, "aseri": 55, "hir": 55, "asymptot": [55, 80, 105, 268], "hierarch": 55, "normalis": [55, 204], "induc": [55, 86, 197, 211, 240], "gruntz": [55, 204], "majorli": 55, "mrv": [55, 209], "overal": [55, 175, 188, 220], "rapidli": [55, 59, 80, 209], "till": [55, 98, 99, 118, 218], "r108": 55, "dominik": [55, 204], "proc": [55, 220], "1993": [55, 196], "symp": 55, "239": 55, "244": [55, 195], "r109": 55, "p90": 55, "r110": 55, "asymptotic_expans": 55, "_first": [55, 61], "distribute_order_term": [55, 214], "compute_leading_term": 55, "could_extract_minus_sign": 55, "signsimp": [55, 126, 214], "failing_express": 55, "modulu": [55, 56, 58, 63, 65, 71, 86, 95, 98, 99, 189, 193, 195, 197, 198, 201, 221], "power_bas": [55, 86], "power_exp": [55, 86], "multinomi": [55, 86, 95, 222], "expr_free_symbol": 55, "extract_addit": 55, "extract_multipl": 55, "extract_branch_factor": 55, "allow_half": 55, "fourier_seri": [55, 205, 206], "geto": 55, "getn": 55, "is_algebraic_expr": 55, "is_rational_funct": 55, "r111": 55, "algebraic_express": 55, "is_const": 55, "constanc": 55, "agre": [55, 56, 63, 70, 80, 212], "test_expr": 55, "prove": [55, 80, 82, 91, 189, 209, 218, 252], "failing_numb": 55, "is_meromorph": 55, "meromorph": [55, 63], "multivalu": [55, 61], "cut": [55, 60, 61, 63, 71, 80, 189, 212, 237, 243, 278], "hit": [55, 273], "is_polynomi": 55, "rational_funct": 55, "leadterm": 55, "xlim": [55, 188], "lseri": 55, "exaxmpl": 55, "nseri": 55, "_eval_nseri": 55, "innermost": 55, "disadvantag": 55, "met": [55, 101, 215, 221, 236, 278], "nsimplifi": [55, 59, 213], "ratsimp": [55, 213], "removeo": [55, 135, 202, 268], "chop": [55, 59, 63, 86, 91, 220, 267], "123": [55, 60, 65, 85, 165, 178, 240, 247, 248], "lazi": [55, 88, 198], "smooth": [55, 59, 95, 204, 262], "taylor_term": [55, 61], "previous_term": [55, 61], "dummy_index": 55, "temporari": [55, 234], "_dummy_10": 55, "contigu": [55, 212, 235], "x4": [55, 60, 192], "x5": [55, 60, 192], "x6": [55, 192], "x7": [55, 192], "x8": [55, 192], "x9": [55, 192], "x50": 55, "x51": 55, "y0": [55, 74, 76, 78, 218], "y1": [55, 135], "y2": [55, 135, 192], "y3": [55, 192], "y4": 55, "xa": [55, 190, 195], "xb": [55, 243], "xc": [55, 167, 243], "disambigu": 55, "x01": 55, "x02": 55, "x11": 55, "x12": 55, "escap": [55, 97, 188, 202, 243], "newli": [55, 80, 212], "undefinedfunct": [55, 180, 202, 234, 241], "f821": [55, 236], "cofactor": [55, 91, 193, 194, 195, 198], "lcm": [55, 95, 193, 194, 195, 198, 202], "50000000000000": [55, 59], "100000000000000000000": 55, "1e20": 55, "00000000000000e": 55, "23456789123456789": 55, "23456789123457": 55, "00100": 55, "sent": [55, 82, 214, 220], "789": [55, 95], "123_456": 55, "123456789": 55, "12e": 55, "012": 55, "60e2": 55, "6000": 55, "600e": 55, "125": [55, 59, 82, 95, 193, 208, 215], "099609": 55, "12500": 55, "12500000000000000000": 55, "5404319552844595": 55, "54": [55, 91, 99, 195, 201, 240], "29999999999999998890": 55, "30000000000000000000": 55, "_mpf_": [55, 192], "4915": 55, "70": [55, 56, 72, 82, 91, 95, 201, 202, 215, 222, 243], "307": 55, "mpf": [55, 192, 193], "is_float": 55, "unprejud": 55, "3602879701896397": 55, "18014398509481984": [55, 214], "limit_denomin": 55, "320": 55, "75": [55, 58, 222, 247], "use_tri": [55, 95], "use_rho": [55, 95], "use_pm1": [55, 95], "factorint": [55, 95, 197, 198, 237, 262], "trial": [55, 95, 195, 207, 211, 218, 222], "max_denomin": 55, "1000000": [55, 95], "141592653589793": 55, "311": [55, 95], "discard": [55, 197, 202, 221], "99999999999999999999": 55, "hookrightarrow": 55, "minpoli": [55, 192, 193, 197], "dmp": [55, 189, 193, 194, 198], "complexrootof": [55, 91, 193, 194, 198, 218], "anp": [55, 192, 193, 194, 197, 198], "to_list": [55, 191, 193], "minpoly_of_el": 55, "414213562": 55, "scratch": [55, 173], "6x": [55, 195], "to_number_field": [55, 197], "to_root": 55, "primitive_el": [55, 192, 193, 197], "knew": [55, 278], "golden": [55, 59, 95], "5th": [55, 135, 195, 197], "cyclotom": [55, 193, 194, 195, 196, 197, 198], "cyclotomic_poli": [55, 194, 197, 198], "61803398874989": 55, "2i": 55, "a6": 55, "a6_wrong": 55, "309016994374947": 55, "951056516295154": 55, "field_el": 55, "is_alias": 55, "is_primitive_el": 55, "native_coeff": 55, "to_algebraic_integ": 55, "to_primitive_el": 55, "Its": [55, 61, 71, 135, 166, 195, 202, 210], "a_prim": 55, "number_cl": 55, "greatest": [55, 60, 65, 95, 190, 192, 193, 195, 196, 198, 201], "euclid": [55, 195, 196], "r112": 55, "euclidean_algorithm": 55, "r113": 55, "r114": 55, "1_": 55, "28number": 55, "r115": 55, "88": [55, 91, 95], "921_": 55, "r116": 55, "one_half": 55, "holder": 55, "ieee": [55, 56], "754": 55, "r117": 55, "affin": [55, 56, 70, 189], "compactif": 55, "r118": 55, "tild": [55, 61, 223], "phase": [55, 82, 103, 137, 138, 140, 142, 152, 153, 155, 221], "718281828": 55, "napier": 55, "r119": 55, "e_": [55, 60, 91], "28mathematical_const": 55, "r120": 55, "imaginary_unit": [55, 202], "141592654": 55, "circumfer": [55, 65, 67], "diamet": [55, 65], "area": [55, 65, 67, 71, 72, 98, 99, 254], "is_irr": 55, "r121": 55, "mascheroni": [55, 63], "5772157": 55, "recur": 55, "harmon": [55, 62, 95, 107, 147, 187, 202, 263], "lim": [55, 209, 268], "limits_": [55, 187, 204, 272], "ln": [55, 61, 82, 202, 204, 218, 222, 278], "r122": 55, "93mascheroni_const": 55, "91596559": 55, "r123": 55, "27s_constant": 55, "r124": 55, "golden_ratio": 55, "tribonacci": [55, 62], "fibonacci": [55, 59, 62, 95], "predetermin": [55, 233], "8392867552141611326": 55, "r125": 55, "generalizations_of_fibonacci_numb": [55, 60], "tribonacci_numb": [55, 60], "modulo": [55, 56, 92, 95, 164, 189, 191, 192, 193, 195, 197, 198, 199, 201, 202, 205, 214], "r126": 55, "modular_multiplicative_invers": 55, "r127": 55, "extended_euclidean_algorithm": 55, "oscil": [55, 263], "conform": [55, 221, 226, 227], "r128": 55, "r129": 55, "zero_to_the_power_of_zero": 55, "r130": 55, "indeterminate_form": 55, "as_base_exp": [55, 61, 62, 240], "floor": [55, 62, 95, 112, 192, 193, 202, 222], "geq": [55, 56, 63, 91, 198, 215, 222, 278], "factor_": [55, 56, 95, 198, 215], "perfect_pow": [55, 95, 262], "infix": 55, "matmul": [55, 88, 191], "as_coef_mul": 55, "undesir": [55, 109, 118, 132, 190, 193, 212], "4596": 55, "compound": [55, 123, 166, 206, 260], "5728": 55, "suspect": [55, 95], "5706": 55, "moot": 55, "off": [55, 65, 80, 86, 94, 96, 120, 129, 152, 189, 198, 202, 218, 233, 244, 247, 272], "nb": 55, "sensit": [55, 105, 135, 188, 195, 214, 233], "assocop": 55, "quadrat": [55, 56, 82, 95, 189, 193, 197, 198, 215, 220, 222], "matadd": [55, 88, 202], "as_coef_add": 55, "extract_leading_ord": 55, "commutative_part": 55, "noncommutative_part": 55, "order_symbol": 55, "subprocess": [55, 202, 233, 234], "dividend": [55, 193], "rop": 55, "validrelationoper": 55, "rel_op": 55, "fourth": [55, 56, 190, 218, 268], "my_equ": 55, "my_inequ": 55, "reversedsign": 55, "_eval_eq": 55, "respond": 55, "boolalg": [55, 85], "client": [55, 237], "counterpart": [55, 56, 218, 268], "litter": 55, "oddbal": 55, "minor": [55, 65, 67, 91, 202, 233], "caveat": [55, 198, 258, 265, 270], "succinctli": 55, "coupl": [55, 91, 132, 147, 155, 162, 165, 187], "annoy": 55, "succinct": 55, "occasion": 55, "r131": 55, "operar": 55, "circuit": [55, 152, 155], "greaterthanobject": 55, "__bool__": 55, "335": 55, "march": 55, "2012": 55, "r132": 55, "r133": 55, "r134": 55, "mdarg": 55, "fgh": 55, "vsin": 55, "vdiff": 55, "narg": [55, 195], "naturals0": [55, 202, 221, 222], "evalul": 55, "fairli": [55, 63, 80, 120, 128, 177, 189], "conserv": [55, 113, 131, 179, 249, 254, 255], "136": [55, 91], "indirect": [55, 57, 63, 95, 168, 218], "implic": [55, 85, 195], "fx": [55, 57, 188, 218, 219], "fxx": 55, "insconsist": 55, "presenc": [55, 61, 85, 101, 117, 122, 132, 218, 226], "nonvanish": 55, "_diff_wrt": 55, "_sort_variable_count": 55, "vc": 55, "vsort": 55, "collaps": [55, 162, 214], "vsort0": 55, "vi": 55, "dfx": 55, "equidist": 55, "sq2": 55, "xl": 55, "d2fdxdy": 55, "doit_numer": 55, "z0": [55, 209], "unifi": [55, 136, 191, 193, 194, 195, 197, 198, 210], "zeroth": [55, 197], "idiff": [55, 67, 72], "r135": 55, "legaci": [55, 82, 91, 222], "v5_2": 55, "infunct": 55, "algebraiccomput": 55, "f_real": [55, 62], "f_real_inherit": [55, 62], "is_singular": [55, 62, 78], "holomorph": [55, 62, 80], "superfici": 55, "unexpect": [55, 233], "ss": [55, 193], "denom": [55, 192, 193, 197, 214], "_eval_expand_bas": 55, "_eval_expand_complex": 55, "shut": [55, 198], "unwant": [55, 220, 240], "alphabet": [55, 56, 105, 173, 190, 215, 235], "expand_hint": 55, "_eval_expand_hint": 55, "liabl": [55, 85], "metahint": 55, "myclass": 55, "_eval_expand_doubl": 55, "hyperexpand": [55, 63, 77, 80, 212], "div": [55, 190, 192, 193, 194, 198, 202, 214, 273], "horner": [55, 135, 194, 195, 198], "untouch": 55, "unexpand": [55, 192, 201, 211, 234], "dkei": 55, "mixin": [55, 240], "maxn": [55, 59, 86], "subresult": [55, 193, 194, 196, 198], "000100000000000000": 55, "maxprec": 55, "quadratur": [55, 59, 82, 218], "tanh": [55, 59, 62, 82, 199, 202, 214, 278], "oscillatori": [55, 59, 207], "osc": [55, 59], "advers": 55, "1e16": 55, "291": 55, "builtin": [55, 193, 202, 210, 243, 277], "speedup": [55, 91, 96, 195, 199, 241], "framework": [55, 118, 128, 227, 233, 235, 241], "slice": [55, 85, 86, 91, 97, 193, 198, 208, 210, 214, 223, 240], "parametris": [55, 210], "element_kind": [55, 86, 210], "tuple_count": 55, "setkind": [55, 86, 260], "isprimit": 55, "_gcd_term": 55, "terms_gcd": [55, 193, 194, 198], "entiti": [55, 65, 68, 69, 71, 72, 80, 118, 133, 183, 221, 255, 264, 274], "arguement": 55, "broad": [55, 273], "lex": [55, 83, 182, 190, 192, 193, 195, 198, 199, 201, 202, 214], "grlex": [55, 83, 182, 193, 198, 201, 202], "grevlex": [55, 83, 182, 190, 195, 198, 201, 202], "rev": 55, "unaffect": [55, 221], "_node": 55, "fastest": [55, 60, 82, 95, 96, 199], "undecor": 55, "ineffici": [55, 91, 192], "breaker": 55, "hash": [55, 193, 195, 203, 214, 218, 233, 235], "collis": [55, 94, 202], "wast": [55, 92, 191], "rng": 55, "getstat": 55, "intention": 55, "tn": 55, "td": [55, 202, 277], "randrang": 55, "999": [55, 59], "238": [55, 95], "randint": [55, 91, 195], "ri": [55, 202], "rv": [55, 211, 222, 240], "nonbas": 55, "postord": 55, "descend": [55, 189, 197, 235], "subtre": [55, 202, 237], "educ": [56, 91], "cryptograph": 56, "encrypt": 56, "hide": [56, 202], "cipher": 56, "vigener": 56, "hill": [56, 63, 113, 134, 178, 184, 247], "bifid": 56, "rsa": 56, "kid": 56, "feedback": [56, 102, 104, 105, 271], "elgam": 56, "plaintext": [56, 202], "ciphertext": 56, "monoalphabet": 56, "polyalphabet": 56, "crypto": 56, "az": [56, 215, 264], "uppercas": [56, 212], "hello": [56, 240], "world": [56, 101, 122, 132, 240], "helloworld": 56, "check_and_join": [56, 264], "padded_kei": [56, 264], "puppi": 56, "opqrstuvwxi": 56, "puyoqrstvwx": 56, "artist": 56, "aphras": 56, "ara": 56, "hp": 56, "cycle_list": [56, 264], "encipher_shift": [56, 264], "msg": [56, 82], "decipher_shift": [56, 264], "gonavybeatarmi": 56, "ct": [56, 84, 195], "hpobwzcfbubsnz": 56, "deciph": 56, "l1": [56, 65, 67, 68, 112, 115, 121, 133, 193, 195, 198, 215, 222], "l2": [56, 67, 68, 112, 115, 121, 154, 155, 170, 193, 195, 222], "caesar": 56, "juliu": 56, "suetoniu": 56, "protect": [56, 202], "militari": 56, "nephew": 56, "augustu": 56, "reportedli": 56, "r136": 56, "caesar_ciph": 56, "r137": 56, "caesarsmethod": 56, "encipher_rot13": [56, 264], "rot13": 56, "caeser": 56, "midwai": 56, "decipher_rot13": [56, 264], "r138": 56, "decrypt": 56, "tbanilorngnezl": 56, "encipher_affin": [56, 264], "_invers": 56, "cx": [56, 99], "recov": [56, 82, 173, 195, 197, 198, 215, 218], "decipher_affin": [56, 264], "r139": 56, "affine_ciph": 56, "reciph": 56, "navi": 56, "beat": 56, "armi": 56, "trobmvenbgbalv": 56, "encipher_atbash": [56, 264], "enciph": 56, "atbash": 56, "hebrew": 56, "decipher_atbash": [56, 264], "tlmzebyvzgzinb": 56, "r140": 56, "encipher_substitut": [56, 264], "oeyag": 56, "034": 56, "60n": 56, "v4b3": 56, "rm4": 56, "immateri": 56, "anyv": 56, "wherebi": 56, "r141": 56, "substitution_ciph": 56, "encipher_vigener": [56, 264], "me": [56, 118, 135, 178, 202, 224], "mondai": 56, "qrgkkthrzqebpr": 56, "krypto": 56, "sculptur": 56, "cia": 56, "headquart": 56, "r143": 56, "decipher_vigener": [56, 264], "alp": 56, "palimpsest": 56, "emufphzlrfaxyusdjkzldkrnshgnfivj": 56, "betweensubtleshadingandtheabsenc": 56, "blais": 56, "sixteenth": 56, "centuri": [56, 189], "diplomat": 56, "accid": [56, 241], "invent": [56, 197, 220, 272], "giovan": 56, "batista": 56, "belaso": 56, "1553": 56, "civil": [56, 98], "war": 56, "confederaci": 56, "brass": 56, "nsa": 56, "museum": 56, "fort": 56, "mead": 56, "r142": 56, "sender": 56, "assembl": [56, 80, 209], "concaten": [56, 86], "frequenc": [56, 82, 103, 105, 138, 142, 144, 152, 169], "kasiski": 56, "discov": [56, 80, 109, 226, 274], "babbag": 56, "unbreak": 56, "ye": [56, 85, 218], "gonavybeatarmyyesyoucan": 56, "gold": 56, "auto_kei": 56, "goldbuggonavybeatarmyy": 56, "mcydwshkogamkzcelyfgayr": 56, "pt": [56, 64, 65, 66, 68, 69, 70, 71, 208], "vigenere_ciph": 56, "archiv": [56, 134, 215], "20071116100808": 56, "r144": 56, "filebox": 56, "vt": 56, "batman": 56, "goo": 56, "gl": 56, "ijr22d": 56, "decod": 56, "qrgk": 56, "kt": [56, 123], "hrzqe": 56, "bpr": 56, "meetmeonmondai": 56, "encipher_hil": [56, 264], "z_": [56, 214], "r145": 56, "lester": 56, "1920": 56, "r146": 56, "polygraph": 56, "bare": [56, 113], "ceil": [56, 62, 95, 112, 202], "l_1": [56, 60, 106, 187, 212, 228], "l_t": 56, "c_t": 56, "l_i": [56, 187, 212], "decipher_hil": [56, 264], "hill_ciph": 56, "june": [56, 91], "juli": [56, 215], "1929": 56, "306": 56, "312": [56, 178, 220, 247, 248], "ueqdueodoctcwq": 56, "st": [56, 82, 168], "hjeb": 56, "stqq": 56, "ispk": 56, "stzz": 56, "hd": 56, "ormv": 56, "uiki": 56, "encipher_bifid": [56, 264], "polybiu": 56, "printabl": 56, "bifid5": 56, "decipher_bifid": [56, 264], "encipher_bifid5": [56, 264], "encipher_bifid6": [56, 264], "r147": 56, "bifid_ciph": 56, "ieilhhfstsfqy": 56, "ieilh": 56, "hfst": 56, "fqyej": 56, "bmtwmg": 56, "bio": 56, "gold_bug": 56, "hg2sfuei7t": 56, "pug": 56, "heldo": 56, "wor6d": 56, "bifid5_squar": [56, 264], "5x5": 56, "cap": [56, 59, 168, 210, 221], "tradition": [56, 63], "decipher_bifid5": [56, 264], "round_trip": 56, "josi": 56, "osi": 56, "iosi": 56, "qiq": 56, "1901": 56, "felix": 56, "delastel": 56, "onto": [56, 68, 69, 70, 80, 84, 91, 94, 96, 197], "helen": 56, "cryptanalysi": 56, "german": 56, "fridai": 56, "ieilehfstsfxe": 56, "okai": 56, "decipher_bifid6": [56, 264], "8am": 56, "kfkljjhf5mmmktfrgpl": 56, "meetmeonmondayat8am": 56, "bifid6_squar": [56, 264], "6x6": 56, "rsa_public_kei": [56, 264], "totient": [56, 95, 262], "carmichael": [56, 95], "p_n": [56, 60, 63, 82, 198], "multiprim": 56, "land": 56, "reduced_toti": [56, 95, 262], "uniquenss": 56, "rsa_private_kei": [56, 264], "e_0": 56, "canonicalz": 56, "61": [56, 60, 71, 91, 95, 198, 204], "3233": 56, "797": 56, "1577": 56, "multipow": 56, "cryptosystem": 56, "coprim": [56, 82, 95, 164, 195, 215], "30030": 56, "becam": [56, 128], "hardest": 56, "claim": [56, 186, 212, 221], "encipher_rsa": [56, 264], "decipher_rsa": [56, 264], "r148": 56, "rsa_": 56, "28cryptosystem": 56, "r149": 56, "cacr": 56, "uwaterloo": 56, "techreport": 56, "2006": [56, 211], "cacr2006": 56, "r150": 56, "springer": [56, 82, 95, 195, 196, 218], "1007": 56, "2fbfb0055738": 56, "r151": 56, "itii": 56, "manuscript": 56, "1381": 56, "2753": 56, "413": 56, "1193": 56, "823": 56, "r152": 56, "r153": 56, "r154": 56, "r155": 56, "bmod": [56, 198, 202], "vice": [56, 82, 95, 98, 158, 178, 189, 193, 250, 251, 270], "versa": [56, 82, 95, 98, 158, 178, 189, 193, 250, 251, 270], "asymmetr": [56, 71], "puk": 56, "prk": 56, "chines": [56, 95, 195], "k_1": [56, 95, 195, 212], "k_2": 56, "k_n": [56, 63, 195], "p_3": [56, 185], "k_3": 56, "moduli": [56, 95, 195], "2048": [56, 95, 202], "overhead": [56, 96, 199], "modular": [56, 95, 164, 194, 196, 221], "crt": [56, 95, 195, 262], "overcompens": 56, "theorit": 56, "new_msg": 56, "kid_rsa_public_kei": [56, 264], "grade": [56, 83, 182, 198], "school": [56, 211], "bob": [56, 112], "369": 56, "58": [56, 91, 228], "kid_rsa_private_kei": [56, 264], "encipher_kid_rsa": [56, 264], "200": [56, 86, 91, 95, 98, 103, 247], "161": 56, "decipher_kid_rsa": [56, 264], "pub": [56, 247], "pri": 56, "encode_mors": [56, 264], "sep": [56, 202, 219, 233], "mors": 56, "attack": 56, "flank": 56, "r156": 56, "morse_cod": 56, "decode_mors": [56, 264], "word_sep": 56, "mc": [56, 123], "east": 56, "r157": 56, "lfsr_sequenc": [56, 264], "lfsr": 56, "c_k": 56, "golomb": [56, 95], "g157": 56, "autocorrel": 56, "lim_": [56, 61, 63, 80, 82, 209, 268, 272], "balanc": [56, 134, 189, 222, 233], "solomon": 56, "aegean": 56, "park": 56, "laguna": 56, "1967": [56, 196], "lfsr_autocorrel": [56, 264], "lfsr_connection_polynomi": [56, 264], "massei": 56, "m158": 56, "jame": [56, 195], "synthesi": 56, "bch": 56, "tran": 56, "122": [56, 58, 63], "127": [56, 95], "elgamal_public_kei": [56, 264], "elgamal_private_kei": [56, 264], "1031": 56, "636": 56, "212": [56, 82, 196], "mathmat": 56, "dlp": 56, "is_primitive_root": [56, 95, 262], "encipher_elgam": [56, 264], "c2": [56, 65, 72, 86, 88, 112, 154, 168, 210, 218, 222, 249, 252, 279], "encryp": 56, "decipher_elgam": [56, 264], "eucliden": 56, "dh_public_kei": [56, 264], "dh_private_kei": [56, 264], "_p": [56, 168, 193, 195, 197, 209, 212, 220], "_g": 56, "diffi": 56, "hellman": [56, 95], "publicli": 56, "secretli": 56, "dh_shared_kei": [56, 264], "sk": 56, "gm_public_kei": [56, 264], "goldwass": 56, "micali": 56, "gm_private_kei": [56, 264], "b_n": [56, 60, 84, 189, 205], "jacobi_symbol": [56, 95, 262], "reconstruct": [56, 91, 195, 273], "residuos": 56, "entropi": [56, 222], "encipher_gm": [56, 264], "public_kei": 56, "gm": [56, 171], "decipher_gm": [56, 264], "encipher_railf": [56, 264], "rail": 56, "railfenc": 56, "horel": 56, "ollwd": 56, "r160": 56, "rail_fence_ciph": 56, "decipher_railf": [56, 264], "diffgeom": 57, "euclidean": [57, 68, 70, 178, 193, 195, 198], "r161": 57, "chart": [57, 188], "parameter": [57, 64, 65, 68, 71, 215], "r162": 57, "sussman": 57, "wisdom": 57, "farr": 57, "2013": [57, 67, 86, 276], "tranform": 57, "cartesian": [57, 98, 136, 141, 155, 158, 163, 183, 188, 189, 210, 221, 240, 250, 251, 253, 254], "polar": [57, 61, 63, 65, 71, 81, 98, 107, 138, 188, 210, 214, 221, 263], "relation_dict": 57, "car2d": 57, "pol": 57, "coordinatesymbol": 57, "jacobian": [57, 91, 132, 220], "jacobian_determin": 57, "r163": 57, "coordinate_system": 57, "base_oneform": 57, "coord_index": 57, "oneform": 57, "base_scalar": 57, "basescalarfield": 57, "base_vector": [57, 247], "coord_funct": 57, "to_si": 57, "coord": [57, 70, 72, 109, 166, 181], "immutabledensematrix": [57, 86, 87, 88, 89, 222], "rn": 57, "r2_r": 57, "r2_p": 57, "jacobian_matrix": 57, "point_to_coord": 57, "coord_si": [57, 249], "imbu": 57, "difficulti": [57, 119], "arriv": [57, 195, 212, 214, 218, 222, 278], "inappropri": 57, "poin": 57, "unappropri": 57, "fy": [57, 188, 219], "ftheta": 57, "basevectorfield": 57, "point_p": 57, "point_r": 57, "s_field": 57, "dxi": 57, "v1": [57, 68, 91, 115, 135, 178, 179, 181, 222, 241, 247, 249, 250, 251, 252], "v2": [57, 68, 91, 115, 178, 179, 181, 241, 247, 249, 250, 251, 252], "v_1": [57, 197, 220], "v_2": [57, 197], "e_x": [57, 228], "e_i": [57, 189, 212, 228], "e_r": 57, "c_xy": 57, "c_xr": 57, "unfortun": [57, 59, 96, 201, 215], "e_rho": 57, "form_field": 57, "exterior": [57, 71], "dg": 57, "tensorproduct": [57, 155, 165, 167, 223, 224, 225], "multilinear": 57, "wedg": [57, 80], "tp1": 57, "tp": [57, 140, 167, 193], "wedgeproduct": 57, "wp1": 57, "liederiv": 57, "v_field": 57, "transport": 57, "pushforward": 57, "e_theta": 57, "basecovarderivativeop": 57, "christoffel": 57, "metric_to_christoffel_2nd": 57, "ch": [57, 91, 215], "cvd": 57, "covarderivativeop": 57, "intcurve_seri": 57, "vector_field": [57, 253], "start_point": 57, "dt": [57, 63, 122, 135, 177, 178, 180, 185, 186, 198, 218, 278], "f_i": [57, 80, 91, 195, 199], "movement": 57, "intcurve_diffequ": 57, "init_cond": 57, "f_1": [57, 60, 63, 80, 105, 114, 117, 136, 189, 195, 198, 218], "f_0": [57, 60, 114, 195], "vectors_in_basi": 57, "kept": [57, 170, 186, 240, 273], "twoform_to_matrix": 57, "twoform": 57, "e_j": 57, "metric_to_christoffel_1st": 57, "levi": [57, 63, 222, 228], "civita": [57, 63, 228], "metric_to_riemann_compon": 57, "non_trivial_metr": 57, "dtheta": 57, "drho": 57, "metric_to_ricci_compon": 57, "ricci": 57, "fft": [58, 135], "ifft": 58, "ntt": 58, "intt": 58, "fwht": 58, "ifwht": 58, "mobius_transform": 58, "inverse_mobius_transform": 58, "convolution_fft": 58, "convolution_ntt": 58, "convolution_fwht": 58, "convolution_subset": 58, "covering_product": 58, "intersecting_product": 58, "radix": 58, "r164": 58, "coolei": 58, "93tukey_fft_algorithm": 58, "r165": 58, "fastfouriertransform": 58, "r166": 58, "r167": 58, "pz": [58, 103, 228], "643": [58, 95], "767": 58, "387": 58, "415": 58, "384": 58, "353": [58, 91], "r168": 58, "apfloat": 58, "r169": 58, "numbertheoretictransform": 58, "r170": 58, "discrete_fourier_transform_": 58, "r171": 58, "r172": 58, "r173": 58, "wht": 58, "r174": 58, "hadamard_transform": 58, "r175": 58, "fast_walsh": 58, "93hadamard_transform": 58, "r176": 58, "r177": 58, "mobiu": [58, 95, 262], "lattic": [58, 215], "bitmask": 58, "r178": 58, "b6bius_inversion_formula": 58, "r179": 58, "csail": 58, "mit": 58, "rrw": 58, "conv": 58, "r180": 58, "arxiv": [58, 60, 63, 91, 107, 198, 240], "1211": 58, "0189": 58, "r181": 58, "r182": 58, "r183": 58, "888": 58, "444": 58, "1283": 58, "19351": 58, "14219": 58, "15502": 58, "44": [58, 60, 91, 95, 211, 222], "41": [58, 65, 91, 95, 193, 215], "63": [58, 91, 95], "r184": 58, "convolution_theorem": 58, "r185": 58, "333": [58, 95], "555": 58, "222": 58, "666": 58, "15555": 58, "19404": 58, "r186": 58, "r187": 58, "68": [58, 83, 91, 95, 215], "48": [58, 65, 99, 215, 220, 222, 268], "2057": 58, "1870": 58, "r188": 58, "radioeng": 58, "cz": [58, 215], "fulltext": 58, "2002": [58, 189, 196, 199], "02_03_40_42": 58, "r189": 58, "r190": 58, "r191": 58, "AND": [58, 85, 254], "327": [58, 218], "r192": 58, "44288293815837": 59, "4429": 59, "4428829381583662470158809900606936986146216893757": 59, "28902548222223624241": 59, "091999668350375232456": 59, "14159265358979": [59, 63, 220], "333333333333333": [59, 192, 214], "1415926535": 59, "7182818284": 59, "100000": [59, 95, 103], "951": 59, "95678796130331164628399634646042209010610577945815": 59, "gmpy": [59, 192, 193, 277], "googl": [59, 187, 188, 221], "100000000000000": 59, "1000000000": 59, "125000000000000000000000000000": 59, "100000000000000005551115123126": 59, "100000000000000000000000000000": 59, "1415": 59, "uncertainti": [59, 173], "003": 59, "31417": 59, "propag": [59, 68, 139, 142], "5000": [59, 98], "50000000000000000000000000000": 59, "varphi": [59, 63, 197, 202, 218], "erron": 59, "goldenratio": [59, 203, 214], "34665576869e": 59, "208": [59, 198], "64613129282185e": 59, "60123853010113e": 59, "210": [59, 95, 215], "thousand": [59, 95, 267], "precisionexhaust": 59, "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 59, "binet": 59, "104": 59, "1336": 59, "portion": [59, 71, 86, 91], "meaningless": 59, "012297": 59, "9562288417661": 59, "956": 59, "29128599706266": 59, "2912859970626635404072825905956005414986193682745": 59, "14159265358979323846264338328": 59, "integrand": [59, 63, 79, 80, 82, 212], "struggl": [59, 201], "346": 59, "34635637913639": 59, "dealt": [59, 80], "504067061906928": 59, "50406706190692837199": 59, "wrap_lin": [59, 82, 83, 91, 99, 182, 189, 190, 201, 202, 218], "intgrl": 59, "extrapol": [59, 209], "richardson": [59, 209, 221], "slowli": [59, 209], "64493406684823": 59, "577215664901533": 59, "57721566490153286060651209008240243104215933593992": 59, "10000000": [59, 198], "20000000": [59, 198], "693147255559946": 59, "tune": [59, 83, 182, 202], "worthwhil": 59, "hypergeometr": [59, 60, 62, 73, 75, 79, 80, 196, 206, 213, 218, 220, 222, 258, 278], "ramanujan": [59, 60, 95], "9801": 59, "1103": 59, "26390": 59, "396": [59, 118], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 59, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 59, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 59, "355": [59, 95, 196], "113": [59, 95, 215], "33333": [59, 82], "635": 59, "504": [59, 196], "130198866629986772369127970337": 59, "49": [59, 60, 95, 99, 195, 215], "___________": [59, 99, 218], "k_sym": 60, "binom": [60, 95, 222, 278], "dotsc": [60, 204], "j_1": [60, 147, 148, 165, 187, 204, 223], "j_2": [60, 147, 148, 165, 187, 204], "dotsb": [60, 204], "atop": [60, 63, 204, 212], "2j_2": [60, 204], "3j_2": [60, 204], "j_": [60, 63, 80, 82, 165, 204, 212, 272], "877": 60, "4140": 60, "21147": 60, "115975": 60, "846749014511809332450147": 60, "r193": 60, "bell_numb": 60, "r194": 60, "bellnumb": 60, "r195": 60, "bellpolynomi": 60, "hurwitz": [60, 63], "6k": 60, "appel": [60, 63, 194], "confer": [60, 96, 276], "r200": 60, "66": [60, 86, 91, 198, 202], "1000001": 60, "appellseq": [60, 198], "bernoulli_poli": [60, 194, 198], "r196": 60, "bernoulli_numb": 60, "r197": 60, "bernoulli_polynomi": [60, 198], "r198": 60, "bernoullinumb": 60, "r199": 60, "bernoullipolynomi": 60, "luschni": [60, 63, 198], "manifesto": 60, "r201": 60, "2009": [60, 63, 95, 187, 198], "06743": [60, 63, 198], "_k": [60, 63, 82, 187, 197, 222], "expand_func": [60, 63], "6435": 60, "pascal": [60, 95], "4th": [60, 61, 77, 91, 95, 135], "195": 60, "r202": 60, "johndcook": 60, "binomial_coeffici": [60, 95, 262], "c_n": [60, 63, 84, 198, 218], "429": [60, 202], "1430": 60, "4862": 60, "39764993382373624267": 60, "020884341620842555705": 60, "r203": 60, "catalan_numb": 60, "r204": 60, "catalannumb": [60, 202], "r205": 60, "r206": 60, "geomet": [60, 189], "mathcircl": 60, "2j": [60, 195, 222], "1385": [60, 198], "272": [60, 198], "7936": [60, 198], "2702765": 60, "4096": 60, "euler_poli": [60, 194, 198], "r207": 60, "euler_numb": 60, "r208": 60, "eulernumb": 60, "r209": 60, "alternating_permut": 60, "r210": 60, "alternatingpermut": 60, "swing": 60, "derang": [60, 240], "r212": 60, "generate_derang": [60, 240], "r211": 60, "r213": 60, "double_factori": 60, "texttt": [60, 210], "r214": 60, "r215": 60, "paul": [60, 237], "235": 60, "268": 60, "1995": [60, 196, 214, 220], "f_z": [60, 183, 253], "f_2": [60, 80, 105, 114, 117, 136, 195, 212, 218], "r217": 60, "fibonacci_numb": 60, "r218": 60, "fibonaccinumb": 60, "t_0": [60, 215], "149": [60, 95], "r219": 60, "r220": 60, "tribonaccinumb": 60, "r221": 60, "oei": [60, 63, 95, 198], "a000073": 60, "137": [60, 91, 107], "205": [60, 80, 212], "5269": 60, "761": 60, "280": 60, "83711": 60, "27720": 60, "30247": 60, "9900": 60, "983697455232980674869851942390639915940": 60, "r222": 60, "harmonic_numb": 60, "r223": 60, "harmonicnumb": [60, 202], "r224": 60, "harmonicnumber2": 60, "l_0": [60, 106, 228, 229], "47": [60, 63, 91, 95, 107, 141, 173, 201], "76": [60, 63, 91, 95, 195, 198], "r225": 60, "lucas_numb": 60, "r226": 60, "lucasnumb": 60, "2t": 60, "genocchi_poli": [60, 194, 198], "r227": 60, "genocchi_numb": 60, "r228": 60, "genocchinumb": 60, "r229": 60, "mathcal": [60, 61, 80, 105, 133, 165, 187, 198, 210], "a000111": [60, 198], "zigzag": 60, "li": [60, 63, 71, 82, 95, 168, 202, 256], "50521": [60, 198], "691": 60, "2730": 60, "andre_poli": [60, 194, 198], "r230": 60, "r231": 60, "eulerzigzagnumb": 60, "r232": 60, "irrelev": 60, "r233": 60, "number_theori": 60, "r234": 60, "pentagonal_number_theorem": 60, "pochhamm": [60, 202, 214], "r235": 60, "r236": 60, "pochhammer_symbol": 60, "274": 60, "225": [60, 95, 196], "511": 60, "9330": 60, "34105": 60, "42525": 60, "22827": 60, "5880": 60, "750": 60, "r237": 60, "stirling_numbers_of_the_first_kind": 60, "r238": 60, "stirling_numbers_of_the_second_kind": 60, "multiset": [60, 80, 237, 240], "babi": [60, 95, 240], "aa": [60, 187], "bb": [60, 187, 214, 240], "multiset_combin": [60, 240], "aab": [60, 240], "aabc": 60, "aaaabbbbcccc": 60, "m_1": [60, 105, 147, 165, 187, 215], "m_2": [60, 117, 136, 147, 165, 187], "m_k": 60, "r239": 60, "r240": 60, "tinyurl": 60, "cep849r": 60, "ba": [60, 240], "multiset_permut": [60, 240], "r241": 60, "aabbc": 60, "mississippi": [60, 240], "609": 60, "1521": 60, "1768": 60, "1224": [60, 95], "579": 60, "197": 60, "r242": 60, "undergradu": 60, "csse": 60, "uwa": 60, "au": 60, "cits7209": 60, "707106781186548": 61, "negativeon": [61, 273], "tangent": [61, 65, 67, 71, 82, 199, 218], "643501108793284": 61, "r243": 61, "ib": [61, 123], "complex_conjug": 61, "r247": 61, "r244": 61, "trigonometric_funct": 61, "r245": 61, "r246": 61, "elementaryfunct": 61, "trigonometryangl": 61, "r248": 61, "r249": 61, "r250": 61, "r251": 61, "r252": 61, "r253": 61, "cotang": [61, 199], "r254": 61, "r255": 61, "r256": 61, "secant": [61, 198], "r257": 61, "r258": 61, "r259": 61, "cosec": 61, "r260": 61, "r261": 61, "r262": 61, "unnorm": [61, 63], "qquad": [61, 173, 195], "jn": [61, 63, 165, 198, 202, 272], "spheric": [61, 62, 107, 147, 187, 188, 198, 247, 250, 251, 272], "r263": 61, "sinc_funct": 61, "r264": 61, "inverse_trigonometric_funct": 61, "r265": 61, "r266": 61, "r267": 61, "r268": 61, "r269": 61, "r270": 61, "r271": 61, "r272": 61, "arctan": [61, 199, 202], "r273": 61, "r274": 61, "arccot": [61, 202], "r278": 61, "r275": 61, "r276": 61, "r277": 61, "arcsec": [61, 202], "r279": 61, "r280": 61, "r281": 61, "arccsc": [61, 202], "quadrant": [61, 193, 221], "clock": [61, 211], "reurn": 61, "r282": 61, "r283": 61, "r284": 61, "arctan2": [61, 202], "r285": 61, "hyperbolic_funct": 61, "r286": 61, "r287": 61, "arcsech": [61, 202], "imaginaryunit": [61, 202], "r288": 61, "r289": 61, "r290": 61, "arccsch": [61, 202], "567": 61, "r291": 61, "r292": 61, "ceilingfunct": 61, "r293": 61, "r294": 61, "floorfunct": 61, "r295": 61, "lfloor": [61, 193, 221, 222], "rfloor": [61, 193, 221, 222], "fractional_part": 61, "r296": 61, "fractionalpart": 61, "r297": 61, "w_k": 61, "635564016364870": 61, "34747534407696": 61, "41624341514535": 61, "lambert_w_funct": 61, "cond": [61, 80, 82, 210], "piecewise_fold": 61, "folded_cond": 61, "ITE": [61, 85, 202], "piecewise_exclus": 61, "_eval_integr": [61, 82], "piecewise_integr": 61, "as_expr_set_pair": 61, "skip_nan": 61, "mutual": [61, 80, 186], "conjunct": [61, 85, 188, 212, 233, 278], "supremum": [61, 210], "r298": 61, "directed_complete_partial_ord": 61, "r299": 61, "lattice_": 61, "28order": 61, "global_paramet": 61, "rootof": [61, 194, 198], "rootoftool": [61, 91, 198], "integer_nthroot": [61, 95], "r300": 61, "square_root": 61, "r301": 61, "r302": 61, "root_of_un": 61, "r303": 61, "principal_valu": [61, 82], "r304": 61, "cuberoot": 61, "powdenest": 61, "misc": [61, 86, 243, 258], "r305": 61, "r306": 61, "r307": 61, "cube_root": 61, "r308": 61, "polar_lift": [62, 63, 214], "periodic_argu": 62, "principal_branch": [62, 80], "sec": [62, 82, 103, 197, 202, 211, 278], "csc": [62, 97, 202, 211], "acot": [62, 202], "asec": [62, 202], "acsc": [62, 202], "hyperbol": [62, 63, 199, 221, 274, 278], "hyperbolicfunct": 62, "coth": [62, 202, 214], "sech": [62, 202], "csch": [62, 202], "asinh": [62, 202], "acosh": [62, 202], "atanh": [62, 199, 202, 212], "acoth": [62, 202], "asech": [62, 202], "acsch": [62, 202], "roundfunct": 62, "lambertw": [62, 199, 202, 220, 221, 279], "exprcondpair": 62, "miscellan": [62, 239, 264, 265], "identityfunct": 62, "real_root": [62, 194, 198, 220], "bell": [62, 152, 204, 240], "bernoulli": [62, 63, 198, 202, 220, 222], "catalan": [62, 202], "subfactori": [62, 202, 240], "factorial2": [62, 169, 202], "fallingfactori": [62, 202], "luca": [62, 95, 202, 208], "genocchi": [62, 63, 198], "andr": [62, 198], "multifactori": 62, "nc": 62, "nt": [62, 240], "fresnel": [62, 141, 202, 212], "airi": [62, 82, 218], "spline": 62, "ellipt": [62, 65, 95, 189], "mathieu": [62, 202], "delta_funct": [63, 82], "int_": [63, 79, 80, 82, 198, 205, 268, 272], "sum_i": [63, 209], "is_simpl": 63, "tensor_funct": 63, "kroneckerdelta": [63, 88, 168, 202, 214, 263], "r309": 63, "deltafunct": [63, 82], "h0": 63, "electron": [63, 107, 211], "signal": [63, 85, 95, 103, 105, 135, 195, 273], "improp": [63, 82], "convolut": [63, 204, 258], "r310": 63, "heavisidestepfunct": 63, "r311": 63, "iv": [63, 199], "105": [63, 95, 198, 215], "parg": 63, "singularity_funct": 63, "singularityfunct": [63, 82, 98], "macaulai": 63, "heavisidediracdelta": 63, "r312": 63, "r313": 63, "r314": 63, "r315": 63, "r316": 63, "setminu": [63, 80], "17805383034794561964694160130": 63, "65092319930185633889": 63, "8724366472624298171": 63, "r317": 63, "r318": 63, "r319": 63, "loggammafunct": 63, "r320": 63, "espinosa": 63, "moll": 63, "r325": 63, "19093197": 63, "5173168": 63, "ni": [63, 95], "r321": 63, "polygamma_funct": 63, "r322": 63, "polygammafunct": 63, "r323": 63, "r324": 63, "polygamma2": 63, "2004": [63, 196, 215], "115": 63, "r326": 63, "digamma_funct": 63, "r327": 63, "digammafunct": 63, "r328": 63, "r329": 63, "trigamma_funct": 63, "r330": 63, "trigammafunct": 63, "r331": 63, "int_x": 63, "_1f_1": 63, "confluent": [63, 212], "xt": 63, "expint": [63, 202], "r332": 63, "incomplete_gamma_funct": 63, "upper_incomplete_gamma_funct": 63, "r333": 63, "r334": 63, "r335": 63, "gamma2": 63, "r336": 63, "gamma3": 63, "r337": 63, "exponential_integr": 63, "relation_with_other_funct": 63, "int_0": [63, 80, 82, 268, 278], "r338": 63, "lower_incomplete_gamma_funct": 63, "r339": 63, "r340": 63, "r341": 63, "r342": 63, "multigamma": 63, "gamma_p": 63, "r343": 63, "multivariate_gamma_funct": 63, "beta_funct": 63, "eulerian": 63, "02671848900111377452242355235388489324562": 63, "2112723729365330143": 63, "7655283165378005676": 63, "r344": 63, "r345": 63, "betafunct": 63, "r346": 63, "error_funct": 63, "999999984582742099719981147840": 63, "1296959": 63, "73071763923152794095062": 63, "r347": 63, "r348": 63, "r349": 63, "r350": 63, "0000000154172579002800188521596734869": 63, "r351": 63, "r352": 63, "r353": 63, "r354": 63, "5648024145755525987042919132": 63, "995322265018952734162069256367": 63, "r355": 63, "r356": 63, "r357": 63, "r358": 63, "179143454621291692285822705344": 63, "r359": 63, "inverse_funct": 63, "r360": 63, "inverseerf": [63, 202], "r361": 63, "r362": 63, "inverseerfc": [63, 202], "r363": 63, "inverseerf2": 63, "fresnelintegr": 63, "343415678363698242195300815958": 63, "fresnelc": [63, 202, 212], "r364": 63, "fresnel_integr": 63, "r365": 63, "r366": 63, "r367": 63, "r368": 63, "wrench": 63, "jr": 63, "vicki": 63, "allei": 63, "488253406075340754500223503357": 63, "r369": 63, "r370": 63, "r371": 63, "r372": 63, "r373": 63, "ei": [63, 80, 197, 202, 212, 215, 218, 228], "background": [63, 83, 128, 182, 185, 276], "cauchi": [63, 80, 82, 193, 218, 222], "219383934395520": 63, "21938393439552": 63, "shi": [63, 80, 202, 212], "e1": [63, 65, 72, 118, 192, 197, 209, 218, 221], "r374": 63, "r375": 63, "r376": 63, "sfu": [63, 82], "cbm": [63, 82], "aand": [63, 82], "page_228": 63, "int_1": [63, 80], "zt": [63, 80], "unbranch": [63, 80], "meijerg": [63, 74, 80, 82, 202, 222, 278], "postiv": 63, "r377": 63, "r378": 63, "expintegral": [63, 202], "r379": 63, "04516378011749278484458888919": 63, "0652795784357498247001125598": 63, "08346052231061726610939702133": 63, "soldner": 63, "45136923488338": 63, "r380": 63, "logarithmic_integr": 63, "r381": 63, "logarithmicintegr": 63, "r382": 63, "r383": 63, "soldnersconst": 63, "92242131492155809316615998938": 63, "r384": 63, "r385": 63, "r386": 63, "r387": 63, "trigonometric_integr": 63, "_1": [63, 91, 112, 178, 187, 212, 241], "somewhat": [63, 82, 118, 193], "r388": 63, "r389": 63, "r390": 63, "laurent": [63, 193, 199, 218], "j_n": [63, 165], "r391": 63, "r392": 63, "r393": 63, "r394": 63, "yn": [63, 202, 208], "r395": 63, "i_": [63, 80, 212, 222, 223], "iz": 63, "r396": 63, "k_": [63, 80, 130, 131], "r397": 63, "hankel1": [63, 202], "hankel": [63, 82], "iy_": 63, "hankel2": [63, 202], "r398": 63, "hankelh1": [63, 202], "r399": 63, "hankelh2": [63, 202], "2z": [63, 221, 222], "orthopoli": [63, 198], "spherical_bessel_fn": [63, 194, 198], "3j": [63, 147, 187], "099419756723640344491": 63, "054525080242173562897": 63, "r400": 63, "y_n": [63, 215], "18525034196069722536": 63, "014895573969924817587": 63, "r401": 63, "jn_zero": 63, "besseljzero": 63, "sph_jn": 63, "7635": 63, "095": 63, "323": [63, 95], "515": 63, "marcumq": 63, "marcum": 63, "q_m": 63, "r402": 63, "marcum_q": 63, "r403": 63, "airybas": 63, "airyai": [63, 202, 218], "ai": [63, 95, 198, 215, 243, 278], "airyaiprim": [63, 202], "22740742820168557599192443603787379946077222541710": 63, "airybi": [63, 202, 218], "airybiprim": [63, 202], "r404": 63, "airy_funct": 63, "r405": 63, "r406": 63, "encyclopediaofmath": 63, "r407": 63, "airyfunct": 63, "41230258795639848808323405461146104203453483447240": 63, "r408": 63, "r409": 63, "r410": 63, "r411": 63, "61825902074169104140626429133247528291577794512415": 63, "r412": 63, "r413": 63, "r414": 63, "r415": 63, "27879516692116952268509756941098324140300059345163": 63, "r416": 63, "r417": 63, "r418": 63, "r419": 63, "bspline": 63, "bspline_basi": 63, "knot": 63, "cubic": [63, 189, 198, 215, 220], "bspline_basis_set": 63, "r420": 63, "interpolating_splin": 63, "131": [63, 178], "39": [63, 95, 201], "interpolating_poli": [63, 194, 198], "zeta_funct": 63, "admit": [63, 218], "lerch": 63, "transcend": 63, "lerchphi": [63, 202], "dirichlet_eta": [63, 202], "20205690315959": 63, "polylog": [63, 202], "r421": 63, "r422": 63, "hurwitz_zeta_funct": 63, "r423": 63, "dirichlet_eta_funct": 63, "r424": 63, "polylogarithm": 63, "sheet": [63, 211], "phi_0": 63, "ze": 63, "r425": 63, "bateman": 63, "erdelyi": 63, "1953": [63, 197], "york": [63, 80, 134, 212, 220], "mcgraw": [63, 113, 134, 178, 184, 247], "r426": 63, "r427": 63, "lerch_transcend": 63, "stieltj": [63, 202], "gamma_": [63, 106, 108], "r428": 63, "stieltjes_const": 63, "ap": [63, 67, 212], "bq": [63, 190, 191, 212], "a_p": [63, 80, 212, 278], "b_q": [63, 80, 212, 278], "_pf_q": [63, 212, 218, 278], "unicod": [63, 83, 91, 182, 202, 233, 272], "r429": 63, "r430": 63, "generalized_hypergeometric_funct": 63, "convergence_stat": 63, "radius_of_converg": 63, "radiu": [63, 65, 67, 69, 71, 125, 127, 137, 138, 141, 188, 221, 222, 256], "meijer": [63, 73, 75, 81, 82, 268, 278], "mellin": [63, 81, 82], "barn": 63, "b_m": [63, 80, 220], "confusingli": 63, "int_l": [63, 80, 212], "contour": [63, 65, 80, 188, 212], "__1": 63, "subvector": 63, "aother": 63, "bm": 63, "bother": [63, 273], "slater": [63, 212], "allow_hyp": [63, 214], "subsum": 63, "r431": 63, "r432": 63, "meijer_g": 63, "get_period": [63, 80], "appellf1": [63, 202], "b2": [63, 95, 98, 99, 110, 118, 135, 178, 191, 193, 202, 212, 215, 218, 252], "0063339426292673": 63, "172870711": 63, "659936": 63, "15605338197184": 63, "r433": 63, "appell_seri": 63, "r434": 63, "hypergeometricfunct": 63, "elliptic_integr": 63, "elliptic_k": [63, 202], "tfrac": [63, 218, 222], "eccentr": [63, 65, 67], "50923695405127": 63, "625146415202697": 63, "elliptic_f": [63, 202], "r435": 63, "r436": 63, "ellipticintegr": 63, "elliptick": [63, 202], "909449841483": 63, "74720545502474": 63, "r437": 63, "r438": 63, "ellipticf": 63, "elliptic_": [63, 65, 202], "55203744279187": 63, "290764986058437": 63, "991052601328069": 63, "81879421395609": 63, "r439": 63, "r440": 63, "elliptice2": 63, "r441": 63, "elliptic": [63, 202], "elliptic_pi": [63, 202], "50232379629182": 63, "760939574180767": 63, "29136443417283": 63, "32555634906645": 63, "r442": 63, "r443": 63, "ellipticpi3": 63, "r444": 63, "ellipticpi": [63, 202], "mathieu_funct": 63, "mathieubas": 63, "mathieusprim": [63, 202], "mathieuc": [63, 202], "mathieucprim": [63, 202], "r445": 63, "r446": 63, "r447": 63, "r448": 63, "mathieuandspheroidalfunct": 63, "r449": 63, "r450": 63, "r451": 63, "r452": 63, "r453": 63, "r454": 63, "r455": 63, "r456": 63, "r457": 63, "r458": 63, "r459": 63, "r460": 63, "chebyshevu": [63, 202], "chebyshevt_root": 63, "chebyshevu_root": 63, "assoc_legendr": [63, 202], "hermite_prob": 63, "jacobi_poli": [63, 194, 198], "gegenbauer_poli": [63, 194, 198], "chebyshevt_poli": [63, 194, 198], "chebyshevu_poli": [63, 194, 198], "hermite_poli": [63, 194, 198], "legendre_poli": [63, 194, 198], "laguerre_poli": [63, 194, 198], "r461": 63, "jacobi_polynomi": 63, "r462": 63, "jacobipolynomi": 63, "r463": 63, "jacobip": [63, 202], "jacobi_norm": 63, "normilz": 63, "p_m": 63, "delta_": [63, 165, 173, 187], "r464": 63, "r465": 63, "r466": 63, "hermite_prob_poli": [63, 194, 198], "r467": 63, "gegenbauer_polynomi": 63, "r468": 63, "gegenbauerpolynomi": 63, "r469": 63, "gegenbauerc3": 63, "r470": 63, "chebyshev_polynomi": 63, "r471": 63, "chebyshevpolynomialofthefirstkind": 63, "r472": 63, "chebyshevpolynomialofthesecondkind": 63, "r473": 63, "r474": 63, "u_n": [63, 82, 195, 197, 198], "r475": 63, "r476": 63, "r477": 63, "r478": 63, "r479": 63, "chebyshev_root": 63, "r480": 63, "legendre_polynomi": 63, "r481": 63, "legendrepolynomi": 63, "r482": 63, "legendrep": [63, 202], "r483": 63, "legendrep2": 63, "r484": 63, "associated_legendre_polynomi": 63, "r485": 63, "r486": 63, "r487": 63, "r488": 63, "hermite_polynomi": 63, "r489": 63, "hermitepolynomi": 63, "r490": 63, "hermiteh": [63, 202], "probabilist": [63, 198, 222], "he_n": [63, 198], "telephon": 63, "a000085": 63, "232": 63, "764": 63, "2620": 63, "9496": 63, "r491": 63, "r492": 63, "l_n": [63, 82, 198], "r493": 63, "laguerre_polynomi": 63, "r494": 63, "laguerrepolynomi": 63, "r495": 63, "laguerrel": [63, 202], "r496": 63, "laguerrel3": 63, "r497": 63, "generalized_laguerre_polynomi": 63, "r498": 63, "associatedlaguerrepolynomi": 63, "r499": 63, "r500": 63, "spherical_harmon": 63, "ynm": [63, 187], "ynm_c": 63, "znm": 63, "r501": 63, "r502": 63, "sphericalharmon": 63, "r503": 63, "sphericalharmonici": 63, "r504": 63, "r505": 63, "r506": 63, "r507": 63, "z_n": [63, 196], "r508": 63, "r509": 63, "r510": 63, "eijk": 63, "levicivita": [63, 91], "eval_levicivita": 63, "pseudotensor": 63, "delta_rang": [63, 168], "kroneck": [63, 167, 168, 187, 223, 228], "r511": 63, "kronecker_delta": [63, 168], "indices_contain_equal_inform": [63, 168], "fermi": [63, 168], "above_fermi": [63, 168], "below_fermi": [63, 168], "is_above_fermi": [63, 168], "is_below_fermi": [63, 168], "is_only_below_fermi": [63, 168], "is_only_above_fermi": [63, 168], "killable_index": [63, 168], "preferred_index": [63, 168], "point2d": [64, 65, 66, 67, 68, 70, 71, 72], "arbitrary_point": [64, 65, 66, 67, 68, 69, 71], "polyfunc": [64, 198], "ambient_dimens": [64, 66, 67, 68, 70], "plot_interv": [64, 65, 67, 68, 71], "lower_bound": [64, 65, 68, 71], "upper_bound": [64, 65, 68, 71], "counterclockwis": [64, 65, 66, 70, 98, 99], "geometryent": [64, 65, 66, 67, 68, 70, 71, 72], "hradiu": [65, 67], "vradiu": [65, 67], "geometryerror": [65, 68, 71, 72], "radii": 65, "foci": [65, 67], "periapsi": [65, 67], "apoapsi": [65, 67], "focus_dist": [65, 67], "shortest": [65, 68, 71, 185, 208, 214, 218, 240], "auxiliary_circl": [65, 67], "xmin": [65, 66, 68, 70, 71, 188], "ymin": [65, 66, 68, 70, 71, 188], "xmax": [65, 66, 68, 70, 71, 188], "ymax": [65, 66, 68, 70, 71, 188], "rectangl": [65, 66, 68, 70, 71, 188, 198], "director_circl": [65, 67], "perpendicular": [65, 68, 69, 71, 84, 112, 126, 141, 186], "director": 65, "130": 65, "r512": 65, "encloses_point": [65, 66, 67, 71], "border": [65, 71], "_slope": 65, "slope": [65, 66, 67, 68, 71, 98, 99, 103, 112], "eq1": [65, 218, 220, 221], "eq2": [65, 85, 218, 221], "r513": 65, "108270": 65, "r514": 65, "equation_of_a_shifted_ellips": 65, "evolut": [65, 67], "focal": [65, 137, 141], "100500": 65, "363": [65, 95, 196], "175": [65, 91, 195, 196], "is_tang": [65, 67], "tangent_lin": [65, 67], "normal_lin": [65, 67], "line2d": [65, 67, 68, 71], "quartic": [65, 198, 220], "2020": [65, 147], "polar_second_moment_of_area": [65, 67, 71], "moment": [65, 71, 98, 99, 120, 128, 131, 177, 188, 198, 215, 222], "constitu": [65, 71, 115, 178, 208, 247], "planar": [65, 71, 99, 112, 141], "resist": [65, 71, 98, 99, 211], "deflect": [65, 71, 98, 99], "bend": [65, 71, 98, 100], "r515": 65, "polar_moment_of_inertia": [65, 71], "random_point": [65, 67, 68, 69], "arb": 65, "364": 65, "notimpl": [65, 197], "second_moment_of_area": [65, 67, 71], "centroid": [65, 67, 71, 72, 98], "i_xx": [65, 71], "i_yi": [65, 71], "i_xi": [65, 71], "ellis": 65, "r516": 65, "list_of_second_moments_of_area": 65, "section_modulu": [65, 67, 71], "sympify": [65, 71, 98, 101, 110, 115, 139, 142, 180], "farthest": [65, 71], "s_x": [65, 71], "s_y": [65, 71], "r517": 65, "semilatus_rectum": [65, 67], "semi": [65, 68, 95], "latu": 65, "rectum": 65, "chord": 65, "conic": [65, 215, 247], "directrix": 65, "r518": 65, "semilatusrectum": 65, "r519": 65, "latus_rectum": 65, "collinear": [65, 67, 69, 70, 71, 188], "gx": 65, "hy": 65, "synonym": [65, 197], "p4": [65, 68, 70, 71, 188], "boundari": [66, 68, 98, 99, 181, 199, 210, 218, 222], "t2": [66, 71, 72, 95, 110, 115, 215, 222, 228], "ordering_of_class": 66, "is_similar": [66, 67, 68, 71, 72], "uniform": [66, 188, 220, 222], "enlarg": 66, "shrink": [66, 80], "parameter_valu": [66, 67, 69], "pent": 66, "rpent": 66, "rcirc": 66, "entity1": 67, "entity2": 67, "zp": 67, "is_collinear": [67, 70], "segment2d": [67, 68, 71, 72], "wikipappu": 67, "bc": [67, 101, 240, 243, 252], "subs_point": 67, "p11": 67, "p12": 67, "p13": 67, "p21": 67, "p22": 67, "p23": 67, "ll1": 67, "ll2": 67, "ll3": 67, "ll4": 67, "ll5": 67, "ll6": 67, "pp1": 67, "pp2": 67, "pp3": 67, "encyclopedia": [67, 184], "apr": 67, "s_hexagon_theorem": 67, "clockwis": [67, 82, 86, 98, 99, 101], "overlap": [67, 72, 94, 189, 210, 243], "infanc": 67, "geometryresult": 67, "fair": [67, 222], "affine_rank": [67, 70], "are_coplanar": [67, 70], "canberra_dist": [67, 70], "is_concycl": [67, 70], "is_scalar_multipl": [67, 70], "midpoint": [67, 68, 70, 71, 82, 188, 252], "orthogonal_direct": [67, 70], "taxicab_dist": [67, 70], "are_collinear": [67, 70], "direction_cosin": [67, 68, 70], "direction_ratio": [67, 68, 70], "angle_between": [67, 68, 69, 71, 178], "are_concurr": [67, 68, 69], "bisector": [67, 68, 71], "is_parallel": [67, 68, 69], "is_perpendicular": [67, 68, 69, 70, 71], "parallel_lin": [67, 68], "perpendicular_lin": [67, 68, 69], "perpendicular_seg": [67, 68], "smallest_angle_between": [67, 68], "perpendicular_bisector": [67, 68], "linearentity2d": [67, 68], "ray2d": [67, 68, 71], "closing_angl": [67, 68], "xdirect": [67, 68], "ydirect": [67, 68], "linearentity3d": [67, 68, 69], "line3d": [67, 68, 69, 70], "ray3d": [67, 68, 69, 141], "zdirect": [67, 68], "segment3d": [67, 68, 69], "cut_sect": [67, 71], "first_moment_of_area": [67, 71], "perimet": [67, 71, 254], "apothem": [67, 71], "circumcent": [67, 71], "circumcircl": [67, 71], "circumradiu": [67, 71], "exterior_angl": [67, 71], "incircl": [67, 71], "inradiu": [67, 71], "interior_angl": [67, 71], "spin": [67, 71, 107, 120, 154, 155, 163], "altitud": [67, 71], "eulerlin": [67, 71], "excent": [67, 71], "exradii": [67, 71], "incent": [67, 71], "is_equilater": [67, 71], "is_isoscel": [67, 71], "is_right": [67, 71], "is_scalen": [67, 71], "medial": [67, 71], "nine_point_circl": [67, 71], "orthocent": [67, 71], "is_coplanar": [67, 69], "normal_vector": [67, 69, 141], "parallel_plan": [67, 69], "perpendicular_plan": [67, 69], "projection_lin": [67, 69], "reflex": 68, "eman": 68, "readili": [68, 91], "sw": 68, "obtus": 68, "concurr": [68, 69, 199], "l3": [68, 121, 195], "l4": [68, 121], "p5": [68, 70, 71, 188], "p6": [68, 71, 188], "p7": [68, 71, 188], "enpoint": 68, "reform": 68, "92": [68, 196, 218, 222], "ccw": [68, 71], "170": [68, 222], "341": 68, "proce": [69, 132, 195, 197, 212, 220], "147": 69, "321": 69, "perpendicualar": 69, "on_circl": 69, "off_circl": 69, "pt1": 69, "on_morph": 70, "canberra": 70, "geometricent": 70, "concycl": 70, "fewer": [70, 71, 132, 222, 268], "ambient": 70, "taxicab": 70, "_nocheck": 70, "4x4": [70, 94, 140, 222], "travers": [71, 95, 111, 198, 211, 227, 237, 258, 273], "unrot": 71, "circumscrib": 71, "contact": [71, 120, 124, 125, 126, 127, 185, 226], "38": [71, 91, 95, 202, 215, 217, 222], "upper_polygon": 71, "lower_polygon": 71, "upper_seg": 71, "lower_seg": 71, "r520": 71, "r521": 71, "paulbourk": 71, "polygonmesh": 71, "insidepoli": 71, "q_x": [71, 185], "q_y": [71, 185], "625": [71, 256], "3125": [71, 222], "525": 71, "3000": [71, 98], "r522": 71, "skyciv": 71, "beam": [71, 101, 137, 140, 263], "bmd": 71, "r523": 71, "mechanicalc": 71, "poly1": 71, "poly2": 71, "interior": [71, 198, 210], "180": [71, 186, 196], "r524": 71, "r525": 71, "r526": 71, "inscrib": 71, "leg": 71, "square_in_unit_circl": 71, "kite": 71, "asa": 71, "sa": [71, 198], "sss": 71, "median": [71, 222, 264], "straight": [71, 77, 103, 122, 185, 218], "equilater": 71, "coincid": [71, 91, 94, 112, 118, 189, 247, 251, 270], "excircl": 71, "touch": [71, 120, 211], "r527": 71, "ly": [71, 91, 193], "exradiu": 71, "r528": 71, "r529": 71, "nine": [71, 202], "feet": 71, "real_num": 72, "hull": 72, "r530": 72, "graham_scan": 72, "r531": 72, "andrew": 72, "1979": [72, 173], "geomalgorithm": 72, "a10": 72, "_hull": 72, "t3": [72, 215], "averag": [72, 82, 95, 195, 222], "qq": [73, 74, 76, 77, 78, 82, 189, 190, 191, 192, 194, 195, 197, 198, 199], "p_r": 73, "holonomic_funct": 73, "from_hyp": [74, 77], "holonomicfunct": [74, 75, 77], "from_meijerg": [74, 77], "initcond": [74, 76, 77], "expr_to_holonom": [74, 77, 78, 79], "lenic": [74, 76], "ground": [74, 112, 120, 124, 125, 126, 127, 189, 192, 193, 195, 197, 198, 220, 277], "meijerint": [74, 76, 80, 82], "_rewrite1": [74, 80, 81], "_convert_poly_rat_alg": [74, 75, 76], "_create_t": [74, 75, 76], "differentialoper": [75, 77, 155, 157], "differentialoperatoralgebra": 75, "_create_lookup_t": [76, 80, 81], "old_poly_r": [77, 78, 189, 192, 193], "to_expr": [77, 78, 79, 105], "to_sequ": 77, "n_0": [77, 195, 220, 221], "indici": [77, 78, 79, 218], "c_j": [77, 80, 212], "holonomicsequ": 77, "r532": 77, "hal": 77, "inria": [77, 82], "fr": [77, 82, 95, 113, 118, 120, 122, 125, 126, 130, 132, 135, 222], "00070025": 77, "r533": 77, "risc": [77, 218, 247], "jku": [77, 218, 247], "risc_2244": 77, "diplform": 77, "_recur": 77, "rk4": 77, "71828182845905": 77, "10517083333333": 77, "22140257085069": 77, "34985849706254": 77, "49182424008069": 77, "64872063859684": 77, "82211796209193": 77, "01375162659678": 77, "22553956329232": 77, "45960141378007": 77, "71827974413517": 77, "331": 77, "4641": 77, "61051": 77, "771561": 77, "9487171": 77, "14358881": 77, "357947691": 77, "5937424601": 77, "to_hyp": 77, "as_list": [77, 198], "to_meijerg": 77, "homogen": [78, 82, 91, 105, 193, 195, 198, 215, 218, 219, 222], "1_0": 78, "1_1": 78, "0_0": 78, "0_1": 78, "pyplot": [78, 135], "plt": [78, 135], "list_of_poli": 78, "weyl": [78, 84], "Ore": 78, "dxa": 78, "endomorph": [78, 197], "frobeniu": [79, 91, 95, 195, 196], "subtleti": 80, "recast": [80, 214, 220, 221], "branchpoint": 80, "crude": [80, 120, 188], "decre": 80, "biholomorph": 80, "topologi": [80, 210], "neighbourhood": 80, "evid": [80, 113, 126, 212], "peculiar": [80, 186], "_split_mul": [80, 81], "_mytyp": [80, 81], "inequival": 80, "_mul_as_two_part": [80, 81], "bx": [80, 222, 228], "twist": 80, "recognis": [80, 192, 212, 214], "anywai": [80, 214, 218], "analyitc": 80, "_rewrite_singl": [80, 81], "_rewrite2": [80, 81], "_rewrite_saxena_1": [80, 81], "_rewrite_saxena": [80, 81], "blogpost": 80, "remedi": 80, "exploit": [80, 234], "transpar": [80, 83, 182], "nessgrh": 80, "wordpress": [80, 215], "07": 80, "stade": 80, "c_u": 80, "d_1": [80, 173, 198, 222], "d_v": 80, "amalgam": 80, "prudnikov1990": [80, 212], "luke1969": [80, 212], "c_3": [80, 218], "c_4": 80, "visibl": [80, 188], "fulfil": [80, 187], "vee": [80, 85], "lceil": 80, "rceil": 80, "d_j": [80, 173, 212], "lambda_c": [80, 131], "lambda_": 80, "z_0": [80, 214], "z_1": 80, "a_i": [80, 173, 178, 186, 190, 195, 212], "c_5": 80, "c_6": 80, "c_7": 80, "c_8": 80, "lvert": 80, "rvert": 80, "c_9": 80, "versatil": 80, "bz": [80, 215, 228], "deform": [80, 99], "encircl": 80, "appeal": 80, "fox": 80, "obstacl": 80, "identif": [80, 221], "domin": [80, 86, 206, 207, 209], "iT": 80, "omega_": 80, "disguis": 80, "meijerint_indefinit": [80, 81], "meijerint_definit": [80, 81], "meijerint_invers": [80, 81], "kelli": [80, 212], "roach": [80, 212], "211": [80, 95, 198, 212, 218], "prudnikov": [80, 212], "yu": [80, 187, 212], "brychkov": [80, 212], "marichev": [80, 212], "gordon": [80, 147, 212], "breach": [80, 212], "_coeffexpvalueerror": [80, 81], "_get_coeff_exp": [80, 81], "_check_anteced": [80, 81], "_check_antecedents_1": [80, 81], "mt": 80, "_check_antecedents_invers": [80, 81], "anteced": [80, 209], "_condsimp": [80, 81], "hoc": 80, "simp": [80, 120, 178], "_dummi": [80, 81], "_dummy_": [80, 81], "_eval_cond": [80, 81], "_expon": [80, 81], "_find_splitting_point": [80, 81], "fsp": 80, "_flip_g": [80, 81], "_function": [80, 81], "_guess_expans": [80, 81], "sensibl": [80, 82], "_inflate_fox_h": [80, 81], "_inflate_g": [80, 81], "_int0oo": [80, 81], "_int0oo_1": [80, 81], "_int_invers": [80, 81], "_is_analyt": [80, 81], "almost": [80, 89, 97, 170, 188, 189, 193, 198, 199, 218, 222, 236, 237, 240, 272], "_meijerint_definite_2": [80, 81], "expand_mul": 80, "trigexpand": 80, "_meijerint_definite_3": [80, 81], "_meijerint_definite_4": [80, 81], "only_doubl": 80, "_meijerint_indefinite_1": [80, 81], "_mul_arg": [80, 81], "_my_principal_branch": [80, 81], "full_pb": 80, "nearer": 80, "superflu": 80, "opaqu": [80, 202], "fac": 80, "_rewrite_invers": [80, 81], "costli": [80, 122, 274], "tx": [80, 276], "overview": [81, 190, 221, 254, 255], "argand": [81, 221], "lookup": [81, 82, 91, 95, 212], "laplac": [81, 82, 102, 103, 105, 222], "todo": [81, 146, 148, 152, 153, 157, 158, 160, 161, 162, 163, 164, 195, 202, 209, 227], "polytop": 81, "happili": [82, 226], "nonelementari": 82, "mellin_transform": 82, "bilater": 82, "mellintransform": 82, "integraltransform": 82, "nocond": 82, "inverse_mellin_transform": 82, "laplace_transform": [82, 105], "fourier_transform": 82, "hankel_transform": 82, "inverse_hankel_transform": 82, "suitabl": [82, 88, 97, 187, 190, 192, 195, 197, 202, 212, 215, 218, 221, 223, 271], "inversemellintransform": 82, "attemp": 82, "laplacetransform": 82, "inverse_laplace_transform": 82, "singularit": [82, 132], "inverselaplacetransform": 82, "_fast_inverse_laplac": 82, "rootsum": [82, 194, 198, 204], "fouriertransform": 82, "_fourier_transform": 82, "inverse_fourier_transform": 82, "sine_transform": 82, "inverse_sine_transform": 82, "cosine_transform": 82, "inverse_cosine_transform": 82, "bixk": 82, "inversefouriertransform": 82, "sinetransform": 82, "inversesinetransform": 82, "cosinetransform": 82, "inversecosinetransform": 82, "hankeltransform": 82, "ht": 82, "inversehankeltransform": 82, "_compute_transform": 82, "_as_integr": 82, "integraltransformerror": 82, "_name": 82, "_collapse_extra": 82, "needev": 82, "function_vari": 82, "transform_vari": 82, "lazard": [82, 195, 198], "rioboo": 82, "trager": 82, "horowitz": 82, "ostrogradski": 82, "ratint": 82, "rationaltool": [82, 198], "ratint_logpart": 82, "ratint_ratpart": 82, "r534": 82, "bronstein": [82, 196, 198, 204, 220], "verlag": [82, 196], "deg": [82, 103, 118, 190, 195, 197, 198], "q_i": [82, 114, 132], "_t": [82, 118, 121, 135, 168, 177, 178, 181, 212, 222], "trigintegr": 82, "trigonometri": 82, "r535": 82, "integration_techniqu": 82, "deltaintegr": 82, "couldn": 82, "didn": [82, 91, 132], "singularityintegr": 82, "risch_integr": 82, "nonelementaryintegr": 82, "proven": [82, 95, 252, 270], "handle_first": 82, "separate_integr": 82, "rewrite_complex": 82, "forthcom": 82, "5109": 82, "outer": [82, 115, 133, 135, 151, 156, 157, 178, 181, 184, 186, 204, 210, 226, 247, 249, 250], "pop": [82, 215], "manualintegr": 82, "integral_step": 82, "student": [82, 211, 215, 222], "_i": [82, 168, 173, 199], "namedtupl": 82, "substep": 82, "sympy_gamma": 82, "app": 82, "intstep": 82, "urul": 82, "u_var": 82, "_u": [82, 168], "u_func": 82, "arctanrul": 82, "trigrul": 82, "rewriterul": 82, "addrul": 82, "powerrul": 82, "constanttimesrul": 82, "constantrul": 82, "norman": 82, "slowest": [82, 96], "retri": [82, 95], "degree_offset": 82, "unnecessary_permut": 82, "_try_heurisch": 82, "manuel": [82, 207], "poor": [82, 96], "man": [82, 196], "whittak": 82, "r536": 82, "sop": [82, 85], "cafe": 82, "pmint": 82, "r537": 82, "gedd": [82, 196], "stefanu": 82, "217": [82, 196], "r538": 82, "davenport": [82, 195, 196], "eurocam": 82, "lnc": [82, 196, 220], "157": [82, 95, 99, 196], "r539": 82, "iii": [82, 202, 218], "sigsam": 82, "bulletin": 82, "1982": [82, 187], "r540": 82, "transact": [82, 196], "1985": [82, 113, 134, 178, 247], "356": [82, 197, 220], "362": 82, "huge": [82, 95, 198, 238], "entail": 82, "delic": [82, 189], "albeit": [82, 250], "mimic": [82, 83, 182, 241], "moder": 82, "irrespect": [82, 215, 218, 243], "line_integr": 82, "as_sum": 82, "subinterv": 82, "trapezoid": [82, 91, 222], "730": 82, "809": 82, "decai": 82, "r541": 82, "riemann_sum": 82, "r542": 82, "cauchy_principal_valu": 82, "r543": 82, "cauchyprincipalvalu": 82, "int_a": 82, "uvar": 82, "ui": [82, 95, 219], "accomplish": [82, 132, 135, 253], "3aissu": 82, "3aopen": 82, "3aintegr": 82, "gauss_legendr": 82, "n_digit": 82, "legendr": [82, 95, 198, 202, 215], "r544": 82, "w_i": [82, 137, 198, 218], "7746": 82, "55556": 82, "88889": 82, "86114": 82, "33998": 82, "34785": 82, "65215": 82, "gauss_laguerr": 82, "gauss_gen_laguerr": 82, "gauss_hermit": 82, "gauss_chebyshev_t": 82, "gauss_chebyshev_u": 82, "gauss_jacobi": 82, "gauss_lobatto": 82, "gaussian_quadratur": 82, "r545": 82, "fsu": 82, "jburkardt": 82, "cpp_src": 82, "legendre_rul": 82, "laguerr": [82, 198, 202], "r546": 82, "41577": 82, "2943": 82, "2899": 82, "71109": 82, "27852": 82, "010389": 82, "22285": 82, "1889": 82, "9927": 82, "7751": 82, "8375": 82, "983": 82, "45896": 82, "417": [82, 214], "11337": 82, "010399": 82, "00026102": 82, "9855e": 82, "93laguerre_quadratur": 82, "r547": 82, "laguerre_rul": 82, "hermit": [82, 86, 91, 92, 191, 197, 198, 202, 222], "r548": 82, "2247": 82, "29541": 82, "1816": 82, "3506": 82, "3358": 82, "43608": 82, "00453": 82, "15707": 82, "72463": 82, "hermite_quadratur": 82, "r549": 82, "hermite_rul": 82, "r550": 82, "gen_hermite_rul": 82, "r551": 82, "19016": 82, "7845": 82, "5253": 82, "4493": 82, "31413": 82, "00906": 82, "97851": 82, "9904": 82, "3193": 82, "712": 82, "53087": 82, "67721": 82, "11895": 82, "0023152": 82, "r552": 82, "gen_laguerre_rul": 82, "r553": 82, "86602": 82, "0472": 82, "96593": 82, "70711": 82, "25882": 82, "5236": 82, "93gauss_quadratur": 82, "r554": 82, "chebyshev1_rul": 82, "r555": 82, "3927": 82, "7854": 82, "90097": 82, "62349": 82, "22252": 82, "084489": 82, "27433": 82, "42658": 82, "r556": 82, "chebyshev2_rul": 82, "jacobi": [82, 95, 107, 198, 202], "r557": 82, "7063": 82, "0973": 82, "33795": 82, "87174": 82, "5917": 82, "2093": 82, "050584": 82, "22169": 82, "39439": 82, "93jacobi_quadratur": 82, "r558": 82, "jacobi_rul": 82, "r559": 82, "gegenbauer_rul": 82, "lobatto": 82, "r560": 82, "3333": 82, "44721": 82, "16667": 82, "83333": 82, "93lobatto_rul": 82, "r561": 82, "page_888": 82, "intpoli": 82, "chin": 82, "al": [82, 118, 147, 195, 211, 214], "2015": [82, 221], "unit_cub": 82, "polytope_integr": 82, "eric": [82, 196], "jean": 82, "lasserr": 82, "sukumar": 82, "nonconvex": 82, "967": 82, "981": 82, "dilbert": 82, "engr": 82, "ucdavi": 82, "suku": 82, "max_degre": [82, 198], "689": [82, 99], "21875": 82, "octahedron": 82, "trivari": 82, "enable_automatic_int_sympif": 83, "enable_automatic_symbol": 83, "init_ipython_sess": 83, "argv": [83, 233], "init_python_sess": 83, "use_latex": [83, 182, 277], "quiet": 83, "str_printer": [83, 182], "latex_print": [83, 182], "pylab": 83, "stringifi": [83, 182], "sstrrepr": [83, 182, 202], "lexograph": [83, 182], "gui": [83, 182], "statu": 83, "\u03b8": [83, 112, 140, 221], "int_to_integ": 83, "decistmt": 83, "f401": 83, "0x12": 83, "num_column": [83, 182, 202, 218], "no_glob": [83, 182], "ip": [83, 156, 162, 182], "forecolor": [83, 182], "backcolor": [83, 182], "fontsiz": [83, 182, 202], "10pt": [83, 182, 202], "latex_mod": [83, 182], "print_builtin": [83, 182], "interactiveconsol": [83, 182], "preambl": [83, 182, 202], "handwritten": [83, 182], "ctan": [83, 182], "pkg": [83, 182], "dvi": [83, 182, 202], "foreground": [83, 182], "black": [83, 153, 164, 182, 202, 277], "white": [83, 182, 222], "documentclass": [83, 182, 202], "dpi": [83, 182], "u03b8": 83, "dvip": 83, "r562": 83, "r563": 83, "the_68_standard_colors_known_to_dvip": 83, "config": 83, "root_system": 84, "rootsystem": [84, 264], "cartantyp": 84, "cartan": 84, "subalgebra": 84, "adjoint": [84, 86, 91, 145, 149], "hyperplan": 84, "k_y": 84, "r564": 84, "r565": 84, "humphrei": 84, "add_as_root": 84, "root1": 84, "root2": 84, "add_simple_root": 84, "newroot": 84, "all_root": [84, 95, 198], "cartan_matrix": 84, "dynkin_diagram": 84, "dynkin": 84, "root_spac": 84, "simple_root": 84, "type_a": 84, "typea": [84, 264], "basic_root": 84, "iin": 84, "jth": [84, 221], "ijth": 84, "cartan_typ": 84, "highest_root": 84, "lie_algebra": 84, "positive_root": 84, "type_b": 84, "typeb": [84, 264], "b4": 84, "b3": [84, 118, 135, 178, 252], "type_c": 84, "typec": [84, 264], "c4": [84, 86, 88, 218], "type_d": 84, "d4": [84, 222], "dmension": 84, "type_": 84, "e6": 84, "type_f": 84, "typef": [84, 264], "f_4": [84, 114], "f4": [84, 188], "type_g": 84, "typeg": [84, 264], "weyl_group": 84, "weylgroup": [84, 264], "semisimpl": 84, "isometri": 84, "coxeter_diagram": 84, "undirect": [84, 240], "s_is_j": 84, "delete_doubl": 84, "element_ord": 84, "weylelt": 84, "group_nam": 84, "group_ord": 84, "192": 84, "matrix_form": 84, "cartantype_gener": [84, 264], "standard_cartan": [84, 264], "dynkindiagram": [84, 264], "cartanmatrix": [84, 264], "sopform": 85, "minterm": 85, "dontcar": 85, "simplified_pair": 85, "combo": 85, "outcom": [85, 171, 222], "posform": 85, "r566": 85, "quin": 85, "mccluskey_algorithm": 85, "r567": 85, "27t": 85, "care_term": 85, "r568": 85, "r569": 85, "anfform": 85, "truthvalu": 85, "anf": 85, "funciton": 85, "zhegalkin": 85, "r570": 85, "zhegalkin_polynomi": 85, "as_set": 85, "booleantru": 85, "doubt": [85, 118], "greet": 85, "booleanfals": 85, "universalset": 85, "nand": 85, "xnor": 85, "gate": [85, 148, 153, 155, 161, 162, 164], "perspect": [85, 95, 105, 173, 188, 235, 251, 255], "multiplex": 85, "disjunct": 85, "to_anf": 85, "oplu": [85, 152], "to_cnf": 85, "cnf": 85, "mccluskei": 85, "to_dnf": 85, "to_nnf": 85, "nnf": 85, "is_anf": 85, "is_cnf": 85, "is_dnf": 85, "is_nnf": 85, "gateinputcount": 85, "simplify_log": 85, "fewest": [85, 162], "conver": 85, "r571": 85, "bool_map": 85, "bool1": 85, "bool2": 85, "function1": 85, "function2": 85, "distribute_and_over_or": 85, "distribute_or_over_and": 85, "distribute_xor_over_and": 85, "eliminate_impl": 85, "truth_tabl": 85, "ibin": [85, 240], "integer_to_term": 85, "0001111011": [85, 240], "1101111000": [85, 240], "term_to_integ": 85, "bool_maxterm": 85, "maxterm": 85, "complement": [85, 88, 198, 221], "r572": 85, "canonical_normal_form": 85, "indexing_maxterm": 85, "bool_minterm": 85, "patter": 85, "r573": 85, "indexing_minterm": 85, "bool_monomi": 85, "enumar": 85, "anf_coeff": 85, "to_int_repr": 85, "all_model": 85, "unsatisfi": 85, "use_model": 85, "unsat": 85, "matrixbas": [86, 87, 88, 90, 191], "dirac": [86, 91, 103, 107, 108, 166, 202], "__abs__": [86, 193], "__add__": [86, 193, 197], "shapeerror": [86, 88, 91], "__len__": 86, "96": [86, 91, 222], "mismatch": 86, "matrix_multiply_elementwis": [86, 91], "applyfunc": [86, 87, 91, 126, 178, 223], "col": [86, 88, 91, 94, 105, 135, 191, 197, 274], "col_del": [86, 91, 274], "col_join": [86, 91, 120], "col_insert": [86, 274], "row_insert": [86, 274], "row_join": [86, 91, 120], "companion": [86, 88], "c0": [86, 88, 209, 218, 220], "sparsematrix": [86, 90, 91, 94, 203, 214], "diag": [86, 88, 91, 94, 135, 191, 228, 274], "immutablematrix": [86, 88, 90, 105, 178, 222, 247, 249, 274], "blockmatrix": [86, 88, 91], "sparsetool": [86, 94], "kth": [86, 95], "rowslist": [86, 191], "colslist": 86, "submatrix": [86, 91, 195, 222], "get_diag_block": [86, 88, 91], "decoupl": 86, "hstack": [86, 191], "is_anti_symmetr": 86, "is_diagon": [86, 91], "is_low": [86, 191], "is_upp": [86, 191], "matrixeigen": [86, 90], "is_diagonaliz": [86, 91], "is_hermitian": [86, 91], "is_lower_hessenberg": 86, "hessenberg": [86, 91], "superdiagon": 86, "is_upper_hessenberg": 86, "is_strongly_diagonally_domin": 86, "strongli": [86, 91, 191, 240], "m1": [86, 91, 95, 98, 99, 139, 147, 165, 167, 171, 215, 218, 223, 228], "subdiagon": [86, 91], "is_weakly_diagonally_domin": 86, "weakli": [86, 240], "vacuou": 86, "jordan_block": [86, 91], "eigenv": [86, 91, 118, 120, 135, 162, 272, 274], "rectangular": [86, 91, 210, 221, 250], "r574": 86, "jordan_matrix": [86, 218], "dotprodsimp": 86, "blowup": 86, "multiply_elementwis": [86, 91], "hadamard": [86, 88, 91, 152, 153, 164, 202], "elementwis": [86, 88, 91, 223], "300": [86, 91, 95, 98, 183, 188, 199, 255], "bmatrix": [86, 88, 91, 122, 130, 131, 132, 133, 178, 186, 215], "a_0": [86, 91, 205, 215, 218, 223, 278], "vdot": [86, 88, 91, 173], "alpha_0": 86, "alpha_1": [86, 95, 197], "alpha_": [86, 187], "permute_col": 86, "permute_row": 86, "mulsimp": 86, "rmultipli": 86, "__rmul__": 86, "rot90": 86, "anticlockwis": 86, "row_del": [86, 91, 274], "todod": 86, "tolist": [86, 223], "vec": [86, 91, 112, 135, 178, 187, 195, 252, 253, 255], "vech": 86, "check_symmetri": 86, "vstack": [86, 191], "wilkinson": 86, "w_": [86, 197], "wminu": 86, "wplu": 86, "r575": 86, "mathwork": [86, 103, 222, 274], "cleve": 86, "04": [86, 222], "r576": 86, "claredon": 86, "oxford": 86, "662": 86, "intm": 86, "undefinedkind": [86, 210], "tuplekind": [86, 210], "mutabledensematrix": [87, 191, 243], "densematrix": [87, 91], "ldldecomposit": [87, 91], "ldl": [87, 91], "choleski": [87, 91], "ludecomposit": [87, 88, 91, 274], "qrdecomposit": [87, 91], "as_immut": 87, "lower_triangular_solv": [87, 91], "upper_triangular_solv": [87, 91], "gauss_jordan_solv": [87, 91], "cholesky_solv": [87, 91], "diagonal_solv": [87, 91], "ldlsolv": [87, 91], "lusolv": [87, 91, 112, 114, 132, 136, 220, 274], "qrsolv": [87, 91], "pinv_solv": [87, 91], "permutedim": [88, 223, 224, 225], "arraytensorproduct": [88, 224], "from_index_summ": 88, "first_index": 88, "last_index": 88, "longrightarrow": 88, "matpow": [88, 202], "hadamard_product": 88, "aka": 88, "hadamardproduct": [88, 202], "hadamardpow": [88, 202], "ddot": [88, 91, 122, 131, 182, 185, 202, 278], "functionmatrix": 88, "lazili": [88, 208], "342923500": 88, "permutationmatrix": [88, 91], "matrixpermut": 88, "companionmatrix": 88, "matrixset": [88, 210], "submatric": [88, 91, 191, 222], "block_collaps": 88, "dat": [88, 240], "irregular": [88, 91], "ldudecomposit": 88, "ldu": 88, "2x2": [88, 94, 137, 191, 218], "noninvertiblematrixerror": [88, 274], "udldecomposit": 88, "lu": [88, 91, 191, 196], "udl": 88, "schur": 88, "penros": [88, 91], "pinv": [88, 91], "r577": 88, "schur_compl": 88, "blockdiagmatrix": [88, 91], "diag_block": 88, "alias": [89, 193], "bridg": [89, 101, 118, 241], "tension": 89, "matrixdetermin": 90, "matrixreduct": 90, "matrixsubspac": 90, "matrixcalculu": 90, "immutablesparsematrix": 90, "_doktocsr": [90, 94], "_csrtodok": [90, 94], "hermite_normal_form": [90, 92, 191, 194, 197], "gramschmidt": 91, "m2": [91, 95, 98, 99, 115, 139, 147, 165, 167, 171, 197, 215, 218, 223, 228], "126": [91, 95, 201], "150": [91, 105, 215], "v3": [91, 178, 181, 252], "glue": 91, "m3": [91, 147, 215, 223], "adj": 91, "qr": 91, "cheat": 91, "soln": 91, "gram": [91, 173, 175], "schmidt": 91, "out1": 91, "out2": 91, "1692": 91, "1551": 91, "423": 91, "6707": 91, "spot": [91, 136], "eigenvector": [91, 118, 162, 163, 187], "nullspac": [91, 191], "adjug": 91, "berkowitz": 91, "bareiss": 91, "cofactor_matrix": 91, "charpoli": [91, 191, 274], "_simplifi": 91, "purepoli": [91, 194, 198], "samuelson": 91, "minor_submatrix": 91, "iszerofunc": [91, 274], "barei": 91, "det_lu": 91, "functiontyp": 91, "_iszero": [91, 274], "_is_zero_after_expand_mul": 91, "unrecogn": 91, "nonsquarematrixerror": [91, 218], "i3": [91, 106, 118, 135, 228], "perman": 91, "ryser": 91, "450": 91, "r578": 91, "prof": 91, "ben": 91, "berkelei": 91, "bernd": 91, "ban275": 91, "r579": 91, "permanent_": 91, "r580": 91, "r581": 91, "0904": 91, "3251": 91, "echelon_form": [91, 274], "with_pivot": 91, "echelon": [91, 191, 221, 274], "elementary_col_op": 91, "kn": [91, 98, 99], "col1": 91, "col2": 91, "km": [91, 95, 109, 113, 120, 122, 125, 126, 130, 132, 135, 174], "elementary_row_op": 91, "row1": 91, "row2": 91, "is_echelon": [91, 274], "rref": [91, 191], "pivot": [91, 191, 274], "normalize_last": 91, "rref_matrix": [91, 191], "rref_pivot": [91, 191], "301369863013699": 91, "712328767123288": 91, "noramlize_last": 91, "subspac": [91, 197], "columnspac": [91, 191], "rowspac": [91, 191], "orthonorm": [91, 135, 163, 186, 250], "rankcheck": 91, "r582": 91, "93schmidt_process": 91, "eigen": [91, 144], "bidiagonal_decomposit": 91, "ubv": 91, "bidiagon": 91, "hang": [91, 122, 126, 218, 219], "bidiagn": 91, "r583": 91, "golub": 91, "van": [91, 95, 196], "loan": 91, "r584": 91, "vslobodi": 91, "household": 91, "r585": 91, "r586": 91, "reals_onli": 91, "throw": [91, 97, 118, 197, 215, 221], "error_when_incomplet": 91, "eig": [91, 118, 135], "matrixerror": 91, "got": [91, 189, 192, 195, 198, 201, 233, 234, 240, 241, 270, 272, 273], "eigenvect": [91, 118, 135, 162, 274], "tidi": 91, "artifact": 91, "ret": 91, "eigenspac": 91, "rag": 91, "a_3": 91, "diagonaliz": [91, 274], "is_indefinit": 91, "semidefinit": [91, 222], "plot3d": [91, 188], "is_positive_definit": 91, "is_positive_semidefinit": 91, "hire": [91, 98, 99, 103, 188, 205], "is_negative_definit": 91, "is_negative_semidefinit": 91, "defer": [91, 244], "r587": 91, "definiteness_of_a_matrix": 91, "r588": 91, "positivedefinitematrix": 91, "r589": 91, "amer": 91, "259": 91, "264": [91, 220], "r590": 91, "r591": 91, "r592": 91, "r593": 91, "r594": 91, "r595": 91, "r596": 91, "r597": 91, "r598": 91, "r599": 91, "r600": 91, "r601": 91, "jordan_form": 91, "calc_transform": 91, "left_eigenvect": 91, "singular_valu": 91, "condition_numb": 91, "hessian": 91, "wronskian": [91, 218], "simpfunc": 91, "permutebkwd": 91, "permutefwd": 91, "lucombin": 91, "defici": [91, 95, 221], "matrixi": 91, "ludecomposition_simpl": [91, 274], "ludecompositionff": 91, "pa": [91, 113, 115, 130, 133, 136], "r602": 91, "zhou": 91, "jeffrei": [91, 214], "frontier": [91, 210], "china": 91, "67": [91, 196], "2008": [91, 187, 196, 198, 202], "row_swap": 91, "compres": 91, "permute_backward": 91, "permute_forward": 91, "intiuit": 91, "lu_": 91, "_find_reasonable_pivot": 91, "lu_solv": [91, 191], "qr_solv": 91, "augument": 91, "167": 91, "158": [91, 99], "27261": 91, "30625": 91, "348": 91, "1914": 91, "6125": 91, "30589": 91, "198": 91, "1225": 91, "q_aug": 91, "r_aug": 91, "analytic_func": 91, "connected_compon": [91, 240], "connected_components_decomposit": 91, "relax": [91, 97], "3x1": 91, "1x3": 91, "conjugate_convent": 91, "dual": [91, 155, 160, 166], "anti_symmetr": 91, "speak": [91, 197, 253], "freevar": 91, "underdetermin": [91, 220, 221], "free_var_index": 91, "tau0": [91, 221, 222], "tau1": 91, "taus_zero": 91, "sol_uniqu": 91, "r603": 91, "gaussian_elimin": 91, "try_block_diag": 91, "inverse_g": [91, 274], "inverse_lu": [91, 274], "inverse_adj": [91, 274], "inverse_ch": 91, "inverse_ldl": 91, "inverse_qr": 91, "inv_mod": 91, "cof": 91, "inverse_block": 91, "blockwis": 91, "ntop": 91, "key2bound": 91, "key2ij": 91, "reciproc": [91, 222, 278], "fro": 91, "sing": 91, "spectral": 91, "rd": [91, 118, 202], "pseudoinvers": 91, "r604": 91, "penrose_pseudoinvers": 91, "arbitrary_matrix": 91, "wn_m": 91, "_w0_0": 91, "_w1_0": 91, "_w2_0": 91, "59": [91, 218], "r605": 91, "obtaining_all_solutions_of_a_linear_system": 91, "print_nonzero": [91, 240], "symb": [91, 202], "rank_decomposit": 91, "r606": 91, "rank_factor": 91, "r607": 91, "piziak": 91, "odel": 91, "magazin": 91, "193": [91, 103], "2307": 91, "2690882": 91, "singular_value_decomposit": 91, "condens": [91, 221], "orthogn": 91, "v_aug": 91, "u_aug": 91, "s_aug": 91, "gj": 91, "solve_least_squar": 91, "strongly_connected_compon": [91, 191, 240], "62": [91, 195], "strongly_connected_components_decomposit": 91, "rowstart": 91, "rowend": 91, "rowsep": 91, "colsep": 91, "strprinter": [91, 182, 265], "upper_hessenberg_decomposit": 91, "213": 91, "134": 91, "216": [91, 195], "hessenbergdecomposit": 91, "jordan_cel": 91, "varlist": 91, "r608": 91, "hessian_matrix": 91, "vlist": 91, "r609": 91, "casoratian": 91, "kernel": [91, 189, 195, 197, 220], "vanish": [91, 168, 195, 198, 201, 218, 247], "rsolve_hyp": [91, 220], "randmatrix": 91, "percent": [91, 221], "prng": 91, "percentag": [91, 95], "46": [91, 98, 173, 201, 220, 222], "list2numpi": 91, "dtype": [91, 96, 189, 191, 192, 193, 202, 241], "matrix2numpi": 91, "symarrai": 91, "ndarrai": [91, 222, 228, 234], "prefix_i1_i2_": 91, "_2": [91, 112, 177, 178, 187, 218], "a_0_0": 91, "a_0_1": 91, "a_0_2": 91, "a_1_0": 91, "a_1_1": 91, "a_1_2": 91, "a_0_0_0": 91, "a_0_0_1": 91, "a_0_1_0": 91, "a_0_1_1": 91, "a_0_2_0": 91, "a_0_2_1": 91, "a_1_0_0": 91, "a_1_0_1": 91, "a_1_1_0": 91, "a_1_1_1": 91, "a_1_2_0": 91, "a_1_2_1": 91, "rot_axis1": 91, "rot_axis2": 91, "rot_axis3": 91, "a2idx": 91, "normalform": [92, 191], "check_rank": [92, 191], "hnf": [92, 191, 197], "explos": [92, 191], "believ": [92, 95, 191], "dmdomainerror": [92, 191], "dmshapeerror": [92, 191], "r610": 92, "cohen": [92, 191, 196, 197], "mutablesparsematrix": 93, "csr": 94, "ja": 94, "ia": 94, "dok": 94, "1x1": [94, 222], "vert": [94, 183, 186, 255], "saw": [94, 192, 278], "dynam": [95, 102, 103, 105, 109, 111, 113, 114, 117, 120, 128, 130, 131, 132, 133, 134, 135, 136, 177, 178, 180, 181, 185, 186, 237, 238, 247], "eratosthen": 95, "_reset": [95, 198], "_list": 95, "extend_to_no": 95, "mobiusrang": 95, "primerang": [95, 262], "10th": 95, "totientrang": 95, "1e11": 95, "50000": 95, "primal": [95, 189], "1299709": 95, "r611": 95, "prime_number_theorem": 95, "table_of_": 95, "cf": [95, 195], "28x": 95, "2c_x_": 95, "2f_log_x": 95, "2c_and_li": 95, "r612": 95, "approximations_for_the_nth_prime_numb": 95, "r613": 95, "27_number": 95, "arr1": 95, "arr2": 95, "prevprim": [95, 262], "9th": 95, "nextprim": [95, 262], "occupi": [95, 168, 228], "conjectur": [95, 195], "twin": 95, "bertrand": 95, "brocard": 95, "primori": [95, 262], "r614": 95, "r615": 95, "utm": 95, "postul": 95, "r616": 95, "s_postul": 95, "primefactor": [95, 262], "argu": 95, "cycle_length": [95, 262], "nmax": 95, "brent": [95, 237], "floyd": 95, "cycle_detect": 95, "17737": 95, "20000": 95, "compositepi": [95, 262], "831": 95, "smoothness_p": [95, 262], "sm": [95, 118, 135, 189], "psm": 95, "govern": 95, "10431": 95, "annot": [95, 188, 202], "21477639576571": 95, "4410317": 95, "1787": 95, "4869863": 95, "2434931": 95, "multiplicity_in_factori": 95, "nfac": 95, "52818775009509558395695966887": 95, "is2pow": 95, "pollard_rho": [95, 262], "1234": [95, 215], "max_step": 95, "pollard": [95, 218], "leader": 95, "16843009": 95, "32767": 95, "4i": 95, "3i": 95, "2489": 95, "1482": 95, "285": [95, 220], "leadup": 95, "r617": 95, "crandal": 95, "carl": [95, 237], "pomer": [95, 237], "229": 95, "231": [95, 178], "pollard_pm1": [95, 262], "ilcm": 95, "likelihood": 95, "1009": 95, "igcd": [95, 190], "am": [95, 173, 202], "255": 95, "crack": 95, "617": 95, "1786": 95, "worst": [95, 198, 218], "scenario": [95, 222], "divisisor": 95, "realist": 95, "r618": 95, "236": 95, "r619": 95, "washington": 95, "2007": [95, 134, 237], "spring": [95, 110, 112, 113, 118, 123], "ent": 95, "node81": 95, "r620": 95, "toronto": 95, "yuvalf": 95, "use_ecm": 95, "65537": [95, 201], "1407633717262338957430697921446883": 95, "991": 95, "202916782076162456022877024859": 95, "4200": 95, "1764": 95, "toggl": [95, 188], "12345678910111213141516": 95, "2507191691": 95, "1231026625769": 95, "factorrat": [95, 262], "rat": 95, "987": 95, "10000000001": 95, "99009901": 95, "divisor_count": [95, 262], "tim": [95, 240], "stackoverflow": [95, 240, 243], "1010381": 95, "proper_divisor": [95, 262], "proper_divisor_count": [95, 262], "udivisor": [95, 262], "udivisor_count": [95, 262], "r621": 95, "unitary_divisor": 95, "r622": 95, "unitarydivisor": 95, "r623": 95, "unitarydivisorfunct": 95, "antidivisor": [95, 262], "r624": 95, "margin": [95, 105, 188, 222], "antidivisor_count": [95, 262], "a066272": 95, "a066272a": 95, "r625": 95, "r626": 95, "27s_totient_funct": 95, "r627": 95, "totientfunct": 95, "r628": 95, "carmichael_funct": 95, "r629": 95, "carmichaelfunct": 95, "sigma_k": 95, "m_i": [95, 187, 195], "m_ik": 95, "r630": 95, "divisor_funct": 95, "udivisor_sigma": [95, 262], "47450": 95, "152": 95, "r631": 95, "core_t": 95, "core_2": 95, "squarefre": [95, 197], "cubefre": 95, "9424": 95, "1178": 95, "379238": 95, "square_factor": 95, "r632": 95, "free_integ": 95, "squarefree_cor": 95, "primenu": [95, 262], "r633": 95, "primeomega": [95, 262], "r634": 95, "mersenne_prime_expon": [95, 262], "mersenn": 95, "4423": 95, "r635": 95, "perfectnumb": 95, "r636": 95, "perfect_numb": 95, "is_mersenne_prim": [95, 262], "r637": 95, "mersenneprim": 95, "abund": [95, 262], "is_abund": [95, 262], "r638": 95, "abundantnumb": 95, "is_defici": [95, 262], "r639": 95, "deficientnumb": 95, "is_amic": [95, 262], "amic": 95, "220": [95, 198], "r640": 95, "amicable_numb": 95, "symmetric_residu": [95, 262], "v_i": [95, 197, 220], "65": [95, 105, 195, 222], "639985": [95, 195], "912285": [95, 195], "954": 95, "gf_crt": [95, 195], "solve_congru": [95, 195, 262], "programm": [95, 202], "galoistool": [95, 195], "crt1": [95, 262], "4536": 95, "252": 95, "756": 95, "crt2": [95, 262], "remainder_modulus_pair": 95, "mi": [95, 202], "k1": [95, 135, 166, 192, 193, 195], "k2": [95, 135, 192], "c_kn": 95, "binomial_coefficients_list": [95, 262], "multinomial_coeffici": [95, 262], "k_m": 95, "k_i": [95, 195, 212], "yann": 95, "laigl": 95, "chapui": 95, "permiss": [95, 187], "multinomial_coefficients_iter": [95, 262], "_tupl": 95, "m53": 95, "partitions_": 95, "npartit": [95, 262], "hardi": 95, "rademach": [95, 222], "r641": 95, "1958": [95, 187], "partitionfunctionp": 95, "is_euler_pseudoprim": [95, 262], "pseudoprim": 95, "r642": 95, "euler_pseudoprim": 95, "prep": [95, 218, 219], "r643": 95, "mersenneforum": 95, "showpost": 95, "110896": 95, "mr": [95, 262], "miller": 95, "rabin": 95, "wit": 95, "1373651": 95, "479001599": 95, "r644": 95, "135": 95, "138": 95, "93rabin_primality_test": 95, "deterministic_vari": 95, "is_lucas_prp": [95, 262], "selfridg": 95, "377": 95, "1159": 95, "1829": 95, "3827": 95, "5459": 95, "5777": 95, "9071": 95, "9179": 95, "bailli": 95, "wagstaff": 95, "1980": [95, 240], "mpq": [95, 192, 194], "lucaspseudoprim": 95, "a217120": 95, "lucas_pseudoprim": 95, "is_strong_lucas_prp": [95, 262], "bpsw": 95, "10877": 95, "16109": 95, "18971": 95, "a217255": 95, "psw_primality_test": 95, "is_extra_strong_lucas_prp": [95, 262], "grantham": 95, "mo": [95, 135, 202], "jone": [95, 140], "preprint": 95, "a217719": 95, "perl": 95, "counterexampl": [95, 278], "989": 95, "3239": 95, "jon": 95, "mcom": 95, "234": 95, "01197": 95, "1e3": 95, "1e23": [95, 243], "near_int": 95, "strong_pseudoprim": 95, "is_gaussian_prim": [95, 262], "r645": 95, "gaussian_prim": 95, "residue_ntheori": 95, "n_order": [95, 262], "cong": [95, 195], "primitive_root": [95, 197, 262], "r646": 95, "stein": [95, 218], "r647": 95, "hackman": 95, "sqrt_mod": [95, 262], "sqrt_mod_it": [95, 262], "quadratic_residu": [95, 262], "nthroot_mod": [95, 262], "109": [95, 196, 215], "is_nthpow_residu": [95, 262], "r648": 95, "is_quad_residu": [95, 262], "legendre_symbol": [95, 262], "genfrac": 95, "nonresidu": 95, "alpha_2": [95, 197], "alpha_k": 95, "discrete_log": [95, 262], "prime_ord": 95, "giant": [95, 221], "pohlig": 95, "r649": 95, "discretelogarithm": 95, "r650": 95, "cryptographi": [95, 257, 264], "menez": 95, "vanston": 95, "continued_fract": [95, 262], "continued_fraction_period": [95, 262], "continued_fraction_reduc": [95, 262], "continued_fraction_converg": [95, 262], "continued_fraction_iter": [95, 262], "106": 95, "103993": 95, "33102": 95, "104348": 95, "33215": 95, "208341": 95, "66317": 95, "292": 95, "r651": 95, "discrimin": [95, 193, 194, 195, 197, 198], "r652": 95, "periodic_continued_fract": 95, "r653": 95, "rosen": 95, "379": [95, 198], "381": 95, "januari": 95, "1992": [95, 196, 220], "233": [95, 196, 218], "718281835": 95, "287": 95, "count_digit": [95, 262], "1111339": 95, "0xfa": 95, "c77": 95, "is_palindrom": [95, 240, 262], "palindrom": 95, "0o121": 95, "oct": 95, "0o171": 95, "fermion": [95, 168], "r654": 95, "b6bius_funct": 95, "r655": 95, "thoma": [95, 134], "koshi": 95, "egyptian_fract": [95, 262], "greedi": [95, 195, 211, 214], "egyptian": 95, "r656": 95, "jewett": 95, "takenouchi": 95, "3192": 95, "1118": 95, "2580": 95, "sylvest": [95, 195], "r657": 95, "seldom": 95, "blow": 95, "doubli": 95, "exhibit": [95, 187, 197, 211], "singli": 95, "tendenc": 95, "r658": 95, "1921": 95, "golumb": 95, "1962": 95, "propos": 95, "bleicher": 95, "1972": 95, "r659": 95, "420": [95, 215], "140": 95, "574": 95, "2788": 95, "6460": 95, "11590": 95, "33062": 95, "113820": 95, "greedy_algorithm_for_egyptian_fract": 95, "ic": [95, 218], "uci": 95, "eppstein": 95, "numth": 95, "egypt": 95, "ami": 95, "ektf": 95, "hu": 95, "finalpdf": 95, "ami_42_from129to134": 95, "bbp_pi": 95, "pi_hex_digit": [95, 262], "hex": 95, "3243f6a8885a30": 95, "324": [95, 196], "r660": 95, "numberworld": 95, "subexponenti": 95, "comfort": [95, 96], "15154262241479": 95, "15423094826093": 95, "799333555511111": 95, "809709509409109": 95, "888888877777777": 95, "914148152112161": 95, "factoris": [95, 192, 193, 218], "max_curv": 95, "lenstra": 95, "repeatedli": [95, 106, 234], "ecm_one_factor": 95, "pseudorandom": [95, 240], "25645121643901801": 95, "5394769": 95, "4753701529": 95, "9804659461513846513": 95, "4641991": 95, "2112166839943": 95, "7060005655815754299976961394452809": 95, "6988699669998001": 95, "1010203040506070809": 95, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 95, "2709077133180915240135586837960864768806330782747": 95, "248": 95, "prime_bound": 95, "error_term": 95, "siq": 95, "modn": 95, "mulipl": 95, "r661": 95, "semanticscholar": 95, "5c52": 95, "8a975c1405bd35c65993abf5a4edb667c1db": 95, "r662": 95, "rieselprim": 95, "ziki": 95, "initializing_quadratic_siev": 95, "5915587277": 95, "3267000013": 95, "facilit": [96, 128, 139, 184, 233], "000507214304613640": 96, "microsecond": 96, "000507214304614": 96, "hundr": [96, 272], "nanosecond": 96, "84147098": [96, 241, 267], "84119981": 96, "84092844": 96, "05426074": 96, "05433146": 96, "05440211": 96, "nano": 96, "manufactur": 96, "asnumpi": 96, "compliat": 96, "jnp": 96, "asarrai": 96, "84147096": 96, "8411998": 96, "05426079": 96, "05433151": 96, "autowrap": [96, 227, 235, 239, 259, 265], "implemented_funct": [96, 234, 239, 241], "effort": [96, 193, 195], "50u": 96, "1u": 96, "10n": 96, "sympy_pars": 97, "local_dict": 97, "lambda_not": 97, "repeated_decim": 97, "auto_numb": 97, "factorial_not": 97, "global_dict": 97, "standard_transform": 97, "implicit_multiplication_appl": 97, "implicit_appl": 97, "implicit_multipl": 97, "convert_equals_sign": 97, "function_exponenti": 97, "stringify_expr": 97, "eval_expr": 97, "name_dict": 97, "fullform": 97, "setdelai": 97, "datatyp": [97, 193, 202, 235], "split_symbol": 97, "split_symbols_custom": 97, "_token_splitt": 97, "can_split": 97, "unsplitt": 97, "10sin": 97, "3xyz": 97, "2111": 97, "latex2sympi": 97, "typograph": 97, "stricter": 97, "liber": [97, 109, 272], "618": 97, "latexparsingerror": 97, "sym_expr": 97, "sympyexpress": 97, "source_cod": 97, "return_expr": 97, "definiton": 97, "src2": 97, "convert_to_expr": 97, "convert_to_c": 97, "src3": 97, "convert_to_python": 97, "src_code": 97, "filenam": [97, 202, 233, 234, 235, 243], "convert_to_fortran": 97, "continuum_mechan": [98, 99, 101], "elastic_modulu": 98, "second_mo": 98, "base_char": 98, "withstand": [98, 99], "character": [98, 99, 183, 186, 209, 222, 228, 255], "profil": 98, "shear": [98, 99], "downward": [98, 99, 101, 197], "apply_load": [98, 99, 101], "bc_deflect": [98, 99], "boundary_condit": 98, "solve_for_reaction_load": [98, 99], "shear_forc": [98, 99], "bending_mo": [98, 99], "reaction": [98, 99, 101], "upward": [98, 197], "reaction_load": [98, 99, 101], "applied_load": 98, "nm": [98, 99, 166, 223], "pointload": [98, 99], "ramp": [98, 99, 104], "parabol": 98, "apply_support": [98, 101], "loc": 98, "freedom": [98, 112, 113, 119, 122, 128, 222], "roller": [98, 99, 101], "r_10": 98, "r_30": 98, "4000": [98, 99], "bc_slope": [98, 99], "cross_sect": 98, "elast": [98, 99], "12000": 98, "draw": [98, 148, 202, 222, 264], "pictori": 98, "positv": 98, "ild_moment": 98, "ild_react": 98, "ild_shear": 98, "axial": [98, 137], "hing": [98, 99, 129], "cantilev": [98, 99], "inertia": [98, 99, 108, 109, 110, 117, 118, 120, 121, 123, 125, 126, 127, 128, 135, 178, 184, 185, 186, 197], "666666666666667": [98, 99], "max_bmoment": 98, "max_deflect": 98, "max_shear_forc": 98, "plot_bending_mo": [98, 99], "gpa": 98, "400": [98, 188, 198], "13750": 98, "31250": 98, "plot_deflect": [98, 99], "00138541666666667": 98, "86458333333333e": 98, "04166666666667e": 98, "20833333333333e": 98, "51041666666667e": 98, "plot_ild_mo": 98, "solve_for_ild_mo": 98, "1kn": 98, "r_0": 98, "r_8": 98, "solve_for_ild_react": 98, "plot_ild_react": 98, "5kn": 98, "r_7": 98, "plotgrid": [98, 264], "plot_ild_shear": 98, "solve_for_ild_shear": 98, "plot_loading_result": [98, 99], "subplot": [98, 188], "plot_shear_forc": [98, 99], "plot_shear_stress": 98, "stress": 98, "6875": 98, "2500": 98, "15625": [98, 175], "plot_slop": [98, 99], "59375e": 98, "125e": 98, "08333333333333e": 98, "0001953125": 98, "point_cflexur": 98, "overhang": [98, 99], "10kn": 98, "20kn": [98, 99], "3kn": 98, "remove_load": [98, 101, 110], "shear_stress": 98, "beam3d": [98, 100], "shear_modulu": 98, "apply_moment_load": 98, "solve_slope_deflect": 98, "r663": 98, "home": [98, 197, 215, 222, 233], "aau": 98, "jc": 98, "femtesemest": 98, "beams3d": 98, "angular_deflect": 98, "depict": [98, 183, 221, 255], "angular": [98, 107, 110, 112, 115, 120, 121, 122, 123, 125, 127, 128, 129, 132, 135, 137, 141, 142, 144, 147, 165, 169, 178, 181, 187], "axial_forc": 98, "axial_stress": 98, "load_vector": 98, "max_bending_mo": 98, "16000": 98, "495": 98, "10793": 98, "6400": 98, "301": [98, 212, 215], "560": 98, "2400": 98, "moment_load_vector": 98, "40000": 98, "4013": 98, "90300": 98, "1520": 98, "903": 98, "1600": [98, 99], "172": 98, "polar_mo": 98, "i1": [98, 106, 118, 135, 228], "1350": 98, "solve_for_tors": 98, "torsion": 98, "torqu": [98, 110, 113, 117, 123, 130, 131, 135], "torsional_mo": 98, "_________________": 99, "________________": [99, 218], "_______________v": 99, "_______________": 99, "equilibrium": [99, 101, 120, 132], "20e9": 99, "25e": 99, "______________________________________________": 99, "_______________________________________________": 99, "r\u2081": 99, "r\u2082": 99, "______________________": 99, "________________________": 99, "8kn": 99, "_____________": 99, "1m": 99, "3m": 99, "2m": 99, "5m": [99, 237], "679": 99, "12kn": 99, "________________________________": 99, "____________________________________________________": 99, "o____________________________________________________": 99, "4m": 99, "concentr": [99, 222], "_____________________________________": 99, "m\u2081": 99, "m\u2082": 99, "connector": 99, "_____________________": 99, "_______________________": 99, "_____________________o_______________________": 99, "oooo": [99, 240], "r\u2083": 99, "_______i_______": 99, "flexur": 99, "rigid": [99, 101, 110, 113, 115, 118, 120, 123, 128, 135, 178, 185], "____________": 99, "____________o________________________": 99, "a\u2081": [99, 278], "a\u2082": [99, 278], "assembli": [101, 120], "joint": [101, 121, 123, 128], "add_nod": 101, "node_1": 101, "node_2": 101, "node_3": 101, "node_4": 101, "add_memb": 101, "member_1": 101, "member_2": 101, "member_3": 101, "member_4": 101, "member_5": 101, "270": 101, "360": 101, "change_member_label": 101, "new_label": 101, "change_node_label": 101, "bc_new": 101, "internal_forc": 101, "member_label": 101, "node_label": 101, "node_posit": 101, "remove_memb": 101, "remove_nod": 101, "remove_support": 101, "unstabl": 101, "revolv": 101, "tensil": 101, "r_node_1_x": 101, "r_node_1_i": 101, "r_node_2_i": 101, "lti": [102, 103, 104], "transferfunct": [102, 103, 104, 105], "interconnect": [102, 105, 112], "mimo": [102, 105], "transferfunctionmatrix": [102, 104, 105], "mimoseri": [102, 104, 105], "mimoparallel": [102, 104, 105], "mimofeedback": [102, 104, 105], "control_plot": [103, 104], "pole_zero_plot": [103, 104], "pole_color": 103, "blue": [103, 129, 188, 202], "pole_markers": 103, "zero_color": 103, "orang": 103, "zero_markers": 103, "show_ax": 103, "marker": [103, 188], "sisolineartimeinvari": [103, 105], "markers": 103, "tf1": [103, 105], "pole_zero_numerical_data": [103, 104], "r664": 103, "93zero_plot": 103, "siso": [103, 105], "8660254j": 103, "bode_plot": [103, 104], "initial_exp": 103, "final_exp": 103, "freq_unit": 103, "phase_unit": 103, "semilog": 103, "hz": 103, "hertz": 103, "bode_magnitude_plot": [103, 104], "bode_phase_plot": [103, 104], "bode_magnitude_numerical_data": [103, 104], "5148378120533502e": 103, "68437": 103, "36188804005": 103, "020599914256786": 103, "0205999155219505": 103, "4117304087953": 103, "00000000260573": 103, "bode_phase_numerical_data": [103, 104], "4472354033813751e": 103, "035581932165858e": 103, "47577": 103, "3248186011": 103, "67884": 103, "09326036123": 103, "5000000000291665e": 103, "6180885085e": 103, "08895483066e": 103, "1415085799262523": 103, "14155265358979": 103, "impulse_response_plot": [103, 104], "lower_limit": [103, 268], "upper_limit": [103, 268], "step_response_plot": [103, 104], "ramp_response_plot": [103, 104], "r665": 103, "impulse_response_numerical_data": [103, 104], "nb_of_point": [103, 188], "lineover1drangeseri": [103, 188], "amplitud": [103, 138, 142], "06616480200395854": 103, "854500743565858": 103, "9999999799999999": 103, "7042848373025861": 103, "170748906965121e": 103, "1901263495547205e": 103, "r666": 103, "step_response_numerical_data": [103, 104], "025413462339411542": 103, "0484508722725343": 103, "670250533855183": 103, "844291913708725": 103, "023844582399907256": 103, "042894276802320226": 103, "828770759094287e": 103, "456457160755703e": 103, "mx": [103, 148, 155, 209], "r667": 103, "ramp_funct": 103, "ramp_response_numerical_data": [103, 104], "12166980856813935": 103, "861246379582118": 103, "4504508011325967e": 103, "006046440489058766": 103, "12499999999568202": 103, "12499999999661349": 103, "bode": 104, "impuls": [104, 105], "den": [105, 193, 214, 218], "superscript": [105, 202], "tf2": 105, "tf3": 105, "tf4": 105, "tf5": 105, "tf6": 105, "500000000000000": 105, "tf7": 105, "tf8": 105, "tf9": 105, "tf10": 105, "tf11": 105, "tf12": 105, "r668": 105, "transfer_funct": 105, "r669": 105, "dc_gain": 105, "dc": [105, 131], "from_rational_express": 105, "zerodivisionerror": [105, 193, 231, 241], "complexinfin": 105, "tf": [105, 241], "is_biprop": 105, "is_prop": 105, "is_stabl": 105, "is_strictly_prop": 105, "sys1": 105, "sys2": 105, "feedforward": 105, "fed": 105, "sit": [105, 186], "plant": 105, "compulsori": 105, "tf_1": 105, "tf_2": 105, "tf_3": 105, "tf_4": 105, "tfm_1": 105, "num_input": 105, "num_output": 105, "tfm_2": 105, "tf_5": 105, "tf_6": 105, "tf_7": 105, "tf_8": 105, "tfm_3": 105, "tfm_4": 105, "tfm_5": 105, "tfm_6": 105, "tf_9": 105, "tf_10": 105, "tfm_7": 105, "tfm_8": 105, "tfm_9": 105, "tfm_10": 105, "tfm_11": 105, "tfm_12": 105, "elem_pol": 105, "elem_zero": 105, "from_matrix": [105, 191], "m_tf": 105, "tfm": 105, "tfm1": 105, "tfm2": 105, "g4": 105, "tfm3": 105, "mimolineartimeinvari": 105, "mat_a": 105, "mat_b": 105, "mat_c": 105, "tfm_a": 105, "tfm_b": 105, "tfm_c": 105, "expr_1": 105, "expr_2": 105, "expr_3": 105, "expr_4": 105, "plant_mat": 105, "controller_mat": 105, "neg_feedback": 105, "hep": 106, "gamma_matric": [106, 108], "gammamatrix": 106, "lorentzindex": 106, "gammamatrixhead": 106, "extract_type_ten": 106, "gamma_trac": 106, "i0": [106, 140, 228], "i2": [106, 118, 135, 228], "i4": [106, 228], "i5": 106, "kahane_simplifi": 106, "spinor": 106, "ta": [106, 211], "tb": [106, 211, 233], "tc": [106, 193, 198, 211], "joseph": [106, 196], "kahan": 106, "octob": 106, "1968": 106, "simplify_gpgp": 106, "e_nl": [107, 169, 263], "hartre": 107, "helium": 107, "2209": 107, "e_nl_dirac": [107, 263], "spin_up": 107, "035999037000": 107, "relativist": 107, "momentum": [107, 115, 118, 128, 135, 146, 147, 155, 165, 169, 187, 228], "light": [107, 140, 173, 182, 189], "035999037": 107, "1012": 107, "3627": 107, "500006656595360": 107, "125002080189006": 107, "125000416028342": 107, "0555562951740285": 107, "0555558020932949": 107, "0555556377366884": 107, "psi_nlm": [107, 263], "wave": [107, 138, 139, 140, 205, 263], "psi_": [107, 144], "nlm": 107, "radial": [107, 122, 169], "nl": [107, 169], "magnet": [107, 139, 183, 255], "azimuth": 107, "wf": [107, 120], "abs_sqrd": 107, "silver": 107, "94": [107, 196], "141": 107, "4418": 107, "mdft": [108, 263], "mgamma": [108, 263], "gamma_5": 108, "gamma_0": 108, "gamma_3": 108, "r670": 108, "msigma": [108, 263], "pauli": [108, 263], "sigma_i": [108, 222], "r671": 108, "pauli_matric": [108, 143], "pat_matrix": [108, 263], "unansw": [109, 177], "kane": [109, 112, 118, 124, 128, 129, 134, 135, 177, 178, 247], "q1d": [109, 118, 120, 122, 125, 126, 127, 130, 131, 132, 133, 177, 182, 186], "q2d": [109, 118, 120, 122, 125, 126, 127, 130, 131, 181, 182], "q3d": [109, 125, 126, 127, 130], "kinemat": [109, 112, 113, 117, 118, 120, 121, 122, 123, 125, 127, 129, 130, 132, 133, 135, 136, 178, 184, 186], "dyad": [109, 135, 250], "mprint": [109, 125, 126, 127, 128, 130], "mpprint": [109, 128, 130], "mlatex": [109, 128], "sub_dict": [109, 111, 120], "msub": [109, 128, 132], "cleaner": [109, 135, 218], "gsl": [109, 235], "lsoda": 109, "penalti": 109, "central_inertia": [110, 115, 121, 123], "possess": [110, 133, 228], "name_of_bodi": 110, "ixx": [110, 115, 178], "body_inertia": 110, "ang_vel_in": [110, 112, 118, 125, 126, 135, 178, 185], "set_ang_vel": [110, 115, 118, 120, 125, 126, 132, 133, 135, 136, 178, 180, 181, 185], "apply_forc": [110, 112, 123], "reaction_bodi": [110, 112, 123], "reaction_point": 110, "oppposit": 110, "desri": 110, "force1": 110, "b_masscent": 110, "b_frame": [110, 112], "newtonion": [110, 112], "spring_forc": 110, "n_frame": 110, "apply_torqu": [110, 123], "torquess": 110, "torque1": 110, "b1_frame": 110, "b2_frame": 110, "clear_load": 110, "kinetic_energi": [110, 128, 133, 135], "kinet": [110, 113, 115, 128], "inerti": [110, 112, 113, 115, 120, 122, 125, 130, 131, 133, 135], "set_vel": [110, 113, 115, 118, 120, 122, 125, 126, 127, 130, 131, 132, 133, 135, 136, 181, 185], "b_ixx": 110, "b_mass": [110, 112], "masscenter_vel": [110, 112], "parallel_axi": [110, 115], "to_matrix": [110, 112, 177, 178, 186, 191, 197, 247, 249, 251], "a_ixx": 110, "a_mass": 110, "a_ixi": 110, "a_izx": 110, "a_iyi": 110, "a_iyz": 110, "a_izz": 110, "smart": [111, 132, 209, 215, 218], "sub1": [111, 202], "sub2": [111, 202], "reference_fram": [111, 178], "interfram": [112, 181], "_generate_coordin": 112, "_generate_spe": 112, "_orient_fram": 112, "_set_angular_veloc": 112, "_set_linear_veloc": 112, "kde": [112, 121, 122, 129, 132], "revolut": 112, "\u03c9": 112, "pc": [112, 199], "p_masscent": 112, "c_masscent": 112, "p_frame": 112, "c_frame": 112, "q_pc": 112, "u_pc": 112, "pendulum": [112, 117, 119, 123, 128, 132, 136, 185], "upper_bob": 112, "lower_bob": 112, "ceiling_joint": 112, "pendulum_joint": 112, "q_p1": 112, "q_p2": 112, "u_fram": 112, "l_frame": 112, "u_p1": 112, "u_p2": 112, "vel": [112, 118, 120, 122, 126, 129, 135, 181, 185, 253], "prismat": 112, "slide": 112, "wall": [112, 123], "part1": 112, "part2": 112, "j1": [112, 121, 123, 147, 165], "j2": [112, 121, 123, 147, 165], "q_j1": 112, "w_frame": 112, "q_j2": 112, "p1_frame": 112, "u_j1": 112, "rotation_coordin": 112, "translation_coordin": 112, "rotation_spe": 112, "translation_spe": 112, "cylindr": [112, 188, 253], "q0_": 112, "q1_": 112, "u0_": 112, "u1_": 112, "q0_pc": 112, "q1_pc": 112, "u0_pc": 112, "u1_pc": 112, "tube": 112, "floor_joint": 112, "flag_joint": 112, "q0_c1": 112, "q0_c2": 112, "q1_c1": 112, "floor_fram": 112, "q1_c2": 112, "tube_fram": 112, "flag_fram": 112, "u0_c1": 112, "u0_c2": 112, "u1_c1": 112, "planar_coordin": 112, "planar_spe": 112, "q2_": 112, "u2_": 112, "nonparallel": 112, "q_1": [112, 121, 122, 123, 132, 148, 185, 198, 215], "q_2": [112, 121, 122, 123, 132, 185], "hat": [112, 129, 133, 177, 178, 182, 183, 185, 186, 250, 251, 253, 255, 256], "q_0": [112, 148, 215], "rotation_axi": 112, "planar_vector": 112, "q2_pc": 112, "u2_pc": 112, "parent_vector": 112, "plane_vector": 112, "g_frame": 112, "damper": [112, 113, 118, 123], "form_eom": [112, 123, 129], "mass_matrix_ful": [112, 113, 118, 123, 130, 131], "forcing_ful": [112, 113, 118, 123, 130, 131], "mass_matrix": [112, 113, 117, 120, 125, 126, 130, 131, 136], "lagrangesmethod": [112, 122, 127, 128, 131, 132], "qd": [112, 113, 120, 130, 181], "inv_method": [112, 113], "solveabl": 112, "q_ind": [113, 114, 118, 120, 121, 122, 125, 126, 130, 132, 135], "u_ind": [113, 114, 118, 120, 121, 122, 125, 126, 130, 132, 135], "kd_eq": [113, 118, 120, 121, 122, 125, 126, 132, 135], "q_depend": [113, 120, 121, 122, 130, 135], "configuration_constraint": [113, 120, 121, 122, 130], "u_depend": [113, 120, 121, 122, 130, 135], "velocity_constraint": [113, 120, 121, 122, 130, 135], "acceleration_constraint": 113, "u_auxiliari": [113, 126, 130, 135], "forcelist": [113, 118, 121, 122, 125, 126, 131, 132, 135], "levinson": [113, 134, 178, 247], "udot": [113, 120], "ud": [113, 130], "kd": [113, 120, 125, 126, 130], "fl": [113, 120, 130, 131, 135, 196], "bl": [113, 120, 130, 135], "frstar": [113, 118, 120, 122, 125, 126, 130, 132, 135], "kanes_equ": [113, 118, 120, 122, 125, 126, 130, 132, 135], "a_and_b": [113, 114, 122], "auxiliary_eq": [113, 126], "constrain": [113, 122, 131, 135], "kindiffdict": [113, 120, 125, 126, 130, 135], "new_method": [113, 122], "intens": [113, 114, 137, 140], "perm_mat": [113, 114, 132], "op_point": [113, 114, 122, 132], "beforehand": [113, 235], "to_linear": [113, 132], "recalcul": [113, 198], "hol_coneq": [113, 122, 131], "nonhol_coneq": [113, 122, 131], "nonconserv": 113, "form_lagranges_equ": [113, 122, 127, 131, 132], "qdot": [113, 120, 121, 181], "qdoubledot": 113, "lam": [113, 114, 136], "lagranges_equ": 113, "qd_ind": [113, 132], "q_dep": [113, 130, 132], "qd_dep": [113, 132], "solve_multipli": [113, 122], "sol_typ": 113, "array_lik": 113, "f_3": [114, 117, 136, 218], "f_c": [114, 122], "f_v": [114, 122], "f_a": 114, "q_d": 114, "u_i": [114, 132, 185, 195], "u_d": [114, 135], "q_op": [114, 122], "u_op": [114, 122], "qd_op": 114, "ud_op": [114, 122], "spatial": [115, 142, 178, 202], "init_vprint": [115, 116, 133, 136, 178, 180, 181, 184, 185, 186], "inertia_tupl": 115, "mv": 115, "iyi": [115, 178], "izz": [115, 178], "ixi": [115, 178], "iyz": [115, 178], "izx": 115, "yy": [115, 186, 218], "yz": [115, 186, 188], "zx": [115, 186], "pos_vec": 115, "px": [115, 158, 163, 228], "body1": 115, "body2": 115, "body3": 115, "h2": 115, "multibodi": [115, 118, 128, 134, 135, 136, 185], "vprint": [116, 177, 181, 184, 186], "vpprint": [116, 177, 184, 186], "vlatex": [116, 177, 178, 184, 186], "coord_stat": 117, "right_hand_sid": 117, "coordinate_deriv": [117, 136], "alg_con": [117, 136], "output_eqn": 117, "coord_idx": [117, 136], "speed_idx": [117, 136], "m_3": [117, 136, 147, 187], "exogen": [117, 136], "ref_fram": 117, "graviti": [117, 118, 122, 123, 125, 127, 135, 183, 255], "theta_dot": 117, "kin_explicit_rh": [117, 136], "dyn_implicit_mat": [117, 136], "dyn_implicit_rh": [117, 136], "symsystem": 117, "dae": [117, 136], "adjust": [117, 205, 209], "comb_implicit_mat": [117, 136], "comb_implicit_rh": [117, 136], "kinema": 117, "comb_explicit_rh": [117, 136], "compute_explicit_form": 117, "awhil": 117, "constant_symbol": 117, "dynamic_symbol": 117, "motiongenesi": [118, 135], "double_pendulum": 118, "motionvari": [118, 135], "newtonian": [118, 135], "simprot": [118, 135], "n_a": 118, "n_b": 118, "w_a_n": 118, "w_b_n": [118, 135], "p_o_p": 118, "p_p_r": 118, "v_o_n": [118, 135], "v2pt": [118, 135], "v_p_n": 118, "v_r_n": 118, "force_p": 118, "force_r": 118, "tfinal": 118, "integstp": 118, "some_filenam": 118, "parse_autolev": 118, "sympy_cod": 118, "include_numer": 118, "include_pydi": 118, "pydi": [118, 135, 178], "u1d": [118, 120, 122, 125, 126, 130], "u2d": [118, 120, 122, 125, 126, 130], "frame_n": 118, "frame_a": 118, "frame_b": 118, "point_o": 118, "particle_p": 118, "p_pt": 118, "particle_r": 118, "r_pt": 118, "set_po": [118, 181, 185], "v2pt_theori": [118, 120, 125, 126, 127, 132, 133, 135, 136, 181, 185], "initial_condit": [118, 135], "overwritten": 118, "e2row": 118, "eigvec": [118, 135], "eigenvec": 118, "deg2rad": 118, "0174533": 118, "wo": 118, "coef": [118, 135], "u3": [118, 120, 121, 123, 125, 126, 130, 135, 178, 181, 185], "strai": 118, "reassign": 118, "inher": [118, 241, 270], "rhs_x": 118, "i_b_bo": 118, "body_b": 118, "body_b_f": 118, "b_cm": 118, "b_f": 118, "scene": [118, 214, 270], "i_c_d": 118, "i_p_q": 118, "i_b_o": 118, "e3": [118, 209, 218], "i_p_o": 118, "e4": [118, 209], "p_so_o": 118, "nicheck": 118, "plug": [118, 173], "hurdl": 118, "gitlab": 118, "repo": 118, "ch4": 118, "ch5": 118, "ch6": 118, "cst": 118, "grammar": [118, 214], "roll": [119, 120, 128, 185, 222], "disc": [119, 128, 185], "bicycl": [119, 128, 134], "nonminim": [119, 128, 132], "linkag": [119, 128], "meijaard2007": [120, 134], "steer": [120, 134], "purposefulli": 120, "mechanics_print": [120, 121, 125, 126, 127, 128, 129, 130, 131], "yaw": 120, "ang": 120, "rear": 120, "wheel": 120, "pitch": 120, "q4": [120, 130, 180], "q5": [120, 180], "q4d": [120, 130], "q5d": 120, "u4": [120, 126, 130, 135], "u5": [120, 126], "u6": [120, 126], "u3d": [120, 125, 126], "u4d": 120, "u5d": 120, "u6d": 120, "explanatori": 120, "wfrad": 120, "wrrad": 120, "htangl": 120, "forkoffset": 120, "forklength": 120, "framelength": 120, "forkcg1": 120, "forkcg3": 120, "framecg1": 120, "framecg3": 120, "iwr11": 120, "iwr22": 120, "iwf11": 120, "iwf22": 120, "iframe11": 120, "iframe22": 120, "iframe33": 120, "iframe31": 120, "ifork11": 120, "ifork22": 120, "ifork33": 120, "ifork31": 120, "mframe": 120, "mfork": 120, "mwf": 120, "mwr": 120, "wr": 120, "tempfram": 120, "tempfork": 120, "orientnew": [120, 122, 125, 126, 127, 132, 136, 178, 180, 181, 183, 185, 186], "wr_cont": 120, "wr_mc": 120, "frame_mc": 120, "fork_mc": 120, "wf_mc": 120, "wf_cont": 120, "flip": [120, 153, 162, 222], "frame_i": 120, "fork_i": 120, "wr_i": 120, "wf_i": 120, "bodyfram": 120, "bodyfork": 120, "bodywr": 120, "bodywf": 120, "nonholonom": 120, "slip": [120, 124, 126, 185], "replic": 120, "conlist_spe": 120, "conlist_coord": 120, "gravit": [120, 125, 171, 183, 255], "aforement": [120, 183, 215, 253], "paperradrear": 120, "paperradfront": 120, "hta": 120, "trailpap": 120, "rake": 120, "paperwb": 120, "02": 120, "paperframecgx": 120, "paperframecgz": 120, "paperforkcgx": 120, "paperforkcgz": 120, "framecgnorm": 120, "framecgpar": 120, "tempa": 120, "tempb": 120, "tempc": 120, "paperforkl": 120, "forkcgnorm": 120, "forkcgpar": 120, "upright": 120, "val_dict": 120, "0603": 120, "1405": 120, "05892": 120, "00708": 120, "00756": 120, "kdd": [120, 125, 126], "centripet": 120, "corioli": 120, "forcing_lin": 120, "mm_full": 120, "_k_kqdot": 120, "xdot": 120, "lean": [120, 125, 127], "amat": 120, "summari": [121, 214, 233, 257], "jointsmethod": [121, 123, 128], "q_3": [121, 123, 185], "u_1": [121, 122, 123, 185, 197, 218], "u_2": [121, 122, 123, 185, 197, 218], "u_3": [121, 123, 185], "densiti": [121, 222, 233, 256], "link1": 121, "link2": 121, "link3": 121, "link4": 121, "joint1": 121, "joint2": 121, "joint3": 121, "j3": [121, 123, 147, 165], "fh": 121, "fhd": 121, "_method": 121, "_form_eom": 121, "eom": [122, 123, 132], "theta1": 122, "dq_dict": 122, "presimplifi": 122, "inp_vec": [122, 132], "lag": [122, 127, 132], "lm": [122, 131, 132, 194, 195, 198], "lag_eq": [122, 132], "lam_op": 122, "mb": [123, 135], "ibzz": 123, "compound_pend": 123, "simple_pend": 123, "slider": 123, "rev1": 123, "rev2": 123, "w_r_n_qd": [125, 126], "dmc": [125, 126, 127], "uv": [125, 126, 168], "bodyd": [125, 126, 127], "bodylist": [125, 126], "revisit": [126, 185], "kane1985": [126, 130, 133, 134], "thorough": [126, 132, 215], "simplifc": 126, "f3": [126, 188, 202], "necessit": 126, "factor_term": [126, 198, 211, 214], "simplify_auxiliary_eq": 126, "lrh": 127, "planet": 128, "robot": 128, "fascin": 128, "trajectori": 128, "challeng": 128, "came": [128, 273], "tackl": [128, 235], "organ": 128, "amen": 128, "arduou": 128, "momenta": [128, 147], "symbolicsystem": 128, "rough": [128, 173], "inertia_of_point_mass": 128, "linear_momentum": [128, 133, 135], "angular_momentum": [128, 133, 135], "kanemethod": 128, "find_dynamicsymbol": 128, "child_izz": 129, "child_mass": 129, "f_h": 130, "nh": 130, "ku": [130, 202], "k_d": 130, "f_d": [130, 131, 195], "dnh": 130, "f_r": [130, 132, 195], "speed_con": 130, "coord_con": 130, "u_dep": 130, "m_d": 131, "lam1": 131, "0_": 132, "blajer1994": [132, 134], "brought": [132, 222], "vel_p": 132, "a_op": 132, "b_op": 132, "m_op": 132, "a_lin": 132, "hasn": 132, "wikidyad": [133, 184], "wikidyadicproduct": [133, 184], "juxtaposit": [133, 177, 250], "otim": [133, 223], "l_p": 133, "likins1973": [133, 184], "l_b": 133, "requisit": 133, "t_p": 133, "t_b": 133, "t_t": 133, "virtu": [133, 135], "blajer": 134, "wojciech": 134, "werner": 134, "schiehlen": 134, "walter": 134, "schirm": 134, "kane1983": [134, 186], "likin": [134, 184], "david": [134, 198], "spacecraft": 134, "1983": [134, 237], "meijaard": 134, "jim": 134, "papadopoulo": 134, "ruina": 134, "schwab": 134, "royal": 134, "societi": [134, 215], "2084": 134, "1955": 134, "982": 134, "lectur": [135, 196, 222], "rigibodi": 135, "proprietari": 135, "k3": [135, 192], "k4": 135, "b11": 135, "b12": 135, "b21": 135, "b22": 135, "xd": 135, "xd2": 135, "y1d": 135, "y2d": 135, "tina": 135, "overwrit": [135, 177], "dt2": 135, "dy2": 135, "ty": 135, "linsolv": [135, 200, 216, 220, 279], "nonlinsolv": [135, 216, 220, 279], "rowmatrix": 135, "colmatrix": 135, "diagmat": 135, "eigval": 135, "row_matrix": 135, "col_matrix": 135, "ao": 135, "i12": 135, "i23": 135, "i31": 135, "bf": 135, "p_o_q": 135, "mag": 135, "unitvec": 135, "qo": 135, "p_p_q": 135, "partial_veloc": [135, 178, 181], "a_o_n": 135, "set_acc": [135, 181, 185], "qb": [135, 190], "qbd": 135, "alf_b_n": 135, "set_ang_acc": [135, 178], "ang_acc_in": [135, 178], "force_o": 135, "torque_a": 135, "qa": 135, "qad": 135, "a_b": 135, "v1pt": 135, "v1pt_theori": [135, 181, 185], "a1pt": 135, "a1pt_theori": [135, 181], "a2pt": 135, "a2pt_theori": [135, 181, 185], "angvel": 135, "force_vector": 135, "center_of_mass": 135, "kindiff": 135, "ke": 135, "configura": 135, "tion_constraint": 135, "pendent": 135, "velocity_con": 135, "traint": 135, "acceleration_": 135, "u_auxilia": 135, "ry": 135, "matlplotlib": 135, "stiff": 135, "damp": 135, "legend": [135, 188, 205], "introspect": 135, "rich": [135, 214], "media": [135, 141], "histori": 135, "esqu": 135, "cpython": 135, "pertin": [136, 189, 197], "alg_con_ful": 136, "symsystem1": 136, "symsystem2": 136, "symsystem3": 136, "raytransfermatrix": [137, 138], "geometricrai": [137, 138], "beamparamet": [137, 138], "geometric_conj": 137, "gauss_conj": 137, "conjugate_gauss_beam": [137, 138], "lens": 137, "gaussopt": 137, "wavelen": 137, "z_r": 137, "wavelength": [137, 138, 142], "waist": 137, "rayleigh": [137, 222], "refract": [137, 139, 141, 142], "530e": 137, "88679245283019": 137, "92753330865999": 137, "w_0": [137, 138, 215], "00100000000000000": 137, "freespac": [137, 138], "00101413072159615": 137, "00210803120913829": 137, "r672": 137, "complex_beam_paramet": 137, "r673": 137, "gaussian_beam": 137, "spread": [137, 202, 222, 237], "00053": 137, "goui": [137, 138], "55998576005696": 137, "2809": 137, "peak": 137, "waist_approximation_limit": [137, 138], "paraxi": [137, 141], "06e": 137, "curvedmirror": [137, 138], "curvedrefract": [137, 138], "flatmirror": [137, 138], "flatrefract": [137, 138], "2x1": 137, "thinlen": [137, 138], "r674": 137, "ray_transfer_matrix_analysi": 137, "waist_in": 137, "waist_out": 137, "s_in": 137, "s_out": 137, "w_o": 137, "gaussian_conj": [137, 138], "z_r_in": 137, "incid": [137, 141], "z_r_out": 137, "emerg": [137, 190], "geometric_conj_ab": [137, 138], "geometric_conj_af": [137, 138], "geometric_conj_bf": [137, 138], "rayleigh2waist": [137, 138], "waist2rayleigh": [137, 138], "refractive_index": [138, 139], "half_wave_retard": [138, 140], "jones_2_stok": [138, 140], "jones_vector": [138, 140], "linear_polar": [138, 140], "mueller_matrix": [138, 140], "phase_retard": [138, 140], "polarizing_beam_splitt": [138, 140], "quarter_wave_retard": [138, 140], "reflective_filt": [138, 140], "stokes_vector": [138, 140], "transmissive_filt": [138, 140], "brewster_angl": [138, 141], "critical_angl": [138, 141], "fresnel_coeffici": [138, 141], "hyperfocal_dist": [138, 141], "lens_formula": [138, 141], "lens_makers_formula": [138, 141], "mirror_formula": [138, 141], "refraction_angl": [138, 141], "transverse_magnif": [138, 141], "twave": [138, 142], "angular_veloc": [138, 142], "time_period": [138, 142], "wavenumb": [138, 142], "optic": [139, 140, 141, 142, 263], "permitt": 139, "permeabl": 139, "fermat": 139, "electr": [139, 141, 183, 253, 255], "electromagnet": [139, 183, 228, 255], "intrinsic_imped": 139, "149896229": [139, 142], "kilogram": [139, 171, 173, 175], "1250000": 139, "amper": 139, "299792458": [139, 142, 175], "r675": 139, "optical_medium": 139, "travel": [139, 142, 183, 253, 255], "stoke": [140, 254], "mueller": 140, "\u2148": [140, 187, 201, 202, 221, 279], "\u03c7": 140, "\u03c8": 140, "i\u2080": 140, "plate": 140, "hwp": 140, "splitter": 140, "transmit": [140, 141], "pb": 140, "transmitted_port": 140, "reflected_port": 140, "transmitted_pow": 140, "reflected_pow": 140, "r676": 140, "jones_calculu": 140, "r677": 140, "mueller_calculu": 140, "r678": 140, "stokes_paramet": 140, "retard": 140, "poincar\u00e9": 140, "tilt": 140, "mayor": 140, "transmiss": [140, 141], "quarter": 140, "\u03b4": 140, "phia": 140, "phib": 140, "4x1": [140, 222], "phi_a": 140, "phi_b": 140, "qwp": 140, "unpolar": 140, "attenu": 140, "transmitt": 140, "ndf": 140, "medium1": 141, "medium2": 141, "brewster": 141, "926093295503462": 141, "onset": 141, "850908514477849": 141, "02005": 141, "angle_of_incid": 141, "polaris": 141, "te": 141, "undergo": 141, "317843553417859": 141, "348645229818821": 141, "658921776708929": 141, "651354770181179": 141, "235625382192159": 141, "971843958291041": 141, "816477005968898": 141, "577377951366403": 141, "r679": 141, "fresnel_equ": 141, "coc": 141, "0033": 141, "focal_length": 141, "n_len": 141, "n_surr": 141, "thick": 141, "1515151515151": 141, "0000000000000": 141, "3418463277618": 141, "41152": 141, "magnif": 141, "phi1": 142, "phi2": 142, "w1": [142, 214], "w3": [142, 202], "superposit": [142, 153, 164, 189], "tempor": 142, "r680": 143, "paulialgebra": 143, "evaluate_pauli_product": [143, 263], "paulimatric": 143, "sigma3": 143, "nodal": [144, 169, 189], "hw": [144, 169], "coherent_st": [144, 263], "coher": [144, 170, 176], "1d": [144, 146, 159, 178, 227], "wavefunct": [144, 155, 157, 166, 169, 263], "r681": 145, "__cmp__": [145, 149, 168], "dagger": [145, 149, 155, 157, 160, 162, 167, 168, 263], "operatorset": [146, 158], "positionbra3d": [146, 155], "eigenbra": [146, 159, 165], "positionket3d": [146, 155], "eigenket": [146, 159, 165], "positionstate3d": [146, 155], "eigenst": [146, 158, 163, 165, 166], "position_x": [146, 155], "position_i": [146, 155], "position_z": [146, 155], "pxbra": [146, 155, 158], "pxket": [146, 155, 158, 163], "pxop": [146, 155, 158, 163], "xbra": [146, 155, 158, 163], "xket": [146, 155, 158, 163], "xop": [146, 155, 158, 163], "yop": [146, 155], "zop": [146, 155], "uncoupl": [147, 155, 165], "r682": 147, "j_3": [147, 165, 187], "r683": 147, "wigner3j": [147, 155, 187], "wigner": [147, 165, 222, 263], "varshalovich": [147, 165], "zyla": 147, "theor": 147, "phy": [147, 173, 187], "083c01": 147, "r684": 147, "w3j": 147, "715": [147, 187, 202], "wigner6j": [147, 155, 187], "j12": [147, 165], "j23": 147, "6j": [147, 187], "wigner9j": [147, 155, 187], "j4": 147, "j34": 147, "j13": 147, "j24": 147, "9j": [147, 187], "cg_simp": [147, 155], "r685": 147, "clebsh": 147, "rethink": 148, "figsiz": 148, "circuitplot": [148, 155], "nqubit": [148, 152, 153, 155, 162], "control_lin": [148, 155], "gate_idx": [148, 152], "min_wir": 148, "max_wir": 148, "control_point": [148, 155], "wire_idx": 148, "not_point": [148, 155], "one_qubit_box": [148, 155], "box": [148, 153, 155, 164, 166, 256], "qubit": [148, 152, 153, 154, 155, 161], "swap_point": [148, 155], "two_qubit_box": [148, 155], "createcg": [148, 155], "latexnam": 148, "mock": 148, "mz": [148, 155], "circuit_plot": [148, 155], "min_qubit": [148, 152, 155], "autogener": 148, "wire": 148, "j_0": 148, "r686": 149, "comm": [149, 168, 228], "plank": 150, "r687": 150, "05457162000000e": 150, "planck_const": 150, "hermetian": 151, "r688": 151, "r689": 151, "ket": [151, 155, 156, 157, 158, 160, 162, 163, 166, 168], "bra": [151, 155, 156, 157, 158, 160, 162, 163, 166, 168], "innerproduct": [151, 155, 156, 157, 163, 165, 168, 263], "outerproduct": [151, 155, 157], "seamlessli": 151, "hermitian_adjoint": 151, "hermitian_transpos": 151, "_apply_operators_qubit": 152, "gate_sort": [152, 155], "gate_simp": [152, 155], "ugat": [152, 155], "cgate": [152, 155], "control_valu": 152, "cnot": [152, 155], "eval_control": [152, 155], "plot_gat": [152, 155], "circ_plot": 152, "simplify_cg": 152, "cphase": 152, "cnotgat": [152, 155], "qappli": [152, 153, 155, 157, 162], "get_target_matrix": [152, 155], "represen": 152, "hadamardg": [152, 155], "identityg": [152, 155], "onequbitg": [152, 155], "phaseg": [152, 155], "swapgat": [152, 155], "target1": 152, "target2": 152, "tgate": [152, 155], "twoqubitg": [152, 155], "xgate": [152, 155], "ygate": [152, 155], "zgate": [152, 155], "bubbl": 152, "random_circuit": [152, 155], "ngate": 152, "gate_spac": 152, "mermin": 153, "_represent_zg": 153, "oracleg": [153, 155], "oracl": 153, "intqubit": [153, 155, 162], "search_funct": [153, 155], "wgate": [153, 155], "apply_grov": [153, 155], "grover_iter": [153, 155], "qstate": 153, "wv": 153, "superposition_basi": [153, 155], "numqubit": 153, "basis_st": 153, "matt": 154, "complexspac": [154, 155], "directsumhilbertspac": [154, 155], "r690": 154, "hilbertspac": [154, 155], "fockspac": [154, 155], "hilbert_spac": [154, 157, 166], "direct_sum": 154, "quantiz": [154, 263], "r691": 154, "mess": [154, 218, 221, 278], "fock_spac": 154, "r692": 154, "tensorpowerhilbertspac": [154, 155], "r693": 154, "tensor_product": 154, "tensorproducthilbertspac": [154, 155], "r694": 154, "clebsch": [155, 165, 187], "gordan": [155, 165, 187], "tensor_product_simp": [155, 167], "hilbert": [155, 157, 163], "identityoper": [155, 157], "unitaryoper": [155, 157], "operators_to_st": [155, 158], "state_to_oper": [155, 158], "enumerate_st": [155, 163], "get_basi": [155, 163], "integrate_result": [155, 163], "rep_expect": [155, 163], "rep_innerproduct": [155, 163], "j2op": [155, 165], "jxbra": [155, 165], "jxbracoupl": [155, 165], "jxket": [155, 165], "jxketcoupl": [155, 165], "jybra": [155, 165], "jybracoupl": [155, 165], "jyket": [155, 165], "jyketcoupl": [155, 165], "jzbra": [155, 165], "jzbracoupl": [155, 165], "jzket": [155, 165], "jzketcoupl": [155, 165], "jzop": [155, 165], "wignerd": [155, 165], "brabas": [155, 156, 157, 163, 166], "ketbas": [155, 156, 157, 163, 166], "orthogonalbra": [155, 166], "orthogonalket": [155, 166], "orthogonalst": [155, 166], "statebas": [155, 158, 163, 166], "dual_class": [155, 166], "timedepbra": [155, 166], "timedepket": [155, 166], "timedepst": [155, 166], "prob": [155, 166, 222], "grover": 155, "qft": [155, 164], "iqft": [155, 161], "rk": [155, 161], "rkgate": [155, 161], "intqubitbra": [155, 162], "qubitbra": [155, 162], "matrix_to_dens": [155, 162], "matrix_to_qubit": [155, 162], "measure_al": [155, 162], "measure_all_oneshot": [155, 162], "measure_parti": [155, 162], "measure_partial_oneshot": [155, 162], "qubit_to_matrix": [155, 162], "shor": 155, "cmod": [155, 164], "period_find": [155, 164], "piabbra": [155, 159], "piabhamiltonian": [155, 159], "piabket": [155, 159], "r695": 156, "inner_product": 156, "apply_oper": [157, 168, 263], "r696": 157, "r697": 157, "polymoni": 157, "operator_": 157, "28physic": 157, "old_assumpt": 157, "r698": 157, "outer_product": 157, "_operators_to_st": 158, "state_map": 158, "_state_to_oper": 158, "piab": 159, "ip_doit": 160, "smarter": [161, 211], "qtf": 161, "povm": 162, "as_int": [162, 239, 243], "qubit_valu": 162, "00001": 162, "ensembl": 162, "oneshot": 162, "_enumerate_st": 163, "foo_1": 163, "foo_2": 163, "foo_3": 163, "test2": 163, "bar_4": 163, "bar_5": 163, "bar_10": 163, "replace_non": 163, "operator_to_st": 163, "qexpr": 163, "orig_expr": 163, "x_ket": 163, "x_op": 163, "px_2": 163, "px_1": 163, "_repres": 163, "_represent_foobasi": 163, "foobasi": 163, "_represent_szop": 163, "szupket": 163, "szop": 163, "sz": 163, "reformat": 164, "momemtum": 165, "jx": 165, "jcoupl": 165, "jy": 165, "jz": 165, "j_4": [165, 187], "argular": 165, "passiv": 165, "r699": 165, "mp": [165, 220, 236], "jm": 165, "jj": 165, "r700": 165, "jcoupling_list": 165, "coupledspinst": 165, "spinstat": 165, "r701": 166, "mn": [166, 202, 222], "ket_not": 166, "r702": 166, "k0": [166, 193, 195, 222], "_eval_adjoint": 166, "412214747707527": 166, "matrix_tensor_product": 167, "axb": 167, "xdagger": 167, "axc": 167, "bxc": 167, "cxd": 167, "boson": 168, "fetter": 168, "welecka": 168, "secondqu": 168, "annihilateboson": [168, 263], "fockstateket": [168, 263], "bket": [168, 263], "fockstatebosonket": [168, 263], "annihilatefermion": [168, 263], "createboson": [168, 263], "is_only_q_annihil": 168, "destroi": [168, 211], "quasi": 168, "hole": 168, "is_only_q_cr": 168, "is_q_annihil": 168, "is_q_creat": 168, "antisymmetrictensor": [168, 263], "bbra": [168, 263], "fockstatebosonbra": [168, 263], "bd": [168, 263], "bosonicbasi": [168, 263], "fock": 168, "NO": [168, 263], "createfermion": [168, 263], "wick": [168, 263], "fbra": [168, 263], "fockstatefermionbra": [168, 263], "fket": [168, 263], "fockstatefermionket": [168, 263], "fixedbosonicbasi": [168, 263], "n_particl": 168, "n_level": 168, "fockstat": [168, 263], "occup": 168, "bosonbra": 168, "fockstatebra": [168, 263], "fermi_level": 168, "r703": 168, "textwrap": [168, 243], "_q": 168, "get_subno": 168, "fermionicoper": 168, "has_q_annihil": 168, "q_annihil": 168, "has_q_creat": 168, "leftmost": 168, "q_creator": 168, "iter_q_annihil": 168, "iter_q_cr": 168, "0x": 168, "permutationoper": [168, 263], "get_permut": 168, "varbosonicbasi": [168, 263], "n_max": 168, "creator": 168, "evaluate_delta": [168, 263], "einstein": [168, 228], "d_ij": 168, "_j": [168, 173, 187, 204], "d_ip": 168, "d_qp": 168, "matrix_rep": [168, 263], "simplify_index_permut": [168, 263], "permutation_oper": 168, "schemat": [168, 173], "abij": 168, "abji": 168, "baij": 168, "baji": 168, "permutlist": 168, "substitute_dummi": [168, 263], "new_indic": 168, "pretty_indic": 168, "_get_ordered_dummi": 168, "_c": 168, "_d": 168, "index_group": 168, "string_of_lett": 168, "my_dummi": 168, "_v": [168, 186], "_p_0": 168, "_p_1": 168, "keep_only_fully_contract": 168, "sho": 169, "isotrop": 169, "mk": [170, 173], "legal": 170, "temperatur": [170, 183, 255], "dimensions": 170, "dimsys_si": [170, 171], "get_dimensional_depend": [170, 171], "has_integer_pow": 170, "dim_si": 170, "base_dim": 170, "derived_dim": 170, "dimensional_depend": 170, "can_transf_matrix": 170, "useless": [170, 193, 195], "inv_can_transf_matrix": 170, "dim_can_vector": 170, "dim_vector": 170, "is_consist": [170, 176], "is_dimensionless": 170, "list_can_dim": 170, "print_dim_bas": 170, "gravitational_const": [171, 175], "equivalent_dim": 171, "grav_eq": 171, "kepler": [171, 247], "venu": 171, "701": 171, "dai": [171, 175, 218], "venus_a": 171, "108208000e3": 171, "solar": 171, "solar_mass": 171, "9891e30": 171, "convert_to": [171, 175, 191, 197], "5112118495813": 171, "659097795948": 171, "astrophys": 171, "ill": 171, "astrophysicist": 172, "ua": [172, 190], "earth": [172, 183, 255], "sun": 172, "theoricist": 172, "philosophi": [172, 218, 221, 263], "mole": 173, "dimensionless": 173, "unavoid": 173, "d_3": 173, "d_2": [173, 198, 222], "underbrac": [173, 185], "countabl": [173, 221], "pmatrix": 173, "kg": [173, 256], "glu": 173, "men": 173, "heat": 173, "joul": 173, "calori": 173, "stori": 173, "chemistri": 173, "page52": 173, "1952": 173, "page78": 173, "deboer79": 173, "boer": 173, "818": 173, "levyleblond77": 173, "l\u00e9vy": 173, "leblond": 173, "conceptu": [173, 189, 255], "rivista": 173, "del": [173, 237, 254, 278], "nuovo": [173, 187], "cimento": [173, 187], "1977": 173, "187": [173, 196], "214": 173, "anticip": 173, "bin_prefix": 174, "abbrev": [174, 175, 202], "latex_repr": [174, 175], "encapsul": [174, 195, 221, 235], "kilo": 174, "scale_factor": 175, "pretty_unicode_repr": 175, "pretty_ascii_repr": 175, "mathml_presentation_repr": 175, "is_prefix": 175, "abbrevi": [175, 190, 202, 221, 223], "speed_of_light": 175, "reference_quant": 175, "target_unit": 175, "mile": 175, "atomic_mass_const": 175, "centimet": 175, "25146": 175, "609344": 175, "86400": 175, "660539060e": 175, "300000": 175, "planck": 175, "62963087839509e": 175, "base_unit": 176, "descr": 176, "dimension_system": 176, "derived_unit": 176, "overridden": [176, 189, 204, 278], "get_units_non_prefix": 176, "rigidli": 177, "entireti": 177, "_str": 177, "otherfram": [178, 247], "n_alpha_b": 178, "ny": 178, "_3": [178, 187], "rot_typ": [178, 181, 183], "rot_ord": [178, 181, 248], "orient_body_fix": 178, "orient_space_fix": 178, "orient_quaternion": 178, "tait": [178, 247, 248], "bryan": [178, 247, 248], "quaternion": [178, 181, 186, 247, 248, 258], "userwarn": [178, 231, 238, 274], "rotation_ord": [178, 247, 248], "xzx": 178, "zxz": [178, 186, 247, 248], "xyx": [178, 247, 248], "yzy": 178, "zyz": 178, "yxy": [178, 186], "yzx": [178, 186], "zxy": 178, "xzy": 178, "zyx": 178, "yxz": 178, "orient_explicit": 178, "lambda_x": [178, 247, 248], "lambda_i": [178, 247, 248], "lambda_z": [178, 247, 248], "q0": [178, 218, 247, 248], "newnam": 178, "gen_spe": [178, 181], "variable_map": 178, "a_x": [178, 186, 202], "b_x": [178, 180, 186, 228], "b_y": [178, 180, 186, 228], "a_z": [178, 186], "b_z": [178, 186, 228], "inlist": 178, "var_in_dcm": 178, "reexpress": [178, 251], "time_deriv": [178, 183, 184], "free_dynamicsymbol": 178, "codirect": 178, "dyadic_tensor": [178, 247], "frame1": 178, "frame2": [178, 180], "second_reference_fram": 178, "ixz": 178, "inertia_dyad": 178, "pertain": [179, 184], "fieldfunct": [179, 183], "vect": [179, 247, 249], "r_x": [179, 183], "r_y": [179, 183], "r_z": [179, 183], "scalar_field": [179, 183, 247, 249, 253], "grad_field": [179, 249], "sympyfi": [179, 180, 181, 249], "position2": [179, 249], "vectfield": [179, 183, 249, 253], "solenoid": [179, 249, 254], "q6": 180, "vec1": 180, "vec2": 180, "coordinatesym": [180, 184], "n_x": 180, "rotating_reference_fram": 180, "time_derivatives_in_the_two_fram": 180, "otherpoint": 181, "outfram": 181, "fixedfram": 181, "get_motion_param": 181, "vectori": [181, 183, 250, 255], "timevalue1": 181, "timevalue2": 181, "313": 181, "vel_vec": 181, "q1dd": 182, "q2dd": 182, "charg": [183, 255], "displac": [183, 185, 255], "temper": 183, "electric_potenti": [183, 253], "r1_x": 183, "r1_y": 183, "infinitesim": [183, 253], "nabla": [183, 247, 252, 253], "f_y": [183, 253], "f_x": [183, 221, 253], "sink": [183, 253], "irrot": [183, 253], "is_conserv": [183, 253, 254], "is_solenoid": [183, 253, 254], "scalar_potenti": [183, 253, 254], "conservative_field": [183, 253], "scalar_potential_differ": [183, 253, 254], "aug": [184, 221], "dyadic_product": [184, 254], "inc": [184, 196], "kinematic_equ": 184, "w_x": 185, "w_y": 185, "w_z": 185, "w_1": [185, 197], "w_2": [185, 197], "w_3": 185, "textrm": [185, 186, 210], "u_x": 185, "sp": 185, "oq": 185, "qp": 185, "rod": 185, "went": 185, "parallelogram": 186, "c_x": 186, "c_y": 186, "c_z": 186, "train": 186, "friend": 186, "xz": [186, 188], "zy": 186, "undergon": [186, 221], "vastli": 186, "wait": 186, "mold": 186, "bp": [186, 218], "bpp": 186, "zzx": 186, "multifram": 186, "direction": 186, "racah": [187, 263], "gaunt": [187, 263], "rasch03": 187, "regge58": 187, "regg": 187, "544": 187, "regge59": 187, "116": [187, 196], "1959": 187, "edmonds74": 187, "edmond": 187, "princeton": [187, 222], "1957": 187, "rasch": 187, "siam": [187, 240], "sci": 187, "1416": 187, "1428": 187, "liberatodebrito82": 187, "liberato": 187, "brito": 187, "homeier96": 187, "homeier": 187, "steinborn": 187, "mol": 187, "368": 187, "1996": [187, 196, 212, 220, 247], "forum": [187, 221], "m4nzdu": 187, "7o38": 187, "jen": 187, "03": [187, 222], "oscar": 187, "gerardo": 187, "lazo": 187, "arjona": 187, "phil": 187, "adam": [187, 198], "lemaitr": 187, "2022": 187, "jyr2000": 187, "gmail": 187, "clebsch_gordan": [187, 263], "2j_3": 187, "dot_rot_grad_ynm": [187, 263], "gradient": [187, 188, 247, 254, 255], "_l": 187, "l_2": 187, "l_3": 187, "drastic": 187, "2l_1": 187, "2l_2": 187, "2l_3": 187, "1200": 187, "00689500421922113448": 187, "inflect": 187, "unsuit": 187, "dd": [187, 207], "ee": [187, 197], "j_5": 187, "j_6": 187, "richer": 187, "real_gaunt": [187, 263], "realgaunt": 187, "m0": [187, 228], "00002480019791932209313156167": 187, "wigner_3j": [187, 263], "wigner_6j": [187, 263], "wigner_9j": [187, 263], "j_7": 187, "j_8": 187, "j_9": 187, "05555555": 187, "1666666": 187, "wigner_d": [187, 263], "j_z": 187, "j_y": 187, "\u03b3": [187, 268, 278], "wigner_d_smal": [187, 263], "textbackend": 188, "plot_parametr": 188, "plot_implicit": 188, "plot3d_parametric_lin": 188, "plot3d_parametric_surfac": 188, "xlabel": 188, "ylabel": 188, "zlabel": 188, "aspect_ratio": 188, "ylim": 188, "axis_cent": 188, "xscale": 188, "yscale": 188, "autoscal": 188, "textplot": 188, "_seri": [188, 199], "baseseri": 188, "nonparametr": 188, "basebackend": 188, "parametric2dlineseri": 188, "parametric3dlineseri": 188, "red": 188, "cyan": 188, "grayscal": 188, "integers_onli": 188, "surfaceover2drangeseri": 188, "parametricsurfaceseri": 188, "surface_color": 188, "range1": 188, "range2": 188, "fill_between": 188, "inch": 188, "expr_x": 188, "expr_i": 188, "canva": 188, "range_x": 188, "range_i": 188, "nb_of_points_x": 188, "nb_of_points_i": 188, "expr_z": 188, "range_u": 188, "range_v": 188, "nb_of_points_u": 188, "nb_of_points_v": 188, "x_var": 188, "y_var": 188, "mesh": 188, "p8": 188, "p9": 188, "nrow": [188, 191], "ncolumn": 188, "stuff": [188, 233, 235, 243], "is_2dlin": 188, "oblig": 188, "only_integ": 188, "get_seg": 188, "get_color_arrai": 188, "var_start_end": 188, "r704": 188, "luiz": 188, "henriqu": 188, "figueiredo": 188, "r705": 188, "line3dbaseseri": 188, "surfacebaseseri": 188, "var_start_end_x": 188, "var_start_end_i": 188, "var_start_end_u": 188, "var_start_end_v": 188, "implicitseri": 188, "has_equ": 188, "use_interval_math": 188, "centric": 188, "get_mesh": 188, "process_seri": 188, "_process_seri": 188, "keyboard": 188, "mous": 188, "pyglet_plot": 188, "screenshot": 188, "camera": 188, "zoom": 188, "numpad": 188, "ordin": [188, 218, 239, 243], "f5": 188, "f6": 188, "f8": 188, "drag": 188, "button": [188, 234], "curvilinear": [188, 250, 251, 254], "__setitem__": 188, "zfade4": 188, "key1": 188, "value1": 188, "key2": 188, "value2": 188, "unbound_theta": 188, "wirefram": 188, "saddl": 188, "fz": 188, "_______________________________________________________": 188, "mediterranean": 189, "cultur": 189, "arab": 189, "lighten": 189, "tapestri": 189, "woven": 189, "european": 189, "soil": 189, "plausibl": 189, "teeter": 189, "totter": 189, "outweigh": 189, "excit": 189, "amus": 189, "kempf": 189, "1944": 189, "20th": 189, "dedekind": 189, "intim": 189, "disciplin": 189, "toolset": 189, "atiyah69": [189, 196], "gear": 189, "greuel2008": [189, 196], "interspers": 189, "lr": 189, "ilex": 189, "\u211a": [189, 202], "localis": 189, "abridg": 189, "free_modul": [189, 193], "quotient_r": [189, 193], "overload": [189, 192, 193, 250, 273], "polynomialr": [189, 193, 194, 200], "domain_or_r": [189, 193], "quotientr": [189, 193, 194], "base_id": [189, 193], "elbow": 189, "room": 189, "componentwis": [189, 202], "inclin": 189, "biproduct": 189, "quotient_modul": 189, "is_submodul": 189, "multiply_id": 189, "identity_hom": 189, "freemodul": 189, "freemoduleel": 189, "conicis": 189, "_contain": 189, "_syzygi": 189, "_in_terms_of_gener": 189, "_intersect": 189, "_module_quoti": 189, "reduce_el": [189, 197], "represantit": 189, "in_terms_of_gener": 189, "inclusion_hom": 189, "rela": 189, "relb": 189, "is_full_modul": 189, "module_quoti": 189, "opt": [189, 195, 214, 274], "coincis": 189, "syzygy_modul": 189, "r_n": 189, "_contains_elem": 189, "_contains_id": 189, "_quotient": 189, "_union": 189, "_product": 189, "is_whole_r": 189, "is_maxim": 189, "is_primari": 189, "is_rad": 189, "is_princip": 189, "xj": 189, "satur": 189, "subquoti": 189, "quotientmodul": 189, "subquotientmodul": 189, "killed_modul": 189, "quotientmoduleel": 189, "kill": [189, 193, 233], "quotient_hom": 189, "ker": 189, "surject": 189, "cokernel": 189, "coker": 189, "meaningfulli": 189, "restrict_domain": 189, "homomoprh": 189, "modulehomomorph": [189, 197], "_ker": 189, "_img": 189, "_kernel": 189, "_imag": 189, "_restrict_domain": 189, "_restrict_codomain": 189, "_quotient_domain": 189, "_quotient_codomain": 189, "_appli": 189, "_mul_scalar": 189, "_compos": 189, "_add": [189, 208], "is_inject": 189, "quotient_domain": 189, "is_isomorph": 189, "preimag": 189, "restrict_codomain": 189, "is_surject": 189, "quotient_codomain": 189, "induct": 189, "monogen": 189, "monogenicfiniteextens": [189, 193], "finiteextens": 189, "sqrt2": [189, 192], "_5": 189, "extensionel": [189, 193], "notinvert": [189, 194, 195, 198], "nu_1": 190, "nu_2": 190, "nu_n": 190, "nu_i": 190, "customarili": 190, "irreduc": [190, 193, 195, 197, 198, 201, 222, 228, 278], "endow": [190, 198], "resp": [190, 193, 218], "divmod": [190, 192, 193], "cb": [190, 240], "sqf_list": [190, 193, 194, 198], "sqf": [190, 193, 194, 198, 215], "buchberg": [190, 195, 196, 198], "solve_poly_system": [190, 198, 220, 221], "fmt": [191, 193, 197], "matrix1": 191, "dmnonsquarematrixerror": 191, "zz_i": [191, 192, 194], "from_dict_sympi": 191, "ncol": 191, "elemsdict": 191, "from_list_sympi": 191, "from_list": [191, 193, 198, 199], "construct_domain": [191, 192, 193, 194, 198], "from_rep": 191, "drep": 191, "dm": [191, 197], "ownership": 191, "scc": 191, "substract": 191, "to_dens": 191, "to_field": [191, 193, 198], "to_spars": 191, "aq": 191, "ccc": [191, 221], "from_ddm": 191, "domainerror": [191, 194, 195, 198], "to_ddm": 191, "r706": 191, "pythonmpq": [192, 193, 194], "srepr": [192, 265, 273], "strength": 192, "richardon": 192, "dup_factor_list": 192, "factortool": [192, 195], "dup_": [192, 195], "dmp_": [192, 195], "prod": [192, 199, 211], "z1": [192, 193, 220], "is_field": [192, 193], "quo": [192, 193, 194, 195, 198], "rem": [192, 193, 194, 195, 198], "exquo": [192, 193, 194, 198], "exactquotientfail": [192, 193, 194, 195, 198], "mpz": [192, 193], "of_typ": [192, 193], "z1_sympi": 192, "to_sympi": [192, 193], "from_sympi": [192, 193], "forth": [192, 197], "z_sympi": 192, "z_zz": 192, "coercionfail": [192, 194, 195], "sum_domain": 192, "expressions_sympi": 192, "expressions_dom": 192, "result_dom": 192, "e_dom": 192, "result_sympi": 192, "qq_i": [192, 194], "gaussianinteg": [192, 193, 194], "gaussianrationalfield": [192, 193, 194], "gaussianr": [192, 193, 194], "galoi": [192, 195, 197], "finitefield": [192, 193, 194], "pythonfinitefield": [192, 193, 194], "gmpyfinitefield": [192, 193, 194], "welcom": [192, 218, 271], "realel": [192, 193, 194], "complexel": [192, 193, 194], "mpc": 192, "xr": [192, 200], "zc": 192, "1j": 192, "_mpc_": 192, "realfield": [192, 193, 194], "rr100": 192, "33333333333333333333333333333": 192, "hack": [192, 218, 231], "algebraic_field": [192, 193, 195, 197], "algebraicfield": [192, 193, 194, 195, 197], "sqrt3": 192, "x_dom": 192, "p_expr": [192, 193], "polyel": [192, 193, 194, 195, 199, 200, 202], "p_dom": 192, "xk": [192, 193, 204], "yk": [192, 193], "poly_r": [192, 193], "old_polynomialr": 192, "globalpolynomialr": 192, "polyclass": [192, 193, 198], "yr": [192, 200], "broader": 192, "get_field": [192, 193], "frac_field": [192, 193], "rationalfield": [192, 193, 194], "old_frac_field": [192, 193], "fractionfield": [192, 193, 194], "old_fractionfield": 192, "xf": 192, "yf": 192, "fracfield": [192, 193, 194], "expressiondomain": [192, 193, 194], "elements_sympi": 192, "elements_k": 192, "convert_from": [192, 193], "num_zz": 192, "num_qq": 192, "domainel": [192, 193, 194, 200], "encompass": 192, "all_coeff": [192, 193, 198], "dom": [192, 193, 195, 210], "strang": 192, "hybrid": 192, "unreli": 192, "usefulli": 193, "pythonr": [193, 200], "p_domain": 193, "ez": [193, 228], "get_r": 193, "has_assoc_field": 193, "has_assoc_r": 193, "alg_field_from_poli": [193, 197], "root_index": 193, "almosteq": 193, "cyclotomic_field": [193, 197], "zeta7": 193, "zeta_": 193, "lexord": [193, 194, 198], "from_algebraicfield": 193, "from_complexfield": 193, "from_expressiondomain": 193, "from_expressionrawdomain": 193, "from_ff": 193, "modularinteg": 193, "from_ff_gmpi": 193, "from_ff_python": 193, "from_fractionfield": 193, "from_globalpolynomialr": 193, "from_monogenicfiniteextens": 193, "from_polynomialr": 193, "from_qq_gmpi": 193, "from_qq_python": 193, "from_realfield": 193, "from_zz_gmpi": 193, "from_zz_python": 193, "gcdex": [193, 194, 198], "get_exact": 193, "half_gcdex": [193, 194, 198], "is_pid": 193, "is_r": 193, "is_nonposit": 193, "is_on": [193, 198], "rersiv": 193, "__neg__": 193, "__pos__": 193, "__sub__": 193, "q_domain": 193, "q_expr": 193, "x_domain": 193, "alg": [193, 197, 201], "trait": 193, "is_unit": 193, "__divmod__": 193, "__floordiv__": 193, "__mod__": [193, 197], "simpledomain": [193, 194], "compositedomain": [193, 194], "from_qq": 193, "from_zz": 193, "gmpyinteg": [193, 194], "pythoninteg": [193, 194], "gmpyrationalfield": [193, 194], "pythonrationalfield": [193, 194], "from_gaussianrationalfield": 193, "gaussianel": [193, 194], "gaussiandomain": [193, 194], "qq_python": 193, "zz_python": 193, "z2": 193, "z3": 193, "z4": 193, "from_gaussianinteg": 193, "as_algebraicfield": 193, "orig_ext": 193, "algebraicnumb": [193, 197, 201], "integral_basi": [193, 197], "maximal_ord": [193, 197], "zeta5": 193, "primes_abov": [193, 197], "primeid": [193, 197], "to_alg_num": [193, 197], "legibl": 193, "to_rat": 193, "mpelement": 193, "complexfield": [193, 194], "lc": [193, 194, 195, 198], "domain_or_field": 193, "dmf": [193, 194], "coercibl": 193, "monomialord": [193, 194, 198], "xring": [193, 194], "vring": [193, 194], "sring": [193, 194, 199, 200], "polyr": [193, 194, 195, 200], "factor_list": [193, 194, 198, 278], "add_gen": 193, "drop_to_ground": 193, "monomial_basi": 193, "206": [193, 198], "744": 193, "945": [193, 199], "is_monomi": [193, 198], "const": [193, 202], "coeffcient": [193, 195], "inplac": 193, "shallow": [193, 209], "zero_monom": 193, "fv": 193, "clo": 193, "p64": 193, "qv": 193, "f0": 193, "imul_num": 193, "itercoeff": 193, "itermonom": 193, "iterterm": 193, "leading_expv": 193, "leading_monom": 193, "leading_term": 193, "listcoeff": 193, "listmonom": 193, "listterm": 193, "monom": [193, 198], "strip_zero": 193, "tail_degre": 193, "xfield": [193, 194], "vfield": [193, 194, 252], "sfield": [193, 194, 252], "fracel": [193, 194, 202], "lev": 193, "add_ground": [193, 198], "all_monom": [193, 198], "all_term": [193, 198], "cauchy_lower_bound": 193, "cauchy_upper_bound": 193, "clear_denom": [193, 198], "count_complex_root": 193, "sup": [193, 198, 202, 209, 210], "count_real_root": 193, "deflat": [193, 198], "y_i": [193, 195, 197, 198, 218], "x_j": [193, 195, 198], "degree_list": [193, 194, 198], "eject": [193, 198], "exquo_ground": [193, 198], "factor_list_includ": [193, 198], "from_dict": [193, 198], "from_sympy_list": 193, "gff_list": [193, 194, 198], "homogeneous_ord": [193, 198, 215], "is_cyclotom": [193, 198], "is_ground": [193, 198], "is_homogen": [193, 198], "is_irreduc": [193, 198], "is_linear": [193, 198], "is_mon": [193, 198], "is_quadrat": [193, 198], "is_sqf": [193, 198], "l1_norm": [193, 198], "l2_norm_squar": 193, "max_norm": [193, 198], "mignotte_sep_bound_squar": 193, "mignott": [193, 195], "mul_ground": [193, 198], "pdiv": [193, 194, 198], "pexquo": [193, 194, 198], "pquo": [193, 194, 198], "prem": [193, 194, 198], "quo_ground": [193, 198], "refine_root": [193, 194, 197, 198], "includepr": [193, 195, 198], "sqf_list_includ": [193, 198], "sqf_norm": [193, 194, 198], "sqf_part": [193, 194, 198], "sqr": [193, 198], "sturm": [193, 194, 198], "sub_ground": [193, 198], "to_dict": 193, "to_exact": [193, 198], "to_r": [193, 198], "to_sympy_dict": 193, "to_sympy_list": 193, "to_tupl": 193, "total_degre": [193, 198, 215], "trunc": [193, 194, 198, 201], "frac_unifi": 193, "half_per": 193, "poly_unifi": 193, "gr\u00f6bner": 194, "groebner": [194, 196, 197, 198, 201, 214, 220, 221], "wester": 194, "poly_from_expr": [194, 198], "parallel_poly_from_expr": [194, 198], "lt": [194, 198, 243], "gcd_list": [194, 198], "lcm_list": [194, 198], "gff": [194, 198], "count_root": [194, 198], "nroot": [194, 198, 220], "ground_root": [194, 198], "nth_power_roots_poli": [194, 198], "is_zero_dimension": [194, 198, 221], "viet": [194, 198], "itermonomi": [194, 198], "monomial_count": [194, 198], "gradedlexord": [194, 198], "reversedgradedlexord": [194, 198], "swinnerton_dyer_poli": [194, 198], "symmetric_poli": [194, 198], "random_poli": [194, 198], "bernoulli_c_poli": [194, 198], "apart_list": [194, 198], "assemble_partfrac_list": [194, 198], "dispers": [194, 196, 222], "dispersionset": [194, 198], "agca": 194, "syzygi": 194, "build_opt": [194, 195], "basepolynomialerror": [194, 195], "operationnotsupport": [194, 195], "heuristicgcdfail": [194, 195], "homomorphismfail": [194, 195], "isomorphismfail": [194, 195, 197], "extraneousfactor": [194, 195], "evaluationfail": [194, 195], "refinementfail": [194, 195], "notrevers": [194, 195, 198], "notalgebra": [194, 195], "polynomialerror": [194, 195, 198], "unificationfail": [194, 195, 197], "generatorsneed": [194, 195], "computationfail": [194, 195], "generatorserror": [194, 195], "univariatepolynomialerror": [194, 195], "multivariatepolynomialerror": [194, 195, 198], "polificationfail": [194, 195], "optionerror": [194, 195], "flagerror": [194, 195], "undocu": 194, "rs_seri": 194, "eqs_to_matrix": 194, "sympy_eqs_to_r": 194, "_solve_lin_si": 194, "_solve_lin_sys_compon": 194, "ddm": 194, "sdm": [194, 195], "adic": [194, 196], "valuat": [194, 218], "subfield": 194, "l0": 195, "legitim": 195, "uninterest": 195, "bulk": [195, 212], "x_u": 195, "dup__": 195, "densebas": 195, "dmp_lc": 195, "poly_lc": 195, "dmp_tc": 195, "poly_tc": 195, "dmp_ground_lc": 195, "dmp_ground_tc": 195, "dmp_true_lt": 195, "n_1": [195, 220, 222], "n_k": 195, "dmp_degre": 195, "dmp_degree_in": 195, "dmp_degree_list": 195, "dmp_strip": 195, "dmp_valid": 195, "dup_revers": 195, "dmp_copi": 195, "dmp_to_tupl": 195, "dmp_normal": 195, "dmp_convert": 195, "to_domain": 195, "dmp_from_sympi": 195, "dmp_nth": 195, "dmp_ground_nth": 195, "dmp_zero_p": 195, "dmp_zero": 195, "dmp_one_p": 195, "dmp_one": 195, "dmp_ground_p": 195, "dmp_ground": 195, "dmp_negative_p": 195, "dmp_positive_p": 195, "dmp_from_dict": 195, "dmp_to_dict": 195, "dmp_swap": 195, "dmp_permut": 195, "dmp_nest": 195, "dmp_rais": 195, "dmp_deflat": 195, "dmp_multi_defl": 195, "dmp_inflat": 195, "dmp_exclud": 195, "dmp_includ": 195, "dmp_inject": 195, "dmp_eject": 195, "dmp_terms_gcd": 195, "dmp_list_term": 195, "dmp_apply_pair": 195, "dmp_slice": 195, "dup_random": 195, "densearith": 195, "dmp_add_term": 195, "dmp_sub_term": 195, "dmp_mul_term": 195, "dmp_add_ground": 195, "dmp_sub_ground": 195, "dmp_mul_ground": 195, "dmp_quo_ground": 195, "dmp_exquo_ground": 195, "dup_lshift": 195, "dup_rshift": 195, "dmp_ab": 195, "dmp_neg": 195, "dmp_add": 195, "dmp_sub": 195, "dmp_add_mul": 195, "dmp_sub_mul": 195, "dmp_mul": 195, "dmp_sqr": 195, "dmp_pow": 195, "dmp_pdiv": 195, "dmp_prem": 195, "dmp_pquo": 195, "dmp_pexquo": 195, "dmp_rr_div": 195, "dmp_ff_div": 195, "dmp_div": 195, "dmp_rem": 195, "dmp_quo": 195, "dmp_exquo": 195, "dmp_max_norm": 195, "dmp_l1_norm": 195, "dmp_expand": 195, "densetool": 195, "dmp_integr": 195, "dmp_integrate_in": 195, "dmp_diff": 195, "dmp_diff_in": 195, "dmp_eval": 195, "dmp_eval_in": 195, "dmp_eval_tail": 195, "dmp_diff_eval_in": 195, "dmp_trunc": 195, "dmp_ground_trunc": 195, "dup_mon": 195, "dmp_ground_mon": 195, "dup_cont": 195, "dmp_ground_cont": 195, "dup_primit": 195, "dmp_ground_primit": 195, "dup_extract": 195, "dmp_ground_extract": 195, "dup_real_imag": 195, "bivari": [195, 201, 222], "dup_mirror": 195, "dup_scal": 195, "dup_shift": 195, "dup_transform": 195, "dmp_compos": 195, "dup_decompos": 195, "t_m": 195, "r707": 195, "dmp_lift": 195, "dup_sign_vari": 195, "dmp_clear_denom": 195, "k_0": 195, "dmp_revert": 195, "gf_": 195, "justifi": 195, "necess": 195, "u_0": 195, "m_0": [195, 215], "m_n": 195, "gf_crt1": 195, "9215": 195, "9405": 195, "9603": 195, "gf_crt2": 195, "gf_int": 195, "gf_degre": 195, "gf_lc": 195, "gf_tc": 195, "gf_strip": 195, "gf_trunc": 195, "gf_normal": 195, "gf_from_dict": 195, "gf_to_dict": 195, "gf_from_int_poli": 195, "gf_to_int_poli": 195, "gf_neg": 195, "gf_add_ground": 195, "gf_sub_ground": 195, "gf_mul_ground": 195, "gf_quo_ground": 195, "gf_add": 195, "gf_sub": 195, "gf_mul": 195, "gf_sqr": 195, "gf_add_mul": 195, "gf_sub_mul": 195, "gf_expand": 195, "gf_div": 195, "r708": 195, "monagan93": [195, 196], "r709": 195, "gathen99": [195, 196], "gf_rem": 195, "gf_quo": 195, "gf_exquo": 195, "gf_lshift": 195, "gf_rshift": 195, "gf_pow": 195, "gf_pow_mod": 195, "r710": 195, "gf_gcd": 195, "gf_lcm": 195, "gf_cofactor": 195, "gf_gcdex": 195, "eea": 195, "r711": 195, "gf_monic": 195, "gf_diff": 195, "gf_eval": 195, "gf_multi_ev": 195, "gf_compos": 195, "gf_compose_mod": 195, "gf_trace_map": 195, "r712": 195, "gathen92": [195, 196], "gf_random": 195, "gf_irreduc": 195, "gf_irreducible_p": 195, "gf_sqf_p": 195, "gf_sqf_part": 195, "gf_sqf_list": 195, "e_2": [195, 198], "e_k": 195, "f_j": [195, 212], "gf_sqf": 195, "r713": 195, "geddes92": [195, 196], "gf_qmatrix": 195, "berlekamp": 195, "gf_qbasi": 195, "gf_berlekamp": 195, "gf_zassenhau": 195, "gf_shoup": 195, "gf_factor_sqf": 195, "gf_factor": 195, "e_d": 195, "cantor": 195, "zassenhau": [195, 197], "shoup": [195, 196], "kaltofen": [195, 196], "gathen": [195, 196], "gf_factor_method": 195, "r714": 195, "gf_valu": 195, "2204": 195, "gf_csolv": 195, "congruent": [195, 212, 215], "189": 195, "112": [195, 199], "139": 195, "r715": 195, "ivan": 195, "niven": 195, "zuckerman": 195, "montgomeri": 195, "infeas": [195, 198], "sdm_": 195, "distributedmodul": 195, "sdm_monomial_mul": 195, "sdm_monomial_deg": 195, "f_5": 195, "sdm_monomial_divid": 195, "sdm_lc": 195, "sdm_to_dict": 195, "sdm_from_dict": 195, "dic": 195, "sdm_add": 195, "2f_1": 195, "3f_1": 195, "yf_1": 195, "xf_1": 195, "sdm_lm": 195, "sdm_lt": 195, "sdm_mul_term": 195, "2xy": [195, 272], "4y": [195, 221, 267], "8xy": 195, "2y": [195, 215, 218, 221, 272], "sdm_zero": 195, "sdm_deg": 195, "sdm_from_vector": 195, "sdm_to_vector": 195, "variant": [195, 218, 221], "qg": 195, "remark": [195, 201, 212, 218], "uf": 195, "vg": 195, "zout": 195, "euclidtool": 195, "dmp_half_gcdex": 195, "dmp_gcdex": 195, "dmp_invert": 195, "dmp_euclidean_pr": 195, "dmp_primitive_pr": 195, "exceedingli": 195, "collin": [195, 196], "collins67": [195, 196], "subdomain": 195, "2l": 195, "remainin": 195, "subdetermin": 195, "n_2": [195, 222], "n_": [195, 215], "abnorm": 195, "gamma_i": 195, "brown": [195, 196, 222], "traub": [195, 196], "browntraub71": [195, 196], "brown78": [195, 196], "discoveri": [195, 274], "dmp_inner_subresult": 195, "729": 195, "sre": 195, "dmp_subresult": 195, "dmp_prs_result": 195, "dmp_zz_modular_result": 195, "dmp_zz_collins_result": 195, "dmp_qq_collins_result": 195, "dmp_result": 195, "dmp_discrimin": 195, "dmp_rr_prs_gcd": 195, "cff": [195, 198], "cfg": [195, 198], "dmp_ff_prs_gcd": 195, "dmp_zz_heu_gcd": 195, "r716": 195, "liao95": [195, 196], "dmp_qq_heu_gcd": 195, "dmp_inner_gcd": 195, "dmp_gcd": 195, "dmp_lcm": 195, "dmp_content": 195, "dmp_primit": 195, "dmp_cancel": 195, "dmp_trial_divis": 195, "dmp_zz_mignotte_bound": 195, "dup_zz_hensel_step": 195, "hensel": 195, "r717": 195, "dup_zz_hensel_lift": 195, "f_list": 195, "multifactor": 195, "r718": 195, "dup_zz_zassenhau": 195, "dup_zz_irreducible_p": 195, "eisenstein": 195, "dup_cyclotomic_p": 195, "bradford": 195, "russel": 195, "251": 195, "berlin": 195, "heidelberg": 195, "dup_zz_cyclotomic_poli": 195, "dup_zz_cyclotomic_factor": 195, "r719": 195, "weisstein09": [195, 196], "dup_zz_factor_sqf": 195, "dup_zz_factor": 195, "r720": 195, "dmp_zz_wang_non_divisor": 195, "wang": [195, 196], "eez": 195, "dmp_zz_wang_test_point": 195, "dmp_zz_wang_lead_coeff": 195, "dmp_zz_diophantin": 195, "dmp_zz_wang_hensel_lift": 195, "dmp_zz_wang": 195, "enhanc": [195, 222], "r721": 195, "wang78": [195, 196], "r722": 195, "dmp_zz_factor": 195, "r723": 195, "dmp_ext_factor": 195, "dup_gf_factor": 195, "dmp_factor_list": 195, "dmp_factor_list_includ": 195, "dmp_irreducible_p": 195, "groebnertool": 195, "polyconfig": [195, 198], "f5b": [195, 198], "spoli": 195, "red_groebn": 195, "beckerweispfenning93": 195, "is_groebn": 195, "is_minim": 195, "is_reduc": 195, "fglmtool": 195, "matrix_fglm": 195, "o_to": 195, "o_from": 195, "r724": 195, "fauger": [195, 198], "gianni": [195, 198, 220], "mora": [195, 196, 198, 220], "sdm_spoli": 195, "phantom": 195, "sca": 195, "defn": 195, "sdm_ecart": 195, "ecart": 195, "sdm_nf_mora": 195, "nf": 195, "sdm_groebner": 195, "sugar": [195, 196, 227], "giovini": [195, 196], "polyopt": [195, 199], "polyerror": [195, 198], "exc": 195, "orig": 195, "modulargcd": 195, "modgcd_univari": 195, "monagan00": [195, 196], "modgcd_bivari": 195, "modgcd_multivari": 195, "_modgcd_multivariate_p": 195, "brown71": [195, 196], "degbound": 195, "contbound": 195, "func_field_modgcd": 195, "reconstuct": 195, "z_p": 195, "spuriou": [195, 220], "hoeij04": [195, 196], "scarc": 195, "hsin": 196, "chao": 196, "liao": 196, "fateman": 196, "montreal": 196, "quebec": 196, "canada": 196, "240": [196, 204, 249], "247": [196, 220], "von": [196, 222], "zur": 196, "gerhard": 196, "cambridg": [196, 215], "weisstein": 196, "cyclotomicpolynomi": 196, "1215": 196, "1231": 196, "czapor": 196, "labahn": 196, "monagan": [196, 214], "disco": 196, "721": 196, "kaltofen98": 196, "subquadrat": 196, "223": 196, "1998": [196, 215], "1179": 196, "1197": 196, "shoup95": 196, "397": 196, "shoup91": 196, "cox97": [196, 198], "shea": [196, 198], "ajwa95": 196, "ajwa": 196, "liu": 196, "cites": [196, 214], "ist": [196, 211, 214], "psu": [196, 211, 214], "mycites": 196, "login": 196, "bose03": 196, "bose": 196, "guiver": 196, "giovini91": 196, "bronstein93": [196, 198], "salvi": [196, 199], "kiev": 196, "ukrain": 196, "buchberger01": [196, 198], "theorist": 196, "moreno": 196, "diaz": 196, "freir": 196, "eurocast": 196, "februari": 196, "davenport88": 196, "siret": 196, "tournier": 196, "london": [196, 215], "124": [196, 267], "greuel": 196, "pfister": 196, "atiyah": 196, "macdonald": 196, "142": 196, "1971": [196, 218], "505": 196, "237": 196, "249": 196, "wittkopf": 196, "478": 196, "hoeij": 196, "297": [196, 198], "304": [196, 198], "wang81": 196, "symsac": 196, "hoeij02": 196, "manwright94": [196, 198], "yiu": 196, "kwong": 196, "franci": 196, "wright": 196, "190347": 196, "190413": 196, "koepf98": [196, 198], "koepf": [196, 204, 214], "vieweg": 196, "abramov71": [196, 198], "abramov": [196, 220], "ussr": 196, "330": 196, "man93": [196, 198], "376": 196, "sciencedirect": 196, "pii": 196, "s0747717183710539": 196, "kapur1994": 196, "deepak": 196, "kapur": 196, "tushar": 196, "saxena": 196, "yang": 196, "dixon": 196, "researchg": [196, 222], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 196, "palancz08": 196, "pal\u00e1ncz": 196, "zaletnyik": 196, "jl": [196, 235], "awang": 196, "ew": 196, "grafarend": 196, "geodet": 196, "geodesi": 196, "225607735_dixon_result": 196, "s_solution_of_systems_of_geodetic_polynomial_equ": 196, "bruce97": 196, "bruce": 196, "randal": 196, "donald": [196, 237], "mundi": 196, "artifici": [196, 205], "intellig": [196, 214, 218, 278], "orlando": 196, "www2": 196, "duke": 196, "donaldlab": 196, "symbolicnumericalcomput": 196, "045": 196, "087": 196, "stiller96": 196, "stiller": 196, "citeseerx": [196, 211], "viewdoc": [196, 211, 214], "590": 196, "2021": 196, "rep1": [196, 211], "cohen93": [196, 197], "henri": 196, "olga": 197, "tausski": 197, "zimmer": 197, "pohst": 197, "articul": 197, "numberfield": 197, "mathfrak": 197, "regul": 197, "alpha_m": 197, "round_two": 197, "prime_decomp": 197, "prime_valu": 197, "minimal_polynomi": 197, "field_isomorph": 197, "nilrad": 197, "z_k": 197, "zk": 197, "ordinarili": 197, "503": 197, "r725": 197, "r726": 197, "powerbasisel": 197, "ramif": 197, "as_submodul": 197, "bundl": 197, "test_factor": 197, "deliber": 197, "is_inert": 197, "inert": [197, 218], "reduce_anp": 197, "elt": 197, "reduce_alg_num": 197, "field_gen": 197, "just_gen": 197, "reagent": 197, "kummer": 197, "1847": 197, "ueber": 197, "zerlegung": 197, "crell": 197, "r727": 197, "_minpoly_compos": 197, "stall": 197, "alli": 197, "monomorph": 197, "alpha_i": 197, "alpha_n": 197, "lincomb": 197, "primtiiv": 197, "meanwhil": 197, "moduleel": 197, "powerbasi": 197, "submodule_from_matrix": 197, "ancestor": 197, "to_col": 197, "nca": 197, "circumst": [197, 272], "_mult_tab": 197, "successfulli": 197, "moduleendomorph": 197, "innerendomorph": 197, "endomorphismr": 197, "spec": [197, 198], "i_n": [197, 198, 223], "include_self": 197, "basis_el": 197, "element_from_r": 197, "endomorphism_r": 197, "is_compat_col": 197, "mult_tab": 197, "mult": 197, "closurefailur": 197, "nearest_common_ancestor": 197, "number_field": 197, "power_basis_ancestor": 197, "incom": 197, "halv": 197, "submodule_from_gen": 197, "over_power_basi": 197, "starts_with_un": 197, "hnf_modulu": 197, "whole_submodul": 197, "element_from_anp": 197, "element_from_alg_num": 197, "element_from_poli": 197, "qq_matrix": 197, "basis_element_pullback": 197, "discard_befor": 197, "structureerror": 197, "cohen00": 197, "make_mod_elt": 197, "qq_col": 197, "from_int_list": 197, "is_compat": 197, "reduced_mod_p": 197, "to_ancestor": 197, "anc": 197, "to_par": 197, "to_anp": 197, "inner_endomorph": 197, "event": [197, 222], "find_min_poli": 197, "missingunityerror": 197, "is_int": 197, "get_num_denom": 197, "extract_fundamental_discrimin": 197, "r728": 197, "algintpow": 197, "zeta_pow": 197, "r729": 197, "coeff_search": 197, "supplement_a_subspac": 197, "dmrankerror": 197, "v_n": 197, "w_r": 197, "w_j": 197, "u_j": 197, "r730": 197, "mod_invers": 198, "exprtool": [198, 258], "gcd_term": 198, "destruct": 198, "2079": 198, "1401": 198, "2715": 198, "6720": 198, "1092": 198, "check_sqf": 198, "maxstep": 198, "cleanup": 198, "73205080756888": 198, "73205080756887729352744634151": 198, "r_f": 198, "r_g": 198, "_signsimp": 198, "q_n": 198, "donal": 198, "230": [198, 220], "ec": 198, "em": 198, "di": 198, "gp": [198, 218], "free_symbols_in_domain": 198, "from_poli": 198, "get_domain": 198, "get_modulu": 198, "has_only_gen": 198, "vincent": [198, 240], "akrita": 198, "strzebonski": 198, "va": 198, "alkiviadi": 198, "panagioti": 198, "vigkla": 198, "265": 198, "279": 198, "polnomi": 198, "is_multivari": 198, "is_univari": 198, "ltrim": 198, "rerun": [198, 233], "_only_": 198, "sturmian": 198, "subresultants_qq_zz": 198, "suffix": [198, 235], "_pg": 198, "_amv": 198, "rem_z": 198, "premultipli": 198, "rat_clear_denom": 198, "_ignor": 198, "retract": 198, "same_root": 198, "r0": 198, "set_domain": 198, "set_modulu": 198, "termwis": 198, "fglm": 198, "r731": 198, "horner_schem": 198, "equispac": 198, "min_degre": 198, "gib": 198, "monomial_kei": 198, "clear_cach": 198, "_get_interv": 198, "165": [198, 222, 240], "169": 198, "eval_approx": 198, "evalf_r": 198, "eval_r": 198, "69629": 198, "71318": 198, "805": 198, "3275": 198, "65536": [198, 201, 202], "414645": 198, "131072": 198, "6545": 198, "104755": 198, "2097152": 198, "6634255": 198, "_all_root": 198, "use_cach": 198, "_complexes_index": 198, "_complexes_sort": 198, "_count_root": 198, "_ensure_complexes_init": 198, "_ensure_reals_init": 198, "_eval_is_imaginari": 198, "_get_complex": 198, "_get_complexes_sqf": 198, "currentfactor": 198, "_get_real": 198, "_get_reals_sqf": 198, "_get_root": 198, "_indexed_root": 198, "_new": 198, "_postprocess_root": 198, "_preprocess_root": 198, "heroic": [198, 220], "_real_root": 198, "_reals_index": 198, "_reals_sort": 198, "_refine_complex": 198, "_roots_trivi": 198, "_set_interv": 198, "861136": 198, "86113631159405258": 198, "polyroot": 198, "quintic": [198, 220], "unread": [198, 238], "casu": 198, "irreducibili": 198, "unsolvablefactorerror": [198, 220], "inexpress": 198, "unsolv": [198, 221], "r732": 198, "cubic_funct": 198, "trigonometric_": 198, "28and_hyperbol": 198, "29_method": 198, "specialpoli": 198, "swinnerton": 198, "dyer": 198, "gegenbau": [198, 202], "jakob": 198, "psum": 198, "3144337": 198, "r733": 198, "reindex": 198, "swiss": 198, "knife": 198, "630": 198, "5124": 198, "12465": 198, "155": 198, "r734": 198, "partfrac": [198, 204], "undertermin": 198, "_w": [198, 209], "bunch": 198, "pfd": 198, "r735": 198, "partial_list": 198, "reassembl": 198, "pfda": 198, "r736": 198, "r737": 198, "r738": 198, "r739": 198, "r740": 198, "r741": 198, "r742": 198, "r743": 198, "widen": 199, "ring_seri": 199, "rs_sin": 199, "166666666666667": 199, "puiseux": 199, "rs_co": 199, "rs_tan": 199, "took": [199, 211], "eleg": [199, 201], "rs_exp": 199, "everyon": 199, "blazingli": 199, "promin": 199, "gradual": 199, "rs_": 199, "rs_log": 199, "rs_lambertw": 199, "rs_atan": 199, "arctang": 199, "rs_asin": 199, "_tan1": 199, "rs_cot": 199, "rs_cos_sin": 199, "rs_atanh": 199, "rs_sinh": 199, "rs_cosh": 199, "rs_tanh": 199, "rs_hadamard_exp": 199, "inver": 199, "rs_mul": 199, "rs_squar": 199, "rs_pow": 199, "rs_series_invers": 199, "rs_series_revers": 199, "a_kx_k": 199, "ar_i": 199, "ar_": 199, "ae": 199, "rs_trunc": 199, "rs_nth_root": 199, "160249952256379": 199, "44224957030741": 199, "rs_sub": 199, "rs_diff": 199, "rs_integr": 199, "rs_newton": 199, "rs_compose_add": 199, "r744": 199, "bostan": 199, "flajolet": 199, "schost": 199, "4579": 199, "institut": 199, "nation": 199, "recherch": 199, "informatiqu": 199, "automatiqu": 199, "rs_is_puiseux": 199, "rs_puiseux": 199, "rs_puiseux2": 199, "rs_series_from_list": 199, "concur": 199, "rs_fun": 199, "_tan": 199, "_nth": 199, "_root": 199, "_fun": 199, "mul_xin": 199, "pow_xin": 199, "_raw": 200, "unkown": 200, "eqs_r": 200, "eqs_coeff": 200, "eqs_rh": 200, "critiqu": 201, "wester1999": 201, "systemat": 201, "153": 201, "\u2124": [201, 202, 221, 279], "unm": 201, "driver": [202, 234], "adequ": 202, "emptyprint": 202, "_sympystr": 202, "mathml": 202, "inconveni": 202, "_print_": 202, "expr_class": 202, "hierarchi": [202, 222], "_print_rat": 202, "_print_numb": 202, "_print_atom": 202, "_print_bas": 202, "print_latex": 202, "mylatexprint": 202, "_print_deriv": 202, "print_my_latex": 202, "modop": 202, "subcompon": 202, "outermost": [202, 210, 214, 226], "modopmodewrong": 202, "modopnestedwrong": 202, "modopsettingswrong": 202, "subobject": 202, "infrastructur": [202, 219], "printer_exampl": 202, "set_global_set": 202, "stringpict": 202, "pretty_symbologi": 202, "prettyform": 202, "hline": 202, "vline": 202, "ascii": [202, 264], "_pretti": 202, "use_unicode_sqrt_char": 202, "root_not": 202, "mat_symbol_styl": 202, "prettifi": 202, "bold": 202, "c89codeprint": 202, "print_ccod": 202, "tgamma": 202, "known_functions_c89": 202, "known_functions_c99": 202, "fmax": 202, "fmin": 202, "lgamma": 202, "indent_cod": 202, "functionclass": [202, 241], "cfunction_format": 202, "derefer": 202, "dereferenc": 202, "symbols_to_declar": 202, "not_supported_funct": 202, "code_text": 202, "m_sqrt2": 202, "math_macro": 202, "m_sqrt2l": 202, "cxx": 202, "cxx98codeprint": 202, "print_rcod": 202, "rcode": 202, "known_funct": 202, "_rcode": 202, "rfunction_str": 202, "rfunction_format": 202, "ifels": 202, "type_map": 202, "name_mangl": 202, "mangl": 202, "floor1": 202, "floor2": 202, "print_fcod": 202, "_fcode": 202, "conjg": 202, "32768": 202, "7182818284590452d0": 202, "1415926535897932d0": 202, "718281828459045235360287d0": 202, "141592653589793238462643d0": 202, "869604401089358618834491d0": 202, "mygamma": 202, "allow_unknown_funct": 202, "smtlib": 202, "smtlibprint": 202, "symbol_t": 202, "_smtlib": 202, "_default_set": 202, "known_const": 202, "strictlessthan": [202, 243], "greaterthan": 202, "lessthan": 202, "ite": 202, "known_typ": 202, "smtlib_cod": 202, "auto_assert": 202, "auto_declar": 202, "prefix_express": 202, "suffix_express": 202, "log_warn": 202, "booleanfunct": 202, "dreal": 202, "numbersymbol": 202, "14159": 202, "my_smt_variable_for_pi": 202, "postfix": [202, 240], "riski": 202, "sound": [202, 278], "noop": 202, "pw": 202, "pythontyp": 202, "smt_builtin_func": 202, "existing_smtlib_fcn": 202, "user_def_func": 202, "fun": [202, 219, 271], "coshintegr": 202, "cosintegr": 202, "expintegralei": 202, "factorialpow": 202, "heavisidetheta": 202, "sinhintegr": 202, "sinintegr": 202, "arccosh": 202, "arccoth": 202, "arcsinh": 202, "arctanh": 202, "dirichleteta": 202, "gegenbauerc": 202, "hypergeometricpfq": 202, "sphericalbesselj": 202, "logintegr": 202, "lucasl": 202, "riemann_xi": 202, "riemannxi": 202, "stieltjesgamma": 202, "sphericalbess": 202, "mcodeprint": 202, "_mcode": 202, "mcode": 202, "maplecodeprint": 202, "_mapl": 202, "maple_cod": 202, "print_maple_cod": 202, "javascriptcodeprint": 202, "_javascript": 202, "js_function_str": 202, "known_fcns_src1": 202, "known_fcns_src2": 202, "conj": 202, "juliacodeprint": 202, "_julia": 202, "harmless": [202, 274], "cosmet": 202, "existing_julia_fcn": 202, "coshint": 202, "cosint": 202, "sinhint": 202, "sinint": 202, "bincoeff": 202, "logint": 202, "gammaln": 202, "octavecodeprint": 202, "_octav": 202, "recip": [202, 240], "powf": 202, "signum": 202, "rustcodeprint": 202, "_rust_cod": 202, "7_f64": 202, "_aesara": 202, "tensorvari": 202, "floatx": 202, "squeez": 202, "dim_handl": 202, "gtkmathview": 202, "widget": 202, "print_gtk": 202, "libgtkmathview": 202, "start_view": 202, "_lambdacod": 202, "accepted_latex_funct": 202, "parenthesize_sup": 202, "fold_frac_pow": 202, "fold_func_bracket": 202, "fold_short_frac": 202, "inv_trig_styl": 202, "itex": 202, "ln_notat": 202, "long_frac_ratio": 202, "mat_delim": 202, "mat_str": 202, "mul_symbol": 202, "symbol_nam": 202, "gothic_re_im": 202, "decimal_separ": 202, "diff_oper": 202, "smallmatrix": [202, 272], "amsmath": 202, "fracton": 202, "semicolon": 202, "monospac": 202, "mathtt": 202, "mathml2": 202, "mathmlprinterbas": 202, "mathmlcontentprint": 202, "mathmlpresentationprint": 202, "chapter4": 202, "_mathml_cont": 202, "mathml_tag": 202, "chapter3": 202, "_mathml_present": 202, "utf": 202, "mul_symbol_mathml_numb": 202, "xb7": 202, "print_mathml": [202, 277], "mrow": 202, "mpmathprint": 202, "fully_qualified_modul": 202, "print_python": 202, "textual": 202, "reprprint": 202, "_sympyrepr": 202, "reprifi": 202, "sympy_integ": 202, "displayhook": [202, 233], "pprint_nod": 202, "nb2": 202, "print_nod": 202, "asssumpt": 202, "determinisit": 202, "backtrac": 202, "print_tre": 202, "outputbuff": 202, "dvioption": 202, "outputtexfil": 202, "extra_preambl": 202, "latex_set": 202, "postscript": 202, "tex": 202, "eulervm": 202, "sty": 202, "debian": 202, "ubuntu": 202, "unset": [202, 214], "gimp": 202, "evinc": 202, "kdvi": 202, "xdvi": 202, "xdg": 202, "system_default_view": 202, "gracefulli": [202, 226], "generet": 202, "bytesio": 202, "usepackag": 202, "amsfont": 202, "renewcommand": 202, "popen": 202, "phidd": 202, "bitmap": 202, "split_super_sub": 202, "var_sub1__sup_sub2": 202, "assignmenterror": 202, "bitwiseand": 202, "bitwiseor": 202, "bitwisexor": 202, "precedence_valu": 202, "kroneckerproduct": 202, "negativeinfin": 202, "tensadd": [202, 225, 228], "tensmul": [202, 225, 228], "precedence_funct": 202, "precedence_float": 202, "precedence_fracel": 202, "precedence_integ": 202, "precedence_mul": 202, "precedence_polyel": 202, "precedence_r": 202, "precedence_unevaluatedexpr": 202, "databas": [202, 212], "pretty_use_unicod": 202, "pretty_try_use_unicod": 202, "xstr": 202, "greek_lett": 202, "digit_2txt": 202, "ONE": 202, "seven": 202, "symb_2txt": 202, "parenthesi": [202, 226], "\u2080": 202, "\u2081": 202, "\u2082": 202, "\u2083": 202, "\u2084": 202, "\u2085": 202, "\u2086": 202, "\u2087": 202, "\u2088": 202, "\u2089": 202, "\u2090": 202, "\u1d66": 202, "\u1d6a": 202, "\u2091": 202, "\u1d67": 202, "\u2095": 202, "\u1d62": 202, "\u2096": 202, "\u2097": 202, "\u2098": 202, "\u2099": 202, "\u2092": 202, "\u209a": 202, "\u1d69": 202, "\u1d63": 202, "\u1d68": 202, "\u209b": 202, "\u209c": 202, "\u1d64": 202, "\u1d65": 202, "\u2093": 202, "\u2070": 202, "\u00b9": 202, "\u00b2": 202, "\u00b3": 202, "\u2074": 202, "\u2075": 202, "\u2076": 202, "\u2077": 202, "\u2078": 202, "\u2079": 202, "\u2071": 202, "\u207f": 202, "xobj": 202, "vobj": 202, "hobj": 202, "vf": 202, "\u00bd": 202, "\u2153": 202, "\u00bc": 202, "\u2155": 202, "\u2159": 202, "\u215b": 202, "\u2154": 202, "\u2156": 202, "\u00be": 202, "\u2157": 202, "\u215c": 202, "\u2158": 202, "\u215a": 202, "\u215d": 202, "\u215e": 202, "xsym": 202, "symbologi": 202, "atoms_t": 202, "\u2102": [202, 279], "emptysequ": [202, 208], "exp1": 202, "\u2115": 202, "\u2115\u2080": 202, "\u211d": [202, 279], "symmetricdiffer": [202, 221], "pretty_atom": 202, "atom_nam": 202, "pretty_symbol": 202, "symb_nam": 202, "bold_nam": 202, "stylis": 202, "_print_meijerg": 202, "_print_hyp": 202, "jurjen": 202, "bo": 202, "hate": 202, "spammer": 202, "pietjepuk314": 202, "oc": [202, 252], "oohai": 202, "gedg": 202, "email": 202, "my": [202, 267], "mun": 202, "terminal_str": 202, "baselin": 202, "leftslash": 202, "slash": [202, 233], "paren": 202, "ifascii_nougli": 202, "line_break": 202, "ugli": 202, "terminal_width": 202, "wider": 202, "maxdepth": 202, "labelfunc": 202, "digraph": [202, 240, 277], "rankdir": [202, 277], "_sparse_": 203, "flavor": 203, "________": [203, 222, 240], "x\u2080": 203, "greatli": 203, "numbered_symbol": [203, 214, 218, 240], "postprocessor": [203, 214], "reduced_expr": [203, 214], "formalpowerseri": [204, 206], "coeff_bel": 204, "formalpowerseriescompos": [204, 206], "r745": 204, "comtet": 204, "loui": 204, "reidel": 204, "1974": 204, "720": [204, 218, 240], "formalpowerseriesinvers": [204, 206], "r746": 204, "upto": [204, 209, 218], "formalpowerseriesproduct": [204, 206], "rational_algorithm": 204, "compute_fp": [204, 206], "hyper_algorithm": 204, "omposit": 204, "bell_seq": 204, "finiteformalpowerseri": [204, 206], "rational_independ": 204, "ra": 204, "admiss": [204, 207], "r747": 204, "r748": 204, "simpled": 204, "exp_r": 204, "explik": 204, "hyper_r": 204, "rsolve_hypergeometr": 204, "r749": 204, "r750": 204, "solve_d": 204, "fourierseri": [205, 206], "scalex": 205, "shiftx": 205, "sigma_approxim": 205, "gibb": 205, "bigl": 205, "bigr": 205, "lanczo": 205, "r751": 205, "gibbs_phenomenon": 205, "r752": 205, "sawtooth": 205, "bn": 205, "r753": 205, "difference_delta": [206, 207], "limit_seq": [206, 207, 209], "limitseq": 207, "r754": 207, "differencedelta": 207, "safeguard": 207, "r755": 207, "kauer": 207, "seqper": 208, "seqformula": 208, "seqbas": 208, "coeff_mul": 208, "find_linear_recurr": 208, "gfvar": 208, "seqadd": 208, "seqmul": 208, "_mul": 208, "recursiveseq": 208, "fib": 208, "invok": [209, 233, 234], "workhors": 209, "succ": [209, 222], "asymp": 209, "exposit": 209, "gloss": 209, "wsym": 209, "test_rewrite1": 209, "build_expression_tre": 209, "mrv_leadterm": 209, "e0": 209, "calculate_seri": 209, "limitinf": 209, "constantli": 209, "subsset": 209, "mrv_max1": 209, "mrv_max3": 209, "expsf": 209, "expsg": 209, "expsboth": 209, "o2": 209, "do_sub": 209, "r756": 209, "7048138294": 209, "7182818285": 209, "6349839002": 209, "6449340668": 209, "shank": 209, "6881721793": 209, "6931396564": 209, "6931471806": 209, "6931471805599453094172321215": 209, "r757": 209, "residue_theorem": 209, "neighborhood": 210, "rim": 210, "affirm": 210, "infimum": 210, "is_clos": 210, "closed": 210, "is_disjoint": 210, "r758": 210, "disjoint_set": 210, "is_open": 210, "is_proper_subset": 210, "is_proper_superset": 210, "left_open": 210, "is_superset": 210, "isdisjoint": 210, "issubset": 210, "issuperset": 210, "fancyset": 210, "lebesgu": 210, "r759": 210, "power_set": 210, "symmetric_differ": 210, "r760": 210, "right_open": 210, "mpi": 210, "r761": 210, "interval_": 210, "as_rel": 210, "is_left_unbound": 210, "is_right_unbound": 210, "r762": 210, "r763": 210, "union_": 210, "28set_theori": 210, "r764": 210, "intersection_": 210, "coin": [210, 222], "r765": 210, "cartesian_product": 210, "is_iter": 210, "r766": 210, "complementset": 210, "r767": 210, "disjoint_union": 210, "r768": 210, "empty_set": 210, "r769": 210, "universal_set": 210, "flambda": 210, "square_iter": 210, "base_set": 210, "cartesiancomplexregion": 210, "polarcomplexregion": 210, "unit_disk": 210, "upper_half_unit_disk": 210, "a_interv": 210, "b_interv": 210, "from_real": 210, "pset": 210, "rset": 210, "thetaset": 210, "upper_half_plan": 210, "normalize_theta_set": 210, "r770": 210, "r771": 210, "axiom_of_power_set": 210, "varnoth": 210, "sin_sol": 210, "r772": 210, "element_": 210, "tr0": 211, "tr1": 211, "tr2": 211, "tr2i": 211, "tr3": 211, "tr4": 211, "tr5": 211, "tr6": 211, "tr7": 211, "tr8": 211, "tr9": 211, "tr10": 211, "tr10i": 211, "tr11": 211, "tr12": 211, "tr12i": 211, "tr13": 211, "trmorri": 211, "tr14": 211, "tr15": 211, "tr16": 211, "tr22": 211, "tr111": 211, "ctr1": 211, "ctr4": 211, "rl1": 211, "rl2": 211, "deem": 211, "932": 211, "016": 211, "serendipit": 211, "dead": 211, "newa": 211, "lucki": 211, "sqt": 211, "_tr56": 211, "un": [211, 212], "r773": 211, "morri": 211, "27s_law": 211, "trpower": 211, "r774": 211, "list_of_trigonometric_ident": 211, "reduction_formula": 211, "ctr2": 211, "ctr3": 211, "r775": 211, "657": 211, "2478": 211, "dimitar": 211, "vlahovski": 211, "technolog": 211, "xiuqin": 211, "zhong": 211, "zhenb": 211, "zeng": 211, "1169": 211, "1177": 211, "sosmath": 211, "trig5": 211, "symplifi": [212, 214], "roach1996": 212, "roach1997": 212, "p_q": 212, "reachabl": [212, 222], "f_q": 212, "undo": [212, 278], "whenc": 212, "game": 212, "twofold": 212, "incongru": 212, "wlog": 212, "alpha_r": 212, "beta_r": 212, "blindli": 212, "messi": 212, "k_u": 212, "l_v": 212, "k_j": 212, "c_w": 212, "r_j": 212, "l_u": 212, "res_": 212, "delta_i": 212, "add_formula": 212, "addb": 212, "sum_0": 212, "test_hyperexpand": 212, "test_formula": 212, "typo": 212, "suboptim": 212, "imath": 212, "b1prime": 212, "vital": [212, 222], "308": 212, "nthroot": 213, "kroneckersimp": 213, "besselsimp": 213, "hypersimilar": 213, "epath": 213, "hongguang": [213, 258], "fu": [213, 214, 258], "unmodifi": 214, "my_measur": 214, "boolian": 214, "max_len": 214, "surd": 214, "strigonometr": 214, "399": 214, "rational_convers": 214, "base10": 214, "6004799503160655": 214, "nfloat": 214, "eq_x": 214, "max_term": 214, "polish": 214, "expand_power_bas": 214, "rcollect": 214, "analyz": [214, 227], "r776": 214, "pearc": 214, "163": 214, "6984": 214, "trigsimp_groebn": 214, "bb1": 214, "be1": 214, "bb2": 214, "be2": 214, "bei": 214, "max_it": 214, "unrad": [214, 220], "r777": 214, "ibm": 214, "fagin": 214, "symb85": 214, "r778": 214, "cybertest": 214, "opt_sub": 214, "as_unevaluated_bas": 214, "hyperegeometr": 214, "epathtool": 214, "ebnf": 214, "za": [214, 222], "xml": 214, "xpath": 214, "hasattr": [214, 236], "diophantu": 215, "mathematician": [215, 221], "citi": 215, "alexandria": 215, "father": 215, "hi": 215, "arithmetica": 215, "a_1x_1": 215, "a_2x_2": 215, "a_nx_n": 215, "bxy": 215, "cy": 215, "dxy": 215, "eyz": 215, "fzx": 215, "pythagorean": 215, "3y": 215, "4ac": 215, "9369318": 215, "920": 215, "5y": 215, "BY": 215, "t4": 215, "t5": 215, "providean": 215, "eqyptian": 215, "thilinaatsympi": 215, "andreescu": 215, "titu": 215, "andrica": 215, "dorin": 215, "cucurezeanu": 215, "ion": 215, "diophantineequ": 215, "alpertron": 215, "20160323033111": 215, "jpr2718": 215, "ax2p": 215, "permute_sign": [215, 240], "signed_permut": [215, 240], "_dict": 215, "r779": 215, "r780": 215, "pell": 215, "lmm": 215, "r781": 215, "393": 215, "13y": 215, "986": 215, "49299": 215, "1570": 215, "robertson": 215, "20160323033128": 215, "r782": 215, "nitaj": 215, "r783": 215, "numbertheori": 215, "r784": 215, "r785": 215, "676": 215, "884": 215, "fxz": 215, "3xy": 215, "r786": 215, "fxy": 215, "gyz": 215, "hxz": 215, "r787": 215, "cremona": 215, "rusin": 215, "2x_": 215, "m4": 215, "general_sum_of_squar": 215, "8m": 215, "r788": 215, "2345": 215, "proofwiki": 215, "integer_as_sum_of_three_squar": 215, "general_sum_of_even_pow": 215, "1729": 215, "stopiter": 215, "r789": 215, "44542": 215, "207": 215, "schorn": 215, "3456": 215, "1294585930293": 215, "2161": 215, "1137796": 215, "r790": 215, "evenli": 215, "var_t": 215, "r791": 215, "ur": 215, "dv": 215, "vr": 215, "r792": 215, "r793": 215, "nigel": 215, "y_0": [215, 218], "4x": [215, 221, 267], "5x": 215, "r794": 215, "r795": 215, "eprint": 215, "nottingham": 215, "uk": 215, "kvxefz87": 215, "r796": 215, "cuhk": 215, "hk": 215, "wkshum": 215, "404": 215, "r797": 215, "mordel": 215, "r798": 215, "r799": 215, "r800": 215, "r801": 215, "legrang": 215, "csusm": 215, "aitken_html": 215, "symbols_seq": 215, "dict_iter": 215, "r802": 215, "r803": 215, "inhomogen": [215, 218, 220], "r804": 215, "thue": 215, "solve_rational_inequ": [216, 217], "solve_poly_inequ": [216, 217], "reduce_rational_inequ": [216, 217], "reduce_abs_inequ": [216, 217], "solve_univariate_inequ": [216, 217, 221], "riccati": 216, "pde": [216, 218], "deutil": [216, 218, 219], "linear_eq_to_matrix": [216, 218], "transolv": 216, "subcategori": [217, 257], "solvifi": [217, 221], "autodetect": [218, 219], "ode_ord": [218, 219, 220], "best_hint": 218, "all_integr": [218, 219], "_integr": [218, 219], "unevaluat": 218, "test_od": 218, "ode_": 218, "hintnam": [218, 219], "classify_sysod": 218, "ode_hintnam": 218, "tough": 218, "nth_linear_homogeneous_constant_coeff_integr": 218, "nth_linear": 218, "indep": 218, "indep_div_dep": 218, "undetermined_coeffici": 218, "_best": 218, "nth_algebraic_integr": 218, "separable_integr": 218, "1st_exact_integr": 218, "1st_linear_integr": 218, "bernoulli_integr": 218, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 218, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 218, "nth_linear_constant_coeff_variation_of_parameters_integr": 218, "solve_for_func": [218, 219], "homogeneouscoeffsubsdepdivindep": 218, "homogeneouscoeffsubsindepdivdep": 218, "varepsilon": 218, "genform": [218, 219], "starrett": 218, "symbolnam": 218, "startnumb": 218, "endnumb": 218, "renumb": 218, "absorpt": 218, "assist": 218, "2nd_hypergeometric_integr": 218, "almost_linear_integr": 218, "linear_coefficients_integr": 218, "separable_reduced_integr": 218, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 218, "liouville_integr": 218, "2nd_nonlinear_autonomous_conserv": 218, "2nd_nonlinear_autonomous_conserved_integr": 218, "newconst": 218, "ode_sol_simpl": 218, "trysolv": 218, "sola": 218, "solb": 218, "listofsolut": 218, "ode_problem": 218, "firstexact": 218, "exact_differential_equ": 218, "tenenbaum": 218, "dover": 218, "1963": 218, "homogeneouscoeffbest": 218, "ode_1st_homogeneous_coeff_best_integr": 218, "homogeneous_differential_equ": 218, "firstlinear": 218, "linear_differential_equ": 218, "first_order_equ": 218, "rationalriccati": 218, "atleast": 218, "riccati_equ": 218, "thieu": 218, "vo": 218, "www3": [218, 247], "risc_5387": 218, "phdthesisthieu": 218, "secondlinearairi": 218, "secondlinearbessel": 218, "math24": 218, "bernoulli_differential_equ": 218, "goldstein": 218, "braun": 218, "maplesoft": 218, "aspx": 218, "odeadvisor": 218, "riccatispeci": 218, "__________________": 218, "eqworld": 218, "ipmnet": 218, "ru": 218, "ode0106": 218, "ode0123": 218, "nthlinearconstantcoeffhomogen": 218, "nth_linear_constant_coeff_homogeneous_integr": 218, "nonhomogeneous_equation_with_constant_coeffici": 218, "nthlinearconstantcoeffundeterminedcoeffici": 218, "method_of_undetermined_coeffici": 218, "221": 218, "nthlinearconstantcoeffvariationofparamet": 218, "cramer": 218, "variation_of_paramet": 218, "planetmath": 218, "variationofparamet": 218, "nthlineareulereqhomogen": 218, "equidimension": 218, "nth_linear_euler_eq_homogeneous_integr": 218, "sollist": 218, "93euler_equ": 218, "bender": 218, "orszag": 218, "scientist": 218, "nthlineareulereqnonhomogeneousvariationofparamet": 218, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 218, "nthalgebra": 218, "nthorderreduc": 218, "caught": 218, "fault": 218, "almostlinear": 218, "first_linear": 218, "joel": 218, "mose": 218, "stormi": 218, "decad": 218, "august": [218, 237], "558": 218, "linearcoeffici": 218, "separablereduc": 218, "liegroup": 218, "secondhypergeometr": 218, "2f1": 218, "1f1": 218, "0f1": 218, "liouvillian": 218, "pfq": 218, "chan": 218, "cheb": 218, "terrab": 218, "ode_1st_power_seri": 218, "travi": [218, 233], "walker": 218, "ode_2nd_power_series_ordinari": 218, "lamar": 218, "seriessolut": 218, "simmon": 218, "176": 218, "ode_2nd_power_series_regular": 218, "lie_heuristic_abaco1_simpl": 218, "duart": 218, "da": 218, "mota": 218, "lie_heuristic_abaco1_product": 218, "roch": 218, "lie_heuristic_bivari": 218, "329": 218, "lie_heuristic_chi": 218, "lie_heuristic_abaco2_similar": 218, "lie_heuristic_function_sum": 218, "lie_heuristic_abaco2_unique_unknown": 218, "lie_heuristic_abaco2_unique_gener": 218, "lie_heuristic_linear": 218, "gy": 218, "bh": 218, "impract": 218, "val_inf": 218, "ybar": 218, "numa": 218, "dena": 218, "numi": 218, "deni": 218, "sol1": 218, "sol2": 218, "part_sol": 218, "haaheim": 218, "gensol": 218, "_linear_2eq_order1_type6": 218, "_linear_2eq_order1_type7": 218, "fgp": 218, "ag": 218, "bg": 218, "linear_ode_to_matrix": 218, "odeordererror": 218, "odenonlinearerror": 218, "eqs_mat": 218, "r805": 218, "matrix_differential_equ": 218, "canonical_od": 218, "canonical_eq": 218, "canonical_system": 218, "linodesolve_typ": 218, "type1": 218, "type2": 218, "type3": 218, "type4": 218, "type5": 218, "type6": 218, "type_of_equ": 218, "a_t": 218, "a_non_commut": 218, "matrix_exp_jordan_form": 218, "expj": 218, "matrix_exp": 218, "defect": 218, "p_invers": 218, "r806": 218, "defective_matrix": 218, "r807": 218, "r808": 218, "jordan_normal_form": 218, "comupt": 218, "r809": 218, "r810": 218, "matrix_exponenti": 218, "follw": 218, "antiderv": 218, "subscheck": 218, "system_info": 218, "sol_vector": 218, "sol_vector_evalu": 218, "_nonlinear_2eq_order1_type1": 218, "_nonlinear_2eq_order1_type2": 218, "_nonlinear_2eq_order1_type3": 218, "autonom": 218, "_nonlinear_2eq_order1_type4": 218, "_nonlinear_2eq_order1_type5": 218, "clairaut": 218, "envelop": 218, "_nonlinear_3eq_order1_type1": 218, "enspac": [218, 221], "sysod": 218, "sode0401": 218, "_nonlinear_3eq_order1_type2": 218, "sode0402": 218, "_nonlinear_3eq_order1_type3": 218, "sode0404": 218, "_nonlinear_3eq_order1_type4": 218, "sode0405": 218, "_nonlinear_3eq_order1_type5": 218, "sode0406": 218, "_handle_integr": 218, "gather": 218, "unhind": 218, "wolphramalpha": 218, "detool": 218, "hint_integr": 218, "alphanumer": 218, "hinder": 218, "matching_hint": 218, "matchdict": 218, "1st_homogeneous_coeff": 218, "your_hint": 218, "xfail": [218, 231, 233], "uxt": 219, "uxi": 219, "solvefun": 219, "test_pd": 219, "pde_hintnam": 219, "ux": 219, "allhint": 219, "1st_linear_constant_coeff_homogen": 219, "_preprocess": 219, "inabl": 219, "_xi_1": 219, "viktor": 219, "grigoryan": 219, "124a": 219, "substack": 219, "1st_linear_constant_coeff_integr": 219, "du": 219, "inspir": [219, 274], "pde_hint": 219, "checksol": 220, "ect": 220, "attain": [220, 251], "star": 220, "052": 220, "cov": 220, "pval": 220, "xval": 220, "rsolv": 220, "solve_linear": 220, "solve_linear_system": 220, "msymbol": 220, "degener": [220, 221], "solve_linear_system_lu": 220, "solve_undetermined_coeff": 220, "equ": 220, "73908513321516064165531208767387340401341175890076": 220, "steep": 220, "39267e": 220, "1684e": 220, "588469032184": 220, "315": 220, "730061685774": 220, "46792545969349058": 220, "inconclus": 220, "init": 220, "dissimilar": 220, "v_0": 220, "n_m": 220, "v_m": 220, "rsolve_poli": 220, "rsolve_ratio": 220, "r811": 220, "levelt": 220, "290": [220, 249], "296": 220, "r812": 220, "r813": 220, "revis": 220, "r814": 220, "289": 220, "alembertian": 220, "r815": 220, "r816": 220, "polysi": 220, "solve_triangul": 220, "kalkbrenn": 220, "patrizia": 220, "teo": 220, "aaecc": 220, "conditionset": [221, 222, 279], "productset": 221, "imageset": [221, 279], "complexregion": 221, "uncount": 221, "bizarr": 221, "her": 221, "sol_f": 221, "solveset_r": 221, "solveset_complex": 221, "methodologi": [221, 271], "_solve_real_trig": 221, "invert_r": 221, "invert_complex": 221, "_solve_rad": 221, "_solve_ab": 221, "_solve_as_r": 221, "_solve_as_poly_r": 221, "_solve_as_poly_complex": 221, "_solve_as_poli": 221, "gsoc": 221, "2014": [221, 222], "iamit": 221, "2948": 221, "6659": 221, "7523": 221, "sibx0afl3q": 221, "9696": 221, "27s_theorem": 221, "inftyright": 221, "nright": 221, "0right": 221, "domain_check": 221, "3z": 221, "9z": 221, "nonlinearerror": 221, "4z": 221, "cccc": 221, "eq3": 221, "eq4": 221, "391": 221, "_solve_system": 221, "_solve_using_known_valu": 221, "_transolv": 221, "_tsolv": 221, "tsolv": 221, "outright": 221, "tractabl": 221, "interf": 221, "add_typ": 221, "_is_exponenti": 221, "new_eq": 221, "_solve_exponenti": 221, "_is_class": 221, "_solve_class": 221, "_solve_expo": 221, "9x": 221, "solve_expo": 221, "log_b": 221, "_solve_logarithm": 221, "solve_log": 221, "_is_logarithm": 221, "prebuilt": 222, "finiterv": 222, "varianc": 222, "dice": 222, "continuousrv": 222, "continuousdistributionhandmad": 222, "dist": 222, "discreterv": 222, "discretedistributionhandmad": 222, "pmf": 222, "finitedistributionhandmad": 222, "discreteuniform": 222, "randomsymbol": 222, "r817": 222, "discrete_uniform_distribut": 222, "r818": 222, "discreteuniformdistribut": 222, "d6": 222, "diedistribut": 222, "toss": 222, "r819": 222, "bernoulli_distribut": 222, "r820": 222, "bernoullidistribut": 222, "numeb": 222, "unfair": 222, "r821": 222, "coin_flip": 222, "binomialdistribut": 222, "r822": 222, "binomial_distribut": 222, "r823": 222, "betabinomi": 222, "r824": 222, "r825": 222, "betabinomialdistribut": 222, "popul": 222, "marbl": 222, "r826": 222, "hypergeometric_distribut": 222, "r827": 222, "hypergeometricdistribut": 222, "700000000000000": 222, "r828": 222, "rademacher_distribut": 222, "r829": 222, "geometric_distribut": 222, "r830": 222, "geometricdistribut": 222, "r831": 222, "hermite_distribut": 222, "poisson": 222, "r832": 222, "poisson_distribut": 222, "r833": 222, "poissondistribut": 222, "r834": 222, "logarithmic_distribut": 222, "r835": 222, "logarithmicdistribut": 222, "negativebinomi": 222, "r836": 222, "negative_binomial_distribut": 222, "r837": 222, "negativebinomialdistribut": 222, "skellam": 222, "mu1": 222, "mu2": 222, "mu_1": 222, "mu_2": 222, "i_k": 222, "r838": 222, "skellam_distribut": 222, "yulesimon": 222, "yule": 222, "simon": 222, "r839": 222, "93simon_distribut": 222, "8100": 222, "r840": 222, "zeta_distribut": 222, "cdf": 222, "r841": 222, "arcsine_distribut": 222, "benini": 222, "r842": 222, "benini_distribut": 222, "r843": 222, "v8": 222, "beninidistribut": 222, "r844": 222, "beta_distribut": 222, "r845": 222, "betadistribut": 222, "betanoncentr": 222, "noncentr": 222, "r846": 222, "noncentral_beta_distribut": 222, "r847": 222, "noncentralbetadistribut": 222, "betaprim": 222, "r848": 222, "beta_prime_distribut": 222, "r849": 222, "betaprimedistribut": 222, "boundedpareto": 222, "pareto": 222, "r850": 222, "pareto_distribut": 222, "bounded_pareto_distribut": 222, "r851": 222, "cauchy_distribut": 222, "r852": 222, "cauchydistribut": 222, "r853": 222, "chi_distribut": 222, "r854": 222, "chidistribut": 222, "chinoncentr": 222, "r855": 222, "noncentral_chi_distribut": 222, "chisquar": 222, "r856": 222, "chi_squared_distribut": 222, "r857": 222, "squareddistribut": 222, "dagum": 222, "r858": 222, "dagum_distribut": 222, "erlang": 222, "r859": 222, "erlang_distribut": 222, "r860": 222, "erlangdistribut": 222, "exgaussian": 222, "emg": 222, "r861": 222, "exponentially_modified_gaussian_distribut": 222, "quantil": 222, "r862": 222, "exponential_distribut": 222, "r863": 222, "exponentialdistribut": 222, "fdistribut": 222, "______________________________": 222, "r864": 222, "r865": 222, "fisherz": 222, "fisher": 222, "2d_1": 222, "d_1z": 222, "d_1e": 222, "r866": 222, "27s_z": 222, "r867": 222, "fishersz": 222, "frechet": 222, "r868": 222, "a9chet_distribut": 222, "r869": 222, "gamma_distribut": 222, "r870": 222, "gammadistribut": 222, "gammainvers": 222, "r871": 222, "gompertz": 222, "r872": 222, "gompertz_distribut": 222, "gumbel": 222, "dfrac": 222, "r873": 222, "gumbeldistribut": 222, "r874": 222, "gumbel_distribut": 222, "r875": 222, "mathwav": 222, "easyfit": 222, "gumbel_max": 222, "r876": 222, "gumbel_min": 222, "kumaraswami": 222, "r877": 222, "kumaraswamy_distribut": 222, "r878": 222, "laplace_distribut": 222, "r879": 222, "laplacedistribut": 222, "r880": 222, "a9vy_distribut": 222, "r881": 222, "levydistribut": 222, "logist": 222, "r882": 222, "logistic_distribut": 222, "r883": 222, "logisticdistribut": 222, "loglogist": 222, "unimod": 222, "r884": 222, "lognorm": 222, "r885": 222, "r886": 222, "lognormaldistribut": 222, "lomax": 222, "r887": 222, "lomax_distribut": 222, "maxwel": 222, "2a": 222, "r888": 222, "maxwell_distribut": 222, "r889": 222, "maxwelldistribut": 222, "moyal": 222, "r890": 222, "moyaldistribut": 222, "r891": 222, "rice": 222, "dobelman": 222, "textfil": 222, "distributionshandbook": 222, "nakagami": 222, "r892": 222, "nakagami_distribut": 222, "marginal_distribut": 222, "r893": 222, "normal_distribut": 222, "r894": 222, "normaldistributionfunct": 222, "xm": 222, "x_m": 222, "r895": 222, "r896": 222, "paretodistribut": 222, "powerfunct": 222, "paramat": 222, "r897": 222, "power_func": 222, "quadraticu": 222, "r898": 222, "quadratic_distribut": 222, "raisedcosin": 222, "r899": 222, "raised_cosine_distribut": 222, "r900": 222, "rayleigh_distribut": 222, "r901": 222, "rayleighdistribut": 222, "r902": 222, "reciprocal_distribut": 222, "studentt": 222, "r903": 222, "student_t": 222, "r904": 222, "studentst": 222, "shiftedgompertz": 222, "r905": 222, "shifted_gompertz_distribut": 222, "r906": 222, "trapezoidal_distribut": 222, "r907": 222, "triangular_distribut": 222, "r908": 222, "triangulardistribut": 222, "r909": 222, "uniform_distribution_": 222, "28continu": 222, "r910": 222, "uniformdistribut": 222, "uniformsum": 222, "irwin": 222, "r911": 222, "uniform_sum_distribut": 222, "r912": 222, "uniformsumdistribut": 222, "vonmis": 222, "mise": 222, "i_0": 222, "r913": 222, "von_mises_distribut": 222, "r914": 222, "vonmisesdistribut": 222, "wald": 222, "gaussianinvers": 222, "r915": 222, "inverse_gaussian_distribut": 222, "r916": 222, "inversegaussiandistribut": 222, "weibul": 222, "geq0": 222, "r917": 222, "weibull_distribut": 222, "r918": 222, "weibulldistribut": 222, "wignersemicircl": 222, "semicircl": 222, "frac2": 222, "r919": 222, "wigner_semicircle_distribut": 222, "r920": 222, "wignerssemicirclelaw": 222, "jointrv": 222, "_set": 222, "multivariatenorm": 222, "noninvert": 222, "ob": 222, "r921": 222, "multivariate_normal_distribut": 222, "multivariatelaplac": 222, "r922": 222, "multivariate_laplace_distribut": 222, "generalizedmultivariateloggamma": 222, "joint_rv_typ": 222, "gd": 222, "y_3": 222, "gmvlg": 222, "generalizedmultivariateloggammaomega": 222, "r923": 222, "generalized_multivariate_log": 222, "r924": 222, "234137346_on_a_multivariate_log": 222, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 222, "correl": 222, "gmvlgo": 222, "r925": 222, "r926": 222, "r927": 222, "multinomial_distribut": 222, "r928": 222, "multinomialdistribut": 222, "multivariatebeta": 222, "r929": 222, "dirichlet_distribut": 222, "r930": 222, "dirichletdistribut": 222, "multivariateewen": 222, "ewen": 222, "r931": 222, "27s_sampling_formula": 222, "r932": 222, "rutger": 222, "hcrane": 222, "sts529": 222, "multivariatet": 222, "negativemultinomi": 222, "n_c": 222, "r933": 222, "negative_multinomial_distribut": 222, "r934": 222, "normalgamma": 222, "r935": 222, "discretemarkovchain": 222, "state_spac": 222, "trans_prob": 222, "markov": 222, "characteris": 222, "transitionmatrixof": 222, "transition_prob": 222, "sunni": 222, "cloudi": 222, "raini": 222, "randomindexedsymbol": 222, "409": 222, "6963328": 222, "3096": 222, "query_gt": 222, "64705": 222, "r936": 222, "markov_chain": 222, "time_markov_chain": 222, "r937": 222, "dartmouth": 222, "teaching_aid": 222, "books_articl": 222, "probability_book": 222, "chapter11": 222, "canonical_form": 222, "transient": 222, "p_new": 222, "new_matrix": 222, "communication_class": 222, "r938": 222, "onlinelibrari": 222, "wilei": 222, "1002": 222, "9780470316887": 222, "app1": 222, "r939": 222, "columbia": 222, "ww2040": 222, "6711f12": 222, "lect1023big": 222, "is_recurr": 222, "tarjan": [222, 240], "r940": 222, "4701sum07": 222, "4701": 222, "mcii": 222, "r941": 222, "ceca": 222, "clemson": 222, "shierd": 222, "shier": 222, "r942": 222, "ujcont": 222, "uj": 222, "7506": 222, "content1": 222, "r943": 222, "econ": 222, "dtmc": 222, "reccur": 222, "r944": 222, "absorbing_markov_chain": 222, "r945": 222, "brandei": 222, "igusa": 222, "math56as08": 222, "math56a_s08_notes015": 222, "fixed_row_vector": 222, "stationary_distribut": 222, "fundamental_matrix": 222, "r946": 222, "lip": 222, "limiting_distribut": 222, "condition_set": 222, "wm": 222, "r947": 222, "probabilitycours": 222, "11_2_6_stationary_and_limiting_distribut": 222, "r948": 222, "galton": 222, "uchicago": 222, "yibi": 222, "stat317": 222, "lecture4_6up": 222, "continuousmarkovchain": 222, "gen_mat": 222, "generator_matrix": 222, "45279": 222, "58602": 222, "37933": 222, "34211": 222, "7143": 222, "4002723175": 222, "6832579186": 222, "r949": 222, "r950": 222, "biu": 222, "il": 222, "amirgi": 222, "ctmcnote": 222, "bernoulliprocess": 222, "processs": 222, "joint_distribut": 222, "jointdistributionhandmad": 222, "r951": 222, "bernoulli_process": 222, "r952": 222, "mathc": 222, "clarku": 222, "djoyc": 222, "ma217": 222, "given_condit": 222, "poissonprocess": 222, "648": 222, "r953": 222, "11_0_0_intro": 222, "r954": 222, "poisson_point_process": 222, "wiener": 222, "brownian": 222, "scottish": 222, "botanist": 222, "r955": 222, "11_4_0_brownian_motion_wiener_process": 222, "r956": 222, "wiener_process": 222, "gammaprocess": 222, "jump": [222, 278], "472": 222, "r957": 222, "gamma_process": 222, "matrixgamma": 222, "scale_matrix": 222, "r958": 222, "matrix_gamma_distribut": 222, "wishart": 222, "r959": 222, "wishart_distribut": 222, "matrixnorm": 222, "location_matrix": 222, "scale_matrix_1": 222, "scale_matrix_2": 222, "r960": 222, "matrix_normal_distribut": 222, "compound_rv": 222, "compounddistribut": 222, "crv_type": 222, "r961": 222, "compound_probability_distribut": 222, "numsampl": 222, "evaluate_integr": 222, "r962": 222, "entropy_": 222, "information_theori": 222, "r963": 222, "crmarsh": 222, "charles_marsh_continuous_entropi": 222, "r964": 222, "uconn": 222, "kconrad": 222, "blurb": 222, "entropypost": 222, "arg1": 222, "arg2": 222, "cexpr": 222, "coskew": 222, "sigma_": 222, "r965": 222, "r966": 222, "probability_distribut": 222, "randomst": 222, "die_rol": 222, "samp": 222, "pspace": 222, "samp_list": 222, "sam": 222, "42519758": 222, "40207856": 222, "94991743": 222, "85819627": 222, "83403519": 222, "9412172": 222, "85768055": 222, "38954165": 222, "11163337": 222, "3176591": 222, "79115232": 222, "63232916": 222, "01747268": 222, "96716083": 222, "sampling_p": 222, "sampling_": 222, "factorial_mo": 222, "r967": 222, "r968": 222, "factorialmo": 222, "kurtosi": 222, "outlier": 222, "sigma_x": 222, "r969": 222, "r970": 222, "asymmetri": 222, "pearson": 222, "sampling_dens": 222, "centralmo": 222, "cmoment": 222, "expectationmatrix": 222, "randommatrixsymbol": 222, "n11": 222, "n12": 222, "n21": 222, "n22": 222, "variancematrix": 222, "crosscovariancematrix": 222, "randomdomain": 222, "singledomain": 222, "singlepspac": 222, "productdomain": 222, "productpspac": 222, "conditionaldomain": 222, "frv": 222, "finitedomain": 222, "finitepspac": 222, "crv": 222, "continuousdomain": 222, "continuouspspac": 222, "diepspac": 222, "singlefinitepspac": 222, "normalpspac": 222, "singlecontinuouspspac": 222, "frv_type": 222, "randomvari": 222, "tactic": 222, "random_symbol": 222, "rs_swap": 222, "pspace1": 222, "pspace2": 222, "immutabledensendimarrai": [223, 225], "tomatrix": 223, "j_m": 223, "i_a": 223, "i_b": 223, "sum_k": 223, "tensorcontract": [223, 224, 225], "tensordiagon": [223, 224, 225], "derive_by_arrai": [223, 225], "sum_m": 223, "immutablesparsendimarrai": [223, 225], "mutabledensendimarrai": [223, 225], "mutablesparsendimarrai": [223, 225], "index_order_old": 223, "index_order_new": 223, "cab": 223, "contraction_ax": 223, "diagonal_ax": 223, "arraycontract": 224, "arraydiagon": 224, "arraysymbol": 224, "convert_indexed_to_arrai": 224, "arrayadd": 224, "convert_matrix_to_arrai": 224, "convert_array_to_matrix": 224, "expr_tr": 224, "array_der": 224, "get_contraction_structur": [225, 226, 227], "get_indic": [225, 226, 227, 228, 229], "tensorindextyp": [225, 228, 229], "tensorhead": [225, 228, 229], "canon_bp": [225, 228], "contract_metr": [225, 228], "get_free_indic": [225, 228, 229], "perm2tensor": [225, 228], "sorted_compon": [225, 228], "riemann_cyclic_replac": [225, 228], "riemann_cycl": [225, 228], "tensorsymmetri": [225, 228], "direct_product": [225, 228], "fully_symmetr": [225, 228], "no_symmetri": [225, 228], "tensortyp": [225, 228], "_tensormanag": [225, 228], "comm_i2symbol": [225, 228], "comm_symbols2i": [225, 228], "get_comm": [225, 228], "set_comm": [225, 228], "partialderiv": [225, 229], "index_method": 226, "deepest": 226, "nested_contract": 226, "indexconformanceexcept": 226, "______": 227, "stem": 227, "dim1": 227, "dim2": 227, "qwerti": 227, "a_ij": 227, "b_ij": 227, "syntact": 227, "a_real": 227, "c_inherit": 227, "c_explicit": 227, "unrol": 227, "eps_dim": 228, "metric_nam": 228, "su": 228, "lorentz": 228, "tensor_index_typ": 228, "is_up": 228, "tensor_inde_typ": 228, "typ": 228, "index_typ": 228, "monoterm": 228, "asym2": 228, "tensori": [228, 229], "e_z": 228, "p_x": 228, "p_y": 228, "p_z": 228, "ipos1": 228, "ipos2": 228, "icomp1": 228, "icomp2": 228, "nameless": 228, "replacement_dict": 228, "free_arg": 228, "addend": 228, "contract_al": 228, "ipo": 228, "icomp": 228, "nonrep": 228, "dum": 228, "ext_rank": 228, "is_canon_bp": 228, "tid": 228, "cadabra": 228, "multiterm": 228, "bianchi": 228, "sym2": 228, "monotorem": 228, "tableaux": 228, "repetit": [228, 240], "tensormanag": 228, "gcomm": 228, "ghcomm": 228, "toper": 229, "valenc": 229, "uncontract": 229, "compa": 229, "compb": 229, "derivand": 229, "nocache_fail": [230, 231], "pytestreport": [230, 233], "sympydoctestfind": [230, 233], "sympydoctestrunn": [230, 233], "sympyoutputcheck": [230, 233], "sympytestresult": [230, 233], "convert_to_native_path": [230, 233], "get_sympy_dir": [230, 233], "raise_on_deprec": [230, 233], "run_all_test": [230, 233], "run_in_subprocess_with_hash_random": [230, 233], "split_list": [230, 233], "sympytestfil": [230, 233], "xpass": [231, 233], "expectedexcept": 231, "assertionerror": 231, "exceptioninfo": 231, "abort": 231, "9999": 231, "warningcl": [231, 238], "test_stacklevel": 231, "randtest": 232, "portabl": [233, 234], "force_color": 233, "readlin": 233, "doctestpars": 233, "exclude_empti": 233, "checker": 233, "optionflag": 233, "5140": 233, "doctestrunn": 233, "clear_glob": 233, "writer": 233, "garbag": 233, "check_output": 233, "report_": 233, "outputcheck": 233, "stdlib": 233, "testrunn": 233, "lst": 233, "blacklist": 233, "deprecationwarn": [233, 238], "test_arg": 233, "test_kwarg": 233, "doctest_arg": 233, "doctest_kwarg": 233, "examples_arg": 233, "examples_kwarg": 233, "function_kwarg": 233, "virtualenv": 233, "pythonhashse": 233, "_test": 233, "module_rel": 233, "extraglob": 233, "raise_on_error": 233, "basenam": [233, 234, 235], "slate": 233, "dont_accept_true_for_1": 233, "dont_accept_blanklin": 233, "normalize_whitespac": 233, "ellipsi": 233, "ignore_exception_detail": 233, "report_udiff": 233, "report_cdiff": 233, "report_ndiff": 233, "report_only_first_failur": 233, "mortem": 233, "tomfooleri": 233, "testmod": 233, "tester": 233, "fiddl": [233, 278], "timeout": 233, "keyboardinterrupt": 233, "interrupt": 233, "_basic": 233, "kw": 233, "test_equ": 233, "pdb": 233, "pipe": 233, "time_bal": 233, "tandem": 234, "matvec": 234, "codewrapp": 234, "distutil": 234, "fwrap": 234, "swig": 234, "binary_cal": 234, "22925376": 234, "25165824": 234, "_imp_": [234, 241], "filepath": 234, "cythoncodewrapp": 234, "dump_pyx": 234, "dummywrapp": 234, "f2pycodewrapp": 234, "ufuncifycodewrapp": 234, "dump_c": [234, 235], "funcnam": 234, "code_gen": [234, 235], "argument_tupl": 234, "include_dir": 234, "library_dir": 234, "extra_compile_arg": 234, "extra_link_arg": 234, "symfunc": [234, 241], "funtion_nam": 234, "ndimension": 234, "f_fortran": 234, "f_cython": 234, "r971": 234, "fortran77": 235, "fortran90": 235, "julia": [235, 265], "rust": [235, 265], "mileston": 235, "unsurmount": 235, "pyf": 235, "inputoutput": 235, "tcc": 235, "libtcc": 235, "date": 235, "hostnam": 235, "sha1": 235, "ccodegen": 235, "preprocessor_stat": 235, "dump_h": 235, "guard": 235, "get_prototyp": 235, "codegenerror": 235, "function_prototyp": 235, "dump_cod": 235, "cname": 235, "fname": 235, "pynam": 235, "jlname": 235, "octnam": 235, "rsname": 235, "fcodegen": 235, "f90": 235, "dump_f95": 235, "get_interfac": 235, "juliacodegen": 235, "dump_jl": 235, "octavecodegen": 235, "dump_m": 235, "returnvalu": 235, "destin": 235, "local_var": 235, "result_vari": 235, "ot": 235, "unnam": 235, "rustcodegen": 235, "dump_r": 235, "f_result": 235, "myfcn": 235, "fcn2": 235, "myfcn_result": 235, "void": 235, "get_default_datatyp": 235, "complex_allow": 235, "agnost": 235, "conserve_mpmath_dp": [236, 239], "doctest_depends_on": [236, 239], "disable_view": 236, "python_vers": 236, "memoize_properti": [236, 239], "propfunc": 236, "no_attrs_in_subclass": [236, 239], "__all__": 236, "some_funct": 236, "thread": [236, 239], "xthread": [236, 239], "threaded_factori": [236, 239], "use_add": 236, "multiset_partitions_taocp": [237, 239], "visitor": 237, "pstack": 237, "lpart": 237, "topmost": 237, "partcompon": 237, "peek": [237, 278], "unpredict": 237, "list_visitor": [237, 239], "abb": [237, 240], "factoring_visitor": [237, 239], "multisetpartitiontravers": [237, 239], "aocp": 237, "count_partit": 237, "127750": 237, "686": 237, "4a": 237, "factorisatio": 237, "oppenheim": 237, "numerorum": 237, "canfield": 237, "erdo": 237, "OF": 237, "yorgei": 237, "monad": 237, "persist": 237, "288716": 237, "memoiz": [237, 239, 265], "dramat": 237, "hypothet": 237, "borrow": 237, "coalesc": 237, "_rang": 237, "stretch": 237, "brain": 237, "histogram": 237, "enum_al": 237, "enum_larg": 237, "enum_rang": 237, "enum_smal": 237, "ub": 237, "parti": 238, "catch_warn": 238, "simplefilt": 238, "dedent": [238, 243], "enum": [239, 265], "lambdastr": [239, 241], "assoc_recurrence_memo": [239, 242], "recurrence_memo": [239, 242], "debug_decor": [239, 243], "fillded": [239, 243], "find_execut": [239, 243], "rawlin": [239, 243], "strline": [239, 243], "pkgdata": [239, 265], "get_resourc": [239, 244], "get_class": [239, 245], "get_mod_func": [239, 245], "kbin": 240, "partion": 240, "ordered_partit": 240, "bcd": 240, "notiter": 240, "binary_partit": 240, "r972": 240, "taocp": 240, "nx": 240, "common_prefix": 240, "common_suffix": 240, "unhash": 240, "r973": 240, "connected_component_": 240, "graph_theori": 240, "r974": 240, "27s_strongly_connected_components_algorithm": 240, "dict_merg": 240, "filter_symbol": 240, "myop": 240, "kog": 240, "informatik": 240, "hamburg": 240, "mein": 240, "python_trick": 240, "neighbor": 240, "xxxxxx": 240, "xxxx": 240, "r975": 240, "method_ring": 240, "r976": 240, "4856615": 240, "4857018": 240, "r977": 240, "programminggeek": 240, "r978": 240, "steinhau": 240, "93johnson": 240, "93trotter_algorithm": 240, "r979": 240, "involut": 240, "eco": 240, "vajnovszki": 240, "dmtc": 240, "generate_involut": 240, "r980": 240, "permutationinvolut": 240, "generate_oriented_forest": 240, "forest": 240, "acycl": 240, "r981": 240, "beyer": 240, "hedetniemi": 240, "novemb": 240, "r982": 240, "1633833": 240, "has_dup": 240, "has_varieti": 240, "iproduct": 240, "abcbb": 240, "is_sequ": 240, "generatortyp": 240, "_iter": 240, "ordered_flag": 240, "least_rot": 240, "rotate_left": 240, "r983": 240, "lexicographically_minimal_string_rot": 240, "minlex": 240, "acb": 240, "11010011000": 240, "00011010011": 240, "00011001011": 240, "aaa": 240, "abi": 240, "bby": 240, "abracadabra": 240, "banana": 240, "multiset_derang": 240, "uniq": 240, "1233": 240, "3312": 240, "3321": 240, "aba": 240, "baa": 240, "bead": 240, "ooo": 240, "r984": 240, "r985": 240, "jeromekelleh": 240, "r986": 240, "jerom": 240, "kelleh": 240, "barri": 240, "sullivan": 240, "0909": 240, "2331v2": 240, "r987": 240, "activest": 240, "218332": 240, "random_derang": 240, "reseed": 240, "rotate_right": 240, "roundrobin": 240, "ef": 240, "credit": [240, 263], "sakki": 240, "keyfunc": 240, "subgraph": 240, "r988": 240, "r989": 240, "longest": 240, "r990": 240, "unflatten": 240, "afunc": 241, "dummifi": 241, "use_imp": 241, "custom_sin": 241, "38177329": 241, "49315059": 241, "8414709848078965": 241, "eager": 241, "enable_eager_execut": 241, "eagertensor": 241, "__class__": 241, "placehold": 241, "user_guid": 241, "runtimewarn": 241, "sin_cos_sympi": 241, "sin_co": 241, "sin_cos_numpi": 241, "38177329068": 241, "module_dictionari": 241, "_lambdifygener": 241, "__globals__": 241, "lambdaprint": [241, 265], "90929743": [241, 267], "base_seq": 242, "memo": 242, "pn0": 242, "specfun": 242, "__index__": 243, "sanit": 243, "99999999999999991611392": 243, "pathsep": 243, "pastabl": 243, "bee": 243, "spamham": 243, "sha": 243, "spam": 243, "egg": 243, "md5": 243, "eggsham": 243, "r991": 243, "6116978": 243, "roken": 243, "deletechar": 243, "multicharact": 243, "oldchar": 243, "newchar": 243, "acquir": 244, "getresourc": 244, "pkgname": 244, "pkgpath": 244, "dirnam": 244, "normpath": 244, "rb": 244, "__loader__": 244, "stringio": 244, "ioerror": 244, "mydata": 244, "mypkgdata": 244, "jpg": 244, "lookup_view": 245, "callback": 245, "timeutil": 246, "coordsysrect": 247, "rotation_matrix": [247, 248, 251], "vector_nam": 247, "variable_nam": [247, 253], "latex_vect": 247, "pretty_vect": 247, "latex_scalar": 247, "pretty_scalar": 247, "new_system": 247, "create_new": [247, 251], "transformation_to_par": 247, "transformation_from_par": 247, "locate_new": [247, 249, 250, 251, 252, 253], "position_wrt": [247, 250, 251, 252], "orient_new": [247, 248], "axisorient": [247, 251, 254], "axis_orient": [247, 251], "bodyorient": [247, 251, 254], "body_orient": [247, 248, 251], "spaceorient": [247, 251, 254], "space_orient": [247, 248], "quaternionorient": [247, 251, 254], "q_orient": [247, 248], "orient_new_axi": [247, 249, 251], "orient_new_bodi": [247, 251], "angle1": [247, 248], "angle2": [247, 248], "angle3": [247, 248], "euler_angl": [247, 248], "orient_new_quaternion": [247, 251], "orient_new_spac": [247, 251], "coordsyrect": 247, "v_a": 247, "v_b": 247, "scalar_map": 247, "basevector": [247, 250, 251], "delop": [247, 252, 253], "r992": 247, "r993": 247, "basedyad": [247, 250], "second_system": 247, "deloper": [247, 254], "curl": [247, 254, 256], "parabola": 247, "rational_parametr": 247, "singular_point": 247, "regular_point": 247, "reg_point": 247, "implict": 247, "cubic_curv": 247, "calulc": 247, "hoffmann": 247, "purdu": 247, "lib": [247, 265], "cgi": 247, "viewcont": 247, "1827": 247, "cstech": 247, "erik": 247, "hillgart": 247, "diploma": 247, "linz": 247, "universitat": 247, "availa": 247, "risc_1355": 247, "20point": 247, "20on": 247, "20conic": 247, "semispher": [247, 256], "coordsys3d": [248, 249, 250, 252, 253, 254, 256], "axis_orienter1": 248, "axis_orienter2": 248, "axis_orienter3": 248, "body_orienter1": 248, "body_orienter2": 248, "body_orienter3": 248, "system2": 249, "parametricregion": [249, 254, 256], "implicitregion": [249, 254, 256], "essenc": 250, "vectormul": 250, "vectoradd": 250, "ofcours": 250, "vectorzero": 250, "expressli": 250, "express_coordin": [250, 251], "dyadicmul": 250, "dyadicadd": 250, "cleanest": 251, "orient_new_": 251, "basescalar": [251, 253], "oabc": 252, "oa": 252, "pq": 252, "sr": 252, "wikidel": 252, "ffield": 252, "gradient_field": 253, "instantan": 253, "directional_deriv": 253, "lame": 253, "quadrilater": 254, "flux": 254, "parametricintegr": 254, "matrix_to_vector": 254, "vector_integr": [254, 256], "dyadicproduct": 254, "quantifi": 255, "throughtout": 255, "necesssari": 256, "param_circl": 256, "implicit_circl": 256, "obextj": 256, "solidspher": 256, "lamina": 256, "\ud835\udc45": 256, "cylind": 256, "vectorfield": 256, "hemispher": 256, "top_fac": 256, "bottom_fac": 256, "27_theorem": 256, "cone": 256, "divergence_theorem": 256, "12288": 256, "cnode": 259, "cxxnode": 259, "fnode": 259, "pyutil": 259, "cutil": 259, "futil": 259, "ecm": 262, "copyright": 263, "truss": 263, "pappu": 264, "hexagon": 264, "prettyprint": 265, "rcodeprint": 265, "smt": 265, "javascript": [265, 277], "gtk": 265, "mathmlprint": 265, "pythoncodeprint": 265, "pythonprint": 265, "dotprint": [265, 273, 277], "str_expr": 267, "82842712474619": 267, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 267, "0874989834394464": 267, "roundoff": 267, "14112001": 267, "7568025": 267, "95892427": 267, "2794155": 267, "6569866": 267, "98935825": 267, "41211849": 267, "0998334166468": 267, "sympy_nam": 267, "numerical_funct": 267, "rephras": 268, "oh": 268, "integration_vari": 268, "dfdx": 268, "equidistantli": 268, "d2fdx2": 268, "django": 270, "oop": 270, "crazi": 270, "abcdef": 270, "reevalu": 270, "infal": 270, "insight": 271, "entertain": 271, "preliminari": 271, "82842712475": 272, "cass": 272, "wrote": [272, 273], "theme": 272, "expanded_expr": 272, "whet": 272, "appetit": 272, "c\u2082": [272, 279], "c\u2081": [272, 279], "\u03bd": 272, "sell": 272, "battl": 272, "confid": 272, "gigabyt": 272, "tear": 273, "stopper": 273, "uexpr": 273, "unevalutedexpr": 273, "downsid": 274, "algebraic_multipl": 274, "pdp": 274, "undertest": 274, "underevalu": 274, "my_iszero": 274, "stronger": 274, "tradeoff": 274, "wonder": 274, "5b7c3e8ee5b40332abdb206c": 274, "15141": 274, "19548": 274, "10120": 274, "10279": 274, "constant_problem": 274, "possiblezeroq": 274, "mupad_ref": 274, "iszero": 274, "congratul": 275, "decent": 276, "austin": 276, "video": 276, "bvar": 277, "unnecessarili": 278, "whittl": 278, "catchal": 278, "collected_expr": 278, "cdot1": 278, "undertak": 278, "undon": 278, "cdot2": 278, "nck": 278, "pronounc": 278, "_2f_1": 278, "cfrac": 278, "list_to_frac": 278, "a\u2080": 278, "a\u2083": 278, "a\u2084": 278, "pointless": 278, "orig_frac": 278, "diffeq": 279}, "objects": {"": [[26, 0, 0, "-", "sympy"]], "sympy": [[28, 0, 0, "-", "abc"], [29, 0, 0, "-", "algebras"], [32, 0, 0, "-", "assumptions"], [35, 0, 0, "-", "calculus"], [36, 0, 0, "-", "categories"], [57, 0, 0, "-", "diffgeom"], [58, 0, 0, "-", "discrete"], [62, 0, 0, "-", "functions"], [75, 0, 0, "-", "holonomic"], [82, 0, 0, "-", "integrals"], [83, 0, 0, "-", "interactive"], [84, 0, 0, "-", "liealgebras"], [85, 0, 0, "-", "logic"], [90, 0, 0, "-", "matrices"], [97, 0, 0, "-", "parsing"], [263, 0, 0, "-", "physics"], [198, 0, 0, "-", "polys"], [220, 0, 0, "-", "solvers"], [222, 0, 0, "-", "stats"], [225, 0, 0, "-", "tensor"], [230, 0, 0, "-", "testing"], [239, 0, 0, "-", "utilities"], [254, 0, 0, "-", "vector"]], "sympy.algebras": [[29, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[29, 2, 1, "", "add"], [29, 2, 1, "", "angle"], [29, 2, 1, "", "arc_coplanar"], [29, 2, 1, "", "axis"], [29, 2, 1, "", "exp"], [29, 2, 1, "", "from_axis_angle"], [29, 2, 1, "", "from_rotation_matrix"], [29, 2, 1, "", "index_vector"], [29, 2, 1, "", "integrate"], [29, 2, 1, "", "inverse"], [29, 2, 1, "", "is_pure"], [29, 2, 1, "", "is_zero_quaternion"], [29, 2, 1, "", "mensor"], [29, 2, 1, "", "mul"], [29, 2, 1, "", "norm"], [29, 2, 1, "", "normalize"], [29, 2, 1, "", "orthogonal"], [29, 2, 1, "", "parallel"], [29, 2, 1, "", "pow"], [29, 2, 1, "", "pow_cos_sin"], [29, 2, 1, "", "rotate_point"], [29, 2, 1, "", "scalar_part"], [29, 2, 1, "", "to_axis_angle"], [29, 2, 1, "", "to_rotation_matrix"], [29, 2, 1, "", "vector_coplanar"], [29, 2, 1, "", "vector_part"]], "sympy.assumptions": [[30, 0, 0, "-", "ask"], [31, 0, 0, "-", "assume"], [33, 0, 0, "-", "predicates"], [34, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[30, 1, 1, "", "AssumptionKeys"], [30, 3, 1, "", "ask"], [30, 3, 1, "", "register_handler"], [30, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[31, 1, 1, "", "AppliedPredicate"], [31, 1, 1, "", "AssumptionsContext"], [31, 1, 1, "", "Predicate"], [31, 1, 1, "", "UndefinedPredicate"], [31, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[31, 4, 1, "", "arg"], [31, 4, 1, "", "arguments"], [31, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[31, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[31, 2, 1, "", "eval"], [31, 5, 1, "", "handler"], [31, 2, 1, "", "register"], [31, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[33, 1, 1, "", "FinitePredicate"], [33, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[33, 1, 1, "", "CommutativePredicate"], [33, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[33, 1, 1, "", "ComplexElementsPredicate"], [33, 1, 1, "", "DiagonalPredicate"], [33, 1, 1, "", "FullRankPredicate"], [33, 1, 1, "", "IntegerElementsPredicate"], [33, 1, 1, "", "InvertiblePredicate"], [33, 1, 1, "", "LowerTriangularPredicate"], [33, 1, 1, "", "NormalPredicate"], [33, 1, 1, "", "OrthogonalPredicate"], [33, 1, 1, "", "PositiveDefinitePredicate"], [33, 1, 1, "", "RealElementsPredicate"], [33, 1, 1, "", "SingularPredicate"], [33, 1, 1, "", "SquarePredicate"], [33, 1, 1, "", "SymmetricPredicate"], [33, 1, 1, "", "TriangularPredicate"], [33, 1, 1, "", "UnitTriangularPredicate"], [33, 1, 1, "", "UnitaryPredicate"], [33, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[33, 1, 1, "", "CompositePredicate"], [33, 1, 1, "", "EvenPredicate"], [33, 1, 1, "", "OddPredicate"], [33, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[33, 1, 1, "", "NegativePredicate"], [33, 1, 1, "", "NonNegativePredicate"], [33, 1, 1, "", "NonPositivePredicate"], [33, 1, 1, "", "NonZeroPredicate"], [33, 1, 1, "", "PositivePredicate"], [33, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[33, 1, 1, "", "AlgebraicPredicate"], [33, 1, 1, "", "AntihermitianPredicate"], [33, 1, 1, "", "ComplexPredicate"], [33, 1, 1, "", "ExtendedRealPredicate"], [33, 1, 1, "", "HermitianPredicate"], [33, 1, 1, "", "ImaginaryPredicate"], [33, 1, 1, "", "IntegerPredicate"], [33, 1, 1, "", "IrrationalPredicate"], [33, 1, 1, "", "RationalPredicate"], [33, 1, 1, "", "RealPredicate"], [33, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[33, 5, 1, "", "AlgebraicHandler"], [33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[33, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[34, 3, 1, "", "refine"], [34, 3, 1, "", "refine_Pow"], [34, 3, 1, "", "refine_abs"], [34, 3, 1, "", "refine_arg"], [34, 3, 1, "", "refine_atan2"], [34, 3, 1, "", "refine_im"], [34, 3, 1, "", "refine_matrixelement"], [34, 3, 1, "", "refine_re"], [34, 3, 1, "", "refine_sign"]], "sympy.calculus": [[35, 0, 0, "-", "euler"], [35, 0, 0, "-", "finite_diff"], [35, 0, 0, "-", "singularities"], [35, 0, 0, "-", "util"]], "sympy.calculus.euler": [[35, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[35, 3, 1, "", "apply_finite_diff"], [35, 3, 1, "", "differentiate_finite"], [35, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[35, 3, 1, "", "is_decreasing"], [35, 3, 1, "", "is_increasing"], [35, 3, 1, "", "is_monotonic"], [35, 3, 1, "", "is_strictly_decreasing"], [35, 3, 1, "", "is_strictly_increasing"], [35, 3, 1, "", "monotonicity_helper"], [35, 3, 1, "", "singularities"]], "sympy.calculus.util": [[35, 3, 1, "", "continuous_domain"], [35, 3, 1, "", "function_range"], [35, 3, 1, "", "is_convex"], [35, 3, 1, "", "lcim"], [35, 3, 1, "", "maximum"], [35, 3, 1, "", "minimum"], [35, 3, 1, "", "not_empty_in"], [35, 3, 1, "", "periodicity"], [35, 3, 1, "", "stationary_points"]], "sympy.categories": [[36, 1, 1, "", "Category"], [36, 1, 1, "", "CompositeMorphism"], [36, 1, 1, "", "Diagram"], [36, 1, 1, "", "IdentityMorphism"], [36, 1, 1, "", "Morphism"], [36, 1, 1, "", "NamedMorphism"], [36, 1, 1, "", "Object"], [36, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[36, 4, 1, "", "commutative_diagrams"], [36, 4, 1, "", "name"], [36, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[36, 4, 1, "", "codomain"], [36, 4, 1, "", "components"], [36, 4, 1, "", "domain"], [36, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[36, 4, 1, "", "conclusions"], [36, 2, 1, "", "hom"], [36, 2, 1, "", "is_subdiagram"], [36, 4, 1, "", "objects"], [36, 4, 1, "", "premises"], [36, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[36, 4, 1, "", "codomain"], [36, 2, 1, "", "compose"], [36, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[36, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[36, 1, 1, "", "ArrowStringDescription"], [36, 1, 1, "", "DiagramGrid"], [36, 1, 1, "", "XypicDiagramDrawer"], [36, 3, 1, "", "preview_diagram"], [36, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[36, 4, 1, "", "height"], [36, 4, 1, "", "morphisms"], [36, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[36, 2, 1, "", "draw"]], "sympy.codegen": [[37, 0, 0, "-", "algorithms"], [37, 0, 0, "-", "approximations"], [37, 0, 0, "-", "ast"], [37, 0, 0, "-", "cfunctions"], [37, 0, 0, "-", "cnodes"], [37, 0, 0, "-", "cutils"], [37, 0, 0, "-", "cxxnodes"], [37, 0, 0, "-", "fnodes"], [37, 0, 0, "-", "futils"], [37, 0, 0, "-", "matrix_nodes"], [37, 0, 0, "-", "pyutils"], [37, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[37, 3, 1, "", "newtons_method"], [37, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[37, 1, 1, "", "SeriesApprox"], [37, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[37, 1, 1, "", "Assignment"], [37, 1, 1, "", "AssignmentBase"], [37, 1, 1, "", "Attribute"], [37, 1, 1, "", "AugmentedAssignment"], [37, 1, 1, "", "BreakToken"], [37, 1, 1, "", "CodeBlock"], [37, 1, 1, "", "Comment"], [37, 1, 1, "", "ComplexType"], [37, 1, 1, "", "ContinueToken"], [37, 1, 1, "", "Declaration"], [37, 1, 1, "", "Element"], [37, 1, 1, "", "FloatBaseType"], [37, 1, 1, "", "FloatType"], [37, 1, 1, "", "For"], [37, 1, 1, "", "FunctionCall"], [37, 1, 1, "", "FunctionDefinition"], [37, 1, 1, "", "FunctionPrototype"], [37, 1, 1, "", "IntBaseType"], [37, 1, 1, "", "Node"], [37, 1, 1, "", "NoneToken"], [37, 1, 1, "", "Pointer"], [37, 1, 1, "", "Print"], [37, 1, 1, "", "QuotedString"], [37, 1, 1, "", "Return"], [37, 1, 1, "", "Scope"], [37, 1, 1, "", "SignedIntType"], [37, 1, 1, "", "Stream"], [37, 1, 1, "", "String"], [37, 1, 1, "", "Token"], [37, 1, 1, "", "Type"], [37, 1, 1, "", "UnsignedIntType"], [37, 1, 1, "", "Variable"], [37, 1, 1, "", "While"], [37, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[37, 2, 1, "", "cse"], [37, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[37, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[37, 2, 1, "", "cast_nocheck"], [37, 4, 1, "", "decimal_dig"], [37, 4, 1, "", "dig"], [37, 4, 1, "", "eps"], [37, 4, 1, "", "max"], [37, 4, 1, "", "max_exponent"], [37, 4, 1, "", "min_exponent"], [37, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[37, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[37, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[37, 2, 1, "", "cast_check"], [37, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[37, 2, 1, "", "as_Declaration"], [37, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[37, 1, 1, "", "Cbrt"], [37, 1, 1, "", "Sqrt"], [37, 1, 1, "", "exp2"], [37, 1, 1, "", "expm1"], [37, 1, 1, "", "fma"], [37, 1, 1, "", "hypot"], [37, 1, 1, "", "log10"], [37, 1, 1, "", "log1p"], [37, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[37, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[37, 1, 1, "", "CommaOperator"], [37, 1, 1, "", "Label"], [37, 1, 1, "", "PostDecrement"], [37, 1, 1, "", "PostIncrement"], [37, 1, 1, "", "PreDecrement"], [37, 1, 1, "", "PreIncrement"], [37, 3, 1, "", "alignof"], [37, 1, 1, "", "goto"], [37, 3, 1, "", "sizeof"], [37, 1, 1, "", "struct"], [37, 1, 1, "", "union"]], "sympy.codegen.cutils": [[37, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[37, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[37, 1, 1, "", "ArrayConstructor"], [37, 1, 1, "", "Do"], [37, 1, 1, "", "Extent"], [37, 1, 1, "", "FortranReturn"], [37, 1, 1, "", "GoTo"], [37, 1, 1, "", "ImpliedDoLoop"], [37, 1, 1, "", "Module"], [37, 1, 1, "", "Program"], [37, 1, 1, "", "Subroutine"], [37, 1, 1, "", "SubroutineCall"], [37, 3, 1, "", "allocated"], [37, 3, 1, "", "array"], [37, 3, 1, "", "bind_C"], [37, 1, 1, "", "cmplx"], [37, 3, 1, "", "dimension"], [37, 1, 1, "", "dsign"], [37, 1, 1, "", "isign"], [37, 1, 1, "", "kind"], [37, 3, 1, "", "lbound"], [37, 1, 1, "", "literal_dp"], [37, 1, 1, "", "literal_sp"], [37, 1, 1, "", "merge"], [37, 3, 1, "", "reshape"], [37, 3, 1, "", "shape"], [37, 3, 1, "", "size"], [37, 1, 1, "", "use"], [37, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[37, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[37, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[37, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[37, 1, 1, "", "FuncMinusOneOptim"], [37, 1, 1, "", "Optimization"], [37, 1, 1, "", "ReplaceOptim"], [37, 3, 1, "", "create_expand_pow_optimization"], [37, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[37, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[47, 0, 0, "-", "generators"], [39, 0, 0, "-", "graycode"], [40, 0, 0, "-", "group_constructs"], [41, 0, 0, "-", "group_numbers"], [43, 0, 0, "-", "named_groups"], [44, 0, 0, "-", "partitions"], [46, 0, 0, "-", "perm_groups"], [47, 0, 0, "-", "permutations"], [48, 0, 0, "-", "polyhedron"], [49, 0, 0, "-", "prufer"], [50, 0, 0, "-", "subsets"], [51, 0, 0, "-", "tensor_can"], [52, 0, 0, "-", "testutil"], [53, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[47, 2, 1, "", "alternating"], [47, 2, 1, "", "cyclic"], [47, 2, 1, "", "dihedral"], [47, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[39, 1, 1, "", "GrayCode"], [39, 2, 1, "", "bin_to_gray"], [39, 2, 1, "", "get_subset_from_bitstring"], [39, 2, 1, "", "gray_to_bin"], [39, 2, 1, "", "graycode_subsets"], [39, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[39, 4, 1, "", "current"], [39, 2, 1, "", "generate_gray"], [39, 4, 1, "", "n"], [39, 2, 1, "", "next"], [39, 4, 1, "", "rank"], [39, 4, 1, "", "selections"], [39, 2, 1, "", "skip"], [39, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[40, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[41, 3, 1, "", "is_abelian_number"], [41, 3, 1, "", "is_cyclic_number"], [41, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[43, 3, 1, "", "AbelianGroup"], [43, 3, 1, "", "AlternatingGroup"], [43, 3, 1, "", "CyclicGroup"], [43, 3, 1, "", "DihedralGroup"], [43, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[44, 1, 1, "", "IntegerPartition"], [44, 1, 1, "", "Partition"], [44, 3, 1, "", "RGS_enum"], [44, 3, 1, "", "RGS_generalized"], [44, 3, 1, "", "RGS_rank"], [44, 3, 1, "", "RGS_unrank"], [44, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[44, 2, 1, "", "as_dict"], [44, 2, 1, "", "as_ferrers"], [44, 4, 1, "", "conjugate"], [44, 2, 1, "", "next_lex"], [44, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[44, 4, 1, "", "RGS"], [44, 2, 1, "", "from_rgs"], [44, 4, 1, "", "partition"], [44, 4, 1, "", "rank"], [44, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[46, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[46, 2, 1, "", "__contains__"], [46, 2, 1, "", "__mul__"], [46, 2, 1, "", "__new__"], [46, 5, 1, "", "__weakref__"], [46, 2, 1, "", "_coset_representative"], [46, 2, 1, "", "_distinct_primes_lemma"], [46, 4, 1, "", "_elements"], [46, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [46, 2, 1, "", "_eval_is_alt_sym_naive"], [46, 2, 1, "", "_p_elements_group"], [46, 2, 1, "", "_random_pr_init"], [46, 2, 1, "", "_sylow_alt_sym"], [46, 2, 1, "", "_union_find_merge"], [46, 2, 1, "", "_union_find_rep"], [46, 2, 1, "", "_verify"], [46, 2, 1, "", "abelian_invariants"], [46, 4, 1, "", "base"], [46, 2, 1, "", "baseswap"], [46, 4, 1, "", "basic_orbits"], [46, 4, 1, "", "basic_stabilizers"], [46, 4, 1, "", "basic_transversals"], [46, 2, 1, "", "center"], [46, 2, 1, "", "centralizer"], [46, 2, 1, "", "commutator"], [46, 2, 1, "", "composition_series"], [46, 2, 1, "", "conjugacy_class"], [46, 2, 1, "", "conjugacy_classes"], [46, 2, 1, "", "contains"], [46, 2, 1, "", "coset_factor"], [46, 2, 1, "", "coset_rank"], [46, 2, 1, "", "coset_table"], [46, 2, 1, "", "coset_transversal"], [46, 2, 1, "", "coset_unrank"], [46, 4, 1, "", "degree"], [46, 2, 1, "", "derived_series"], [46, 2, 1, "", "derived_subgroup"], [46, 4, 1, "", "elements"], [46, 2, 1, "", "equals"], [46, 2, 1, "", "generate"], [46, 2, 1, "", "generate_dimino"], [46, 2, 1, "", "generate_schreier_sims"], [46, 2, 1, "", "generator_product"], [46, 4, 1, "", "generators"], [46, 4, 1, "", "identity"], [46, 2, 1, "", "index"], [46, 4, 1, "", "is_abelian"], [46, 2, 1, "", "is_alt_sym"], [46, 4, 1, "", "is_alternating"], [46, 4, 1, "", "is_cyclic"], [46, 2, 1, "", "is_elementary"], [46, 4, 1, "", "is_nilpotent"], [46, 2, 1, "", "is_normal"], [46, 4, 1, "", "is_perfect"], [46, 4, 1, "", "is_polycyclic"], [46, 2, 1, "", "is_primitive"], [46, 4, 1, "", "is_solvable"], [46, 2, 1, "", "is_subgroup"], [46, 4, 1, "", "is_symmetric"], [46, 2, 1, "", "is_transitive"], [46, 4, 1, "", "is_trivial"], [46, 2, 1, "", "lower_central_series"], [46, 2, 1, "", "make_perm"], [46, 4, 1, "", "max_div"], [46, 2, 1, "", "minimal_block"], [46, 2, 1, "", "minimal_blocks"], [46, 2, 1, "", "normal_closure"], [46, 2, 1, "", "orbit"], [46, 2, 1, "", "orbit_rep"], [46, 2, 1, "", "orbit_transversal"], [46, 2, 1, "", "orbits"], [46, 2, 1, "", "order"], [46, 2, 1, "", "pointwise_stabilizer"], [46, 2, 1, "", "polycyclic_group"], [46, 2, 1, "", "presentation"], [46, 2, 1, "", "random"], [46, 2, 1, "", "random_pr"], [46, 2, 1, "", "random_stab"], [46, 2, 1, "", "schreier_sims"], [46, 2, 1, "", "schreier_sims_incremental"], [46, 2, 1, "", "schreier_sims_random"], [46, 2, 1, "", "schreier_vector"], [46, 2, 1, "", "stabilizer"], [46, 4, 1, "", "strong_gens"], [46, 2, 1, "", "strong_presentation"], [46, 2, 1, "", "subgroup"], [46, 2, 1, "", "subgroup_search"], [46, 2, 1, "", "sylow_subgroup"], [46, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[47, 1, 1, "", "Cycle"], [47, 1, 1, "", "Permutation"], [47, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[47, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[47, 2, 1, "", "apply"], [47, 4, 1, "", "array_form"], [47, 2, 1, "", "ascents"], [47, 2, 1, "", "atoms"], [47, 4, 1, "", "cardinality"], [47, 2, 1, "", "commutator"], [47, 2, 1, "", "commutes_with"], [47, 4, 1, "", "cycle_structure"], [47, 4, 1, "", "cycles"], [47, 4, 1, "", "cyclic_form"], [47, 2, 1, "", "descents"], [47, 2, 1, "", "from_inversion_vector"], [47, 2, 1, "", "from_sequence"], [47, 4, 1, "", "full_cyclic_form"], [47, 2, 1, "", "get_adjacency_distance"], [47, 2, 1, "", "get_adjacency_matrix"], [47, 2, 1, "", "get_positional_distance"], [47, 2, 1, "", "get_precedence_distance"], [47, 2, 1, "", "get_precedence_matrix"], [47, 2, 1, "", "index"], [47, 2, 1, "", "inversion_vector"], [47, 2, 1, "", "inversions"], [47, 4, 1, "", "is_Empty"], [47, 4, 1, "", "is_Identity"], [47, 4, 1, "", "is_Singleton"], [47, 4, 1, "", "is_even"], [47, 4, 1, "", "is_odd"], [47, 2, 1, "", "josephus"], [47, 2, 1, "", "length"], [47, 2, 1, "", "list"], [47, 2, 1, "", "max"], [47, 2, 1, "", "min"], [47, 2, 1, "", "mul_inv"], [47, 2, 1, "", "next_lex"], [47, 2, 1, "", "next_nonlex"], [47, 2, 1, "", "next_trotterjohnson"], [47, 2, 1, "", "order"], [47, 2, 1, "", "parity"], [47, 2, 1, "", "random"], [47, 2, 1, "", "rank"], [47, 2, 1, "", "rank_nonlex"], [47, 2, 1, "", "rank_trotterjohnson"], [47, 2, 1, "", "resize"], [47, 2, 1, "", "rmul"], [47, 2, 1, "", "rmul_with_af"], [47, 2, 1, "", "runs"], [47, 2, 1, "", "signature"], [47, 4, 1, "", "size"], [47, 2, 1, "", "support"], [47, 2, 1, "", "transpositions"], [47, 2, 1, "", "unrank_lex"], [47, 2, 1, "", "unrank_nonlex"], [47, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[48, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[48, 4, 1, "", "array_form"], [48, 4, 1, "", "corners"], [48, 4, 1, "", "cyclic_form"], [48, 4, 1, "", "edges"], [48, 4, 1, "", "faces"], [48, 4, 1, "", "pgroup"], [48, 2, 1, "", "reset"], [48, 2, 1, "", "rotate"], [48, 4, 1, "", "size"], [48, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[49, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[49, 2, 1, "", "edges"], [49, 2, 1, "", "next"], [49, 4, 1, "", "nodes"], [49, 2, 1, "", "prev"], [49, 2, 1, "", "prufer_rank"], [49, 4, 1, "", "prufer_repr"], [49, 4, 1, "", "rank"], [49, 4, 1, "", "size"], [49, 2, 1, "", "to_prufer"], [49, 2, 1, "", "to_tree"], [49, 4, 1, "", "tree_repr"], [49, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[50, 1, 1, "", "Subset"], [50, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[50, 2, 1, "", "bitlist_from_subset"], [50, 4, 1, "", "cardinality"], [50, 2, 1, "", "iterate_binary"], [50, 2, 1, "", "iterate_graycode"], [50, 2, 1, "", "next_binary"], [50, 2, 1, "", "next_gray"], [50, 2, 1, "", "next_lexicographic"], [50, 2, 1, "", "prev_binary"], [50, 2, 1, "", "prev_gray"], [50, 2, 1, "", "prev_lexicographic"], [50, 4, 1, "", "rank_binary"], [50, 4, 1, "", "rank_gray"], [50, 4, 1, "", "rank_lexicographic"], [50, 4, 1, "", "size"], [50, 4, 1, "", "subset"], [50, 2, 1, "", "subset_from_bitlist"], [50, 2, 1, "", "subset_indices"], [50, 4, 1, "", "superset"], [50, 4, 1, "", "superset_size"], [50, 2, 1, "", "unrank_binary"], [50, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[51, 3, 1, "", "bsgs_direct_product"], [51, 3, 1, "", "canonicalize"], [51, 3, 1, "", "double_coset_can_rep"], [51, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[52, 3, 1, "", "_cmp_perm_lists"], [52, 3, 1, "", "_naive_list_centralizer"], [52, 3, 1, "", "_verify_bsgs"], [52, 3, 1, "", "_verify_centralizer"], [52, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[53, 3, 1, "", "_base_ordering"], [53, 3, 1, "", "_check_cycles_alt_sym"], [53, 3, 1, "", "_distribute_gens_by_base"], [53, 3, 1, "", "_handle_precomputed_bsgs"], [53, 3, 1, "", "_orbits_transversals_from_bsgs"], [53, 3, 1, "", "_remove_gens"], [53, 3, 1, "", "_strip"], [53, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[54, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[54, 2, 1, "", "change_index"], [54, 4, 1, "", "has_empty_sequence"], [54, 2, 1, "", "index"], [54, 2, 1, "", "reorder"], [54, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[82, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[82, 4, 1, "", "bound_symbols"], [82, 4, 1, "", "free_symbols"], [82, 4, 1, "", "function"], [82, 4, 1, "", "has_finite_limits"], [82, 4, 1, "", "has_reversed_limits"], [82, 4, 1, "", "is_number"], [82, 4, 1, "", "limits"], [82, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[54, 3, 1, "", "gosper_normal"], [54, 3, 1, "", "gosper_sum"], [54, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[54, 1, 1, "", "Product"], [54, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[54, 2, 1, "", "is_convergent"], [54, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[54, 1, 1, "", "Sum"], [54, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[54, 2, 1, "", "euler_maclaurin"], [54, 2, 1, "", "eval_zeta_function"], [54, 2, 1, "", "is_absolutely_convergent"], [54, 2, 1, "", "is_convergent"], [54, 2, 1, "", "reverse_order"]], "sympy.core": [[55, 0, 0, "-", "add"], [55, 0, 0, "-", "assumptions"], [55, 0, 0, "-", "basic"], [55, 0, 0, "-", "cache"], [55, 0, 0, "-", "containers"], [55, 0, 0, "-", "core"], [55, 0, 0, "-", "evalf"], [55, 0, 0, "-", "expr"], [55, 0, 0, "-", "exprtools"], [55, 0, 0, "-", "function"], [55, 0, 0, "-", "kind"], [55, 0, 0, "-", "mod"], [55, 0, 0, "-", "mul"], [55, 0, 0, "-", "multidimensional"], [55, 0, 0, "-", "numbers"], [55, 0, 0, "-", "power"], [55, 0, 0, "-", "random"], [55, 0, 0, "-", "relational"], [55, 0, 0, "-", "singleton"], [55, 0, 0, "-", "symbol"], [55, 0, 0, "-", "sympify"], [55, 0, 0, "-", "traversal"]], "sympy.core.add": [[55, 1, 1, "", "Add"]], "sympy.core.add.Add": [[55, 2, 1, "", "as_coeff_Add"], [55, 2, 1, "", "as_coeff_add"], [55, 2, 1, "", "as_content_primitive"], [55, 2, 1, "", "as_numer_denom"], [55, 2, 1, "", "as_real_imag"], [55, 2, 1, "", "as_two_terms"], [55, 2, 1, "", "class_key"], [55, 2, 1, "", "extract_leading_order"], [55, 2, 1, "", "flatten"], [55, 2, 1, "", "primitive"]], "sympy.core.basic": [[55, 1, 1, "", "Atom"], [55, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[55, 4, 1, "", "args"], [55, 2, 1, "", "as_content_primitive"], [55, 2, 1, "", "as_dummy"], [55, 4, 1, "", "assumptions0"], [55, 2, 1, "", "atoms"], [55, 4, 1, "", "canonical_variables"], [55, 2, 1, "", "class_key"], [55, 2, 1, "", "compare"], [55, 2, 1, "", "count"], [55, 2, 1, "", "count_ops"], [55, 2, 1, "", "doit"], [55, 2, 1, "", "dummy_eq"], [55, 2, 1, "", "find"], [55, 4, 1, "", "free_symbols"], [55, 2, 1, "", "fromiter"], [55, 4, 1, "", "func"], [55, 2, 1, "", "has"], [55, 2, 1, "", "has_free"], [55, 2, 1, "", "has_xfree"], [55, 4, 1, "", "is_comparable"], [55, 2, 1, "", "match"], [55, 2, 1, "", "matches"], [55, 2, 1, "", "rcall"], [55, 2, 1, "", "refine"], [55, 2, 1, "", "replace"], [55, 2, 1, "", "rewrite"], [55, 2, 1, "", "simplify"], [55, 2, 1, "", "sort_key"], [55, 2, 1, "", "subs"], [55, 2, 1, "", "xreplace"]], "sympy.core.cache": [[55, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[55, 1, 1, "", "Dict"], [55, 1, 1, "", "Tuple"], [55, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[55, 2, 1, "", "get"], [55, 2, 1, "", "items"], [55, 2, 1, "", "keys"], [55, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[55, 2, 1, "", "index"], [55, 4, 1, "", "kind"], [55, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[55, 1, 1, "", "EvalfMixin"], [55, 3, 1, "", "N"], [55, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[55, 2, 1, "", "evalf"], [55, 2, 1, "", "n"]], "sympy.core.expr": [[55, 1, 1, "", "AtomicExpr"], [55, 1, 1, "", "Expr"], [55, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[55, 2, 1, "", "apart"], [55, 2, 1, "", "args_cnc"], [55, 2, 1, "", "as_coeff_Add"], [55, 2, 1, "", "as_coeff_Mul"], [55, 2, 1, "", "as_coeff_add"], [55, 2, 1, "", "as_coeff_exponent"], [55, 2, 1, "", "as_coeff_mul"], [55, 2, 1, "", "as_coefficient"], [55, 2, 1, "", "as_coefficients_dict"], [55, 2, 1, "", "as_content_primitive"], [55, 2, 1, "", "as_expr"], [55, 2, 1, "", "as_independent"], [55, 2, 1, "", "as_leading_term"], [55, 2, 1, "", "as_numer_denom"], [55, 2, 1, "", "as_ordered_factors"], [55, 2, 1, "", "as_ordered_terms"], [55, 2, 1, "", "as_poly"], [55, 2, 1, "", "as_powers_dict"], [55, 2, 1, "", "as_real_imag"], [55, 2, 1, "", "as_terms"], [55, 2, 1, "", "aseries"], [55, 2, 1, "", "cancel"], [55, 2, 1, "", "coeff"], [55, 2, 1, "", "collect"], [55, 2, 1, "", "combsimp"], [55, 2, 1, "", "compute_leading_term"], [55, 2, 1, "", "conjugate"], [55, 2, 1, "", "could_extract_minus_sign"], [55, 2, 1, "", "count_ops"], [55, 2, 1, "", "equals"], [55, 2, 1, "", "expand"], [55, 4, 1, "", "expr_free_symbols"], [55, 2, 1, "", "extract_additively"], [55, 2, 1, "", "extract_branch_factor"], [55, 2, 1, "", "extract_multiplicatively"], [55, 2, 1, "", "factor"], [55, 2, 1, "", "fourier_series"], [55, 2, 1, "", "fps"], [55, 2, 1, "", "gammasimp"], [55, 2, 1, "", "getO"], [55, 2, 1, "", "getn"], [55, 2, 1, "", "integrate"], [55, 2, 1, "", "invert"], [55, 2, 1, "", "is_algebraic_expr"], [55, 2, 1, "", "is_constant"], [55, 2, 1, "", "is_meromorphic"], [55, 4, 1, "", "is_number"], [55, 2, 1, "", "is_polynomial"], [55, 2, 1, "", "is_rational_function"], [55, 2, 1, "", "leadterm"], [55, 2, 1, "", "limit"], [55, 2, 1, "", "lseries"], [55, 2, 1, "", "normal"], [55, 2, 1, "", "nseries"], [55, 2, 1, "", "nsimplify"], [55, 2, 1, "", "powsimp"], [55, 2, 1, "", "primitive"], [55, 2, 1, "", "radsimp"], [55, 2, 1, "", "ratsimp"], [55, 2, 1, "", "removeO"], [55, 2, 1, "", "round"], [55, 2, 1, "", "separate"], [55, 2, 1, "", "series"], [55, 2, 1, "", "taylor_term"], [55, 2, 1, "", "together"], [55, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[55, 3, 1, "", "factor_terms"], [55, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[55, 1, 1, "", "Derivative"], [55, 1, 1, "", "Function"], [55, 1, 1, "", "FunctionClass"], [55, 1, 1, "", "Lambda"], [55, 1, 1, "", "PoleError"], [55, 1, 1, "", "Subs"], [55, 1, 1, "", "WildFunction"], [55, 3, 1, "", "count_ops"], [55, 3, 1, "", "diff"], [55, 3, 1, "", "expand"], [55, 3, 1, "", "expand_complex"], [55, 3, 1, "", "expand_func"], [55, 3, 1, "", "expand_log"], [55, 3, 1, "", "expand_mul"], [55, 3, 1, "", "expand_multinomial"], [55, 3, 1, "", "expand_power_base"], [55, 3, 1, "", "expand_power_exp"], [55, 3, 1, "", "expand_trig"], [55, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[55, 4, 1, "", "_diff_wrt"], [55, 2, 1, "", "_sort_variable_count"], [55, 2, 1, "", "as_finite_difference"], [55, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[55, 2, 1, "", "as_base_exp"], [55, 2, 1, "", "fdiff"], [55, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[55, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[55, 4, 1, "", "bound_symbols"], [55, 4, 1, "", "expr"], [55, 4, 1, "", "is_identity"], [55, 4, 1, "", "signature"], [55, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[55, 4, 1, "", "bound_symbols"], [55, 4, 1, "", "expr"], [55, 4, 1, "", "point"], [55, 4, 1, "", "variables"]], "sympy.core.kind": [[55, 5, 1, "", "BooleanKind"], [55, 1, 1, "", "Kind"], [55, 5, 1, "", "NumberKind"], [55, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[55, 1, 1, "", "Mod"]], "sympy.core.mul": [[55, 1, 1, "", "Mul"], [55, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[55, 2, 1, "", "as_coeff_Mul"], [55, 2, 1, "", "as_content_primitive"], [55, 2, 1, "", "as_ordered_factors"], [55, 2, 1, "", "as_two_terms"], [55, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[55, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[55, 1, 1, "", "AlgebraicNumber"], [55, 1, 1, "", "Catalan"], [55, 1, 1, "", "ComplexInfinity"], [55, 1, 1, "", "EulerGamma"], [55, 1, 1, "", "Exp1"], [55, 1, 1, "", "Float"], [55, 1, 1, "", "GoldenRatio"], [55, 1, 1, "", "Half"], [55, 1, 1, "", "ImaginaryUnit"], [55, 1, 1, "", "Infinity"], [55, 1, 1, "", "Integer"], [55, 1, 1, "", "NaN"], [55, 1, 1, "", "NegativeInfinity"], [55, 1, 1, "", "NegativeOne"], [55, 1, 1, "", "Number"], [55, 1, 1, "", "NumberSymbol"], [55, 1, 1, "", "One"], [55, 1, 1, "", "Pi"], [55, 1, 1, "", "Rational"], [55, 5, 1, "", "RealNumber"], [55, 1, 1, "", "TribonacciConstant"], [55, 1, 1, "", "Zero"], [55, 3, 1, "", "igcd"], [55, 3, 1, "", "ilcm"], [55, 3, 1, "", "mod_inverse"], [55, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[55, 2, 1, "", "__new__"], [55, 2, 1, "", "as_expr"], [55, 2, 1, "", "as_poly"], [55, 2, 1, "", "coeffs"], [55, 2, 1, "", "field_element"], [55, 4, 1, "", "is_aliased"], [55, 4, 1, "", "is_primitive_element"], [55, 2, 1, "", "minpoly_of_element"], [55, 2, 1, "", "native_coeffs"], [55, 2, 1, "", "primitive_element"], [55, 2, 1, "", "to_algebraic_integer"], [55, 2, 1, "", "to_primitive_element"], [55, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[55, 2, 1, "", "as_coeff_Add"], [55, 2, 1, "", "as_coeff_Mul"], [55, 2, 1, "", "cofactors"], [55, 2, 1, "", "gcd"], [55, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[55, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[55, 2, 1, "", "as_coeff_Add"], [55, 2, 1, "", "as_coeff_Mul"], [55, 2, 1, "", "as_content_primitive"], [55, 2, 1, "", "factors"], [55, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[55, 1, 1, "", "Pow"], [55, 3, 1, "", "integer_log"], [55, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[55, 2, 1, "", "as_base_exp"], [55, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[55, 3, 1, "", "_randint"], [55, 3, 1, "", "_randrange"], [55, 3, 1, "", "random_complex_number"], [55, 3, 1, "", "test_derivative_numerically"], [55, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[55, 5, 1, "", "Eq"], [55, 1, 1, "", "Equality"], [55, 5, 1, "", "Ge"], [55, 1, 1, "", "GreaterThan"], [55, 5, 1, "", "Gt"], [55, 5, 1, "", "Le"], [55, 1, 1, "", "LessThan"], [55, 5, 1, "", "Lt"], [55, 5, 1, "", "Ne"], [55, 5, 1, "", "Rel"], [55, 1, 1, "", "Relational"], [55, 1, 1, "", "StrictGreaterThan"], [55, 1, 1, "", "StrictLessThan"], [55, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[55, 2, 1, "", "as_poly"], [55, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[55, 4, 1, "", "canonical"], [55, 2, 1, "", "equals"], [55, 4, 1, "", "lhs"], [55, 4, 1, "", "negated"], [55, 4, 1, "", "reversed"], [55, 4, 1, "", "reversedsign"], [55, 4, 1, "", "rhs"], [55, 4, 1, "", "strict"], [55, 4, 1, "", "weak"]], "sympy.core.singleton": [[55, 1, 1, "", "Singleton"], [55, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[55, 3, 1, "", "default_sort_key"], [55, 3, 1, "", "ordered"]], "sympy.core.symbol": [[55, 1, 1, "", "Dummy"], [55, 1, 1, "", "Symbol"], [55, 1, 1, "", "Wild"], [55, 3, 1, "", "symbols"], [55, 3, 1, "", "var"]], "sympy.core.sympify": [[55, 3, 1, "", "sympify"]], "sympy.core.traversal": [[55, 3, 1, "", "bottom_up"], [55, 3, 1, "", "postorder_traversal"], [55, 3, 1, "", "preorder_traversal"], [55, 3, 1, "", "use"], [55, 3, 1, "", "walk"]], "sympy.crypto": [[56, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[56, 3, 1, "", "AZ"], [56, 3, 1, "", "bifid5_square"], [56, 3, 1, "", "bifid6_square"], [56, 3, 1, "", "check_and_join"], [56, 3, 1, "", "cycle_list"], [56, 3, 1, "", "decipher_affine"], [56, 3, 1, "", "decipher_atbash"], [56, 3, 1, "", "decipher_bifid"], [56, 3, 1, "", "decipher_bifid5"], [56, 3, 1, "", "decipher_bifid6"], [56, 3, 1, "", "decipher_elgamal"], [56, 3, 1, "", "decipher_gm"], [56, 3, 1, "", "decipher_hill"], [56, 3, 1, "", "decipher_kid_rsa"], [56, 3, 1, "", "decipher_railfence"], [56, 3, 1, "", "decipher_rot13"], [56, 3, 1, "", "decipher_rsa"], [56, 3, 1, "", "decipher_shift"], [56, 3, 1, "", "decipher_vigenere"], [56, 3, 1, "", "decode_morse"], [56, 3, 1, "", "dh_private_key"], [56, 3, 1, "", "dh_public_key"], [56, 3, 1, "", "dh_shared_key"], [56, 3, 1, "", "elgamal_private_key"], [56, 3, 1, "", "elgamal_public_key"], [56, 3, 1, "", "encipher_affine"], [56, 3, 1, "", "encipher_atbash"], [56, 3, 1, "", "encipher_bifid"], [56, 3, 1, "", "encipher_bifid5"], [56, 3, 1, "", "encipher_bifid6"], [56, 3, 1, "", "encipher_elgamal"], [56, 3, 1, "", "encipher_gm"], [56, 3, 1, "", "encipher_hill"], [56, 3, 1, "", "encipher_kid_rsa"], [56, 3, 1, "", "encipher_railfence"], [56, 3, 1, "", "encipher_rot13"], [56, 3, 1, "", "encipher_rsa"], [56, 3, 1, "", "encipher_shift"], [56, 3, 1, "", "encipher_substitution"], [56, 3, 1, "", "encipher_vigenere"], [56, 3, 1, "", "encode_morse"], [56, 3, 1, "", "gm_private_key"], [56, 3, 1, "", "gm_public_key"], [56, 3, 1, "", "kid_rsa_private_key"], [56, 3, 1, "", "kid_rsa_public_key"], [56, 3, 1, "", "lfsr_autocorrelation"], [56, 3, 1, "", "lfsr_connection_polynomial"], [56, 3, 1, "", "lfsr_sequence"], [56, 3, 1, "", "padded_key"], [56, 3, 1, "", "rsa_private_key"], [56, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[57, 1, 1, "", "BaseCovarDerivativeOp"], [57, 1, 1, "", "BaseScalarField"], [57, 1, 1, "", "BaseVectorField"], [57, 1, 1, "", "Commutator"], [57, 1, 1, "", "CoordSystem"], [57, 1, 1, "", "CoordinateSymbol"], [57, 1, 1, "", "CovarDerivativeOp"], [57, 1, 1, "", "Differential"], [57, 1, 1, "", "LieDerivative"], [57, 1, 1, "", "Manifold"], [57, 1, 1, "", "Patch"], [57, 1, 1, "", "Point"], [57, 1, 1, "", "TensorProduct"], [57, 1, 1, "", "WedgeProduct"], [57, 3, 1, "", "intcurve_diffequ"], [57, 3, 1, "", "intcurve_series"], [57, 3, 1, "", "metric_to_Christoffel_1st"], [57, 3, 1, "", "metric_to_Christoffel_2nd"], [57, 3, 1, "", "metric_to_Ricci_components"], [57, 3, 1, "", "metric_to_Riemann_components"], [57, 3, 1, "", "twoform_to_matrix"], [57, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[57, 2, 1, "", "base_oneform"], [57, 2, 1, "", "base_oneforms"], [57, 2, 1, "", "base_scalar"], [57, 2, 1, "", "base_scalars"], [57, 2, 1, "", "base_vector"], [57, 2, 1, "", "base_vectors"], [57, 2, 1, "", "coord_function"], [57, 2, 1, "", "coord_functions"], [57, 2, 1, "", "coord_tuple_transform_to"], [57, 2, 1, "", "jacobian"], [57, 2, 1, "", "jacobian_determinant"], [57, 2, 1, "", "jacobian_matrix"], [57, 2, 1, "", "point"], [57, 2, 1, "", "point_to_coords"], [57, 2, 1, "", "transform"], [57, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[57, 2, 1, "", "coords"]], "sympy.discrete": [[58, 0, 0, "-", "convolutions"], [58, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[58, 3, 1, "", "convolution"], [58, 3, 1, "", "convolution_fft"], [58, 3, 1, "", "convolution_fwht"], [58, 3, 1, "", "convolution_ntt"], [58, 3, 1, "", "convolution_subset"], [58, 3, 1, "", "covering_product"], [58, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[58, 3, 1, "", "fft"], [58, 3, 1, "", "fwht"], [58, 3, 1, "", "ifft"], [58, 3, 1, "", "ifwht"], [58, 3, 1, "", "intt"], [58, 3, 1, "", "inverse_mobius_transform"], [58, 3, 1, "", "mobius_transform"], [58, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[193, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[60, 1, 1, "", "FallingFactorial"], [60, 1, 1, "", "MultiFactorial"], [60, 1, 1, "", "RisingFactorial"], [60, 1, 1, "", "binomial"], [60, 1, 1, "", "factorial"], [60, 1, 1, "", "factorial2"], [60, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[60, 1, 1, "", "andre"], [60, 1, 1, "", "bell"], [60, 1, 1, "", "bernoulli"], [60, 1, 1, "", "catalan"], [60, 1, 1, "", "euler"], [60, 1, 1, "", "fibonacci"], [60, 1, 1, "", "genocchi"], [60, 1, 1, "", "harmonic"], [60, 1, 1, "", "lucas"], [60, 3, 1, "", "nC"], [60, 3, 1, "", "nP"], [60, 3, 1, "", "nT"], [60, 1, 1, "", "partition"], [60, 3, 1, "", "stirling"], [60, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[61, 1, 1, "", "Abs"], [61, 1, 1, "", "arg"], [61, 1, 1, "", "conjugate"], [61, 1, 1, "", "im"], [61, 1, 1, "", "periodic_argument"], [61, 1, 1, "", "polar_lift"], [61, 1, 1, "", "principal_branch"], [61, 1, 1, "", "re"], [61, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[61, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[61, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[61, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[61, 1, 1, "", "LambertW"], [61, 1, 1, "", "exp"], [61, 1, 1, "", "exp_polar"], [61, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[61, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[61, 2, 1, "", "as_real_imag"], [61, 4, 1, "", "base"], [61, 2, 1, "", "fdiff"], [61, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[61, 2, 1, "", "as_base_exp"], [61, 2, 1, "", "as_real_imag"], [61, 2, 1, "", "fdiff"], [61, 2, 1, "", "inverse"], [61, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[61, 1, 1, "", "HyperbolicFunction"], [61, 1, 1, "", "acosh"], [61, 1, 1, "", "acoth"], [61, 1, 1, "", "acsch"], [61, 1, 1, "", "asech"], [61, 1, 1, "", "asinh"], [61, 1, 1, "", "atanh"], [61, 1, 1, "", "cosh"], [61, 1, 1, "", "coth"], [61, 1, 1, "", "csch"], [61, 1, 1, "", "sech"], [61, 1, 1, "", "sinh"], [61, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[61, 2, 1, "", "fdiff"], [61, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[61, 2, 1, "", "as_real_imag"], [61, 2, 1, "", "fdiff"], [61, 2, 1, "", "inverse"], [61, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[61, 1, 1, "", "RoundFunction"], [61, 1, 1, "", "ceiling"], [61, 1, 1, "", "floor"], [61, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[61, 1, 1, "", "IdentityFunction"], [61, 1, 1, "", "Max"], [61, 1, 1, "", "Min"], [61, 3, 1, "", "cbrt"], [61, 3, 1, "", "real_root"], [61, 3, 1, "", "root"], [61, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[61, 1, 1, "", "ExprCondPair"], [61, 1, 1, "", "Piecewise"], [61, 3, 1, "", "piecewise_exclusive"], [61, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[61, 4, 1, "", "cond"], [61, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[61, 2, 1, "", "_eval_integral"], [61, 2, 1, "", "as_expr_set_pairs"], [61, 2, 1, "", "doit"], [61, 2, 1, "", "eval"], [61, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[61, 1, 1, "", "acos"], [61, 1, 1, "", "acot"], [61, 1, 1, "", "acsc"], [61, 1, 1, "", "asec"], [61, 1, 1, "", "asin"], [61, 1, 1, "", "atan"], [61, 1, 1, "", "atan2"], [61, 1, 1, "", "cos"], [61, 1, 1, "", "cot"], [61, 1, 1, "", "csc"], [61, 1, 1, "", "sec"], [61, 1, 1, "", "sin"], [61, 1, 1, "", "sinc"], [61, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[61, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[61, 2, 1, "", "inverse"]], "sympy.functions.special": [[63, 0, 0, "-", "bessel"], [63, 0, 0, "-", "beta_functions"], [63, 0, 0, "-", "elliptic_integrals"], [63, 0, 0, "-", "error_functions"], [63, 0, 0, "-", "gamma_functions"], [63, 0, 0, "-", "mathieu_functions"], [63, 0, 0, "-", "polynomials"], [63, 0, 0, "-", "singularity_functions"], [63, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[63, 1, 1, "", "AiryBase"], [63, 1, 1, "", "BesselBase"], [63, 1, 1, "", "airyai"], [63, 1, 1, "", "airyaiprime"], [63, 1, 1, "", "airybi"], [63, 1, 1, "", "airybiprime"], [63, 1, 1, "", "besseli"], [63, 1, 1, "", "besselj"], [63, 1, 1, "", "besselk"], [63, 1, 1, "", "bessely"], [63, 1, 1, "", "hankel1"], [63, 1, 1, "", "hankel2"], [63, 1, 1, "", "jn"], [63, 3, 1, "", "jn_zeros"], [63, 1, 1, "", "marcumq"], [63, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[63, 4, 1, "", "argument"], [63, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[63, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[63, 3, 1, "", "bspline_basis"], [63, 3, 1, "", "bspline_basis_set"], [63, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[63, 1, 1, "", "DiracDelta"], [63, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[63, 2, 1, "", "eval"], [63, 2, 1, "", "fdiff"], [63, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[63, 2, 1, "", "eval"], [63, 2, 1, "", "fdiff"], [63, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[63, 1, 1, "", "elliptic_e"], [63, 1, 1, "", "elliptic_f"], [63, 1, 1, "", "elliptic_k"], [63, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[63, 1, 1, "", "Chi"], [63, 1, 1, "", "Ci"], [63, 3, 1, "", "E1"], [63, 1, 1, "", "Ei"], [63, 1, 1, "", "FresnelIntegral"], [63, 1, 1, "", "Li"], [63, 1, 1, "", "Shi"], [63, 1, 1, "", "Si"], [63, 1, 1, "", "erf"], [63, 1, 1, "", "erf2"], [63, 1, 1, "", "erf2inv"], [63, 1, 1, "", "erfc"], [63, 1, 1, "", "erfcinv"], [63, 1, 1, "", "erfi"], [63, 1, 1, "", "erfinv"], [63, 1, 1, "", "expint"], [63, 1, 1, "", "fresnelc"], [63, 1, 1, "", "fresnels"], [63, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[63, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[63, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[63, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[63, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[63, 1, 1, "", "digamma"], [63, 1, 1, "", "gamma"], [63, 1, 1, "", "loggamma"], [63, 1, 1, "", "lowergamma"], [63, 1, 1, "", "multigamma"], [63, 1, 1, "", "polygamma"], [63, 1, 1, "", "trigamma"], [63, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[63, 1, 1, "", "appellf1"], [63, 1, 1, "", "hyper"], [63, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[63, 4, 1, "", "ap"], [63, 4, 1, "", "argument"], [63, 4, 1, "", "bq"], [63, 4, 1, "", "convergence_statement"], [63, 4, 1, "", "eta"], [63, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[63, 4, 1, "", "an"], [63, 4, 1, "", "aother"], [63, 4, 1, "", "ap"], [63, 4, 1, "", "argument"], [63, 4, 1, "", "bm"], [63, 4, 1, "", "bother"], [63, 4, 1, "", "bq"], [63, 4, 1, "", "delta"], [63, 2, 1, "", "get_period"], [63, 2, 1, "", "integrand"], [63, 4, 1, "", "is_number"], [63, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[63, 1, 1, "", "MathieuBase"], [63, 1, 1, "", "mathieuc"], [63, 1, 1, "", "mathieucprime"], [63, 1, 1, "", "mathieus"], [63, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[63, 1, 1, "", "assoc_laguerre"], [63, 1, 1, "", "assoc_legendre"], [63, 1, 1, "", "chebyshevt"], [63, 1, 1, "", "chebyshevt_root"], [63, 1, 1, "", "chebyshevu"], [63, 1, 1, "", "chebyshevu_root"], [63, 1, 1, "", "gegenbauer"], [63, 1, 1, "", "hermite"], [63, 1, 1, "", "hermite_prob"], [63, 1, 1, "", "jacobi"], [63, 3, 1, "", "jacobi_normalized"], [63, 1, 1, "", "laguerre"], [63, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[63, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[63, 2, 1, "", "eval"], [63, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[63, 1, 1, "", "Ynm"], [63, 3, 1, "", "Ynm_c"], [63, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[63, 3, 1, "", "Eijk"], [63, 1, 1, "", "KroneckerDelta"], [63, 1, 1, "", "LeviCivita"], [63, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[63, 2, 1, "", "eval"], [63, 4, 1, "", "indices_contain_equal_information"], [63, 4, 1, "", "is_above_fermi"], [63, 4, 1, "", "is_below_fermi"], [63, 4, 1, "", "is_only_above_fermi"], [63, 4, 1, "", "is_only_below_fermi"], [63, 4, 1, "", "killable_index"], [63, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[63, 1, 1, "", "dirichlet_eta"], [63, 1, 1, "", "lerchphi"], [63, 1, 1, "", "polylog"], [63, 1, 1, "", "stieltjes"], [63, 1, 1, "", "zeta"]], "sympy.geometry": [[64, 0, 0, "-", "curve"], [65, 0, 0, "-", "ellipse"], [66, 0, 0, "-", "entity"], [68, 0, 0, "-", "line"], [69, 0, 0, "-", "plane"], [70, 0, 0, "-", "point"], [71, 0, 0, "-", "polygon"], [72, 0, 0, "-", "util"]], "sympy.geometry.curve": [[64, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[64, 4, 1, "", "ambient_dimension"], [64, 2, 1, "", "arbitrary_point"], [64, 4, 1, "", "free_symbols"], [64, 4, 1, "", "functions"], [64, 4, 1, "", "length"], [64, 4, 1, "", "limits"], [64, 4, 1, "", "parameter"], [64, 2, 1, "", "plot_interval"], [64, 2, 1, "", "rotate"], [64, 2, 1, "", "scale"], [64, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[65, 1, 1, "", "Circle"], [65, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[65, 4, 1, "", "circumference"], [65, 2, 1, "", "equation"], [65, 2, 1, "", "intersection"], [65, 4, 1, "", "radius"], [65, 2, 1, "", "reflect"], [65, 2, 1, "", "scale"], [65, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[65, 4, 1, "", "apoapsis"], [65, 2, 1, "", "arbitrary_point"], [65, 4, 1, "", "area"], [65, 2, 1, "", "auxiliary_circle"], [65, 4, 1, "", "bounds"], [65, 4, 1, "", "center"], [65, 4, 1, "", "circumference"], [65, 2, 1, "", "director_circle"], [65, 4, 1, "", "eccentricity"], [65, 2, 1, "", "encloses_point"], [65, 2, 1, "", "equation"], [65, 2, 1, "", "evolute"], [65, 4, 1, "", "foci"], [65, 4, 1, "", "focus_distance"], [65, 4, 1, "", "hradius"], [65, 2, 1, "", "intersection"], [65, 2, 1, "", "is_tangent"], [65, 4, 1, "", "major"], [65, 4, 1, "", "minor"], [65, 2, 1, "", "normal_lines"], [65, 4, 1, "", "periapsis"], [65, 2, 1, "", "plot_interval"], [65, 2, 1, "", "polar_second_moment_of_area"], [65, 2, 1, "", "random_point"], [65, 2, 1, "", "reflect"], [65, 2, 1, "", "rotate"], [65, 2, 1, "", "scale"], [65, 2, 1, "", "second_moment_of_area"], [65, 2, 1, "", "section_modulus"], [65, 4, 1, "", "semilatus_rectum"], [65, 2, 1, "", "tangent_lines"], [65, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[66, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[66, 4, 1, "", "ambient_dimension"], [66, 4, 1, "", "bounds"], [66, 2, 1, "", "encloses"], [66, 2, 1, "", "intersection"], [66, 2, 1, "", "is_similar"], [66, 2, 1, "", "parameter_value"], [66, 2, 1, "", "reflect"], [66, 2, 1, "", "rotate"], [66, 2, 1, "", "scale"], [66, 2, 1, "", "translate"]], "sympy.geometry.line": [[68, 1, 1, "", "Line"], [68, 1, 1, "", "Line2D"], [68, 1, 1, "", "Line3D"], [68, 1, 1, "", "LinearEntity"], [68, 1, 1, "", "LinearEntity2D"], [68, 1, 1, "", "LinearEntity3D"], [68, 1, 1, "", "Ray"], [68, 1, 1, "", "Ray2D"], [68, 1, 1, "", "Ray3D"], [68, 1, 1, "", "Segment"], [68, 1, 1, "", "Segment2D"], [68, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[68, 2, 1, "", "contains"], [68, 2, 1, "", "distance"], [68, 2, 1, "", "equals"], [68, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[68, 4, 1, "", "coefficients"], [68, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[68, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[68, 4, 1, "", "ambient_dimension"], [68, 2, 1, "", "angle_between"], [68, 2, 1, "", "arbitrary_point"], [68, 2, 1, "", "are_concurrent"], [68, 2, 1, "", "bisectors"], [68, 2, 1, "", "contains"], [68, 4, 1, "", "direction"], [68, 2, 1, "", "intersection"], [68, 2, 1, "", "is_parallel"], [68, 2, 1, "", "is_perpendicular"], [68, 2, 1, "", "is_similar"], [68, 4, 1, "", "length"], [68, 4, 1, "", "p1"], [68, 4, 1, "", "p2"], [68, 2, 1, "", "parallel_line"], [68, 2, 1, "", "perpendicular_line"], [68, 2, 1, "", "perpendicular_segment"], [68, 4, 1, "", "points"], [68, 2, 1, "", "projection"], [68, 2, 1, "", "random_point"], [68, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[68, 4, 1, "", "bounds"], [68, 2, 1, "", "perpendicular_line"], [68, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[68, 4, 1, "", "direction_cosine"], [68, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[68, 2, 1, "", "contains"], [68, 2, 1, "", "distance"], [68, 2, 1, "", "equals"], [68, 2, 1, "", "plot_interval"], [68, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[68, 2, 1, "", "closing_angle"], [68, 4, 1, "", "xdirection"], [68, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[68, 4, 1, "", "xdirection"], [68, 4, 1, "", "ydirection"], [68, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[68, 2, 1, "", "contains"], [68, 2, 1, "", "distance"], [68, 2, 1, "", "equals"], [68, 4, 1, "", "length"], [68, 4, 1, "", "midpoint"], [68, 2, 1, "", "perpendicular_bisector"], [68, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[69, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[69, 2, 1, "", "angle_between"], [69, 2, 1, "", "arbitrary_point"], [69, 2, 1, "", "are_concurrent"], [69, 2, 1, "", "distance"], [69, 2, 1, "", "equals"], [69, 2, 1, "", "equation"], [69, 2, 1, "", "intersection"], [69, 2, 1, "", "is_coplanar"], [69, 2, 1, "", "is_parallel"], [69, 2, 1, "", "is_perpendicular"], [69, 4, 1, "", "normal_vector"], [69, 4, 1, "", "p1"], [69, 2, 1, "", "parallel_plane"], [69, 2, 1, "", "parameter_value"], [69, 2, 1, "", "perpendicular_line"], [69, 2, 1, "", "perpendicular_plane"], [69, 2, 1, "", "projection"], [69, 2, 1, "", "projection_line"], [69, 2, 1, "", "random_point"]], "sympy.geometry.point": [[70, 1, 1, "", "Point"], [70, 1, 1, "", "Point2D"], [70, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[70, 2, 1, "", "affine_rank"], [70, 4, 1, "", "ambient_dimension"], [70, 2, 1, "", "are_coplanar"], [70, 2, 1, "", "canberra_distance"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "dot"], [70, 2, 1, "", "equals"], [70, 2, 1, "", "intersection"], [70, 2, 1, "", "is_collinear"], [70, 2, 1, "", "is_concyclic"], [70, 4, 1, "", "is_nonzero"], [70, 2, 1, "", "is_scalar_multiple"], [70, 4, 1, "", "is_zero"], [70, 4, 1, "", "length"], [70, 2, 1, "", "midpoint"], [70, 4, 1, "", "origin"], [70, 4, 1, "", "orthogonal_direction"], [70, 2, 1, "", "project"], [70, 2, 1, "", "taxicab_distance"], [70, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[70, 4, 1, "", "bounds"], [70, 4, 1, "", "coordinates"], [70, 2, 1, "", "rotate"], [70, 2, 1, "", "scale"], [70, 2, 1, "", "transform"], [70, 2, 1, "", "translate"], [70, 4, 1, "", "x"], [70, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[70, 2, 1, "", "are_collinear"], [70, 4, 1, "", "coordinates"], [70, 2, 1, "", "direction_cosine"], [70, 2, 1, "", "direction_ratio"], [70, 2, 1, "", "intersection"], [70, 2, 1, "", "scale"], [70, 2, 1, "", "transform"], [70, 2, 1, "", "translate"], [70, 4, 1, "", "x"], [70, 4, 1, "", "y"], [70, 4, 1, "", "z"]], "sympy.geometry.polygon": [[71, 1, 1, "", "Polygon"], [71, 1, 1, "", "RegularPolygon"], [71, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[71, 4, 1, "", "angles"], [71, 2, 1, "", "arbitrary_point"], [71, 4, 1, "", "area"], [71, 2, 1, "", "bisectors"], [71, 4, 1, "", "bounds"], [71, 4, 1, "", "centroid"], [71, 2, 1, "", "cut_section"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "encloses_point"], [71, 2, 1, "", "first_moment_of_area"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "is_convex"], [71, 4, 1, "", "perimeter"], [71, 2, 1, "", "plot_interval"], [71, 2, 1, "", "polar_second_moment_of_area"], [71, 2, 1, "", "second_moment_of_area"], [71, 2, 1, "", "section_modulus"], [71, 4, 1, "", "sides"], [71, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[71, 4, 1, "", "angles"], [71, 4, 1, "", "apothem"], [71, 4, 1, "", "area"], [71, 4, 1, "", "args"], [71, 4, 1, "", "center"], [71, 4, 1, "", "centroid"], [71, 4, 1, "", "circumcenter"], [71, 4, 1, "", "circumcircle"], [71, 4, 1, "", "circumradius"], [71, 2, 1, "", "encloses_point"], [71, 4, 1, "", "exterior_angle"], [71, 4, 1, "", "incircle"], [71, 4, 1, "", "inradius"], [71, 4, 1, "", "interior_angle"], [71, 4, 1, "", "length"], [71, 4, 1, "", "radius"], [71, 2, 1, "", "reflect"], [71, 2, 1, "", "rotate"], [71, 4, 1, "", "rotation"], [71, 2, 1, "", "scale"], [71, 2, 1, "", "spin"], [71, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[71, 4, 1, "", "altitudes"], [71, 2, 1, "", "bisectors"], [71, 4, 1, "", "circumcenter"], [71, 4, 1, "", "circumcircle"], [71, 4, 1, "", "circumradius"], [71, 4, 1, "", "eulerline"], [71, 4, 1, "", "excenters"], [71, 4, 1, "", "exradii"], [71, 4, 1, "", "incenter"], [71, 4, 1, "", "incircle"], [71, 4, 1, "", "inradius"], [71, 2, 1, "", "is_equilateral"], [71, 2, 1, "", "is_isosceles"], [71, 2, 1, "", "is_right"], [71, 2, 1, "", "is_scalene"], [71, 2, 1, "", "is_similar"], [71, 4, 1, "", "medial"], [71, 4, 1, "", "medians"], [71, 4, 1, "", "nine_point_circle"], [71, 4, 1, "", "orthocenter"], [71, 4, 1, "", "vertices"]], "sympy.geometry.util": [[72, 3, 1, "", "are_similar"], [72, 3, 1, "", "centroid"], [72, 3, 1, "", "convex_hull"], [72, 3, 1, "", "idiff"], [72, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[78, 1, 1, "", "DifferentialOperator"], [78, 1, 1, "", "DifferentialOperatorAlgebra"], [78, 3, 1, "", "DifferentialOperators"], [78, 1, 1, "", "HolonomicFunction"], [76, 3, 1, "", "_convert_poly_rat_alg"], [76, 3, 1, "", "_create_table"], [74, 3, 1, "", "expr_to_holonomic"], [74, 3, 1, "", "from_hyper"], [74, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[78, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[77, 2, 1, "", "composition"], [77, 2, 1, "", "diff"], [77, 2, 1, "", "evalf"], [77, 2, 1, "", "integrate"], [77, 2, 1, "", "series"], [77, 2, 1, "", "to_expr"], [77, 2, 1, "", "to_hyper"], [77, 2, 1, "", "to_meijerg"], [77, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[82, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[82, 3, 1, "", "components"], [82, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[82, 1, 1, "", "Integral"], [82, 3, 1, "", "integrate"], [82, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[82, 2, 1, "", "as_sum"], [82, 2, 1, "", "doit"], [82, 4, 1, "", "free_symbols"], [82, 6, 1, "", "is_commutative"], [82, 2, 1, "", "principal_value"], [82, 2, 1, "", "transform"]], "sympy.integrals": [[82, 0, 0, "-", "intpoly"], [80, 0, 0, "-", "meijerint"], [80, 0, 0, "-", "meijerint_doc"], [82, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[82, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[82, 3, 1, "", "integral_steps"], [82, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[80, 7, 1, "", "_CoeffExpValueError"], [80, 3, 1, "", "_check_antecedents"], [80, 3, 1, "", "_check_antecedents_1"], [80, 3, 1, "", "_check_antecedents_inversion"], [80, 3, 1, "", "_condsimp"], [80, 3, 1, "", "_create_lookup_table"], [80, 3, 1, "", "_dummy"], [80, 3, 1, "", "_dummy_"], [80, 3, 1, "", "_eval_cond"], [80, 3, 1, "", "_exponents"], [80, 3, 1, "", "_find_splitting_points"], [80, 3, 1, "", "_flip_g"], [80, 3, 1, "", "_functions"], [80, 3, 1, "", "_get_coeff_exp"], [80, 3, 1, "", "_guess_expansion"], [80, 3, 1, "", "_inflate_fox_h"], [80, 3, 1, "", "_inflate_g"], [80, 3, 1, "", "_int0oo"], [80, 3, 1, "", "_int0oo_1"], [80, 3, 1, "", "_int_inversion"], [80, 3, 1, "", "_is_analytic"], [80, 3, 1, "", "_meijerint_definite_2"], [80, 3, 1, "", "_meijerint_definite_3"], [80, 3, 1, "", "_meijerint_definite_4"], [80, 3, 1, "", "_meijerint_indefinite_1"], [80, 3, 1, "", "_mul_args"], [80, 3, 1, "", "_mul_as_two_parts"], [80, 3, 1, "", "_my_principal_branch"], [80, 3, 1, "", "_mytype"], [80, 3, 1, "", "_rewrite1"], [80, 3, 1, "", "_rewrite2"], [80, 3, 1, "", "_rewrite_inversion"], [80, 3, 1, "", "_rewrite_saxena"], [80, 3, 1, "", "_rewrite_saxena_1"], [80, 3, 1, "", "_rewrite_single"], [80, 3, 1, "", "_split_mul"], [80, 3, 1, "", "meijerint_definite"], [80, 3, 1, "", "meijerint_indefinite"], [80, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[82, 3, 1, "", "gauss_chebyshev_t"], [82, 3, 1, "", "gauss_chebyshev_u"], [82, 3, 1, "", "gauss_gen_laguerre"], [82, 3, 1, "", "gauss_hermite"], [82, 3, 1, "", "gauss_jacobi"], [82, 3, 1, "", "gauss_laguerre"], [82, 3, 1, "", "gauss_legendre"], [82, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[82, 3, 1, "", "ratint"], [82, 3, 1, "", "ratint_logpart"], [82, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[82, 1, 1, "", "NonElementaryIntegral"], [82, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[82, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[82, 1, 1, "", "CosineTransform"], [82, 1, 1, "", "FourierTransform"], [82, 1, 1, "", "HankelTransform"], [82, 1, 1, "", "IntegralTransform"], [82, 7, 1, "", "IntegralTransformError"], [82, 1, 1, "", "InverseCosineTransform"], [82, 1, 1, "", "InverseFourierTransform"], [82, 1, 1, "", "InverseHankelTransform"], [82, 1, 1, "", "InverseLaplaceTransform"], [82, 1, 1, "", "InverseMellinTransform"], [82, 1, 1, "", "InverseSineTransform"], [82, 1, 1, "", "LaplaceTransform"], [82, 1, 1, "", "MellinTransform"], [82, 1, 1, "", "SineTransform"], [82, 3, 1, "", "_fast_inverse_laplace"], [82, 3, 1, "", "_fourier_transform"], [82, 3, 1, "", "cosine_transform"], [82, 3, 1, "", "fourier_transform"], [82, 3, 1, "", "hankel_transform"], [82, 3, 1, "", "inverse_cosine_transform"], [82, 3, 1, "", "inverse_fourier_transform"], [82, 3, 1, "", "inverse_hankel_transform"], [82, 3, 1, "", "inverse_laplace_transform"], [82, 3, 1, "", "inverse_mellin_transform"], [82, 3, 1, "", "inverse_sine_transform"], [82, 3, 1, "", "laplace_transform"], [82, 3, 1, "", "mellin_transform"], [82, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[82, 2, 1, "", "doit"], [82, 4, 1, "", "function"], [82, 4, 1, "", "function_variable"], [82, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[82, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[83, 0, 0, "-", "printing"], [83, 0, 0, "-", "session"]], "sympy.interactive.printing": [[83, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[83, 3, 1, "", "enable_automatic_int_sympification"], [83, 3, 1, "", "enable_automatic_symbols"], [83, 3, 1, "", "init_ipython_session"], [83, 3, 1, "", "init_python_session"], [83, 3, 1, "", "init_session"], [83, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[84, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[84, 1, 1, "", "CartanType_generator"], [84, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[84, 2, 1, "", "rank"], [84, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[84, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[84, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[84, 2, 1, "", "add_as_roots"], [84, 2, 1, "", "add_simple_roots"], [84, 2, 1, "", "all_roots"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dynkin_diagram"], [84, 2, 1, "", "root_space"], [84, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[84, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[84, 2, 1, "", "basic_root"], [84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "highest_root"], [84, 2, 1, "", "lie_algebra"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[84, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[84, 2, 1, "", "basic_root"], [84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "lie_algebra"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[84, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[84, 2, 1, "", "basic_root"], [84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "lie_algebra"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[84, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[84, 2, 1, "", "basic_root"], [84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "lie_algebra"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[84, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[84, 2, 1, "", "basic_root"], [84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[84, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[84, 2, 1, "", "basic_root"], [84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[84, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[84, 2, 1, "", "basis"], [84, 2, 1, "", "cartan_matrix"], [84, 2, 1, "", "dimension"], [84, 2, 1, "", "positive_roots"], [84, 2, 1, "", "roots"], [84, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[84, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[84, 2, 1, "", "coxeter_diagram"], [84, 2, 1, "", "delete_doubles"], [84, 2, 1, "", "element_order"], [84, 2, 1, "", "generators"], [84, 2, 1, "", "group_name"], [84, 2, 1, "", "group_order"], [84, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[85, 3, 1, "", "ANFform"], [85, 1, 1, "", "And"], [85, 1, 1, "", "Boolean"], [85, 1, 1, "", "BooleanFalse"], [85, 1, 1, "", "BooleanTrue"], [85, 1, 1, "", "Equivalent"], [85, 1, 1, "", "Exclusive"], [85, 1, 1, "", "ITE"], [85, 1, 1, "", "Implies"], [85, 1, 1, "", "Nand"], [85, 1, 1, "", "Nor"], [85, 1, 1, "", "Not"], [85, 1, 1, "", "Or"], [85, 3, 1, "", "POSform"], [85, 3, 1, "", "SOPform"], [85, 1, 1, "", "Xnor"], [85, 1, 1, "", "Xor"], [85, 3, 1, "", "anf_coeffs"], [85, 3, 1, "", "bool_map"], [85, 3, 1, "", "bool_maxterm"], [85, 3, 1, "", "bool_minterm"], [85, 3, 1, "", "bool_monomial"], [85, 3, 1, "", "distribute_and_over_or"], [85, 3, 1, "", "distribute_or_over_and"], [85, 3, 1, "", "distribute_xor_over_and"], [85, 3, 1, "", "eliminate_implications"], [85, 3, 1, "", "gateinputcount"], [85, 3, 1, "", "integer_to_term"], [85, 3, 1, "", "is_anf"], [85, 3, 1, "", "is_cnf"], [85, 3, 1, "", "is_dnf"], [85, 3, 1, "", "is_nnf"], [85, 3, 1, "", "simplify_logic"], [85, 3, 1, "", "term_to_integer"], [85, 3, 1, "", "to_anf"], [85, 3, 1, "", "to_cnf"], [85, 3, 1, "", "to_dnf"], [85, 3, 1, "", "to_int_repr"], [85, 3, 1, "", "to_nnf"], [85, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[85, 2, 1, "", "as_set"], [85, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[85, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[85, 2, 1, "", "as_set"]], "sympy.logic": [[85, 0, 0, "-", "inference"]], "sympy.logic.inference": [[85, 3, 1, "", "satisfiable"]], "sympy.matrices": [[86, 0, 0, "-", "common"], [88, 0, 0, "-", "expressions"], [89, 0, 0, "-", "immutable"], [91, 0, 0, "-", "matrices"], [93, 0, 0, "-", "sparse"], [94, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[86, 1, 1, "", "MatrixCommon"], [86, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[86, 4, 1, "", "C"], [86, 4, 1, "", "H"], [86, 4, 1, "", "T"], [86, 2, 1, "", "__abs__"], [86, 2, 1, "", "__add__"], [86, 2, 1, "", "__getitem__"], [86, 2, 1, "", "__len__"], [86, 2, 1, "", "__mul__"], [86, 2, 1, "", "__pow__"], [86, 5, 1, "", "__weakref__"], [86, 2, 1, "", "adjoint"], [86, 2, 1, "", "applyfunc"], [86, 2, 1, "", "as_real_imag"], [86, 2, 1, "", "atoms"], [86, 2, 1, "", "col"], [86, 2, 1, "", "col_del"], [86, 2, 1, "", "col_insert"], [86, 2, 1, "", "col_join"], [86, 2, 1, "", "companion"], [86, 2, 1, "", "conjugate"], [86, 2, 1, "", "diag"], [86, 2, 1, "", "diagonal"], [86, 2, 1, "", "evalf"], [86, 2, 1, "", "expand"], [86, 2, 1, "", "extract"], [86, 2, 1, "", "eye"], [86, 4, 1, "", "free_symbols"], [86, 2, 1, "", "get_diag_blocks"], [86, 2, 1, "", "has"], [86, 2, 1, "", "hstack"], [86, 2, 1, "", "is_anti_symmetric"], [86, 2, 1, "", "is_diagonal"], [86, 4, 1, "", "is_hermitian"], [86, 4, 1, "", "is_lower"], [86, 4, 1, "", "is_lower_hessenberg"], [86, 4, 1, "", "is_square"], [86, 4, 1, "", "is_strongly_diagonally_dominant"], [86, 2, 1, "", "is_symbolic"], [86, 2, 1, "", "is_symmetric"], [86, 4, 1, "", "is_upper"], [86, 4, 1, "", "is_upper_hessenberg"], [86, 4, 1, "", "is_weakly_diagonally_dominant"], [86, 4, 1, "", "is_zero_matrix"], [86, 2, 1, "", "jordan_block"], [86, 2, 1, "", "lower_triangular"], [86, 2, 1, "", "multiply"], [86, 2, 1, "", "multiply_elementwise"], [86, 2, 1, "", "n"], [86, 2, 1, "", "ones"], [86, 2, 1, "", "permute"], [86, 2, 1, "", "permute_cols"], [86, 2, 1, "", "permute_rows"], [86, 2, 1, "", "pow"], [86, 2, 1, "", "refine"], [86, 2, 1, "", "replace"], [86, 2, 1, "", "reshape"], [86, 2, 1, "", "rmultiply"], [86, 2, 1, "", "rot90"], [86, 2, 1, "", "row"], [86, 2, 1, "", "row_del"], [86, 2, 1, "", "row_insert"], [86, 2, 1, "", "row_join"], [86, 4, 1, "", "shape"], [86, 2, 1, "", "simplify"], [86, 2, 1, "", "subs"], [86, 2, 1, "", "todod"], [86, 2, 1, "", "todok"], [86, 2, 1, "", "tolist"], [86, 2, 1, "", "trace"], [86, 2, 1, "", "transpose"], [86, 2, 1, "", "upper_triangular"], [86, 2, 1, "", "values"], [86, 2, 1, "", "vec"], [86, 2, 1, "", "vech"], [86, 2, 1, "", "vstack"], [86, 2, 1, "", "wilkinson"], [86, 2, 1, "", "xreplace"], [86, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[87, 1, 1, "", "DenseMatrix"], [91, 3, 1, "", "GramSchmidt"], [87, 5, 1, "", "Matrix"], [87, 1, 1, "", "MutableDenseMatrix"], [91, 3, 1, "", "casoratian"], [91, 3, 1, "", "diag"], [91, 3, 1, "", "eye"], [91, 3, 1, "", "hessian"], [91, 3, 1, "", "jordan_cell"], [91, 3, 1, "", "list2numpy"], [91, 3, 1, "", "matrix2numpy"], [91, 3, 1, "", "matrix_multiply_elementwise"], [91, 3, 1, "", "ones"], [91, 3, 1, "", "randMatrix"], [91, 3, 1, "", "rot_axis1"], [91, 3, 1, "", "rot_axis2"], [91, 3, 1, "", "rot_axis3"], [91, 3, 1, "", "symarray"], [91, 3, 1, "", "wronskian"], [91, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[87, 2, 1, "", "LDLdecomposition"], [87, 2, 1, "", "as_immutable"], [87, 2, 1, "", "as_mutable"], [87, 2, 1, "", "cholesky"], [87, 2, 1, "", "lower_triangular_solve"], [87, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[87, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[88, 1, 1, "", "CompanionMatrix"], [88, 1, 1, "", "FunctionMatrix"], [88, 1, 1, "", "HadamardPower"], [88, 1, 1, "", "HadamardProduct"], [88, 1, 1, "", "Identity"], [88, 1, 1, "", "Inverse"], [88, 1, 1, "", "MatAdd"], [88, 1, 1, "", "MatMul"], [88, 1, 1, "", "MatPow"], [88, 1, 1, "", "MatrixExpr"], [88, 1, 1, "", "MatrixPermute"], [88, 1, 1, "", "MatrixSet"], [88, 1, 1, "", "MatrixSymbol"], [88, 1, 1, "", "PermutationMatrix"], [88, 1, 1, "", "Trace"], [88, 1, 1, "", "Transpose"], [88, 1, 1, "", "ZeroMatrix"], [88, 0, 0, "-", "blockmatrix"], [88, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[88, 4, 1, "", "T"], [88, 2, 1, "", "as_coeff_Mul"], [88, 2, 1, "", "as_explicit"], [88, 2, 1, "", "as_mutable"], [88, 2, 1, "", "equals"], [88, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[88, 1, 1, "", "BlockDiagMatrix"], [88, 1, 1, "", "BlockMatrix"], [88, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[88, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[88, 2, 1, "", "LDUdecomposition"], [88, 2, 1, "", "LUdecomposition"], [88, 2, 1, "", "UDLdecomposition"], [88, 2, 1, "", "schur"], [88, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[89, 1, 1, "", "ImmutableDenseMatrix"], [89, 5, 1, "", "ImmutableMatrix"], [93, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[91, 1, 1, "", "MatrixBase"], [91, 1, 1, "", "MatrixCalculus"], [91, 1, 1, "", "MatrixDeterminant"], [91, 1, 1, "", "MatrixEigen"], [91, 1, 1, "", "MatrixError"], [91, 1, 1, "", "MatrixReductions"], [91, 1, 1, "", "MatrixSubspaces"], [91, 1, 1, "", "NonSquareMatrixError"], [91, 1, 1, "", "ShapeError"], [91, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[91, 4, 1, "", "D"], [91, 2, 1, "", "LDLdecomposition"], [91, 2, 1, "", "LDLsolve"], [91, 2, 1, "", "LUdecomposition"], [91, 2, 1, "", "LUdecompositionFF"], [91, 2, 1, "", "LUdecomposition_Simple"], [91, 2, 1, "", "LUsolve"], [91, 2, 1, "", "QRdecomposition"], [91, 2, 1, "", "QRsolve"], [91, 2, 1, "", "add"], [91, 2, 1, "", "analytic_func"], [91, 2, 1, "", "cholesky"], [91, 2, 1, "", "cholesky_solve"], [91, 2, 1, "", "condition_number"], [91, 2, 1, "", "connected_components"], [91, 2, 1, "", "connected_components_decomposition"], [91, 2, 1, "", "copy"], [91, 2, 1, "", "cross"], [91, 2, 1, "", "diagonal_solve"], [91, 2, 1, "", "dot"], [91, 2, 1, "", "dual"], [91, 2, 1, "", "exp"], [91, 2, 1, "", "gauss_jordan_solve"], [91, 2, 1, "", "inv"], [91, 2, 1, "", "inv_mod"], [91, 2, 1, "", "inverse_ADJ"], [91, 2, 1, "", "inverse_BLOCK"], [91, 2, 1, "", "inverse_CH"], [91, 2, 1, "", "inverse_GE"], [91, 2, 1, "", "inverse_LDL"], [91, 2, 1, "", "inverse_LU"], [91, 2, 1, "", "inverse_QR"], [91, 2, 1, "", "irregular"], [91, 2, 1, "", "is_nilpotent"], [91, 2, 1, "", "key2bounds"], [91, 2, 1, "", "key2ij"], [91, 2, 1, "", "log"], [91, 2, 1, "", "lower_triangular_solve"], [91, 2, 1, "", "norm"], [91, 2, 1, "", "normalized"], [91, 2, 1, "", "pinv"], [91, 2, 1, "", "pinv_solve"], [91, 2, 1, "", "print_nonzero"], [91, 2, 1, "", "project"], [91, 2, 1, "", "rank_decomposition"], [91, 2, 1, "", "singular_value_decomposition"], [91, 2, 1, "", "solve"], [91, 2, 1, "", "solve_least_squares"], [91, 2, 1, "", "strongly_connected_components"], [91, 2, 1, "", "strongly_connected_components_decomposition"], [91, 2, 1, "", "table"], [91, 2, 1, "", "upper_hessenberg_decomposition"], [91, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[91, 2, 1, "", "diff"], [91, 2, 1, "", "integrate"], [91, 2, 1, "", "jacobian"], [91, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[91, 2, 1, "", "adjugate"], [91, 2, 1, "", "charpoly"], [91, 2, 1, "", "cofactor"], [91, 2, 1, "", "cofactor_matrix"], [91, 2, 1, "", "det"], [91, 2, 1, "", "minor"], [91, 2, 1, "", "minor_submatrix"], [91, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[91, 2, 1, "", "bidiagonal_decomposition"], [91, 2, 1, "", "bidiagonalize"], [91, 2, 1, "", "diagonalize"], [91, 2, 1, "", "eigenvals"], [91, 2, 1, "", "eigenvects"], [91, 2, 1, "", "is_diagonalizable"], [91, 4, 1, "", "is_indefinite"], [91, 4, 1, "", "is_negative_definite"], [91, 4, 1, "", "is_negative_semidefinite"], [91, 4, 1, "", "is_positive_definite"], [91, 4, 1, "", "is_positive_semidefinite"], [91, 2, 1, "", "jordan_form"], [91, 2, 1, "", "left_eigenvects"], [91, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[91, 2, 1, "", "echelon_form"], [91, 2, 1, "", "elementary_col_op"], [91, 2, 1, "", "elementary_row_op"], [91, 4, 1, "", "is_echelon"], [91, 2, 1, "", "rank"], [91, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[91, 2, 1, "", "columnspace"], [91, 2, 1, "", "nullspace"], [91, 2, 1, "", "orthogonalize"], [91, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[92, 3, 1, "", "hermite_normal_form"], [92, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[93, 1, 1, "", "MutableSparseMatrix"], [93, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[94, 2, 1, "", "_csrtodok"], [94, 2, 1, "", "_doktocsr"], [94, 2, 1, "", "banded"]], "sympy.ntheory": [[95, 0, 0, "-", "bbp_pi"], [95, 0, 0, "-", "continued_fraction"], [95, 0, 0, "-", "digits"], [95, 0, 0, "-", "ecm"], [95, 0, 0, "-", "egyptian_fraction"], [95, 0, 0, "-", "factor_"], [95, 0, 0, "-", "generate"], [95, 1, 1, "", "mobius"], [95, 0, 0, "-", "modular"], [95, 0, 0, "-", "multinomial"], [95, 0, 0, "-", "partitions_"], [95, 0, 0, "-", "primetest"], [95, 0, 0, "-", "qs"], [95, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[95, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[95, 3, 1, "", "continued_fraction"], [95, 3, 1, "", "continued_fraction_convergents"], [95, 3, 1, "", "continued_fraction_iterator"], [95, 3, 1, "", "continued_fraction_periodic"], [95, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[95, 3, 1, "", "count_digits"], [95, 3, 1, "", "digits"], [95, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[95, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[95, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[95, 3, 1, "", "abundance"], [95, 3, 1, "", "antidivisor_count"], [95, 3, 1, "", "antidivisors"], [95, 3, 1, "", "core"], [95, 3, 1, "", "digits"], [95, 3, 1, "", "divisor_count"], [95, 1, 1, "", "divisor_sigma"], [95, 3, 1, "", "divisors"], [95, 3, 1, "", "factorint"], [95, 3, 1, "", "factorrat"], [95, 3, 1, "", "is_abundant"], [95, 3, 1, "", "is_amicable"], [95, 3, 1, "", "is_deficient"], [95, 3, 1, "", "is_mersenne_prime"], [95, 3, 1, "", "is_perfect"], [95, 3, 1, "", "mersenne_prime_exponent"], [95, 3, 1, "", "multiplicity"], [95, 3, 1, "", "perfect_power"], [95, 3, 1, "", "pollard_pm1"], [95, 3, 1, "", "pollard_rho"], [95, 3, 1, "", "primefactors"], [95, 1, 1, "", "primenu"], [95, 1, 1, "", "primeomega"], [95, 3, 1, "", "proper_divisor_count"], [95, 3, 1, "", "proper_divisors"], [95, 1, 1, "", "reduced_totient"], [95, 3, 1, "", "smoothness"], [95, 3, 1, "", "smoothness_p"], [95, 1, 1, "", "totient"], [95, 3, 1, "", "trailing"], [95, 3, 1, "", "udivisor_count"], [95, 1, 1, "", "udivisor_sigma"], [95, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[95, 1, 1, "", "Sieve"], [95, 3, 1, "", "composite"], [95, 3, 1, "", "compositepi"], [95, 3, 1, "", "cycle_length"], [95, 3, 1, "", "nextprime"], [95, 3, 1, "", "prevprime"], [95, 3, 1, "", "prime"], [95, 3, 1, "", "primepi"], [95, 3, 1, "", "primerange"], [95, 3, 1, "", "primorial"], [95, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[95, 2, 1, "", "extend"], [95, 2, 1, "", "extend_to_no"], [95, 2, 1, "", "mobiusrange"], [95, 2, 1, "", "primerange"], [95, 2, 1, "", "search"], [95, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[95, 3, 1, "", "crt"], [95, 3, 1, "", "crt1"], [95, 3, 1, "", "crt2"], [95, 3, 1, "", "solve_congruence"], [95, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[95, 3, 1, "", "binomial_coefficients"], [95, 3, 1, "", "binomial_coefficients_list"], [95, 3, 1, "", "multinomial_coefficients"], [95, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[95, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[95, 3, 1, "", "is_euler_pseudoprime"], [95, 3, 1, "", "is_extra_strong_lucas_prp"], [95, 3, 1, "", "is_gaussian_prime"], [95, 3, 1, "", "is_lucas_prp"], [95, 3, 1, "", "is_square"], [95, 3, 1, "", "is_strong_lucas_prp"], [95, 3, 1, "", "isprime"], [95, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[95, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[95, 3, 1, "", "discrete_log"], [95, 3, 1, "", "is_nthpow_residue"], [95, 3, 1, "", "is_primitive_root"], [95, 3, 1, "", "is_quad_residue"], [95, 3, 1, "", "jacobi_symbol"], [95, 3, 1, "", "legendre_symbol"], [95, 3, 1, "", "n_order"], [95, 3, 1, "", "nthroot_mod"], [95, 3, 1, "", "primitive_root"], [95, 3, 1, "", "quadratic_residues"], [95, 3, 1, "", "sqrt_mod"], [95, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[97, 1, 1, "", "LaTeXParsingError"], [97, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[97, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[97, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[97, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[97, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[97, 2, 1, "", "convert_to_c"], [97, 2, 1, "", "convert_to_expr"], [97, 2, 1, "", "convert_to_fortran"], [97, 2, 1, "", "convert_to_python"], [97, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[97, 3, 1, "", "auto_number"], [97, 3, 1, "", "auto_symbol"], [97, 3, 1, "", "convert_xor"], [97, 3, 1, "", "eval_expr"], [97, 3, 1, "", "factorial_notation"], [97, 3, 1, "", "function_exponentiation"], [97, 3, 1, "", "implicit_application"], [97, 3, 1, "", "implicit_multiplication"], [97, 3, 1, "", "implicit_multiplication_application"], [97, 3, 1, "", "lambda_notation"], [97, 3, 1, "", "parse_expr"], [97, 3, 1, "", "rationalize"], [97, 3, 1, "", "repeated_decimals"], [97, 3, 1, "", "split_symbols"], [97, 3, 1, "", "split_symbols_custom"], [97, 6, 1, "", "standard_transformations"], [97, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[98, 0, 0, "-", "beam"], [101, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[98, 1, 1, "", "Beam"], [98, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[98, 4, 1, "", "applied_loads"], [98, 2, 1, "", "apply_load"], [98, 2, 1, "", "apply_support"], [98, 4, 1, "", "area"], [98, 2, 1, "", "bending_moment"], [98, 4, 1, "", "boundary_conditions"], [98, 4, 1, "", "cross_section"], [98, 2, 1, "", "deflection"], [98, 2, 1, "", "draw"], [98, 4, 1, "", "elastic_modulus"], [98, 4, 1, "", "ild_moment"], [98, 4, 1, "", "ild_reactions"], [98, 4, 1, "", "ild_shear"], [98, 2, 1, "", "join"], [98, 4, 1, "", "length"], [98, 4, 1, "", "load"], [98, 2, 1, "", "max_bmoment"], [98, 2, 1, "", "max_deflection"], [98, 2, 1, "", "max_shear_force"], [98, 2, 1, "", "plot_bending_moment"], [98, 2, 1, "", "plot_deflection"], [98, 2, 1, "", "plot_ild_moment"], [98, 2, 1, "", "plot_ild_reactions"], [98, 2, 1, "", "plot_ild_shear"], [98, 2, 1, "", "plot_loading_results"], [98, 2, 1, "", "plot_shear_force"], [98, 2, 1, "", "plot_shear_stress"], [98, 2, 1, "", "plot_slope"], [98, 2, 1, "", "point_cflexure"], [98, 4, 1, "", "reaction_loads"], [98, 2, 1, "", "remove_load"], [98, 4, 1, "", "second_moment"], [98, 2, 1, "", "shear_force"], [98, 2, 1, "", "shear_stress"], [98, 2, 1, "", "slope"], [98, 2, 1, "", "solve_for_ild_moment"], [98, 2, 1, "", "solve_for_ild_reactions"], [98, 2, 1, "", "solve_for_ild_shear"], [98, 2, 1, "", "solve_for_reaction_loads"], [98, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[98, 2, 1, "", "angular_deflection"], [98, 2, 1, "", "apply_load"], [98, 2, 1, "", "apply_moment_load"], [98, 4, 1, "", "area"], [98, 2, 1, "", "axial_force"], [98, 2, 1, "", "axial_stress"], [98, 2, 1, "", "bending_moment"], [98, 4, 1, "", "boundary_conditions"], [98, 2, 1, "", "deflection"], [98, 4, 1, "", "load_vector"], [98, 2, 1, "", "max_bending_moment"], [98, 2, 1, "", "max_bmoment"], [98, 2, 1, "", "max_deflection"], [98, 2, 1, "", "max_shear_force"], [98, 4, 1, "", "moment_load_vector"], [98, 2, 1, "", "plot_bending_moment"], [98, 2, 1, "", "plot_deflection"], [98, 2, 1, "", "plot_loading_results"], [98, 2, 1, "", "plot_shear_force"], [98, 2, 1, "", "plot_shear_stress"], [98, 2, 1, "", "plot_slope"], [98, 2, 1, "", "polar_moment"], [98, 4, 1, "", "second_moment"], [98, 2, 1, "", "shear_force"], [98, 4, 1, "", "shear_modulus"], [98, 2, 1, "", "shear_stress"], [98, 2, 1, "", "slope"], [98, 2, 1, "", "solve_for_reaction_loads"], [98, 2, 1, "", "solve_for_torsion"], [98, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[101, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[101, 2, 1, "", "add_member"], [101, 2, 1, "", "add_node"], [101, 2, 1, "", "apply_load"], [101, 2, 1, "", "apply_support"], [101, 2, 1, "", "change_member_label"], [101, 2, 1, "", "change_node_label"], [101, 4, 1, "", "internal_forces"], [101, 4, 1, "", "loads"], [101, 4, 1, "", "member_labels"], [101, 4, 1, "", "members"], [101, 4, 1, "", "node_labels"], [101, 4, 1, "", "node_positions"], [101, 4, 1, "", "nodes"], [101, 4, 1, "", "reaction_loads"], [101, 2, 1, "", "remove_load"], [101, 2, 1, "", "remove_member"], [101, 2, 1, "", "remove_node"], [101, 2, 1, "", "remove_support"], [101, 2, 1, "", "solve"], [101, 4, 1, "", "supports"]], "sympy.physics": [[104, 0, 0, "-", "control"], [107, 0, 0, "-", "hydrogen"], [108, 0, 0, "-", "matrices"], [128, 0, 0, "-", "mechanics"], [143, 0, 0, "-", "paulialgebra"], [144, 0, 0, "-", "qho_1d"], [168, 0, 0, "-", "secondquant"], [169, 0, 0, "-", "sho"], [184, 0, 0, "-", "vector"], [187, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[103, 2, 1, "", "bode_magnitude_numerical_data"], [103, 2, 1, "", "bode_magnitude_plot"], [103, 2, 1, "", "bode_phase_numerical_data"], [103, 2, 1, "", "bode_phase_plot"], [103, 2, 1, "", "bode_plot"], [103, 2, 1, "", "impulse_response_numerical_data"], [103, 2, 1, "", "impulse_response_plot"], [103, 2, 1, "", "pole_zero_numerical_data"], [103, 2, 1, "", "pole_zero_plot"], [103, 2, 1, "", "ramp_response_numerical_data"], [103, 2, 1, "", "ramp_response_plot"], [103, 2, 1, "", "step_response_numerical_data"], [103, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[105, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[105, 1, 1, "", "Feedback"], [105, 1, 1, "", "MIMOFeedback"], [105, 1, 1, "", "MIMOParallel"], [105, 1, 1, "", "MIMOSeries"], [105, 1, 1, "", "Parallel"], [105, 1, 1, "", "Series"], [105, 1, 1, "", "TransferFunction"], [105, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[105, 2, 1, "", "doit"], [105, 4, 1, "", "sensitivity"], [105, 4, 1, "", "sign"], [105, 4, 1, "", "sys1"], [105, 4, 1, "", "sys2"], [105, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[105, 2, 1, "", "doit"], [105, 4, 1, "", "sensitivity"], [105, 4, 1, "", "sign"], [105, 4, 1, "", "sys1"], [105, 4, 1, "", "sys2"], [105, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[105, 2, 1, "", "doit"], [105, 4, 1, "", "num_inputs"], [105, 4, 1, "", "num_outputs"], [105, 4, 1, "", "shape"], [105, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[105, 2, 1, "", "doit"], [105, 4, 1, "", "num_inputs"], [105, 4, 1, "", "num_outputs"], [105, 4, 1, "", "shape"], [105, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[105, 2, 1, "", "doit"], [105, 4, 1, "", "is_biproper"], [105, 4, 1, "", "is_proper"], [105, 4, 1, "", "is_strictly_proper"], [105, 2, 1, "", "to_expr"], [105, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[105, 2, 1, "", "doit"], [105, 4, 1, "", "is_biproper"], [105, 4, 1, "", "is_proper"], [105, 4, 1, "", "is_strictly_proper"], [105, 2, 1, "", "to_expr"], [105, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[105, 2, 1, "", "dc_gain"], [105, 4, 1, "", "den"], [105, 2, 1, "", "expand"], [105, 2, 1, "", "from_rational_expression"], [105, 4, 1, "", "is_biproper"], [105, 4, 1, "", "is_proper"], [105, 2, 1, "", "is_stable"], [105, 4, 1, "", "is_strictly_proper"], [105, 4, 1, "", "num"], [105, 2, 1, "", "poles"], [105, 2, 1, "", "to_expr"], [105, 4, 1, "", "var"], [105, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[105, 2, 1, "", "elem_poles"], [105, 2, 1, "", "elem_zeros"], [105, 2, 1, "", "expand"], [105, 2, 1, "", "from_Matrix"], [105, 4, 1, "", "num_inputs"], [105, 4, 1, "", "num_outputs"], [105, 4, 1, "", "shape"], [105, 2, 1, "", "transpose"], [105, 4, 1, "", "var"]], "sympy.physics.hep": [[106, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[106, 3, 1, "", "extract_type_tens"], [106, 3, 1, "", "gamma_trace"], [106, 3, 1, "", "kahane_simplify"], [106, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[107, 3, 1, "", "E_nl"], [107, 3, 1, "", "E_nl_dirac"], [107, 3, 1, "", "Psi_nlm"], [107, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[108, 3, 1, "", "mdft"], [108, 3, 1, "", "mgamma"], [108, 3, 1, "", "msigma"], [108, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[110, 0, 0, "-", "body"], [111, 3, 1, "", "find_dynamicsymbols"], [112, 0, 0, "-", "joint"], [112, 0, 0, "-", "jointsmethod"], [113, 0, 0, "-", "kane"], [113, 0, 0, "-", "lagrange"], [114, 0, 0, "-", "linearize"], [111, 3, 1, "", "msubs"], [115, 0, 0, "-", "particle"], [115, 0, 0, "-", "rigidbody"], [117, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[110, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[110, 2, 1, "", "ang_vel_in"], [110, 2, 1, "", "apply_force"], [110, 2, 1, "", "apply_torque"], [110, 2, 1, "", "clear_loads"], [110, 2, 1, "", "dcm"], [110, 4, 1, "", "inertia"], [110, 2, 1, "", "kinetic_energy"], [110, 2, 1, "", "masscenter_vel"], [110, 2, 1, "", "parallel_axis"], [110, 2, 1, "", "remove_load"], [110, 4, 1, "", "x"], [110, 4, 1, "", "y"], [110, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[115, 3, 1, "", "Lagrangian"], [115, 3, 1, "", "angular_momentum"], [115, 3, 1, "", "inertia"], [115, 3, 1, "", "inertia_of_point_mass"], [115, 3, 1, "", "kinetic_energy"], [115, 3, 1, "", "linear_momentum"], [115, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[112, 1, 1, "", "CylindricalJoint"], [112, 1, 1, "", "Joint"], [112, 1, 1, "", "PinJoint"], [112, 1, 1, "", "PlanarJoint"], [112, 1, 1, "", "PrismaticJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[112, 4, 1, "", "joint_axis"], [112, 4, 1, "", "rotation_coordinate"], [112, 4, 1, "", "rotation_speed"], [112, 4, 1, "", "translation_coordinate"], [112, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[112, 4, 1, "", "child"], [112, 4, 1, "", "child_axis"], [112, 4, 1, "", "child_point"], [112, 4, 1, "", "coordinates"], [112, 4, 1, "", "kdes"], [112, 4, 1, "", "name"], [112, 4, 1, "", "parent"], [112, 4, 1, "", "parent_axis"], [112, 4, 1, "", "parent_point"], [112, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[112, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[112, 4, 1, "", "planar_coordinates"], [112, 4, 1, "", "planar_speeds"], [112, 4, 1, "", "planar_vectors"], [112, 4, 1, "", "rotation_axis"], [112, 4, 1, "", "rotation_coordinate"], [112, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[112, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[112, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[112, 4, 1, "", "bodies"], [112, 4, 1, "", "forcing"], [112, 4, 1, "", "forcing_full"], [112, 2, 1, "", "form_eoms"], [112, 4, 1, "", "kdes"], [112, 4, 1, "", "loads"], [112, 4, 1, "", "mass_matrix"], [112, 4, 1, "", "mass_matrix_full"], [112, 4, 1, "", "method"], [112, 4, 1, "", "q"], [112, 2, 1, "", "rhs"], [112, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[113, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[113, 4, 1, "", "auxiliary_eqs"], [113, 4, 1, "", "forcing"], [113, 4, 1, "", "forcing_full"], [113, 2, 1, "", "kanes_equations"], [113, 2, 1, "", "kindiffdict"], [113, 2, 1, "", "linearize"], [113, 4, 1, "", "mass_matrix"], [113, 4, 1, "", "mass_matrix_full"], [113, 2, 1, "", "rhs"], [113, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[113, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[113, 4, 1, "", "forcing"], [113, 4, 1, "", "forcing_full"], [113, 2, 1, "", "form_lagranges_equations"], [113, 2, 1, "", "linearize"], [113, 4, 1, "", "mass_matrix"], [113, 4, 1, "", "mass_matrix_full"], [113, 2, 1, "", "rhs"], [113, 2, 1, "", "solve_multipliers"], [113, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[114, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[114, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[115, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[115, 2, 1, "", "angular_momentum"], [115, 2, 1, "", "kinetic_energy"], [115, 2, 1, "", "linear_momentum"], [115, 4, 1, "", "mass"], [115, 2, 1, "", "parallel_axis"], [115, 4, 1, "", "point"], [115, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[115, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[115, 2, 1, "", "angular_momentum"], [115, 4, 1, "", "central_inertia"], [115, 4, 1, "", "frame"], [115, 4, 1, "", "inertia"], [115, 2, 1, "", "kinetic_energy"], [115, 2, 1, "", "linear_momentum"], [115, 4, 1, "", "mass"], [115, 4, 1, "", "masscenter"], [115, 2, 1, "", "parallel_axis"], [115, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[117, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[117, 4, 1, "", "alg_con"], [117, 4, 1, "", "bodies"], [117, 4, 1, "", "comb_explicit_rhs"], [117, 4, 1, "", "comb_implicit_mat"], [117, 4, 1, "", "comb_implicit_rhs"], [117, 2, 1, "", "compute_explicit_form"], [117, 2, 1, "", "constant_symbols"], [117, 4, 1, "", "coordinates"], [117, 4, 1, "", "dyn_implicit_mat"], [117, 4, 1, "", "dyn_implicit_rhs"], [117, 2, 1, "", "dynamic_symbols"], [117, 4, 1, "", "kin_explicit_rhs"], [117, 4, 1, "", "loads"], [117, 4, 1, "", "speeds"], [117, 4, 1, "", "states"]], "sympy.physics.optics": [[137, 0, 0, "-", "gaussopt"], [139, 0, 0, "-", "medium"], [140, 0, 0, "-", "polarization"], [141, 0, 0, "-", "utils"], [142, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[137, 1, 1, "", "BeamParameter"], [137, 1, 1, "", "CurvedMirror"], [137, 1, 1, "", "CurvedRefraction"], [137, 1, 1, "", "FlatMirror"], [137, 1, 1, "", "FlatRefraction"], [137, 1, 1, "", "FreeSpace"], [137, 1, 1, "", "GeometricRay"], [137, 1, 1, "", "RayTransferMatrix"], [137, 1, 1, "", "ThinLens"], [137, 3, 1, "", "conjugate_gauss_beams"], [137, 3, 1, "", "gaussian_conj"], [137, 3, 1, "", "geometric_conj_ab"], [137, 3, 1, "", "geometric_conj_af"], [137, 3, 1, "", "geometric_conj_bf"], [137, 3, 1, "", "rayleigh2waist"], [137, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[137, 4, 1, "", "divergence"], [137, 4, 1, "", "gouy"], [137, 4, 1, "", "q"], [137, 4, 1, "", "radius"], [137, 4, 1, "", "w"], [137, 4, 1, "", "w_0"], [137, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[137, 4, 1, "", "angle"], [137, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[137, 4, 1, "", "A"], [137, 4, 1, "", "B"], [137, 4, 1, "", "C"], [137, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[139, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[139, 4, 1, "", "refractive_index"], [139, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[140, 3, 1, "", "half_wave_retarder"], [140, 3, 1, "", "jones_2_stokes"], [140, 3, 1, "", "jones_vector"], [140, 3, 1, "", "linear_polarizer"], [140, 3, 1, "", "mueller_matrix"], [140, 3, 1, "", "phase_retarder"], [140, 3, 1, "", "polarizing_beam_splitter"], [140, 3, 1, "", "quarter_wave_retarder"], [140, 3, 1, "", "reflective_filter"], [140, 3, 1, "", "stokes_vector"], [140, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[141, 3, 1, "", "brewster_angle"], [141, 3, 1, "", "critical_angle"], [141, 3, 1, "", "deviation"], [141, 3, 1, "", "fresnel_coefficients"], [141, 3, 1, "", "hyperfocal_distance"], [141, 3, 1, "", "lens_formula"], [141, 3, 1, "", "lens_makers_formula"], [141, 3, 1, "", "mirror_formula"], [141, 3, 1, "", "refraction_angle"], [141, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[142, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[142, 4, 1, "", "amplitude"], [142, 4, 1, "", "angular_velocity"], [142, 4, 1, "", "frequency"], [142, 4, 1, "", "n"], [142, 4, 1, "", "phase"], [142, 4, 1, "", "speed"], [142, 4, 1, "", "time_period"], [142, 4, 1, "", "wavelength"], [142, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[143, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[144, 3, 1, "", "E_n"], [144, 3, 1, "", "coherent_state"], [144, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[145, 0, 0, "-", "anticommutator"], [146, 0, 0, "-", "cartesian"], [147, 0, 0, "-", "cg"], [148, 0, 0, "-", "circuitplot"], [149, 0, 0, "-", "commutator"], [150, 0, 0, "-", "constants"], [151, 0, 0, "-", "dagger"], [152, 0, 0, "-", "gate"], [153, 0, 0, "-", "grover"], [154, 0, 0, "-", "hilbert"], [156, 0, 0, "-", "innerproduct"], [157, 0, 0, "-", "operator"], [158, 0, 0, "-", "operatorset"], [159, 0, 0, "-", "piab"], [160, 0, 0, "-", "qapply"], [161, 0, 0, "-", "qft"], [162, 0, 0, "-", "qubit"], [163, 0, 0, "-", "represent"], [164, 0, 0, "-", "shor"], [165, 0, 0, "-", "spin"], [166, 0, 0, "-", "state"], [167, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[145, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[145, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[146, 1, 1, "", "PositionBra3D"], [146, 1, 1, "", "PositionKet3D"], [146, 1, 1, "", "PositionState3D"], [146, 1, 1, "", "PxBra"], [146, 1, 1, "", "PxKet"], [146, 1, 1, "", "PxOp"], [146, 1, 1, "", "XBra"], [146, 1, 1, "", "XKet"], [146, 1, 1, "", "XOp"], [146, 1, 1, "", "YOp"], [146, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[146, 4, 1, "", "position_x"], [146, 4, 1, "", "position_y"], [146, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[146, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[146, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[146, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[146, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[147, 1, 1, "", "CG"], [147, 1, 1, "", "Wigner3j"], [147, 1, 1, "", "Wigner6j"], [147, 1, 1, "", "Wigner9j"], [147, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[148, 1, 1, "", "CircuitPlot"], [148, 3, 1, "", "CreateCGate"], [148, 1, 1, "", "Mx"], [148, 1, 1, "", "Mz"], [148, 3, 1, "", "circuit_plot"], [148, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[148, 2, 1, "", "control_line"], [148, 2, 1, "", "control_point"], [148, 2, 1, "", "not_point"], [148, 2, 1, "", "one_qubit_box"], [148, 2, 1, "", "swap_point"], [148, 2, 1, "", "two_qubit_box"], [148, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[149, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[149, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[150, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[151, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[152, 1, 1, "", "CGate"], [152, 1, 1, "", "CGateS"], [152, 5, 1, "", "CNOT"], [152, 1, 1, "", "CNotGate"], [152, 1, 1, "", "Gate"], [152, 5, 1, "", "H"], [152, 1, 1, "", "HadamardGate"], [152, 1, 1, "", "IdentityGate"], [152, 1, 1, "", "OneQubitGate"], [152, 5, 1, "", "Phase"], [152, 1, 1, "", "PhaseGate"], [152, 5, 1, "", "S"], [152, 5, 1, "", "SWAP"], [152, 1, 1, "", "SwapGate"], [152, 5, 1, "", "T"], [152, 1, 1, "", "TGate"], [152, 1, 1, "", "TwoQubitGate"], [152, 1, 1, "", "UGate"], [152, 5, 1, "", "X"], [152, 1, 1, "", "XGate"], [152, 5, 1, "", "Y"], [152, 1, 1, "", "YGate"], [152, 5, 1, "", "Z"], [152, 1, 1, "", "ZGate"], [152, 3, 1, "", "gate_simp"], [152, 3, 1, "", "gate_sort"], [152, 3, 1, "", "normalized"], [152, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[152, 4, 1, "", "controls"], [152, 2, 1, "", "decompose"], [152, 2, 1, "", "eval_controls"], [152, 4, 1, "", "gate"], [152, 4, 1, "", "min_qubits"], [152, 4, 1, "", "nqubits"], [152, 2, 1, "", "plot_gate"], [152, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[152, 4, 1, "", "controls"], [152, 4, 1, "", "gate"], [152, 4, 1, "", "min_qubits"], [152, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[152, 2, 1, "", "get_target_matrix"], [152, 4, 1, "", "min_qubits"], [152, 4, 1, "", "nqubits"], [152, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[152, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[152, 2, 1, "", "get_target_matrix"], [152, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[153, 1, 1, "", "OracleGate"], [153, 1, 1, "", "WGate"], [153, 3, 1, "", "apply_grover"], [153, 3, 1, "", "grover_iteration"], [153, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[153, 4, 1, "", "search_function"], [153, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[154, 1, 1, "", "ComplexSpace"], [154, 1, 1, "", "DirectSumHilbertSpace"], [154, 1, 1, "", "FockSpace"], [154, 1, 1, "", "HilbertSpace"], [154, 1, 1, "", "L2"], [154, 1, 1, "", "TensorPowerHilbertSpace"], [154, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[154, 2, 1, "", "eval"], [154, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[154, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[154, 2, 1, "", "eval"], [154, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[156, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[157, 1, 1, "", "DifferentialOperator"], [157, 1, 1, "", "HermitianOperator"], [157, 1, 1, "", "IdentityOperator"], [157, 1, 1, "", "Operator"], [157, 1, 1, "", "OuterProduct"], [157, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[157, 4, 1, "", "expr"], [157, 4, 1, "", "free_symbols"], [157, 4, 1, "", "function"], [157, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[157, 4, 1, "", "bra"], [157, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[158, 3, 1, "", "operators_to_state"], [158, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[159, 1, 1, "", "PIABBra"], [159, 1, 1, "", "PIABHamiltonian"], [159, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[160, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[161, 1, 1, "", "IQFT"], [161, 1, 1, "", "QFT"], [161, 5, 1, "", "Rk"], [161, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[161, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[161, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[162, 1, 1, "", "IntQubit"], [162, 1, 1, "", "IntQubitBra"], [162, 1, 1, "", "Qubit"], [162, 1, 1, "", "QubitBra"], [162, 3, 1, "", "matrix_to_density"], [162, 3, 1, "", "matrix_to_qubit"], [162, 3, 1, "", "measure_all"], [162, 3, 1, "", "measure_all_oneshot"], [162, 3, 1, "", "measure_partial"], [162, 3, 1, "", "measure_partial_oneshot"], [162, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[163, 3, 1, "", "enumerate_states"], [163, 3, 1, "", "get_basis"], [163, 3, 1, "", "integrate_result"], [163, 3, 1, "", "rep_expectation"], [163, 3, 1, "", "rep_innerproduct"], [163, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[164, 1, 1, "", "CMod"], [164, 3, 1, "", "period_find"], [164, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[164, 4, 1, "", "N"], [164, 4, 1, "", "a"], [164, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[165, 1, 1, "", "J2Op"], [165, 1, 1, "", "JxBra"], [165, 1, 1, "", "JxBraCoupled"], [165, 1, 1, "", "JxKet"], [165, 1, 1, "", "JxKetCoupled"], [165, 1, 1, "", "JyBra"], [165, 1, 1, "", "JyBraCoupled"], [165, 1, 1, "", "JyKet"], [165, 1, 1, "", "JyKetCoupled"], [165, 1, 1, "", "JzBra"], [165, 1, 1, "", "JzBraCoupled"], [165, 1, 1, "", "JzKet"], [165, 1, 1, "", "JzKetCoupled"], [165, 1, 1, "", "JzOp"], [165, 1, 1, "", "Rotation"], [165, 1, 1, "", "WignerD"], [165, 3, 1, "", "couple"], [165, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[165, 2, 1, "", "D"], [165, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[166, 1, 1, "", "Bra"], [166, 1, 1, "", "BraBase"], [166, 1, 1, "", "Ket"], [166, 1, 1, "", "KetBase"], [166, 1, 1, "", "OrthogonalBra"], [166, 1, 1, "", "OrthogonalKet"], [166, 1, 1, "", "OrthogonalState"], [166, 1, 1, "", "State"], [166, 1, 1, "", "StateBase"], [166, 1, 1, "", "TimeDepBra"], [166, 1, 1, "", "TimeDepKet"], [166, 1, 1, "", "TimeDepState"], [166, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[166, 4, 1, "", "dual"], [166, 2, 1, "", "dual_class"], [166, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[166, 4, 1, "", "label"], [166, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[166, 4, 1, "", "expr"], [166, 4, 1, "", "is_commutative"], [166, 4, 1, "", "is_normalized"], [166, 4, 1, "", "limits"], [166, 4, 1, "", "norm"], [166, 2, 1, "", "normalize"], [166, 2, 1, "", "prob"], [166, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[167, 1, 1, "", "TensorProduct"], [167, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[168, 1, 1, "", "AnnihilateBoson"], [168, 1, 1, "", "AnnihilateFermion"], [168, 1, 1, "", "AntiSymmetricTensor"], [168, 5, 1, "", "B"], [168, 5, 1, "", "BBra"], [168, 5, 1, "", "BKet"], [168, 5, 1, "", "Bd"], [168, 1, 1, "", "BosonicBasis"], [168, 1, 1, "", "Commutator"], [168, 1, 1, "", "CreateBoson"], [168, 1, 1, "", "CreateFermion"], [168, 1, 1, "", "Dagger"], [168, 5, 1, "", "F"], [168, 5, 1, "", "FBra"], [168, 5, 1, "", "FKet"], [168, 5, 1, "", "Fd"], [168, 1, 1, "", "FixedBosonicBasis"], [168, 1, 1, "", "FockState"], [168, 1, 1, "", "FockStateBosonBra"], [168, 1, 1, "", "FockStateBosonKet"], [168, 1, 1, "", "FockStateBra"], [168, 1, 1, "", "FockStateFermionBra"], [168, 1, 1, "", "FockStateFermionKet"], [168, 1, 1, "", "FockStateKet"], [168, 1, 1, "", "InnerProduct"], [168, 1, 1, "", "KroneckerDelta"], [168, 1, 1, "", "NO"], [168, 1, 1, "", "PermutationOperator"], [168, 1, 1, "", "VarBosonicBasis"], [168, 3, 1, "", "apply_operators"], [168, 3, 1, "", "contraction"], [168, 3, 1, "", "evaluate_deltas"], [168, 3, 1, "", "matrix_rep"], [168, 3, 1, "", "simplify_index_permutations"], [168, 3, 1, "", "substitute_dummies"], [168, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[168, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[168, 2, 1, "", "apply_operator"], [168, 4, 1, "", "is_only_q_annihilator"], [168, 4, 1, "", "is_only_q_creator"], [168, 4, 1, "", "is_q_annihilator"], [168, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[168, 4, 1, "", "lower"], [168, 4, 1, "", "symbol"], [168, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[168, 2, 1, "", "doit"], [168, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[168, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[168, 2, 1, "", "apply_operator"], [168, 4, 1, "", "is_only_q_annihilator"], [168, 4, 1, "", "is_only_q_creator"], [168, 4, 1, "", "is_q_annihilator"], [168, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[168, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[168, 2, 1, "", "index"], [168, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[168, 4, 1, "", "bra"], [168, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[168, 2, 1, "", "eval"], [168, 4, 1, "", "indices_contain_equal_information"], [168, 4, 1, "", "is_above_fermi"], [168, 4, 1, "", "is_below_fermi"], [168, 4, 1, "", "is_only_above_fermi"], [168, 4, 1, "", "is_only_below_fermi"], [168, 4, 1, "", "killable_index"], [168, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[168, 2, 1, "", "doit"], [168, 2, 1, "", "get_subNO"], [168, 4, 1, "", "has_q_annihilators"], [168, 4, 1, "", "has_q_creators"], [168, 2, 1, "", "iter_q_annihilators"], [168, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[168, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[168, 2, 1, "", "index"], [168, 2, 1, "", "state"]], "sympy.physics.sho": [[169, 3, 1, "", "E_nl"], [169, 3, 1, "", "R_nl"]], "sympy.physics.units": [[170, 0, 0, "-", "dimensions"], [174, 0, 0, "-", "prefixes"], [175, 0, 0, "-", "quantities"], [176, 0, 0, "-", "unitsystem"], [175, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[170, 1, 1, "", "Dimension"], [170, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[170, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[170, 4, 1, "", "can_transf_matrix"], [170, 4, 1, "", "dim"], [170, 2, 1, "", "dim_can_vector"], [170, 2, 1, "", "dim_vector"], [170, 4, 1, "", "inv_can_transf_matrix"], [170, 4, 1, "", "is_consistent"], [170, 2, 1, "", "is_dimensionless"], [170, 4, 1, "", "list_can_dims"], [170, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[174, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[175, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[175, 4, 1, "", "abbrev"], [175, 2, 1, "", "convert_to"], [175, 4, 1, "", "free_symbols"], [175, 4, 1, "", "is_prefixed"], [175, 4, 1, "", "scale_factor"], [175, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[176, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[176, 4, 1, "", "dim"], [176, 2, 1, "", "extend"], [176, 2, 1, "", "get_units_non_prefixed"], [176, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[175, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[178, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[178, 2, 1, "", "applyfunc"], [178, 2, 1, "", "cross"], [178, 2, 1, "", "doit"], [178, 2, 1, "", "dot"], [178, 2, 1, "", "dt"], [178, 2, 1, "", "express"], [178, 4, 1, "", "func"], [178, 2, 1, "", "simplify"], [178, 2, 1, "", "subs"], [178, 2, 1, "", "to_matrix"], [178, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[180, 3, 1, "", "dynamicsymbols"], [181, 0, 0, "-", "functions"], [181, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[179, 3, 1, "", "curl"], [179, 3, 1, "", "divergence"], [179, 3, 1, "", "gradient"], [179, 3, 1, "", "is_conservative"], [179, 3, 1, "", "is_solenoidal"], [179, 3, 1, "", "scalar_potential"], [179, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[178, 1, 1, "", "CoordinateSym"], [178, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[178, 2, 1, "", "ang_acc_in"], [178, 2, 1, "", "ang_vel_in"], [178, 2, 1, "", "dcm"], [178, 2, 1, "", "orient"], [178, 2, 1, "", "orient_axis"], [178, 2, 1, "", "orient_body_fixed"], [178, 2, 1, "", "orient_explicit"], [178, 2, 1, "", "orient_quaternion"], [178, 2, 1, "", "orient_space_fixed"], [178, 2, 1, "", "orientnew"], [178, 2, 1, "", "partial_velocity"], [178, 2, 1, "", "set_ang_acc"], [178, 2, 1, "", "set_ang_vel"], [178, 2, 1, "", "variable_map"], [178, 4, 1, "", "x"], [178, 4, 1, "", "y"], [178, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[180, 3, 1, "", "cross"], [180, 3, 1, "", "dot"], [180, 3, 1, "", "express"], [181, 3, 1, "", "get_motion_params"], [181, 3, 1, "", "kinematic_equations"], [180, 3, 1, "", "outer"], [181, 3, 1, "", "partial_velocity"], [180, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[181, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[181, 2, 1, "", "a1pt_theory"], [181, 2, 1, "", "a2pt_theory"], [181, 2, 1, "", "acc"], [181, 2, 1, "", "locatenew"], [181, 2, 1, "", "partial_velocity"], [181, 2, 1, "", "pos_from"], [181, 2, 1, "", "set_acc"], [181, 2, 1, "", "set_pos"], [181, 2, 1, "", "set_vel"], [181, 2, 1, "", "v1pt_theory"], [181, 2, 1, "", "v2pt_theory"], [181, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[182, 3, 1, "", "init_vprinting"], [182, 3, 1, "", "vlatex"], [182, 3, 1, "", "vpprint"], [182, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[178, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[178, 2, 1, "", "angle_between"], [178, 2, 1, "", "applyfunc"], [178, 2, 1, "", "cross"], [178, 2, 1, "", "diff"], [178, 2, 1, "", "doit"], [178, 2, 1, "", "dot"], [178, 2, 1, "", "dt"], [178, 2, 1, "", "express"], [178, 2, 1, "", "free_dynamicsymbols"], [178, 2, 1, "", "free_symbols"], [178, 4, 1, "", "func"], [178, 2, 1, "", "magnitude"], [178, 2, 1, "", "normalize"], [178, 2, 1, "", "outer"], [178, 2, 1, "", "separate"], [178, 2, 1, "", "simplify"], [178, 2, 1, "", "subs"], [178, 2, 1, "", "to_matrix"], [178, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[187, 3, 1, "", "clebsch_gordan"], [187, 3, 1, "", "dot_rot_grad_Ynm"], [187, 3, 1, "", "gaunt"], [187, 3, 1, "", "racah"], [187, 3, 1, "", "real_gaunt"], [187, 3, 1, "", "wigner_3j"], [187, 3, 1, "", "wigner_6j"], [187, 3, 1, "", "wigner_9j"], [187, 3, 1, "", "wigner_d"], [187, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[188, 0, 0, "-", "plot"], [188, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[188, 1, 1, "", "BaseBackend"], [188, 1, 1, "", "BaseSeries"], [188, 1, 1, "", "Line2DBaseSeries"], [188, 1, 1, "", "Line3DBaseSeries"], [188, 1, 1, "", "LineOver1DRangeSeries"], [188, 1, 1, "", "MatplotlibBackend"], [188, 1, 1, "", "Parametric2DLineSeries"], [188, 1, 1, "", "Parametric3DLineSeries"], [188, 1, 1, "", "ParametricSurfaceSeries"], [188, 1, 1, "", "Plot"], [188, 1, 1, "", "PlotGrid"], [188, 1, 1, "", "SurfaceBaseSeries"], [188, 1, 1, "", "SurfaceOver2DRangeSeries"], [188, 1, 1, "", "TextBackend"], [188, 3, 1, "", "plot"], [188, 3, 1, "", "plot3d"], [188, 3, 1, "", "plot3d_parametric_line"], [188, 3, 1, "", "plot3d_parametric_surface"], [188, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[188, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[188, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[188, 2, 1, "", "get_segments"], [188, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[188, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[188, 2, 1, "", "append"], [188, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[188, 1, 1, "", "ImplicitSeries"], [188, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[188, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[189, 1, 1, "", "ExtensionElement"], [189, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[189, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[189, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[189, 1, 1, "", "ModuleHomomorphism"], [189, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[189, 2, 1, "", "image"], [189, 2, 1, "", "is_injective"], [189, 2, 1, "", "is_isomorphism"], [189, 2, 1, "", "is_surjective"], [189, 2, 1, "", "is_zero"], [189, 2, 1, "", "kernel"], [189, 2, 1, "", "quotient_codomain"], [189, 2, 1, "", "quotient_domain"], [189, 2, 1, "", "restrict_codomain"], [189, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[189, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[189, 2, 1, "", "contains"], [189, 2, 1, "", "depth"], [189, 2, 1, "", "height"], [189, 2, 1, "", "intersect"], [189, 2, 1, "", "is_maximal"], [189, 2, 1, "", "is_primary"], [189, 2, 1, "", "is_prime"], [189, 2, 1, "", "is_principal"], [189, 2, 1, "", "is_radical"], [189, 2, 1, "", "is_whole_ring"], [189, 2, 1, "", "is_zero"], [189, 2, 1, "", "product"], [189, 2, 1, "", "quotient"], [189, 2, 1, "", "radical"], [189, 2, 1, "", "reduce_element"], [189, 2, 1, "", "saturate"], [189, 2, 1, "", "subset"], [189, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[189, 1, 1, "", "FreeModule"], [189, 1, 1, "", "FreeModuleElement"], [189, 1, 1, "", "Module"], [189, 1, 1, "", "QuotientModule"], [189, 1, 1, "", "QuotientModuleElement"], [189, 1, 1, "", "SubModule"], [189, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[189, 2, 1, "", "basis"], [189, 2, 1, "", "convert"], [189, 5, 1, "", "dtype"], [189, 2, 1, "", "identity_hom"], [189, 2, 1, "", "is_submodule"], [189, 2, 1, "", "is_zero"], [189, 2, 1, "", "multiply_ideal"], [189, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[189, 2, 1, "", "contains"], [189, 2, 1, "", "convert"], [189, 2, 1, "", "identity_hom"], [189, 2, 1, "", "is_submodule"], [189, 2, 1, "", "is_zero"], [189, 2, 1, "", "multiply_ideal"], [189, 2, 1, "", "quotient_module"], [189, 2, 1, "", "submodule"], [189, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[189, 2, 1, "", "convert"], [189, 5, 1, "", "dtype"], [189, 2, 1, "", "identity_hom"], [189, 2, 1, "", "is_submodule"], [189, 2, 1, "", "is_zero"], [189, 2, 1, "", "quotient_hom"], [189, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[189, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[189, 2, 1, "", "convert"], [189, 2, 1, "", "identity_hom"], [189, 2, 1, "", "in_terms_of_generators"], [189, 2, 1, "", "inclusion_hom"], [189, 2, 1, "", "intersect"], [189, 2, 1, "", "is_full_module"], [189, 2, 1, "", "is_submodule"], [189, 2, 1, "", "is_zero"], [189, 2, 1, "", "module_quotient"], [189, 2, 1, "", "multiply_ideal"], [189, 2, 1, "", "quotient_module"], [189, 2, 1, "", "reduce_element"], [189, 2, 1, "", "submodule"], [189, 2, 1, "", "syzygy_module"], [189, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[189, 2, 1, "", "is_full_module"], [189, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[198, 3, 1, "", "andre_poly"], [198, 3, 1, "", "bernoulli_c_poly"], [198, 3, 1, "", "bernoulli_poly"], [198, 3, 1, "", "euler_poly"], [198, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[198, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[195, 3, 1, "", "dmp_abs"], [195, 3, 1, "", "dmp_add"], [195, 3, 1, "", "dmp_add_ground"], [195, 3, 1, "", "dmp_add_mul"], [195, 3, 1, "", "dmp_add_term"], [195, 3, 1, "", "dmp_div"], [195, 3, 1, "", "dmp_expand"], [195, 3, 1, "", "dmp_exquo"], [195, 3, 1, "", "dmp_exquo_ground"], [195, 3, 1, "", "dmp_ff_div"], [195, 3, 1, "", "dmp_l1_norm"], [195, 3, 1, "", "dmp_max_norm"], [195, 3, 1, "", "dmp_mul"], [195, 3, 1, "", "dmp_mul_ground"], [195, 3, 1, "", "dmp_mul_term"], [195, 3, 1, "", "dmp_neg"], [195, 3, 1, "", "dmp_pdiv"], [195, 3, 1, "", "dmp_pexquo"], [195, 3, 1, "", "dmp_pow"], [195, 3, 1, "", "dmp_pquo"], [195, 3, 1, "", "dmp_prem"], [195, 3, 1, "", "dmp_quo"], [195, 3, 1, "", "dmp_quo_ground"], [195, 3, 1, "", "dmp_rem"], [195, 3, 1, "", "dmp_rr_div"], [195, 3, 1, "", "dmp_sqr"], [195, 3, 1, "", "dmp_sub"], [195, 3, 1, "", "dmp_sub_ground"], [195, 3, 1, "", "dmp_sub_mul"], [195, 3, 1, "", "dmp_sub_term"], [195, 3, 1, "", "dup_lshift"], [195, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[195, 3, 1, "", "dmp_LC"], [195, 3, 1, "", "dmp_TC"], [195, 3, 1, "", "dmp_apply_pairs"], [195, 3, 1, "", "dmp_convert"], [195, 3, 1, "", "dmp_copy"], [195, 3, 1, "", "dmp_deflate"], [195, 3, 1, "", "dmp_degree"], [195, 3, 1, "", "dmp_degree_in"], [195, 3, 1, "", "dmp_degree_list"], [195, 3, 1, "", "dmp_eject"], [195, 3, 1, "", "dmp_exclude"], [195, 3, 1, "", "dmp_from_dict"], [195, 3, 1, "", "dmp_from_sympy"], [195, 3, 1, "", "dmp_ground"], [195, 3, 1, "", "dmp_ground_LC"], [195, 3, 1, "", "dmp_ground_TC"], [195, 3, 1, "", "dmp_ground_nth"], [195, 3, 1, "", "dmp_ground_p"], [195, 3, 1, "", "dmp_grounds"], [195, 3, 1, "", "dmp_include"], [195, 3, 1, "", "dmp_inflate"], [195, 3, 1, "", "dmp_inject"], [195, 3, 1, "", "dmp_list_terms"], [195, 3, 1, "", "dmp_multi_deflate"], [195, 3, 1, "", "dmp_negative_p"], [195, 3, 1, "", "dmp_nest"], [195, 3, 1, "", "dmp_normal"], [195, 3, 1, "", "dmp_nth"], [195, 3, 1, "", "dmp_one"], [195, 3, 1, "", "dmp_one_p"], [195, 3, 1, "", "dmp_permute"], [195, 3, 1, "", "dmp_positive_p"], [195, 3, 1, "", "dmp_raise"], [195, 3, 1, "", "dmp_slice"], [195, 3, 1, "", "dmp_strip"], [195, 3, 1, "", "dmp_swap"], [195, 3, 1, "", "dmp_terms_gcd"], [195, 3, 1, "", "dmp_to_dict"], [195, 3, 1, "", "dmp_to_tuple"], [195, 3, 1, "", "dmp_true_LT"], [195, 3, 1, "", "dmp_validate"], [195, 3, 1, "", "dmp_zero"], [195, 3, 1, "", "dmp_zero_p"], [195, 3, 1, "", "dmp_zeros"], [195, 3, 1, "", "dup_random"], [195, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[195, 3, 1, "", "dmp_clear_denoms"], [195, 3, 1, "", "dmp_compose"], [195, 3, 1, "", "dmp_diff"], [195, 3, 1, "", "dmp_diff_eval_in"], [195, 3, 1, "", "dmp_diff_in"], [195, 3, 1, "", "dmp_eval"], [195, 3, 1, "", "dmp_eval_in"], [195, 3, 1, "", "dmp_eval_tail"], [195, 3, 1, "", "dmp_ground_content"], [195, 3, 1, "", "dmp_ground_extract"], [195, 3, 1, "", "dmp_ground_monic"], [195, 3, 1, "", "dmp_ground_primitive"], [195, 3, 1, "", "dmp_ground_trunc"], [195, 3, 1, "", "dmp_integrate"], [195, 3, 1, "", "dmp_integrate_in"], [195, 3, 1, "", "dmp_lift"], [195, 3, 1, "", "dmp_revert"], [195, 3, 1, "", "dmp_trunc"], [195, 3, 1, "", "dup_content"], [195, 3, 1, "", "dup_decompose"], [195, 3, 1, "", "dup_extract"], [195, 3, 1, "", "dup_mirror"], [195, 3, 1, "", "dup_monic"], [195, 3, 1, "", "dup_primitive"], [195, 3, 1, "", "dup_real_imag"], [195, 3, 1, "", "dup_scale"], [195, 3, 1, "", "dup_shift"], [195, 3, 1, "", "dup_sign_variations"], [195, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[198, 3, 1, "", "dispersion"], [198, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[195, 3, 1, "", "sdm_LC"], [195, 3, 1, "", "sdm_LM"], [195, 3, 1, "", "sdm_LT"], [195, 3, 1, "", "sdm_add"], [195, 3, 1, "", "sdm_deg"], [195, 3, 1, "", "sdm_ecart"], [195, 3, 1, "", "sdm_from_dict"], [195, 3, 1, "", "sdm_from_vector"], [195, 3, 1, "", "sdm_groebner"], [195, 3, 1, "", "sdm_monomial_deg"], [195, 3, 1, "", "sdm_monomial_divides"], [195, 3, 1, "", "sdm_monomial_mul"], [195, 3, 1, "", "sdm_mul_term"], [195, 3, 1, "", "sdm_nf_mora"], [195, 3, 1, "", "sdm_spoly"], [195, 3, 1, "", "sdm_to_dict"], [195, 3, 1, "", "sdm_to_vector"], [195, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[193, 1, 1, "", "AlgebraicField"], [193, 1, 1, "", "ComplexField"], [193, 1, 1, "", "ExpressionDomain"], [193, 1, 1, "", "FiniteField"], [193, 1, 1, "", "FractionField"], [193, 1, 1, "", "GMPYFiniteField"], [193, 1, 1, "", "GMPYIntegerRing"], [193, 1, 1, "", "GMPYRationalField"], [193, 1, 1, "", "IntegerRing"], [193, 1, 1, "", "PolynomialRing"], [193, 1, 1, "", "PythonFiniteField"], [193, 1, 1, "", "PythonIntegerRing"], [193, 1, 1, "", "PythonRationalField"], [193, 1, 1, "", "RationalField"], [193, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[193, 2, 1, "", "algebraic_field"], [193, 2, 1, "", "denom"], [193, 2, 1, "", "discriminant"], [193, 5, 1, "", "dtype"], [193, 5, 1, "", "ext"], [193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_GaussianIntegerRing"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "integral_basis"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "maximal_order"], [193, 5, 1, "", "mod"], [193, 2, 1, "", "numer"], [193, 5, 1, "", "orig_ext"], [193, 2, 1, "", "primes_above"], [193, 2, 1, "", "to_alg_num"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[193, 2, 1, "", "almosteq"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "get_exact"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[193, 1, 1, "", "Expression"], [193, 2, 1, "", "denom"], [193, 5, 1, "", "dtype"], [193, 2, 1, "", "from_ExpressionDomain"], [193, 2, 1, "", "from_FractionField"], [193, 2, 1, "", "from_GaussianIntegerRing"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "from_PolynomialRing"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[193, 2, 1, "", "characteristic"], [193, 2, 1, "", "from_FF"], [193, 2, 1, "", "from_FF_gmpy"], [193, 2, 1, "", "from_FF_python"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[193, 2, 1, "", "denom"], [193, 2, 1, "", "factorial"], [193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_ComplexField"], [193, 2, 1, "", "from_FractionField"], [193, 2, 1, "", "from_GaussianIntegerRing"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "from_PolynomialRing"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[193, 2, 1, "", "factorial"], [193, 2, 1, "", "from_FF_gmpy"], [193, 2, 1, "", "from_FF_python"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "gcdex"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "sqrt"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[193, 2, 1, "", "denom"], [193, 2, 1, "", "div"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "factorial"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "rem"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[193, 2, 1, "", "algebraic_field"], [193, 2, 1, "", "factorial"], [193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_FF"], [193, 2, 1, "", "from_FF_gmpy"], [193, 2, 1, "", "from_FF_python"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "gcdex"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "log"], [193, 2, 1, "", "sqrt"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[193, 2, 1, "", "factorial"], [193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_ComplexField"], [193, 2, 1, "", "from_FractionField"], [193, 2, 1, "", "from_GaussianIntegerRing"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "from_GlobalPolynomialRing"], [193, 2, 1, "", "from_PolynomialRing"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "gcdex"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "is_unit"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[193, 2, 1, "", "algebraic_field"], [193, 2, 1, "", "denom"], [193, 2, 1, "", "div"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "rem"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[193, 2, 1, "", "almosteq"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "get_exact"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "to_rational"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[193, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[193, 2, 1, "", "drop"], [193, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[193, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[193, 2, 1, "", "abs"], [193, 2, 1, "", "add"], [193, 2, 1, "", "alg_field_from_poly"], [193, 2, 1, "", "algebraic_field"], [193, 2, 1, "", "almosteq"], [193, 2, 1, "", "characteristic"], [193, 2, 1, "", "cofactors"], [193, 2, 1, "", "convert"], [193, 2, 1, "", "convert_from"], [193, 2, 1, "", "cyclotomic_field"], [193, 2, 1, "", "denom"], [193, 2, 1, "", "div"], [193, 2, 1, "", "drop"], [193, 5, 1, "", "dtype"], [193, 2, 1, "", "evalf"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "frac_field"], [193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_ComplexField"], [193, 2, 1, "", "from_ExpressionDomain"], [193, 2, 1, "", "from_ExpressionRawDomain"], [193, 2, 1, "", "from_FF"], [193, 2, 1, "", "from_FF_gmpy"], [193, 2, 1, "", "from_FF_python"], [193, 2, 1, "", "from_FractionField"], [193, 2, 1, "", "from_GlobalPolynomialRing"], [193, 2, 1, "", "from_MonogenicFiniteExtension"], [193, 2, 1, "", "from_PolynomialRing"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_RealField"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "gcdex"], [193, 2, 1, "", "get_exact"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "half_gcdex"], [193, 5, 1, "", "has_assoc_Field"], [193, 5, 1, "", "has_assoc_Ring"], [193, 2, 1, "", "inject"], [193, 2, 1, "", "invert"], [193, 5, 1, "", "is_Field"], [193, 5, 1, "", "is_PID"], [193, 5, 1, "", "is_Ring"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_one"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "is_zero"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "log"], [193, 2, 1, "", "map"], [193, 2, 1, "", "mul"], [193, 2, 1, "", "n"], [193, 2, 1, "", "neg"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "of_type"], [193, 2, 1, "", "old_frac_field"], [193, 2, 1, "", "old_poly_ring"], [193, 5, 1, "", "one"], [193, 2, 1, "", "poly_ring"], [193, 2, 1, "", "pos"], [193, 2, 1, "", "pow"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "rem"], [193, 2, 1, "", "revert"], [193, 2, 1, "", "sqrt"], [193, 2, 1, "", "sub"], [193, 2, 1, "", "to_sympy"], [193, 4, 1, "", "tp"], [193, 2, 1, "", "unify"], [193, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[193, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[193, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[193, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[193, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[193, 2, 1, "", "div"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "is_unit"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "rem"], [193, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[193, 1, 1, "", "GaussianDomain"], [193, 1, 1, "", "GaussianElement"], [193, 1, 1, "", "GaussianInteger"], [193, 1, 1, "", "GaussianIntegerRing"], [193, 1, 1, "", "GaussianRational"], [193, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[193, 2, 1, "", "from_AlgebraicField"], [193, 2, 1, "", "from_QQ"], [193, 2, 1, "", "from_QQ_gmpy"], [193, 2, 1, "", "from_QQ_python"], [193, 2, 1, "", "from_ZZ"], [193, 2, 1, "", "from_ZZ_gmpy"], [193, 2, 1, "", "from_ZZ_python"], [193, 2, 1, "", "from_sympy"], [193, 2, 1, "", "inject"], [193, 2, 1, "", "is_negative"], [193, 2, 1, "", "is_nonnegative"], [193, 2, 1, "", "is_nonpositive"], [193, 2, 1, "", "is_positive"], [193, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[193, 2, 1, "", "new"], [193, 2, 1, "", "parent"], [193, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[193, 5, 1, "", "dtype"], [193, 2, 1, "", "from_GaussianIntegerRing"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[193, 2, 1, "", "as_AlgebraicField"], [193, 2, 1, "", "denom"], [193, 5, 1, "", "dtype"], [193, 2, 1, "", "from_GaussianIntegerRing"], [193, 2, 1, "", "from_GaussianRationalField"], [193, 2, 1, "", "get_field"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[193, 1, 1, "", "ComplexElement"], [193, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[193, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[193, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[193, 2, 1, "", "denom"], [193, 2, 1, "", "div"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "free_module"], [193, 2, 1, "", "get_ring"], [193, 2, 1, "", "ideal"], [193, 2, 1, "", "invert"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "quotient_ring"], [193, 2, 1, "", "rem"], [193, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[193, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[193, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[195, 3, 1, "", "dmp_cancel"], [195, 3, 1, "", "dmp_content"], [195, 3, 1, "", "dmp_discriminant"], [195, 3, 1, "", "dmp_euclidean_prs"], [195, 3, 1, "", "dmp_ff_prs_gcd"], [195, 3, 1, "", "dmp_gcd"], [195, 3, 1, "", "dmp_gcdex"], [195, 3, 1, "", "dmp_half_gcdex"], [195, 3, 1, "", "dmp_inner_gcd"], [195, 3, 1, "", "dmp_inner_subresultants"], [195, 3, 1, "", "dmp_invert"], [195, 3, 1, "", "dmp_lcm"], [195, 3, 1, "", "dmp_primitive"], [195, 3, 1, "", "dmp_primitive_prs"], [195, 3, 1, "", "dmp_prs_resultant"], [195, 3, 1, "", "dmp_qq_collins_resultant"], [195, 3, 1, "", "dmp_qq_heu_gcd"], [195, 3, 1, "", "dmp_resultant"], [195, 3, 1, "", "dmp_rr_prs_gcd"], [195, 3, 1, "", "dmp_subresultants"], [195, 3, 1, "", "dmp_zz_collins_resultant"], [195, 3, 1, "", "dmp_zz_heu_gcd"], [195, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[195, 3, 1, "", "dmp_ext_factor"], [195, 3, 1, "", "dmp_factor_list"], [195, 3, 1, "", "dmp_factor_list_include"], [195, 3, 1, "", "dmp_irreducible_p"], [195, 3, 1, "", "dmp_trial_division"], [195, 3, 1, "", "dmp_zz_diophantine"], [195, 3, 1, "", "dmp_zz_factor"], [195, 3, 1, "", "dmp_zz_mignotte_bound"], [195, 3, 1, "", "dmp_zz_wang"], [195, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [195, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [195, 3, 1, "", "dmp_zz_wang_non_divisors"], [195, 3, 1, "", "dmp_zz_wang_test_points"], [195, 3, 1, "", "dup_cyclotomic_p"], [195, 3, 1, "", "dup_gf_factor"], [195, 3, 1, "", "dup_zz_cyclotomic_factor"], [195, 3, 1, "", "dup_zz_cyclotomic_poly"], [195, 3, 1, "", "dup_zz_factor"], [195, 3, 1, "", "dup_zz_factor_sqf"], [195, 3, 1, "", "dup_zz_hensel_lift"], [195, 3, 1, "", "dup_zz_hensel_step"], [195, 3, 1, "", "dup_zz_irreducible_p"], [195, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[195, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[193, 1, 1, "", "FracElement"], [193, 1, 1, "", "FracField"], [193, 3, 1, "", "field"], [193, 3, 1, "", "sfield"], [193, 3, 1, "", "vfield"], [193, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[193, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[195, 3, 1, "", "gf_LC"], [195, 3, 1, "", "gf_Qbasis"], [195, 3, 1, "", "gf_Qmatrix"], [195, 3, 1, "", "gf_TC"], [195, 3, 1, "", "gf_add"], [195, 3, 1, "", "gf_add_ground"], [195, 3, 1, "", "gf_add_mul"], [195, 3, 1, "", "gf_berlekamp"], [195, 3, 1, "", "gf_cofactors"], [195, 3, 1, "", "gf_compose"], [195, 3, 1, "", "gf_compose_mod"], [195, 3, 1, "", "gf_crt"], [195, 3, 1, "", "gf_crt1"], [195, 3, 1, "", "gf_crt2"], [195, 3, 1, "", "gf_csolve"], [195, 3, 1, "", "gf_degree"], [195, 3, 1, "", "gf_diff"], [195, 3, 1, "", "gf_div"], [195, 3, 1, "", "gf_eval"], [195, 3, 1, "", "gf_expand"], [195, 3, 1, "", "gf_exquo"], [195, 3, 1, "", "gf_factor"], [195, 3, 1, "", "gf_factor_sqf"], [195, 3, 1, "", "gf_from_dict"], [195, 3, 1, "", "gf_from_int_poly"], [195, 3, 1, "", "gf_gcd"], [195, 3, 1, "", "gf_gcdex"], [195, 3, 1, "", "gf_int"], [195, 3, 1, "", "gf_irreducible"], [195, 3, 1, "", "gf_irreducible_p"], [195, 3, 1, "", "gf_lcm"], [195, 3, 1, "", "gf_lshift"], [195, 3, 1, "", "gf_monic"], [195, 3, 1, "", "gf_mul"], [195, 3, 1, "", "gf_mul_ground"], [195, 3, 1, "", "gf_multi_eval"], [195, 3, 1, "", "gf_neg"], [195, 3, 1, "", "gf_normal"], [195, 3, 1, "", "gf_pow"], [195, 3, 1, "", "gf_pow_mod"], [195, 3, 1, "", "gf_quo"], [195, 3, 1, "", "gf_quo_ground"], [195, 3, 1, "", "gf_random"], [195, 3, 1, "", "gf_rem"], [195, 3, 1, "", "gf_rshift"], [195, 3, 1, "", "gf_shoup"], [195, 3, 1, "", "gf_sqf_list"], [195, 3, 1, "", "gf_sqf_p"], [195, 3, 1, "", "gf_sqf_part"], [195, 3, 1, "", "gf_sqr"], [195, 3, 1, "", "gf_strip"], [195, 3, 1, "", "gf_sub"], [195, 3, 1, "", "gf_sub_ground"], [195, 3, 1, "", "gf_sub_mul"], [195, 3, 1, "", "gf_to_dict"], [195, 3, 1, "", "gf_to_int_poly"], [195, 3, 1, "", "gf_trace_map"], [195, 3, 1, "", "gf_trunc"], [195, 3, 1, "", "gf_value"], [195, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[195, 3, 1, "", "groebner"], [195, 3, 1, "", "is_groebner"], [195, 3, 1, "", "is_minimal"], [195, 3, 1, "", "is_reduced"], [195, 3, 1, "", "red_groebner"], [195, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[191, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[191, 2, 1, "", "add"], [191, 2, 1, "", "charpoly"], [191, 2, 1, "", "det"], [191, 2, 1, "", "hstack"], [191, 2, 1, "", "inv"], [191, 2, 1, "", "is_lower"], [191, 2, 1, "", "is_upper"], [191, 2, 1, "", "is_zero_matrix"], [191, 2, 1, "", "lu"], [191, 2, 1, "", "lu_solve"], [191, 2, 1, "", "matmul"], [191, 2, 1, "", "neg"], [191, 2, 1, "", "rref"], [191, 2, 1, "", "scc"], [191, 2, 1, "", "sub"], [191, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[191, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[191, 2, 1, "", "add"], [191, 2, 1, "", "charpoly"], [191, 2, 1, "", "columnspace"], [191, 2, 1, "", "convert_to"], [191, 2, 1, "", "det"], [191, 2, 1, "", "diag"], [191, 2, 1, "", "eye"], [191, 2, 1, "", "from_Matrix"], [191, 2, 1, "", "from_dict_sympy"], [191, 2, 1, "", "from_list"], [191, 2, 1, "", "from_list_sympy"], [191, 2, 1, "", "from_rep"], [191, 2, 1, "", "hstack"], [191, 2, 1, "", "inv"], [191, 4, 1, "", "is_lower"], [191, 4, 1, "", "is_upper"], [191, 2, 1, "", "lu"], [191, 2, 1, "", "lu_solve"], [191, 2, 1, "", "matmul"], [191, 2, 1, "", "mul"], [191, 2, 1, "", "neg"], [191, 2, 1, "", "nullspace"], [191, 2, 1, "", "ones"], [191, 2, 1, "", "pow"], [191, 2, 1, "", "rowspace"], [191, 2, 1, "", "rref"], [191, 2, 1, "", "scc"], [191, 2, 1, "", "sub"], [191, 2, 1, "", "to_Matrix"], [191, 2, 1, "", "to_dense"], [191, 2, 1, "", "to_field"], [191, 2, 1, "", "to_sparse"], [191, 2, 1, "", "transpose"], [191, 2, 1, "", "unify"], [191, 2, 1, "", "vstack"], [191, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[191, 3, 1, "", "hermite_normal_form"], [191, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[191, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[191, 2, 1, "", "add"], [191, 2, 1, "", "charpoly"], [191, 2, 1, "", "convert_to"], [191, 2, 1, "", "copy"], [191, 2, 1, "", "det"], [191, 2, 1, "", "eye"], [191, 2, 1, "", "from_ddm"], [191, 2, 1, "", "from_list"], [191, 2, 1, "", "hstack"], [191, 2, 1, "", "inv"], [191, 2, 1, "", "is_lower"], [191, 2, 1, "", "is_upper"], [191, 2, 1, "", "is_zero_matrix"], [191, 2, 1, "", "lu"], [191, 2, 1, "", "lu_solve"], [191, 2, 1, "", "matmul"], [191, 2, 1, "", "mul"], [191, 2, 1, "", "neg"], [191, 2, 1, "", "new"], [191, 2, 1, "", "nullspace"], [191, 2, 1, "", "rref"], [191, 2, 1, "", "scc"], [191, 2, 1, "", "sub"], [191, 2, 1, "", "to_ddm"], [191, 2, 1, "", "to_list"], [191, 2, 1, "", "transpose"], [191, 2, 1, "", "vstack"], [191, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[195, 3, 1, "", "_modgcd_multivariate_p"], [195, 3, 1, "", "func_field_modgcd"], [195, 3, 1, "", "modgcd_bivariate"], [195, 3, 1, "", "modgcd_multivariate"], [195, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[198, 1, 1, "", "Monomial"], [198, 3, 1, "", "itermonomials"], [198, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[198, 2, 1, "", "as_expr"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[197, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[197, 3, 1, "", "minimal_polynomial"], [197, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[197, 0, 0, "-", "modules"], [197, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[197, 1, 1, "", "EndomorphismRing"], [197, 1, 1, "", "InnerEndomorphism"], [197, 1, 1, "", "Module"], [197, 1, 1, "", "ModuleElement"], [197, 1, 1, "", "ModuleEndomorphism"], [197, 1, 1, "", "ModuleHomomorphism"], [197, 1, 1, "", "PowerBasis"], [197, 1, 1, "", "PowerBasisElement"], [197, 1, 1, "", "Submodule"], [197, 3, 1, "", "find_min_poly"], [197, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "inner_endomorphism"], [197, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[197, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[197, 2, 1, "", "__call__"], [197, 2, 1, "", "ancestors"], [197, 2, 1, "", "basis_elements"], [197, 2, 1, "", "element_from_rational"], [197, 2, 1, "", "endomorphism_ring"], [197, 2, 1, "", "is_compat_col"], [197, 2, 1, "", "mult_tab"], [197, 4, 1, "", "n"], [197, 2, 1, "", "nearest_common_ancestor"], [197, 4, 1, "", "number_field"], [197, 2, 1, "", "one"], [197, 4, 1, "", "parent"], [197, 2, 1, "", "power_basis_ancestor"], [197, 2, 1, "", "represent"], [197, 2, 1, "", "starts_with_unity"], [197, 2, 1, "", "submodule_from_gens"], [197, 2, 1, "", "submodule_from_matrix"], [197, 2, 1, "", "whole_submodule"], [197, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[197, 4, 1, "", "QQ_col"], [197, 2, 1, "", "__add__"], [197, 2, 1, "", "__init__"], [197, 2, 1, "", "__mod__"], [197, 2, 1, "", "__mul__"], [197, 2, 1, "", "column"], [197, 2, 1, "", "equiv"], [197, 2, 1, "", "from_int_list"], [197, 2, 1, "", "is_compat"], [197, 4, 1, "", "n"], [197, 2, 1, "", "over_power_basis"], [197, 2, 1, "", "reduced"], [197, 2, 1, "", "reduced_mod_p"], [197, 2, 1, "", "to_ancestor"], [197, 2, 1, "", "to_parent"], [197, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[197, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "kernel"], [197, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "element_from_ANP"], [197, 2, 1, "", "element_from_alg_num"], [197, 2, 1, "", "element_from_poly"], [197, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[197, 4, 1, "", "T"], [197, 2, 1, "", "as_expr"], [197, 4, 1, "", "generator"], [197, 4, 1, "", "is_rational"], [197, 2, 1, "", "norm"], [197, 2, 1, "", "numerator"], [197, 2, 1, "", "poly"], [197, 2, 1, "", "to_ANP"], [197, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[197, 4, 1, "", "QQ_matrix"], [197, 2, 1, "", "__init__"], [197, 2, 1, "", "add"], [197, 2, 1, "", "basis_element_pullbacks"], [197, 2, 1, "", "discard_before"], [197, 2, 1, "", "mul"], [197, 2, 1, "", "reduce_element"], [197, 2, 1, "", "reduced"], [197, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[197, 1, 1, "", "PrimeIdeal"], [197, 3, 1, "", "prime_decomp"], [197, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[197, 2, 1, "", "__add__"], [197, 2, 1, "", "__init__"], [197, 2, 1, "", "__mul__"], [197, 2, 1, "", "as_submodule"], [197, 4, 1, "", "is_inert"], [197, 2, 1, "", "reduce_ANP"], [197, 2, 1, "", "reduce_alg_num"], [197, 2, 1, "", "reduce_element"], [197, 2, 1, "", "repr"], [197, 2, 1, "", "test_factor"], [197, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[197, 3, 1, "", "field_isomorphism"], [197, 3, 1, "", "primitive_element"], [197, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[197, 1, 1, "", "AlgIntPowers"], [197, 3, 1, "", "coeff_search"], [197, 3, 1, "", "extract_fundamental_discriminant"], [197, 3, 1, "", "get_num_denom"], [197, 3, 1, "", "is_int"], [197, 3, 1, "", "is_rat"], [197, 3, 1, "", "isolate"], [197, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[197, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[198, 1, 1, "", "GradedLexOrder"], [198, 1, 1, "", "LexOrder"], [198, 1, 1, "", "MonomialOrder"], [198, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[198, 3, 1, "", "chebyshevt_poly"], [198, 3, 1, "", "chebyshevu_poly"], [198, 3, 1, "", "gegenbauer_poly"], [198, 3, 1, "", "hermite_poly"], [198, 3, 1, "", "hermite_prob_poly"], [198, 3, 1, "", "jacobi_poly"], [198, 3, 1, "", "laguerre_poly"], [198, 3, 1, "", "legendre_poly"], [198, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[198, 3, 1, "", "apart"], [198, 3, 1, "", "apart_list"], [198, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[193, 1, 1, "", "ANP"], [193, 1, 1, "", "DMF"], [193, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[193, 2, 1, "", "LC"], [193, 2, 1, "", "TC"], [193, 4, 1, "", "is_ground"], [193, 4, 1, "", "is_one"], [193, 4, 1, "", "is_zero"], [193, 2, 1, "", "pow"], [193, 2, 1, "", "to_dict"], [193, 2, 1, "", "to_list"], [193, 2, 1, "", "to_sympy_dict"], [193, 2, 1, "", "to_sympy_list"], [193, 2, 1, "", "to_tuple"], [193, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[193, 2, 1, "", "add"], [193, 2, 1, "", "cancel"], [193, 2, 1, "", "denom"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "frac_unify"], [193, 2, 1, "", "half_per"], [193, 2, 1, "", "invert"], [193, 4, 1, "", "is_one"], [193, 4, 1, "", "is_zero"], [193, 2, 1, "", "mul"], [193, 2, 1, "", "neg"], [193, 2, 1, "", "numer"], [193, 2, 1, "", "per"], [193, 2, 1, "", "poly_unify"], [193, 2, 1, "", "pow"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[193, 2, 1, "", "LC"], [193, 2, 1, "", "TC"], [193, 2, 1, "", "abs"], [193, 2, 1, "", "add"], [193, 2, 1, "", "add_ground"], [193, 2, 1, "", "all_coeffs"], [193, 2, 1, "", "all_monoms"], [193, 2, 1, "", "all_terms"], [193, 2, 1, "", "cancel"], [193, 2, 1, "", "cauchy_lower_bound"], [193, 2, 1, "", "cauchy_upper_bound"], [193, 2, 1, "", "clear_denoms"], [193, 2, 1, "", "coeffs"], [193, 2, 1, "", "cofactors"], [193, 2, 1, "", "compose"], [193, 2, 1, "", "content"], [193, 2, 1, "", "convert"], [193, 2, 1, "", "count_complex_roots"], [193, 2, 1, "", "count_real_roots"], [193, 2, 1, "", "decompose"], [193, 2, 1, "", "deflate"], [193, 2, 1, "", "degree"], [193, 2, 1, "", "degree_list"], [193, 2, 1, "", "diff"], [193, 2, 1, "", "discriminant"], [193, 2, 1, "", "div"], [193, 2, 1, "", "eject"], [193, 2, 1, "", "eval"], [193, 2, 1, "", "exclude"], [193, 2, 1, "", "exquo"], [193, 2, 1, "", "exquo_ground"], [193, 2, 1, "", "factor_list"], [193, 2, 1, "", "factor_list_include"], [193, 2, 1, "", "from_dict"], [193, 2, 1, "", "from_list"], [193, 2, 1, "", "from_sympy_list"], [193, 2, 1, "", "gcd"], [193, 2, 1, "", "gcdex"], [193, 2, 1, "", "gff_list"], [193, 2, 1, "", "half_gcdex"], [193, 2, 1, "", "homogeneous_order"], [193, 2, 1, "", "homogenize"], [193, 2, 1, "", "inject"], [193, 2, 1, "", "integrate"], [193, 2, 1, "", "intervals"], [193, 2, 1, "", "invert"], [193, 4, 1, "", "is_cyclotomic"], [193, 4, 1, "", "is_ground"], [193, 4, 1, "", "is_homogeneous"], [193, 4, 1, "", "is_irreducible"], [193, 4, 1, "", "is_linear"], [193, 4, 1, "", "is_monic"], [193, 4, 1, "", "is_monomial"], [193, 4, 1, "", "is_one"], [193, 4, 1, "", "is_primitive"], [193, 4, 1, "", "is_quadratic"], [193, 4, 1, "", "is_sqf"], [193, 4, 1, "", "is_zero"], [193, 2, 1, "", "l1_norm"], [193, 2, 1, "", "l2_norm_squared"], [193, 2, 1, "", "lcm"], [193, 2, 1, "", "lift"], [193, 2, 1, "", "max_norm"], [193, 2, 1, "", "mignotte_sep_bound_squared"], [193, 2, 1, "", "monic"], [193, 2, 1, "", "monoms"], [193, 2, 1, "", "mul"], [193, 2, 1, "", "mul_ground"], [193, 2, 1, "", "neg"], [193, 2, 1, "", "norm"], [193, 2, 1, "", "nth"], [193, 2, 1, "", "pdiv"], [193, 2, 1, "", "per"], [193, 2, 1, "", "permute"], [193, 2, 1, "", "pexquo"], [193, 2, 1, "", "pow"], [193, 2, 1, "", "pquo"], [193, 2, 1, "", "prem"], [193, 2, 1, "", "primitive"], [193, 2, 1, "", "quo"], [193, 2, 1, "", "quo_ground"], [193, 2, 1, "", "refine_root"], [193, 2, 1, "", "rem"], [193, 2, 1, "", "resultant"], [193, 2, 1, "", "revert"], [193, 2, 1, "", "shift"], [193, 2, 1, "", "slice"], [193, 2, 1, "", "sqf_list"], [193, 2, 1, "", "sqf_list_include"], [193, 2, 1, "", "sqf_norm"], [193, 2, 1, "", "sqf_part"], [193, 2, 1, "", "sqr"], [193, 2, 1, "", "sturm"], [193, 2, 1, "", "sub"], [193, 2, 1, "", "sub_ground"], [193, 2, 1, "", "subresultants"], [193, 2, 1, "", "terms"], [193, 2, 1, "", "terms_gcd"], [193, 2, 1, "", "to_dict"], [193, 2, 1, "", "to_exact"], [193, 2, 1, "", "to_field"], [193, 2, 1, "", "to_list"], [193, 2, 1, "", "to_ring"], [193, 2, 1, "", "to_sympy_dict"], [193, 2, 1, "", "to_sympy_list"], [193, 2, 1, "", "to_tuple"], [193, 2, 1, "", "total_degree"], [193, 2, 1, "", "transform"], [193, 2, 1, "", "trunc"], [193, 2, 1, "", "unify"]], "sympy.polys": [[195, 0, 0, "-", "polyconfig"], [195, 0, 0, "-", "polyoptions"], [200, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[195, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[195, 1, 1, "", "BasePolynomialError"], [195, 1, 1, "", "CoercionFailed"], [195, 1, 1, "", "ComputationFailed"], [195, 1, 1, "", "DomainError"], [195, 1, 1, "", "EvaluationFailed"], [195, 1, 1, "", "ExactQuotientFailed"], [195, 1, 1, "", "ExtraneousFactors"], [195, 1, 1, "", "FlagError"], [195, 1, 1, "", "GeneratorsError"], [195, 1, 1, "", "GeneratorsNeeded"], [195, 1, 1, "", "HeuristicGCDFailed"], [195, 1, 1, "", "HomomorphismFailed"], [195, 1, 1, "", "IsomorphismFailed"], [195, 1, 1, "", "MultivariatePolynomialError"], [195, 1, 1, "", "NotAlgebraic"], [195, 1, 1, "", "NotInvertible"], [195, 1, 1, "", "NotReversible"], [195, 1, 1, "", "OperationNotSupported"], [195, 1, 1, "", "OptionError"], [195, 1, 1, "", "PolificationFailed"], [195, 1, 1, "", "PolynomialError"], [195, 1, 1, "", "RefinementFailed"], [195, 1, 1, "", "UnificationFailed"], [195, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[198, 3, 1, "", "horner"], [198, 3, 1, "", "interpolate"], [198, 3, 1, "", "symmetrize"], [198, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[195, 1, 1, "", "Options"], [195, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[195, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[198, 3, 1, "", "roots"]], "sympy.polys.polytools": [[198, 1, 1, "", "GroebnerBasis"], [198, 3, 1, "", "LC"], [198, 3, 1, "", "LM"], [198, 3, 1, "", "LT"], [198, 1, 1, "", "Poly"], [198, 1, 1, "", "PurePoly"], [198, 3, 1, "", "cancel"], [198, 3, 1, "", "cofactors"], [198, 3, 1, "", "compose"], [198, 3, 1, "", "content"], [198, 3, 1, "", "count_roots"], [198, 3, 1, "", "decompose"], [198, 3, 1, "", "degree"], [198, 3, 1, "", "degree_list"], [198, 3, 1, "", "discriminant"], [198, 3, 1, "", "div"], [198, 3, 1, "", "exquo"], [198, 3, 1, "", "factor"], [198, 3, 1, "", "factor_list"], [198, 3, 1, "", "gcd"], [198, 3, 1, "", "gcd_list"], [198, 3, 1, "", "gcdex"], [198, 3, 1, "", "gff"], [198, 3, 1, "", "gff_list"], [198, 3, 1, "", "groebner"], [198, 3, 1, "", "ground_roots"], [198, 3, 1, "", "half_gcdex"], [198, 3, 1, "", "intervals"], [198, 3, 1, "", "invert"], [198, 3, 1, "", "is_zero_dimensional"], [198, 3, 1, "", "lcm"], [198, 3, 1, "", "lcm_list"], [198, 3, 1, "", "monic"], [198, 3, 1, "", "nroots"], [198, 3, 1, "", "nth_power_roots_poly"], [198, 3, 1, "", "parallel_poly_from_expr"], [198, 3, 1, "", "pdiv"], [198, 3, 1, "", "pexquo"], [198, 3, 1, "", "poly"], [198, 3, 1, "", "poly_from_expr"], [198, 3, 1, "", "pquo"], [198, 3, 1, "", "prem"], [198, 3, 1, "", "primitive"], [198, 3, 1, "", "quo"], [198, 3, 1, "", "real_roots"], [198, 3, 1, "", "reduced"], [198, 3, 1, "", "refine_root"], [198, 3, 1, "", "rem"], [198, 3, 1, "", "resultant"], [198, 3, 1, "", "sqf"], [198, 3, 1, "", "sqf_list"], [198, 3, 1, "", "sqf_norm"], [198, 3, 1, "", "sqf_part"], [198, 3, 1, "", "sturm"], [198, 3, 1, "", "subresultants"], [198, 3, 1, "", "terms_gcd"], [198, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[198, 2, 1, "", "contains"], [198, 2, 1, "", "fglm"], [198, 4, 1, "", "is_zero_dimensional"], [198, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[198, 2, 1, "", "EC"], [198, 2, 1, "", "EM"], [198, 2, 1, "", "ET"], [198, 2, 1, "", "LC"], [198, 2, 1, "", "LM"], [198, 2, 1, "", "LT"], [198, 2, 1, "", "TC"], [198, 2, 1, "", "abs"], [198, 2, 1, "", "add"], [198, 2, 1, "", "add_ground"], [198, 2, 1, "", "all_coeffs"], [198, 2, 1, "", "all_monoms"], [198, 2, 1, "", "all_roots"], [198, 2, 1, "", "all_terms"], [198, 2, 1, "", "as_dict"], [198, 2, 1, "", "as_expr"], [198, 2, 1, "", "as_list"], [198, 2, 1, "", "as_poly"], [198, 2, 1, "", "cancel"], [198, 2, 1, "", "clear_denoms"], [198, 2, 1, "", "coeff_monomial"], [198, 2, 1, "", "coeffs"], [198, 2, 1, "", "cofactors"], [198, 2, 1, "", "compose"], [198, 2, 1, "", "content"], [198, 2, 1, "", "count_roots"], [198, 2, 1, "", "decompose"], [198, 2, 1, "", "deflate"], [198, 2, 1, "", "degree"], [198, 2, 1, "", "degree_list"], [198, 2, 1, "", "diff"], [198, 2, 1, "", "discriminant"], [198, 2, 1, "", "dispersion"], [198, 2, 1, "", "dispersionset"], [198, 2, 1, "", "div"], [198, 4, 1, "", "domain"], [198, 2, 1, "", "eject"], [198, 2, 1, "", "eval"], [198, 2, 1, "", "exclude"], [198, 2, 1, "", "exquo"], [198, 2, 1, "", "exquo_ground"], [198, 2, 1, "", "factor_list"], [198, 2, 1, "", "factor_list_include"], [198, 4, 1, "", "free_symbols"], [198, 4, 1, "", "free_symbols_in_domain"], [198, 2, 1, "", "from_dict"], [198, 2, 1, "", "from_expr"], [198, 2, 1, "", "from_list"], [198, 2, 1, "", "from_poly"], [198, 2, 1, "", "gcd"], [198, 2, 1, "", "gcdex"], [198, 4, 1, "", "gen"], [198, 2, 1, "", "get_domain"], [198, 2, 1, "", "get_modulus"], [198, 2, 1, "", "gff_list"], [198, 2, 1, "", "ground_roots"], [198, 2, 1, "", "half_gcdex"], [198, 2, 1, "", "has_only_gens"], [198, 2, 1, "", "homogeneous_order"], [198, 2, 1, "", "homogenize"], [198, 2, 1, "", "inject"], [198, 2, 1, "", "integrate"], [198, 2, 1, "", "intervals"], [198, 2, 1, "", "invert"], [198, 4, 1, "", "is_cyclotomic"], [198, 4, 1, "", "is_ground"], [198, 4, 1, "", "is_homogeneous"], [198, 4, 1, "", "is_irreducible"], [198, 4, 1, "", "is_linear"], [198, 4, 1, "", "is_monic"], [198, 4, 1, "", "is_monomial"], [198, 4, 1, "", "is_multivariate"], [198, 4, 1, "", "is_one"], [198, 4, 1, "", "is_primitive"], [198, 4, 1, "", "is_quadratic"], [198, 4, 1, "", "is_sqf"], [198, 4, 1, "", "is_univariate"], [198, 4, 1, "", "is_zero"], [198, 2, 1, "", "l1_norm"], [198, 2, 1, "", "lcm"], [198, 2, 1, "", "length"], [198, 2, 1, "", "lift"], [198, 2, 1, "", "ltrim"], [198, 2, 1, "", "match"], [198, 2, 1, "", "max_norm"], [198, 2, 1, "", "monic"], [198, 2, 1, "", "monoms"], [198, 2, 1, "", "mul"], [198, 2, 1, "", "mul_ground"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "new"], [198, 2, 1, "", "norm"], [198, 2, 1, "", "nroots"], [198, 2, 1, "", "nth"], [198, 2, 1, "", "nth_power_roots_poly"], [198, 4, 1, "", "one"], [198, 2, 1, "", "pdiv"], [198, 2, 1, "", "per"], [198, 2, 1, "", "pexquo"], [198, 2, 1, "", "pow"], [198, 2, 1, "", "pquo"], [198, 2, 1, "", "prem"], [198, 2, 1, "", "primitive"], [198, 2, 1, "", "quo"], [198, 2, 1, "", "quo_ground"], [198, 2, 1, "", "rat_clear_denoms"], [198, 2, 1, "", "real_roots"], [198, 2, 1, "", "refine_root"], [198, 2, 1, "", "rem"], [198, 2, 1, "", "reorder"], [198, 2, 1, "", "replace"], [198, 2, 1, "", "resultant"], [198, 2, 1, "", "retract"], [198, 2, 1, "", "revert"], [198, 2, 1, "", "root"], [198, 2, 1, "", "same_root"], [198, 2, 1, "", "set_domain"], [198, 2, 1, "", "set_modulus"], [198, 2, 1, "", "shift"], [198, 2, 1, "", "slice"], [198, 2, 1, "", "sqf_list"], [198, 2, 1, "", "sqf_list_include"], [198, 2, 1, "", "sqf_norm"], [198, 2, 1, "", "sqf_part"], [198, 2, 1, "", "sqr"], [198, 2, 1, "", "sturm"], [198, 2, 1, "", "sub"], [198, 2, 1, "", "sub_ground"], [198, 2, 1, "", "subresultants"], [198, 2, 1, "", "terms"], [198, 2, 1, "", "terms_gcd"], [198, 2, 1, "", "termwise"], [198, 2, 1, "", "to_exact"], [198, 2, 1, "", "to_field"], [198, 2, 1, "", "to_ring"], [198, 2, 1, "", "total_degree"], [198, 2, 1, "", "transform"], [198, 2, 1, "", "trunc"], [198, 2, 1, "", "unify"], [198, 4, 1, "", "unit"], [198, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[198, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[198, 3, 1, "", "together"]], "sympy.polys.ring_series": [[199, 3, 1, "", "_tan1"], [199, 3, 1, "", "mul_xin"], [199, 3, 1, "", "pow_xin"], [199, 3, 1, "", "rs_LambertW"], [199, 3, 1, "", "rs_asin"], [199, 3, 1, "", "rs_atan"], [199, 3, 1, "", "rs_atanh"], [199, 3, 1, "", "rs_compose_add"], [199, 3, 1, "", "rs_cos"], [199, 3, 1, "", "rs_cos_sin"], [199, 3, 1, "", "rs_cosh"], [199, 3, 1, "", "rs_cot"], [199, 3, 1, "", "rs_diff"], [199, 3, 1, "", "rs_exp"], [199, 3, 1, "", "rs_fun"], [199, 3, 1, "", "rs_hadamard_exp"], [199, 3, 1, "", "rs_integrate"], [199, 3, 1, "", "rs_is_puiseux"], [199, 3, 1, "", "rs_log"], [199, 3, 1, "", "rs_mul"], [199, 3, 1, "", "rs_newton"], [199, 3, 1, "", "rs_nth_root"], [199, 3, 1, "", "rs_pow"], [199, 3, 1, "", "rs_puiseux"], [199, 3, 1, "", "rs_puiseux2"], [199, 3, 1, "", "rs_series_from_list"], [199, 3, 1, "", "rs_series_inversion"], [199, 3, 1, "", "rs_series_reversion"], [199, 3, 1, "", "rs_sin"], [199, 3, 1, "", "rs_sinh"], [199, 3, 1, "", "rs_square"], [199, 3, 1, "", "rs_subs"], [199, 3, 1, "", "rs_tan"], [199, 3, 1, "", "rs_tanh"], [199, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[193, 1, 1, "", "PolyElement"], [193, 1, 1, "", "PolyRing"], [193, 3, 1, "", "ring"], [193, 3, 1, "", "sring"], [193, 3, 1, "", "vring"], [193, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[193, 2, 1, "", "almosteq"], [193, 2, 1, "", "cancel"], [193, 2, 1, "", "coeff"], [193, 2, 1, "", "coeffs"], [193, 2, 1, "", "const"], [193, 2, 1, "", "content"], [193, 2, 1, "", "copy"], [193, 2, 1, "", "degree"], [193, 2, 1, "", "degrees"], [193, 2, 1, "", "diff"], [193, 2, 1, "", "div"], [193, 2, 1, "", "imul_num"], [193, 2, 1, "", "itercoeffs"], [193, 2, 1, "", "itermonoms"], [193, 2, 1, "", "iterterms"], [193, 2, 1, "", "leading_expv"], [193, 2, 1, "", "leading_monom"], [193, 2, 1, "", "leading_term"], [193, 2, 1, "", "listcoeffs"], [193, 2, 1, "", "listmonoms"], [193, 2, 1, "", "listterms"], [193, 2, 1, "", "monic"], [193, 2, 1, "", "monoms"], [193, 2, 1, "", "primitive"], [193, 2, 1, "", "square"], [193, 2, 1, "", "strip_zero"], [193, 2, 1, "", "tail_degree"], [193, 2, 1, "", "tail_degrees"], [193, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[193, 2, 1, "", "add"], [193, 2, 1, "", "add_gens"], [193, 2, 1, "", "compose"], [193, 2, 1, "", "drop"], [193, 2, 1, "", "drop_to_ground"], [193, 2, 1, "", "index"], [193, 2, 1, "", "monomial_basis"], [193, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[198, 1, 1, "", "ComplexRootOf"], [198, 1, 1, "", "RootOf"], [198, 1, 1, "", "RootSum"], [198, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[198, 2, 1, "", "_all_roots"], [198, 2, 1, "", "_complexes_index"], [198, 2, 1, "", "_complexes_sorted"], [198, 2, 1, "", "_count_roots"], [198, 2, 1, "", "_ensure_complexes_init"], [198, 2, 1, "", "_ensure_reals_init"], [198, 2, 1, "", "_eval_evalf"], [198, 2, 1, "", "_eval_is_imaginary"], [198, 2, 1, "", "_eval_is_real"], [198, 2, 1, "", "_get_complexes"], [198, 2, 1, "", "_get_complexes_sqf"], [198, 2, 1, "", "_get_interval"], [198, 2, 1, "", "_get_reals"], [198, 2, 1, "", "_get_reals_sqf"], [198, 2, 1, "", "_get_roots"], [198, 2, 1, "", "_indexed_root"], [198, 2, 1, "", "_new"], [198, 2, 1, "", "_postprocess_root"], [198, 2, 1, "", "_preprocess_roots"], [198, 2, 1, "", "_real_roots"], [198, 2, 1, "", "_reals_index"], [198, 2, 1, "", "_reals_sorted"], [198, 2, 1, "", "_refine_complexes"], [198, 2, 1, "", "_reset"], [198, 2, 1, "", "_roots_trivial"], [198, 2, 1, "", "_set_interval"], [198, 2, 1, "", "all_roots"], [198, 2, 1, "", "clear_cache"], [198, 2, 1, "", "eval_approx"], [198, 2, 1, "", "eval_rational"], [198, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[198, 2, 1, "", "new"]], "sympy.polys.solvers": [[200, 3, 1, "", "_solve_lin_sys"], [200, 3, 1, "", "_solve_lin_sys_component"], [200, 3, 1, "", "eqs_to_matrix"], [200, 3, 1, "", "solve_lin_sys"], [200, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[198, 3, 1, "", "cyclotomic_poly"], [198, 3, 1, "", "interpolating_poly"], [198, 3, 1, "", "random_poly"], [198, 3, 1, "", "swinnerton_dyer_poly"], [198, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[202, 0, 0, "-", "aesaracode"], [202, 0, 0, "-", "c"], [202, 0, 0, "-", "codeprinter"], [202, 0, 0, "-", "conventions"], [202, 0, 0, "-", "cxx"], [202, 0, 0, "-", "fortran"], [202, 0, 0, "-", "gtk"], [202, 0, 0, "-", "jscode"], [202, 0, 0, "-", "julia"], [202, 0, 0, "-", "lambdarepr"], [202, 0, 0, "-", "latex"], [202, 0, 0, "-", "maple"], [202, 0, 0, "-", "mathematica"], [202, 0, 0, "-", "mathml"], [202, 0, 0, "-", "octave"], [202, 0, 0, "-", "precedence"], [202, 0, 0, "-", "pretty"], [202, 0, 0, "-", "preview"], [202, 0, 0, "-", "printer"], [202, 0, 0, "-", "pycode"], [202, 0, 0, "-", "python"], [202, 0, 0, "-", "rcode"], [202, 0, 0, "-", "repr"], [202, 0, 0, "-", "rust"], [202, 0, 0, "-", "smtlib"], [202, 0, 0, "-", "str"], [202, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[202, 1, 1, "", "AesaraPrinter"], [202, 3, 1, "", "aesara_code"], [202, 3, 1, "", "aesara_function"], [202, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[202, 2, 1, "", "doprint"], [202, 5, 1, "", "printmethod"]], "sympy.printing.c": [[202, 1, 1, "", "C89CodePrinter"], [202, 1, 1, "", "C99CodePrinter"], [202, 3, 1, "", "ccode"], [202, 6, 1, "", "known_functions_C89"], [202, 6, 1, "", "known_functions_C99"], [202, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[202, 7, 1, "", "AssignmentError"], [202, 1, 1, "", "CodePrinter"], [202, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[202, 2, 1, "", "doprint"], [202, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[202, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[202, 1, 1, "", "CXX11CodePrinter"], [202, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[202, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[202, 1, 1, "", "FCodePrinter"], [202, 3, 1, "", "fcode"], [202, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[202, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[202, 1, 1, "", "JavascriptCodePrinter"], [202, 3, 1, "", "jscode"], [202, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[202, 1, 1, "", "JuliaCodePrinter"], [202, 3, 1, "", "julia_code"], [202, 6, 1, "", "known_fcns_src1"], [202, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[202, 1, 1, "", "LambdaPrinter"], [202, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[202, 1, 1, "", "LatexPrinter"], [202, 6, 1, "", "accepted_latex_functions"], [202, 3, 1, "", "latex"], [202, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[202, 2, 1, "", "parenthesize_super"], [202, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[202, 1, 1, "", "MapleCodePrinter"], [202, 3, 1, "", "maple_code"], [202, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[202, 1, 1, "", "MCodePrinter"], [202, 6, 1, "", "known_functions"], [202, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[202, 1, 1, "", "MathMLContentPrinter"], [202, 1, 1, "", "MathMLPresentationPrinter"], [202, 1, 1, "", "MathMLPrinterBase"], [202, 3, 1, "", "mathml"], [202, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[202, 2, 1, "", "mathml_tag"], [202, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[202, 2, 1, "", "mathml_tag"], [202, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[202, 2, 1, "", "doprint"]], "sympy.printing.octave": [[202, 1, 1, "", "OctaveCodePrinter"], [202, 6, 1, "", "known_fcns_src1"], [202, 6, 1, "", "known_fcns_src2"], [202, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[202, 6, 1, "", "PRECEDENCE"], [202, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [202, 6, 1, "", "PRECEDENCE_VALUES"], [202, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[202, 0, 0, "-", "pretty"], [202, 0, 0, "-", "pretty_symbology"], [202, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[202, 1, 1, "", "PrettyPrinter"], [202, 3, 1, "", "pretty"], [202, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[202, 3, 1, "", "G"], [202, 3, 1, "", "U"], [202, 3, 1, "", "VF"], [202, 3, 1, "", "annotated"], [202, 6, 1, "", "atoms_table"], [202, 6, 1, "", "digit_2txt"], [202, 6, 1, "", "frac"], [202, 3, 1, "", "g"], [202, 6, 1, "", "greek_letters"], [202, 3, 1, "", "hobj"], [202, 3, 1, "", "pretty_atom"], [202, 3, 1, "", "pretty_symbol"], [202, 3, 1, "", "pretty_try_use_unicode"], [202, 3, 1, "", "pretty_use_unicode"], [202, 6, 1, "", "root"], [202, 6, 1, "", "sub"], [202, 6, 1, "", "sup"], [202, 6, 1, "", "symb_2txt"], [202, 3, 1, "", "vobj"], [202, 3, 1, "", "xobj"], [202, 3, 1, "", "xstr"], [202, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[202, 1, 1, "", "prettyForm"], [202, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[202, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[202, 2, 1, "", "above"], [202, 2, 1, "", "below"], [202, 2, 1, "", "height"], [202, 2, 1, "", "left"], [202, 2, 1, "", "leftslash"], [202, 2, 1, "", "next"], [202, 2, 1, "", "parens"], [202, 2, 1, "", "render"], [202, 2, 1, "", "right"], [202, 2, 1, "", "root"], [202, 2, 1, "", "stack"], [202, 2, 1, "", "terminal_width"], [202, 2, 1, "", "width"]], "sympy.printing.preview": [[202, 3, 1, "", "preview"]], "sympy.printing.printer": [[202, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[202, 2, 1, "", "_print"], [202, 2, 1, "", "doprint"], [202, 5, 1, "", "printmethod"], [202, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[202, 1, 1, "", "MpmathPrinter"], [202, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[202, 1, 1, "", "RCodePrinter"], [202, 6, 1, "", "known_functions"], [202, 3, 1, "", "print_rcode"], [202, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[202, 1, 1, "", "ReprPrinter"], [202, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[202, 2, 1, "", "emptyPrinter"], [202, 5, 1, "", "printmethod"], [202, 2, 1, "", "reprify"]], "sympy.printing.rust": [[202, 1, 1, "", "RustCodePrinter"], [202, 6, 1, "", "known_functions"], [202, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[202, 2, 1, "", "indent_code"], [202, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[202, 1, 1, "", "SMTLibPrinter"], [202, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[202, 5, 1, "", "_default_settings"], [202, 5, 1, "", "printmethod"]], "sympy.printing.str": [[202, 1, 1, "", "StrPrinter"], [202, 3, 1, "", "sstr"], [202, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[202, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[202, 3, 1, "", "pprint_nodes"], [202, 3, 1, "", "print_node"], [202, 3, 1, "", "print_tree"], [202, 3, 1, "", "tree"]], "sympy.series.acceleration": [[209, 3, 1, "", "richardson"], [209, 3, 1, "", "shanks"]], "sympy.series.formal": [[204, 1, 1, "", "FiniteFormalPowerSeries"], [204, 1, 1, "", "FormalPowerSeries"], [204, 1, 1, "", "FormalPowerSeriesCompose"], [204, 1, 1, "", "FormalPowerSeriesInverse"], [204, 1, 1, "", "FormalPowerSeriesProduct"], [204, 3, 1, "", "compute_fps"], [204, 3, 1, "", "exp_re"], [204, 3, 1, "", "fps"], [204, 3, 1, "", "hyper_algorithm"], [204, 3, 1, "", "hyper_re"], [204, 3, 1, "", "rational_algorithm"], [204, 3, 1, "", "rational_independent"], [204, 3, 1, "", "rsolve_hypergeometric"], [204, 3, 1, "", "simpleDE"], [204, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[204, 2, 1, "", "coeff_bell"], [204, 2, 1, "", "compose"], [204, 4, 1, "", "infinite"], [204, 2, 1, "", "integrate"], [204, 2, 1, "", "inverse"], [204, 2, 1, "", "polynomial"], [204, 2, 1, "", "product"], [204, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[204, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[204, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[204, 4, 1, "", "function"]], "sympy.series.fourier": [[205, 1, 1, "", "FourierSeries"], [205, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[205, 2, 1, "", "scale"], [205, 2, 1, "", "scalex"], [205, 2, 1, "", "shift"], [205, 2, 1, "", "shiftx"], [205, 2, 1, "", "sigma_approximation"], [205, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[209, 1, 1, "", "SubsSet"], [209, 3, 1, "", "build_expression_tree"], [209, 3, 1, "", "calculate_series"], [209, 3, 1, "", "compare"], [209, 3, 1, "", "gruntz"], [209, 3, 1, "", "limitinf"], [209, 3, 1, "", "mrv"], [209, 3, 1, "", "mrv_leadterm"], [209, 3, 1, "", "mrv_max1"], [209, 3, 1, "", "mrv_max3"], [209, 3, 1, "", "rewrite"], [209, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[209, 2, 1, "", "copy"], [209, 2, 1, "", "do_subs"], [209, 2, 1, "", "meets"], [209, 2, 1, "", "union"]], "sympy.series.limits": [[209, 1, 1, "", "Limit"], [209, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[209, 2, 1, "", "doit"]], "sympy.series.limitseq": [[207, 3, 1, "", "difference_delta"], [207, 3, 1, "", "dominant"], [207, 3, 1, "", "limit_seq"]], "sympy.series.order": [[209, 1, 1, "", "Order"]], "sympy.series.order.Order": [[209, 2, 1, "", "contains"]], "sympy.series.residues": [[209, 3, 1, "", "residue"]], "sympy.series.sequences": [[208, 1, 1, "", "EmptySequence"], [208, 1, 1, "", "RecursiveSeq"], [208, 1, 1, "", "SeqAdd"], [208, 1, 1, "", "SeqBase"], [208, 1, 1, "", "SeqFormula"], [208, 1, 1, "", "SeqMul"], [208, 1, 1, "", "SeqPer"], [208, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[208, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[208, 4, 1, "", "initial"], [208, 4, 1, "", "interval"], [208, 4, 1, "", "n"], [208, 4, 1, "", "recurrence"], [208, 4, 1, "", "start"], [208, 4, 1, "", "stop"], [208, 4, 1, "", "y"], [208, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[208, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[208, 2, 1, "", "coeff"], [208, 2, 1, "", "coeff_mul"], [208, 2, 1, "", "find_linear_recurrence"], [208, 4, 1, "", "free_symbols"], [208, 4, 1, "", "gen"], [208, 4, 1, "", "interval"], [208, 4, 1, "", "length"], [208, 4, 1, "", "start"], [208, 4, 1, "", "stop"], [208, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[208, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[208, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[208, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[209, 3, 1, "", "series"]], "sympy.sets": [[210, 0, 0, "-", "conditionset"], [210, 0, 0, "-", "fancysets"], [210, 0, 0, "-", "powerset"], [210, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[210, 1, 1, "", "ConditionSet"], [210, 1, 1, "", "Contains"], [210, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[210, 1, 1, "", "CartesianComplexRegion"], [210, 1, 1, "", "ComplexRegion"], [210, 1, 1, "", "Complexes"], [210, 1, 1, "", "ImageSet"], [210, 1, 1, "", "Integers"], [210, 1, 1, "", "Naturals"], [210, 1, 1, "", "Naturals0"], [210, 1, 1, "", "PolarComplexRegion"], [210, 1, 1, "", "Range"], [210, 1, 1, "", "Rationals"], [210, 1, 1, "", "Reals"], [210, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[210, 4, 1, "", "a_interval"], [210, 4, 1, "", "b_interval"], [210, 2, 1, "", "from_real"], [210, 4, 1, "", "psets"], [210, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[210, 2, 1, "", "as_relational"], [210, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[210, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[210, 1, 1, "", "Complement"], [210, 1, 1, "", "DisjointUnion"], [210, 1, 1, "", "EmptySet"], [210, 1, 1, "", "FiniteSet"], [210, 1, 1, "", "Intersection"], [210, 1, 1, "", "Interval"], [210, 1, 1, "", "ProductSet"], [210, 1, 1, "", "Set"], [210, 1, 1, "", "SymmetricDifference"], [210, 1, 1, "", "Union"], [210, 1, 1, "", "UniversalSet"], [210, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[210, 2, 1, "", "as_relational"], [210, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[210, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[210, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[210, 2, 1, "", "Lopen"], [210, 2, 1, "", "Ropen"], [210, 2, 1, "", "as_relational"], [210, 4, 1, "", "end"], [210, 4, 1, "", "is_left_unbounded"], [210, 4, 1, "", "is_right_unbounded"], [210, 4, 1, "", "left_open"], [210, 2, 1, "", "open"], [210, 4, 1, "", "right_open"], [210, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[210, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[210, 4, 1, "", "boundary"], [210, 4, 1, "", "closure"], [210, 2, 1, "", "complement"], [210, 2, 1, "", "contains"], [210, 4, 1, "", "inf"], [210, 4, 1, "", "interior"], [210, 2, 1, "", "intersect"], [210, 2, 1, "", "intersection"], [210, 4, 1, "", "is_closed"], [210, 2, 1, "", "is_disjoint"], [210, 4, 1, "", "is_open"], [210, 2, 1, "", "is_proper_subset"], [210, 2, 1, "", "is_proper_superset"], [210, 2, 1, "", "is_subset"], [210, 2, 1, "", "is_superset"], [210, 2, 1, "", "isdisjoint"], [210, 2, 1, "", "issubset"], [210, 2, 1, "", "issuperset"], [210, 4, 1, "", "kind"], [210, 4, 1, "", "measure"], [210, 2, 1, "", "powerset"], [210, 4, 1, "", "sup"], [210, 2, 1, "", "symmetric_difference"], [210, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[210, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[210, 2, 1, "", "as_relational"]], "sympy.simplify": [[214, 0, 0, "-", "combsimp"], [214, 0, 0, "-", "cse_main"], [214, 0, 0, "-", "epathtools"], [214, 0, 0, "-", "hyperexpand"], [212, 0, 0, "-", "hyperexpand_doc"], [214, 0, 0, "-", "powsimp"], [214, 0, 0, "-", "radsimp"], [214, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [214, 0, 0, "-", "sqrtdenest"], [214, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[214, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[214, 3, 1, "", "cse"], [214, 3, 1, "", "opt_cse"], [214, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[214, 1, 1, "", "EPath"], [214, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[214, 2, 1, "", "apply"], [214, 2, 1, "", "select"]], "sympy.simplify.fu": [[211, 3, 1, "", "TR0"], [211, 3, 1, "", "TR1"], [211, 3, 1, "", "TR10"], [211, 3, 1, "", "TR10i"], [211, 3, 1, "", "TR11"], [211, 3, 1, "", "TR111"], [211, 3, 1, "", "TR12"], [211, 3, 1, "", "TR12i"], [211, 3, 1, "", "TR13"], [211, 3, 1, "", "TR14"], [211, 3, 1, "", "TR15"], [211, 3, 1, "", "TR16"], [211, 3, 1, "", "TR2"], [211, 3, 1, "", "TR22"], [211, 3, 1, "", "TR2i"], [211, 3, 1, "", "TR3"], [211, 3, 1, "", "TR4"], [211, 3, 1, "", "TR5"], [211, 3, 1, "", "TR6"], [211, 3, 1, "", "TR7"], [211, 3, 1, "", "TR8"], [211, 3, 1, "", "TR9"], [211, 3, 1, "", "TRmorrie"], [211, 3, 1, "", "TRpower"], [211, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[214, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[214, 3, 1, "", "powdenest"], [214, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[214, 3, 1, "", "collect"], [214, 3, 1, "", "collect_const"], [214, 3, 1, "", "collect_sqrt"], [214, 3, 1, "", "fraction"], [214, 3, 1, "", "rad_rationalize"], [214, 3, 1, "", "radsimp"], [214, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[214, 3, 1, "", "ratsimp"], [214, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[214, 3, 1, "", "besselsimp"], [214, 3, 1, "", "hypersimilar"], [214, 3, 1, "", "hypersimp"], [214, 3, 1, "", "kroneckersimp"], [214, 3, 1, "", "logcombine"], [214, 3, 1, "", "nsimplify"], [214, 3, 1, "", "nthroot"], [214, 3, 1, "", "posify"], [214, 3, 1, "", "separatevars"], [214, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[214, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[214, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[220, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[215, 1, 1, "", "BinaryQuadratic"], [215, 1, 1, "", "CubicThue"], [215, 1, 1, "", "DiophantineEquationType"], [215, 1, 1, "", "DiophantineSolutionSet"], [215, 1, 1, "", "GeneralPythagorean"], [215, 1, 1, "", "GeneralSumOfEvenPowers"], [215, 1, 1, "", "GeneralSumOfSquares"], [215, 1, 1, "", "HomogeneousGeneralQuadratic"], [215, 1, 1, "", "HomogeneousTernaryQuadratic"], [215, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [215, 1, 1, "", "InhomogeneousGeneralQuadratic"], [215, 1, 1, "", "InhomogeneousTernaryQuadratic"], [215, 1, 1, "", "Linear"], [215, 3, 1, "", "PQa"], [215, 1, 1, "", "Univariate"], [215, 3, 1, "", "base_solution_linear"], [215, 3, 1, "", "classify_diop"], [215, 3, 1, "", "cornacchia"], [215, 3, 1, "", "descent"], [215, 3, 1, "", "diop_DN"], [215, 3, 1, "", "diop_bf_DN"], [215, 3, 1, "", "diop_general_pythagorean"], [215, 3, 1, "", "diop_general_sum_of_even_powers"], [215, 3, 1, "", "diop_general_sum_of_squares"], [215, 3, 1, "", "diop_linear"], [215, 3, 1, "", "diop_quadratic"], [215, 3, 1, "", "diop_solve"], [215, 3, 1, "", "diop_ternary_quadratic"], [215, 3, 1, "", "diop_ternary_quadratic_normal"], [215, 3, 1, "", "diophantine"], [215, 3, 1, "", "divisible"], [215, 3, 1, "", "equivalent"], [215, 3, 1, "", "find_DN"], [215, 3, 1, "", "gaussian_reduce"], [215, 3, 1, "", "holzer"], [215, 3, 1, "", "ldescent"], [215, 3, 1, "", "merge_solution"], [215, 3, 1, "", "parametrize_ternary_quadratic"], [215, 3, 1, "", "partition"], [215, 3, 1, "", "power_representation"], [215, 3, 1, "", "prime_as_sum_of_two_squares"], [215, 3, 1, "", "reconstruct"], [215, 3, 1, "", "sqf_normal"], [215, 3, 1, "", "square_factor"], [215, 3, 1, "", "sum_of_four_squares"], [215, 3, 1, "", "sum_of_powers"], [215, 3, 1, "", "sum_of_squares"], [215, 3, 1, "", "sum_of_three_squares"], [215, 3, 1, "", "transformation_to_DN"], [215, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[215, 2, 1, "", "matches"]], "sympy.solvers": [[217, 0, 0, "-", "inequalities"], [218, 0, 0, "-", "ode"], [219, 0, 0, "-", "pde"], [220, 0, 0, "-", "recurr"], [221, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[217, 3, 1, "", "reduce_abs_inequalities"], [217, 3, 1, "", "reduce_abs_inequality"], [217, 3, 1, "", "reduce_inequalities"], [217, 3, 1, "", "reduce_rational_inequalities"], [217, 3, 1, "", "solve_poly_inequalities"], [217, 3, 1, "", "solve_poly_inequality"], [217, 3, 1, "", "solve_rational_inequalities"], [217, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[218, 6, 1, "", "allhints"], [218, 3, 1, "", "checkinfsol"], [218, 3, 1, "", "checkodesol"], [218, 3, 1, "", "classify_ode"], [218, 3, 1, "", "constantsimp"], [218, 3, 1, "", "dsolve"], [218, 3, 1, "", "homogeneous_order"], [218, 3, 1, "", "infinitesimals"], [218, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[218, 3, 1, "", "lie_heuristic_abaco1_product"], [218, 3, 1, "", "lie_heuristic_abaco1_simple"], [218, 3, 1, "", "lie_heuristic_abaco2_similar"], [218, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [218, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [218, 3, 1, "", "lie_heuristic_bivariate"], [218, 3, 1, "", "lie_heuristic_chi"], [218, 3, 1, "", "lie_heuristic_function_sum"], [218, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[218, 3, 1, "", "_handle_Integral"], [218, 3, 1, "", "_linear_2eq_order1_type6"], [218, 3, 1, "", "_linear_2eq_order1_type7"], [218, 3, 1, "", "_nonlinear_2eq_order1_type1"], [218, 3, 1, "", "_nonlinear_2eq_order1_type2"], [218, 3, 1, "", "_nonlinear_2eq_order1_type3"], [218, 3, 1, "", "_nonlinear_2eq_order1_type4"], [218, 3, 1, "", "_nonlinear_2eq_order1_type5"], [218, 3, 1, "", "_nonlinear_3eq_order1_type1"], [218, 3, 1, "", "_nonlinear_3eq_order1_type2"], [218, 3, 1, "", "_nonlinear_3eq_order1_type3"], [218, 3, 1, "", "_nonlinear_3eq_order1_type4"], [218, 3, 1, "", "_nonlinear_3eq_order1_type5"], [218, 3, 1, "", "constant_renumber"], [218, 3, 1, "", "ode_1st_power_series"], [218, 3, 1, "", "ode_2nd_power_series_ordinary"], [218, 3, 1, "", "ode_2nd_power_series_regular"], [218, 3, 1, "", "ode_sol_simplicity"], [218, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[218, 3, 1, "", "compute_m_ybar"], [218, 3, 1, "", "construct_c"], [218, 3, 1, "", "construct_d"], [218, 3, 1, "", "get_gen_sol_from_part_sol"], [218, 3, 1, "", "rational_laurent_series"], [218, 3, 1, "", "remove_redundant_sols"], [218, 3, 1, "", "riccati_inverse_normal"], [218, 3, 1, "", "riccati_normal"], [218, 3, 1, "", "riccati_reduced"], [218, 3, 1, "", "solve_aux_eq"], [218, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[218, 1, 1, "", "AlmostLinear"], [218, 1, 1, "", "Bernoulli"], [218, 1, 1, "", "Factorable"], [218, 1, 1, "", "FirstExact"], [218, 1, 1, "", "FirstLinear"], [218, 1, 1, "", "HomogeneousCoeffBest"], [218, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [218, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [218, 1, 1, "", "LieGroup"], [218, 1, 1, "", "LinearCoefficients"], [218, 1, 1, "", "Liouville"], [218, 1, 1, "", "NthAlgebraic"], [218, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [218, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [218, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [218, 1, 1, "", "NthLinearEulerEqHomogeneous"], [218, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [218, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [218, 1, 1, "", "NthOrderReducible"], [218, 1, 1, "", "RationalRiccati"], [218, 1, 1, "", "RiccatiSpecial"], [218, 1, 1, "", "SecondHypergeometric"], [218, 1, 1, "", "SecondLinearAiry"], [218, 1, 1, "", "SecondLinearBessel"], [218, 1, 1, "", "Separable"], [218, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[218, 3, 1, "", "canonical_odes"], [218, 3, 1, "", "dsolve_system"], [218, 3, 1, "", "linear_ode_to_matrix"], [218, 3, 1, "", "linodesolve"], [218, 3, 1, "", "linodesolve_type"], [218, 3, 1, "", "matrix_exp"], [218, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[219, 3, 1, "", "checkpdesol"], [219, 3, 1, "", "classify_pde"], [219, 3, 1, "", "pde_1st_linear_constant_coeff"], [219, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [219, 3, 1, "", "pde_1st_linear_variable_coeff"], [219, 3, 1, "", "pde_separate"], [219, 3, 1, "", "pde_separate_add"], [219, 3, 1, "", "pde_separate_mul"], [219, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[220, 3, 1, "", "solve_poly_system"], [220, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[220, 3, 1, "", "rsolve"], [220, 3, 1, "", "rsolve_hyper"], [220, 3, 1, "", "rsolve_poly"], [220, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[220, 3, 1, "", "checksol"], [220, 3, 1, "", "nsolve"], [220, 3, 1, "", "solve"], [220, 3, 1, "", "solve_linear"], [220, 3, 1, "", "solve_linear_system"], [220, 3, 1, "", "solve_linear_system_LU"], [220, 3, 1, "", "solve_undetermined_coeffs"], [220, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[221, 3, 1, "", "_is_exponential"], [221, 3, 1, "", "_is_logarithmic"], [221, 3, 1, "", "_solve_exponential"], [221, 3, 1, "", "_solve_logarithm"], [221, 3, 1, "", "_transolve"], [221, 3, 1, "", "domain_check"], [221, 3, 1, "", "invert_complex"], [221, 3, 1, "", "invert_real"], [221, 3, 1, "", "linear_eq_to_matrix"], [221, 3, 1, "", "linsolve"], [221, 3, 1, "", "nonlinsolve"], [221, 3, 1, "", "solveset"], [221, 3, 1, "", "solveset_complex"], [221, 3, 1, "", "solveset_real"], [221, 3, 1, "", "solvify"]], "sympy.stats": [[222, 3, 1, "", "Arcsin"], [222, 3, 1, "", "Benini"], [222, 3, 1, "", "Bernoulli"], [222, 1, 1, "", "BernoulliProcess"], [222, 3, 1, "", "Beta"], [222, 3, 1, "", "BetaBinomial"], [222, 3, 1, "", "BetaNoncentral"], [222, 3, 1, "", "BetaPrime"], [222, 3, 1, "", "Binomial"], [222, 3, 1, "", "BoundedPareto"], [222, 3, 1, "", "Cauchy"], [222, 1, 1, "", "CentralMoment"], [222, 3, 1, "", "Chi"], [222, 3, 1, "", "ChiNoncentral"], [222, 3, 1, "", "ChiSquared"], [222, 3, 1, "", "Coin"], [222, 1, 1, "", "ContinuousMarkovChain"], [222, 3, 1, "", "ContinuousRV"], [222, 1, 1, "", "Covariance"], [222, 1, 1, "", "CrossCovarianceMatrix"], [222, 3, 1, "", "Dagum"], [222, 3, 1, "", "Die"], [222, 1, 1, "", "DiscreteMarkovChain"], [222, 3, 1, "", "DiscreteUniform"], [222, 3, 1, "", "E"], [222, 3, 1, "", "Erlang"], [222, 3, 1, "", "ExGaussian"], [222, 1, 1, "", "Expectation"], [222, 1, 1, "", "ExpectationMatrix"], [222, 3, 1, "", "Exponential"], [222, 3, 1, "", "FDistribution"], [222, 3, 1, "", "FiniteRV"], [222, 3, 1, "", "FisherZ"], [222, 3, 1, "", "Frechet"], [222, 3, 1, "", "Gamma"], [222, 3, 1, "", "GammaInverse"], [222, 1, 1, "", "GammaProcess"], [222, 3, 1, "", "GeneralizedMultivariateLogGamma"], [222, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [222, 3, 1, "", "Geometric"], [222, 3, 1, "", "Gompertz"], [222, 3, 1, "", "Gumbel"], [222, 3, 1, "", "Hermite"], [222, 3, 1, "", "Hypergeometric"], [222, 3, 1, "", "JointRV"], [222, 3, 1, "", "Kumaraswamy"], [222, 3, 1, "", "Laplace"], [222, 3, 1, "", "Levy"], [222, 3, 1, "", "LogLogistic"], [222, 3, 1, "", "LogNormal"], [222, 3, 1, "", "Logarithmic"], [222, 3, 1, "", "Logistic"], [222, 3, 1, "", "Lomax"], [222, 3, 1, "", "MatrixGamma"], [222, 3, 1, "", "MatrixNormal"], [222, 3, 1, "", "Maxwell"], [222, 1, 1, "", "Moment"], [222, 3, 1, "", "Moyal"], [222, 3, 1, "", "Multinomial"], [222, 3, 1, "", "MultivariateBeta"], [222, 3, 1, "", "MultivariateEwens"], [222, 3, 1, "", "MultivariateLaplace"], [222, 3, 1, "", "MultivariateNormal"], [222, 3, 1, "", "MultivariateT"], [222, 3, 1, "", "Nakagami"], [222, 3, 1, "", "NegativeBinomial"], [222, 3, 1, "", "NegativeMultinomial"], [222, 3, 1, "", "Normal"], [222, 3, 1, "", "NormalGamma"], [222, 3, 1, "", "P"], [222, 3, 1, "", "Pareto"], [222, 3, 1, "", "Poisson"], [222, 1, 1, "", "PoissonProcess"], [222, 3, 1, "", "PowerFunction"], [222, 1, 1, "", "Probability"], [222, 3, 1, "", "QuadraticU"], [222, 3, 1, "", "Rademacher"], [222, 3, 1, "", "RaisedCosine"], [222, 3, 1, "", "Rayleigh"], [222, 3, 1, "", "Reciprocal"], [222, 3, 1, "", "ShiftedGompertz"], [222, 3, 1, "", "Skellam"], [222, 3, 1, "", "StudentT"], [222, 3, 1, "", "Trapezoidal"], [222, 3, 1, "", "Triangular"], [222, 3, 1, "", "Uniform"], [222, 3, 1, "", "UniformSum"], [222, 1, 1, "", "Variance"], [222, 1, 1, "", "VarianceMatrix"], [222, 3, 1, "", "VonMises"], [222, 3, 1, "", "Wald"], [222, 3, 1, "", "Weibull"], [222, 1, 1, "", "WienerProcess"], [222, 3, 1, "", "WignerSemicircle"], [222, 3, 1, "", "Wishart"], [222, 3, 1, "", "YuleSimon"], [222, 3, 1, "", "Zeta"], [222, 3, 1, "", "cmoment"], [222, 3, 1, "", "correlation"], [222, 3, 1, "", "coskewness"], [222, 3, 1, "", "covariance"], [222, 0, 0, "-", "crv"], [222, 0, 0, "-", "crv_types"], [222, 3, 1, "", "density"], [222, 3, 1, "", "entropy"], [222, 3, 1, "", "factorial_moment"], [222, 0, 0, "-", "frv"], [222, 0, 0, "-", "frv_types"], [222, 3, 1, "", "given"], [222, 3, 1, "", "kurtosis"], [222, 3, 1, "", "marginal_distribution"], [222, 3, 1, "", "median"], [222, 3, 1, "", "moment"], [222, 3, 1, "", "quantile"], [222, 0, 0, "-", "rv"], [222, 3, 1, "", "sample"], [222, 3, 1, "", "sample_iter"], [222, 3, 1, "", "skewness"], [222, 3, 1, "", "std"], [222, 3, 1, "", "variance"], [222, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[222, 2, 1, "", "expectation"], [222, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[222, 2, 1, "", "absorbing_probabilities"], [222, 2, 1, "", "canonical_form"], [222, 2, 1, "", "communication_classes"], [222, 2, 1, "", "decompose"], [222, 2, 1, "", "fixed_row_vector"], [222, 2, 1, "", "fundamental_matrix"], [222, 4, 1, "", "limiting_distribution"], [222, 2, 1, "", "sample"], [222, 2, 1, "", "stationary_distribution"], [222, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[222, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[222, 1, 1, "", "ContinuousDomain"], [222, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[222, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[222, 3, 1, "", "Die"], [222, 3, 1, "", "Normal"]], "sympy.stats.frv": [[222, 1, 1, "", "FiniteDomain"], [222, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[222, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[222, 1, 1, "", "ConditionalDomain"], [222, 1, 1, "", "PSpace"], [222, 1, 1, "", "ProductDomain"], [222, 1, 1, "", "ProductPSpace"], [222, 1, 1, "", "RandomDomain"], [222, 1, 1, "", "RandomSymbol"], [222, 1, 1, "", "SingleDomain"], [222, 1, 1, "", "SinglePSpace"], [222, 3, 1, "", "pspace"], [222, 3, 1, "", "random_symbols"], [222, 3, 1, "", "rs_swap"], [222, 3, 1, "", "sampling_E"], [222, 3, 1, "", "sampling_P"], [222, 3, 1, "", "sampling_density"]], "sympy.tensor": [[223, 0, 0, "-", "array"], [226, 0, 0, "-", "index_methods"], [227, 0, 0, "-", "indexed"], [228, 0, 0, "-", "tensor"], [229, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[223, 1, 1, "", "ImmutableDenseNDimArray"], [223, 1, 1, "", "ImmutableSparseNDimArray"], [223, 1, 1, "", "MutableDenseNDimArray"], [223, 1, 1, "", "MutableSparseNDimArray"], [223, 3, 1, "", "derive_by_array"], [224, 0, 0, "-", "expressions"], [223, 3, 1, "", "permutedims"], [223, 3, 1, "", "tensorcontraction"], [223, 3, 1, "", "tensordiagonal"], [223, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[226, 3, 1, "", "get_contraction_structure"], [226, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[227, 1, 1, "", "Idx"], [227, 1, 1, "", "Indexed"], [227, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[227, 4, 1, "", "label"], [227, 4, 1, "", "lower"], [227, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[227, 4, 1, "", "base"], [227, 4, 1, "", "indices"], [227, 4, 1, "", "ranges"], [227, 4, 1, "", "rank"], [227, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[227, 4, 1, "", "label"], [227, 4, 1, "", "offset"], [227, 4, 1, "", "shape"], [227, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[228, 1, 1, "", "TensAdd"], [228, 1, 1, "", "TensExpr"], [228, 1, 1, "", "TensMul"], [228, 1, 1, "", "TensorHead"], [228, 1, 1, "", "TensorIndex"], [228, 1, 1, "", "TensorIndexType"], [228, 1, 1, "", "TensorSymmetry"], [228, 1, 1, "", "TensorType"], [228, 1, 1, "", "_TensorManager"], [228, 3, 1, "", "canon_bp"], [228, 3, 1, "", "riemann_cyclic"], [228, 3, 1, "", "riemann_cyclic_replace"], [228, 3, 1, "", "tensor_heads"], [228, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[228, 2, 1, "", "canon_bp"], [228, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[228, 2, 1, "", "get_matrix"], [228, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[228, 2, 1, "", "canon_bp"], [228, 2, 1, "", "contract_metric"], [228, 2, 1, "", "get_free_indices"], [228, 2, 1, "", "get_indices"], [228, 2, 1, "", "perm2tensor"], [228, 2, 1, "", "sorted_components"], [228, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[228, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[228, 2, 1, "", "direct_product"], [228, 2, 1, "", "fully_symmetric"], [228, 2, 1, "", "no_symmetry"], [228, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[228, 2, 1, "", "clear"], [228, 2, 1, "", "comm_i2symbol"], [228, 2, 1, "", "comm_symbols2i"], [228, 2, 1, "", "get_comm"], [228, 2, 1, "", "set_comm"], [228, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[229, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[231, 0, 0, "-", "pytest"], [232, 0, 0, "-", "randtest"], [233, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[231, 3, 1, "", "SKIP"], [231, 3, 1, "", "nocache_fail"], [231, 3, 1, "", "raises"], [231, 3, 1, "", "warns"], [231, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[233, 1, 1, "", "PyTestReporter"], [233, 1, 1, "", "Reporter"], [233, 1, 1, "", "SymPyDocTestFinder"], [233, 1, 1, "", "SymPyDocTestRunner"], [233, 1, 1, "", "SymPyOutputChecker"], [233, 1, 1, "", "SymPyTestResults"], [233, 3, 1, "", "convert_to_native_paths"], [233, 3, 1, "", "doctest"], [233, 3, 1, "", "get_sympy_dir"], [233, 3, 1, "", "raise_on_deprecated"], [233, 3, 1, "", "run_all_tests"], [233, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [233, 3, 1, "", "split_list"], [233, 3, 1, "", "sympytestfile"], [233, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[233, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[233, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[233, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[233, 5, 1, "", "attempted"], [233, 5, 1, "", "failed"]], "sympy.utilities": [[234, 0, 0, "-", "autowrap"], [235, 0, 0, "-", "codegen"], [236, 0, 0, "-", "decorator"], [237, 0, 0, "-", "enumerative"], [238, 0, 0, "-", "exceptions"], [240, 0, 0, "-", "iterables"], [241, 0, 0, "-", "lambdify"], [242, 0, 0, "-", "memoization"], [243, 0, 0, "-", "misc"], [244, 0, 0, "-", "pkgdata"], [245, 0, 0, "-", "source"], [246, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[234, 1, 1, "", "CodeWrapper"], [234, 1, 1, "", "CythonCodeWrapper"], [234, 1, 1, "", "DummyWrapper"], [234, 1, 1, "", "F2PyCodeWrapper"], [234, 1, 1, "", "UfuncifyCodeWrapper"], [234, 3, 1, "", "autowrap"], [234, 3, 1, "", "binary_function"], [234, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[234, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[234, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[235, 1, 1, "", "Argument"], [235, 1, 1, "", "CCodeGen"], [235, 1, 1, "", "CodeGen"], [235, 1, 1, "", "DataType"], [235, 1, 1, "", "FCodeGen"], [235, 1, 1, "", "JuliaCodeGen"], [235, 1, 1, "", "OctaveCodeGen"], [235, 1, 1, "", "OutputArgument"], [235, 1, 1, "", "Result"], [235, 1, 1, "", "Routine"], [235, 1, 1, "", "RustCodeGen"], [235, 3, 1, "", "codegen"], [235, 3, 1, "", "get_default_datatype"], [235, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[235, 2, 1, "", "dump_c"], [235, 2, 1, "", "dump_h"], [235, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[235, 2, 1, "", "dump_code"], [235, 2, 1, "", "routine"], [235, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[235, 2, 1, "", "dump_f95"], [235, 2, 1, "", "dump_h"], [235, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[235, 2, 1, "", "dump_jl"], [235, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[235, 2, 1, "", "dump_m"], [235, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[235, 4, 1, "", "result_variables"], [235, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[235, 2, 1, "", "dump_rs"], [235, 2, 1, "", "get_prototype"], [235, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[236, 3, 1, "", "conserve_mpmath_dps"], [236, 3, 1, "", "deprecated"], [236, 3, 1, "", "doctest_depends_on"], [236, 3, 1, "", "memoize_property"], [236, 1, 1, "", "no_attrs_in_subclass"], [236, 3, 1, "", "public"], [236, 3, 1, "", "threaded"], [236, 3, 1, "", "threaded_factory"], [236, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[237, 1, 1, "", "MultisetPartitionTraverser"], [237, 3, 1, "", "factoring_visitor"], [237, 3, 1, "", "list_visitor"], [237, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[237, 2, 1, "", "count_partitions"], [237, 2, 1, "", "enum_all"], [237, 2, 1, "", "enum_large"], [237, 2, 1, "", "enum_range"], [237, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[238, 7, 1, "", "SymPyDeprecationWarning"], [238, 3, 1, "", "ignore_warnings"], [238, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[240, 1, 1, "", "NotIterable"], [240, 3, 1, "", "binary_partitions"], [240, 3, 1, "", "bracelets"], [240, 3, 1, "", "capture"], [240, 3, 1, "", "common_prefix"], [240, 3, 1, "", "common_suffix"], [240, 3, 1, "", "connected_components"], [240, 3, 1, "", "dict_merge"], [240, 3, 1, "", "filter_symbols"], [240, 3, 1, "", "flatten"], [240, 3, 1, "", "generate_bell"], [240, 3, 1, "", "generate_derangements"], [240, 3, 1, "", "generate_involutions"], [240, 3, 1, "", "generate_oriented_forest"], [240, 3, 1, "", "group"], [240, 3, 1, "", "has_dups"], [240, 3, 1, "", "has_variety"], [240, 3, 1, "", "ibin"], [240, 3, 1, "", "iproduct"], [240, 3, 1, "", "is_palindromic"], [240, 3, 1, "", "is_sequence"], [240, 3, 1, "", "iterable"], [240, 3, 1, "", "kbins"], [240, 3, 1, "", "least_rotation"], [240, 3, 1, "", "minlex"], [240, 3, 1, "", "multiset"], [240, 3, 1, "", "multiset_combinations"], [240, 3, 1, "", "multiset_derangements"], [240, 3, 1, "", "multiset_partitions"], [240, 3, 1, "", "multiset_permutations"], [240, 3, 1, "", "necklaces"], [240, 3, 1, "", "numbered_symbols"], [240, 3, 1, "", "ordered_partitions"], [240, 3, 1, "", "partitions"], [240, 3, 1, "", "permute_signs"], [240, 3, 1, "", "postfixes"], [240, 3, 1, "", "prefixes"], [240, 3, 1, "", "random_derangement"], [240, 3, 1, "", "reshape"], [240, 3, 1, "", "rotate_left"], [240, 3, 1, "", "rotate_right"], [240, 3, 1, "", "rotations"], [240, 3, 1, "", "roundrobin"], [240, 3, 1, "", "runs"], [240, 3, 1, "", "sift"], [240, 3, 1, "", "signed_permutations"], [240, 3, 1, "", "strongly_connected_components"], [240, 3, 1, "", "subsets"], [240, 3, 1, "", "take"], [240, 3, 1, "", "topological_sort"], [240, 3, 1, "", "unflatten"], [240, 3, 1, "", "uniq"], [240, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[241, 3, 1, "", "implemented_function"], [241, 3, 1, "", "lambdastr"], [241, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[242, 3, 1, "", "assoc_recurrence_memo"], [242, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[243, 3, 1, "", "as_int"], [243, 3, 1, "", "debug"], [243, 3, 1, "", "debug_decorator"], [243, 3, 1, "", "filldedent"], [243, 3, 1, "", "find_executable"], [243, 3, 1, "", "func_name"], [243, 3, 1, "", "ordinal"], [243, 3, 1, "", "rawlines"], [243, 3, 1, "", "replace"], [243, 3, 1, "", "strlines"], [243, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[244, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[245, 3, 1, "", "get_class"], [245, 3, 1, "", "get_mod_func"], [245, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[246, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[247, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[247, 2, 1, "", "__init__"], [247, 2, 1, "", "create_new"], [247, 2, 1, "", "locate_new"], [247, 2, 1, "", "orient_new"], [247, 2, 1, "", "orient_new_axis"], [247, 2, 1, "", "orient_new_body"], [247, 2, 1, "", "orient_new_quaternion"], [247, 2, 1, "", "orient_new_space"], [247, 2, 1, "", "position_wrt"], [247, 2, 1, "", "rotation_matrix"], [247, 2, 1, "", "scalar_map"]], "sympy.vector": [[249, 3, 1, "", "curl"], [249, 3, 1, "", "divergence"], [249, 3, 1, "", "express"], [249, 3, 1, "", "gradient"], [249, 3, 1, "", "is_conservative"], [249, 3, 1, "", "is_solenoidal"], [249, 3, 1, "", "matrix_to_vector"], [249, 3, 1, "", "scalar_potential"], [249, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[247, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[247, 2, 1, "", "cross"], [247, 2, 1, "", "dot"], [247, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[247, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[247, 4, 1, "", "components"], [247, 2, 1, "", "cross"], [247, 2, 1, "", "dot"], [247, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[247, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[247, 2, 1, "", "multiplicity"], [247, 2, 1, "", "rational_parametrization"], [247, 2, 1, "", "regular_point"], [247, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[247, 1, 1, "", "ParametricIntegral"], [249, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[248, 1, 1, "", "AxisOrienter"], [248, 1, 1, "", "BodyOrienter"], [248, 1, 1, "", "Orienter"], [248, 1, 1, "", "QuaternionOrienter"], [248, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[248, 2, 1, "", "__init__"], [248, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[248, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[248, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[248, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[248, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[247, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[247, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[247, 4, 1, "", "components"], [247, 2, 1, "", "cross"], [247, 2, 1, "", "dot"], [247, 2, 1, "", "magnitude"], [247, 2, 1, "", "normalize"], [247, 2, 1, "", "outer"], [247, 2, 1, "", "projection"], [247, 2, 1, "", "separate"], [247, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 23, 26, 27, 37, 61, 78, 97, 135, 183, 192, 247, 249, 250, 253, 267, 269, 272], "build": [1, 3], "document": [1, 3, 4, 6, 7, 26], "requir": [1, 4], "depend": [1, 3, 132, 192, 251], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 188], "10": [1, 10, 99], "doc": [1, 193], "local": 1, "instal": [1, 26, 27, 97, 276], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 23, 25, 195], "recommend": [3, 7], "interact": [3, 83, 188], "us": [3, 7, 10, 16, 23, 24, 25, 37, 55, 58, 79, 80, 96, 99, 127, 132, 133, 186, 188, 199, 221, 251], "print": [3, 10, 20, 37, 83, 109, 116, 177, 182, 202, 277], "pars": [3, 25, 97], "logic": [3, 19, 85, 257, 260], "plot": [3, 10, 103, 148, 188], "lambdifi": [3, 10, 96, 241, 267], "code": [3, 4, 5, 7, 10, 37, 39, 109, 186, 202, 245, 257, 259], "gener": [3, 6, 7, 45, 47, 192, 197, 221, 252, 257, 259], "autowrap": [3, 37, 234], "printer": [3, 37, 202, 277], "test": [3, 5, 10, 52, 85, 201, 230, 232, 233, 274], "onli": [3, 221], "statist": 3, "symengin": 3, "backend": [3, 188], "experiment": [3, 97], "rubi": 3, "integr": [3, 10, 59, 63, 77, 79, 80, 81, 82, 109, 190, 197, 256, 268], "sage": 3, "develop": [3, 5, 55], "get": [3, 5, 12], "sourc": [3, 10, 12, 245], "run": [3, 5, 27, 233], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 132, 191, 192, 221, 272, 275], "i": [4, 12, 24, 80, 96, 132, 191, 202, 221, 272], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 25, 80], "doe": [4, 12, 221], "public": 4, "api": [4, 26, 76, 80, 82, 105, 128, 184, 221, 234, 235, 254, 257], "Not": [4, 23, 24, 25], "The": [4, 10, 18, 20, 38, 45, 80, 132, 173, 184, 197, 209, 212, 252, 253, 272], "purpos": 4, "technic": 4, "possibl": [4, 23, 274], "how": [4, 21, 26, 80, 186, 221], "long": 4, "should": [4, 96], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 55, 67, 132, 209, 211, 270, 279], "entri": [4, 91], "environ": 5, "setup": 5, "git": [5, 27], "virtual": 5, "docstr": [6, 7, 98, 101, 110, 111, 112, 113, 114, 115, 116, 117, 179, 180, 181, 182, 240, 247, 248, 249], "style": [6, 7], "guid": [6, 7, 21, 26, 128, 184, 254], "guidelin": [6, 7], "format": [6, 7, 10, 25], "section": 6, "1": [6, 10, 80, 99, 118, 132, 144, 218], "singl": [6, 12, 14], "sentenc": 6, "summari": 6, "2": [6, 10, 80, 99, 118, 132, 218], "explan": [6, 13, 26], "3": [6, 10, 82, 99, 118, 169, 218], "exampl": [6, 20, 24, 28, 55, 67, 79, 82, 95, 99, 106, 119, 132, 136, 140, 171, 173, 186, 201, 202, 209, 212, 222, 223, 224, 227, 252, 272, 278], "4": [6, 10, 99, 218], "paramet": [6, 212, 221], "5": [6, 10, 99, 218], "see": [6, 55, 240, 252], "also": [6, 55, 240], "6": [6, 10, 99, 218], "refer": [6, 18, 26, 29, 36, 54, 55, 57, 67, 73, 80, 82, 86, 87, 88, 89, 91, 93, 95, 97, 134, 140, 143, 173, 184, 186, 187, 188, 189, 191, 193, 195, 197, 198, 209, 211, 212, 215, 221, 234, 235, 254, 257], "sampl": [6, 10], "class": [6, 15, 36, 37, 54, 57, 86, 87, 89, 91, 93, 95, 132, 178, 188, 191, 197, 202, 214, 215, 223, 247, 248], "ar": [6, 186, 192, 221], "mathemat": [6, 12, 135], "function": [6, 10, 12, 20, 24, 25, 37, 45, 54, 55, 61, 62, 63, 73, 74, 77, 78, 80, 85, 91, 95, 97, 99, 109, 133, 155, 158, 179, 180, 183, 188, 190, 192, 193, 198, 201, 202, 212, 214, 215, 218, 219, 223, 249, 253, 277, 278], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": [6, 180], "referenc": 6, "type": [7, 14, 37, 63, 179, 218, 221, 222], "narr": 7, "markdown": 7, "prefer": [7, 25], "math": [7, 37], "latex": [7, 97, 277], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 26, 199], "make": [9, 23, 25], "list": [10, 12, 14], "activ": 10, "silenc": 10, "warn": [10, 238], "version": 10, "12": 10, "new": [10, 251], "joint": [10, 112, 129, 222], "coordin": [10, 109, 122, 132, 188, 250, 251, 253, 255], "intermedi": 10, "frame": [10, 186], "attach": 10, "point": [10, 20, 59, 70, 109, 177, 181, 185, 250], "argument": [10, 12, 221], "11": [10, 99], "mathematica": [10, 202], "parser": [10, 118], "redund": 10, "static": 10, "method": [10, 16, 20, 27, 113, 122, 125, 126, 127, 130, 131, 132, 202, 219, 221, 226, 251, 274], "carmichael": 10, "check": [10, 179], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 135, 221], "travers": [10, 55], "have": [10, 23, 201], "been": 10, "move": [10, 212], "core": [10, 55, 88], "trace": 10, "compat": [10, 224], "submodul": [10, 67], "9": [10, 99], "expr_free_symbol": 10, "stat": [10, 222], "numsampl": 10, "n": [10, 55, 218, 223, 224], "poli": [10, 191, 192, 193, 200], "solver": [10, 200, 216, 217, 218, 220, 221, 279], "rawmatrix": 10, "non": 10, "expr": [10, 55], "object": [10, 15, 227], "matrix": [10, 33, 87, 88, 91, 92, 132, 218, 222, 274], "get_seg": 10, "attribut": [10, 38, 45], "mdft": 10, "physic": [10, 106, 109, 119, 129, 130, 131, 132, 133, 134, 135, 136, 175, 177, 183, 184, 185, 186, 257, 263], "matric": [10, 16, 86, 87, 88, 89, 90, 91, 93, 106, 108, 224, 257, 261, 274], "privat": 10, "sparsematrix": [10, 93], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 99], "theanocod": 10, "assumpt": [10, 15, 18, 20, 32, 55], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 55, 63, 85, 183, 186, 210, 253], "7": [10, 99, 218], "call": [10, 25], "stochasticprocess": 10, "distribut": [10, 195, 222], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 37, 52, 53, 72, 91, 141, 197, 220, 239, 246, 257, 265], "misc": [10, 32], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 277], "pretti": [10, 202, 277], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 23, 33, 67, 186, 210, 221, 277], "oper": [10, 12, 77, 91, 146, 155, 157, 158, 179, 183, 186, 212, 223, 229, 250, 252, 253, 267, 274], "longer": 10, "accept": 10, "arg": [10, 61, 273], "variou": [10, 201], "randtest": 10, "mix": 10, "polynomi": [10, 63, 77, 190, 192, 193, 194, 195, 197, 198, 199, 201, 220, 278], "express": [10, 12, 23, 24, 37, 67, 74, 77, 85, 88, 97, 111, 180, 192, 201, 224, 249, 251, 267, 273], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 42], "permut": [10, 46, 47], "string": [10, 18, 25, 267], "fallback": 10, "sympifi": [10, 55], "creat": [10, 12, 20, 24, 91], "an": [10, 23, 24, 67, 118, 173, 212, 221, 273], "indefinit": 10, "eq": [10, 23, 55], "tensor": [10, 51, 63, 167, 225, 228, 229], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 33, 172, 173, 174, 176], "quantiti": [10, 171, 173, 175, 251], "is_emptyset": 10, "productset": [10, 210], "iter": [10, 210, 240], "set_potential_energi": 10, "mechan": [10, 18, 100, 109, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 155, 222], "condit": [10, 80, 210], "conditionset": [10, 210], "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 189], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 55, 198], "lambda": [10, 55], "evalu": [10, 12, 20, 59, 77, 135, 273], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 274], "col": 10, "jordan_block": 10, "dimens": [10, 67, 170, 173], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 23, 25, 201, 224], "dot": [10, 180, 277], "product": [10, 58, 156, 167, 223, 252], "column": [10, 274], "vector": [10, 45, 55, 128, 177, 178, 179, 183, 184, 185, 186, 195, 247, 249, 250, 251, 253, 254, 255, 256], "geometri": [10, 57, 67, 189], "line3d": 10, "equat": [10, 22, 23, 24, 25, 130, 131, 132, 171, 190, 215, 218, 220, 221, 279], "need": [10, 173], "k": [10, 193], "modul": [10, 104, 138, 177, 184, 189, 190, 191, 192, 195, 197, 198, 215, 218, 219, 221, 234], "arrai": [10, 223, 224], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 118, 270], "pitfal": 12, "introduct": [12, 16, 29, 36, 37, 38, 45, 57, 67, 85, 118, 135, 173, 183, 185, 188, 189, 190, 197, 201, 255, 272], "equal": [12, 23, 55, 270], "sign": [12, 61, 270], "doubl": [12, 60], "variabl": [12, 25, 188, 222, 251], "assign": 12, "between": [12, 18, 175, 192], "symbol": [12, 18, 19, 20, 55, 74, 132, 136, 187, 192, 198, 201, 221, 270, 272], "python": [12, 37], "number": [12, 33, 41, 55, 58, 59, 80, 192, 197, 201, 257, 262], "v": [12, 19, 192], "float": [12, 55, 59], "ration": [12, 33, 55, 192, 193, 198, 201, 204, 210, 218, 278], "immut": [12, 89], "invers": [12, 20, 61, 80], "trig": 12, "sqrt": [12, 61], "special": [12, 17, 37, 63, 198, 210, 278], "dictionari": [12, 14], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 99, 190, 197, 220, 221, 279], "output": [14, 109, 221], "empti": 14, "Of": 14, "valu": [14, 19, 25], "boolean": [14, 19, 85], "classif": 15, "kind": [15, 55], "func": [15, 273], "finit": [16, 33, 35, 38, 189, 192, 195, 197, 201, 212, 222, 268], "differ": [16, 18, 35, 135, 192, 251, 268], "approxim": [16, 37], "deriv": [16, 55, 186, 223, 253, 268], "A": [16, 120, 121, 124, 125, 126, 127, 132, 272, 279], "direct": [16, 253], "topic": [17, 109, 177, 257, 264], "old": [18, 192], "system": [18, 24, 103, 123, 136, 170, 172, 173, 176, 218, 220, 250, 251, 253, 255], "appli": [18, 80, 212], "input": [18, 221], "predic": [18, 32, 33], "abov": 18, "definit": [18, 20, 33, 73], "implic": 18, "interpret": 18, "other": [18, 20, 27, 74, 183, 251], "is_": 18, "implement": [18, 80, 183, 202, 212, 234, 235, 250, 253], "limit": [18, 79, 118, 207, 209, 268], "combin": [18, 77], "fuzzi": 19, "three": [19, 67], "bool": 19, "custom": [20, 188, 202], "easi": 20, "case": [20, 221], "fulli": 20, "defin": 20, "automat": [20, 201], "eval": 20, "remind": 20, "kei": [20, 135, 273], "numer": [20, 24, 25, 59, 77, 82, 96, 109, 135], "evalf": [20, 55, 96, 267], "rewrit": [20, 37, 203, 278], "simplif": [20, 59, 85, 211, 214, 278], "doit": 20, "expand": [20, 55, 201, 203, 278], "differenti": [20, 57, 77, 109, 220, 221, 279], "as_real_imag": 20, "miscellan": [20, 61, 67, 243], "_eval_": 20, "complet": [20, 118], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 55], "fma": 20, "addit": [20, 77], "tip": [20, 267, 268, 270, 273, 274], "algebra": [23, 29, 33, 84, 91, 143, 186, 189, 192, 197, 201, 220, 279], "guidanc": [23, 24, 25], "your": 23, "Into": [23, 24], "That": [23, 24, 25], "zero": [23, 25, 33, 55, 103, 195, 201, 274], "put": 23, "form": [23, 25, 85, 92, 132, 191, 218, 224], "restrict": 23, "domain": [23, 190, 192, 193, 198, 201, 221], "solut": [23, 24, 25, 155, 221, 252], "explicitli": 23, "repres": [23, 25, 80, 163, 192, 197], "infinit": [23, 33, 221], "result": [23, 24, 201], "substitut": [23, 24, 109, 177, 267], "solveset": [23, 221], "cannot": 23, "necessarili": 23, "Be": [23, 24], "interrog": 23, "programmat": 23, "can": [23, 24, 25], "speed": [23, 25, 109, 132], "up": [23, 25, 277], "all": [23, 24], "With": [23, 24, 25], "No": 23, "close": [23, 25], "which": [23, 96, 202], "One": [24, 55], "altern": [24, 186], "consid": 24, "find": [24, 197, 198], "complex": [24, 33, 61, 192, 210], "root": [24, 61, 198, 214], "real": [24, 33, 192, 210], "ensur": [24, 25, 221], "found": 24, "given": 24, "interv": [24, 188, 210], "increas": 24, "precis": 24, "scipi": 24, "report": 24, "problem": [24, 99, 197, 252], "you": 25, "might": 25, "exact": 25, "includ": 25, "consist": 25, "ani": [25, 221], "denomin": 25, "do": [25, 221], "simplifi": [25, 37, 195, 213, 214, 278], "welcom": 26, "": [26, 55, 113, 122, 125, 126, 127, 130, 131, 132, 153, 164, 201, 211, 220, 221, 251, 256, 275], "tutori": [26, 215, 266, 271], "anaconda": 27, "mpmath": 27, "question": 27, "abc": 28, "caveat": [28, 97], "quaternion": 29, "ask": 30, "assum": 31, "queri": 32, "content": [32, 42, 62, 75, 81, 194, 206, 216, 225], "perform": 32, "improv": [32, 118], "common": [33, 86, 109, 177, 201, 202, 203, 214], "tautolog": 33, "commut": [33, 149, 189], "calculu": [33, 35, 186, 268], "symmetr": 33, "invert": 33, "orthogon": [33, 63, 198, 253], "unitari": 33, "posit": 33, "upper": 33, "triangular": 33, "lower": 33, "diagon": [33, 223, 274], "full": 33, "rank": 33, "squar": [33, 190, 214], "integ": [33, 55, 61, 192, 210], "element": [33, 132, 192, 197], "singular": [33, 35, 63, 99], "normal": [33, 92, 191, 201], "theori": [33, 36, 257, 262], "even": 33, "odd": 33, "prime": [33, 197], "composit": [33, 77], "order": [33, 55, 198, 209, 212, 218], "neg": 33, "nonzero": 33, "nonposit": 33, "nonneg": 33, "irrat": 33, "extend": [33, 212], "hermitian": 33, "imaginari": 33, "antihermitian": 33, "transcendent": 33, "refin": 34, "weight": 35, "categori": 36, "base": [36, 57, 189, 190, 201, 208, 221], "diagram": 36, "draw": 36, "codegen": [37, 235], "tool": [37, 94, 214], "abstract": [37, 100, 104, 106, 128, 138, 155, 184, 193], "syntax": 37, "tree": [37, 192, 202, 273], "ast": [37, 118], "predefin": 37, "node": 37, "c": [37, 202], "cfunction": 37, "specif": 37, "cnode": 37, "cxxnode": 37, "fortran": [37, 202], "fnode": 37, "algorithm": [37, 38, 153, 164, 195, 198, 204, 209, 212], "pyutil": 37, "cutil": 37, "futil": 37, "present": [38, 45], "group": [38, 40, 43, 45, 46, 173], "overview": [38, 45, 80], "facil": 38, "construct": [38, 45, 224], "free": [38, 190], "word": [38, 45], "coset": 38, "enumer": [38, 60], "todd": 38, "coxet": 38, "cosett": 38, "compress": 38, "standard": 38, "subgroup": 38, "index": [38, 45, 224, 227], "low": 38, "reidemeist": 38, "schreier": 38, "bibliographi": [38, 45], "grai": 39, "constructor": [40, 198, 274], "nilpot": 41, "abelian": 41, "cyclic": 41, "name": 43, "partit": [44, 60, 215, 240], "polycycl": 45, "polycyclicgroup": 45, "collector": 45, "comput": [45, 80, 96, 155, 201, 272], "minim": [45, 197], "uncollect": 45, "subword": 45, "collect": [45, 203, 214, 278], "expon": [45, 201], "depth": [45, 67], "lead": 45, "polyhedron": 48, "prufer": 49, "sequenc": [49, 77, 195, 198, 207, 208], "subset": [50, 58], "canonic": 51, "concret": 54, "hypergeometr": [54, 63, 74, 77, 204, 212, 214], "term": [54, 201, 203, 209], "cach": 55, "cacheit": 55, "basic": [55, 59, 91, 179, 190, 192, 198, 210, 250, 257, 258, 267, 274], "atom": 55, "singleton": [55, 208, 210], "unevaluatedexpr": 55, "atomicexpr": 55, "wild": 55, "dummi": 55, "var": 55, "algebraicnumb": 55, "numbersymbol": 55, "realnumb": 55, "igcd": 55, "ilcm": 55, "seterr": 55, "negativeon": 55, "half": 55, "nan": [55, 132], "infin": 55, "negativeinfin": 55, "complexinfin": 55, "exp1": 55, "imaginaryunit": 55, "pi": 55, "eulergamma": 55, "catalan": [55, 60], "goldenratio": 55, "tribonacciconst": 55, "mod_invers": 55, "power": [55, 199, 204, 210, 214, 272, 278], "pow": 55, "integer_nthroot": 55, "integer_log": 55, "mul": 55, "prod": 55, "mod": 55, "rel": 55, "ne": 55, "lt": 55, "le": 55, "gt": 55, "ge": 55, "greaterthan": 55, "lessthan": 55, "unequ": 55, "strictgreaterthan": 55, "strictlessthan": 55, "multidimension": 55, "wildfunct": 55, "diff": 55, "functionclass": 55, "sub": [55, 96], "poleerror": 55, "count_op": 55, "expand_mul": 55, "expand_log": [55, 278], "expand_func": [55, 278], "expand_trig": [55, 278], "expand_complex": 55, "expand_multinomi": 55, "expand_power_exp": [55, 278], "expand_power_bas": [55, 278], "nfloat": 55, "evalfmixin": 55, "precisionexhaust": 55, "contain": 55, "tuplekind": 55, "dict": 55, "exprtool": 55, "gcd_term": 55, "factor_term": 55, "numberkind": 55, "undefinedkind": 55, "booleankind": 55, "sort": 55, "default_sort_kei": 55, "random": [55, 222], "random_complex_numb": 55, "verify_numer": 55, "test_derivative_numer": 55, "_randrang": 55, "_randint": 55, "bottom_up": 55, "postorder_travers": 55, "preorder_travers": 55, "walk": [55, 273], "cryptographi": 56, "discret": [58, 222], "transform": [58, 80, 82, 97, 251], "fast": 58, "fourier": [58, 205], "theoret": 58, "walsh": 58, "hadamard": 58, "m\u00f6biu": 58, "convolut": 58, "cover": 58, "intersect": [58, 67, 210], "accuraci": 59, "error": [59, 63], "handl": [59, 221], "sum": 59, "combinatori": [60, 214], "bell": 60, "bernoulli": [60, 218], "binomi": 60, "euler": 60, "factori": [60, 190], "subfactori": 60, "factorial2": 60, "fallingfactori": 60, "fibonacci": 60, "tribonacci": 60, "harmon": [60, 63, 144, 169], "luca": 60, "genocchi": 60, "andr": 60, "multifactori": 60, "risingfactori": 60, "stirl": 60, "nc": 60, "np": 60, "nt": 60, "elementari": [61, 189, 208, 210], "re": 61, "im": 61, "ab": 61, "conjug": 61, "polar_lift": 61, "periodic_argu": 61, "principal_branch": 61, "trigonometr": [61, 63, 211, 214, 278], "sin": 61, "co": 61, "tan": 61, "cot": 61, "sec": 61, "csc": 61, "sinc": 61, "asin": 61, "aco": 61, "atan": 61, "acot": 61, "asec": 61, "acsc": 61, "atan2": 61, "hyperbol": 61, "hyperbolicfunct": 61, "sinh": 61, "cosh": 61, "tanh": 61, "coth": 61, "sech": 61, "csch": 61, "asinh": 61, "acosh": 61, "atanh": 61, "acoth": 61, "asech": 61, "acsch": 61, "ceil": 61, "floor": 61, "roundfunct": 61, "frac": 61, "exponenti": [61, 63, 218, 278], "exp": 61, "lambertw": 61, "log": 61, "exp_polar": 61, "piecewis": 61, "exprcondpair": 61, "identityfunct": 61, "min": 61, "max": 61, "cbrt": 61, "real_root": 61, "diracdelta": 63, "heavisid": 63, "gamma": [63, 106], "beta": 63, "fresnel": 63, "logarithm": [63, 278], "bessel": 63, "airi": 63, "b": 63, "spline": 63, "riemann": 63, "zeta": 63, "ellipt": 63, "mathieu": 63, "jacobi": 63, "gegenbau": 63, "chebyshev": 63, "legendr": 63, "hermit": 63, "laguerr": 63, "spheric": 63, "curv": 64, "ellips": 65, "entiti": [66, 67, 188], "avail": 67, "usag": [67, 118, 136, 192, 252], "median": 67, "pappu": 67, "hexagon": 67, "theorem": [67, 80, 256], "futur": [67, 109, 118, 177], "work": [67, 201], "truth": [67, 85], "beyond": 67, "visual": [67, 135], "line": 68, "plane": [69, 80], "polygon": [71, 82], "about": [73, 221, 251, 279], "holonom": [73, 74, 75, 77, 78, 123], "convert": [74, 77, 192, 218, 267], "represent": [74, 78, 173, 186, 192], "meijer": [74, 77, 80, 212], "g": [74, 77, 80, 212], "intern": [76, 80, 82, 192, 195, 197, 215, 218], "multipl": [77, 186, 197], "seri": [77, 188, 199, 204, 205, 206, 209, 268], "expans": [77, 209, 212, 214, 268], "linear": [77, 91, 109, 114, 132, 133, 173, 201, 215, 218], "holonomicfunct": 78, "differentialoper": 78, "differentialoperatoralgebra": 78, "current": 79, "polar": [80, 140], "branch": 80, "argand": 80, "tabl": [80, 85, 212], "lookup": 80, "mellin": 80, "converg": 80, "laplac": 80, "thi": [80, 221], "valid": 80, "exist": 80, "formula": [80, 212], "todo": 82, "bug": 82, "over": [82, 201, 210], "polytop": 82, "For": 82, "2d": 82, "polyhedra": 82, "session": 83, "lie": [84, 218], "equival": [85, 135, 215], "manipul": [85, 91, 111, 194, 195, 198, 199, 221, 273], "infer": 85, "matrixcommon": 86, "matrixkind": 86, "dens": [87, 192, 193, 195], "immutablematrix": [87, 89], "block": 88, "matrixdetermin": 91, "matrixreduct": 91, "matrixsubspac": 91, "matrixeigen": 91, "matrixcalculu": 91, "matrixbas": 91, "except": [91, 97, 195, 238], "numpi": 91, "spars": [93, 94, 192, 193, 195], "immutablesparsematrix": 93, "ntheori": 95, "ecm": 95, "q": 95, "ufuncifi": 96, "aesara": [96, 202], "so": 96, "mathrm": [97, 277], "runtim": 97, "beam": [98, 99, 100], "bend": 99, "continuum": 100, "truss": [100, 101], "control": [102, 103, 104, 105, 188], "pole": 103, "bode": 103, "impuls": 103, "respons": [103, 202], "step": [103, 221], "ramp": 103, "lti": 105, "high": 106, "energi": [106, 133], "hydrogen": 107, "wavefunct": 107, "potenti": [109, 132, 133, 177, 183, 253], "issu": [109, 118, 132, 177, 274], "advanc": [109, 177, 201, 273, 274], "featur": [109, 177, 269], "choic": 109, "acceler": [109, 177, 185, 209], "interfac": [109, 177, 188, 222], "bodi": [110, 133, 256], "msub": 111, "find_dynamicsymbol": 111, "framework": [112, 129], "pinjoint": 112, "prismaticjoint": 112, "cylindricaljoint": 112, "planarjoint": 112, "jointsmethod": [112, 129], "kane": [113, 122, 125, 126, 130, 132], "lagrang": [113, 122, 127, 131, 132], "kanemethod": 113, "lagrangesmethod": 113, "mass": [115, 133, 256], "inertia": [115, 133, 177], "particl": [115, 133, 159], "rigidbodi": 115, "inertia_of_point_mass": 115, "linear_momentum": 115, "angular_momentum": 115, "kinetic_energi": 115, "potential_energi": 115, "lagrangian": [115, 133], "mechanics_print": 116, "mprint": 116, "mpprint": 116, "mlatex": 116, "symbolicsystem": [117, 136], "autolev": [118, 135], "dynam": 118, "onlin": 118, "fix": 118, "switch": 118, "bicycl": 120, "four": 121, "bar": 121, "linkag": 121, "nonminim": 122, "pendulum": 122, "multi": 123, "degre": 123, "freedom": 123, "roll": [124, 125, 126, 127], "disc": [124, 125, 126, 127], "constraint": 126, "forc": 126, "classic": [128, 195], "structur": [130, 131, 173, 215], "background": 132, "directli": [132, 251], "new_method": 132, "kwarg": 132, "a_and_b": 132, "true": 132, "slow": 132, "ha": 132, "zoo": 132, "oo": 132, "further": [132, 270], "rigid": 133, "dyadic": [133, 177, 178, 247, 250, 251], "momentum": 133, "angular": [133, 185], "momenta": 133, "kinet": 133, "user": [135, 215, 218, 219], "rough": 135, "link": 135, "gaussian": [137, 192, 193, 201], "optic": [137, 138], "medium": 139, "wave": 142, "pauli": 143, "quantum": [144, 155, 169], "oscil": [144, 169], "d": [144, 169], "anticommut": 145, "cartesian": 146, "state": [146, 155, 158, 166], "clebsch": 147, "gordan": 147, "coeffici": [147, 195], "circuit": 148, "constant": [150, 173], "dagger": 151, "gate": 152, "grover": 153, "hilbert": 154, "space": [154, 173, 212], "analyt": 155, "inner": 156, "helper": [158, 202], "box": 159, "qappli": 160, "qft": 161, "qubit": 162, "shor": 164, "spin": 165, "second": 168, "quantiz": 168, "dimension": 171, "analysi": 171, "philosophi": 173, "behind": 173, "literatur": [173, 196, 201], "prefix": 174, "convers": 175, "referencefram": [177, 178, 186], "dynamicsymbol": [177, 180], "essenti": [178, 180, 247, 249], "coordinatesym": 178, "field": [179, 183, 192, 195, 197, 201, 253, 255], "curl": [179, 183, 249, 253], "diverg": [179, 183, 249, 253, 256], "gradient": [179, 183, 249, 253], "scalar_potenti": [179, 249], "scalar_potential_differ": [179, 249], "is_conserv": [179, 249], "is_solenoid": [179, 249], "outer": 180, "time_deriv": 180, "kinemat": [181, 185], "kinematic_equ": 181, "init_vprint": 182, "vprint": 182, "vpprint": 182, "vlatex": 182, "scalar": [183, 253, 255], "conserv": [183, 253], "solenoid": [183, 253], "veloc": 185, "basi": [186, 195, 197], "wigner": 187, "credit": 187, "copyright": 187, "author": 187, "plotgrid": 188, "pyglet": 188, "mode": 188, "specifi": 188, "color": 188, "geometr": 188, "ascii": [188, 277], "art": 188, "agca": 189, "ring": [189, 192, 193], "ideal": 189, "homomorph": [189, 197], "syzygi": 189, "extens": [189, 201], "concept": 190, "divis": [190, 215], "euclidean": 190, "gcd": [190, 195, 201], "lcm": 190, "factor": [190, 195, 201, 218, 278], "groebner": [190, 195], "introduc": [191, 192], "domainmatrix": 191, "ddm": 191, "sdm": 191, "dup": 192, "dmp": 192, "polyr": 192, "polynomialr": 192, "choos": 192, "unifi": 192, "gf": 193, "p": [193, 197], "zz": 193, "qq": 193, "mpq": 193, "zz_i": 193, "qq_i": 193, "rr": 193, "cc": 193, "x": 193, "ex": 193, "quotient": 193, "level": 195, "multivari": [195, 201], "univari": [195, 201, 215], "remaind": 195, "subresult": 195, "configur": 195, "modular": 195, "undocu": 195, "main": 197, "decomposit": [197, 198, 201], "adic": 197, "valuat": 197, "subfield": 197, "As": 197, "arithmet": 197, "extra": 198, "monomi": 198, "encod": 198, "formal": [198, 204], "appel": 198, "partial": [198, 201, 220, 221], "fraction": [198, 201, 214, 278], "dispers": 198, "rs_seri": 199, "solve_lin_si": 200, "eqs_to_matrix": 200, "sympy_eqs_to_r": 200, "_solve_lin_si": 200, "_solve_lin_sys_compon": 200, "wester": 201, "articl": 201, "simpl": 201, "support": 201, "back": 201, "cyclotom": 201, "reduc": 201, "gr\u00f6bner": 201, "mistak": 202, "prettyprint": 202, "rcodeprint": 202, "smt": 202, "lib": 202, "mapl": 202, "javascript": 202, "julia": 202, "octav": 202, "matlab": 202, "rust": 202, "gtk": 202, "lambdaprint": 202, "latexprint": 202, "mathmlprint": 202, "pythoncodeprint": 202, "pythonprint": 202, "srepr": [202, 277], "strprinter": 202, "preview": 202, "codeprint": 202, "preced": 202, "dotprint": 202, "subexpress": [203, 214], "detect": 203, "compound": [208, 210, 222], "recurs": [208, 273], "gruntz": 209, "more": [209, 251, 272], "intuit": 209, "residu": 209, "finiteset": 210, "union": 210, "complement": 210, "symmetricdiffer": 210, "disjointunion": 210, "emptyset": 210, "universalset": 210, "natur": 210, "naturals0": 210, "imageset": 210, "rang": 210, "complexregion": 210, "powerset": 210, "setkind": 210, "hongguang": 211, "fu": 211, "rule": [211, 252], "notat": 212, "increment": 212, "decrement": 212, "indic": 212, "reduct": 212, "around": 212, "loos": 212, "end": 212, "confluenc": 212, "separatevar": 214, "nthroot": 214, "kroneckersimp": 214, "besselsimp": 214, "hypersimp": 214, "hypersimilar": 214, "nsimplifi": 214, "posifi": 214, "logcombin": [214, 278], "radsimp": 214, "rad_ration": 214, "collect_sqrt": 214, "collect_const": 214, "ratsimp": 214, "ratsimpmodprim": 214, "trigsimp": [214, 278], "powsimp": [214, 278], "powdenest": [214, 278], "combsimp": [214, 278], "denest": 214, "sqrtdenest": 214, "elimin": 214, "cse": 214, "opt_cs": 214, "tree_cs": 214, "hyperexpand": [214, 278], "epath": 214, "diophantin": [215, 220, 221], "classify_diop": 215, "diop_solv": 215, "diop_linear": 215, "base_solution_linear": 215, "diop_quadrat": 215, "diop_dn": 215, "cornacchia": 215, "diop_bf_dn": 215, "transformation_to_dn": 215, "transformation_to_norm": 215, "find_dn": 215, "diop_ternary_quadrat": 215, "square_factor": 215, "descent": 215, "diop_general_pythagorean": 215, "diop_general_sum_of_squar": 215, "diop_general_sum_of_even_pow": 215, "power_represent": 215, "sum_of_three_squar": 215, "sum_of_four_squar": 215, "sum_of_pow": 215, "sum_of_squar": 215, "merge_solut": 215, "pqa": 215, "parametrize_ternary_quadrat": 215, "diop_ternary_quadratic_norm": 215, "ldescent": 215, "gaussian_reduc": 215, "holzer": 215, "prime_as_sum_of_two_squar": 215, "sqf_normal": 215, "reconstruct": 215, "diophantinesolutionset": 215, "diophantineequationtyp": 215, "binaryquadrat": 215, "inhomogeneousternaryquadrat": 215, "homogeneousternaryquadraticnorm": 215, "homogeneousternaryquadrat": 215, "inhomogeneousgeneralquadrat": 215, "homogeneousgeneralquadrat": 215, "generalsumofsquar": 215, "generalpythagorean": 215, "cubicthu": 215, "generalsumofevenpow": 215, "inequ": [217, 220, 221], "od": [218, 220, 221], "dsolv": 218, "dsolve_system": 218, "classify_od": 218, "checkodesol": 218, "homogeneous_ord": 218, "infinitesim": 218, "checkinfsol": 218, "constantsimp": 218, "hint": [218, 219], "allhint": 218, "odesimp": 218, "constant_renumb": 218, "sol_simpl": 218, "1st_exact": 218, "1st_homogeneous_coeff_best": 218, "1st_homogeneous_coeff_subs_dep_div_indep": 218, "1st_homogeneous_coeff_subs_indep_div_dep": 218, "1st_linear": 218, "1st_rational_riccati": 218, "2nd_linear_airi": 218, "2nd_linear_bessel": 218, "liouvil": 218, "riccati_special_minus2": 218, "nth_linear_constant_coeff_homogen": 218, "nth_linear_constant_coeff_undetermined_coeffici": 218, "nth_linear_constant_coeff_variation_of_paramet": 218, "nth_linear_euler_eq_homogen": 218, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 218, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 218, "nth_algebra": 218, "nth_order_reduc": 218, "separ": 218, "almost_linear": 218, "linear_coeffici": 218, "separable_reduc": 218, "lie_group": 218, "2nd_hypergeometr": 218, "1st_power_seri": 218, "2nd_power_series_ordinari": 218, "2nd_power_series_regular": 218, "heurist": 218, "abaco1_simpl": 218, "abaco1_product": 218, "bivari": 218, "chi": 218, "abaco2_similar": 218, "function_sum": 218, "abaco2_unique_unknown": 218, "abaco2_unique_gener": 218, "riccati": 218, "riccati_norm": 218, "riccati_inverse_norm": 218, "riccati_reduc": 218, "construct_c": 218, "construct_d": 218, "rational_laurent_seri": 218, "compute_m_ybar": 218, "solve_aux_eq": 218, "remove_redundant_sol": 218, "get_gen_sol_from_part_sol": 218, "solve_riccati": 218, "canon": 218, "linodesolv": 218, "inform": [218, 219], "jordan": 218, "nonlinear": 218, "pde": [219, 220, 221], "pde_separ": 219, "pde_separate_add": 219, "pde_separate_mul": 219, "pdsolv": 219, "classify_pd": 219, "checkpdesol": 219, "pde_1st_linear_constant_coeff_homogen": 219, "pde_1st_linear_constant_coeff": 219, "pde_1st_linear_variable_coeff": 219, "ordinari": [220, 221], "deutil": 220, "recurr": 220, "de": [220, 221], "wrong": 221, "why": [221, 272], "we": 221, "emploi": 221, "return": 221, "search": 221, "deal": 221, "where": 221, "known": 221, "plan": 221, "linear_eq_to_matrix": 221, "linsolv": 221, "nonlinsolv": 221, "transolv": 221, "continu": [222, 278], "stochast": 222, "process": 222, "dim": [223, 224], "contract": 223, "explicit": 224, "pytest": 231, "randomis": 232, "detail": [234, 235, 250], "routin": 235, "decor": 236, "enum": 237, "variat": 240, "memoiz": 242, "pkgdata": 244, "inspect": 245, "time": 246, "coordsys3d": [247, 251], "del": [247, 252, 253], "parametricregion": 247, "implicitregion": 247, "parametricintegr": 247, "orient": [248, 251], "axisorient": 248, "bodyorient": 248, "spaceorient": 248, "quaternionorient": 248, "matrix_to_vector": 249, "vector_integr": 249, "locat": 251, "orient_new": 251, "AND": 251, "quadrilater": 252, "third": 252, "curvilinear": 253, "applic": 256, "calcul": 256, "perimet": 256, "surfac": 256, "area": 256, "volum": 256, "flux": 256, "verifi": 256, "stoke": 256, "introductori": [266, 271], "quick": [267, 268, 270, 273, 274], "two": 270, "final": 270, "read": 270, "interest": 272, "understand": 273, "through": 273, "invari": 273, "prevent": 273, "shape": 274, "access": 274, "delet": 274, "insert": 274, "determin": 274, "rref": 274, "nullspac": 274, "columnspac": 274, "eigenvalu": 274, "eigenvector": 274, "next": 275, "preliminari": 276, "exercis": 276, "str": 277, "mathml": 277, "cancel": 278, "apart": 278, "gammasimp": 278}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [83, "module-sympy.interactive.printing"], [109, "printing"], [177, "printing"], [202, "printing"], [277, "printing"]], "Parsing": [[3, "parsing"], [97, "module-sympy.parsing"]], "Logic": [[3, "logic"], [85, "module-sympy.logic"], [257, "logic"], [260, "logic"]], "Plotting": [[3, "plotting"], [188, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [267, "lambdify"]], "Code Generation": [[3, "code-generation"], [257, "code-generation"], [259, "code-generation"]], "Autowrap": [[3, "autowrap"], [37, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [26, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [29, "introduction"], [36, "introduction"], [37, "introduction"], [38, "introduction"], [45, "introduction"], [57, "introduction"], [67, "introduction"], [85, "introduction"], [118, "introduction"], [135, "introduction"], [173, "introduction"], [183, "introduction"], [188, "introduction"], [189, "introduction"], [190, "introduction"], [197, "introduction"], [201, "introduction"], [255, "introduction"], [272, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [270, "symbols"]], "Functions": [[12, "functions"], [62, "functions"], [223, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [26, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [55, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [273, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [32, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [33, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [79, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [27, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [73, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [28, "examples"], [55, "examples"], [55, "id57"], [79, "examples"], [82, "examples"], [82, "id37"], [95, "examples"], [95, "id61"], [99, "examples"], [106, "examples"], [140, "examples"], [171, "examples"], [186, "examples"], [186, "id1"], [201, "examples"], [209, "examples"], [209, "id3"], [222, "examples"], [223, "examples"], [224, "examples"], [227, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [26, "how-to-guides"]], "Solve Equations": [[22, "solve-equations"]], "Solve an Equation Algebraically": [[23, "solve-an-equation-algebraically"], [23, "id1"]], "Guidance": [[23, "guidance"], [24, "guidance"]], "Make Your Equation Into an Expression That Equals Zero": [[23, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[23, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[23, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[23, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Use the Solution Result": [[23, "use-the-solution-result"], [24, "use-the-solution-result"]], "Substitute Solutions From solve() Into an Expression": [[23, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[23, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[23, "options-that-can-speed-up-solve"], [25, "options-that-can-speed-up-solve"]], "Not All Equations Can Be Solved": [[23, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[23, "equations-with-no-closed-form-solution"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[23, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve One or a System of Equations Numerically": [[24, "solve-one-or-a-system-of-equations-numerically"]], "Alternatives to Consider": [[24, "alternatives-to-consider"]], "Example of Numerically Solving an Equation": [[24, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[24, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[24, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[24, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[24, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[24, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[24, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[24, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[24, "equations-with-no-solution"]], "Report a Problem": [[24, "report-a-problem"]], "Solving Guidance": [[25, "solving-guidance"]], "Numeric Solutions": [[25, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[25, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[25, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[25, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[25, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[25, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[25, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[25, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[25, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[26, "welcome-to-sympy-s-documentation"]], "Installation": [[26, "installation"], [27, "installation"], [276, "installation"]], "Tutorials": [[26, "tutorials"], [266, "tutorials"]], "API Reference": [[26, "api-reference"], [234, "module-sympy.utilities.autowrap"], [235, "module-sympy.utilities.codegen"], [257, "api-reference"]], "Anaconda": [[27, "anaconda"]], "Git": [[27, "git"]], "Run SymPy": [[27, "run-sympy"]], "mpmath": [[27, "mpmath"]], "Questions": [[27, "questions"]], "abc": [[28, "module-sympy.abc"]], "Caveats": [[28, "caveats"]], "Algebras": [[29, "algebras"]], "Quaternion Reference": [[29, "module-sympy.algebras"]], "Ask": [[30, "module-sympy.assumptions.ask"]], "Assume": [[31, "module-sympy.assumptions.assume"]], "Predicate": [[32, "predicate"]], "Querying": [[32, "querying"]], "Contents": [[32, "contents"], [42, "contents"], [62, "contents"], [75, "contents"], [81, "contents"], [194, "contents"], [206, "contents"], [216, "contents"], [225, "contents"]], "Performance improvements": [[32, "performance-improvements"]], "Misc": [[32, "misc"]], "Common": [[33, "common"]], "Tautological": [[33, "tautological"]], "Commutative": [[33, "commutative"]], "Calculus": [[33, "calculus"], [35, "module-sympy.calculus"], [268, "calculus"]], "Finite": [[33, "finite"]], "Infinite": [[33, "infinite"]], "Matrix": [[33, "matrix"]], "Symmetric": [[33, "symmetric"]], "Invertible": [[33, "invertible"]], "Orthogonal": [[33, "orthogonal"]], "Unitary": [[33, "unitary"]], "Positive Definite": [[33, "positive-definite"]], "Upper triangular": [[33, "upper-triangular"]], "Lower triangular": [[33, "lower-triangular"]], "Diagonal": [[33, "diagonal"]], "Full rank": [[33, "full-rank"]], "Square": [[33, "square"]], "Integer elements": [[33, "integer-elements"]], "Real elements": [[33, "real-elements"]], "Complex elements": [[33, "complex-elements"]], "Singular": [[33, "singular"]], "Normal": [[33, "normal"]], "Triangular": [[33, "triangular"]], "Unit triangular": [[33, "unit-triangular"]], "Number Theory": [[33, "number-theory"], [257, "number-theory"], [262, "number-theory"]], "Even": [[33, "even"]], "Odd": [[33, "odd"]], "Prime": [[33, "prime"]], "Composite": [[33, "composite"]], "Order": [[33, "order"]], "Positive": [[33, "positive"]], "Negative": [[33, "negative"]], "Zero": [[33, "zero"], [55, "zero"]], "Nonzero": [[33, "nonzero"]], "Nonpositive": [[33, "nonpositive"]], "Nonnegative": [[33, "nonnegative"]], "Sets": [[33, "sets"], [210, "sets"]], "Integer": [[33, "integer"], [55, "integer"]], "Rational": [[33, "rational"], [55, "rational"]], "Irrational": [[33, "irrational"]], "Real": [[33, "real"]], "Extended real": [[33, "extended-real"]], "Hermitian": [[33, "hermitian"]], "Complex": [[33, "complex"]], "Imaginary": [[33, "imaginary"]], "Antihermitian": [[33, "antihermitian"]], "Algebraic": [[33, "algebraic"]], "Transcendental": [[33, "transcendental"]], "Refine": [[34, "module-sympy.assumptions.refine"]], "Singularities": [[35, "singularities"]], "Finite difference weights": [[35, "finite-difference-weights"]], "Category Theory": [[36, "category-theory"]], "Base Class Reference": [[36, "module-sympy.categories"], [57, "base-class-reference"]], "Diagram Drawing": [[36, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[37, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[37, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[37, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[37, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[37, "module-sympy.codegen.ast"]], "AST Type Tree": [[37, "ast-type-tree"]], "Predefined types": [[37, "predefined-types"]], "Using the nodes": [[37, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[37, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[37, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[37, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[37, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[37, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[37, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[37, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[37, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[38, "finitely-presented-groups"]], "Overview of Facilities": [[38, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[38, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[38, "free-groups-and-words"]], "Construction of a Free Group": [[38, "construction-of-a-free-group"]], "Construction of words": [[38, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[38, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[38, "cosettable"]], "Attributes of CosetTable": [[38, "attributes-of-cosettable"]], "Compression and Standardization": [[38, "compression-and-standardization"]], "Subgroups of Finite Index": [[38, "subgroups-of-finite-index"]], "Low Index Subgroups": [[38, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[38, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[38, "reidemeister-schreier-algorithm"]], "Bibliography": [[38, "bibliography"], [45, "bibliography"]], "Gray Code": [[39, "module-sympy.combinatorics.graycode"]], "Group constructors": [[40, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[41, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[42, "combinatorics"]], "Named Groups": [[43, "module-sympy.combinatorics.named_groups"]], "Partitions": [[44, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[45, "polycyclic-groups"]], "Overview of functionalities": [[45, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[45, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[45, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[45, "the-construction-of-collector"]], "Attributes of Collector": [[45, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[45, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[45, "computation-of-subword-index"]], "Computation of Collected Word": [[45, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[45, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[45, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[45, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[45, "computation-of-leading-exponent"]], "Permutation Groups": [[46, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[47, "module-sympy.combinatorics.permutations"]], "Generators": [[47, "module-sympy.combinatorics.generators"]], "Polyhedron": [[48, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[49, "module-sympy.combinatorics.prufer"]], "Subsets": [[50, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[51, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[52, "module-sympy.combinatorics.testutil"]], "Utilities": [[53, "module-sympy.combinatorics.util"], [141, "module-sympy.physics.optics.utils"], [197, "utilities"], [239, "module-sympy.utilities"], [257, "utilities"], [265, "utilities"]], "Concrete": [[54, "concrete"]], "Hypergeometric terms": [[54, "hypergeometric-terms"]], "Concrete Class Reference": [[54, "concrete-class-reference"]], "Concrete Functions Reference": [[54, "concrete-functions-reference"]], "Core": [[55, "core"]], "sympify": [[55, "module-sympy.core.sympify"], [55, "id1"]], "assumptions": [[55, "module-sympy.core.assumptions"]], "See Also": [[55, "see-also"], [240, "see-also"]], "Notes": [[55, "notes"], [209, "notes"], [211, "notes"]], "Developers Notes": [[55, "developers-notes"]], "References": [[55, "references"], [67, "references"], [73, "references"], [82, "references"], [140, "references"], [143, "references"], [187, "references"], [211, "references"], [212, "references"], [215, "references"], [221, "references"]], "cache": [[55, "module-sympy.core.cache"]], "cacheit": [[55, "cacheit"]], "basic": [[55, "module-sympy.core.basic"]], "Basic": [[55, "id19"]], "Atom": [[55, "atom"]], "core": [[55, "id20"]], "singleton": [[55, "module-sympy.core.singleton"]], "S": [[55, "s"]], "expr": [[55, "module-sympy.core.expr"]], "Expr": [[55, "id21"]], "UnevaluatedExpr": [[55, "unevaluatedexpr"]], "AtomicExpr": [[55, "atomicexpr"]], "symbol": [[55, "module-sympy.core.symbol"]], "Symbol": [[55, "id26"]], "Wild": [[55, "wild"]], "Dummy": [[55, "dummy"]], "symbols": [[55, "symbols"]], "var": [[55, "var"]], "numbers": [[55, "module-sympy.core.numbers"]], "Number": [[55, "number"]], "Float": [[55, "float"]], "AlgebraicNumber": [[55, "algebraicnumber"]], "NumberSymbol": [[55, "numbersymbol"]], "RealNumber": [[55, "realnumber"]], "igcd": [[55, "igcd"]], "ilcm": [[55, "ilcm"]], "seterr": [[55, "seterr"]], "One": [[55, "one"]], "NegativeOne": [[55, "negativeone"]], "Half": [[55, "half"]], "NaN": [[55, "nan"]], "Infinity": [[55, "infinity"]], "NegativeInfinity": [[55, "negativeinfinity"]], "ComplexInfinity": [[55, "complexinfinity"]], "Exp1": [[55, "exp1"]], "ImaginaryUnit": [[55, "imaginaryunit"]], "Pi": [[55, "pi"]], "EulerGamma": [[55, "eulergamma"]], "Catalan": [[55, "catalan"]], "GoldenRatio": [[55, "goldenratio"]], "TribonacciConstant": [[55, "tribonacciconstant"]], "mod_inverse": [[55, "mod-inverse"]], "power": [[55, "module-sympy.core.power"]], "Pow": [[55, "pow"]], "integer_nthroot": [[55, "integer-nthroot"]], "integer_log": [[55, "integer-log"]], "mul": [[55, "module-sympy.core.mul"]], "Mul": [[55, "id47"]], "prod": [[55, "prod"]], "add": [[55, "module-sympy.core.add"]], "Add": [[55, "id48"]], "mod": [[55, "module-sympy.core.mod"]], "Mod": [[55, "id49"]], "relational": [[55, "module-sympy.core.relational"]], "Rel": [[55, "rel"]], "Eq": [[55, "eq"]], "Ne": [[55, "ne"]], "Lt": [[55, "lt"]], "Le": [[55, "le"]], "Gt": [[55, "gt"]], "Ge": [[55, "ge"]], "Equality": [[55, "equality"]], "GreaterThan": [[55, "greaterthan"]], "LessThan": [[55, "lessthan"]], "Unequality": [[55, "unequality"]], "StrictGreaterThan": [[55, "strictgreaterthan"]], "StrictLessThan": [[55, "strictlessthan"]], "multidimensional": [[55, "module-sympy.core.multidimensional"]], "vectorize": [[55, "vectorize"]], "function": [[55, "module-sympy.core.function"]], "Lambda": [[55, "lambda"]], "WildFunction": [[55, "wildfunction"]], "Derivative": [[55, "derivative"]], "diff": [[55, "diff"]], "FunctionClass": [[55, "functionclass"]], "Function": [[55, "id55"]], "Subs": [[55, "subs"]], "expand": [[55, "expand"], [278, "expand"]], "PoleError": [[55, "poleerror"]], "count_ops": [[55, "count-ops"]], "expand_mul": [[55, "expand-mul"]], "expand_log": [[55, "expand-log"], [278, "expand-log"]], "expand_func": [[55, "expand-func"], [278, "expand-func"]], "expand_trig": [[55, "expand-trig"], [278, "expand-trig"]], "expand_complex": [[55, "expand-complex"]], "expand_multinomial": [[55, "expand-multinomial"]], "expand_power_exp": [[55, "expand-power-exp"]], "expand_power_base": [[55, "expand-power-base"]], "nfloat": [[55, "nfloat"]], "evalf": [[55, "module-sympy.core.evalf"], [267, "evalf"]], "EvalfMixin": [[55, "evalfmixin"]], "PrecisionExhausted": [[55, "precisionexhausted"]], "N": [[55, "n"]], "containers": [[55, "module-sympy.core.containers"]], "Tuple": [[55, "tuple"]], "TupleKind": [[55, "tuplekind"]], "Dict": [[55, "dict"]], "exprtools": [[55, "module-sympy.core.exprtools"]], "gcd_terms": [[55, "gcd-terms"]], "factor_terms": [[55, "factor-terms"]], "Kind": [[55, "id56"]], "NumberKind": [[55, "numberkind"]], "UndefinedKind": [[55, "undefinedkind"]], "BooleanKind": [[55, "booleankind"]], "Sorting": [[55, "sorting"]], "default_sort_key": [[55, "default-sort-key"]], "ordered": [[55, "ordered"]], "Random": [[55, "module-sympy.core.random"]], "random_complex_number": [[55, "random-complex-number"]], "verify_numerically": [[55, "verify-numerically"]], "test_derivative_numerically": [[55, "test-derivative-numerically"]], "_randrange": [[55, "randrange"]], "_randint": [[55, "randint"]], "Traversal": [[55, "module-sympy.core.traversal"]], "bottom_up": [[55, "bottom-up"]], "postorder_traversal": [[55, "postorder-traversal"]], "preorder_traversal": [[55, "preorder-traversal"]], "use": [[55, "use"]], "walk": [[55, "walk"]], "Cryptography": [[56, "cryptography"]], "Differential Geometry": [[57, "module-sympy.diffgeom"]], "Discrete": [[58, "discrete"]], "Transforms": [[58, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[58, "fast-fourier-transform"]], "Number Theoretic Transform": [[58, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[58, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[58, "mobius-transform"]], "Convolutions": [[58, "module-sympy.discrete.convolutions"]], "Convolution": [[58, "convolution"]], "Convolution using Fast Fourier Transform": [[58, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[58, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[58, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[58, "subset-convolution"]], "Covering Product": [[58, "covering-product"]], "Intersecting Product": [[58, "intersecting-product"]], "Numerical Evaluation": [[59, "numerical-evaluation"]], "Basics": [[59, "basics"], [257, "basics"], [258, "basics"]], "Floating-point numbers": [[59, "floating-point-numbers"]], "Accuracy and error handling": [[59, "accuracy-and-error-handling"]], "Sums and integrals": [[59, "sums-and-integrals"]], "Numerical simplification": [[59, "numerical-simplification"]], "Combinatorial": [[60, "combinatorial"]], "bell": [[60, "bell"]], "bernoulli": [[60, "bernoulli"]], "binomial": [[60, "binomial"]], "catalan": [[60, "catalan"]], "euler": [[60, "euler"]], "factorial": [[60, "factorial"]], "subfactorial": [[60, "subfactorial"]], "factorial2 / double factorial": [[60, "factorial2-double-factorial"]], "FallingFactorial": [[60, "fallingfactorial"]], "fibonacci": [[60, "fibonacci"]], "tribonacci": [[60, "tribonacci"]], "harmonic": [[60, "harmonic"]], "lucas": [[60, "lucas"]], "genocchi": [[60, "genocchi"]], "andre": [[60, "andre"]], "partition": [[60, "partition"], [215, "partition"]], "MultiFactorial": [[60, "multifactorial"]], "RisingFactorial": [[60, "risingfactorial"]], "stirling": [[60, "stirling"]], "Enumeration": [[60, "enumeration"]], "nC": [[60, "nc"]], "nP": [[60, "np"]], "nT": [[60, "nt"]], "Elementary": [[61, "elementary"]], "sympy.functions.elementary.complexes": [[61, "sympy-functions-elementary-complexes"]], "re": [[61, "re"]], "im": [[61, "im"]], "sign": [[61, "sign"]], "Abs": [[61, "abs"]], "arg": [[61, "arg"]], "conjugate": [[61, "conjugate"]], "polar_lift": [[61, "polar-lift"]], "periodic_argument": [[61, "periodic-argument"]], "principal_branch": [[61, "principal-branch"]], "sympy.functions.elementary.trigonometric": [[61, "sympy-functions-elementary-trigonometric"]], "Trigonometric Functions": [[61, "trigonometric-functions"]], "sin": [[61, "sin"]], "cos": [[61, "cos"]], "tan": [[61, "tan"]], "cot": [[61, "cot"]], "sec": [[61, "sec"]], "csc": [[61, "csc"]], "sinc": [[61, "sinc"]], "Trigonometric Inverses": [[61, "trigonometric-inverses"]], "asin": [[61, "asin"]], "acos": [[61, "acos"]], "atan": [[61, "atan"]], "acot": [[61, "acot"]], "asec": [[61, "asec"]], "acsc": [[61, "acsc"]], "atan2": [[61, "atan2"]], "sympy.functions.elementary.hyperbolic": [[61, "sympy-functions-elementary-hyperbolic"]], "Hyperbolic Functions": [[61, "hyperbolic-functions"]], "HyperbolicFunction": [[61, "hyperbolicfunction"]], "sinh": [[61, "sinh"]], "cosh": [[61, "cosh"]], "tanh": [[61, "tanh"]], "coth": [[61, "coth"]], "sech": [[61, "sech"]], "csch": [[61, "csch"]], "Hyperbolic Inverses": [[61, "hyperbolic-inverses"]], "asinh": [[61, "asinh"]], "acosh": [[61, "acosh"]], "atanh": [[61, "atanh"]], "acoth": [[61, "acoth"]], "asech": [[61, "asech"]], "acsch": [[61, "acsch"]], "sympy.functions.elementary.integers": [[61, "sympy-functions-elementary-integers"]], "ceiling": [[61, "ceiling"]], "floor": [[61, "floor"]], "RoundFunction": [[61, "roundfunction"]], "frac": [[61, "frac"]], "sympy.functions.elementary.exponential": [[61, "sympy-functions-elementary-exponential"]], "exp": [[61, "exp"]], "LambertW": [[61, "lambertw"]], "log": [[61, "log"]], "exp_polar": [[61, "exp-polar"]], "sympy.functions.elementary.piecewise": [[61, "sympy-functions-elementary-piecewise"]], "ExprCondPair": [[61, "exprcondpair"]], "Piecewise": [[61, "piecewise"]], "sympy.functions.elementary.miscellaneous": [[61, "sympy-functions-elementary-miscellaneous"]], "IdentityFunction": [[61, "identityfunction"]], "Min": [[61, "min"]], "Max": [[61, "max"]], "root": [[61, "root"]], "sqrt": [[61, "sqrt"]], "cbrt": [[61, "cbrt"]], "real_root": [[61, "real-root"]], "Special": [[63, "special"]], "DiracDelta": [[63, "diracdelta"]], "Heaviside": [[63, "heaviside"]], "Singularity Function": [[63, "module-sympy.functions.special.singularity_functions"]], "Gamma, Beta and related Functions": [[63, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[63, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[63, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[63, "module-sympy.functions.special.bessel"]], "Airy Functions": [[63, "airy-functions"]], "B-Splines": [[63, "b-splines"]], "Riemann Zeta and Related Functions": [[63, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[63, "hypergeometric-functions"]], "Elliptic integrals": [[63, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[63, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[63, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[63, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[63, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[63, "chebyshev-polynomials"]], "Legendre Polynomials": [[63, "legendre-polynomials"]], "Hermite Polynomials": [[63, "hermite-polynomials"]], "Laguerre Polynomials": [[63, "laguerre-polynomials"]], "Spherical Harmonics": [[63, "spherical-harmonics"]], "Tensor Functions": [[63, "tensor-functions"]], "Curves": [[64, "module-sympy.geometry.curve"]], "Ellipses": [[65, "module-sympy.geometry.ellipse"]], "Entities": [[66, "module-sympy.geometry.entity"]], "Geometry": [[67, "geometry"]], "Available Entities": [[67, "available-entities"]], "Example Usage": [[67, "example-usage"]], "Intersection of medians": [[67, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[67, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[67, "miscellaneous-notes"]], "Future Work": [[67, "future-work"]], "Truth Setting Expressions": [[67, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[67, "three-dimensions-and-beyond"]], "Geometry Visualization": [[67, "geometry-visualization"]], "Submodules": [[67, "submodules"]], "Lines": [[68, "module-sympy.geometry.line"]], "Plane": [[69, "module-sympy.geometry.plane"]], "Points": [[70, "module-sympy.geometry.point"], [250, "points"]], "Polygons": [[71, "module-sympy.geometry.polygon"]], "Utils": [[72, "module-sympy.geometry.util"]], "About Holonomic Functions": [[73, "about-holonomic-functions"]], "Converting other representations to holonomic": [[74, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[74, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[74, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[74, "converting-symbolic-expressions"]], "Holonomic": [[75, "module-sympy.holonomic"]], "Internal API": [[76, "internal-api"]], "Operations on holonomic functions": [[77, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[77, "addition-and-multiplication"]], "Integration and Differentiation": [[77, "integration-and-differentiation"]], "Composition with polynomials": [[77, "composition-with-polynomials"]], "Convert to holonomic sequence": [[77, "convert-to-holonomic-sequence"]], "Series expansion": [[77, "series-expansion"]], "Numerical evaluation": [[77, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[77, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[77, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[77, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[78, "representation-of-holonomic-functions-in-sympy"]], "HolonomicFunction": [[78, "holonomicfunction"]], "DifferentialOperator": [[78, "differentialoperator"]], "DifferentialOperators": [[78, "differentialoperators"]], "DifferentialOperatorAlgebra": [[78, "differentialoperatoralgebra"]], "Uses and Current limitations": [[79, "uses-and-current-limitations"]], "Integration": [[79, "integration"]], "Computing Integrals using Meijer G-Functions": [[80, "computing-integrals-using-meijer-g-functions"]], "Overview": [[80, "overview"]], "Polar Numbers and Branched Functions": [[80, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[80, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[80, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[80, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[80, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[80, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[80, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[80, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[80, "how-to-compute-the-integral"]], "When this computation is valid": [[80, "when-this-computation-is-valid"]], "When the integral exists": [[80, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[80, "implemented-g-function-formulae"]], "Internal API Reference": [[80, "module-sympy.integrals.meijerint"]], "Integrals": [[81, "integrals"], [82, "module-sympy.integrals"], [268, "integrals"]], "Integral Transforms": [[82, "module-sympy.integrals.transforms"]], "Internals": [[82, "internals"], [197, "internals"]], "API reference": [[82, "api-reference"], [82, "id38"]], "TODO and Bugs": [[82, "todo-and-bugs"]], "Numeric Integrals": [[82, "numeric-integrals"]], "Integration over Polytopes": [[82, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[82, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[82, "for-3-polytopes-polyhedra"]], "Interactive": [[83, "module-sympy.interactive"]], "Session": [[83, "module-sympy.interactive.session"]], "Lie Algebra": [[84, "module-sympy.liealgebras"]], "Forming logical expressions": [[85, "forming-logical-expressions"]], "Boolean functions": [[85, "boolean-functions"]], "Simplification and equivalence-testing": [[85, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[85, "manipulating-expressions"]], "Truth tables and related functions": [[85, "truth-tables-and-related-functions"]], "Inference": [[85, "module-sympy.logic.inference"]], "Common Matrices": [[86, "module-sympy.matrices.common"]], "MatrixCommon Class Reference": [[86, "matrixcommon-class-reference"]], "MatrixKind": [[86, "matrixkind"]], "Dense Matrices": [[87, "dense-matrices"]], "Matrix Class Reference": [[87, "matrix-class-reference"]], "ImmutableMatrix Class Reference": [[87, "immutablematrix-class-reference"], [89, "module-sympy.matrices.immutable"]], "Matrix Expressions": [[88, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[88, "matrix-expressions-core-reference"]], "Block Matrices": [[88, "block-matrices"]], "Immutable Matrices": [[89, "immutable-matrices"]], "Matrices": [[90, "module-sympy.matrices"], [108, "module-sympy.physics.matrices"], [257, "matrices"], [261, "matrices"], [274, "matrices"]], "Matrices (linear algebra)": [[91, "module-sympy.matrices.matrices"]], "Creating Matrices": [[91, "creating-matrices"]], "Basic Manipulation": [[91, "basic-manipulation"]], "Operations on entries": [[91, "operations-on-entries"]], "Linear algebra": [[91, "linear-algebra"]], "MatrixDeterminant Class Reference": [[91, "matrixdeterminant-class-reference"]], "MatrixReductions Class Reference": [[91, "matrixreductions-class-reference"]], "MatrixSubspaces Class Reference": [[91, "matrixsubspaces-class-reference"]], "MatrixEigen Class Reference": [[91, "matrixeigen-class-reference"]], "MatrixCalculus Class Reference": [[91, "matrixcalculus-class-reference"]], "MatrixBase Class Reference": [[91, "matrixbase-class-reference"]], "Matrix Exceptions Reference": [[91, "matrix-exceptions-reference"]], "Matrix Functions Reference": [[91, "matrix-functions-reference"]], "Numpy Utility Functions Reference": [[91, "numpy-utility-functions-reference"]], "Matrix Normal Forms": [[92, "matrix-normal-forms"]], "Sparse Matrices": [[93, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[93, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[93, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[94, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[95, "ntheory-class-reference"]], "Ntheory Functions Reference": [[95, "ntheory-functions-reference"]], "ECM function": [[95, "ecm-function"]], "QS function": [[95, "qs-function"]], "Numeric Computation": [[96, "numeric-computation"]], "Subs/evalf": [[96, "subs-evalf"]], "Lambdify": [[96, "lambdify"], [241, "module-sympy.utilities.lambdify"]], "uFuncify": [[96, "ufuncify"]], "Aesara": [[96, "aesara"]], "So Which Should I Use?": [[96, "so-which-should-i-use"]], "Parsing Functions Reference": [[97, "parsing-functions-reference"]], "Parsing Transformations Reference": [[97, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[97, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[97, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[97, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[97, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[97, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[97, "runtime-installation"]], "Beam (Docstrings)": [[98, "beam-docstrings"]], "Beam": [[98, "module-sympy.physics.continuum_mechanics.beam"], [99, "beam"], [100, "beam"]], "Solving Beam Bending Problems using Singularity Functions": [[99, "solving-beam-bending-problems-using-singularity-functions"]], "Example 1": [[99, "example-1"]], "Example 2": [[99, "example-2"]], "Example 3": [[99, "example-3"]], "Example 4": [[99, "example-4"]], "Example 5": [[99, "example-5"]], "Example 6": [[99, "example-6"]], "Example 7": [[99, "example-7"]], "Example 8": [[99, "example-8"]], "Example 9": [[99, "example-9"]], "Example 10": [[99, "example-10"]], "Example 11": [[99, "example-11"]], "Continuum Mechanics": [[100, "continuum-mechanics"]], "Abstract": [[100, null], [104, null], [106, null], [128, null], [138, null], [155, null], [184, null]], "Truss": [[100, "truss"], [101, "module-sympy.physics.continuum_mechanics.truss"]], "Truss (Docstrings)": [[101, "truss-docstrings"]], "Control": [[102, "control"]], "Control System Plots": [[103, "control-system-plots"]], "Pole-Zero Plot": [[103, "pole-zero-plot"]], "Bode Plot": [[103, "bode-plot"]], "Impulse-Response Plot": [[103, "impulse-response-plot"]], "Step-Response Plot": [[103, "step-response-plot"]], "Ramp-Response Plot": [[103, "ramp-response-plot"]], "Control Module": [[104, "module-sympy.physics.control"]], "Control API": [[105, "control-api"]], "lti": [[105, "module-sympy.physics.control.lti"]], "High energy physics": [[106, "high-energy-physics"]], "Gamma matrices": [[106, "gamma-matrices"]], "Hydrogen Wavefunctions": [[107, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[109, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[109, "common-issues"], [177, "common-issues"]], "Numerically Integrating Code": [[109, "numerically-integrating-code"]], "Differentiating": [[109, "differentiating"]], "Choice of Coordinates and Speeds": [[109, "choice-of-coordinates-and-speeds"]], "Substitution": [[109, "substitution"], [177, "substitution"], [267, "substitution"]], "Linearization": [[109, "linearization"]], "Acceleration of Points": [[109, "acceleration-of-points"], [177, "acceleration-of-points"]], "Advanced Interfaces": [[109, "advanced-interfaces"], [177, "advanced-interfaces"]], "Advanced Functionality": [[109, "advanced-functionality"]], "Future Features": [[109, "future-features"]], "Code Output": [[109, "code-output"]], "Body (Docstrings)": [[110, "body-docstrings"]], "Body": [[110, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[111, "expression-manipulation-docstrings"]], "msubs": [[111, "msubs"]], "find_dynamicsymbols": [[111, "find-dynamicsymbols"]], "Joints Framework (Docstrings)": [[112, "joints-framework-docstrings"]], "Joint (Docstrings)": [[112, "module-sympy.physics.mechanics.joint"]], "Joint": [[112, "joint"]], "PinJoint": [[112, "pinjoint"]], "PrismaticJoint": [[112, "prismaticjoint"]], "CylindricalJoint": [[112, "cylindricaljoint"]], "PlanarJoint": [[112, "planarjoint"]], "JointsMethod (Docstring)": [[112, "module-sympy.physics.mechanics.jointsmethod"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[113, "kane-s-method-lagrange-s-method-docstrings"]], "KaneMethod": [[113, "module-sympy.physics.mechanics.kane"]], "LagrangesMethod": [[113, "module-sympy.physics.mechanics.lagrange"]], "Linearization (Docstrings)": [[114, "linearization-docstrings"]], "Linearizer": [[114, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[115, "masses-inertias-particles-rigidbodys-docstrings"]], "Particle": [[115, "module-sympy.physics.mechanics.particle"], [133, "particle"]], "RigidBody": [[115, "module-sympy.physics.mechanics.rigidbody"]], "inertia": [[115, "inertia"]], "inertia_of_point_mass": [[115, "inertia-of-point-mass"]], "linear_momentum": [[115, "linear-momentum"]], "angular_momentum": [[115, "angular-momentum"]], "kinetic_energy": [[115, "kinetic-energy"]], "potential_energy": [[115, "potential-energy"]], "Lagrangian": [[115, "lagrangian"], [133, "lagrangian"]], "Printing (Docstrings)": [[116, "printing-docstrings"], [182, "printing-docstrings"]], "mechanics_printing": [[116, "mechanics-printing"]], "mprint": [[116, "mprint"]], "mpprint": [[116, "mpprint"]], "mlatex": [[116, "mlatex"]], "SymbolicSystem (Docstrings)": [[117, "symbolicsystem-docstrings"]], "SymbolicSystem": [[117, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[118, "autolev-parser"]], "Usage": [[118, "usage"]], "Gotchas": [[118, "gotchas"], [270, "gotchas"]], "Limitations and Issues": [[118, "limitations-and-issues"]], "Future Improvements": [[118, "future-improvements"]], "1. Completing Dynamics Online": [[118, "completing-dynamics-online"]], "2. Fixing Issues": [[118, "fixing-issues"]], "3. Switching to an AST": [[118, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[119, "examples-for-physics-mechanics"]], "A bicycle": [[120, "a-bicycle"]], "A four bar linkage": [[121, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[122, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[122, "kane-s-method"]], "Lagrange\u2019s Method": [[122, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[123, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[124, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[125, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[126, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[127, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[128, "classical-mechanics"]], "Vector": [[128, "vector"], [178, "vector"], [186, "vector"], [247, "vector"], [254, "vector"]], "Mechanics": [[128, "mechanics"], [222, "module-sympy.stats.rv"]], "Guide to Mechanics": [[128, "guide-to-mechanics"]], "Mechanics API": [[128, "mechanics-api"]], "Joints Framework in Physics/Mechanics": [[129, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[129, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[129, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[130, "kane-s-method-in-physics-mechanics"], [130, "id2"]], "Structure of Equations": [[130, "structure-of-equations"], [131, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[131, "lagrange-s-method-in-physics-mechanics"], [131, "id1"]], "Linearization in Physics/Mechanics": [[132, "linearization-in-physics-mechanics"]], "Background": [[132, "background"]], "A Note on Dependent Coordinates and Speeds": [[132, null]], "Linearizing Kane\u2019s Equations": [[132, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[132, "using-the-linearizer-class-directly"], [132, "id2"]], "2. Using the linearize class method:": [[132, "using-the-linearize-class-method"], [132, "id3"]], "What\u2019s with the new_method kwarg?": [[132, null]], "Linearizing Lagrange\u2019s Equations": [[132, "linearizing-lagrange-s-equations"]], "Potential Issues": [[132, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[132, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[132, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[132, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[133, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[133, "mass"]], "Inertia": [[133, "inertia"]], "Rigid Body": [[133, "rigid-body"]], "Dyadic": [[133, "dyadic"], [178, "dyadic"], [247, "dyadic"]], "Linear Momentum": [[133, "linear-momentum"]], "Angular Momentum": [[133, "angular-momentum"]], "Using momenta functions in Mechanics": [[133, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[133, "kinetic-energy"]], "Potential Energy": [[133, "potential-energy"]], "Using energy functions in Mechanics": [[133, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[134, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[135, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[135, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[135, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[135, "mathematical-equivalents"]], "Physical Equivalents": [[135, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[135, "numerical-evaluation-and-visualization"]], "Links": [[135, "links"]], "Symbolic Systems in Physics/Mechanics": [[136, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[136, "symbolicsystem-example-usage"]], "Gaussian Optics": [[137, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[138, "optics-module"]], "Medium": [[139, "module-sympy.physics.optics.medium"]], "Polarization": [[140, "module-sympy.physics.optics.polarization"]], "Waves": [[142, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[143, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[144, "module-sympy.physics.qho_1d"]], "Anticommutator": [[145, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[146, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[147, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[148, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[149, "module-sympy.physics.quantum.commutator"]], "Constants": [[150, "module-sympy.physics.quantum.constants"], [173, "constants"]], "Dagger": [[151, "module-sympy.physics.quantum.dagger"]], "Gates": [[152, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[153, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[154, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[155, "quantum-mechanics"]], "Quantum Functions": [[155, "quantum-functions"]], "States and Operators": [[155, "states-and-operators"]], "Quantum Computation": [[155, "quantum-computation"]], "Analytic Solutions": [[155, "analytic-solutions"]], "Inner Product": [[156, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[157, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[158, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[159, "module-sympy.physics.quantum.piab"]], "Qapply": [[160, "module-sympy.physics.quantum.qapply"]], "QFT": [[161, "module-sympy.physics.quantum.qft"]], "Qubit": [[162, "module-sympy.physics.quantum.qubit"]], "Represent": [[163, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[164, "module-sympy.physics.quantum.shor"]], "Spin": [[165, "module-sympy.physics.quantum.spin"]], "State": [[166, "module-sympy.physics.quantum.state"]], "Tensor Product": [[167, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[168, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[169, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[170, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[171, "dimensional-analysis"]], "Equation with quantities": [[171, "equation-with-quantities"]], "Unit systems": [[172, "unit-systems"]], "Philosophy behind unit systems": [[173, "philosophy-behind-unit-systems"]], "Dimensions": [[173, "dimensions"]], "Group structure": [[173, "group-structure"]], "Linear space representation": [[173, "linear-space-representation"]], "An example": [[173, "an-example"], [212, "an-example"]], "Quantities": [[173, "quantities"]], "Units": [[173, "units"]], "The need for a reference": [[173, "the-need-for-a-reference"]], "Literature": [[173, "literature"], [196, "literature"], [201, "literature"]], "Unit prefixes": [[174, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[175, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[175, "module-sympy.physics.units.util"]], "Units and unit systems": [[176, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[177, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[177, "inertia-dyadics"]], "ReferenceFrame": [[177, "referenceframe"], [178, "referenceframe"]], "dynamicsymbols": [[177, "dynamicsymbols"], [180, "dynamicsymbols"]], "Essential Classes": [[178, "essential-classes"]], "CoordinateSym": [[178, "coordinatesym"]], "Docstrings for basic field functions": [[179, "docstrings-for-basic-field-functions"]], "Field operation functions": [[179, "field-operation-functions"]], "curl": [[179, "curl"], [249, "curl"]], "divergence": [[179, "divergence"], [249, "divergence"]], "gradient": [[179, "gradient"], [249, "gradient"]], "scalar_potential": [[179, "scalar-potential"], [249, "scalar-potential"]], "scalar_potential_difference": [[179, "scalar-potential-difference"], [249, "scalar-potential-difference"]], "Checking the type of vector field": [[179, "checking-the-type-of-vector-field"]], "is_conservative": [[179, "is-conservative"], [249, "is-conservative"]], "is_solenoidal": [[179, "is-solenoidal"], [249, "is-solenoidal"]], "Essential Functions (Docstrings)": [[180, "essential-functions-docstrings"]], "dot": [[180, "dot"]], "cross": [[180, "cross"]], "outer": [[180, "outer"]], "express": [[180, "express"], [249, "express"]], "time_derivative": [[180, "time-derivative"]], "Kinematics (Docstrings)": [[181, "kinematics-docstrings"]], "Point": [[181, "module-sympy.physics.vector.point"]], "kinematic_equations": [[181, "module-sympy.physics.vector.functions"]], "init_vprinting": [[182, "init-vprinting"]], "vprint": [[182, "vprint"]], "vpprint": [[182, "vpprint"]], "vlatex": [[182, "vlatex"]], "Scalar and Vector Field Functionality": [[183, "scalar-and-vector-field-functionality"], [253, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[183, "vectors-and-scalars"], [255, "vectors-and-scalars"]], "Fields": [[183, "fields"], [255, "fields"]], "Implementation of fields in sympy.physics.vector": [[183, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[183, "field-operators-and-other-related-functions"]], "Curl": [[183, "curl"], [253, "curl"]], "Divergence": [[183, "divergence"], [253, "divergence"]], "Gradient": [[183, "gradient"], [253, "gradient"]], "Conservative and Solenoidal fields": [[183, "conservative-and-solenoidal-fields"], [253, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[183, "scalar-potential-functions"], [253, "scalar-potential-functions"]], "The Physics Vector Module": [[184, "the-physics-vector-module"]], "References for Physics/Vector": [[184, "references-for-physics-vector"]], "Guide to Vector": [[184, "guide-to-vector"], [254, "guide-to-vector"]], "Vector API": [[184, "vector-api"], [254, "vector-api"]], "Vector: Kinematics": [[185, "vector-kinematics"]], "Introduction to Kinematics": [[185, "introduction-to-kinematics"]], "Angular Velocity": [[185, "angular-velocity"]], "Angular Acceleration": [[185, "angular-acceleration"]], "Point Velocity & Acceleration": [[185, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[185, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[186, "vector-referenceframe"]], "Vector Algebra": [[186, "vector-algebra"]], "Vector Operations": [[186, "vector-operations"]], "Alternative Representation": [[186, "alternative-representation"]], "Vector Calculus": [[186, "vector-calculus"]], "Derivatives of Vectors": [[186, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[186, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[186, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[186, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[186, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[186, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[186, "how-vectors-are-coded"]], "Wigner Symbols": [[187, "module-sympy.physics.wigner"]], "Credits and Copyright": [[187, "credits-and-copyright"]], "Authors": [[187, "authors"]], "Plot Class": [[188, "plot-class"]], "Plotting Function Reference": [[188, "plotting-function-reference"]], "PlotGrid Class": [[188, "plotgrid-class"]], "Series Classes": [[188, "series-classes"]], "Backends": [[188, "backends"]], "Pyglet Plotting": [[188, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[188, "plot-window-controls"]], "Coordinate Modes": [[188, "coordinate-modes"]], "Specifying Intervals for Variables": [[188, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[188, "using-the-interactive-interface"]], "Using Custom Color Functions": [[188, "using-custom-color-functions"]], "Plotting Geometric Entities": [[188, "plotting-geometric-entities"]], "Plotting with ASCII art": [[188, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[189, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Reference": [[189, "reference"], [195, "reference"], [209, "reference"], [209, "id2"], [209, "id4"], [209, "id7"], [209, "id8"]], "Base Rings": [[189, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[189, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[189, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[189, "finite-extensions"]], "Basic functionality of the module": [[190, "basic-functionality-of-the-module"]], "Basic concepts": [[190, "basic-concepts"]], "Polynomials": [[190, "polynomials"]], "Divisibility": [[190, "divisibility"]], "Integral domains": [[190, "integral-domains"]], "Factorial domains": [[190, "factorial-domains"]], "Euclidean domains": [[190, "euclidean-domains"]], "Divisibility of polynomials": [[190, "divisibility-of-polynomials"]], "Basic functionality": [[190, "basic-functionality"]], "Division": [[190, "division"]], "GCD and LCM": [[190, "gcd-and-lcm"]], "Square-free factorization": [[190, "square-free-factorization"]], "Factorization": [[190, "factorization"]], "Groebner bases": [[190, "groebner-bases"]], "Solving Equations": [[190, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[191, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[191, "what-is-domainmatrix"]], "DomainMatrix Class Reference": [[191, "domainmatrix-class-reference"]], "DDM Class Reference": [[191, "ddm-class-reference"]], "SDM Class Reference": [[191, "sdm-class-reference"]], "Normal Forms": [[191, "normal-forms"]], "Introducing the Domains of the poly module": [[192, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[192, "what-are-the-domains"]], "Representing expressions symbolically": [[192, "representing-expressions-symbolically"]], "Tree representation": [[192, "tree-representation"]], "DUP representation": [[192, "dup-representation"]], "DMP representation": [[192, "dmp-representation"]], "Sparse polynomial representation": [[192, "sparse-polynomial-representation"]], "Basic usage of domains": [[192, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[192, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[192, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[192, "finite-fields"]], "Real and complex fields": [[192, "real-and-complex-fields"]], "Algebraic number fields": [[192, "algebraic-number-fields"], [197, "algebraic-number-fields"]], "Polynomial ring domains": [[192, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[192, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[192, "polyring-vs-polynomialring"]], "Rational function fields": [[192, "rational-function-fields"]], "Expression domain": [[192, "expression-domain"]], "Choosing a domain": [[192, "choosing-a-domain"]], "Converting elements between different domains": [[192, "converting-elements-between-different-domains"]], "Unifying domains": [[192, "unifying-domains"]], "Internals of a Poly": [[192, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[192, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[192, "choosing-generators"]], "Algebraically dependent generators": [[192, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[193, "reference-docs-for-the-poly-domains"]], "Domains": [[193, "domains"]], "Abstract Domains": [[193, "abstract-domains"]], "GF(p)": [[193, "gf-p"]], "ZZ": [[193, "zz"]], "QQ": [[193, "qq"]], "MPQ": [[193, "mpq"]], "Gaussian domains": [[193, "gaussian-domains"]], "ZZ_I": [[193, "zz-i"]], "QQ_I": [[193, "qq-i"]], "QQ<a>": [[193, "qq-a"]], "RR": [[193, "rr"]], "CC": [[193, "cc"]], "K[x]": [[193, "k-x"]], "K(x)": [[193, "id11"]], "EX": [[193, "ex"]], "Quotient ring": [[193, "quotient-ring"]], "Sparse polynomials": [[193, "sparse-polynomials"]], "Sparse rational functions": [[193, "sparse-rational-functions"]], "Dense polynomials": [[193, "dense-polynomials"]], "Polynomial Manipulation": [[194, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[195, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[195, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[195, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[195, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[195, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[195, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[195, "classical-remainder-sequence"]], "Simplified remainder sequences": [[195, "simplified-remainder-sequences"]], "Subresultant sequence": [[195, "subresultant-sequence"]], "Groebner basis algorithms": [[195, "groebner-basis-algorithms"]], "Options": [[195, "module-sympy.polys.polyoptions"]], "Configuration": [[195, "module-sympy.polys.polyconfig"]], "Exceptions": [[195, "exceptions"]], "Modular GCD": [[195, "modular-gcd"]], "Undocumented": [[195, "undocumented"]], "Number Fields": [[197, "number-fields"]], "Solving the Main Problems": [[197, "solving-the-main-problems"]], "Integral Basis": [[197, "integral-basis"]], "Prime Decomposition": [[197, "prime-decomposition"]], "p-adic Valuation": [[197, "p-adic-valuation"]], "Finding Minimal Polynomials": [[197, "finding-minimal-polynomials"]], "The Subfield Problem": [[197, "the-subfield-problem"]], "Representing algebraic numbers": [[197, "representing-algebraic-numbers"]], "As number field elements": [[197, "as-number-field-elements"]], "As elements of finitely-generated modules": [[197, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[197, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[197, "arithmetic-with-module-elements"]], "Multiplication": [[197, "multiplication"]], "Module Homomorphisms": [[197, "module-homomorphisms"]], "Class Reference": [[197, "class-reference"]], "Polynomials Manipulation Module Reference": [[198, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[198, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[198, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[198, "domain-constructors"]], "Monomials encoded as tuples": [[198, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[198, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[198, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[198, "symbolic-root-finding-algorithms"]], "Special polynomials": [[198, "special-polynomials"]], "Orthogonal polynomials": [[198, "orthogonal-polynomials"]], "Appell sequences": [[198, "appell-sequences"]], "Manipulation of rational functions": [[198, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[198, "partial-fraction-decomposition"], [201, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[198, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[199, "series-manipulation-using-polynomials"]], "rs_series": [[199, "rs-series"]], "Contribute": [[199, "contribute"]], "Manipulation of power series": [[199, "manipulation-of-power-series"]], "Poly solvers": [[200, "poly-solvers"]], "solve_lin_sys": [[200, "solve-lin-sys"]], "eqs_to_matrix": [[200, "eqs-to-matrix"]], "sympy_eqs_to_ring": [[200, "sympy-eqs-to-ring"]], "_solve_lin_sys": [[200, "id1"]], "_solve_lin_sys_component": [[200, "solve-lin-sys-component"]], "Examples from Wester\u2019s Article": [[201, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[201, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[201, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[201, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[201, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[201, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[201, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[201, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[201, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[201, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[201, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[201, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[201, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[201, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[201, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[201, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[201, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[202, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[202, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[202, "example-of-custom-printer"]], "Example of Custom Printing Method": [[202, "example-of-custom-printing-method"]], "Common mistakes": [[202, "common-mistakes"]], "PrettyPrinter Class": [[202, "prettyprinter-class"]], "C code printers": [[202, "module-sympy.printing.c"]], "C++ code printers": [[202, "module-sympy.printing.cxx"]], "RCodePrinter": [[202, "module-sympy.printing.rcode"]], "Fortran Printing": [[202, "fortran-printing"]], "SMT-Lib printing": [[202, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[202, "module-sympy.printing.mathematica"]], "Maple code printing": [[202, "module-sympy.printing.maple"]], "Javascript Code printing": [[202, "module-sympy.printing.jscode"]], "Julia code printing": [[202, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[202, "module-sympy.printing.octave"]], "Rust code printing": [[202, "module-sympy.printing.rust"]], "Aesara Code printing": [[202, "module-sympy.printing.aesaracode"]], "Gtk": [[202, "module-sympy.printing.gtk"]], "LambdaPrinter": [[202, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[202, "module-sympy.printing.latex"]], "MathMLPrinter": [[202, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[202, "module-sympy.printing.pycode"]], "PythonPrinter": [[202, "module-sympy.printing.python"]], "srepr": [[202, "module-sympy.printing.repr"], [277, "srepr"]], "StrPrinter": [[202, "module-sympy.printing.str"]], "Tree Printing": [[202, "module-sympy.printing.tree"]], "Preview": [[202, "preview"]], "Implementation - Helper Classes/Functions": [[202, "module-sympy.printing.conventions"]], "CodePrinter": [[202, "module-sympy.printing.codeprinter"]], "Precedence": [[202, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[202, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[202, "dotprint"]], "Term Rewriting": [[203, "term-rewriting"]], "Expanding": [[203, "expanding"]], "Common Subexpression Detection and Collection": [[203, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[204, "formal-power-series"]], "Rational Algorithm": [[204, "rational-algorithm"]], "Hypergeometric Algorithm": [[204, "hypergeometric-algorithm"]], "Fourier Series": [[205, "fourier-series"]], "Series": [[206, "series"]], "Limits of Sequences": [[207, "limits-of-sequences"]], "Sequences": [[208, "sequences"]], "Sequences Base": [[208, "sequences-base"]], "Elementary Sequences": [[208, "elementary-sequences"]], "Singleton Sequences": [[208, "singleton-sequences"]], "Compound Sequences": [[208, "compound-sequences"]], "Recursive Sequences": [[208, "recursive-sequences"]], "Series Expansions": [[209, "series-expansions"]], "Limits": [[209, "limits"], [268, "limits"]], "The Gruntz Algorithm": [[209, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[209, "more-intuitive-series-expansion"]], "Order Terms": [[209, "order-terms"]], "Series Acceleration": [[209, "series-acceleration"]], "Residues": [[209, "residues"]], "Basic Sets": [[210, "module-sympy.sets.sets"]], "Set": [[210, "set"]], "Elementary Sets": [[210, "elementary-sets"]], "Interval": [[210, "interval"]], "FiniteSet": [[210, "finiteset"]], "Compound Sets": [[210, "compound-sets"]], "Union": [[210, "union"]], "Intersection": [[210, "intersection"]], "ProductSet": [[210, "productset"]], "Complement": [[210, "complement"]], "SymmetricDifference": [[210, "symmetricdifference"]], "DisjointUnion": [[210, "disjointunion"]], "Singleton Sets": [[210, "singleton-sets"]], "EmptySet": [[210, "emptyset"]], "UniversalSet": [[210, "universalset"]], "Special Sets": [[210, "module-sympy.sets.fancysets"]], "Rationals": [[210, "rationals"]], "Naturals": [[210, "naturals"]], "Naturals0": [[210, "naturals0"]], "Integers": [[210, "integers"]], "Reals": [[210, "reals"]], "Complexes": [[210, "complexes"]], "ImageSet": [[210, "imageset"]], "Range": [[210, "range"]], "ComplexRegion": [[210, "complexregion"]], "Power sets": [[210, "module-sympy.sets.powerset"]], "PowerSet": [[210, "powerset"]], "Iteration over sets": [[210, "iteration-over-sets"]], "Condition Sets": [[210, "module-sympy.sets.conditionset"]], "ConditionSet": [[210, "conditionset"]], "Relations on sets": [[210, "relations-on-sets"]], "SetKind": [[210, "setkind"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[211, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[211, "rules"]], "Hypergeometric Expansion": [[212, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[212, "hypergeometric-function-expansion-algorithm"]], "Notation": [[212, "notation"]], "Incrementing and decrementing indices": [[212, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[212, "reduction-of-order"]], "Moving Around in the Parameter Space": [[212, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[212, "applying-the-operators"]], "Loose Ends": [[212, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[212, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[212, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[212, "implemented-hypergeometric-formulae"]], "Simplify": [[213, "simplify"], [214, "simplify"]], "simplify": [[214, "id1"], [278, "simplify"]], "separatevars": [[214, "separatevars"]], "nthroot": [[214, "nthroot"]], "kroneckersimp": [[214, "kroneckersimp"]], "besselsimp": [[214, "besselsimp"]], "hypersimp": [[214, "hypersimp"]], "hypersimilar": [[214, "hypersimilar"]], "nsimplify": [[214, "nsimplify"]], "posify": [[214, "posify"]], "logcombine": [[214, "logcombine"], [278, "logcombine"]], "Radsimp": [[214, "module-sympy.simplify.radsimp"]], "radsimp": [[214, "id2"]], "rad_rationalize": [[214, "rad-rationalize"]], "collect": [[214, "collect"], [278, "collect"]], "collect_sqrt": [[214, "collect-sqrt"]], "collect_const": [[214, "collect-const"]], "fraction": [[214, "fraction"]], "Ratsimp": [[214, "module-sympy.simplify.ratsimp"]], "ratsimp": [[214, "id3"]], "ratsimpmodprime": [[214, "ratsimpmodprime"]], "Trigonometric simplification": [[214, "module-sympy.simplify.trigsimp"]], "trigsimp": [[214, "trigsimp"], [278, "trigsimp"]], "Power simplification": [[214, "module-sympy.simplify.powsimp"]], "powsimp": [[214, "powsimp"], [278, "powsimp"]], "powdenest": [[214, "powdenest"], [278, "powdenest"]], "Combinatorial simplification": [[214, "module-sympy.simplify.combsimp"]], "combsimp": [[214, "combsimp"], [278, "combsimp"]], "Square Root Denesting": [[214, "module-sympy.simplify.sqrtdenest"]], "sqrtdenest": [[214, "sqrtdenest"]], "Common Subexpression Elimination": [[214, "module-sympy.simplify.cse_main"]], "cse": [[214, "cse"]], "opt_cse": [[214, "opt-cse"]], "tree_cse": [[214, "tree-cse"]], "Hypergeometric Function Expansion": [[214, "module-sympy.simplify.hyperexpand"]], "hyperexpand": [[214, "hyperexpand"], [278, "hyperexpand"]], "EPath Tools": [[214, "module-sympy.simplify.epathtools"]], "EPath class": [[214, "epath-class"]], "epath": [[214, "epath"]], "Diophantine": [[215, "diophantine"]], "Diophantine equations": [[215, "diophantine-equations"]], "Module structure": [[215, "module-structure"]], "Tutorial": [[215, "tutorial"]], "User Functions": [[215, "user-functions"], [218, "user-functions"], [219, "user-functions"]], "diophantine": [[215, "id9"]], "classify_diop": [[215, "classify-diop"]], "Internal Functions": [[215, "internal-functions"]], "diop_solve": [[215, "diop-solve"]], "diop_linear": [[215, "diop-linear"]], "base_solution_linear": [[215, "base-solution-linear"]], "diop_quadratic": [[215, "diop-quadratic"]], "diop_DN": [[215, "diop-dn"]], "cornacchia": [[215, "cornacchia"]], "diop_bf_DN": [[215, "diop-bf-dn"]], "transformation_to_DN": [[215, "transformation-to-dn"]], "transformation_to_normal": [[215, "transformation-to-normal"]], "find_DN": [[215, "find-dn"]], "diop_ternary_quadratic": [[215, "diop-ternary-quadratic"]], "square_factor": [[215, "square-factor"]], "descent": [[215, "descent"]], "diop_general_pythagorean": [[215, "diop-general-pythagorean"]], "diop_general_sum_of_squares": [[215, "diop-general-sum-of-squares"]], "diop_general_sum_of_even_powers": [[215, "diop-general-sum-of-even-powers"]], "power_representation": [[215, "power-representation"]], "sum_of_three_squares": [[215, "sum-of-three-squares"]], "sum_of_four_squares": [[215, "sum-of-four-squares"]], "sum_of_powers": [[215, "sum-of-powers"]], "sum_of_squares": [[215, "sum-of-squares"]], "merge_solution": [[215, "merge-solution"]], "divisible": [[215, "divisible"]], "PQa": [[215, "pqa"]], "equivalent": [[215, "equivalent"]], "parametrize_ternary_quadratic": [[215, "parametrize-ternary-quadratic"]], "diop_ternary_quadratic_normal": [[215, "diop-ternary-quadratic-normal"]], "ldescent": [[215, "ldescent"]], "gaussian_reduce": [[215, "gaussian-reduce"]], "holzer": [[215, "holzer"]], "prime_as_sum_of_two_squares": [[215, "prime-as-sum-of-two-squares"]], "sqf_normal": [[215, "sqf-normal"]], "reconstruct": [[215, "reconstruct"]], "Internal Classes": [[215, "internal-classes"]], "DiophantineSolutionSet": [[215, "diophantinesolutionset"]], "DiophantineEquationType": [[215, "diophantineequationtype"]], "Univariate": [[215, "univariate"]], "Linear": [[215, "linear"]], "BinaryQuadratic": [[215, "binaryquadratic"]], "InhomogeneousTernaryQuadratic": [[215, "inhomogeneousternaryquadratic"]], "HomogeneousTernaryQuadraticNormal": [[215, "homogeneousternaryquadraticnormal"]], "HomogeneousTernaryQuadratic": [[215, "homogeneousternaryquadratic"]], "InhomogeneousGeneralQuadratic": [[215, "inhomogeneousgeneralquadratic"]], "HomogeneousGeneralQuadratic": [[215, "homogeneousgeneralquadratic"]], "GeneralSumOfSquares": [[215, "generalsumofsquares"]], "GeneralPythagorean": [[215, "generalpythagorean"]], "CubicThue": [[215, "cubicthue"]], "GeneralSumOfEvenPowers": [[215, "generalsumofevenpowers"]], "Solvers": [[216, "solvers"], [220, "module-sympy.solvers"], [279, "solvers"]], "Inequality Solvers": [[217, "inequality-solvers"]], "ODE": [[218, "ode"]], "dsolve": [[218, "dsolve"]], "dsolve_system": [[218, "dsolve-system"]], "classify_ode": [[218, "classify-ode"]], "checkodesol": [[218, "checkodesol"]], "homogeneous_order": [[218, "homogeneous-order"]], "infinitesimals": [[218, "infinitesimals"]], "checkinfsol": [[218, "checkinfsol"]], "constantsimp": [[218, "constantsimp"]], "Hint Functions": [[218, "hint-functions"]], "allhints": [[218, "allhints"]], "odesimp": [[218, "odesimp"]], "constant_renumber": [[218, "constant-renumber"]], "sol_simplicity": [[218, "sol-simplicity"]], "factorable": [[218, "factorable"]], "1st_exact": [[218, "st-exact"]], "1st_homogeneous_coeff_best": [[218, "st-homogeneous-coeff-best"]], "1st_homogeneous_coeff_subs_dep_div_indep": [[218, "st-homogeneous-coeff-subs-dep-div-indep"]], "1st_homogeneous_coeff_subs_indep_div_dep": [[218, "st-homogeneous-coeff-subs-indep-div-dep"]], "1st_linear": [[218, "st-linear"]], "1st_rational_riccati": [[218, "st-rational-riccati"]], "2nd_linear_airy": [[218, "nd-linear-airy"]], "2nd_linear_bessel": [[218, "nd-linear-bessel"]], "Bernoulli": [[218, "bernoulli"]], "Liouville": [[218, "liouville"]], "Riccati_special_minus2": [[218, "riccati-special-minus2"]], "nth_linear_constant_coeff_homogeneous": [[218, "nth-linear-constant-coeff-homogeneous"]], "nth_linear_constant_coeff_undetermined_coefficients": [[218, "nth-linear-constant-coeff-undetermined-coefficients"]], "nth_linear_constant_coeff_variation_of_parameters": [[218, "nth-linear-constant-coeff-variation-of-parameters"]], "nth_linear_euler_eq_homogeneous": [[218, "nth-linear-euler-eq-homogeneous"]], "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters": [[218, "nth-linear-euler-eq-nonhomogeneous-variation-of-parameters"]], "nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients": [[218, "nth-linear-euler-eq-nonhomogeneous-undetermined-coefficients"]], "nth_algebraic": [[218, "nth-algebraic"]], "nth_order_reducible": [[218, "nth-order-reducible"]], "separable": [[218, "separable"]], "almost_linear": [[218, "almost-linear"]], "linear_coefficients": [[218, "linear-coefficients"]], "separable_reduced": [[218, "separable-reduced"]], "lie_group": [[218, "lie-group"]], "2nd_hypergeometric": [[218, "nd-hypergeometric"]], "1st_power_series": [[218, "st-power-series"]], "2nd_power_series_ordinary": [[218, "nd-power-series-ordinary"]], "2nd_power_series_regular": [[218, "nd-power-series-regular"]], "Lie heuristics": [[218, "lie-heuristics"]], "abaco1_simple": [[218, "abaco1-simple"]], "abaco1_product": [[218, "abaco1-product"]], "bivariate": [[218, "bivariate"]], "chi": [[218, "chi"]], "abaco2_similar": [[218, "abaco2-similar"]], "function_sum": [[218, "function-sum"]], "abaco2_unique_unknown": [[218, "abaco2-unique-unknown"]], "abaco2_unique_general": [[218, "abaco2-unique-general"]], "linear": [[218, "linear"]], "Rational Riccati Solver": [[218, "rational-riccati-solver"]], "riccati_normal": [[218, "riccati-normal"]], "riccati_inverse_normal": [[218, "riccati-inverse-normal"]], "riccati_reduced": [[218, "riccati-reduced"]], "construct_c": [[218, "construct-c"]], "construct_d": [[218, "construct-d"]], "rational_laurent_series": [[218, "rational-laurent-series"]], "compute_m_ybar": [[218, "compute-m-ybar"]], "solve_aux_eq": [[218, "solve-aux-eq"]], "remove_redundant_sols": [[218, "remove-redundant-sols"]], "get_gen_sol_from_part_sol": [[218, "get-gen-sol-from-part-sol"]], "solve_riccati": [[218, "solve-riccati"]], "System of ODEs": [[218, "system-of-odes"]], "Linear, 2 equations, Order 1, Type 6": [[218, "linear-2-equations-order-1-type-6"]], "Linear, 2 equations, Order 1, Type 7": [[218, "linear-2-equations-order-1-type-7"]], "Linear ODE to matrix": [[218, "linear-ode-to-matrix"]], "Canonical Equations Converter": [[218, "canonical-equations-converter"]], "LinODESolve Systems Information": [[218, "linodesolve-systems-information"]], "Matrix Exponential Jordan Form": [[218, "matrix-exponential-jordan-form"]], "Matrix Exponential": [[218, "matrix-exponential"]], "Linear, n equations, Order 1 Solver": [[218, "linear-n-equations-order-1-solver"]], "Nonlinear, 2 equations, Order 1, Type 1": [[218, "nonlinear-2-equations-order-1-type-1"]], "Nonlinear, 2 equations, Order 1, Type 2": [[218, "nonlinear-2-equations-order-1-type-2"]], "Nonlinear, 2 equations, Order 1, Type 3": [[218, "nonlinear-2-equations-order-1-type-3"]], "Nonlinear, 2 equations, Order 1, Type 4": [[218, "nonlinear-2-equations-order-1-type-4"]], "Nonlinear, 2 equations, Order 1, Type 5": [[218, "nonlinear-2-equations-order-1-type-5"]], "Nonlinear, 3 equations, Order 1, Type 1": [[218, "nonlinear-3-equations-order-1-type-1"]], "Nonlinear, 3 equations, Order 1, Type 2": [[218, "nonlinear-3-equations-order-1-type-2"]], "Nonlinear, 3 equations, Order 1, Type 3": [[218, "nonlinear-3-equations-order-1-type-3"]], "Nonlinear, 3 equations, Order 1, Type 4": [[218, "nonlinear-3-equations-order-1-type-4"]], "Nonlinear, 3 equations, Order 1, Type 5": [[218, "nonlinear-3-equations-order-1-type-5"]], "Information on the ode module": [[218, "module-sympy.solvers.ode.ode"]], "Internal functions": [[218, "internal-functions"]], "PDE": [[219, "pde"]], "pde_separate": [[219, "pde-separate"]], "pde_separate_add": [[219, "pde-separate-add"]], "pde_separate_mul": [[219, "pde-separate-mul"]], "pdsolve": [[219, "pdsolve"]], "classify_pde": [[219, "classify-pde"]], "checkpdesol": [[219, "checkpdesol"]], "Hint Methods": [[219, "hint-methods"]], "pde_1st_linear_constant_coeff_homogeneous": [[219, "pde-1st-linear-constant-coeff-homogeneous"]], "pde_1st_linear_constant_coeff": [[219, "pde-1st-linear-constant-coeff"]], "pde_1st_linear_variable_coeff": [[219, "pde-1st-linear-variable-coeff"]], "Information on the pde module": [[219, "module-sympy.solvers.pde"]], "Algebraic equations": [[220, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[220, "ordinary-differential-equations-odes"], [221, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[220, "partial-differential-equations-pdes"], [221, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[220, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[220, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[220, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[220, "diophantine-equations-des"], [221, "diophantine-equations-des"]], "Inequalities": [[220, "inequalities"], [221, "inequalities"]], "Solveset": [[221, "solveset"]], "What\u2019s wrong with solve():": [[221, "what-s-wrong-with-solve"]], "Why Solveset?": [[221, "why-solveset"]], "Why do we use Sets as an output type?": [[221, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[221, "input-api-of-solveset"]], "What is this domain argument about?": [[221, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[221, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[221, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[221, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[221, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[221, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[221, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[221, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[221, "solveset-module-reference"]], "linear_eq_to_matrix": [[221, "linear-eq-to-matrix"]], "linsolve": [[221, "linsolve"]], "nonlinsolve": [[221, "nonlinsolve"]], "transolve": [[221, "transolve"]], "Stats": [[222, "module-sympy.stats"]], "Random Variable Types": [[222, "random-variable-types"]], "Finite Types": [[222, "finite-types"]], "Discrete Types": [[222, "discrete-types"]], "Continuous Types": [[222, "continuous-types"]], "Joint Types": [[222, "joint-types"]], "Stochastic Processes": [[222, "stochastic-processes"]], "Matrix Distributions": [[222, "matrix-distributions"]], "Compound Distribution": [[222, "compound-distribution"]], "Interface": [[222, "interface"]], "N-dim array": [[223, "module-sympy.tensor.array"]], "Products and contractions": [[223, "products-and-contractions"]], "Diagonal operator": [[223, "diagonal-operator"]], "Derivatives by array": [[223, "derivatives-by-array"]], "Classes": [[223, "classes"]], "N-dim array expressions": [[224, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[224, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[224, "compatibility-with-matrices"]], "Tensor": [[225, "module-sympy.tensor"], [228, "module-sympy.tensor.tensor"]], "Methods": [[226, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[227, "module-sympy.tensor.indexed"]], "Tensor Operators": [[229, "module-sympy.tensor.toperators"]], "Testing": [[230, "testing"]], "pytest": [[231, "module-sympy.testing.pytest"]], "Randomised Testing": [[232, "module-sympy.testing.randtest"]], "Run Tests": [[233, "module-sympy.testing.runtests"]], "Autowrap Module": [[234, "autowrap-module"]], "Implementation details": [[234, "implementation-details"]], "Codegen": [[235, "codegen"]], "Implementation Details": [[235, "implementation-details"]], "Routine": [[235, "routine"]], "Decorator": [[236, "module-sympy.utilities.decorator"]], "Enumerative": [[237, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[238, "module-sympy.utilities.exceptions"]], "Iterables": [[240, "iterables"]], "variations": [[240, "variations"]], "partitions": [[240, "partitions"]], "Docstring": [[240, "module-sympy.utilities.iterables"]], "Memoization": [[242, "module-sympy.utilities.memoization"]], "Miscellaneous": [[243, "module-sympy.utilities.misc"]], "PKGDATA": [[244, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[245, "module-sympy.utilities.source"]], "Timing Utilities": [[246, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[247, "essential-classes-in-sympy-vector-docstrings"]], "CoordSys3D": [[247, "coordsys3d"]], "Del": [[247, "del"]], "ParametricRegion": [[247, "parametricregion"]], "ImplicitRegion": [[247, "implicitregion"]], "ParametricIntegral": [[247, "parametricintegral"]], "Orienter classes (docstrings)": [[248, "orienter-classes-docstrings"]], "Orienter": [[248, "orienter"]], "AxisOrienter": [[248, "axisorienter"]], "BodyOrienter": [[248, "bodyorienter"]], "SpaceOrienter": [[248, "spaceorienter"]], "QuaternionOrienter": [[248, "quaternionorienter"]], "Essential Functions in sympy.vector (docstrings)": [[249, "essential-functions-in-sympy-vector-docstrings"]], "matrix_to_vector": [[249, "matrix-to-vector"]], "vector_integrate": [[249, "vector-integrate"]], "Basic Implementation details": [[250, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[250, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[250, "sympy-operations-on-vectors"]], "Dyadics": [[250, "dyadics"]], "More about Coordinate Systems": [[251, "more-about-coordinate-systems"]], "Locating new systems": [[251, "locating-new-systems"]], "Orienting new systems": [[251, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[251, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[251, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[251, "orienting-and-locating-new-systems"]], "Transforming new system": [[251, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[251, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[251, "vectors-and-dyadics"]], "Coordinate Variables": [[251, "coordinate-variables"]], "Other expression-dependent methods": [[251, "other-expression-dependent-methods"]], "General examples of usage": [[252, "general-examples-of-usage"]], "Quadrilateral problem": [[252, "quadrilateral-problem"]], "The Problem": [[252, "the-problem"], [252, "id1"]], "Solution": [[252, "solution"], [252, "id2"]], "Third product rule for Del operator": [[252, "third-product-rule-for-del-operator"]], "See": [[252, "see"]], "Implementation in sympy.vector": [[253, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[253, "scalar-and-vector-fields"]], "The Del operator": [[253, "the-del-operator"]], "Field operators and related functions": [[253, "field-operators-and-related-functions"]], "Directional Derivative": [[253, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[253, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[254, "references-for-vector"]], "Coordinate Systems": [[255, "coordinate-systems"]], "Applications of Vector Integrals": [[256, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[256, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[256, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[256, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[256, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[256, "verifying-divergence-theorem"]], "Physics": [[257, "physics"], [263, "module-sympy.physics"]], "Topics": [[257, "topics"], [264, "topics"]], "Introductory Tutorial": [[266, "introductory-tutorial"], [271, "introductory-tutorial"]], "Basic Operations": [[267, "basic-operations"], [274, "basic-operations"]], "Quick Tip": [[267, null], [268, null], [270, null], [273, null], [274, null]], "Converting Strings to SymPy Expressions": [[267, "converting-strings-to-sympy-expressions"]], "Derivatives": [[268, "derivatives"]], "Series Expansion": [[268, "series-expansion"]], "Finite differences": [[268, "finite-differences"]], "SymPy Features": [[269, "sympy-features"]], "Equals signs": [[270, "equals-signs"]], "Two Final Notes: ^ and /": [[270, "two-final-notes-and"]], "Further Reading": [[270, "further-reading"]], "What is Symbolic Computation?": [[272, "what-is-symbolic-computation"]], "A More Interesting Example": [[272, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[272, "the-power-of-symbolic-computation"]], "Why SymPy?": [[272, "why-sympy"]], "Advanced Expression Manipulation": [[273, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[273, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[273, "recursing-through-an-expression-tree"]], "args": [[273, "args"]], "Key Invariant": [[273, null]], "Walking the Tree": [[273, "walking-the-tree"]], "Prevent expression evaluation": [[273, "prevent-expression-evaluation"]], "Shape": [[274, "shape"]], "Accessing Rows and Columns": [[274, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[274, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[274, "basic-methods"]], "Matrix Constructors": [[274, "matrix-constructors"]], "Advanced Methods": [[274, "advanced-methods"]], "Determinant": [[274, "determinant"]], "RREF": [[274, "rref"]], "Nullspace": [[274, "nullspace"]], "Columnspace": [[274, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[274, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[274, "possible-issues"]], "Zero Testing": [[274, "zero-testing"]], "What\u2019s Next": [[275, "whats-next"]], "Preliminaries": [[276, "preliminaries"]], "Exercises": [[276, "exercises"]], "Printers": [[277, "printers"]], "Setting up Pretty Printing": [[277, "setting-up-pretty-printing"]], "Printing Functions": [[277, "printing-functions"]], "str": [[277, "str"]], "ASCII Pretty Printer": [[277, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[277, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[277, "mathrm-latex"]], "MathML": [[277, "mathml"]], "Dot": [[277, "dot"]], "Simplification": [[278, "simplification"]], "Polynomial/Rational Function Simplification": [[278, "polynomial-rational-function-simplification"]], "factor": [[278, "factor"]], "cancel": [[278, "cancel"]], "apart": [[278, "apart"]], "Trigonometric Simplification": [[278, "trigonometric-simplification"]], "Powers": [[278, "powers"]], "expand_power_exp / expand_power_base": [[278, "expand-power-exp-expand-power-base"]], "Exponentials and logarithms": [[278, "exponentials-and-logarithms"]], "Special Functions": [[278, "special-functions"]], "rewrite": [[278, "rewrite"]], "gammasimp": [[278, "gammasimp"]], "Example: Continued Fractions": [[278, "example-continued-fractions"]], "A Note about Equations": [[279, "a-note-about-equations"]], "Solving Equations Algebraically": [[279, "solving-equations-algebraically"]], "Solving Differential Equations": [[279, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [26, "module-sympy"], [28, "module-sympy.abc"], [29, "module-sympy.algebras"], [30, "module-sympy.assumptions.ask"], [31, "module-sympy.assumptions.assume"], [32, "module-sympy.assumptions"], [33, "module-sympy.assumptions.predicates"], [34, "module-sympy.assumptions.refine"], [35, "module-sympy.calculus"], [35, "module-sympy.calculus.euler"], [35, "module-sympy.calculus.finite_diff"], [35, "module-sympy.calculus.singularities"], [35, "module-sympy.calculus.util"], [36, "module-sympy.categories"], [36, "module-sympy.categories.diagram_drawing"], [37, "module-sympy.codegen.algorithms"], [37, "module-sympy.codegen.approximations"], [37, "module-sympy.codegen.ast"], [37, "module-sympy.codegen.cfunctions"], [37, "module-sympy.codegen.cnodes"], [37, "module-sympy.codegen.cutils"], [37, "module-sympy.codegen.cxxnodes"], [37, "module-sympy.codegen.fnodes"], [37, "module-sympy.codegen.futils"], [37, "module-sympy.codegen.matrix_nodes"], [37, "module-sympy.codegen.pyutils"], [37, "module-sympy.codegen.rewriting"], [39, "module-sympy.combinatorics.graycode"], [40, "module-sympy.combinatorics.group_constructs"], [41, "module-sympy.combinatorics.group_numbers"], [43, "module-sympy.combinatorics.named_groups"], [44, "module-sympy.combinatorics.partitions"], [46, "module-sympy.combinatorics.perm_groups"], [47, "module-sympy.combinatorics.generators"], [47, "module-sympy.combinatorics.permutations"], [48, "module-sympy.combinatorics.polyhedron"], [49, "module-sympy.combinatorics.prufer"], [50, "module-sympy.combinatorics.subsets"], [51, "module-sympy.combinatorics.tensor_can"], [52, "module-sympy.combinatorics.testutil"], [53, "module-sympy.combinatorics.util"], [55, "module-sympy.core.add"], [55, "module-sympy.core.assumptions"], [55, "module-sympy.core.basic"], [55, "module-sympy.core.cache"], [55, "module-sympy.core.containers"], [55, "module-sympy.core.core"], [55, "module-sympy.core.evalf"], [55, "module-sympy.core.expr"], [55, "module-sympy.core.exprtools"], [55, "module-sympy.core.function"], [55, "module-sympy.core.kind"], [55, "module-sympy.core.mod"], [55, "module-sympy.core.mul"], [55, "module-sympy.core.multidimensional"], [55, "module-sympy.core.numbers"], [55, "module-sympy.core.power"], [55, "module-sympy.core.random"], [55, "module-sympy.core.relational"], [55, "module-sympy.core.singleton"], [55, "module-sympy.core.symbol"], [55, "module-sympy.core.sympify"], [55, "module-sympy.core.traversal"], [56, "module-sympy.crypto.crypto"], [57, "module-sympy.diffgeom"], [58, "module-sympy.discrete"], [58, "module-sympy.discrete.convolutions"], [58, "module-sympy.discrete.transforms"], [62, "module-sympy.functions"], [63, "module-sympy.functions.special.bessel"], [63, "module-sympy.functions.special.beta_functions"], [63, "module-sympy.functions.special.elliptic_integrals"], [63, "module-sympy.functions.special.error_functions"], [63, "module-sympy.functions.special.gamma_functions"], [63, "module-sympy.functions.special.mathieu_functions"], [63, "module-sympy.functions.special.polynomials"], [63, "module-sympy.functions.special.singularity_functions"], [63, "module-sympy.functions.special.zeta_functions"], [64, "module-sympy.geometry.curve"], [65, "module-sympy.geometry.ellipse"], [66, "module-sympy.geometry.entity"], [68, "module-sympy.geometry.line"], [69, "module-sympy.geometry.plane"], [70, "module-sympy.geometry.point"], [71, "module-sympy.geometry.polygon"], [72, "module-sympy.geometry.util"], [75, "module-sympy.holonomic"], [80, "module-sympy.integrals.meijerint"], [80, "module-sympy.integrals.meijerint_doc"], [82, "module-sympy.integrals"], [82, "module-sympy.integrals.intpoly"], [82, "module-sympy.integrals.transforms"], [83, "module-sympy.interactive"], [83, "module-sympy.interactive.printing"], [83, "module-sympy.interactive.session"], [84, "module-sympy.liealgebras"], [85, "module-sympy.logic"], [85, "module-sympy.logic.inference"], [86, "module-sympy.matrices.common"], [88, "module-sympy.matrices.expressions"], [88, "module-sympy.matrices.expressions.blockmatrix"], [89, "module-sympy.matrices.immutable"], [90, "module-sympy.matrices"], [91, "module-sympy.matrices.matrices"], [93, "module-sympy.matrices.sparse"], [94, "module-sympy.matrices.sparsetools"], [95, "module-sympy.ntheory.bbp_pi"], [95, "module-sympy.ntheory.continued_fraction"], [95, "module-sympy.ntheory.digits"], [95, "module-sympy.ntheory.ecm"], [95, "module-sympy.ntheory.egyptian_fraction"], [95, "module-sympy.ntheory.factor_"], [95, "module-sympy.ntheory.generate"], [95, "module-sympy.ntheory.modular"], [95, "module-sympy.ntheory.multinomial"], [95, "module-sympy.ntheory.partitions_"], [95, "module-sympy.ntheory.primetest"], [95, "module-sympy.ntheory.qs"], [95, "module-sympy.ntheory.residue_ntheory"], [97, "module-sympy.parsing"], [97, "module-sympy.parsing.sym_expr"], [98, "module-sympy.physics.continuum_mechanics.beam"], [101, "module-sympy.physics.continuum_mechanics.truss"], [104, "module-sympy.physics.control"], [105, "module-sympy.physics.control.lti"], [106, "module-sympy.physics.hep.gamma_matrices"], [107, "module-sympy.physics.hydrogen"], [108, "module-sympy.physics.matrices"], [110, "module-sympy.physics.mechanics.body"], [112, "module-sympy.physics.mechanics.joint"], [112, "module-sympy.physics.mechanics.jointsmethod"], [113, "module-sympy.physics.mechanics.kane"], [113, "module-sympy.physics.mechanics.lagrange"], [114, "module-sympy.physics.mechanics.linearize"], [115, "module-sympy.physics.mechanics.particle"], [115, "module-sympy.physics.mechanics.rigidbody"], [117, "module-sympy.physics.mechanics.system"], [128, "module-sympy.physics.mechanics"], [137, "module-sympy.physics.optics.gaussopt"], [139, "module-sympy.physics.optics.medium"], [140, "module-sympy.physics.optics.polarization"], [141, "module-sympy.physics.optics.utils"], [142, "module-sympy.physics.optics.waves"], [143, "module-sympy.physics.paulialgebra"], [144, "module-sympy.physics.qho_1d"], [145, "module-sympy.physics.quantum.anticommutator"], [146, "module-sympy.physics.quantum.cartesian"], [147, "module-sympy.physics.quantum.cg"], [148, "module-sympy.physics.quantum.circuitplot"], [149, "module-sympy.physics.quantum.commutator"], [150, "module-sympy.physics.quantum.constants"], [151, "module-sympy.physics.quantum.dagger"], [152, "module-sympy.physics.quantum.gate"], [153, "module-sympy.physics.quantum.grover"], [154, "module-sympy.physics.quantum.hilbert"], [156, "module-sympy.physics.quantum.innerproduct"], [157, "module-sympy.physics.quantum.operator"], [158, "module-sympy.physics.quantum.operatorset"], [159, "module-sympy.physics.quantum.piab"], [160, "module-sympy.physics.quantum.qapply"], [161, "module-sympy.physics.quantum.qft"], [162, "module-sympy.physics.quantum.qubit"], [163, "module-sympy.physics.quantum.represent"], [164, "module-sympy.physics.quantum.shor"], [165, "module-sympy.physics.quantum.spin"], [166, "module-sympy.physics.quantum.state"], [167, "module-sympy.physics.quantum.tensorproduct"], [168, "module-sympy.physics.secondquant"], [169, "module-sympy.physics.sho"], [170, "module-sympy.physics.units.dimensions"], [174, "module-sympy.physics.units.prefixes"], [175, "module-sympy.physics.units.quantities"], [175, "module-sympy.physics.units.util"], [176, "module-sympy.physics.units.unitsystem"], [181, "module-sympy.physics.vector.functions"], [181, "module-sympy.physics.vector.point"], [184, "module-sympy.physics.vector"], [187, "module-sympy.physics.wigner"], [188, "module-sympy.plotting.plot"], [188, "module-sympy.plotting.pygletplot"], [195, "module-sympy.polys.polyconfig"], [195, "module-sympy.polys.polyoptions"], [197, "module-sympy.polys.numberfields.modules"], [197, "module-sympy.polys.numberfields.subfield"], [198, "module-sympy.polys"], [200, "module-sympy.polys.solvers"], [202, "module-sympy.printing.aesaracode"], [202, "module-sympy.printing.c"], [202, "module-sympy.printing.codeprinter"], [202, "module-sympy.printing.conventions"], [202, "module-sympy.printing.cxx"], [202, "module-sympy.printing.fortran"], [202, "module-sympy.printing.gtk"], [202, "module-sympy.printing.jscode"], [202, "module-sympy.printing.julia"], [202, "module-sympy.printing.lambdarepr"], [202, "module-sympy.printing.latex"], [202, "module-sympy.printing.maple"], [202, "module-sympy.printing.mathematica"], [202, "module-sympy.printing.mathml"], [202, "module-sympy.printing.octave"], [202, "module-sympy.printing.precedence"], [202, "module-sympy.printing.pretty"], [202, "module-sympy.printing.pretty.pretty"], [202, "module-sympy.printing.pretty.pretty_symbology"], [202, "module-sympy.printing.pretty.stringpict"], [202, "module-sympy.printing.preview"], [202, "module-sympy.printing.printer"], [202, "module-sympy.printing.pycode"], [202, "module-sympy.printing.python"], [202, "module-sympy.printing.rcode"], [202, "module-sympy.printing.repr"], [202, "module-sympy.printing.rust"], [202, "module-sympy.printing.smtlib"], [202, "module-sympy.printing.str"], [202, "module-sympy.printing.tree"], [210, "module-sympy.sets.conditionset"], [210, "module-sympy.sets.fancysets"], [210, "module-sympy.sets.powerset"], [210, "module-sympy.sets.sets"], [212, "module-sympy.simplify.hyperexpand_doc"], [214, "module-sympy.simplify.combsimp"], [214, "module-sympy.simplify.cse_main"], [214, "module-sympy.simplify.epathtools"], [214, "module-sympy.simplify.hyperexpand"], [214, "module-sympy.simplify.powsimp"], [214, "module-sympy.simplify.radsimp"], [214, "module-sympy.simplify.ratsimp"], [214, "module-sympy.simplify.sqrtdenest"], [214, "module-sympy.simplify.trigsimp"], [217, "module-sympy.solvers.inequalities"], [218, "module-sympy.solvers.ode"], [218, "module-sympy.solvers.ode.ode"], [219, "module-sympy.solvers.pde"], [220, "module-sympy.solvers"], [220, "module-sympy.solvers.recurr"], [221, "module-sympy.solvers.solveset"], [222, "module-sympy.stats"], [222, "module-sympy.stats.crv"], [222, "module-sympy.stats.crv_types"], [222, "module-sympy.stats.frv"], [222, "module-sympy.stats.frv_types"], [222, "module-sympy.stats.rv"], [223, "module-sympy.tensor.array"], [224, "module-sympy.tensor.array.expressions"], [225, "module-sympy.tensor"], [226, "module-sympy.tensor.index_methods"], [227, "module-sympy.tensor.indexed"], [228, "module-sympy.tensor.tensor"], [229, "module-sympy.tensor.toperators"], [230, "module-sympy.testing"], [231, "module-sympy.testing.pytest"], [232, "module-sympy.testing.randtest"], [233, "module-sympy.testing.runtests"], [234, "module-sympy.utilities.autowrap"], [235, "module-sympy.utilities.codegen"], [236, "module-sympy.utilities.decorator"], [237, "module-sympy.utilities.enumerative"], [238, "module-sympy.utilities.exceptions"], [239, "module-sympy.utilities"], [240, "module-sympy.utilities.iterables"], [241, "module-sympy.utilities.lambdify"], [242, "module-sympy.utilities.memoization"], [243, "module-sympy.utilities.misc"], [244, "module-sympy.utilities.pkgdata"], [245, "module-sympy.utilities.source"], [246, "module-sympy.utilities.timeutils"], [254, "module-sympy.vector"], [263, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[26, "module-sympy"]], "sympy.abc": [[28, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[29, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[29, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[29, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[29, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[29, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[29, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[29, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[30, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[30, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[30, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[30, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[30, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[31, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[31, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[31, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[31, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[31, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[31, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[31, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[31, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[31, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[31, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[31, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[31, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[31, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[31, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[32, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[33, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[33, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[33, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[33, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[33, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[33, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[33, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[33, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[33, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[33, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[33, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[33, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[33, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[33, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[33, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[33, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[33, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[33, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[33, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[33, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[33, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[33, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[33, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[33, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[33, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[33, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[33, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[33, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[33, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[33, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[33, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[33, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[33, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[33, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[34, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[34, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[35, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[35, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[35, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[35, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[35, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[35, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[35, "module-sympy.calculus"]], "sympy.calculus.euler": [[35, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[35, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[35, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[35, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[36, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[36, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[36, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[36, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[36, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[36, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[36, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[36, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[36, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[36, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[36, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[36, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[36, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[36, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[36, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[36, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[36, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[36, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[36, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[36, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[36, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[36, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[36, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[36, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[36, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[36, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[36, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[36, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[36, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[36, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[36, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[36, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[36, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[36, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[36, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[37, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[37, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[37, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[37, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[37, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[37, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[37, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[37, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[37, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[37, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[37, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[37, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[37, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[37, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[37, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[37, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[37, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[37, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[37, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[37, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[37, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[37, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[37, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[37, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[37, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[37, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[37, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[37, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[37, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[37, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[37, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[37, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[37, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[37, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[37, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[37, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[37, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[37, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[37, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[37, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[37, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[37, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[37, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[37, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[37, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[37, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[37, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[37, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[37, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[37, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[37, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[37, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[39, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[39, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[39, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[39, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[39, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[39, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[39, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[39, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[39, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[39, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[39, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[39, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[39, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[39, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[39, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[40, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[40, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[41, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[41, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[41, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[41, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[43, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[43, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[43, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[43, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[43, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[43, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[44, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[44, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[44, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[44, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[44, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[44, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[44, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[44, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[44, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[44, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[44, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[44, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[46, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[46, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[47, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[47, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[47, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[47, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[47, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[47, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[47, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[47, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[47, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[47, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[47, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[47, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[47, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[47, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[48, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[48, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[48, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[49, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[49, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[49, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[49, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[49, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[49, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[49, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[49, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[49, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[49, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[49, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[49, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[49, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[49, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[50, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[50, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[50, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[50, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[50, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[50, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[50, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[50, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[50, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[50, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[51, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[51, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[51, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[51, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[51, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[52, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[52, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[52, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[52, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[52, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[52, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[53, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[53, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[54, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[54, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[54, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[54, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[54, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[54, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[54, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[54, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[54, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[54, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[54, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[54, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[54, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[54, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[54, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[54, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[54, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[54, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[54, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[54, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[55, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[55, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[55, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[55, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[55, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[55, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[55, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[55, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[55, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[55, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[55, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[55, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[55, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[55, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[55, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[55, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[55, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[55, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[55, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[55, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[55, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[55, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[55, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[55, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[55, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[55, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[55, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[55, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[55, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[55, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[55, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[55, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[55, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[55, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[55, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[55, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[55, "sympy.core.numbers.One"]], "pep 335": [[55, "index-0"], [55, "index-1"], [55, "index-2"], [55, "index-3"]], "pi (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[55, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[55, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[55, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[55, "index-0"], [55, "index-1"], [55, "index-2"], [55, "index-3"]], "rational (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[55, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[55, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[55, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[55, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[55, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[55, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[55, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[55, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[55, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[55, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[55, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[55, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[55, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[55, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[55, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[55, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[55, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[55, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[55, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[55, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[55, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[55, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[55, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[55, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[55, "term-algebraic"]], "antihermitian": [[55, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[55, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[55, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[55, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[55, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.as_coeff_Add"], [55, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_coeff_Add"], [55, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[55, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[55, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_coeff_Mul"], [55, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[55, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[55, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[55, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[55, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[55, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[55, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[55, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[55, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[55, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[55, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[55, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[55, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[55, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[55, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[55, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[55, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[55, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[55, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.combsimp"]], "commutative": [[55, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.compare"]], "complex": [[55, "term-complex"]], "composite": [[55, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[55, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[55, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[55, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[55, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[55, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[55, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[55, "term-even"]], "expand() (in module sympy.core.function)": [[55, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[55, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[55, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[55, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[55, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[55, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[55, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[55, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[55, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[55, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[55, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[55, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[55, "term-extended_negative"]], "extended_nonnegative": [[55, "term-extended_nonnegative"]], "extended_nonpositive": [[55, "term-extended_nonpositive"]], "extended_nonzero": [[55, "term-extended_nonzero"]], "extended_positive": [[55, "term-extended_positive"]], "extended_real": [[55, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[55, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[55, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[55, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.find"]], "finite": [[55, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[55, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[55, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[55, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[55, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[55, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[55, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[55, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[55, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[55, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[55, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[55, "sympy.core.numbers.ilcm"]], "imaginary": [[55, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[55, "sympy.core.containers.Tuple.index"]], "infinite": [[55, "term-infinite"]], "integer": [[55, "term-integer"]], "integer_log() (in module sympy.core.power)": [[55, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[55, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[55, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.invert"]], "irrational": [[55, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[55, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[55, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[55, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[55, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[55, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[55, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[55, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[55, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[55, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[55, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[55, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[55, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[55, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[55, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.negated"]], "negative": [[55, "term-negative"]], "nfloat() (in module sympy.core.function)": [[55, "sympy.core.function.nfloat"]], "nonnegative": [[55, "term-nonnegative"]], "nonpositive": [[55, "term-nonpositive"]], "nonzero": [[55, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.nsimplify"]], "odd": [[55, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[55, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[55, "sympy.core.function.Subs.point"]], "positive": [[55, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[55, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[55, "sympy.core.traversal.preorder_traversal"]], "prime": [[55, "term-prime"]], "primitive() (sympy.core.add.add method)": [[55, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[55, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[55, "sympy.core.random.random_complex_number"]], "rational": [[55, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.rcall"]], "real": [[55, "term-real"]], "refine() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[55, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[55, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[55, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[55, "sympy.core.sympify.sympify"]], "sympy.core.add": [[55, "module-sympy.core.add"]], "sympy.core.assumptions": [[55, "module-sympy.core.assumptions"]], "sympy.core.basic": [[55, "module-sympy.core.basic"]], "sympy.core.cache": [[55, "module-sympy.core.cache"]], "sympy.core.containers": [[55, "module-sympy.core.containers"]], "sympy.core.core": [[55, "module-sympy.core.core"]], "sympy.core.evalf": [[55, "module-sympy.core.evalf"]], "sympy.core.expr": [[55, "module-sympy.core.expr"]], "sympy.core.exprtools": [[55, "module-sympy.core.exprtools"]], "sympy.core.function": [[55, "module-sympy.core.function"]], "sympy.core.kind": [[55, "module-sympy.core.kind"]], "sympy.core.mod": [[55, "module-sympy.core.mod"]], "sympy.core.mul": [[55, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[55, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[55, "module-sympy.core.numbers"]], "sympy.core.power": [[55, "module-sympy.core.power"]], "sympy.core.random": [[55, "module-sympy.core.random"]], "sympy.core.relational": [[55, "module-sympy.core.relational"]], "sympy.core.singleton": [[55, "module-sympy.core.singleton"]], "sympy.core.symbol": [[55, "module-sympy.core.symbol"]], "sympy.core.sympify": [[55, "module-sympy.core.sympify"]], "sympy.core.traversal": [[55, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[55, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[55, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.together"]], "transcendental": [[55, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[55, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[55, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[55, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[55, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[55, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[55, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[55, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[55, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[55, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[55, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[55, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[55, "sympy.core.basic.Basic.xreplace"]], "zero": [[55, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[56, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[56, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[57, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[57, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[57, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[57, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[57, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[57, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[57, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[57, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[57, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[57, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[57, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[57, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[57, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[57, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[57, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[57, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[57, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[57, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[58, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[58, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[58, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[58, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[58, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[60, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[60, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[61, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[61, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[61, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[61, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[61, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[61, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[61, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[61, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[61, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[61, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[61, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[61, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[61, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[61, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[61, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[61, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[61, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[61, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[61, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[61, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[61, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[61, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[61, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[61, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[61, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[61, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[61, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[61, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[61, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[61, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[61, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[61, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[61, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[61, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[61, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[61, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[61, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[61, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[61, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[61, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[61, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[61, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[61, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[61, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[61, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[61, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[61, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[61, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[61, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[61, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[61, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[61, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[61, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[61, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[61, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[61, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[61, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[61, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[62, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[63, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[63, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[63, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[63, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.Li"], [63, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[63, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[63, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[63, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[63, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[63, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[63, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[63, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[63, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[63, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[63, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[63, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[63, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[63, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[63, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[63, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[63, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[63, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[63, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[63, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[63, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[63, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[63, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[63, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[63, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[63, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[63, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[63, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[63, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[63, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[63, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[63, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[63, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[63, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[63, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[63, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[63, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[63, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[63, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[63, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[63, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[63, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[63, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[63, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[63, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[63, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[63, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[63, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[63, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[63, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[63, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[63, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[63, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[63, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[63, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[63, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[63, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[63, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[63, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[63, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[63, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[63, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[63, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[63, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[64, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[64, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[64, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[64, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[64, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[64, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[64, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[64, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[64, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[64, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[64, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[64, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[64, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[65, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[65, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[65, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[65, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[65, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[65, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[65, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[65, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[65, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[65, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[65, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[65, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[66, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[66, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[66, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[66, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[66, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[68, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[68, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[68, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[68, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[68, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[68, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[68, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[68, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[68, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[68, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[68, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[68, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[68, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[68, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[68, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[68, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[68, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[68, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[68, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[68, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[68, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[68, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[68, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[68, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[68, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[68, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[68, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[68, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[68, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[68, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[68, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[68, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[68, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[68, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[68, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[68, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[68, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[68, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[68, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[68, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[68, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[69, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[69, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[69, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[69, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[69, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[69, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[70, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[70, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[70, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[70, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[70, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[70, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[70, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[70, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[70, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[70, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[70, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[70, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[70, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[70, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[70, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[70, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[70, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[70, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[70, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[70, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[70, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[70, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[70, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[70, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[70, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[70, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[70, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[70, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[71, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[71, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[71, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[71, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[71, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[71, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[71, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[71, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[71, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[71, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[71, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[71, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[71, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[71, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[71, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[71, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[71, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[71, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[71, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[72, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[72, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[72, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[72, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[72, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[72, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[74, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[74, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[74, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[75, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[76, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[76, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[77, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[78, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[80, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[80, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[80, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[80, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[82, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[82, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[82, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[82, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[82, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[82, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[82, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[82, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[82, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[82, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[82, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[82, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[82, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[82, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[82, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[82, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[82, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[82, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[82, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[82, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[82, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[82, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[82, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[82, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[82, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[82, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[82, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[82, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[82, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[82, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[82, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[82, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[82, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[83, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[83, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[83, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[83, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[83, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[83, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[83, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[83, "module-sympy.interactive"]], "sympy.interactive.printing": [[83, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[83, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[84, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[84, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[84, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[84, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[84, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[84, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[84, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[84, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[84, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[84, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[84, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[84, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[84, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[84, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[84, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[84, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[84, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[84, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[84, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[84, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[84, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[84, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[84, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[84, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[84, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[84, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[84, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[84, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[84, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[84, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[85, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[85, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[85, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[85, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[85, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[85, "module-sympy.logic"]], "sympy.logic.inference": [[85, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[85, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[86, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[86, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[86, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[86, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[86, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[86, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[86, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[87, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[87, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[87, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[87, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[87, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[87, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[87, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[87, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[87, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[87, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[88, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[88, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[88, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[88, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[88, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[88, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[88, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[88, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[88, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[88, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[88, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[88, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[88, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[88, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[88, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[88, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[88, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[88, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[89, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[89, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[89, "module-sympy.matrices.immutable"]], "sympy.matrices": [[90, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[91, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[91, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[91, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[91, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[91, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[91, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[91, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[91, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[91, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[91, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[91, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[91, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[91, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[91, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[91, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[91, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[91, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[91, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[91, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[91, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[91, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[91, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[91, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[91, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[91, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[91, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[92, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[92, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[93, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[93, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[93, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[93, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[94, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[94, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[94, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[94, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[95, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[95, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[95, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[95, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[95, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[95, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[95, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[95, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[95, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[95, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[95, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[95, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[95, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[95, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[95, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[95, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[95, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[95, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[95, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[95, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[95, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[95, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[95, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[95, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[95, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[95, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[95, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[95, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[95, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[95, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[95, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[95, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[95, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[95, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[95, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[95, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[95, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[95, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[95, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[95, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[95, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[95, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[95, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[95, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[95, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[95, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[97, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[97, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[97, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[97, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[97, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[97, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[97, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[97, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[97, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[97, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[97, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[97, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[97, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[98, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[98, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[98, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[98, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[101, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[101, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[101, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[103, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[104, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[105, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[105, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[105, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[105, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[105, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[105, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[105, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[105, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[105, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[105, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[105, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[105, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[105, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[105, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[105, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[105, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[105, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[105, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[105, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[105, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[105, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[105, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[105, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[105, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[105, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[105, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[105, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[105, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[105, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[105, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[105, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[105, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[105, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[105, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[105, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[105, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[105, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[105, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[105, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[105, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[105, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[105, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[105, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[105, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[105, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[105, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[105, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[105, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[105, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[106, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[106, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[106, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[106, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[106, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[107, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[107, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[107, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[107, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[107, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[108, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[108, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[108, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[108, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[108, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[110, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[110, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[110, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[110, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[110, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[110, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[110, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[111, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[111, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[112, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[112, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[112, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[112, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[112, "sympy.physics.mechanics.joint.PrismaticJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[112, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[112, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[112, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[112, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[112, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[112, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[112, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[112, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[112, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[112, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[112, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[112, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[112, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[112, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[112, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[112, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[112, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[113, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[113, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[113, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[113, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[113, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[113, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[113, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[113, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[113, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[113, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[113, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[113, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[113, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[113, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[114, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[114, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[114, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[115, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[115, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[115, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[115, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[115, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[115, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[115, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[115, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[115, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[115, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[115, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[115, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[117, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[117, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[117, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[128, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[137, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[137, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[137, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[137, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[137, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[137, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[137, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[137, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[137, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[139, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[139, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[139, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[139, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[140, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[140, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[141, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[141, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[142, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[142, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[142, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[143, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[143, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[144, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[144, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[144, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[144, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[145, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[145, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[145, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[146, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[146, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[146, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[146, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[146, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[146, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[146, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[146, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[146, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[147, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[147, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[147, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[147, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[147, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[147, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[148, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[148, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[148, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[148, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[148, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[148, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[148, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[149, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[149, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[149, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[150, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[150, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[151, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[151, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[152, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[152, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[152, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[152, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[152, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[152, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[152, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[152, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[152, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[152, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[152, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[152, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[152, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[152, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[152, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[152, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[152, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[152, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[152, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[152, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[152, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[153, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[153, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[153, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[153, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[153, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[153, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[153, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[153, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[154, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[154, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[154, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[154, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[154, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[154, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[154, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[156, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[156, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[157, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[157, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[157, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[157, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[157, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[157, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[157, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[157, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[157, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[157, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[157, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[157, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[157, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[158, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[158, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[158, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[159, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[159, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[159, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[159, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[160, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[160, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[161, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[161, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[161, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[161, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[161, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[161, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[161, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[162, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[162, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[163, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[163, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[163, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[163, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[163, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[163, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[163, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[164, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[164, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[164, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[164, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[164, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[164, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[164, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[165, "sympy.physics.quantum.spin.Rotation.D"], [165, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[165, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[165, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[166, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[166, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[166, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[166, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[166, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[166, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[166, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[166, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[166, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[166, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[166, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[166, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[166, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[166, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[166, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[167, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[167, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[167, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[168, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[168, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[168, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[168, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[168, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[168, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[168, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[168, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[168, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[168, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[168, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[168, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[168, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[168, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[168, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[168, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[168, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[168, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[168, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[168, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[168, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[168, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[168, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[168, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[168, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[168, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[168, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[168, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[168, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[168, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[168, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[168, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[168, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[168, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[168, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[169, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[169, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[169, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[170, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[170, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[170, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[170, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[170, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[170, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[170, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[170, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[170, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[170, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[170, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[170, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[170, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[174, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[174, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[175, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[175, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[175, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[175, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[175, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[175, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[175, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[175, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[175, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[175, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[176, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[176, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[176, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[176, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[176, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[176, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[178, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[178, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[178, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[178, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[178, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[178, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[178, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[178, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[178, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[178, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[178, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[178, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[179, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[180, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[180, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[180, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[180, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[180, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[180, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[181, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[181, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[181, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[181, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[181, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[181, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[181, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[182, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[182, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[182, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[182, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[184, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[187, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[187, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[188, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[188, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[188, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[188, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[188, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[188, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[188, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[188, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[188, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[188, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[188, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[188, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[188, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[188, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[188, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[188, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[188, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[188, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[189, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[189, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[189, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[189, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[189, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[189, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[189, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[189, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[189, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[189, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[189, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[189, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[189, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[189, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[189, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[189, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[189, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[189, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[189, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[189, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[189, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[189, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[189, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[191, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[191, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[191, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[191, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[191, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[191, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[191, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[191, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[191, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[191, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[191, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[191, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[193, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[193, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[193, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[193, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[193, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[193, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[193, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[193, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[193, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[193, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[193, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[193, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[193, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[193, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[193, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[193, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[193, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[193, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[193, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[193, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[193, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[193, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[193, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[193, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[193, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[193, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[193, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[193, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[193, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[193, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[193, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[193, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[193, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[193, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[193, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[193, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[193, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[193, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[193, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[193, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[193, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[193, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[193, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[193, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[193, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[193, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[193, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[193, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[193, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[193, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[193, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[193, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[193, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[193, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[193, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[193, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[193, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[193, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[193, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[193, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[193, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[193, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[193, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[193, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[193, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[193, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[193, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[193, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[193, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[193, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[193, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[193, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[193, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[193, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[193, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[193, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[195, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[195, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[195, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[195, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[195, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[195, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[195, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[195, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[195, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[195, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[195, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[195, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[195, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[195, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[195, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[195, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[195, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[195, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[195, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[195, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[195, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[195, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[195, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[195, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[195, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[195, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[197, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[197, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[197, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[197, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[197, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[197, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[197, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[197, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[197, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[197, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[197, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[197, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[197, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[197, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[197, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[197, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[197, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[197, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[197, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[197, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[197, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[197, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[197, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[197, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[197, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[197, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[197, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[197, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[197, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[197, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[197, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[197, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[197, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[197, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[197, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[197, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[197, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[198, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[198, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[198, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[198, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[198, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[198, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[198, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[198, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[198, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[198, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[198, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[198, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[198, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[198, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[198, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[198, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[198, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[198, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[198, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[198, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[198, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[198, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[198, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[198, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[198, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[198, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[198, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[198, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[198, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[198, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[198, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[198, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[198, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[198, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[198, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[198, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[198, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[198, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[198, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[198, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[198, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[198, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[198, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[198, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[198, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[198, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[198, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[198, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[198, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[198, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[198, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[198, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[198, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[198, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[198, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[198, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[198, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[199, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[200, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[200, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[200, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[200, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[200, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[200, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[202, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[202, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[202, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[202, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[202, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[202, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[202, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[202, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.G"], [202, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[202, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[202, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[202, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[202, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[202, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[202, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[202, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[202, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[202, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[202, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[202, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[202, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[202, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[202, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[202, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[202, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[202, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[202, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[202, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[202, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[202, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[202, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[202, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[202, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[202, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[202, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[202, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[202, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[202, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[202, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[202, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[202, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[202, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[202, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[202, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[202, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[202, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[202, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[202, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[202, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[202, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[202, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[202, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[202, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[202, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[202, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[202, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[202, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[202, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[202, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[202, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[202, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[202, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[202, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[202, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[202, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[202, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[202, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[202, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[202, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[202, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[202, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[202, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[202, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[202, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[202, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[202, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[202, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[202, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[202, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[202, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[202, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[202, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[202, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[202, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[202, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[202, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[202, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[202, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[202, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[202, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[202, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[202, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[202, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[202, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[202, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[202, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[202, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[202, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[202, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[202, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[202, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[202, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[202, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[202, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[202, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[202, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[202, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[202, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[202, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[202, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[202, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[202, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[202, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[202, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[202, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[202, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[202, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[202, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[202, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[202, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[202, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[202, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[202, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[202, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[202, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[202, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[202, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[202, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[202, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[202, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[202, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[202, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[202, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[202, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[202, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[202, "module-sympy.printing.latex"]], "sympy.printing.maple": [[202, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[202, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[202, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[202, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[202, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[202, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[202, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[202, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[202, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[202, "module-sympy.printing.preview"]], "sympy.printing.printer": [[202, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[202, "module-sympy.printing.pycode"]], "sympy.printing.python": [[202, "module-sympy.printing.python"]], "sympy.printing.rcode": [[202, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[202, "module-sympy.printing.repr"]], "sympy.printing.rust": [[202, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[202, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[202, "module-sympy.printing.str"]], "sympy.printing.tree": [[202, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[202, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[202, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[202, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[204, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[204, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[204, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[204, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[204, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[204, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[204, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[204, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[204, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[204, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[204, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[204, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[204, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[204, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[204, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[204, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[204, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[204, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[204, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[204, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[205, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[205, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[205, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[205, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[205, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[205, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[205, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[205, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[207, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[207, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[207, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[208, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[208, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[208, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[208, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[208, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[208, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[208, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[208, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[208, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[208, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[208, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[208, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[208, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[208, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[208, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[208, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[208, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[208, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[209, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[209, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[209, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[209, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[209, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[209, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[209, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[209, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[209, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[209, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[209, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[209, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[209, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[209, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[209, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[210, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[210, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[210, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[210, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[210, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[210, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[210, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[210, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[210, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[210, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[210, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[210, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[210, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[210, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[210, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[210, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[210, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[210, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[210, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[210, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[210, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[210, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[210, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[210, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[210, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[210, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[210, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[210, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[210, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[210, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[210, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[210, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[210, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[210, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[210, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[210, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[210, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[210, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[210, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[210, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[210, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[210, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[210, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[210, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[210, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[210, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[210, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[211, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[212, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[214, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[214, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[214, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[214, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[214, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[214, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[214, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[214, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[214, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[214, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[214, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[214, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[214, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[214, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[214, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[214, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[214, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[214, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[214, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[214, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[214, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[214, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[214, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[214, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[214, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[214, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[215, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[215, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[217, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[217, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[218, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[218, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[218, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[218, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[218, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[218, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[218, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[218, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[219, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[219, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[220, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[220, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[220, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[220, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[220, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[220, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[220, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[220, "module-sympy.solvers"]], "sympy.solvers.recurr": [[220, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[220, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[221, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[221, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[222, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[222, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[222, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[222, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[222, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[222, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[222, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[222, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[222, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[222, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[222, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[222, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[222, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[222, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[222, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[222, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[222, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[222, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[222, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[222, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[222, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[222, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[222, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[222, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[222, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[222, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[222, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[222, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[222, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[222, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[222, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[222, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[222, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[222, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[222, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[222, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[222, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[222, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[222, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[222, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[222, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[222, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[222, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[222, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[222, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[222, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[222, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[222, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[222, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[222, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[222, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[222, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[222, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[222, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[222, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[222, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[222, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[222, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[222, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[222, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[222, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[222, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[222, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[222, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[222, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[222, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[222, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[222, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[222, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[222, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[222, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[222, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[222, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[222, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[222, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[222, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[222, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[222, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[222, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[222, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[222, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[222, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[222, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[222, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[222, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[222, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[222, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[222, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[222, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[222, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[222, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[222, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[222, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[222, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[222, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[222, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[222, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[222, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[222, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[222, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[222, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[222, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[222, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[222, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[222, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[222, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[222, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[222, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[222, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[222, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[222, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[222, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[222, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[222, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[222, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[222, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[222, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[222, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[222, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[222, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[222, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[222, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[222, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[222, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[222, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[222, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[222, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[222, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[222, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[222, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[222, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[222, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[222, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[222, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[222, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[222, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[222, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[222, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[222, "sympy.stats.std"]], "sympy.stats": [[222, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[222, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[222, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[222, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[222, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[222, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[222, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[222, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[222, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[222, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[222, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[223, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[223, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[223, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[223, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[223, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[223, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[223, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[223, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[223, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[223, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[224, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[225, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[226, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[226, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[226, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[227, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[227, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[227, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[227, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[227, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[227, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[227, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[227, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[227, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[227, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[227, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[227, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[227, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[227, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[227, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[227, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[228, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[228, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[228, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[228, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[228, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[228, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[228, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[228, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[228, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[228, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[228, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[228, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[228, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[228, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[228, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[228, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[228, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[228, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[228, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[229, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[229, "module-sympy.tensor.toperators"]], "sympy.testing": [[230, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[231, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[231, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[231, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[231, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[231, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[231, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[232, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[233, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[233, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[233, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[233, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[233, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[233, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[233, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[233, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[233, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[233, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[233, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[233, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[233, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[234, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[234, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[234, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[234, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[235, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[235, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[235, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[235, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[235, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[235, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[235, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[235, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[235, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[235, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[235, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[235, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[235, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[235, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[235, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[235, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[235, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[235, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[235, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[235, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[236, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[236, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[237, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[237, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[237, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[237, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[237, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[237, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[237, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[237, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[237, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[237, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[238, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[238, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[238, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[238, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[239, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[240, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[240, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[241, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[241, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[241, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[241, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[242, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[242, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[242, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[243, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[243, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[244, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[244, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[245, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[245, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[245, "sympy.utilities.source.source"]], "sympy.utilities.source": [[245, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[246, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[246, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[247, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[247, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[247, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[247, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[247, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[247, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[247, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[247, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[247, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[247, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[247, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[247, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[247, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[247, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[247, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[247, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[247, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[247, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[247, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[247, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[247, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[248, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[248, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[248, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[248, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[248, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[248, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[248, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[248, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[248, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[248, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[248, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[249, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[249, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[249, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[249, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[249, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[249, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[249, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[249, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[249, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[249, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[254, "module-sympy.vector"]], "sympy.physics": [[263, "module-sympy.physics"]]}})